openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: Amazon API Gateway V2
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: AmazonApiGatewayV2
  version: 2018-11-29
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: apigatewayv2
  x-aws-signingName: apigateway
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/apigatewayv2-2018-11-29.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/apigateway/
servers:
- description: The AmazonApiGatewayV2 multi-region endpoint
  url: "http://apigateway.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AmazonApiGatewayV2 multi-region endpoint
  url: "https://apigateway.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AmazonApiGatewayV2 endpoint for China (Beijing) and China (Ningxia)
  url: "http://apigateway.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The AmazonApiGatewayV2 endpoint for China (Beijing) and China (Ningxia)
  url: "https://apigateway.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /v2/apis:
    get:
      description: Gets a collection of Api resources.
      operationId: GetApis
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of elements to be returned for this resource.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: The next page of elements from this collection. Not valid for
          the last element of the collection.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApisResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    post:
      description: Creates an Api resource.
      operationId: CreateApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApi_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: Imports an API.
      operationId: ImportApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "Specifies how to interpret the base path of the API during import.\
          \ Valid values are ignore, prepend, and split. The default value is ignore.\
          \ To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html\"\
          >Set the OpenAPI basePath Property</a>. Supported only for HTTP APIs."
        explode: true
        in: query
        name: basepath
        required: false
        schema:
          type: string
        style: form
      - description: "Specifies whether to rollback the API creation when a warning\
          \ is encountered. By default, API creation continues if a warning is encountered."
        explode: true
        in: query
        name: failOnWarnings
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportApi_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportApiResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/domainnames/{domainName}/apimappings:
    get:
      description: Gets API mappings.
      operationId: GetApiMappings
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The domain name.
        explode: false
        in: path
        name: domainName
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of elements to be returned for this resource.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: The next page of elements from this collection. Not valid for
          the last element of the collection.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiMappingsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    post:
      description: Creates an API mapping.
      operationId: CreateApiMapping
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The domain name.
        explode: false
        in: path
        name: domainName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiMapping_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiMappingResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/authorizers:
    get:
      description: Gets the Authorizers for an API.
      operationId: GetAuthorizers
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of elements to be returned for this resource.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: The next page of elements from this collection. Not valid for
          the last element of the collection.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthorizersResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    post:
      description: Creates an Authorizer for an API.
      operationId: CreateAuthorizer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthorizer_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAuthorizerResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/deployments:
    get:
      description: Gets the Deployments for an API.
      operationId: GetDeployments
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of elements to be returned for this resource.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: The next page of elements from this collection. Not valid for
          the last element of the collection.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    post:
      description: Creates a Deployment for an API.
      operationId: CreateDeployment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeployment_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/domainnames:
    get:
      description: Gets the domain names for an AWS account.
      operationId: GetDomainNames
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of elements to be returned for this resource.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: The next page of elements from this collection. Not valid for
          the last element of the collection.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDomainNamesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    post:
      description: Creates a domain name.
      operationId: CreateDomainName
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDomainName_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDomainNameResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/integrations:
    get:
      description: Gets the Integrations for an API.
      operationId: GetIntegrations
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of elements to be returned for this resource.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: The next page of elements from this collection. Not valid for
          the last element of the collection.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    post:
      description: Creates an Integration.
      operationId: CreateIntegration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIntegration_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIntegrationResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/integrations/{integrationId}/integrationresponses:
    get:
      description: Gets the IntegrationResponses for an Integration.
      operationId: GetIntegrationResponses
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The integration ID.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of elements to be returned for this resource.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: The next page of elements from this collection. Not valid for
          the last element of the collection.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResponsesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    post:
      description: Creates an IntegrationResponses.
      operationId: CreateIntegrationResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The integration ID.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIntegrationResponse_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIntegrationResponseResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/models:
    get:
      description: Gets the Models for an API.
      operationId: GetModels
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of elements to be returned for this resource.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: The next page of elements from this collection. Not valid for
          the last element of the collection.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    post:
      description: Creates a Model for an API.
      operationId: CreateModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModel_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModelResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/routes:
    get:
      description: Gets the Routes for an API.
      operationId: GetRoutes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of elements to be returned for this resource.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: The next page of elements from this collection. Not valid for
          the last element of the collection.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoutesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    post:
      description: Creates a Route for an API.
      operationId: CreateRoute
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoute_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/routes/{routeId}/routeresponses:
    get:
      description: Gets the RouteResponses for a Route.
      operationId: GetRouteResponses
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of elements to be returned for this resource.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: The next page of elements from this collection. Not valid for
          the last element of the collection.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The route ID.
        explode: false
        in: path
        name: routeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRouteResponsesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    post:
      description: Creates a RouteResponse for a Route.
      operationId: CreateRouteResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The route ID.
        explode: false
        in: path
        name: routeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteResponse_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteResponseResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/stages:
    get:
      description: Gets the Stages for an API.
      operationId: GetStages
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of elements to be returned for this resource.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: The next page of elements from this collection. Not valid for
          the last element of the collection.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStagesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    post:
      description: Creates a Stage for an API.
      operationId: CreateStage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStage_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateStageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/vpclinks:
    get:
      description: Gets a collection of VPC links.
      operationId: GetVpcLinks
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of elements to be returned for this resource.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: The next page of elements from this collection. Not valid for
          the last element of the collection.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVpcLinksResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: Creates a VPC link.
      operationId: CreateVpcLink
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVpcLink_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVpcLinkResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/stages/{stageName}/accesslogsettings:
    delete:
      description: "Deletes the AccessLogSettings for a Stage. To disable access logging\
        \ for a Stage, delete its AccessLogSettings."
      operationId: DeleteAccessLogSettings
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: "The stage name. Stage names can only contain alphanumeric characters,\
          \ hyphens, and underscores. Maximum length is 128 characters."
        explode: false
        in: path
        name: stageName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /v2/apis/{apiId}:
    delete:
      description: Deletes an Api resource.
      operationId: DeleteApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets an Api resource.
      operationId: GetApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates an Api resource.
      operationId: UpdateApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApi_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApiResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: Puts an Api resource.
      operationId: ReimportApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: "Specifies how to interpret the base path of the API during import.\
          \ Valid values are ignore, prepend, and split. The default value is ignore.\
          \ To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html\"\
          >Set the OpenAPI basePath Property</a>. Supported only for HTTP APIs."
        explode: true
        in: query
        name: basepath
        required: false
        schema:
          type: string
        style: form
      - description: "Specifies whether to rollback the API creation when a warning\
          \ is encountered. By default, API creation continues if a warning is encountered."
        explode: true
        in: query
        name: failOnWarnings
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportApi_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReimportApiResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/domainnames/{domainName}/apimappings/{apiMappingId}:
    delete:
      description: Deletes an API mapping.
      operationId: DeleteApiMapping
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API mapping identifier.
        explode: false
        in: path
        name: apiMappingId
        required: true
        schema:
          type: string
        style: simple
      - description: The domain name.
        explode: false
        in: path
        name: domainName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    get:
      description: Gets an API mapping.
      operationId: GetApiMapping
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API mapping identifier.
        explode: false
        in: path
        name: apiMappingId
        required: true
        schema:
          type: string
        style: simple
      - description: The domain name.
        explode: false
        in: path
        name: domainName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiMappingResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    patch:
      description: The API mapping.
      operationId: UpdateApiMapping
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API mapping identifier.
        explode: false
        in: path
        name: apiMappingId
        required: true
        schema:
          type: string
        style: simple
      - description: The domain name.
        explode: false
        in: path
        name: domainName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiMapping_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApiMappingResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/authorizers/{authorizerId}:
    delete:
      description: Deletes an Authorizer.
      operationId: DeleteAuthorizer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The authorizer identifier.
        explode: false
        in: path
        name: authorizerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets an Authorizer.
      operationId: GetAuthorizer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The authorizer identifier.
        explode: false
        in: path
        name: authorizerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthorizerResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates an Authorizer.
      operationId: UpdateAuthorizer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The authorizer identifier.
        explode: false
        in: path
        name: authorizerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthorizer_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAuthorizerResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/cors:
    delete:
      description: Deletes a CORS configuration.
      operationId: DeleteCorsConfiguration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /v2/apis/{apiId}/deployments/{deploymentId}:
    delete:
      description: Deletes a Deployment.
      operationId: DeleteDeployment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The deployment ID.
        explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a Deployment.
      operationId: GetDeployment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The deployment ID.
        explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates a Deployment.
      operationId: UpdateDeployment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The deployment ID.
        explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeployment_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDeploymentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/domainnames/{domainName}:
    delete:
      description: Deletes a domain name.
      operationId: DeleteDomainName
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The domain name.
        explode: false
        in: path
        name: domainName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a domain name.
      operationId: GetDomainName
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The domain name.
        explode: false
        in: path
        name: domainName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDomainNameResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates a domain name.
      operationId: UpdateDomainName
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The domain name.
        explode: false
        in: path
        name: domainName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDomainName_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDomainNameResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/integrations/{integrationId}:
    delete:
      description: Deletes an Integration.
      operationId: DeleteIntegration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The integration ID.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets an Integration.
      operationId: GetIntegration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The integration ID.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates an Integration.
      operationId: UpdateIntegration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The integration ID.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIntegration_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIntegrationResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}:
    delete:
      description: Deletes an IntegrationResponses.
      operationId: DeleteIntegrationResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The integration ID.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          type: string
        style: simple
      - description: The integration response ID.
        explode: false
        in: path
        name: integrationResponseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets an IntegrationResponses.
      operationId: GetIntegrationResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The integration ID.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          type: string
        style: simple
      - description: The integration response ID.
        explode: false
        in: path
        name: integrationResponseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResponseResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates an IntegrationResponses.
      operationId: UpdateIntegrationResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The integration ID.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          type: string
        style: simple
      - description: The integration response ID.
        explode: false
        in: path
        name: integrationResponseId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIntegrationResponse_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIntegrationResponseResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/models/{modelId}:
    delete:
      description: Deletes a Model.
      operationId: DeleteModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The model ID.
        explode: false
        in: path
        name: modelId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a Model.
      operationId: GetModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The model ID.
        explode: false
        in: path
        name: modelId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates a Model.
      operationId: UpdateModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The model ID.
        explode: false
        in: path
        name: modelId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateModel_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateModelResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/routes/{routeId}:
    delete:
      description: Deletes a Route.
      operationId: DeleteRoute
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The route ID.
        explode: false
        in: path
        name: routeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a Route.
      operationId: GetRoute
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The route ID.
        explode: false
        in: path
        name: routeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRouteResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates a Route.
      operationId: UpdateRoute
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The route ID.
        explode: false
        in: path
        name: routeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoute_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/routes/{routeId}/requestparameters/{requestParameterKey}:
    delete:
      description: Deletes a route request parameter. Supported only for WebSocket
        APIs.
      operationId: DeleteRouteRequestParameter
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The route request parameter key.
        explode: false
        in: path
        name: requestParameterKey
        required: true
        schema:
          type: string
        style: simple
      - description: The route ID.
        explode: false
        in: path
        name: routeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}:
    delete:
      description: Deletes a RouteResponse.
      operationId: DeleteRouteResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The route ID.
        explode: false
        in: path
        name: routeId
        required: true
        schema:
          type: string
        style: simple
      - description: The route response ID.
        explode: false
        in: path
        name: routeResponseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a RouteResponse.
      operationId: GetRouteResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The route ID.
        explode: false
        in: path
        name: routeId
        required: true
        schema:
          type: string
        style: simple
      - description: The route response ID.
        explode: false
        in: path
        name: routeResponseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRouteResponseResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates a RouteResponse.
      operationId: UpdateRouteResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The route ID.
        explode: false
        in: path
        name: routeId
        required: true
        schema:
          type: string
        style: simple
      - description: The route response ID.
        explode: false
        in: path
        name: routeResponseId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteResponse_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteResponseResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/stages/{stageName}/routesettings/{routeKey}:
    delete:
      description: Deletes the RouteSettings for a stage.
      operationId: DeleteRouteSettings
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The route key.
        explode: false
        in: path
        name: routeKey
        required: true
        schema:
          type: string
        style: simple
      - description: "The stage name. Stage names can only contain alphanumeric characters,\
          \ hyphens, and underscores. Maximum length is 128 characters."
        explode: false
        in: path
        name: stageName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /v2/apis/{apiId}/stages/{stageName}:
    delete:
      description: Deletes a Stage.
      operationId: DeleteStage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: "The stage name. Stage names can only contain alphanumeric characters,\
          \ hyphens, and underscores. Maximum length is 128 characters."
        explode: false
        in: path
        name: stageName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a Stage.
      operationId: GetStage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: "The stage name. Stage names can only contain alphanumeric characters,\
          \ hyphens, and underscores. Maximum length is 128 characters."
        explode: false
        in: path
        name: stageName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates a Stage.
      operationId: UpdateStage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: "The stage name. Stage names can contain only alphanumeric characters,\
          \ hyphens, and underscores, or be $default. Maximum length is 128 characters."
        explode: false
        in: path
        name: stageName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStage_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/vpclinks/{vpcLinkId}:
    delete:
      description: Deletes a VPC link.
      operationId: DeleteVpcLink
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ID of the VPC link.
        explode: false
        in: path
        name: vpcLinkId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVpcLinkResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a VPC link.
      operationId: GetVpcLink
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ID of the VPC link.
        explode: false
        in: path
        name: vpcLinkId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVpcLinkResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates a VPC link.
      operationId: UpdateVpcLink
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ID of the VPC link.
        explode: false
        in: path
        name: vpcLinkId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVpcLink_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVpcLinkResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/apis/{apiId}/exports/{specification}#outputType:
    get:
      description: ""
      operationId: ExportApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: "The version of the API Gateway export algorithm. API Gateway\
          \ uses the latest version by default. Currently, the only supported version\
          \ is 1.0."
        explode: true
        in: query
        name: exportVersion
        required: false
        schema:
          type: string
        style: form
      - description: Specifies whether to include <a href="https://docs.aws.amazon.com//apigateway/latest/developerguide/api-gateway-swagger-extensions.html">API
          Gateway extensions</a> in the exported API definition. API Gateway extensions
          are included by default.
        explode: true
        in: query
        name: includeExtensions
        required: false
        schema:
          type: boolean
        style: form
      - description: The output type of the exported definition file. Valid values
          are JSON and YAML.
        explode: true
        in: query
        name: outputType
        required: true
        schema:
          type: string
        style: form
      - description: "The version of the API specification to use. OAS30, for OpenAPI\
          \ 3.0, is the only supported value."
        explode: false
        in: path
        name: specification
        required: true
        schema:
          type: string
        style: simple
      - description: "The name of the API stage to export. If you don't specify this\
          \ property, a representation of the latest API configuration is exported."
        explode: true
        in: query
        name: stageName
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportApiResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /v2/apis/{apiId}/stages/{stageName}/cache/authorizers:
    delete:
      description: Resets all authorizer cache entries on a stage. Supported only
        for HTTP APIs.
      operationId: ResetAuthorizersCache
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: "The stage name. Stage names can contain only alphanumeric characters,\
          \ hyphens, and underscores, or be $default. Maximum length is 128 characters."
        explode: false
        in: path
        name: stageName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /v2/apis/{apiId}/models/{modelId}/template:
    get:
      description: Gets a model template.
      operationId: GetModelTemplate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The API identifier.
        explode: false
        in: path
        name: apiId
        required: true
        schema:
          type: string
        style: simple
      - description: The model ID.
        explode: false
        in: path
        name: modelId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelTemplateResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /v2/tags/{resource-arn}:
    get:
      description: Gets a collection of Tag resources.
      operationId: GetTags
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The resource ARN for the tag.
        explode: false
        in: path
        name: resource-arn
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTagsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-accepts:
      - application/json
    post:
      description: Creates a new Tag resource to represent a tag.
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The resource ARN for the tag.
        explode: false
        in: path
        name: resource-arn
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/tags/{resource-arn}#tagKeys:
    delete:
      description: Deletes a Tag.
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The resource ARN for the tag.
        explode: false
        in: path
        name: resource-arn
        required: true
        schema:
          type: string
        style: simple
      - description: The Tag keys to delete
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/__string'
          type: array
        style: form
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    CreateApiResponse:
      example:
        ApiGatewayManaged: ""
        RouteSelectionExpression: ""
        Description: ""
        ApiEndpoint: ""
        ImportInfo: ""
        DisableExecuteApiEndpoint: ""
        DisableSchemaValidation: ""
        Name: ""
        CorsConfiguration:
          AllowCredentials: ""
          AllowOrigins: ""
          ExposeHeaders: ""
          AllowHeaders: ""
          MaxAge: ""
          AllowMethods: ""
        Version: ""
        ProtocolType: ""
        CreatedDate: ""
        ApiId: ""
        Warnings: ""
        Tags: ""
        ApiKeySelectionExpression: ""
      properties:
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com.\
              \ The stage name is typically appended to this URI to form a complete\
              \ path to a deployed API stage."
            xml:
              name: apiEndpoint
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether an API is managed by API Gateway. You can't
              update or delete a managed API by using API Gateway. A managed API can
              be deleted only through the tooling or service that created it.
            xml:
              name: apiGatewayManaged
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API ID.
            xml:
              name: apiId
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: An API key selection expression. Supported only for WebSocket
              APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API
              Key Selection Expressions</a>.
            xml:
              name: apiKeySelectionExpression
        CorsConfiguration:
          $ref: '#/components/schemas/CreateApiResponse_CorsConfiguration'
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the API was created.
            xml:
              name: createdDate
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the API.
            xml:
              name: description
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Avoid validating models when creating a deployment. Supported
              only for WebSocket APIs.
            xml:
              name: disableSchemaValidation
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether clients can invoke your API by using the\
              \ default execute-api endpoint. By default, clients can invoke your\
              \ API with the default https://{api_id}.execute-api.{region}.amazonaws.com\
              \ endpoint. To require that clients use a custom domain name to invoke\
              \ your API, disable the default endpoint."
            xml:
              name: disableExecuteApiEndpoint
        ImportInfo:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The validation information during API import. This may include
              particular properties of your OpenAPI definition which are ignored during
              import. Supported only for HTTP APIs.
            xml:
              name: importInfo
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the API.
            xml:
              name: name
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          - description: The API protocol.
            xml:
              name: protocolType
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: "The route selection expression for the API. For HTTP APIs,\
              \ the routeSelectionExpression must be ${request.method} ${request.path}.\
              \ If not provided, this will be the default for HTTP APIs. This property\
              \ is required for WebSocket APIs."
            xml:
              name: routeSelectionExpression
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: A collection of tags associated with the API.
            xml:
              name: tags
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: A version identifier for the API.
            xml:
              name: version
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The warning messages reported when failonwarnings is turned
              on during API import.
            xml:
              name: warnings
      type: object
    __boolean:
      type: boolean
    CorsHeaderList:
      description: Represents a collection of allowed headers. Supported only for
        HTTP APIs.
      items:
        $ref: '#/components/schemas/__string'
      type: array
    CorsMethodList:
      description: Represents a collection of methods. Supported only for HTTP APIs.
      items:
        $ref: '#/components/schemas/StringWithLengthBetween1And64'
      type: array
    CorsOriginList:
      description: Represents a collection of origins. Supported only for HTTP APIs.
      items:
        $ref: '#/components/schemas/__string'
      type: array
    IntegerWithLengthBetweenMinus1And86400:
      description: An integer with a value between -1 and 86400. Supported only for
        HTTP APIs.
      maximum: 86400
      minimum: -1
      type: integer
    StringWithLengthBetween1And1600:
      description: "A string with a length between [0-1600]."
      type: string
    NotFoundException: {}
    TooManyRequestsException: {}
    BadRequestException: {}
    ConflictException: {}
    CreateApiMappingResponse:
      example:
        Stage: ""
        ApiMappingId: ""
        ApiMappingKey: ""
        ApiId: ""
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API identifier.
            xml:
              name: apiId
        ApiMappingId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API mapping identifier.
            xml:
              name: apiMappingId
        ApiMappingKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The API mapping key.
            xml:
              name: apiMappingKey
        Stage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The API stage.
            xml:
              name: stage
      type: object
    CreateAuthorizerResponse:
      example:
        IdentityValidationExpression: ""
        AuthorizerCredentialsArn: ""
        AuthorizerUri: ""
        AuthorizerId: ""
        AuthorizerType: ""
        JwtConfiguration:
          Audience: ""
          Issuer: ""
        AuthorizerResultTtlInSeconds: ""
        AuthorizerPayloadFormatVersion: ""
        IdentitySource: ""
        EnableSimpleResponses: ""
        Name: ""
      properties:
        AuthorizerCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Specifies the required credentials as an IAM role for API\
              \ Gateway to invoke the authorizer. To specify an IAM role for API Gateway\
              \ to assume, use the role's Amazon Resource Name (ARN). To use resource-based\
              \ permissions on the Lambda function, don't specify this parameter.\
              \ Supported only for REQUEST authorizers."
            xml:
              name: authorizerCredentialsArn
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The authorizer identifier.
            xml:
              name: authorizerId
        AuthorizerPayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: "Specifies the format of the payload sent to an HTTP API\
              \ Lambda authorizer. Required for HTTP API Lambda authorizers. Supported\
              \ values are 1.0 and 2.0. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>."
            xml:
              name: authorizerPayloadFormatVersion
        AuthorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          - description: "The time to live (TTL) for cached authorizer results, in\
              \ seconds. If it equals 0, authorization caching is disabled. If it\
              \ is greater than 0, API Gateway caches authorizer responses. The maximum\
              \ value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers."
            xml:
              name: authorizerResultTtlInSeconds
        AuthorizerType:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          - description: The authorizer type. Specify REQUEST for a Lambda function
              using incoming request parameters. Specify JWT to use JSON Web Tokens
              (supported only for HTTP APIs).
            xml:
              name: authorizerType
        AuthorizerUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: |-
              The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                             , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
            xml:
              name: authorizerUri
        EnableSimpleResponses:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a Lambda authorizer returns a response\
              \ in a simple format. If enabled, the Lambda authorizer can return a\
              \ boolean value instead of an IAM policy. Supported only for HTTP APIs.\
              \ To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>"
            xml:
              name: enableSimpleResponses
        IdentitySource:
          allOf:
          - $ref: '#/components/schemas/IdentitySourceList'
          - description: "<p>The identity source for which authorization is requested.</p>\
              \ <p>For a REQUEST authorizer, this is optional. The value is a set\
              \ of one or more mapping expressions of the specified request parameters.\
              \ The identity source can be headers, query string parameters, stage\
              \ variables, and context parameters. For example, if an Auth header\
              \ and a Name query string parameter are defined as identity sources,\
              \ this value is route.request.header.Auth, route.request.querystring.Name\
              \ for WebSocket APIs. For HTTP APIs, use selection expressions prefixed\
              \ with $, for example, $request.header.Auth, $request.querystring.Name.\
              \ These parameters are used to perform runtime validation for Lambda-based\
              \ authorizers by verifying all of the identity-related request parameters\
              \ are present in the request, not null, and non-empty. Only when this\
              \ is true does the authorizer invoke the authorizer Lambda function.\
              \ Otherwise, it returns a 401 Unauthorized response without calling\
              \ the Lambda function. For HTTP APIs, identity sources are also used\
              \ as the cache key when caching is enabled. To learn more, see <a href=\"\
              https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT,\
              \ a single entry that specifies where to extract the JSON Web Token\
              \ (JWT) from inbound requests. Currently only header-based and query\
              \ parameter-based selections are supported, for example $request.header.Authorization.</p>"
            xml:
              name: identitySource
        IdentityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The validation expression does not apply to the REQUEST authorizer.
            xml:
              name: identityValidationExpression
        JwtConfiguration:
          $ref: '#/components/schemas/CreateAuthorizerResponse_JwtConfiguration'
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the authorizer.
            xml:
              name: name
      type: object
    __string:
      type: string
    __listOf__string:
      items:
        $ref: '#/components/schemas/__string'
      type: array
    UriWithLengthBetween1And2048:
      description: "A string representation of a URI with a length between [1-2048]."
      type: string
    CreateDeploymentResponse:
      example:
        DeploymentId: ""
        Description: ""
        DeploymentStatusMessage: ""
        CreatedDate: ""
        AutoDeployed: ""
        DeploymentStatus: ""
      properties:
        AutoDeployed:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether a deployment was automatically released.
            xml:
              name: autoDeployed
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The date and time when the Deployment resource was created.
            xml:
              name: createdDate
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier for the deployment.
            xml:
              name: deploymentId
        DeploymentStatus:
          allOf:
          - $ref: '#/components/schemas/DeploymentStatus'
          - description: "The status of the deployment: PENDING, FAILED, or SUCCEEDED."
            xml:
              name: deploymentStatus
        DeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: May contain additional feedback on the status of an API deployment.
            xml:
              name: deploymentStatusMessage
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description for the deployment.
            xml:
              name: description
      type: object
    CreateDomainNameResponse:
      example:
        MutualTlsAuthentication:
          TruststoreWarnings: ""
          TruststoreVersion: ""
          TruststoreUri: ""
        DomainName: ""
        DomainNameConfigurations: ""
        ApiMappingSelectionExpression: ""
        Tags: ""
      properties:
        ApiMappingSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The API mapping selection expression.
            xml:
              name: apiMappingSelectionExpression
        DomainName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          - description: The name of the DomainName resource.
            xml:
              name: domainName
        DomainNameConfigurations:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigurations'
          - description: The domain name configurations.
            xml:
              name: domainNameConfigurations
        MutualTlsAuthentication:
          $ref: '#/components/schemas/CreateDomainNameResponse_MutualTlsAuthentication'
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The collection of tags associated with a domain name.
            xml:
              name: tags
      type: object
    DomainNameConfiguration:
      description: The domain name configuration.
      properties:
        ApiGatewayDomainName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: A domain name for the API.
            xml:
              name: apiGatewayDomainName
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: An AWS-managed certificate that will be used by the edge-optimized
              endpoint for this domain name. AWS Certificate Manager is the only supported
              source.
            xml:
              name: certificateArn
        CertificateName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The user-friendly name of the certificate that will be used
              by the edge-optimized endpoint for this domain name.
            xml:
              name: certificateName
        CertificateUploadDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the certificate that was used by edge-optimized
              endpoint for this domain name was uploaded.
            xml:
              name: certificateUploadDate
        DomainNameStatus:
          allOf:
          - $ref: '#/components/schemas/DomainNameStatus'
          - description: "The status of the domain name migration. The valid values\
              \ are AVAILABLE, UPDATING, PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION.\
              \ If the status is UPDATING, the domain cannot be modified further until\
              \ the existing operation is complete. If it is AVAILABLE, the domain\
              \ can be updated."
            xml:
              name: domainNameStatus
        DomainNameStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: An optional text message containing detailed information
              about status of the domain name migration.
            xml:
              name: domainNameStatusMessage
        EndpointType:
          allOf:
          - $ref: '#/components/schemas/EndpointType'
          - description: The endpoint type.
            xml:
              name: endpointType
        HostedZoneId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The Amazon Route 53 Hosted Zone ID of the endpoint.
            xml:
              name: hostedZoneId
        SecurityPolicy:
          allOf:
          - $ref: '#/components/schemas/SecurityPolicy'
          - description: The Transport Layer Security (TLS) version of the security
              policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
            xml:
              name: securityPolicy
        OwnershipVerificationCertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN of the public certificate issued by ACM to validate
              ownership of your custom domain. Only required when configuring mutual
              TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn
            xml:
              name: ownershipVerificationCertificateArn
      type: object
    StringWithLengthBetween1And64:
      description: "A string with a length between [1-64]."
      type: string
    AccessDeniedException: {}
    CreateIntegrationResult:
      example:
        ApiGatewayManaged: ""
        Description: ""
        TemplateSelectionExpression: ""
        ConnectionType: ""
        IntegrationResponseSelectionExpression: ""
        ResponseParameters: ""
        IntegrationId: ""
        IntegrationMethod: ""
        PassthroughBehavior: ""
        RequestParameters: ""
        ConnectionId: ""
        IntegrationUri: ""
        PayloadFormatVersion: ""
        CredentialsArn: ""
        RequestTemplates: ""
        TimeoutInMillis: ""
        TlsConfig:
          ServerNameToVerify: ""
        ContentHandlingStrategy: ""
        IntegrationSubtype: ""
        IntegrationType: ""
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether an integration is managed by API Gateway.\
              \ If you created an API using using quick create, the resulting integration\
              \ is managed by API Gateway. You can update a managed integration, but\
              \ you can't delete it."
            xml:
              name: apiGatewayManaged
        ConnectionId:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          - description: The ID of the VPC link for a private integration. Supported
              only for HTTP APIs.
            xml:
              name: connectionId
        ConnectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          - description: The type of the network connection to the integration endpoint.
              Specify INTERNET for connections through the public routable internet
              or VPC_LINK for private connections between API Gateway and resources
              in a VPC. The default value is INTERNET.
            xml:
              name: connectionType
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Supported only for WebSocket APIs. Specifies how to handle\
              \ response payload content type conversions. Supported values are CONVERT_TO_BINARY\
              \ and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY:\
              \ Converts a response payload from a Base64-encoded string to the corresponding\
              \ binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from\
              \ a binary blob to a Base64-encoded string.</p> <p>If this property\
              \ is not defined, the response payload will be passed through from the\
              \ integration response to the route response or method response without\
              \ modification.</p>"
            xml:
              name: contentHandlingStrategy
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Specifies the credentials required for the integration,\
              \ if any. For AWS integrations, three options are available. To specify\
              \ an IAM Role for API Gateway to assume, use the role's Amazon Resource\
              \ Name (ARN). To require that the caller's identity be passed through\
              \ from the request, specify the string arn:aws:iam::*:user/*. To use\
              \ resource-based permissions on supported AWS services, specify null."
            xml:
              name: credentialsArn
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: Represents the description of an integration.
            xml:
              name: description
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: Represents the identifier of an integration.
            xml:
              name: integrationId
        IntegrationMethod:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: Specifies the integration's HTTP method type.
            xml:
              name: integrationMethod
        IntegrationResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The integration response selection expression for the integration.
              Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration
              Response Selection Expressions</a>.
            xml:
              name: integrationResponseSelectionExpression
        IntegrationSubtype:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: "Supported only for HTTP API AWS_PROXY integrations. Specifies\
              \ the AWS service action to invoke. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html\"\
              >Integration subtype reference</a>."
            xml:
              name: integrationSubtype
        IntegrationType:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          - description: "<p>The integration type of an integration. One of the following:</p>\
              \ <p>AWS: for integrating the route or method request with an AWS service\
              \ action, including the Lambda function-invoking action. With the Lambda\
              \ function-invoking action, this is referred to as the Lambda custom\
              \ integration. With any other AWS service action, this is known as AWS\
              \ integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY:\
              \ for integrating the route or method request with a Lambda function\
              \ or other AWS service action. This integration is also referred to\
              \ as a Lambda proxy integration.</p> <p>HTTP: for integrating the route\
              \ or method request with an HTTP endpoint. This integration is also\
              \ referred to as the HTTP custom integration. Supported only for WebSocket\
              \ APIs.</p> <p>HTTP_PROXY: for integrating the route or method request\
              \ with an HTTP endpoint, with the client request passed through as-is.\
              \ This is also referred to as HTTP proxy integration.</p> <p>MOCK: for\
              \ integrating the route or method request with API Gateway as a \"loopback\"\
              \ endpoint without invoking any backend. Supported only for WebSocket\
              \ APIs.</p>"
            xml:
              name: integrationType
        IntegrationUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: "<p>For a Lambda integration, specify the URI of a Lambda\
              \ function.</p> <p>For an HTTP integration, specify a fully-qualified\
              \ URL.</p> <p>For an HTTP API private integration, specify the ARN of\
              \ an Application Load Balancer listener, Network Load Balancer listener,\
              \ or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map\
              \ service, API Gateway uses DiscoverInstances to identify resources.\
              \ You can use query parameters to target specific resources. To learn\
              \ more, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html\"\
              >DiscoverInstances</a>. For private integrations, all resources must\
              \ be owned by the same AWS account.</p>"
            xml:
              name: integrationUri
        PassthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/PassthroughBehavior'
          - description: "<p>Specifies the pass-through behavior for incoming requests\
              \ based on the Content-Type header in the request, and the available\
              \ mapping templates specified as the requestTemplates property on the\
              \ Integration resource. There are three valid values: WHEN_NO_MATCH,\
              \ WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p>\
              \ <p>WHEN_NO_MATCH passes the request body for unmapped content types\
              \ through to the integration backend without transformation.</p> <p>NEVER\
              \ rejects unmapped content types with an HTTP 415 Unsupported Media\
              \ Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the\
              \ integration has no content types mapped to templates. However, if\
              \ there is at least one content type defined, unmapped content types\
              \ will be rejected with the same HTTP 415 Unsupported Media Type response.</p>"
            xml:
              name: passthroughBehavior
        PayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: Specifies the format of the payload sent to an integration.
              Required for HTTP APIs.
            xml:
              name: payloadFormatVersion
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          - description: "<p>For WebSocket APIs, a key-value map specifying request\
              \ parameters that are passed from the method request to the backend.\
              \ The key is an integration request parameter name and the associated\
              \ value is a method request parameter value or static value that must\
              \ be enclosed within single quotes and pre-encoded as required by the\
              \ backend. The method request parameter value must match the pattern\
              \ of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>\n\
              \          , where \n            <replaceable>{location}</replaceable>\n\
              \           is querystring, path, or header; and \n            <replaceable>{name}</replaceable>\n\
              \           must be a valid and unique method request parameter name.</p>\
              \ <p>For HTTP API integrations with a specified integrationSubtype,\
              \ request parameters are a key-value map specifying parameters that\
              \ are passed to AWS_PROXY integrations. You can provide static values,\
              \ or map request data, stage variables, or context variables that are\
              \ evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\"\
              >Working with AWS service integrations for HTTP APIs</a>.</p> <p>For\
              \ HTTP API integrations, without a specified integrationSubtype request\
              \ parameters are a key-value map specifying how to transform HTTP requests\
              \ before sending them to backend integrations. The key should follow\
              \ the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;.\
              \ The action can be append, overwrite or remove. For values, you can\
              \ provide static values, or map request data, stage variables, or context\
              \ variables that are evaluated at runtime. To learn more, see <a href=\"\
              https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
              >Transforming API requests and responses</a>.</p>"
            xml:
              name: requestParameters
        RequestTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          - description: "Represents a map of Velocity templates that are applied\
              \ on the request payload based on the value of the Content-Type header\
              \ sent by the client. The content type value is the key in this map,\
              \ and the template (as a String) is the value. Supported only for WebSocket\
              \ APIs."
            xml:
              name: requestTemplates
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/ResponseParameters'
          - description: "Supported only for HTTP APIs. You use response parameters\
              \ to transform the HTTP response from a backend integration before returning\
              \ the response to clients. Specify a key-value map from a selection\
              \ key to response parameters. The selection key must be a valid HTTP\
              \ status code within the range of 200-599. Response parameters are a\
              \ key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt;\
              \ or overwrite.statuscode. The action can be append, overwrite or remove.\
              \ The value can be a static value, or map to response data, stage variables,\
              \ or context variables that are evaluated at runtime. To learn more,\
              \ see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
              >Transforming API requests and responses</a>."
            xml:
              name: responseParameters
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The template selection expression for the integration. Supported
              only for WebSocket APIs.
            xml:
              name: templateSelectionExpression
        TimeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
          - description: "Custom timeout between 50 and 29,000 milliseconds for WebSocket\
              \ APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default\
              \ timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs."
            xml:
              name: timeoutInMillis
        TlsConfig:
          $ref: '#/components/schemas/CreateIntegrationResult_TlsConfig'
      type: object
    StringWithLengthBetween1And512:
      description: "A string with a length between [1-512]."
      type: string
    StringWithLengthBetween0And32K:
      description: "A string with a length between [0-32768]."
      type: string
    IntegrationParameters:
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween1And512'
      description: "<p>For WebSocket APIs, a key-value map specifying request parameters\
        \ that are passed from the method request to the backend. The key is an integration\
        \ request parameter name and the associated value is a method request parameter\
        \ value or static value that must be enclosed within single quotes and pre-encoded\
        \ as required by the backend. The method request parameter value must match\
        \ the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>\n\
        \          , where \n            <replaceable>{location}</replaceable>\n \
        \          is querystring, path, or header; and \n            <replaceable>{name}</replaceable>\n\
        \           must be a valid and unique method request parameter name.</p>\
        \ <p>For HTTP API integrations with a specified integrationSubtype, request\
        \ parameters are a key-value map specifying parameters that are passed to\
        \ AWS_PROXY integrations. You can provide static values, or map request data,\
        \ stage variables, or context variables that are evaluated at runtime. To\
        \ learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\"\
        >Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP\
        \ API integrations without a specified integrationSubtype request parameters\
        \ are a key-value map specifying how to transform HTTP requests before sending\
        \ them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;\
        \ where action can be append, overwrite or remove. For values, you can provide\
        \ static values, or map request data, stage variables, or context variables\
        \ that are evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
        >Transforming API requests and responses</a>.</p>"
      type: object
    CreateIntegrationResponseResponse:
      example:
        ResponseTemplates: ""
        TemplateSelectionExpression: ""
        ResponseParameters: ""
        IntegrationResponseId: ""
        ContentHandlingStrategy: ""
        IntegrationResponseKey: ""
      properties:
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Supported only for WebSocket APIs. Specifies how to handle\
              \ response payload content type conversions. Supported values are CONVERT_TO_BINARY\
              \ and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY:\
              \ Converts a response payload from a Base64-encoded string to the corresponding\
              \ binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from\
              \ a binary blob to a Base64-encoded string.</p> <p>If this property\
              \ is not defined, the response payload will be passed through from the\
              \ integration response to the route response or method response without\
              \ modification.</p>"
            xml:
              name: contentHandlingStrategy
        IntegrationResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The integration response ID.
            xml:
              name: integrationResponseId
        IntegrationResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The integration response key.
            xml:
              name: integrationResponseKey
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          - description: "A key-value map specifying response parameters that are\
              \ passed to the method response from the backend. The key is a method\
              \ response header parameter name and the mapped value is an integration\
              \ response header value, a static value enclosed within a pair of single\
              \ quotes, or a JSON expression from the integration response body. The\
              \ mapping key must match the pattern of method.response.header.{name},\
              \ where name is a valid and unique header name. The mapped non-static\
              \ value must match the pattern of integration.response.header.{name}\
              \ or integration.response.body.{JSON-expression}, where name is a valid\
              \ and unique response header name and JSON-expression is a valid JSON\
              \ expression without the $ prefix."
            xml:
              name: responseParameters
        ResponseTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          - description: "The collection of response templates for the integration\
              \ response as a string-to-string map of key-value pairs. Response templates\
              \ are represented as a key/value map, with a content-type as the key\
              \ and a template as the value."
            xml:
              name: responseTemplates
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The template selection expressions for the integration response.
            xml:
              name: templateSelectionExpression
      type: object
    CreateModelResponse:
      example:
        Description: ""
        ContentType: ""
        Schema: ""
        ModelId: ""
        Name: ""
      properties:
        ContentType:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And256'
          - description: "The content-type for the model, for example, \"application/json\"\
              ."
            xml:
              name: contentType
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the model.
            xml:
              name: description
        ModelId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The model identifier.
            xml:
              name: modelId
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the model. Must be alphanumeric.
            xml:
              name: name
        Schema:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          - description: "The schema for the model. For application/json models, this\
              \ should be JSON schema draft 4 model."
            xml:
              name: schema
      type: object
    CreateRouteResult:
      example:
        ApiGatewayManaged: ""
        OperationName: ""
        RequestModels: ""
        AuthorizationScopes: ""
        RouteId: ""
        RequestParameters: ""
        Target: ""
        RouteResponseSelectionExpression: ""
        AuthorizerId: ""
        ApiKeyRequired: ""
        RouteKey: ""
        AuthorizationType: ""
        ModelSelectionExpression: ""
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a route is managed by API Gateway. If\
              \ you created an API using quick create, the $default route is managed\
              \ by API Gateway. You can't modify the $default route key."
            xml:
              name: apiGatewayManaged
        ApiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether an API key is required for this route.
              Supported only for WebSocket APIs.
            xml:
              name: apiKeyRequired
        AuthorizationScopes:
          allOf:
          - $ref: '#/components/schemas/AuthorizationScopes'
          - description: "A list of authorization scopes configured on a route. The\
              \ scopes are used with a JWT authorizer to authorize the method invocation.\
              \ The authorization works by matching the route scopes against the scopes\
              \ parsed from the access token in the incoming request. The method invocation\
              \ is authorized if any route scope matches a claimed scope in the access\
              \ token. Otherwise, the invocation is not authorized. When the route\
              \ scope is configured, the client must provide an access token instead\
              \ of an identity token for authorization purposes."
            xml:
              name: authorizationScopes
        AuthorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          - description: "The authorization type for the route. For WebSocket APIs,\
              \ valid values are NONE for open access, AWS_IAM for using AWS IAM permissions,\
              \ and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values\
              \ are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for\
              \ using AWS IAM permissions, and CUSTOM for using a Lambda authorizer."
            xml:
              name: authorizationType
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the Authorizer resource to be associated
              with this route. The authorizer identifier is generated by API Gateway
              when you created the authorizer.
            xml:
              name: authorizerId
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The model selection expression for the route. Supported only
              for WebSocket APIs.
            xml:
              name: modelSelectionExpression
        OperationName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: The operation name for the route.
            xml:
              name: operationName
        RequestModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          - description: The request models for the route. Supported only for WebSocket
              APIs.
            xml:
              name: requestModels
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          - description: The request parameters for the route. Supported only for
              WebSocket APIs.
            xml:
              name: requestParameters
        RouteId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The route ID.
            xml:
              name: routeId
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The route key for the route.
            xml:
              name: routeKey
        RouteResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The route response selection expression for the route. Supported
              only for WebSocket APIs.
            xml:
              name: routeResponseSelectionExpression
        Target:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The target for the route.
            xml:
              name: target
      type: object
    StringWithLengthBetween1And128:
      description: "A string with a length between [1-128]."
      type: string
    ParameterConstraints:
      description: "Validation constraints imposed on parameters of a request (path,\
        \ query string, headers)."
      properties:
        Required:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Whether or not the parameter is required.
            xml:
              name: required
      type: object
    CreateRouteResponseResponse:
      example:
        RouteResponseKey: ""
        ResponseParameters: ""
        RouteResponseId: ""
        ModelSelectionExpression: ""
        ResponseModels: ""
      properties:
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: Represents the model selection expression of a route response.
              Supported only for WebSocket APIs.
            xml:
              name: modelSelectionExpression
        ResponseModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          - description: Represents the response models of a route response.
            xml:
              name: responseModels
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          - description: Represents the response parameters of a route response.
            xml:
              name: responseParameters
        RouteResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: Represents the identifier of a route response.
            xml:
              name: routeResponseId
        RouteResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: Represents the route response key of a route response.
            xml:
              name: routeResponseKey
      type: object
    CreateStageResponse:
      example:
        LastUpdatedDate: ""
        ApiGatewayManaged: ""
        DeploymentId: ""
        AutoDeploy: ""
        Description: ""
        RouteSettings: ""
        StageName: ""
        StageVariables: ""
        ClientCertificateId: ""
        AccessLogSettings:
          Format: ""
          DestinationArn: ""
        CreatedDate: ""
        LastDeploymentStatusMessage: ""
        DefaultRouteSettings:
          LoggingLevel: ""
          DataTraceEnabled: ""
          ThrottlingBurstLimit: ""
          DetailedMetricsEnabled: ""
          ThrottlingRateLimit: ""
        Tags: ""
      properties:
        AccessLogSettings:
          $ref: '#/components/schemas/CreateStageResponse_AccessLogSettings'
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a stage is managed by API Gateway. If\
              \ you created an API using quick create, the $default stage is managed\
              \ by API Gateway. You can't modify the $default stage."
            xml:
              name: apiGatewayManaged
        AutoDeploy:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether updates to an API automatically trigger
              a new deployment. The default value is false.
            xml:
              name: autoDeploy
        ClientCertificateId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of a client certificate for a Stage. Supported
              only for WebSocket APIs.
            xml:
              name: clientCertificateId
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the stage was created.
            xml:
              name: createdDate
        DefaultRouteSettings:
          $ref: '#/components/schemas/CreateStageResponse_DefaultRouteSettings'
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the Deployment that the Stage is associated
              with. Can't be updated if autoDeploy is enabled.
            xml:
              name: deploymentId
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the stage.
            xml:
              name: description
        LastDeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Describes the status of the last deployment of a stage. Supported
              only for stages with autoDeploy enabled.
            xml:
              name: lastDeploymentStatusMessage
        LastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the stage was last updated.
            xml:
              name: lastUpdatedDate
        RouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettingsMap'
          - description: "Route settings for the stage, by routeKey."
            xml:
              name: routeSettings
        StageName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the stage.
            xml:
              name: stageName
        StageVariables:
          allOf:
          - $ref: '#/components/schemas/StageVariablesMap'
          - description: "A map that defines the stage variables for a stage resource.\
              \ Variable names can have alphanumeric and underscore characters, and\
              \ the values must match [A-Za-z0-9-._~:/?#&amp;=,]+."
            xml:
              name: stageVariables
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
            xml:
              name: tags
      type: object
    Arn:
      description: Represents an Amazon Resource Name (ARN).
      type: string
    StringWithLengthBetween1And1024:
      description: "A string with a length between [1-1024]."
      type: string
    LoggingLevel:
      description: The logging level.
      enum:
      - ERROR
      - INFO
      - "OFF"
      type: string
    __integer:
      type: integer
    __double:
      format: double
      type: number
    RouteSettings:
      description: Represents a collection of route settings.
      properties:
        DataTraceEnabled:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether (true) or not (false) data trace logging
              is enabled for this route. This property affects the log entries pushed
              to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
            xml:
              name: dataTraceEnabled
        DetailedMetricsEnabled:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether detailed metrics are enabled.
            xml:
              name: detailedMetricsEnabled
        LoggingLevel:
          allOf:
          - $ref: '#/components/schemas/LoggingLevel'
          - description: "Specifies the logging level for this route: INFO, ERROR,\
              \ or OFF. This property affects the log entries pushed to Amazon CloudWatch\
              \ Logs. Supported only for WebSocket APIs."
            xml:
              name: loggingLevel
        ThrottlingBurstLimit:
          allOf:
          - $ref: '#/components/schemas/__integer'
          - description: Specifies the throttling burst limit.
            xml:
              name: throttlingBurstLimit
        ThrottlingRateLimit:
          allOf:
          - $ref: '#/components/schemas/__double'
          - description: Specifies the throttling rate limit.
            xml:
              name: throttlingRateLimit
      type: object
    StringWithLengthBetween0And2048:
      description: "A string with a length between [0-2048]."
      type: string
    CreateVpcLinkResponse:
      example:
        CreatedDate: ""
        VpcLinkStatusMessage: ""
        VpcLinkVersion: ""
        VpcLinkId: ""
        SecurityGroupIds: ""
        SubnetIds: ""
        Tags: ""
        VpcLinkStatus: ""
        Name: ""
      properties:
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the VPC link was created.
            xml:
              name: createdDate
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the VPC link.
            xml:
              name: name
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          - description: A list of security group IDs for the VPC link.
            xml:
              name: securityGroupIds
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIdList'
          - description: A list of subnet IDs to include in the VPC link.
            xml:
              name: subnetIds
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: Tags for the VPC link.
            xml:
              name: tags
        VpcLinkId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The ID of the VPC link.
            xml:
              name: vpcLinkId
        VpcLinkStatus:
          allOf:
          - $ref: '#/components/schemas/VpcLinkStatus'
          - description: The status of the VPC link.
            xml:
              name: vpcLinkStatus
        VpcLinkStatusMessage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: A message summarizing the cause of the status of the VPC
              link.
            xml:
              name: vpcLinkStatusMessage
        VpcLinkVersion:
          allOf:
          - $ref: '#/components/schemas/VpcLinkVersion'
          - description: The version of the VPC link.
            xml:
              name: vpcLinkVersion
      type: object
    DeleteVpcLinkResponse:
      properties: {}
      type: object
    ExportApiResponse:
      example:
        body: body
      properties:
        body:
          description: "Represents an exported definition of an API in a particular\
            \ output format, for example, YAML. The API is serialized to the requested\
            \ specification, for example, OpenAPI 3.0."
          type: string
      type: object
    GetApiResponse:
      example:
        ApiGatewayManaged: ""
        RouteSelectionExpression: ""
        Description: ""
        ApiEndpoint: ""
        ImportInfo: ""
        DisableExecuteApiEndpoint: ""
        DisableSchemaValidation: ""
        Name: ""
        CorsConfiguration:
          AllowCredentials: ""
          AllowOrigins: ""
          ExposeHeaders: ""
          AllowHeaders: ""
          MaxAge: ""
          AllowMethods: ""
        Version: ""
        ProtocolType: ""
        CreatedDate: ""
        ApiId: ""
        Warnings: ""
        Tags: ""
        ApiKeySelectionExpression: ""
      properties:
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com.\
              \ The stage name is typically appended to this URI to form a complete\
              \ path to a deployed API stage."
            xml:
              name: apiEndpoint
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether an API is managed by API Gateway. You can't
              update or delete a managed API by using API Gateway. A managed API can
              be deleted only through the tooling or service that created it.
            xml:
              name: apiGatewayManaged
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API ID.
            xml:
              name: apiId
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: An API key selection expression. Supported only for WebSocket
              APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API
              Key Selection Expressions</a>.
            xml:
              name: apiKeySelectionExpression
        CorsConfiguration:
          $ref: '#/components/schemas/CreateApiResponse_CorsConfiguration'
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the API was created.
            xml:
              name: createdDate
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the API.
            xml:
              name: description
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Avoid validating models when creating a deployment. Supported
              only for WebSocket APIs.
            xml:
              name: disableSchemaValidation
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether clients can invoke your API by using the\
              \ default execute-api endpoint. By default, clients can invoke your\
              \ API with the default https://{api_id}.execute-api.{region}.amazonaws.com\
              \ endpoint. To require that clients use a custom domain name to invoke\
              \ your API, disable the default endpoint."
            xml:
              name: disableExecuteApiEndpoint
        ImportInfo:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The validation information during API import. This may include
              particular properties of your OpenAPI definition which are ignored during
              import. Supported only for HTTP APIs.
            xml:
              name: importInfo
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the API.
            xml:
              name: name
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          - description: The API protocol.
            xml:
              name: protocolType
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: "The route selection expression for the API. For HTTP APIs,\
              \ the routeSelectionExpression must be ${request.method} ${request.path}.\
              \ If not provided, this will be the default for HTTP APIs. This property\
              \ is required for WebSocket APIs."
            xml:
              name: routeSelectionExpression
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: A collection of tags associated with the API.
            xml:
              name: tags
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: A version identifier for the API.
            xml:
              name: version
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The warning messages reported when failonwarnings is turned
              on during API import.
            xml:
              name: warnings
      type: object
    GetApiMappingResponse:
      example:
        Stage: ""
        ApiMappingId: ""
        ApiMappingKey: ""
        ApiId: ""
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API identifier.
            xml:
              name: apiId
        ApiMappingId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API mapping identifier.
            xml:
              name: apiMappingId
        ApiMappingKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The API mapping key.
            xml:
              name: apiMappingKey
        Stage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The API stage.
            xml:
              name: stage
      type: object
    GetApiMappingsResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfApiMapping'
          - description: The elements from this collection.
            xml:
              name: items
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The next page of elements from this collection. Not valid
              for the last element of the collection.
            xml:
              name: nextToken
      type: object
    GetApisResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfApi'
          - description: The elements from this collection.
            xml:
              name: items
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The next page of elements from this collection. Not valid
              for the last element of the collection.
            xml:
              name: nextToken
      type: object
    GetAuthorizerResponse:
      example:
        IdentityValidationExpression: ""
        AuthorizerCredentialsArn: ""
        AuthorizerUri: ""
        AuthorizerId: ""
        AuthorizerType: ""
        JwtConfiguration:
          Audience: ""
          Issuer: ""
        AuthorizerResultTtlInSeconds: ""
        AuthorizerPayloadFormatVersion: ""
        IdentitySource: ""
        EnableSimpleResponses: ""
        Name: ""
      properties:
        AuthorizerCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Specifies the required credentials as an IAM role for API\
              \ Gateway to invoke the authorizer. To specify an IAM role for API Gateway\
              \ to assume, use the role's Amazon Resource Name (ARN). To use resource-based\
              \ permissions on the Lambda function, don't specify this parameter.\
              \ Supported only for REQUEST authorizers."
            xml:
              name: authorizerCredentialsArn
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The authorizer identifier.
            xml:
              name: authorizerId
        AuthorizerPayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: "Specifies the format of the payload sent to an HTTP API\
              \ Lambda authorizer. Required for HTTP API Lambda authorizers. Supported\
              \ values are 1.0 and 2.0. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>."
            xml:
              name: authorizerPayloadFormatVersion
        AuthorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          - description: "The time to live (TTL) for cached authorizer results, in\
              \ seconds. If it equals 0, authorization caching is disabled. If it\
              \ is greater than 0, API Gateway caches authorizer responses. The maximum\
              \ value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers."
            xml:
              name: authorizerResultTtlInSeconds
        AuthorizerType:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          - description: The authorizer type. Specify REQUEST for a Lambda function
              using incoming request parameters. Specify JWT to use JSON Web Tokens
              (supported only for HTTP APIs).
            xml:
              name: authorizerType
        AuthorizerUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: |-
              The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                             , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
            xml:
              name: authorizerUri
        EnableSimpleResponses:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a Lambda authorizer returns a response\
              \ in a simple format. If enabled, the Lambda authorizer can return a\
              \ boolean value instead of an IAM policy. Supported only for HTTP APIs.\
              \ To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>"
            xml:
              name: enableSimpleResponses
        IdentitySource:
          allOf:
          - $ref: '#/components/schemas/IdentitySourceList'
          - description: "<p>The identity source for which authorization is requested.</p>\
              \ <p>For a REQUEST authorizer, this is optional. The value is a set\
              \ of one or more mapping expressions of the specified request parameters.\
              \ The identity source can be headers, query string parameters, stage\
              \ variables, and context parameters. For example, if an Auth header\
              \ and a Name query string parameter are defined as identity sources,\
              \ this value is route.request.header.Auth, route.request.querystring.Name\
              \ for WebSocket APIs. For HTTP APIs, use selection expressions prefixed\
              \ with $, for example, $request.header.Auth, $request.querystring.Name.\
              \ These parameters are used to perform runtime validation for Lambda-based\
              \ authorizers by verifying all of the identity-related request parameters\
              \ are present in the request, not null, and non-empty. Only when this\
              \ is true does the authorizer invoke the authorizer Lambda function.\
              \ Otherwise, it returns a 401 Unauthorized response without calling\
              \ the Lambda function. For HTTP APIs, identity sources are also used\
              \ as the cache key when caching is enabled. To learn more, see <a href=\"\
              https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT,\
              \ a single entry that specifies where to extract the JSON Web Token\
              \ (JWT) from inbound requests. Currently only header-based and query\
              \ parameter-based selections are supported, for example $request.header.Authorization.</p>"
            xml:
              name: identitySource
        IdentityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The validation expression does not apply to the REQUEST authorizer.
            xml:
              name: identityValidationExpression
        JwtConfiguration:
          $ref: '#/components/schemas/CreateAuthorizerResponse_JwtConfiguration'
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the authorizer.
            xml:
              name: name
      type: object
    GetAuthorizersResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfAuthorizer'
          - description: The elements from this collection.
            xml:
              name: items
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The next page of elements from this collection. Not valid
              for the last element of the collection.
            xml:
              name: nextToken
      type: object
    GetDeploymentResponse:
      example:
        DeploymentId: ""
        Description: ""
        DeploymentStatusMessage: ""
        CreatedDate: ""
        AutoDeployed: ""
        DeploymentStatus: ""
      properties:
        AutoDeployed:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether a deployment was automatically released.
            xml:
              name: autoDeployed
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The date and time when the Deployment resource was created.
            xml:
              name: createdDate
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier for the deployment.
            xml:
              name: deploymentId
        DeploymentStatus:
          allOf:
          - $ref: '#/components/schemas/DeploymentStatus'
          - description: "The status of the deployment: PENDING, FAILED, or SUCCEEDED."
            xml:
              name: deploymentStatus
        DeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: May contain additional feedback on the status of an API deployment.
            xml:
              name: deploymentStatusMessage
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description for the deployment.
            xml:
              name: description
      type: object
    GetDeploymentsResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfDeployment'
          - description: The elements from this collection.
            xml:
              name: items
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The next page of elements from this collection. Not valid
              for the last element of the collection.
            xml:
              name: nextToken
      type: object
    GetDomainNameResponse:
      example:
        MutualTlsAuthentication:
          TruststoreWarnings: ""
          TruststoreVersion: ""
          TruststoreUri: ""
        DomainName: ""
        DomainNameConfigurations: ""
        ApiMappingSelectionExpression: ""
        Tags: ""
      properties:
        ApiMappingSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The API mapping selection expression.
            xml:
              name: apiMappingSelectionExpression
        DomainName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          - description: The name of the DomainName resource.
            xml:
              name: domainName
        DomainNameConfigurations:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigurations'
          - description: The domain name configurations.
            xml:
              name: domainNameConfigurations
        MutualTlsAuthentication:
          $ref: '#/components/schemas/CreateDomainNameResponse_MutualTlsAuthentication'
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The collection of tags associated with a domain name.
            xml:
              name: tags
      type: object
    GetDomainNamesResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfDomainName'
          - description: The elements from this collection.
            xml:
              name: items
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The next page of elements from this collection. Not valid
              for the last element of the collection.
            xml:
              name: nextToken
      type: object
    GetIntegrationResult:
      example:
        ApiGatewayManaged: ""
        Description: ""
        TemplateSelectionExpression: ""
        ConnectionType: ""
        IntegrationResponseSelectionExpression: ""
        ResponseParameters: ""
        IntegrationId: ""
        IntegrationMethod: ""
        PassthroughBehavior: ""
        RequestParameters: ""
        ConnectionId: ""
        IntegrationUri: ""
        PayloadFormatVersion: ""
        CredentialsArn: ""
        RequestTemplates: ""
        TimeoutInMillis: ""
        TlsConfig:
          ServerNameToVerify: ""
        ContentHandlingStrategy: ""
        IntegrationSubtype: ""
        IntegrationType: ""
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether an integration is managed by API Gateway.\
              \ If you created an API using using quick create, the resulting integration\
              \ is managed by API Gateway. You can update a managed integration, but\
              \ you can't delete it."
            xml:
              name: apiGatewayManaged
        ConnectionId:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          - description: The ID of the VPC link for a private integration. Supported
              only for HTTP APIs.
            xml:
              name: connectionId
        ConnectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          - description: The type of the network connection to the integration endpoint.
              Specify INTERNET for connections through the public routable internet
              or VPC_LINK for private connections between API Gateway and resources
              in a VPC. The default value is INTERNET.
            xml:
              name: connectionType
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Supported only for WebSocket APIs. Specifies how to handle\
              \ response payload content type conversions. Supported values are CONVERT_TO_BINARY\
              \ and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY:\
              \ Converts a response payload from a Base64-encoded string to the corresponding\
              \ binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from\
              \ a binary blob to a Base64-encoded string.</p> <p>If this property\
              \ is not defined, the response payload will be passed through from the\
              \ integration response to the route response or method response without\
              \ modification.</p>"
            xml:
              name: contentHandlingStrategy
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Specifies the credentials required for the integration,\
              \ if any. For AWS integrations, three options are available. To specify\
              \ an IAM Role for API Gateway to assume, use the role's Amazon Resource\
              \ Name (ARN). To require that the caller's identity be passed through\
              \ from the request, specify the string arn:aws:iam::*:user/*. To use\
              \ resource-based permissions on supported AWS services, specify null."
            xml:
              name: credentialsArn
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: Represents the description of an integration.
            xml:
              name: description
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: Represents the identifier of an integration.
            xml:
              name: integrationId
        IntegrationMethod:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: Specifies the integration's HTTP method type.
            xml:
              name: integrationMethod
        IntegrationResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The integration response selection expression for the integration.
              Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration
              Response Selection Expressions</a>.
            xml:
              name: integrationResponseSelectionExpression
        IntegrationSubtype:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: "Supported only for HTTP API AWS_PROXY integrations. Specifies\
              \ the AWS service action to invoke. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html\"\
              >Integration subtype reference</a>."
            xml:
              name: integrationSubtype
        IntegrationType:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          - description: "<p>The integration type of an integration. One of the following:</p>\
              \ <p>AWS: for integrating the route or method request with an AWS service\
              \ action, including the Lambda function-invoking action. With the Lambda\
              \ function-invoking action, this is referred to as the Lambda custom\
              \ integration. With any other AWS service action, this is known as AWS\
              \ integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY:\
              \ for integrating the route or method request with a Lambda function\
              \ or other AWS service action. This integration is also referred to\
              \ as a Lambda proxy integration.</p> <p>HTTP: for integrating the route\
              \ or method request with an HTTP endpoint. This integration is also\
              \ referred to as the HTTP custom integration. Supported only for WebSocket\
              \ APIs.</p> <p>HTTP_PROXY: for integrating the route or method request\
              \ with an HTTP endpoint, with the client request passed through as-is.\
              \ This is also referred to as HTTP proxy integration.</p> <p>MOCK: for\
              \ integrating the route or method request with API Gateway as a \"loopback\"\
              \ endpoint without invoking any backend. Supported only for WebSocket\
              \ APIs.</p>"
            xml:
              name: integrationType
        IntegrationUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: "<p>For a Lambda integration, specify the URI of a Lambda\
              \ function.</p> <p>For an HTTP integration, specify a fully-qualified\
              \ URL.</p> <p>For an HTTP API private integration, specify the ARN of\
              \ an Application Load Balancer listener, Network Load Balancer listener,\
              \ or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map\
              \ service, API Gateway uses DiscoverInstances to identify resources.\
              \ You can use query parameters to target specific resources. To learn\
              \ more, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html\"\
              >DiscoverInstances</a>. For private integrations, all resources must\
              \ be owned by the same AWS account.</p>"
            xml:
              name: integrationUri
        PassthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/PassthroughBehavior'
          - description: "<p>Specifies the pass-through behavior for incoming requests\
              \ based on the Content-Type header in the request, and the available\
              \ mapping templates specified as the requestTemplates property on the\
              \ Integration resource. There are three valid values: WHEN_NO_MATCH,\
              \ WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p>\
              \ <p>WHEN_NO_MATCH passes the request body for unmapped content types\
              \ through to the integration backend without transformation.</p> <p>NEVER\
              \ rejects unmapped content types with an HTTP 415 Unsupported Media\
              \ Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the\
              \ integration has no content types mapped to templates. However, if\
              \ there is at least one content type defined, unmapped content types\
              \ will be rejected with the same HTTP 415 Unsupported Media Type response.</p>"
            xml:
              name: passthroughBehavior
        PayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: Specifies the format of the payload sent to an integration.
              Required for HTTP APIs.
            xml:
              name: payloadFormatVersion
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          - description: "<p>For WebSocket APIs, a key-value map specifying request\
              \ parameters that are passed from the method request to the backend.\
              \ The key is an integration request parameter name and the associated\
              \ value is a method request parameter value or static value that must\
              \ be enclosed within single quotes and pre-encoded as required by the\
              \ backend. The method request parameter value must match the pattern\
              \ of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>\n\
              \          , where \n            <replaceable>{location}</replaceable>\n\
              \           is querystring, path, or header; and \n            <replaceable>{name}</replaceable>\n\
              \           must be a valid and unique method request parameter name.</p>\
              \ <p>For HTTP API integrations with a specified integrationSubtype,\
              \ request parameters are a key-value map specifying parameters that\
              \ are passed to AWS_PROXY integrations. You can provide static values,\
              \ or map request data, stage variables, or context variables that are\
              \ evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\"\
              >Working with AWS service integrations for HTTP APIs</a>.</p> <p>For\
              \ HTTP API integrations, without a specified integrationSubtype request\
              \ parameters are a key-value map specifying how to transform HTTP requests\
              \ before sending them to backend integrations. The key should follow\
              \ the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;.\
              \ The action can be append, overwrite or remove. For values, you can\
              \ provide static values, or map request data, stage variables, or context\
              \ variables that are evaluated at runtime. To learn more, see <a href=\"\
              https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
              >Transforming API requests and responses</a>.</p>"
            xml:
              name: requestParameters
        RequestTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          - description: "Represents a map of Velocity templates that are applied\
              \ on the request payload based on the value of the Content-Type header\
              \ sent by the client. The content type value is the key in this map,\
              \ and the template (as a String) is the value. Supported only for WebSocket\
              \ APIs."
            xml:
              name: requestTemplates
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/ResponseParameters'
          - description: "Supported only for HTTP APIs. You use response parameters\
              \ to transform the HTTP response from a backend integration before returning\
              \ the response to clients. Specify a key-value map from a selection\
              \ key to response parameters. The selection key must be a valid HTTP\
              \ status code within the range of 200-599. Response parameters are a\
              \ key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt;\
              \ or overwrite.statuscode. The action can be append, overwrite or remove.\
              \ The value can be a static value, or map to response data, stage variables,\
              \ or context variables that are evaluated at runtime. To learn more,\
              \ see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
              >Transforming API requests and responses</a>."
            xml:
              name: responseParameters
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The template selection expression for the integration. Supported
              only for WebSocket APIs.
            xml:
              name: templateSelectionExpression
        TimeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
          - description: "Custom timeout between 50 and 29,000 milliseconds for WebSocket\
              \ APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default\
              \ timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs."
            xml:
              name: timeoutInMillis
        TlsConfig:
          $ref: '#/components/schemas/CreateIntegrationResult_TlsConfig'
      type: object
    GetIntegrationResponseResponse:
      example:
        ResponseTemplates: ""
        TemplateSelectionExpression: ""
        ResponseParameters: ""
        IntegrationResponseId: ""
        ContentHandlingStrategy: ""
        IntegrationResponseKey: ""
      properties:
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Supported only for WebSocket APIs. Specifies how to handle\
              \ response payload content type conversions. Supported values are CONVERT_TO_BINARY\
              \ and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY:\
              \ Converts a response payload from a Base64-encoded string to the corresponding\
              \ binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from\
              \ a binary blob to a Base64-encoded string.</p> <p>If this property\
              \ is not defined, the response payload will be passed through from the\
              \ integration response to the route response or method response without\
              \ modification.</p>"
            xml:
              name: contentHandlingStrategy
        IntegrationResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The integration response ID.
            xml:
              name: integrationResponseId
        IntegrationResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The integration response key.
            xml:
              name: integrationResponseKey
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          - description: "A key-value map specifying response parameters that are\
              \ passed to the method response from the backend. The key is a method\
              \ response header parameter name and the mapped value is an integration\
              \ response header value, a static value enclosed within a pair of single\
              \ quotes, or a JSON expression from the integration response body. The\
              \ mapping key must match the pattern of method.response.header.{name},\
              \ where name is a valid and unique header name. The mapped non-static\
              \ value must match the pattern of integration.response.header.{name}\
              \ or integration.response.body.{JSON-expression}, where name is a valid\
              \ and unique response header name and JSON-expression is a valid JSON\
              \ expression without the $ prefix."
            xml:
              name: responseParameters
        ResponseTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          - description: "The collection of response templates for the integration\
              \ response as a string-to-string map of key-value pairs. Response templates\
              \ are represented as a key/value map, with a content-type as the key\
              \ and a template as the value."
            xml:
              name: responseTemplates
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The template selection expressions for the integration response.
            xml:
              name: templateSelectionExpression
      type: object
    GetIntegrationResponsesResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfIntegrationResponse'
          - description: The elements from this collection.
            xml:
              name: items
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The next page of elements from this collection. Not valid
              for the last element of the collection.
            xml:
              name: nextToken
      type: object
    GetIntegrationsResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfIntegration'
          - description: The elements from this collection.
            xml:
              name: items
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The next page of elements from this collection. Not valid
              for the last element of the collection.
            xml:
              name: nextToken
      type: object
    GetModelResponse:
      example:
        Description: ""
        ContentType: ""
        Schema: ""
        ModelId: ""
        Name: ""
      properties:
        ContentType:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And256'
          - description: "The content-type for the model, for example, \"application/json\"\
              ."
            xml:
              name: contentType
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the model.
            xml:
              name: description
        ModelId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The model identifier.
            xml:
              name: modelId
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the model. Must be alphanumeric.
            xml:
              name: name
        Schema:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          - description: "The schema for the model. For application/json models, this\
              \ should be JSON schema draft 4 model."
            xml:
              name: schema
      type: object
    GetModelTemplateResponse:
      example:
        Value: ""
      properties:
        Value:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The template value.
            xml:
              name: value
      type: object
    GetModelsResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfModel'
          - description: The elements from this collection.
            xml:
              name: items
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The next page of elements from this collection. Not valid
              for the last element of the collection.
            xml:
              name: nextToken
      type: object
    GetRouteResult:
      example:
        ApiGatewayManaged: ""
        OperationName: ""
        RequestModels: ""
        AuthorizationScopes: ""
        RouteId: ""
        RequestParameters: ""
        Target: ""
        RouteResponseSelectionExpression: ""
        AuthorizerId: ""
        ApiKeyRequired: ""
        RouteKey: ""
        AuthorizationType: ""
        ModelSelectionExpression: ""
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a route is managed by API Gateway. If\
              \ you created an API using quick create, the $default route is managed\
              \ by API Gateway. You can't modify the $default route key."
            xml:
              name: apiGatewayManaged
        ApiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether an API key is required for this route.
              Supported only for WebSocket APIs.
            xml:
              name: apiKeyRequired
        AuthorizationScopes:
          allOf:
          - $ref: '#/components/schemas/AuthorizationScopes'
          - description: "A list of authorization scopes configured on a route. The\
              \ scopes are used with a JWT authorizer to authorize the method invocation.\
              \ The authorization works by matching the route scopes against the scopes\
              \ parsed from the access token in the incoming request. The method invocation\
              \ is authorized if any route scope matches a claimed scope in the access\
              \ token. Otherwise, the invocation is not authorized. When the route\
              \ scope is configured, the client must provide an access token instead\
              \ of an identity token for authorization purposes."
            xml:
              name: authorizationScopes
        AuthorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          - description: "The authorization type for the route. For WebSocket APIs,\
              \ valid values are NONE for open access, AWS_IAM for using AWS IAM permissions,\
              \ and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values\
              \ are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for\
              \ using AWS IAM permissions, and CUSTOM for using a Lambda authorizer."
            xml:
              name: authorizationType
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the Authorizer resource to be associated
              with this route. The authorizer identifier is generated by API Gateway
              when you created the authorizer.
            xml:
              name: authorizerId
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The model selection expression for the route. Supported only
              for WebSocket APIs.
            xml:
              name: modelSelectionExpression
        OperationName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: The operation name for the route.
            xml:
              name: operationName
        RequestModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          - description: The request models for the route. Supported only for WebSocket
              APIs.
            xml:
              name: requestModels
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          - description: The request parameters for the route. Supported only for
              WebSocket APIs.
            xml:
              name: requestParameters
        RouteId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The route ID.
            xml:
              name: routeId
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The route key for the route.
            xml:
              name: routeKey
        RouteResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The route response selection expression for the route. Supported
              only for WebSocket APIs.
            xml:
              name: routeResponseSelectionExpression
        Target:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The target for the route.
            xml:
              name: target
      type: object
    GetRouteResponseResponse:
      example:
        RouteResponseKey: ""
        ResponseParameters: ""
        RouteResponseId: ""
        ModelSelectionExpression: ""
        ResponseModels: ""
      properties:
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: Represents the model selection expression of a route response.
              Supported only for WebSocket APIs.
            xml:
              name: modelSelectionExpression
        ResponseModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          - description: Represents the response models of a route response.
            xml:
              name: responseModels
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          - description: Represents the response parameters of a route response.
            xml:
              name: responseParameters
        RouteResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: Represents the identifier of a route response.
            xml:
              name: routeResponseId
        RouteResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: Represents the route response key of a route response.
            xml:
              name: routeResponseKey
      type: object
    GetRouteResponsesResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfRouteResponse'
          - description: The elements from this collection.
            xml:
              name: items
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The next page of elements from this collection. Not valid
              for the last element of the collection.
            xml:
              name: nextToken
      type: object
    GetRoutesResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfRoute'
          - description: The elements from this collection.
            xml:
              name: items
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The next page of elements from this collection. Not valid
              for the last element of the collection.
            xml:
              name: nextToken
      type: object
    GetStageResponse:
      example:
        LastUpdatedDate: ""
        ApiGatewayManaged: ""
        DeploymentId: ""
        AutoDeploy: ""
        Description: ""
        RouteSettings: ""
        StageName: ""
        StageVariables: ""
        ClientCertificateId: ""
        AccessLogSettings:
          Format: ""
          DestinationArn: ""
        CreatedDate: ""
        LastDeploymentStatusMessage: ""
        DefaultRouteSettings:
          LoggingLevel: ""
          DataTraceEnabled: ""
          ThrottlingBurstLimit: ""
          DetailedMetricsEnabled: ""
          ThrottlingRateLimit: ""
        Tags: ""
      properties:
        AccessLogSettings:
          $ref: '#/components/schemas/CreateStageResponse_AccessLogSettings'
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a stage is managed by API Gateway. If\
              \ you created an API using quick create, the $default stage is managed\
              \ by API Gateway. You can't modify the $default stage."
            xml:
              name: apiGatewayManaged
        AutoDeploy:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether updates to an API automatically trigger
              a new deployment. The default value is false.
            xml:
              name: autoDeploy
        ClientCertificateId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of a client certificate for a Stage. Supported
              only for WebSocket APIs.
            xml:
              name: clientCertificateId
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the stage was created.
            xml:
              name: createdDate
        DefaultRouteSettings:
          $ref: '#/components/schemas/CreateStageResponse_DefaultRouteSettings'
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the Deployment that the Stage is associated
              with. Can't be updated if autoDeploy is enabled.
            xml:
              name: deploymentId
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the stage.
            xml:
              name: description
        LastDeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Describes the status of the last deployment of a stage. Supported
              only for stages with autoDeploy enabled.
            xml:
              name: lastDeploymentStatusMessage
        LastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the stage was last updated.
            xml:
              name: lastUpdatedDate
        RouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettingsMap'
          - description: "Route settings for the stage, by routeKey."
            xml:
              name: routeSettings
        StageName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the stage.
            xml:
              name: stageName
        StageVariables:
          allOf:
          - $ref: '#/components/schemas/StageVariablesMap'
          - description: "A map that defines the stage variables for a stage resource.\
              \ Variable names can have alphanumeric and underscore characters, and\
              \ the values must match [A-Za-z0-9-._~:/?#&amp;=,]+."
            xml:
              name: stageVariables
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
            xml:
              name: tags
      type: object
    GetStagesResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfStage'
          - description: The elements from this collection.
            xml:
              name: items
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The next page of elements from this collection. Not valid
              for the last element of the collection.
            xml:
              name: nextToken
      type: object
    GetTagsResponse:
      example:
        Tags: ""
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - xml:
              name: tags
      type: object
    GetVpcLinkResponse:
      example:
        CreatedDate: ""
        VpcLinkStatusMessage: ""
        VpcLinkVersion: ""
        VpcLinkId: ""
        SecurityGroupIds: ""
        SubnetIds: ""
        Tags: ""
        VpcLinkStatus: ""
        Name: ""
      properties:
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the VPC link was created.
            xml:
              name: createdDate
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the VPC link.
            xml:
              name: name
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          - description: A list of security group IDs for the VPC link.
            xml:
              name: securityGroupIds
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIdList'
          - description: A list of subnet IDs to include in the VPC link.
            xml:
              name: subnetIds
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: Tags for the VPC link.
            xml:
              name: tags
        VpcLinkId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The ID of the VPC link.
            xml:
              name: vpcLinkId
        VpcLinkStatus:
          allOf:
          - $ref: '#/components/schemas/VpcLinkStatus'
          - description: The status of the VPC link.
            xml:
              name: vpcLinkStatus
        VpcLinkStatusMessage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: A message summarizing the cause of the status of the VPC
              link.
            xml:
              name: vpcLinkStatusMessage
        VpcLinkVersion:
          allOf:
          - $ref: '#/components/schemas/VpcLinkVersion'
          - description: The version of the VPC link.
            xml:
              name: vpcLinkVersion
      type: object
    GetVpcLinksResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfVpcLink'
          - description: A collection of VPC links.
            xml:
              name: items
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The next page of elements from this collection. Not valid
              for the last element of the collection.
            xml:
              name: nextToken
      type: object
    ImportApiResponse:
      example:
        ApiGatewayManaged: ""
        RouteSelectionExpression: ""
        Description: ""
        ApiEndpoint: ""
        ImportInfo: ""
        DisableExecuteApiEndpoint: ""
        DisableSchemaValidation: ""
        Name: ""
        CorsConfiguration:
          AllowCredentials: ""
          AllowOrigins: ""
          ExposeHeaders: ""
          AllowHeaders: ""
          MaxAge: ""
          AllowMethods: ""
        Version: ""
        ProtocolType: ""
        CreatedDate: ""
        ApiId: ""
        Warnings: ""
        Tags: ""
        ApiKeySelectionExpression: ""
      properties:
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com.\
              \ The stage name is typically appended to this URI to form a complete\
              \ path to a deployed API stage."
            xml:
              name: apiEndpoint
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether an API is managed by API Gateway. You can't
              update or delete a managed API by using API Gateway. A managed API can
              be deleted only through the tooling or service that created it.
            xml:
              name: apiGatewayManaged
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API ID.
            xml:
              name: apiId
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: An API key selection expression. Supported only for WebSocket
              APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API
              Key Selection Expressions</a>.
            xml:
              name: apiKeySelectionExpression
        CorsConfiguration:
          $ref: '#/components/schemas/CreateApiResponse_CorsConfiguration'
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the API was created.
            xml:
              name: createdDate
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the API.
            xml:
              name: description
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Avoid validating models when creating a deployment. Supported
              only for WebSocket APIs.
            xml:
              name: disableSchemaValidation
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether clients can invoke your API by using the\
              \ default execute-api endpoint. By default, clients can invoke your\
              \ API with the default https://{api_id}.execute-api.{region}.amazonaws.com\
              \ endpoint. To require that clients use a custom domain name to invoke\
              \ your API, disable the default endpoint."
            xml:
              name: disableExecuteApiEndpoint
        ImportInfo:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The validation information during API import. This may include
              particular properties of your OpenAPI definition which are ignored during
              import. Supported only for HTTP APIs.
            xml:
              name: importInfo
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the API.
            xml:
              name: name
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          - description: The API protocol.
            xml:
              name: protocolType
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: "The route selection expression for the API. For HTTP APIs,\
              \ the routeSelectionExpression must be ${request.method} ${request.path}.\
              \ If not provided, this will be the default for HTTP APIs. This property\
              \ is required for WebSocket APIs."
            xml:
              name: routeSelectionExpression
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: A collection of tags associated with the API.
            xml:
              name: tags
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: A version identifier for the API.
            xml:
              name: version
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The warning messages reported when failonwarnings is turned
              on during API import.
            xml:
              name: warnings
      type: object
    ReimportApiResponse:
      example:
        ApiGatewayManaged: ""
        RouteSelectionExpression: ""
        Description: ""
        ApiEndpoint: ""
        ImportInfo: ""
        DisableExecuteApiEndpoint: ""
        DisableSchemaValidation: ""
        Name: ""
        CorsConfiguration:
          AllowCredentials: ""
          AllowOrigins: ""
          ExposeHeaders: ""
          AllowHeaders: ""
          MaxAge: ""
          AllowMethods: ""
        Version: ""
        ProtocolType: ""
        CreatedDate: ""
        ApiId: ""
        Warnings: ""
        Tags: ""
        ApiKeySelectionExpression: ""
      properties:
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com.\
              \ The stage name is typically appended to this URI to form a complete\
              \ path to a deployed API stage."
            xml:
              name: apiEndpoint
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether an API is managed by API Gateway. You can't
              update or delete a managed API by using API Gateway. A managed API can
              be deleted only through the tooling or service that created it.
            xml:
              name: apiGatewayManaged
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API ID.
            xml:
              name: apiId
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: An API key selection expression. Supported only for WebSocket
              APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API
              Key Selection Expressions</a>.
            xml:
              name: apiKeySelectionExpression
        CorsConfiguration:
          $ref: '#/components/schemas/CreateApiResponse_CorsConfiguration'
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the API was created.
            xml:
              name: createdDate
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the API.
            xml:
              name: description
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Avoid validating models when creating a deployment. Supported
              only for WebSocket APIs.
            xml:
              name: disableSchemaValidation
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether clients can invoke your API by using the\
              \ default execute-api endpoint. By default, clients can invoke your\
              \ API with the default https://{api_id}.execute-api.{region}.amazonaws.com\
              \ endpoint. To require that clients use a custom domain name to invoke\
              \ your API, disable the default endpoint."
            xml:
              name: disableExecuteApiEndpoint
        ImportInfo:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The validation information during API import. This may include
              particular properties of your OpenAPI definition which are ignored during
              import. Supported only for HTTP APIs.
            xml:
              name: importInfo
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the API.
            xml:
              name: name
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          - description: The API protocol.
            xml:
              name: protocolType
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: "The route selection expression for the API. For HTTP APIs,\
              \ the routeSelectionExpression must be ${request.method} ${request.path}.\
              \ If not provided, this will be the default for HTTP APIs. This property\
              \ is required for WebSocket APIs."
            xml:
              name: routeSelectionExpression
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: A collection of tags associated with the API.
            xml:
              name: tags
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: A version identifier for the API.
            xml:
              name: version
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The warning messages reported when failonwarnings is turned
              on during API import.
            xml:
              name: warnings
      type: object
    TagResourceResponse:
      properties: {}
      type: object
    UpdateApiResponse:
      example:
        ApiGatewayManaged: ""
        RouteSelectionExpression: ""
        Description: ""
        ApiEndpoint: ""
        ImportInfo: ""
        DisableExecuteApiEndpoint: ""
        DisableSchemaValidation: ""
        Name: ""
        CorsConfiguration:
          AllowCredentials: ""
          AllowOrigins: ""
          ExposeHeaders: ""
          AllowHeaders: ""
          MaxAge: ""
          AllowMethods: ""
        Version: ""
        ProtocolType: ""
        CreatedDate: ""
        ApiId: ""
        Warnings: ""
        Tags: ""
        ApiKeySelectionExpression: ""
      properties:
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com.\
              \ The stage name is typically appended to this URI to form a complete\
              \ path to a deployed API stage."
            xml:
              name: apiEndpoint
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether an API is managed by API Gateway. You can't
              update or delete a managed API by using API Gateway. A managed API can
              be deleted only through the tooling or service that created it.
            xml:
              name: apiGatewayManaged
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API ID.
            xml:
              name: apiId
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: An API key selection expression. Supported only for WebSocket
              APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API
              Key Selection Expressions</a>.
            xml:
              name: apiKeySelectionExpression
        CorsConfiguration:
          $ref: '#/components/schemas/CreateApiResponse_CorsConfiguration'
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the API was created.
            xml:
              name: createdDate
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the API.
            xml:
              name: description
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Avoid validating models when creating a deployment. Supported
              only for WebSocket APIs.
            xml:
              name: disableSchemaValidation
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether clients can invoke your API by using the\
              \ default execute-api endpoint. By default, clients can invoke your\
              \ API with the default https://{api_id}.execute-api.{region}.amazonaws.com\
              \ endpoint. To require that clients use a custom domain name to invoke\
              \ your API, disable the default endpoint."
            xml:
              name: disableExecuteApiEndpoint
        ImportInfo:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The validation information during API import. This may include
              particular properties of your OpenAPI definition which are ignored during
              import. Supported only for HTTP APIs.
            xml:
              name: importInfo
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the API.
            xml:
              name: name
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          - description: The API protocol.
            xml:
              name: protocolType
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: "The route selection expression for the API. For HTTP APIs,\
              \ the routeSelectionExpression must be ${request.method} ${request.path}.\
              \ If not provided, this will be the default for HTTP APIs. This property\
              \ is required for WebSocket APIs."
            xml:
              name: routeSelectionExpression
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: A collection of tags associated with the API.
            xml:
              name: tags
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: A version identifier for the API.
            xml:
              name: version
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The warning messages reported when failonwarnings is turned
              on during API import.
            xml:
              name: warnings
      type: object
    UpdateApiMappingResponse:
      example:
        Stage: ""
        ApiMappingId: ""
        ApiMappingKey: ""
        ApiId: ""
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API identifier.
            xml:
              name: apiId
        ApiMappingId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API mapping identifier.
            xml:
              name: apiMappingId
        ApiMappingKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The API mapping key.
            xml:
              name: apiMappingKey
        Stage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The API stage.
            xml:
              name: stage
      type: object
    UpdateAuthorizerResponse:
      example:
        IdentityValidationExpression: ""
        AuthorizerCredentialsArn: ""
        AuthorizerUri: ""
        AuthorizerId: ""
        AuthorizerType: ""
        JwtConfiguration:
          Audience: ""
          Issuer: ""
        AuthorizerResultTtlInSeconds: ""
        AuthorizerPayloadFormatVersion: ""
        IdentitySource: ""
        EnableSimpleResponses: ""
        Name: ""
      properties:
        AuthorizerCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Specifies the required credentials as an IAM role for API\
              \ Gateway to invoke the authorizer. To specify an IAM role for API Gateway\
              \ to assume, use the role's Amazon Resource Name (ARN). To use resource-based\
              \ permissions on the Lambda function, don't specify this parameter.\
              \ Supported only for REQUEST authorizers."
            xml:
              name: authorizerCredentialsArn
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The authorizer identifier.
            xml:
              name: authorizerId
        AuthorizerPayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: "Specifies the format of the payload sent to an HTTP API\
              \ Lambda authorizer. Required for HTTP API Lambda authorizers. Supported\
              \ values are 1.0 and 2.0. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>."
            xml:
              name: authorizerPayloadFormatVersion
        AuthorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          - description: "The time to live (TTL) for cached authorizer results, in\
              \ seconds. If it equals 0, authorization caching is disabled. If it\
              \ is greater than 0, API Gateway caches authorizer responses. The maximum\
              \ value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers."
            xml:
              name: authorizerResultTtlInSeconds
        AuthorizerType:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          - description: The authorizer type. Specify REQUEST for a Lambda function
              using incoming request parameters. Specify JWT to use JSON Web Tokens
              (supported only for HTTP APIs).
            xml:
              name: authorizerType
        AuthorizerUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: |-
              The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                             , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
            xml:
              name: authorizerUri
        EnableSimpleResponses:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a Lambda authorizer returns a response\
              \ in a simple format. If enabled, the Lambda authorizer can return a\
              \ boolean value instead of an IAM policy. Supported only for HTTP APIs.\
              \ To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>"
            xml:
              name: enableSimpleResponses
        IdentitySource:
          allOf:
          - $ref: '#/components/schemas/IdentitySourceList'
          - description: "<p>The identity source for which authorization is requested.</p>\
              \ <p>For a REQUEST authorizer, this is optional. The value is a set\
              \ of one or more mapping expressions of the specified request parameters.\
              \ The identity source can be headers, query string parameters, stage\
              \ variables, and context parameters. For example, if an Auth header\
              \ and a Name query string parameter are defined as identity sources,\
              \ this value is route.request.header.Auth, route.request.querystring.Name\
              \ for WebSocket APIs. For HTTP APIs, use selection expressions prefixed\
              \ with $, for example, $request.header.Auth, $request.querystring.Name.\
              \ These parameters are used to perform runtime validation for Lambda-based\
              \ authorizers by verifying all of the identity-related request parameters\
              \ are present in the request, not null, and non-empty. Only when this\
              \ is true does the authorizer invoke the authorizer Lambda function.\
              \ Otherwise, it returns a 401 Unauthorized response without calling\
              \ the Lambda function. For HTTP APIs, identity sources are also used\
              \ as the cache key when caching is enabled. To learn more, see <a href=\"\
              https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT,\
              \ a single entry that specifies where to extract the JSON Web Token\
              \ (JWT) from inbound requests. Currently only header-based and query\
              \ parameter-based selections are supported, for example $request.header.Authorization.</p>"
            xml:
              name: identitySource
        IdentityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The validation expression does not apply to the REQUEST authorizer.
            xml:
              name: identityValidationExpression
        JwtConfiguration:
          $ref: '#/components/schemas/CreateAuthorizerResponse_JwtConfiguration'
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the authorizer.
            xml:
              name: name
      type: object
    UpdateDeploymentResponse:
      example:
        DeploymentId: ""
        Description: ""
        DeploymentStatusMessage: ""
        CreatedDate: ""
        AutoDeployed: ""
        DeploymentStatus: ""
      properties:
        AutoDeployed:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether a deployment was automatically released.
            xml:
              name: autoDeployed
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The date and time when the Deployment resource was created.
            xml:
              name: createdDate
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier for the deployment.
            xml:
              name: deploymentId
        DeploymentStatus:
          allOf:
          - $ref: '#/components/schemas/DeploymentStatus'
          - description: "The status of the deployment: PENDING, FAILED, or SUCCEEDED."
            xml:
              name: deploymentStatus
        DeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: May contain additional feedback on the status of an API deployment.
            xml:
              name: deploymentStatusMessage
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description for the deployment.
            xml:
              name: description
      type: object
    UpdateDomainNameResponse:
      example:
        MutualTlsAuthentication:
          TruststoreWarnings: ""
          TruststoreVersion: ""
          TruststoreUri: ""
        DomainName: ""
        DomainNameConfigurations: ""
        ApiMappingSelectionExpression: ""
        Tags: ""
      properties:
        ApiMappingSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The API mapping selection expression.
            xml:
              name: apiMappingSelectionExpression
        DomainName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          - description: The name of the DomainName resource.
            xml:
              name: domainName
        DomainNameConfigurations:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigurations'
          - description: The domain name configurations.
            xml:
              name: domainNameConfigurations
        MutualTlsAuthentication:
          $ref: '#/components/schemas/CreateDomainNameResponse_MutualTlsAuthentication'
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The collection of tags associated with a domain name.
            xml:
              name: tags
      type: object
    UpdateIntegrationResult:
      example:
        ApiGatewayManaged: ""
        Description: ""
        TemplateSelectionExpression: ""
        ConnectionType: ""
        IntegrationResponseSelectionExpression: ""
        ResponseParameters: ""
        IntegrationId: ""
        IntegrationMethod: ""
        PassthroughBehavior: ""
        RequestParameters: ""
        ConnectionId: ""
        IntegrationUri: ""
        PayloadFormatVersion: ""
        CredentialsArn: ""
        RequestTemplates: ""
        TimeoutInMillis: ""
        TlsConfig:
          ServerNameToVerify: ""
        ContentHandlingStrategy: ""
        IntegrationSubtype: ""
        IntegrationType: ""
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether an integration is managed by API Gateway.\
              \ If you created an API using using quick create, the resulting integration\
              \ is managed by API Gateway. You can update a managed integration, but\
              \ you can't delete it."
            xml:
              name: apiGatewayManaged
        ConnectionId:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          - description: The ID of the VPC link for a private integration. Supported
              only for HTTP APIs.
            xml:
              name: connectionId
        ConnectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          - description: The type of the network connection to the integration endpoint.
              Specify INTERNET for connections through the public routable internet
              or VPC_LINK for private connections between API Gateway and resources
              in a VPC. The default value is INTERNET.
            xml:
              name: connectionType
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Supported only for WebSocket APIs. Specifies how to handle\
              \ response payload content type conversions. Supported values are CONVERT_TO_BINARY\
              \ and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY:\
              \ Converts a response payload from a Base64-encoded string to the corresponding\
              \ binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from\
              \ a binary blob to a Base64-encoded string.</p> <p>If this property\
              \ is not defined, the response payload will be passed through from the\
              \ integration response to the route response or method response without\
              \ modification.</p>"
            xml:
              name: contentHandlingStrategy
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Specifies the credentials required for the integration,\
              \ if any. For AWS integrations, three options are available. To specify\
              \ an IAM Role for API Gateway to assume, use the role's Amazon Resource\
              \ Name (ARN). To require that the caller's identity be passed through\
              \ from the request, specify the string arn:aws:iam::*:user/*. To use\
              \ resource-based permissions on supported AWS services, specify null."
            xml:
              name: credentialsArn
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: Represents the description of an integration.
            xml:
              name: description
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: Represents the identifier of an integration.
            xml:
              name: integrationId
        IntegrationMethod:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: Specifies the integration's HTTP method type.
            xml:
              name: integrationMethod
        IntegrationResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The integration response selection expression for the integration.
              Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration
              Response Selection Expressions</a>.
            xml:
              name: integrationResponseSelectionExpression
        IntegrationSubtype:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: "Supported only for HTTP API AWS_PROXY integrations. Specifies\
              \ the AWS service action to invoke. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html\"\
              >Integration subtype reference</a>."
            xml:
              name: integrationSubtype
        IntegrationType:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          - description: "<p>The integration type of an integration. One of the following:</p>\
              \ <p>AWS: for integrating the route or method request with an AWS service\
              \ action, including the Lambda function-invoking action. With the Lambda\
              \ function-invoking action, this is referred to as the Lambda custom\
              \ integration. With any other AWS service action, this is known as AWS\
              \ integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY:\
              \ for integrating the route or method request with a Lambda function\
              \ or other AWS service action. This integration is also referred to\
              \ as a Lambda proxy integration.</p> <p>HTTP: for integrating the route\
              \ or method request with an HTTP endpoint. This integration is also\
              \ referred to as the HTTP custom integration. Supported only for WebSocket\
              \ APIs.</p> <p>HTTP_PROXY: for integrating the route or method request\
              \ with an HTTP endpoint, with the client request passed through as-is.\
              \ This is also referred to as HTTP proxy integration.</p> <p>MOCK: for\
              \ integrating the route or method request with API Gateway as a \"loopback\"\
              \ endpoint without invoking any backend. Supported only for WebSocket\
              \ APIs.</p>"
            xml:
              name: integrationType
        IntegrationUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: "<p>For a Lambda integration, specify the URI of a Lambda\
              \ function.</p> <p>For an HTTP integration, specify a fully-qualified\
              \ URL.</p> <p>For an HTTP API private integration, specify the ARN of\
              \ an Application Load Balancer listener, Network Load Balancer listener,\
              \ or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map\
              \ service, API Gateway uses DiscoverInstances to identify resources.\
              \ You can use query parameters to target specific resources. To learn\
              \ more, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html\"\
              >DiscoverInstances</a>. For private integrations, all resources must\
              \ be owned by the same AWS account.</p>"
            xml:
              name: integrationUri
        PassthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/PassthroughBehavior'
          - description: "<p>Specifies the pass-through behavior for incoming requests\
              \ based on the Content-Type header in the request, and the available\
              \ mapping templates specified as the requestTemplates property on the\
              \ Integration resource. There are three valid values: WHEN_NO_MATCH,\
              \ WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p>\
              \ <p>WHEN_NO_MATCH passes the request body for unmapped content types\
              \ through to the integration backend without transformation.</p> <p>NEVER\
              \ rejects unmapped content types with an HTTP 415 Unsupported Media\
              \ Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the\
              \ integration has no content types mapped to templates. However, if\
              \ there is at least one content type defined, unmapped content types\
              \ will be rejected with the same HTTP 415 Unsupported Media Type response.</p>"
            xml:
              name: passthroughBehavior
        PayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: Specifies the format of the payload sent to an integration.
              Required for HTTP APIs.
            xml:
              name: payloadFormatVersion
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          - description: "<p>For WebSocket APIs, a key-value map specifying request\
              \ parameters that are passed from the method request to the backend.\
              \ The key is an integration request parameter name and the associated\
              \ value is a method request parameter value or static value that must\
              \ be enclosed within single quotes and pre-encoded as required by the\
              \ backend. The method request parameter value must match the pattern\
              \ of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>\n\
              \          , where \n            <replaceable>{location}</replaceable>\n\
              \           is querystring, path, or header; and \n            <replaceable>{name}</replaceable>\n\
              \           must be a valid and unique method request parameter name.</p>\
              \ <p>For HTTP API integrations with a specified integrationSubtype,\
              \ request parameters are a key-value map specifying parameters that\
              \ are passed to AWS_PROXY integrations. You can provide static values,\
              \ or map request data, stage variables, or context variables that are\
              \ evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\"\
              >Working with AWS service integrations for HTTP APIs</a>.</p> <p>For\
              \ HTTP API integrations, without a specified integrationSubtype request\
              \ parameters are a key-value map specifying how to transform HTTP requests\
              \ before sending them to backend integrations. The key should follow\
              \ the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;.\
              \ The action can be append, overwrite or remove. For values, you can\
              \ provide static values, or map request data, stage variables, or context\
              \ variables that are evaluated at runtime. To learn more, see <a href=\"\
              https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
              >Transforming API requests and responses</a>.</p>"
            xml:
              name: requestParameters
        RequestTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          - description: "Represents a map of Velocity templates that are applied\
              \ on the request payload based on the value of the Content-Type header\
              \ sent by the client. The content type value is the key in this map,\
              \ and the template (as a String) is the value. Supported only for WebSocket\
              \ APIs."
            xml:
              name: requestTemplates
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/ResponseParameters'
          - description: "Supported only for HTTP APIs. You use response parameters\
              \ to transform the HTTP response from a backend integration before returning\
              \ the response to clients. Specify a key-value map from a selection\
              \ key to response parameters. The selection key must be a valid HTTP\
              \ status code within the range of 200-599. Response parameters are a\
              \ key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt;\
              \ or overwrite.statuscode. The action can be append, overwrite or remove.\
              \ The value can be a static value, or map to response data, stage variables,\
              \ or context variables that are evaluated at runtime. To learn more,\
              \ see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
              >Transforming API requests and responses</a>."
            xml:
              name: responseParameters
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The template selection expression for the integration. Supported
              only for WebSocket APIs.
            xml:
              name: templateSelectionExpression
        TimeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
          - description: "Custom timeout between 50 and 29,000 milliseconds for WebSocket\
              \ APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default\
              \ timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs."
            xml:
              name: timeoutInMillis
        TlsConfig:
          $ref: '#/components/schemas/CreateIntegrationResult_TlsConfig'
      type: object
    UpdateIntegrationResponseResponse:
      example:
        ResponseTemplates: ""
        TemplateSelectionExpression: ""
        ResponseParameters: ""
        IntegrationResponseId: ""
        ContentHandlingStrategy: ""
        IntegrationResponseKey: ""
      properties:
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Supported only for WebSocket APIs. Specifies how to handle\
              \ response payload content type conversions. Supported values are CONVERT_TO_BINARY\
              \ and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY:\
              \ Converts a response payload from a Base64-encoded string to the corresponding\
              \ binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from\
              \ a binary blob to a Base64-encoded string.</p> <p>If this property\
              \ is not defined, the response payload will be passed through from the\
              \ integration response to the route response or method response without\
              \ modification.</p>"
            xml:
              name: contentHandlingStrategy
        IntegrationResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The integration response ID.
            xml:
              name: integrationResponseId
        IntegrationResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The integration response key.
            xml:
              name: integrationResponseKey
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          - description: "A key-value map specifying response parameters that are\
              \ passed to the method response from the backend. The key is a method\
              \ response header parameter name and the mapped value is an integration\
              \ response header value, a static value enclosed within a pair of single\
              \ quotes, or a JSON expression from the integration response body. The\
              \ mapping key must match the pattern of method.response.header.{name},\
              \ where name is a valid and unique header name. The mapped non-static\
              \ value must match the pattern of integration.response.header.{name}\
              \ or integration.response.body.{JSON-expression}, where name is a valid\
              \ and unique response header name and JSON-expression is a valid JSON\
              \ expression without the $ prefix."
            xml:
              name: responseParameters
        ResponseTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          - description: "The collection of response templates for the integration\
              \ response as a string-to-string map of key-value pairs. Response templates\
              \ are represented as a key/value map, with a content-type as the key\
              \ and a template as the value."
            xml:
              name: responseTemplates
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The template selection expressions for the integration response.
            xml:
              name: templateSelectionExpression
      type: object
    UpdateModelResponse:
      example:
        Description: ""
        ContentType: ""
        Schema: ""
        ModelId: ""
        Name: ""
      properties:
        ContentType:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And256'
          - description: "The content-type for the model, for example, \"application/json\"\
              ."
            xml:
              name: contentType
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the model.
            xml:
              name: description
        ModelId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The model identifier.
            xml:
              name: modelId
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the model. Must be alphanumeric.
            xml:
              name: name
        Schema:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          - description: "The schema for the model. For application/json models, this\
              \ should be JSON schema draft 4 model."
            xml:
              name: schema
      type: object
    UpdateRouteResult:
      example:
        ApiGatewayManaged: ""
        OperationName: ""
        RequestModels: ""
        AuthorizationScopes: ""
        RouteId: ""
        RequestParameters: ""
        Target: ""
        RouteResponseSelectionExpression: ""
        AuthorizerId: ""
        ApiKeyRequired: ""
        RouteKey: ""
        AuthorizationType: ""
        ModelSelectionExpression: ""
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a route is managed by API Gateway. If\
              \ you created an API using quick create, the $default route is managed\
              \ by API Gateway. You can't modify the $default route key."
            xml:
              name: apiGatewayManaged
        ApiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether an API key is required for this route.
              Supported only for WebSocket APIs.
            xml:
              name: apiKeyRequired
        AuthorizationScopes:
          allOf:
          - $ref: '#/components/schemas/AuthorizationScopes'
          - description: "A list of authorization scopes configured on a route. The\
              \ scopes are used with a JWT authorizer to authorize the method invocation.\
              \ The authorization works by matching the route scopes against the scopes\
              \ parsed from the access token in the incoming request. The method invocation\
              \ is authorized if any route scope matches a claimed scope in the access\
              \ token. Otherwise, the invocation is not authorized. When the route\
              \ scope is configured, the client must provide an access token instead\
              \ of an identity token for authorization purposes."
            xml:
              name: authorizationScopes
        AuthorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          - description: "The authorization type for the route. For WebSocket APIs,\
              \ valid values are NONE for open access, AWS_IAM for using AWS IAM permissions,\
              \ and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values\
              \ are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for\
              \ using AWS IAM permissions, and CUSTOM for using a Lambda authorizer."
            xml:
              name: authorizationType
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the Authorizer resource to be associated
              with this route. The authorizer identifier is generated by API Gateway
              when you created the authorizer.
            xml:
              name: authorizerId
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The model selection expression for the route. Supported only
              for WebSocket APIs.
            xml:
              name: modelSelectionExpression
        OperationName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: The operation name for the route.
            xml:
              name: operationName
        RequestModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          - description: The request models for the route. Supported only for WebSocket
              APIs.
            xml:
              name: requestModels
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          - description: The request parameters for the route. Supported only for
              WebSocket APIs.
            xml:
              name: requestParameters
        RouteId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The route ID.
            xml:
              name: routeId
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The route key for the route.
            xml:
              name: routeKey
        RouteResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The route response selection expression for the route. Supported
              only for WebSocket APIs.
            xml:
              name: routeResponseSelectionExpression
        Target:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The target for the route.
            xml:
              name: target
      type: object
    UpdateRouteResponseResponse:
      example:
        RouteResponseKey: ""
        ResponseParameters: ""
        RouteResponseId: ""
        ModelSelectionExpression: ""
        ResponseModels: ""
      properties:
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: Represents the model selection expression of a route response.
              Supported only for WebSocket APIs.
            xml:
              name: modelSelectionExpression
        ResponseModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          - description: Represents the response models of a route response.
            xml:
              name: responseModels
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          - description: Represents the response parameters of a route response.
            xml:
              name: responseParameters
        RouteResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: Represents the identifier of a route response.
            xml:
              name: routeResponseId
        RouteResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: Represents the route response key of a route response.
            xml:
              name: routeResponseKey
      type: object
    UpdateStageResponse:
      example:
        LastUpdatedDate: ""
        ApiGatewayManaged: ""
        DeploymentId: ""
        AutoDeploy: ""
        Description: ""
        RouteSettings: ""
        StageName: ""
        StageVariables: ""
        ClientCertificateId: ""
        AccessLogSettings:
          Format: ""
          DestinationArn: ""
        CreatedDate: ""
        LastDeploymentStatusMessage: ""
        DefaultRouteSettings:
          LoggingLevel: ""
          DataTraceEnabled: ""
          ThrottlingBurstLimit: ""
          DetailedMetricsEnabled: ""
          ThrottlingRateLimit: ""
        Tags: ""
      properties:
        AccessLogSettings:
          $ref: '#/components/schemas/CreateStageResponse_AccessLogSettings'
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a stage is managed by API Gateway. If\
              \ you created an API using quick create, the $default stage is managed\
              \ by API Gateway. You can't modify the $default stage."
            xml:
              name: apiGatewayManaged
        AutoDeploy:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether updates to an API automatically trigger
              a new deployment. The default value is false.
            xml:
              name: autoDeploy
        ClientCertificateId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of a client certificate for a Stage. Supported
              only for WebSocket APIs.
            xml:
              name: clientCertificateId
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the stage was created.
            xml:
              name: createdDate
        DefaultRouteSettings:
          $ref: '#/components/schemas/CreateStageResponse_DefaultRouteSettings'
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the Deployment that the Stage is associated
              with. Can't be updated if autoDeploy is enabled.
            xml:
              name: deploymentId
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the stage.
            xml:
              name: description
        LastDeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Describes the status of the last deployment of a stage. Supported
              only for stages with autoDeploy enabled.
            xml:
              name: lastDeploymentStatusMessage
        LastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the stage was last updated.
            xml:
              name: lastUpdatedDate
        RouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettingsMap'
          - description: "Route settings for the stage, by routeKey."
            xml:
              name: routeSettings
        StageName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the stage.
            xml:
              name: stageName
        StageVariables:
          allOf:
          - $ref: '#/components/schemas/StageVariablesMap'
          - description: "A map that defines the stage variables for a stage resource.\
              \ Variable names can have alphanumeric and underscore characters, and\
              \ the values must match [A-Za-z0-9-._~:/?#&amp;=,]+."
            xml:
              name: stageVariables
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
            xml:
              name: tags
      type: object
    UpdateVpcLinkResponse:
      example:
        CreatedDate: ""
        VpcLinkStatusMessage: ""
        VpcLinkVersion: ""
        VpcLinkId: ""
        SecurityGroupIds: ""
        SubnetIds: ""
        Tags: ""
        VpcLinkStatus: ""
        Name: ""
      properties:
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the VPC link was created.
            xml:
              name: createdDate
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the VPC link.
            xml:
              name: name
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          - description: A list of security group IDs for the VPC link.
            xml:
              name: securityGroupIds
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIdList'
          - description: A list of subnet IDs to include in the VPC link.
            xml:
              name: subnetIds
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: Tags for the VPC link.
            xml:
              name: tags
        VpcLinkId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The ID of the VPC link.
            xml:
              name: vpcLinkId
        VpcLinkStatus:
          allOf:
          - $ref: '#/components/schemas/VpcLinkStatus'
          - description: The status of the VPC link.
            xml:
              name: vpcLinkStatus
        VpcLinkStatusMessage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: A message summarizing the cause of the status of the VPC
              link.
            xml:
              name: vpcLinkStatusMessage
        VpcLinkVersion:
          allOf:
          - $ref: '#/components/schemas/VpcLinkVersion'
          - description: The version of the VPC link.
            xml:
              name: vpcLinkVersion
      type: object
    AccessLogSettings:
      description: Settings for logging access in a stage.
      properties:
        DestinationArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN of the CloudWatch Logs log group to receive access
              logs.
            xml:
              name: destinationArn
        Format:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          - description: "A single line format of the access logs of data, as specified\
              \ by selected $context variables. The format must include at least $context.requestId."
            xml:
              name: format
      type: object
    Id:
      description: The identifier.
      type: string
    SelectionExpression:
      description: An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
        Expressions</a> for more information.
      type: string
    Cors:
      description: Represents a CORS configuration. Supported only for HTTP APIs.
        See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring
        CORS</a> for more information.
      properties:
        AllowCredentials:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether credentials are included in the CORS request.
              Supported only for HTTP APIs.
            xml:
              name: allowCredentials
        AllowHeaders:
          allOf:
          - $ref: '#/components/schemas/CorsHeaderList'
          - description: Represents a collection of allowed headers. Supported only
              for HTTP APIs.
            xml:
              name: allowHeaders
        AllowMethods:
          allOf:
          - $ref: '#/components/schemas/CorsMethodList'
          - description: Represents a collection of allowed HTTP methods. Supported
              only for HTTP APIs.
            xml:
              name: allowMethods
        AllowOrigins:
          allOf:
          - $ref: '#/components/schemas/CorsOriginList'
          - description: Represents a collection of allowed origins. Supported only
              for HTTP APIs.
            xml:
              name: allowOrigins
        ExposeHeaders:
          allOf:
          - $ref: '#/components/schemas/CorsHeaderList'
          - description: Represents a collection of exposed headers. Supported only
              for HTTP APIs.
            xml:
              name: exposeHeaders
        MaxAge:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetweenMinus1And86400'
          - description: The number of seconds that the browser should cache preflight
              request results. Supported only for HTTP APIs.
            xml:
              name: maxAge
      type: object
    __timestampIso8601:
      format: date-time
      type: string
    StringWithLengthBetween0And1024:
      description: "A string with a length between [0-1024]."
      type: string
    ProtocolType:
      description: Represents a protocol type.
      enum:
      - WEBSOCKET
      - HTTP
      type: string
    Tags:
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween1And1600'
      description: Represents a collection of tags associated with the resource.
      type: object
    Api:
      description: Represents an API.
      properties:
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com.\
              \ The stage name is typically appended to this URI to form a complete\
              \ path to a deployed API stage."
            xml:
              name: apiEndpoint
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether an API is managed by API Gateway. You can't
              update or delete a managed API by using API Gateway. A managed API can
              be deleted only through the tooling or service that created it.
            xml:
              name: apiGatewayManaged
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API ID.
            xml:
              name: apiId
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: An API key selection expression. Supported only for WebSocket
              APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API
              Key Selection Expressions</a>.
            xml:
              name: apiKeySelectionExpression
        CorsConfiguration:
          $ref: '#/components/schemas/CreateApiResponse_CorsConfiguration'
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the API was created.
            xml:
              name: createdDate
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the API.
            xml:
              name: description
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Avoid validating models when creating a deployment. Supported
              only for WebSocket APIs.
            xml:
              name: disableSchemaValidation
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether clients can invoke your API by using the\
              \ default execute-api endpoint. By default, clients can invoke your\
              \ API with the default https://{api_id}.execute-api.{region}.amazonaws.com\
              \ endpoint. To require that clients use a custom domain name to invoke\
              \ your API, disable the default endpoint."
            xml:
              name: disableExecuteApiEndpoint
        ImportInfo:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The validation information during API import. This may include
              particular properties of your OpenAPI definition which are ignored during
              import. Supported only for HTTP APIs.
            xml:
              name: importInfo
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the API.
            xml:
              name: name
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          - description: The API protocol.
            xml:
              name: protocolType
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: "The route selection expression for the API. For HTTP APIs,\
              \ the routeSelectionExpression must be ${request.method} ${request.path}.\
              \ If not provided, this will be the default for HTTP APIs. This property\
              \ is required for WebSocket APIs."
            xml:
              name: routeSelectionExpression
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: A collection of tags associated with the API.
            xml:
              name: tags
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: A version identifier for the API.
            xml:
              name: version
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The warning messages reported when failonwarnings is turned
              on during API import.
            xml:
              name: warnings
      required:
      - Name
      - ProtocolType
      - RouteSelectionExpression
      type: object
    SelectionKey:
      description: "After evaluating a selection expression, the result is compared\
        \ against one or more selection keys to find a matching key. See <a href=\"\
        https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\"\
        >Selection Expressions</a> for a list of expressions and each expression's\
        \ associated selection key type."
      type: string
    ApiMapping:
      description: Represents an API mapping.
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API identifier.
            xml:
              name: apiId
        ApiMappingId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API mapping identifier.
            xml:
              name: apiMappingId
        ApiMappingKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The API mapping key.
            xml:
              name: apiMappingKey
        Stage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The API stage.
            xml:
              name: stage
      required:
      - ApiId
      - Stage
      type: object
    AuthorizationScopes:
      description: "A list of authorization scopes configured on a route. The scopes\
        \ are used with a JWT authorizer to authorize the method invocation. The authorization\
        \ works by matching the route scopes against the scopes parsed from the access\
        \ token in the incoming request. The method invocation is authorized if any\
        \ route scope matches a claimed scope in the access token. Otherwise, the\
        \ invocation is not authorized. When the route scope is configured, the client\
        \ must provide an access token instead of an identity token for authorization\
        \ purposes."
      items:
        $ref: '#/components/schemas/StringWithLengthBetween1And64'
      type: array
    AuthorizationType:
      description: "The authorization type. For WebSocket APIs, valid values are NONE\
        \ for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using\
        \ a Lambda authorizer. For HTTP APIs, valid values are NONE for open access,\
        \ JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and\
        \ CUSTOM for using a Lambda authorizer."
      enum:
      - NONE
      - AWS_IAM
      - CUSTOM
      - JWT
      type: string
    IntegerWithLengthBetween0And3600:
      description: "An integer with a value between [0-3600]."
      maximum: 3600
      minimum: 0
      type: integer
    AuthorizerType:
      description: The authorizer type. Specify REQUEST for a Lambda function using
        incoming request parameters. Specify JWT to use JSON Web Tokens (supported
        only for HTTP APIs).
      enum:
      - REQUEST
      - JWT
      type: string
    IdentitySourceList:
      description: "The identity source for which authorization is requested. For\
        \ the REQUEST authorizer, this is required when authorization caching is enabled.\
        \ The value is a comma-separated string of one or more mapping expressions\
        \ of the specified request parameters. For example, if an Auth header, a Name\
        \ query string parameter are defined as identity sources, this value is $method.request.header.Auth,\
        \ $method.request.querystring.Name. These parameters will be used to derive\
        \ the authorization caching key and to perform runtime validation of the REQUEST\
        \ authorizer by verifying all of the identity-related request parameters are\
        \ present, not null and non-empty. Only when this is true does the authorizer\
        \ invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized\
        \ response without calling the Lambda function. The valid value is a string\
        \ of comma-separated mapping expressions of the specified request parameters.\
        \ When the authorization caching is not enabled, this property is optional."
      items:
        $ref: '#/components/schemas/__string'
      type: array
    JWTConfiguration:
      description: Represents the configuration of a JWT authorizer. Required for
        the JWT authorizer type. Supported only for HTTP APIs.
      properties:
        Audience:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: A list of the intended recipients of the JWT. A valid JWT
              must provide an aud that matches at least one entry in this list. See
              <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>.
              Supported only for HTTP APIs.
            xml:
              name: audience
        Issuer:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: |-
              The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>
                             . Required for the JWT authorizer type. Supported only for HTTP APIs.
            xml:
              name: issuer
      type: object
    Authorizer:
      description: Represents an authorizer.
      properties:
        AuthorizerCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Specifies the required credentials as an IAM role for API\
              \ Gateway to invoke the authorizer. To specify an IAM role for API Gateway\
              \ to assume, use the role's Amazon Resource Name (ARN). To use resource-based\
              \ permissions on the Lambda function, don't specify this parameter.\
              \ Supported only for REQUEST authorizers."
            xml:
              name: authorizerCredentialsArn
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The authorizer identifier.
            xml:
              name: authorizerId
        AuthorizerPayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: "Specifies the format of the payload sent to an HTTP API\
              \ Lambda authorizer. Required for HTTP API Lambda authorizers. Supported\
              \ values are 1.0 and 2.0. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>."
            xml:
              name: authorizerPayloadFormatVersion
        AuthorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          - description: "The time to live (TTL) for cached authorizer results, in\
              \ seconds. If it equals 0, authorization caching is disabled. If it\
              \ is greater than 0, API Gateway caches authorizer responses. The maximum\
              \ value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers."
            xml:
              name: authorizerResultTtlInSeconds
        AuthorizerType:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          - description: The authorizer type. Specify REQUEST for a Lambda function
              using incoming request parameters. Specify JWT to use JSON Web Tokens
              (supported only for HTTP APIs).
            xml:
              name: authorizerType
        AuthorizerUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: |-
              The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                             , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
            xml:
              name: authorizerUri
        EnableSimpleResponses:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a Lambda authorizer returns a response\
              \ in a simple format. If enabled, the Lambda authorizer can return a\
              \ boolean value instead of an IAM policy. Supported only for HTTP APIs.\
              \ To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>"
            xml:
              name: enableSimpleResponses
        IdentitySource:
          allOf:
          - $ref: '#/components/schemas/IdentitySourceList'
          - description: "<p>The identity source for which authorization is requested.</p>\
              \ <p>For a REQUEST authorizer, this is optional. The value is a set\
              \ of one or more mapping expressions of the specified request parameters.\
              \ The identity source can be headers, query string parameters, stage\
              \ variables, and context parameters. For example, if an Auth header\
              \ and a Name query string parameter are defined as identity sources,\
              \ this value is route.request.header.Auth, route.request.querystring.Name\
              \ for WebSocket APIs. For HTTP APIs, use selection expressions prefixed\
              \ with $, for example, $request.header.Auth, $request.querystring.Name.\
              \ These parameters are used to perform runtime validation for Lambda-based\
              \ authorizers by verifying all of the identity-related request parameters\
              \ are present in the request, not null, and non-empty. Only when this\
              \ is true does the authorizer invoke the authorizer Lambda function.\
              \ Otherwise, it returns a 401 Unauthorized response without calling\
              \ the Lambda function. For HTTP APIs, identity sources are also used\
              \ as the cache key when caching is enabled. To learn more, see <a href=\"\
              https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT,\
              \ a single entry that specifies where to extract the JSON Web Token\
              \ (JWT) from inbound requests. Currently only header-based and query\
              \ parameter-based selections are supported, for example $request.header.Authorization.</p>"
            xml:
              name: identitySource
        IdentityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The validation expression does not apply to the REQUEST authorizer.
            xml:
              name: identityValidationExpression
        JwtConfiguration:
          $ref: '#/components/schemas/CreateAuthorizerResponse_JwtConfiguration'
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the authorizer.
            xml:
              name: name
      required:
      - Name
      type: object
    ConnectionType:
      description: Represents a connection type.
      enum:
      - INTERNET
      - VPC_LINK
      type: string
    ContentHandlingStrategy:
      description: Specifies how to handle response payload content type conversions.
        Supported only for WebSocket APIs.
      enum:
      - CONVERT_TO_BINARY
      - CONVERT_TO_TEXT
      type: string
    CreateApiMappingRequest:
      description: Creates a new ApiMapping resource to represent an API mapping.
      example:
        Stage: ""
        ApiMappingKey: ""
        ApiId: ""
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API identifier.
            xml:
              name: apiId
        ApiMappingKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The API mapping key.
            xml:
              name: apiMappingKey
        Stage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The API stage.
            xml:
              name: stage
      required:
      - ApiId
      - Stage
      title: CreateApiMappingRequest
      type: object
    CreateApiRequest:
      description: Creates a new Api resource to represent an API.
      example:
        RouteSelectionExpression: ""
        Description: ""
        DisableExecuteApiEndpoint: ""
        DisableSchemaValidation: ""
        Name: ""
        Target: ""
        CorsConfiguration:
          AllowCredentials: ""
          AllowOrigins: ""
          ExposeHeaders: ""
          AllowHeaders: ""
          MaxAge: ""
          AllowMethods: ""
        CredentialsArn: ""
        Version: ""
        ProtocolType: ""
        RouteKey: ""
        Tags: ""
        ApiKeySelectionExpression: ""
      properties:
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: An API key selection expression. Supported only for WebSocket
              APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API
              Key Selection Expressions</a>.
            xml:
              name: apiKeySelectionExpression
        CorsConfiguration:
          $ref: '#/components/schemas/CreateApiRequest_CorsConfiguration'
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "This property is part of quick create. It specifies the\
              \ credentials required for the integration, if any. For a Lambda integration,\
              \ three options are available. To specify an IAM Role for API Gateway\
              \ to assume, use the role's Amazon Resource Name (ARN). To require that\
              \ the caller's identity be passed through from the request, specify\
              \ arn:aws:iam::*:user/*. To use resource-based permissions on supported\
              \ AWS services, specify null. Currently, this property is not used for\
              \ HTTP integrations. Supported only for HTTP APIs."
            xml:
              name: credentialsArn
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the API.
            xml:
              name: description
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Avoid validating models when creating a deployment. Supported
              only for WebSocket APIs.
            xml:
              name: disableSchemaValidation
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether clients can invoke your API by using the\
              \ default execute-api endpoint. By default, clients can invoke your\
              \ API with the default https://{api_id}.execute-api.{region}.amazonaws.com\
              \ endpoint. To require that clients use a custom domain name to invoke\
              \ your API, disable the default endpoint."
            xml:
              name: disableExecuteApiEndpoint
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the API.
            xml:
              name: name
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          - description: The API protocol.
            xml:
              name: protocolType
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: "This property is part of quick create. If you don't specify\
              \ a routeKey, a default route of $default is created. The $default route\
              \ acts as a catch-all for any request made to your API, for a particular\
              \ stage. The $default route key can't be modified. You can add routes\
              \ after creating the API, and you can update the route keys of additional\
              \ routes. Supported only for HTTP APIs."
            xml:
              name: routeKey
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: "The route selection expression for the API. For HTTP APIs,\
              \ the routeSelectionExpression must be ${request.method} ${request.path}.\
              \ If not provided, this will be the default for HTTP APIs. This property\
              \ is required for WebSocket APIs."
            xml:
              name: routeSelectionExpression
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
            xml:
              name: tags
        Target:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: "This property is part of quick create. Quick create produces\
              \ an API with an integration, a default catch-all route, and a default\
              \ stage which is configured to automatically deploy changes. For HTTP\
              \ integrations, specify a fully qualified URL. For Lambda integrations,\
              \ specify a function ARN. The type of the integration will be HTTP_PROXY\
              \ or AWS_PROXY, respectively. Supported only for HTTP APIs."
            xml:
              name: target
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: A version identifier for the API.
            xml:
              name: version
      required:
      - Name
      - ProtocolType
      title: CreateApiRequest
      type: object
    CreateAuthorizerRequest:
      description: Creates a new Authorizer resource to represent an authorizer.
      example:
        IdentityValidationExpression: ""
        AuthorizerCredentialsArn: ""
        AuthorizerUri: ""
        AuthorizerType: ""
        JwtConfiguration:
          Audience: ""
          Issuer: ""
        AuthorizerResultTtlInSeconds: ""
        AuthorizerPayloadFormatVersion: ""
        IdentitySource: ""
        EnableSimpleResponses: ""
        Name: ""
      properties:
        AuthorizerCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Specifies the required credentials as an IAM role for API\
              \ Gateway to invoke the authorizer. To specify an IAM role for API Gateway\
              \ to assume, use the role's Amazon Resource Name (ARN). To use resource-based\
              \ permissions on the Lambda function, don't specify this parameter.\
              \ Supported only for REQUEST authorizers."
            xml:
              name: authorizerCredentialsArn
        AuthorizerPayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: "Specifies the format of the payload sent to an HTTP API\
              \ Lambda authorizer. Required for HTTP API Lambda authorizers. Supported\
              \ values are 1.0 and 2.0. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>."
            xml:
              name: authorizerPayloadFormatVersion
        AuthorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          - description: "The time to live (TTL) for cached authorizer results, in\
              \ seconds. If it equals 0, authorization caching is disabled. If it\
              \ is greater than 0, API Gateway caches authorizer responses. The maximum\
              \ value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers."
            xml:
              name: authorizerResultTtlInSeconds
        AuthorizerType:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          - description: The authorizer type. Specify REQUEST for a Lambda function
              using incoming request parameters. Specify JWT to use JSON Web Tokens
              (supported only for HTTP APIs).
            xml:
              name: authorizerType
        AuthorizerUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: |-
              The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                             , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
            xml:
              name: authorizerUri
        EnableSimpleResponses:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a Lambda authorizer returns a response\
              \ in a simple format. By default, a Lambda authorizer must return an\
              \ IAM policy. If enabled, the Lambda authorizer can return a boolean\
              \ value instead of an IAM policy. Supported only for HTTP APIs. To learn\
              \ more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>"
            xml:
              name: enableSimpleResponses
        IdentitySource:
          allOf:
          - $ref: '#/components/schemas/IdentitySourceList'
          - description: "<p>The identity source for which authorization is requested.</p>\
              \ <p>For a REQUEST authorizer, this is optional. The value is a set\
              \ of one or more mapping expressions of the specified request parameters.\
              \ The identity source can be headers, query string parameters, stage\
              \ variables, and context parameters. For example, if an Auth header\
              \ and a Name query string parameter are defined as identity sources,\
              \ this value is route.request.header.Auth, route.request.querystring.Name\
              \ for WebSocket APIs. For HTTP APIs, use selection expressions prefixed\
              \ with $, for example, $request.header.Auth, $request.querystring.Name.\
              \ These parameters are used to perform runtime validation for Lambda-based\
              \ authorizers by verifying all of the identity-related request parameters\
              \ are present in the request, not null, and non-empty. Only when this\
              \ is true does the authorizer invoke the authorizer Lambda function.\
              \ Otherwise, it returns a 401 Unauthorized response without calling\
              \ the Lambda function. For HTTP APIs, identity sources are also used\
              \ as the cache key when caching is enabled. To learn more, see <a href=\"\
              https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT,\
              \ a single entry that specifies where to extract the JSON Web Token\
              \ (JWT) from inbound requests. Currently only header-based and query\
              \ parameter-based selections are supported, for example $request.header.Authorization.</p>"
            xml:
              name: identitySource
        IdentityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: This parameter is not used.
            xml:
              name: identityValidationExpression
        JwtConfiguration:
          $ref: '#/components/schemas/CreateAuthorizerResponse_JwtConfiguration'
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the authorizer.
            xml:
              name: name
      required:
      - AuthorizerType
      - IdentitySource
      - Name
      title: CreateAuthorizerRequest
      type: object
    CreateDeploymentRequest:
      description: Creates a new Deployment resource to represent a deployment.
      example:
        Description: ""
        StageName: ""
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description for the deployment resource.
            xml:
              name: description
        StageName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the Stage resource for the Deployment resource
              to create.
            xml:
              name: stageName
      title: CreateDeploymentRequest
      type: object
    DeploymentStatus:
      description: Represents a deployment status.
      enum:
      - PENDING
      - FAILED
      - DEPLOYED
      type: string
    DomainNameConfigurations:
      description: The domain name configurations.
      items:
        $ref: '#/components/schemas/DomainNameConfiguration'
      type: array
    MutualTlsAuthenticationInput:
      properties:
        TruststoreUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: "An Amazon S3 URL that specifies the truststore for mutual\
              \ TLS authentication, for example, s3://<replaceable>bucket-name</replaceable>/<replaceable>key-name</replaceable>.\
              \ The truststore can contain certificates from public or private certificate\
              \ authorities. To update the truststore, upload a new version to S3,\
              \ and then update your custom domain name to use the new version. To\
              \ update the truststore, you must have permissions to access the S3\
              \ object."
            xml:
              name: truststoreUri
        TruststoreVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: "The version of the S3 object that contains your truststore.\
              \ To specify a version, you must have versioning enabled for the S3\
              \ bucket."
            xml:
              name: truststoreVersion
      type: object
    CreateDomainNameRequest:
      description: Creates a new DomainName resource to represent a domain name.
      example:
        MutualTlsAuthentication:
          TruststoreVersion: ""
          TruststoreUri: ""
        DomainName: ""
        DomainNameConfigurations: ""
        Tags: ""
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          - description: The domain name.
            xml:
              name: domainName
        DomainNameConfigurations:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigurations'
          - description: The domain name configurations.
            xml:
              name: domainNameConfigurations
        MutualTlsAuthentication:
          $ref: '#/components/schemas/CreateDomainNameRequest_MutualTlsAuthentication'
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The collection of tags associated with a domain name.
            xml:
              name: tags
      required:
      - DomainName
      title: CreateDomainNameRequest
      type: object
    MutualTlsAuthentication:
      properties:
        TruststoreUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: "An Amazon S3 URL that specifies the truststore for mutual\
              \ TLS authentication, for example, s3://<replaceable>bucket-name</replaceable>/<replaceable>key-name</replaceable>.\
              \ The truststore can contain certificates from public or private certificate\
              \ authorities. To update the truststore, upload a new version to S3,\
              \ and then update your custom domain name to use the new version. To\
              \ update the truststore, you must have permissions to access the S3\
              \ object."
            xml:
              name: truststoreUri
        TruststoreVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: "The version of the S3 object that contains your truststore.\
              \ To specify a version, you must have versioning enabled for the S3\
              \ bucket."
            xml:
              name: truststoreVersion
        TruststoreWarnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: "A list of warnings that API Gateway returns while processing\
              \ your truststore. Invalid certificates produce warnings. Mutual TLS\
              \ is still enabled, but some clients might not be able to access your\
              \ API. To resolve warnings, upload a new truststore to S3, and then\
              \ update you domain name to use the new version."
            xml:
              name: truststoreWarnings
      type: object
    IntegrationType:
      description: Represents an API method integration type.
      enum:
      - AWS
      - HTTP
      - MOCK
      - HTTP_PROXY
      - AWS_PROXY
      type: string
    PassthroughBehavior:
      description: Represents passthrough behavior for an integration response. Supported
        only for WebSocket APIs.
      enum:
      - WHEN_NO_MATCH
      - NEVER
      - WHEN_NO_TEMPLATES
      type: string
    TemplateMap:
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween0And32K'
      description: A mapping of identifier keys to templates. The value is an actual
        template script. The key is typically a SelectionKey which is chosen based
        on evaluating a selection expression.
      type: object
    ResponseParameters:
      additionalProperties:
        $ref: '#/components/schemas/IntegrationParameters'
      description: Supported only for HTTP APIs. You use response parameters to transform
        the HTTP response from a backend integration before returning the response
        to clients.
      type: object
    IntegerWithLengthBetween50And30000:
      description: "An integer with a value between [50-30000]."
      maximum: 30000
      minimum: 50
      type: integer
    TlsConfigInput:
      description: "The TLS configuration for a private integration. If you specify\
        \ a TLS configuration, private integration traffic uses the HTTPS protocol.\
        \ Supported only for HTTP APIs."
      properties:
        ServerNameToVerify:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          - description: "If you specify a server name, API Gateway uses it to verify\
              \ the hostname on the integration's certificate. The server name is\
              \ also included in the TLS handshake to support Server Name Indication\
              \ (SNI) or virtual hosting."
            xml:
              name: serverNameToVerify
      type: object
    CreateIntegrationRequest:
      description: Creates a new Integration resource to represent an integration.
      example:
        Description: ""
        TemplateSelectionExpression: ""
        ConnectionType: ""
        ResponseParameters: ""
        IntegrationMethod: ""
        PassthroughBehavior: ""
        RequestParameters: ""
        ConnectionId: ""
        IntegrationUri: ""
        PayloadFormatVersion: ""
        CredentialsArn: ""
        RequestTemplates: ""
        TimeoutInMillis: ""
        TlsConfig:
          ServerNameToVerify: ""
        ContentHandlingStrategy: ""
        IntegrationSubtype: ""
        IntegrationType: ""
      properties:
        ConnectionId:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          - description: The ID of the VPC link for a private integration. Supported
              only for HTTP APIs.
            xml:
              name: connectionId
        ConnectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          - description: The type of the network connection to the integration endpoint.
              Specify INTERNET for connections through the public routable internet
              or VPC_LINK for private connections between API Gateway and resources
              in a VPC. The default value is INTERNET.
            xml:
              name: connectionType
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Supported only for WebSocket APIs. Specifies how to handle\
              \ response payload content type conversions. Supported values are CONVERT_TO_BINARY\
              \ and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY:\
              \ Converts a response payload from a Base64-encoded string to the corresponding\
              \ binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from\
              \ a binary blob to a Base64-encoded string.</p> <p>If this property\
              \ is not defined, the response payload will be passed through from the\
              \ integration response to the route response or method response without\
              \ modification.</p>"
            xml:
              name: contentHandlingStrategy
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Specifies the credentials required for the integration,\
              \ if any. For AWS integrations, three options are available. To specify\
              \ an IAM Role for API Gateway to assume, use the role's Amazon Resource\
              \ Name (ARN). To require that the caller's identity be passed through\
              \ from the request, specify the string arn:aws:iam::*:user/*. To use\
              \ resource-based permissions on supported AWS services, specify null."
            xml:
              name: credentialsArn
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the integration.
            xml:
              name: description
        IntegrationMethod:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: Specifies the integration's HTTP method type.
            xml:
              name: integrationMethod
        IntegrationSubtype:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: "Supported only for HTTP API AWS_PROXY integrations. Specifies\
              \ the AWS service action to invoke. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html\"\
              >Integration subtype reference</a>."
            xml:
              name: integrationSubtype
        IntegrationType:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          - description: "<p>The integration type of an integration. One of the following:</p>\
              \ <p>AWS: for integrating the route or method request with an AWS service\
              \ action, including the Lambda function-invoking action. With the Lambda\
              \ function-invoking action, this is referred to as the Lambda custom\
              \ integration. With any other AWS service action, this is known as AWS\
              \ integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY:\
              \ for integrating the route or method request with a Lambda function\
              \ or other AWS service action. This integration is also referred to\
              \ as a Lambda proxy integration.</p> <p>HTTP: for integrating the route\
              \ or method request with an HTTP endpoint. This integration is also\
              \ referred to as the HTTP custom integration. Supported only for WebSocket\
              \ APIs.</p> <p>HTTP_PROXY: for integrating the route or method request\
              \ with an HTTP endpoint, with the client request passed through as-is.\
              \ This is also referred to as HTTP proxy integration. For HTTP API private\
              \ integrations, use an HTTP_PROXY integration.</p> <p>MOCK: for integrating\
              \ the route or method request with API Gateway as a \"loopback\" endpoint\
              \ without invoking any backend. Supported only for WebSocket APIs.</p>"
            xml:
              name: integrationType
        IntegrationUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: "<p>For a Lambda integration, specify the URI of a Lambda\
              \ function.</p> <p>For an HTTP integration, specify a fully-qualified\
              \ URL.</p> <p>For an HTTP API private integration, specify the ARN of\
              \ an Application Load Balancer listener, Network Load Balancer listener,\
              \ or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map\
              \ service, API Gateway uses DiscoverInstances to identify resources.\
              \ You can use query parameters to target specific resources. To learn\
              \ more, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html\"\
              >DiscoverInstances</a>. For private integrations, all resources must\
              \ be owned by the same AWS account.</p>"
            xml:
              name: integrationUri
        PassthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/PassthroughBehavior'
          - description: "<p>Specifies the pass-through behavior for incoming requests\
              \ based on the Content-Type header in the request, and the available\
              \ mapping templates specified as the requestTemplates property on the\
              \ Integration resource. There are three valid values: WHEN_NO_MATCH,\
              \ WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p>\
              \ <p>WHEN_NO_MATCH passes the request body for unmapped content types\
              \ through to the integration backend without transformation.</p> <p>NEVER\
              \ rejects unmapped content types with an HTTP 415 Unsupported Media\
              \ Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the\
              \ integration has no content types mapped to templates. However, if\
              \ there is at least one content type defined, unmapped content types\
              \ will be rejected with the same HTTP 415 Unsupported Media Type response.</p>"
            xml:
              name: passthroughBehavior
        PayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: Specifies the format of the payload sent to an integration.
              Required for HTTP APIs.
            xml:
              name: payloadFormatVersion
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          - description: "<p>For WebSocket APIs, a key-value map specifying request\
              \ parameters that are passed from the method request to the backend.\
              \ The key is an integration request parameter name and the associated\
              \ value is a method request parameter value or static value that must\
              \ be enclosed within single quotes and pre-encoded as required by the\
              \ backend. The method request parameter value must match the pattern\
              \ of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>\n\
              \               , where \n                  <replaceable>{location}</replaceable>\n\
              \                is querystring, path, or header; and \n           \
              \       <replaceable>{name}</replaceable>\n                must be a\
              \ valid and unique method request parameter name.</p> <p>For HTTP API\
              \ integrations with a specified integrationSubtype, request parameters\
              \ are a key-value map specifying parameters that are passed to AWS_PROXY\
              \ integrations. You can provide static values, or map request data,\
              \ stage variables, or context variables that are evaluated at runtime.\
              \ To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\"\
              >Working with AWS service integrations for HTTP APIs</a>.</p> <p>For\
              \ HTTP API integrations without a specified integrationSubtype request\
              \ parameters are a key-value map specifying how to transform HTTP requests\
              \ before sending them to the backend. The key should follow the pattern\
              \ &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where\
              \ action can be append, overwrite or remove. For values, you can provide\
              \ static values, or map request data, stage variables, or context variables\
              \ that are evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
              >Transforming API requests and responses</a>.</p>"
            xml:
              name: requestParameters
        RequestTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          - description: "Represents a map of Velocity templates that are applied\
              \ on the request payload based on the value of the Content-Type header\
              \ sent by the client. The content type value is the key in this map,\
              \ and the template (as a String) is the value. Supported only for WebSocket\
              \ APIs."
            xml:
              name: requestTemplates
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/ResponseParameters'
          - description: "Supported only for HTTP APIs. You use response parameters\
              \ to transform the HTTP response from a backend integration before returning\
              \ the response to clients. Specify a key-value map from a selection\
              \ key to response parameters. The selection key must be a valid HTTP\
              \ status code within the range of 200-599. Response parameters are a\
              \ key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt;\
              \ or overwrite.statuscode. The action can be append, overwrite or remove.\
              \ The value can be a static value, or map to response data, stage variables,\
              \ or context variables that are evaluated at runtime. To learn more,\
              \ see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
              >Transforming API requests and responses</a>."
            xml:
              name: responseParameters
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The template selection expression for the integration.
            xml:
              name: templateSelectionExpression
        TimeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
          - description: "Custom timeout between 50 and 29,000 milliseconds for WebSocket\
              \ APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default\
              \ timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs."
            xml:
              name: timeoutInMillis
        TlsConfig:
          $ref: '#/components/schemas/CreateIntegrationRequest_TlsConfig'
      required:
      - IntegrationType
      title: CreateIntegrationRequest
      type: object
    TlsConfig:
      description: "The TLS configuration for a private integration. If you specify\
        \ a TLS configuration, private integration traffic uses the HTTPS protocol.\
        \ Supported only for HTTP APIs."
      properties:
        ServerNameToVerify:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          - description: "If you specify a server name, API Gateway uses it to verify\
              \ the hostname on the integration's certificate. The server name is\
              \ also included in the TLS handshake to support Server Name Indication\
              \ (SNI) or virtual hosting."
            xml:
              name: serverNameToVerify
      type: object
    CreateIntegrationResponseRequest:
      description: Creates a new IntegrationResponse resource to represent an integration
        response.
      example:
        ResponseTemplates: ""
        TemplateSelectionExpression: ""
        ResponseParameters: ""
        ContentHandlingStrategy: ""
        IntegrationResponseKey: ""
      properties:
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Specifies how to handle response payload content type\
              \ conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT,\
              \ with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a\
              \ response payload from a Base64-encoded string to the corresponding\
              \ binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from\
              \ a binary blob to a Base64-encoded string.</p> <p>If this property\
              \ is not defined, the response payload will be passed through from the\
              \ integration response to the route response or method response without\
              \ modification.</p>"
            xml:
              name: contentHandlingStrategy
        IntegrationResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The integration response key.
            xml:
              name: integrationResponseKey
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          - description: "A key-value map specifying response parameters that are\
              \ passed to the method response from the backend. The key is a method\
              \ response header parameter name and the mapped value is an integration\
              \ response header value, a static value enclosed within a pair of single\
              \ quotes, or a JSON expression from the integration response body. The\
              \ mapping key must match the pattern of method.response.header.{name},\
              \ where {name} is a valid and unique header name. The mapped non-static\
              \ value must match the pattern of integration.response.header.{name}\
              \ or integration.response.body.{JSON-expression}, where {name} is a\
              \ valid and unique response header name and {JSON-expression} is a valid\
              \ JSON expression without the $ prefix."
            xml:
              name: responseParameters
        ResponseTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          - description: "The collection of response templates for the integration\
              \ response as a string-to-string map of key-value pairs. Response templates\
              \ are represented as a key/value map, with a content-type as the key\
              \ and a template as the value."
            xml:
              name: responseTemplates
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The template selection expression for the integration response.
              Supported only for WebSocket APIs.
            xml:
              name: templateSelectionExpression
      required:
      - IntegrationResponseKey
      title: CreateIntegrationResponseRequest
      type: object
    StringWithLengthBetween1And256:
      description: "A string with a length between [1-256]."
      type: string
    CreateModelRequest:
      description: Creates a new Model.
      example:
        Description: ""
        ContentType: ""
        Schema: ""
        Name: ""
      properties:
        ContentType:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And256'
          - description: "The content-type for the model, for example, \"application/json\"\
              ."
            xml:
              name: contentType
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the model.
            xml:
              name: description
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the model. Must be alphanumeric.
            xml:
              name: name
        Schema:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          - description: "The schema for the model. For application/json models, this\
              \ should be JSON schema draft 4 model."
            xml:
              name: schema
      required:
      - Name
      - Schema
      title: CreateModelRequest
      type: object
    RouteModels:
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween1And128'
      description: The route models.
      type: object
    RouteParameters:
      additionalProperties:
        $ref: '#/components/schemas/ParameterConstraints'
      description: The route parameters.
      type: object
    CreateRouteRequest:
      description: Creates a new Route resource to represent a route.
      example:
        Target: ""
        RouteResponseSelectionExpression: ""
        AuthorizerId: ""
        OperationName: ""
        RequestModels: ""
        ApiKeyRequired: ""
        AuthorizationScopes: ""
        RouteKey: ""
        AuthorizationType: ""
        ModelSelectionExpression: ""
        RequestParameters: ""
      properties:
        ApiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether an API key is required for the route. Supported
              only for WebSocket APIs.
            xml:
              name: apiKeyRequired
        AuthorizationScopes:
          allOf:
          - $ref: '#/components/schemas/AuthorizationScopes'
          - description: The authorization scopes supported by this route.
            xml:
              name: authorizationScopes
        AuthorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          - description: "The authorization type for the route. For WebSocket APIs,\
              \ valid values are NONE for open access, AWS_IAM for using AWS IAM permissions,\
              \ and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values\
              \ are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for\
              \ using AWS IAM permissions, and CUSTOM for using a Lambda authorizer."
            xml:
              name: authorizationType
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the Authorizer resource to be associated
              with this route. The authorizer identifier is generated by API Gateway
              when you created the authorizer.
            xml:
              name: authorizerId
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The model selection expression for the route. Supported only
              for WebSocket APIs.
            xml:
              name: modelSelectionExpression
        OperationName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: The operation name for the route.
            xml:
              name: operationName
        RequestModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          - description: The request models for the route. Supported only for WebSocket
              APIs.
            xml:
              name: requestModels
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          - description: The request parameters for the route. Supported only for
              WebSocket APIs.
            xml:
              name: requestParameters
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The route key for the route.
            xml:
              name: routeKey
        RouteResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The route response selection expression for the route. Supported
              only for WebSocket APIs.
            xml:
              name: routeResponseSelectionExpression
        Target:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The target for the route.
            xml:
              name: target
      required:
      - RouteKey
      title: CreateRouteRequest
      type: object
    CreateRouteResponseRequest:
      description: Creates a new RouteResponse resource to represent a route response.
      example:
        RouteResponseKey: ""
        ResponseParameters: ""
        ModelSelectionExpression: ""
        ResponseModels: ""
      properties:
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The model selection expression for the route response. Supported
              only for WebSocket APIs.
            xml:
              name: modelSelectionExpression
        ResponseModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          - description: The response models for the route response.
            xml:
              name: responseModels
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          - description: The route response parameters.
            xml:
              name: responseParameters
        RouteResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The route response key.
            xml:
              name: routeResponseKey
      required:
      - RouteResponseKey
      title: CreateRouteResponseRequest
      type: object
    RouteSettingsMap:
      additionalProperties:
        $ref: '#/components/schemas/RouteSettings'
      description: The route settings map.
      type: object
    StageVariablesMap:
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween0And2048'
      description: The stage variable map.
      type: object
    CreateStageRequest:
      description: Creates a new Stage resource to represent a stage.
      example:
        ClientCertificateId: ""
        DeploymentId: ""
        AccessLogSettings:
          Format: ""
          DestinationArn: ""
        AutoDeploy: ""
        Description: ""
        RouteSettings: ""
        StageName: ""
        StageVariables: ""
        DefaultRouteSettings:
          LoggingLevel: ""
          DataTraceEnabled: ""
          ThrottlingBurstLimit: ""
          DetailedMetricsEnabled: ""
          ThrottlingRateLimit: ""
        Tags: ""
      properties:
        AccessLogSettings:
          $ref: '#/components/schemas/CreateStageResponse_AccessLogSettings'
        AutoDeploy:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether updates to an API automatically trigger
              a new deployment. The default value is false.
            xml:
              name: autoDeploy
        ClientCertificateId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of a client certificate for a Stage. Supported
              only for WebSocket APIs.
            xml:
              name: clientCertificateId
        DefaultRouteSettings:
          $ref: '#/components/schemas/CreateStageRequest_DefaultRouteSettings'
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The deployment identifier of the API stage.
            xml:
              name: deploymentId
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description for the API stage.
            xml:
              name: description
        RouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettingsMap'
          - description: "Route settings for the stage, by routeKey."
            xml:
              name: routeSettings
        StageName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the stage.
            xml:
              name: stageName
        StageVariables:
          allOf:
          - $ref: '#/components/schemas/StageVariablesMap'
          - description: "A map that defines the stage variables for a Stage. Variable\
              \ names can have alphanumeric and underscore characters, and the values\
              \ must match [A-Za-z0-9-._~:/?#&amp;=,]+."
            xml:
              name: stageVariables
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
            xml:
              name: tags
      required:
      - StageName
      title: CreateStageRequest
      type: object
    SecurityGroupIdList:
      description: A list of security group IDs for the VPC link.
      items:
        $ref: '#/components/schemas/__string'
      type: array
    SubnetIdList:
      description: A list of subnet IDs to include in the VPC link.
      items:
        $ref: '#/components/schemas/__string'
      type: array
    CreateVpcLinkRequest:
      description: Creates a VPC link
      example:
        SecurityGroupIds: ""
        SubnetIds: ""
        Tags: ""
        Name: ""
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the VPC link.
            xml:
              name: name
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          - description: A list of security group IDs for the VPC link.
            xml:
              name: securityGroupIds
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIdList'
          - description: A list of subnet IDs to include in the VPC link.
            xml:
              name: subnetIds
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: A list of tags.
            xml:
              name: tags
      required:
      - Name
      - SubnetIds
      title: CreateVpcLinkRequest
      type: object
    VpcLinkStatus:
      description: The status of the VPC link.
      enum:
      - PENDING
      - AVAILABLE
      - DELETING
      - FAILED
      - INACTIVE
      type: string
    VpcLinkVersion:
      description: The version of the VPC link.
      enum:
      - V2
      type: string
    DeleteAccessLogSettingsRequest:
      properties: {}
      title: DeleteAccessLogSettingsRequest
      type: object
    DeleteApiMappingRequest:
      properties: {}
      title: DeleteApiMappingRequest
      type: object
    DeleteApiRequest:
      properties: {}
      title: DeleteApiRequest
      type: object
    DeleteAuthorizerRequest:
      properties: {}
      title: DeleteAuthorizerRequest
      type: object
    DeleteCorsConfigurationRequest:
      properties: {}
      title: DeleteCorsConfigurationRequest
      type: object
    DeleteDeploymentRequest:
      properties: {}
      title: DeleteDeploymentRequest
      type: object
    DeleteDomainNameRequest:
      properties: {}
      title: DeleteDomainNameRequest
      type: object
    DeleteIntegrationRequest:
      properties: {}
      title: DeleteIntegrationRequest
      type: object
    DeleteIntegrationResponseRequest:
      properties: {}
      title: DeleteIntegrationResponseRequest
      type: object
    DeleteModelRequest:
      properties: {}
      title: DeleteModelRequest
      type: object
    DeleteRouteRequest:
      properties: {}
      title: DeleteRouteRequest
      type: object
    DeleteRouteRequestParameterRequest:
      properties: {}
      title: DeleteRouteRequestParameterRequest
      type: object
    DeleteRouteResponseRequest:
      properties: {}
      title: DeleteRouteResponseRequest
      type: object
    DeleteRouteSettingsRequest:
      properties: {}
      title: DeleteRouteSettingsRequest
      type: object
    DeleteStageRequest:
      properties: {}
      title: DeleteStageRequest
      type: object
    DeleteVpcLinkRequest:
      properties: {}
      title: DeleteVpcLinkRequest
      type: object
    Deployment:
      description: An immutable representation of an API that can be called by users.
        A Deployment must be associated with a Stage for it to be callable over the
        internet.
      properties:
        AutoDeployed:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether a deployment was automatically released.
            xml:
              name: autoDeployed
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The date and time when the Deployment resource was created.
            xml:
              name: createdDate
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier for the deployment.
            xml:
              name: deploymentId
        DeploymentStatus:
          allOf:
          - $ref: '#/components/schemas/DeploymentStatus'
          - description: "The status of the deployment: PENDING, FAILED, or SUCCEEDED."
            xml:
              name: deploymentStatus
        DeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: May contain additional feedback on the status of an API deployment.
            xml:
              name: deploymentStatusMessage
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description for the deployment.
            xml:
              name: description
      type: object
    DomainName:
      description: Represents a domain name.
      properties:
        ApiMappingSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The API mapping selection expression.
            xml:
              name: apiMappingSelectionExpression
        DomainName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          - description: The name of the DomainName resource.
            xml:
              name: domainName
        DomainNameConfigurations:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigurations'
          - description: The domain name configurations.
            xml:
              name: domainNameConfigurations
        MutualTlsAuthentication:
          $ref: '#/components/schemas/CreateDomainNameResponse_MutualTlsAuthentication'
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The collection of tags associated with a domain name.
            xml:
              name: tags
      required:
      - DomainName
      type: object
    DomainNameStatus:
      description: "The status of the domain name migration. The valid values are\
        \ AVAILABLE, UPDATING, PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION.\
        \ If the status is UPDATING, the domain cannot be modified further until the\
        \ existing operation is complete. If it is AVAILABLE, the domain can be updated."
      enum:
      - AVAILABLE
      - UPDATING
      - PENDING_CERTIFICATE_REIMPORT
      - PENDING_OWNERSHIP_VERIFICATION
      type: string
    EndpointType:
      description: Represents an endpoint type.
      enum:
      - REGIONAL
      - EDGE
      type: string
    SecurityPolicy:
      description: The Transport Layer Security (TLS) version of the security policy
        for this domain name. The valid values are TLS_1_0 and TLS_1_2.
      enum:
      - TLS_1_0
      - TLS_1_2
      type: string
    ExportApiRequest:
      properties: {}
      title: ExportApiRequest
      type: object
    ExportedApi:
      description: "Represents an exported definition of an API in a particular output\
        \ format, for example, YAML. The API is serialized to the requested specification,\
        \ for example, OpenAPI 3.0."
      type: string
    ResetAuthorizersCacheRequest:
      properties: {}
      title: ResetAuthorizersCacheRequest
      type: object
    GetApiMappingRequest:
      properties: {}
      title: GetApiMappingRequest
      type: object
    GetApiMappingsRequest:
      properties: {}
      title: GetApiMappingsRequest
      type: object
    __listOfApiMapping:
      items:
        $ref: '#/components/schemas/ApiMapping'
      type: array
    NextToken:
      description: The next page of elements from this collection. Not valid for the
        last element of the collection.
      type: string
    GetApiRequest:
      properties: {}
      title: GetApiRequest
      type: object
    GetApisRequest:
      properties: {}
      title: GetApisRequest
      type: object
    __listOfApi:
      items:
        $ref: '#/components/schemas/Api'
      type: array
    GetAuthorizerRequest:
      properties: {}
      title: GetAuthorizerRequest
      type: object
    GetAuthorizersRequest:
      properties: {}
      title: GetAuthorizersRequest
      type: object
    __listOfAuthorizer:
      items:
        $ref: '#/components/schemas/Authorizer'
      type: array
    GetDeploymentRequest:
      properties: {}
      title: GetDeploymentRequest
      type: object
    GetDeploymentsRequest:
      properties: {}
      title: GetDeploymentsRequest
      type: object
    __listOfDeployment:
      items:
        $ref: '#/components/schemas/Deployment'
      type: array
    GetDomainNameRequest:
      properties: {}
      title: GetDomainNameRequest
      type: object
    GetDomainNamesRequest:
      properties: {}
      title: GetDomainNamesRequest
      type: object
    __listOfDomainName:
      items:
        $ref: '#/components/schemas/DomainName'
      type: array
    GetIntegrationRequest:
      properties: {}
      title: GetIntegrationRequest
      type: object
    GetIntegrationResponseRequest:
      properties: {}
      title: GetIntegrationResponseRequest
      type: object
    GetIntegrationResponsesRequest:
      properties: {}
      title: GetIntegrationResponsesRequest
      type: object
    __listOfIntegrationResponse:
      items:
        $ref: '#/components/schemas/IntegrationResponse'
      type: array
    GetIntegrationsRequest:
      properties: {}
      title: GetIntegrationsRequest
      type: object
    __listOfIntegration:
      items:
        $ref: '#/components/schemas/Integration'
      type: array
    GetModelRequest:
      properties: {}
      title: GetModelRequest
      type: object
    GetModelTemplateRequest:
      properties: {}
      title: GetModelTemplateRequest
      type: object
    GetModelsRequest:
      properties: {}
      title: GetModelsRequest
      type: object
    __listOfModel:
      items:
        $ref: '#/components/schemas/Model'
      type: array
    GetRouteRequest:
      properties: {}
      title: GetRouteRequest
      type: object
    GetRouteResponseRequest:
      properties: {}
      title: GetRouteResponseRequest
      type: object
    GetRouteResponsesRequest:
      properties: {}
      title: GetRouteResponsesRequest
      type: object
    __listOfRouteResponse:
      items:
        $ref: '#/components/schemas/RouteResponse'
      type: array
    GetRoutesRequest:
      properties: {}
      title: GetRoutesRequest
      type: object
    __listOfRoute:
      items:
        $ref: '#/components/schemas/Route'
      type: array
    GetStageRequest:
      properties: {}
      title: GetStageRequest
      type: object
    GetStagesRequest:
      properties: {}
      title: GetStagesRequest
      type: object
    __listOfStage:
      items:
        $ref: '#/components/schemas/Stage'
      type: array
    GetTagsRequest:
      properties: {}
      title: GetTagsRequest
      type: object
    GetVpcLinkRequest:
      properties: {}
      title: GetVpcLinkRequest
      type: object
    GetVpcLinksRequest:
      properties: {}
      title: GetVpcLinksRequest
      type: object
    __listOfVpcLink:
      items:
        $ref: '#/components/schemas/VpcLink'
      type: array
    ImportApiRequest:
      description: ""
      example:
        Body: ""
      properties:
        Body:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The OpenAPI definition. Supported only for HTTP APIs.
            xml:
              name: body
      required:
      - Body
      title: ImportApiRequest
      type: object
    Integration:
      description: Represents an integration.
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether an integration is managed by API Gateway.\
              \ If you created an API using using quick create, the resulting integration\
              \ is managed by API Gateway. You can update a managed integration, but\
              \ you can't delete it."
            xml:
              name: apiGatewayManaged
        ConnectionId:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          - description: The ID of the VPC link for a private integration. Supported
              only for HTTP APIs.
            xml:
              name: connectionId
        ConnectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          - description: The type of the network connection to the integration endpoint.
              Specify INTERNET for connections through the public routable internet
              or VPC_LINK for private connections between API Gateway and resources
              in a VPC. The default value is INTERNET.
            xml:
              name: connectionType
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Supported only for WebSocket APIs. Specifies how to handle\
              \ response payload content type conversions. Supported values are CONVERT_TO_BINARY\
              \ and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY:\
              \ Converts a response payload from a Base64-encoded string to the corresponding\
              \ binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from\
              \ a binary blob to a Base64-encoded string.</p> <p>If this property\
              \ is not defined, the response payload will be passed through from the\
              \ integration response to the route response or method response without\
              \ modification.</p>"
            xml:
              name: contentHandlingStrategy
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Specifies the credentials required for the integration,\
              \ if any. For AWS integrations, three options are available. To specify\
              \ an IAM Role for API Gateway to assume, use the role's Amazon Resource\
              \ Name (ARN). To require that the caller's identity be passed through\
              \ from the request, specify the string arn:aws:iam::*:user/*. To use\
              \ resource-based permissions on supported AWS services, specify null."
            xml:
              name: credentialsArn
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: Represents the description of an integration.
            xml:
              name: description
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: Represents the identifier of an integration.
            xml:
              name: integrationId
        IntegrationMethod:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: Specifies the integration's HTTP method type.
            xml:
              name: integrationMethod
        IntegrationResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The integration response selection expression for the integration.
              Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration
              Response Selection Expressions</a>.
            xml:
              name: integrationResponseSelectionExpression
        IntegrationSubtype:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: "Supported only for HTTP API AWS_PROXY integrations. Specifies\
              \ the AWS service action to invoke. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html\"\
              >Integration subtype reference</a>."
            xml:
              name: integrationSubtype
        IntegrationType:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          - description: "<p>The integration type of an integration. One of the following:</p>\
              \ <p>AWS: for integrating the route or method request with an AWS service\
              \ action, including the Lambda function-invoking action. With the Lambda\
              \ function-invoking action, this is referred to as the Lambda custom\
              \ integration. With any other AWS service action, this is known as AWS\
              \ integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY:\
              \ for integrating the route or method request with a Lambda function\
              \ or other AWS service action. This integration is also referred to\
              \ as a Lambda proxy integration.</p> <p>HTTP: for integrating the route\
              \ or method request with an HTTP endpoint. This integration is also\
              \ referred to as the HTTP custom integration. Supported only for WebSocket\
              \ APIs.</p> <p>HTTP_PROXY: for integrating the route or method request\
              \ with an HTTP endpoint, with the client request passed through as-is.\
              \ This is also referred to as HTTP proxy integration.</p> <p>MOCK: for\
              \ integrating the route or method request with API Gateway as a \"loopback\"\
              \ endpoint without invoking any backend. Supported only for WebSocket\
              \ APIs.</p>"
            xml:
              name: integrationType
        IntegrationUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: "<p>For a Lambda integration, specify the URI of a Lambda\
              \ function.</p> <p>For an HTTP integration, specify a fully-qualified\
              \ URL.</p> <p>For an HTTP API private integration, specify the ARN of\
              \ an Application Load Balancer listener, Network Load Balancer listener,\
              \ or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map\
              \ service, API Gateway uses DiscoverInstances to identify resources.\
              \ You can use query parameters to target specific resources. To learn\
              \ more, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html\"\
              >DiscoverInstances</a>. For private integrations, all resources must\
              \ be owned by the same AWS account.</p>"
            xml:
              name: integrationUri
        PassthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/PassthroughBehavior'
          - description: "<p>Specifies the pass-through behavior for incoming requests\
              \ based on the Content-Type header in the request, and the available\
              \ mapping templates specified as the requestTemplates property on the\
              \ Integration resource. There are three valid values: WHEN_NO_MATCH,\
              \ WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p>\
              \ <p>WHEN_NO_MATCH passes the request body for unmapped content types\
              \ through to the integration backend without transformation.</p> <p>NEVER\
              \ rejects unmapped content types with an HTTP 415 Unsupported Media\
              \ Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the\
              \ integration has no content types mapped to templates. However, if\
              \ there is at least one content type defined, unmapped content types\
              \ will be rejected with the same HTTP 415 Unsupported Media Type response.</p>"
            xml:
              name: passthroughBehavior
        PayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: Specifies the format of the payload sent to an integration.
              Required for HTTP APIs.
            xml:
              name: payloadFormatVersion
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          - description: "<p>For WebSocket APIs, a key-value map specifying request\
              \ parameters that are passed from the method request to the backend.\
              \ The key is an integration request parameter name and the associated\
              \ value is a method request parameter value or static value that must\
              \ be enclosed within single quotes and pre-encoded as required by the\
              \ backend. The method request parameter value must match the pattern\
              \ of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>\n\
              \          , where \n            <replaceable>{location}</replaceable>\n\
              \           is querystring, path, or header; and \n            <replaceable>{name}</replaceable>\n\
              \           must be a valid and unique method request parameter name.</p>\
              \ <p>For HTTP API integrations with a specified integrationSubtype,\
              \ request parameters are a key-value map specifying parameters that\
              \ are passed to AWS_PROXY integrations. You can provide static values,\
              \ or map request data, stage variables, or context variables that are\
              \ evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\"\
              >Working with AWS service integrations for HTTP APIs</a>.</p> <p>For\
              \ HTTP API integrations, without a specified integrationSubtype request\
              \ parameters are a key-value map specifying how to transform HTTP requests\
              \ before sending them to backend integrations. The key should follow\
              \ the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;.\
              \ The action can be append, overwrite or remove. For values, you can\
              \ provide static values, or map request data, stage variables, or context\
              \ variables that are evaluated at runtime. To learn more, see <a href=\"\
              https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
              >Transforming API requests and responses</a>.</p>"
            xml:
              name: requestParameters
        RequestTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          - description: "Represents a map of Velocity templates that are applied\
              \ on the request payload based on the value of the Content-Type header\
              \ sent by the client. The content type value is the key in this map,\
              \ and the template (as a String) is the value. Supported only for WebSocket\
              \ APIs."
            xml:
              name: requestTemplates
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/ResponseParameters'
          - description: "Supported only for HTTP APIs. You use response parameters\
              \ to transform the HTTP response from a backend integration before returning\
              \ the response to clients. Specify a key-value map from a selection\
              \ key to response parameters. The selection key must be a valid HTTP\
              \ status code within the range of 200-599. Response parameters are a\
              \ key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt;\
              \ or overwrite.statuscode. The action can be append, overwrite or remove.\
              \ The value can be a static value, or map to response data, stage variables,\
              \ or context variables that are evaluated at runtime. To learn more,\
              \ see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
              >Transforming API requests and responses</a>."
            xml:
              name: responseParameters
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The template selection expression for the integration. Supported
              only for WebSocket APIs.
            xml:
              name: templateSelectionExpression
        TimeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
          - description: "Custom timeout between 50 and 29,000 milliseconds for WebSocket\
              \ APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default\
              \ timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs."
            xml:
              name: timeoutInMillis
        TlsConfig:
          $ref: '#/components/schemas/CreateIntegrationResult_TlsConfig'
      type: object
    IntegrationResponse:
      description: Represents an integration response.
      properties:
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Supported only for WebSocket APIs. Specifies how to handle\
              \ response payload content type conversions. Supported values are CONVERT_TO_BINARY\
              \ and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY:\
              \ Converts a response payload from a Base64-encoded string to the corresponding\
              \ binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from\
              \ a binary blob to a Base64-encoded string.</p> <p>If this property\
              \ is not defined, the response payload will be passed through from the\
              \ integration response to the route response or method response without\
              \ modification.</p>"
            xml:
              name: contentHandlingStrategy
        IntegrationResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The integration response ID.
            xml:
              name: integrationResponseId
        IntegrationResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The integration response key.
            xml:
              name: integrationResponseKey
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          - description: "A key-value map specifying response parameters that are\
              \ passed to the method response from the backend. The key is a method\
              \ response header parameter name and the mapped value is an integration\
              \ response header value, a static value enclosed within a pair of single\
              \ quotes, or a JSON expression from the integration response body. The\
              \ mapping key must match the pattern of method.response.header.{name},\
              \ where name is a valid and unique header name. The mapped non-static\
              \ value must match the pattern of integration.response.header.{name}\
              \ or integration.response.body.{JSON-expression}, where name is a valid\
              \ and unique response header name and JSON-expression is a valid JSON\
              \ expression without the $ prefix."
            xml:
              name: responseParameters
        ResponseTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          - description: "The collection of response templates for the integration\
              \ response as a string-to-string map of key-value pairs. Response templates\
              \ are represented as a key/value map, with a content-type as the key\
              \ and a template as the value."
            xml:
              name: responseTemplates
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The template selection expressions for the integration response.
            xml:
              name: templateSelectionExpression
      required:
      - IntegrationResponseKey
      type: object
    Model:
      description: Represents a data model for an API. Supported only for WebSocket
        APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Create
        Models and Mapping Templates for Request and Response Mappings</a>.
      properties:
        ContentType:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And256'
          - description: "The content-type for the model, for example, \"application/json\"\
              ."
            xml:
              name: contentType
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the model.
            xml:
              name: description
        ModelId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The model identifier.
            xml:
              name: modelId
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the model. Must be alphanumeric.
            xml:
              name: name
        Schema:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          - description: "The schema for the model. For application/json models, this\
              \ should be JSON schema draft 4 model."
            xml:
              name: schema
      required:
      - Name
      type: object
    ReimportApiRequest:
      description: ""
      properties:
        Body:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The OpenAPI definition. Supported only for HTTP APIs.
            xml:
              name: body
      required:
      - Body
      title: ReimportApiRequest
      type: object
    Route:
      description: Represents a route.
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a route is managed by API Gateway. If\
              \ you created an API using quick create, the $default route is managed\
              \ by API Gateway. You can't modify the $default route key."
            xml:
              name: apiGatewayManaged
        ApiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether an API key is required for this route.
              Supported only for WebSocket APIs.
            xml:
              name: apiKeyRequired
        AuthorizationScopes:
          allOf:
          - $ref: '#/components/schemas/AuthorizationScopes'
          - description: "A list of authorization scopes configured on a route. The\
              \ scopes are used with a JWT authorizer to authorize the method invocation.\
              \ The authorization works by matching the route scopes against the scopes\
              \ parsed from the access token in the incoming request. The method invocation\
              \ is authorized if any route scope matches a claimed scope in the access\
              \ token. Otherwise, the invocation is not authorized. When the route\
              \ scope is configured, the client must provide an access token instead\
              \ of an identity token for authorization purposes."
            xml:
              name: authorizationScopes
        AuthorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          - description: "The authorization type for the route. For WebSocket APIs,\
              \ valid values are NONE for open access, AWS_IAM for using AWS IAM permissions,\
              \ and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values\
              \ are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for\
              \ using AWS IAM permissions, and CUSTOM for using a Lambda authorizer."
            xml:
              name: authorizationType
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the Authorizer resource to be associated
              with this route. The authorizer identifier is generated by API Gateway
              when you created the authorizer.
            xml:
              name: authorizerId
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The model selection expression for the route. Supported only
              for WebSocket APIs.
            xml:
              name: modelSelectionExpression
        OperationName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: The operation name for the route.
            xml:
              name: operationName
        RequestModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          - description: The request models for the route. Supported only for WebSocket
              APIs.
            xml:
              name: requestModels
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          - description: The request parameters for the route. Supported only for
              WebSocket APIs.
            xml:
              name: requestParameters
        RouteId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The route ID.
            xml:
              name: routeId
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The route key for the route.
            xml:
              name: routeKey
        RouteResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The route response selection expression for the route. Supported
              only for WebSocket APIs.
            xml:
              name: routeResponseSelectionExpression
        Target:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The target for the route.
            xml:
              name: target
      required:
      - RouteKey
      type: object
    RouteResponse:
      description: Represents a route response.
      properties:
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: Represents the model selection expression of a route response.
              Supported only for WebSocket APIs.
            xml:
              name: modelSelectionExpression
        ResponseModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          - description: Represents the response models of a route response.
            xml:
              name: responseModels
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          - description: Represents the response parameters of a route response.
            xml:
              name: responseParameters
        RouteResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: Represents the identifier of a route response.
            xml:
              name: routeResponseId
        RouteResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: Represents the route response key of a route response.
            xml:
              name: routeResponseKey
      required:
      - RouteResponseKey
      type: object
    Stage:
      description: Represents an API stage.
      properties:
        AccessLogSettings:
          $ref: '#/components/schemas/CreateStageResponse_AccessLogSettings'
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a stage is managed by API Gateway. If\
              \ you created an API using quick create, the $default stage is managed\
              \ by API Gateway. You can't modify the $default stage."
            xml:
              name: apiGatewayManaged
        AutoDeploy:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether updates to an API automatically trigger
              a new deployment. The default value is false.
            xml:
              name: autoDeploy
        ClientCertificateId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of a client certificate for a Stage. Supported
              only for WebSocket APIs.
            xml:
              name: clientCertificateId
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the stage was created.
            xml:
              name: createdDate
        DefaultRouteSettings:
          $ref: '#/components/schemas/CreateStageResponse_DefaultRouteSettings'
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the Deployment that the Stage is associated
              with. Can't be updated if autoDeploy is enabled.
            xml:
              name: deploymentId
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the stage.
            xml:
              name: description
        LastDeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Describes the status of the last deployment of a stage. Supported
              only for stages with autoDeploy enabled.
            xml:
              name: lastDeploymentStatusMessage
        LastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the stage was last updated.
            xml:
              name: lastUpdatedDate
        RouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettingsMap'
          - description: "Route settings for the stage, by routeKey."
            xml:
              name: routeSettings
        StageName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the stage.
            xml:
              name: stageName
        StageVariables:
          allOf:
          - $ref: '#/components/schemas/StageVariablesMap'
          - description: "A map that defines the stage variables for a stage resource.\
              \ Variable names can have alphanumeric and underscore characters, and\
              \ the values must match [A-Za-z0-9-._~:/?#&amp;=,]+."
            xml:
              name: stageVariables
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
            xml:
              name: tags
      required:
      - StageName
      type: object
    TagResourceRequest:
      description: Creates a new Tag resource to represent a tag.
      example:
        Tags: ""
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
            xml:
              name: tags
      title: TagResourceRequest
      type: object
    UntagResourceRequest:
      properties: {}
      title: UntagResourceRequest
      type: object
    UpdateApiMappingRequest:
      description: Updates an ApiMapping.
      example:
        Stage: ""
        ApiMappingKey: ""
        ApiId: ""
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The API identifier.
            xml:
              name: apiId
        ApiMappingKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The API mapping key.
            xml:
              name: apiMappingKey
        Stage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The API stage.
            xml:
              name: stage
      required:
      - ApiId
      title: UpdateApiMappingRequest
      type: object
    UpdateApiRequest:
      description: Updates an Api.
      example:
        RouteSelectionExpression: ""
        Target: ""
        Description: ""
        CorsConfiguration:
          AllowCredentials: ""
          AllowOrigins: ""
          ExposeHeaders: ""
          AllowHeaders: ""
          MaxAge: ""
          AllowMethods: ""
        CredentialsArn: ""
        Version: ""
        RouteKey: ""
        DisableExecuteApiEndpoint: ""
        DisableSchemaValidation: ""
        ApiKeySelectionExpression: ""
        Name: ""
      properties:
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: An API key selection expression. Supported only for WebSocket
              APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API
              Key Selection Expressions</a>.
            xml:
              name: apiKeySelectionExpression
        CorsConfiguration:
          $ref: '#/components/schemas/CreateApiResponse_CorsConfiguration'
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "This property is part of quick create. It specifies the\
              \ credentials required for the integration, if any. For a Lambda integration,\
              \ three options are available. To specify an IAM Role for API Gateway\
              \ to assume, use the role's Amazon Resource Name (ARN). To require that\
              \ the caller's identity be passed through from the request, specify\
              \ arn:aws:iam::*:user/*. To use resource-based permissions on supported\
              \ AWS services, don't specify this parameter. Currently, this property\
              \ is not used for HTTP integrations. If provided, this value replaces\
              \ the credentials associated with the quick create integration. Supported\
              \ only for HTTP APIs."
            xml:
              name: credentialsArn
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the API.
            xml:
              name: description
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Avoid validating models when creating a deployment. Supported
              only for WebSocket APIs.
            xml:
              name: disableSchemaValidation
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether clients can invoke your API by using the\
              \ default execute-api endpoint. By default, clients can invoke your\
              \ API with the default https://{api_id}.execute-api.{region}.amazonaws.com\
              \ endpoint. To require that clients use a custom domain name to invoke\
              \ your API, disable the default endpoint."
            xml:
              name: disableExecuteApiEndpoint
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the API.
            xml:
              name: name
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: "This property is part of quick create. If not specified,\
              \ the route created using quick create is kept. Otherwise, this value\
              \ replaces the route key of the quick create route. Additional routes\
              \ may still be added after the API is updated. Supported only for HTTP\
              \ APIs."
            xml:
              name: routeKey
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: "The route selection expression for the API. For HTTP APIs,\
              \ the routeSelectionExpression must be ${request.method} ${request.path}.\
              \ If not provided, this will be the default for HTTP APIs. This property\
              \ is required for WebSocket APIs."
            xml:
              name: routeSelectionExpression
        Target:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: "This property is part of quick create. For HTTP integrations,\
              \ specify a fully qualified URL. For Lambda integrations, specify a\
              \ function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY,\
              \ respectively. The value provided updates the integration URI and integration\
              \ type. You can update a quick-created target, but you can't remove\
              \ it from an API. Supported only for HTTP APIs."
            xml:
              name: target
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: A version identifier for the API.
            xml:
              name: version
      title: UpdateApiRequest
      type: object
    UpdateAuthorizerRequest:
      description: Updates an Authorizer.
      example:
        IdentityValidationExpression: ""
        AuthorizerCredentialsArn: ""
        AuthorizerUri: ""
        AuthorizerType: ""
        JwtConfiguration:
          Audience: ""
          Issuer: ""
        AuthorizerResultTtlInSeconds: ""
        AuthorizerPayloadFormatVersion: ""
        IdentitySource: ""
        EnableSimpleResponses: ""
        Name: ""
      properties:
        AuthorizerCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Specifies the required credentials as an IAM role for API\
              \ Gateway to invoke the authorizer. To specify an IAM role for API Gateway\
              \ to assume, use the role's Amazon Resource Name (ARN). To use resource-based\
              \ permissions on the Lambda function, don't specify this parameter."
            xml:
              name: authorizerCredentialsArn
        AuthorizerPayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: "Specifies the format of the payload sent to an HTTP API\
              \ Lambda authorizer. Required for HTTP API Lambda authorizers. Supported\
              \ values are 1.0 and 2.0. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>."
            xml:
              name: authorizerPayloadFormatVersion
        AuthorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          - description: "The time to live (TTL) for cached authorizer results, in\
              \ seconds. If it equals 0, authorization caching is disabled. If it\
              \ is greater than 0, API Gateway caches authorizer responses. The maximum\
              \ value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers."
            xml:
              name: authorizerResultTtlInSeconds
        AuthorizerType:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          - description: The authorizer type. Specify REQUEST for a Lambda function
              using incoming request parameters. Specify JWT to use JSON Web Tokens
              (supported only for HTTP APIs).
            xml:
              name: authorizerType
        AuthorizerUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: |-
              The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                             , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
            xml:
              name: authorizerUri
        EnableSimpleResponses:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Specifies whether a Lambda authorizer returns a response\
              \ in a simple format. By default, a Lambda authorizer must return an\
              \ IAM policy. If enabled, the Lambda authorizer can return a boolean\
              \ value instead of an IAM policy. Supported only for HTTP APIs. To learn\
              \ more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>"
            xml:
              name: enableSimpleResponses
        IdentitySource:
          allOf:
          - $ref: '#/components/schemas/IdentitySourceList'
          - description: "<p>The identity source for which authorization is requested.</p>\
              \ <p>For a REQUEST authorizer, this is optional. The value is a set\
              \ of one or more mapping expressions of the specified request parameters.\
              \ The identity source can be headers, query string parameters, stage\
              \ variables, and context parameters. For example, if an Auth header\
              \ and a Name query string parameter are defined as identity sources,\
              \ this value is route.request.header.Auth, route.request.querystring.Name\
              \ for WebSocket APIs. For HTTP APIs, use selection expressions prefixed\
              \ with $, for example, $request.header.Auth, $request.querystring.Name.\
              \ These parameters are used to perform runtime validation for Lambda-based\
              \ authorizers by verifying all of the identity-related request parameters\
              \ are present in the request, not null, and non-empty. Only when this\
              \ is true does the authorizer invoke the authorizer Lambda function.\
              \ Otherwise, it returns a 401 Unauthorized response without calling\
              \ the Lambda function. For HTTP APIs, identity sources are also used\
              \ as the cache key when caching is enabled. To learn more, see <a href=\"\
              https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
              >Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT,\
              \ a single entry that specifies where to extract the JSON Web Token\
              \ (JWT) from inbound requests. Currently only header-based and query\
              \ parameter-based selections are supported, for example $request.header.Authorization.</p>"
            xml:
              name: identitySource
        IdentityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: This parameter is not used.
            xml:
              name: identityValidationExpression
        JwtConfiguration:
          $ref: '#/components/schemas/CreateAuthorizerResponse_JwtConfiguration'
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the authorizer.
            xml:
              name: name
      title: UpdateAuthorizerRequest
      type: object
    UpdateDeploymentRequest:
      description: Updates a Deployment.
      example:
        Description: ""
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description for the deployment resource.
            xml:
              name: description
      title: UpdateDeploymentRequest
      type: object
    UpdateDomainNameRequest:
      description: Updates a DomainName.
      example:
        MutualTlsAuthentication:
          TruststoreVersion: ""
          TruststoreUri: ""
        DomainNameConfigurations: ""
      properties:
        DomainNameConfigurations:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigurations'
          - description: The domain name configurations.
            xml:
              name: domainNameConfigurations
        MutualTlsAuthentication:
          $ref: '#/components/schemas/CreateDomainNameRequest_MutualTlsAuthentication'
      title: UpdateDomainNameRequest
      type: object
    UpdateIntegrationRequest:
      description: Updates an Integration.
      example:
        Description: ""
        TemplateSelectionExpression: ""
        ConnectionType: ""
        ResponseParameters: ""
        IntegrationMethod: ""
        PassthroughBehavior: ""
        RequestParameters: ""
        ConnectionId: ""
        IntegrationUri: ""
        PayloadFormatVersion: ""
        CredentialsArn: ""
        RequestTemplates: ""
        TimeoutInMillis: ""
        TlsConfig:
          ServerNameToVerify: ""
        ContentHandlingStrategy: ""
        IntegrationSubtype: ""
        IntegrationType: ""
      properties:
        ConnectionId:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          - description: The ID of the VPC link for a private integration. Supported
              only for HTTP APIs.
            xml:
              name: connectionId
        ConnectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          - description: The type of the network connection to the integration endpoint.
              Specify INTERNET for connections through the public routable internet
              or VPC_LINK for private connections between API Gateway and resources
              in a VPC. The default value is INTERNET.
            xml:
              name: connectionType
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Supported only for WebSocket APIs. Specifies how to handle\
              \ response payload content type conversions. Supported values are CONVERT_TO_BINARY\
              \ and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY:\
              \ Converts a response payload from a Base64-encoded string to the corresponding\
              \ binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from\
              \ a binary blob to a Base64-encoded string.</p> <p>If this property\
              \ is not defined, the response payload will be passed through from the\
              \ integration response to the route response or method response without\
              \ modification.</p>"
            xml:
              name: contentHandlingStrategy
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Specifies the credentials required for the integration,\
              \ if any. For AWS integrations, three options are available. To specify\
              \ an IAM Role for API Gateway to assume, use the role's Amazon Resource\
              \ Name (ARN). To require that the caller's identity be passed through\
              \ from the request, specify the string arn:aws:iam::*:user/*. To use\
              \ resource-based permissions on supported AWS services, specify null."
            xml:
              name: credentialsArn
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the integration
            xml:
              name: description
        IntegrationMethod:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: Specifies the integration's HTTP method type.
            xml:
              name: integrationMethod
        IntegrationSubtype:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: "Supported only for HTTP API AWS_PROXY integrations. Specifies\
              \ the AWS service action to invoke. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html\"\
              >Integration subtype reference</a>."
            xml:
              name: integrationSubtype
        IntegrationType:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          - description: "<p>The integration type of an integration. One of the following:</p>\
              \ <p>AWS: for integrating the route or method request with an AWS service\
              \ action, including the Lambda function-invoking action. With the Lambda\
              \ function-invoking action, this is referred to as the Lambda custom\
              \ integration. With any other AWS service action, this is known as AWS\
              \ integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY:\
              \ for integrating the route or method request with a Lambda function\
              \ or other AWS service action. This integration is also referred to\
              \ as a Lambda proxy integration.</p> <p>HTTP: for integrating the route\
              \ or method request with an HTTP endpoint. This integration is also\
              \ referred to as the HTTP custom integration. Supported only for WebSocket\
              \ APIs.</p> <p>HTTP_PROXY: for integrating the route or method request\
              \ with an HTTP endpoint, with the client request passed through as-is.\
              \ This is also referred to as HTTP proxy integration. For HTTP API private\
              \ integrations, use an HTTP_PROXY integration.</p> <p>MOCK: for integrating\
              \ the route or method request with API Gateway as a \"loopback\" endpoint\
              \ without invoking any backend. Supported only for WebSocket APIs.</p>"
            xml:
              name: integrationType
        IntegrationUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: "<p>For a Lambda integration, specify the URI of a Lambda\
              \ function.</p> <p>For an HTTP integration, specify a fully-qualified\
              \ URL.</p> <p>For an HTTP API private integration, specify the ARN of\
              \ an Application Load Balancer listener, Network Load Balancer listener,\
              \ or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map\
              \ service, API Gateway uses DiscoverInstances to identify resources.\
              \ You can use query parameters to target specific resources. To learn\
              \ more, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html\"\
              >DiscoverInstances</a>. For private integrations, all resources must\
              \ be owned by the same AWS account.</p>"
            xml:
              name: integrationUri
        PassthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/PassthroughBehavior'
          - description: "<p>Specifies the pass-through behavior for incoming requests\
              \ based on the Content-Type header in the request, and the available\
              \ mapping templates specified as the requestTemplates property on the\
              \ Integration resource. There are three valid values: WHEN_NO_MATCH,\
              \ WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p>\
              \ <p>WHEN_NO_MATCH passes the request body for unmapped content types\
              \ through to the integration backend without transformation.</p> <p>NEVER\
              \ rejects unmapped content types with an HTTP 415 Unsupported Media\
              \ Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the\
              \ integration has no content types mapped to templates. However, if\
              \ there is at least one content type defined, unmapped content types\
              \ will be rejected with the same HTTP 415 Unsupported Media Type response.</p>"
            xml:
              name: passthroughBehavior
        PayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: Specifies the format of the payload sent to an integration.
              Required for HTTP APIs.
            xml:
              name: payloadFormatVersion
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          - description: "<p>For WebSocket APIs, a key-value map specifying request\
              \ parameters that are passed from the method request to the backend.\
              \ The key is an integration request parameter name and the associated\
              \ value is a method request parameter value or static value that must\
              \ be enclosed within single quotes and pre-encoded as required by the\
              \ backend. The method request parameter value must match the pattern\
              \ of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>\n\
              \          , where \n            <replaceable>{location}</replaceable>\n\
              \           is querystring, path, or header; and \n            <replaceable>{name}</replaceable>\n\
              \           must be a valid and unique method request parameter name.</p>\
              \ <p>For HTTP API integrations with a specified integrationSubtype,\
              \ request parameters are a key-value map specifying parameters that\
              \ are passed to AWS_PROXY integrations. You can provide static values,\
              \ or map request data, stage variables, or context variables that are\
              \ evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\"\
              >Working with AWS service integrations for HTTP APIs</a>.</p> <p>For\
              \ HTTP API integrations, without a specified integrationSubtype request\
              \ parameters are a key-value map specifying how to transform HTTP requests\
              \ before sending them to the backend. The key should follow the pattern\
              \ &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where\
              \ action can be append, overwrite or remove. For values, you can provide\
              \ static values, or map request data, stage variables, or context variables\
              \ that are evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
              >Transforming API requests and responses</a>.</p>"
            xml:
              name: requestParameters
        RequestTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          - description: "Represents a map of Velocity templates that are applied\
              \ on the request payload based on the value of the Content-Type header\
              \ sent by the client. The content type value is the key in this map,\
              \ and the template (as a String) is the value. Supported only for WebSocket\
              \ APIs."
            xml:
              name: requestTemplates
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/ResponseParameters'
          - description: "Supported only for HTTP APIs. You use response parameters\
              \ to transform the HTTP response from a backend integration before returning\
              \ the response to clients. Specify a key-value map from a selection\
              \ key to response parameters. The selection key must be a valid HTTP\
              \ status code within the range of 200-599. Response parameters are a\
              \ key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt;\
              \ or overwrite.statuscode. The action can be append, overwrite or remove.\
              \ The value can be a static value, or map to response data, stage variables,\
              \ or context variables that are evaluated at runtime. To learn more,\
              \ see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
              >Transforming API requests and responses</a>."
            xml:
              name: responseParameters
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The template selection expression for the integration.
            xml:
              name: templateSelectionExpression
        TimeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
          - description: "Custom timeout between 50 and 29,000 milliseconds for WebSocket\
              \ APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default\
              \ timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs."
            xml:
              name: timeoutInMillis
        TlsConfig:
          $ref: '#/components/schemas/CreateIntegrationRequest_TlsConfig'
      title: UpdateIntegrationRequest
      type: object
    UpdateIntegrationResponseRequest:
      description: Updates an IntegrationResponses.
      example:
        ResponseTemplates: ""
        TemplateSelectionExpression: ""
        ResponseParameters: ""
        ContentHandlingStrategy: ""
        IntegrationResponseKey: ""
      properties:
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Supported only for WebSocket APIs. Specifies how to handle\
              \ response payload content type conversions. Supported values are CONVERT_TO_BINARY\
              \ and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY:\
              \ Converts a response payload from a Base64-encoded string to the corresponding\
              \ binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from\
              \ a binary blob to a Base64-encoded string.</p> <p>If this property\
              \ is not defined, the response payload will be passed through from the\
              \ integration response to the route response or method response without\
              \ modification.</p>"
            xml:
              name: contentHandlingStrategy
        IntegrationResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The integration response key.
            xml:
              name: integrationResponseKey
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          - description: "A key-value map specifying response parameters that are\
              \ passed to the method response from the backend. The key is a method\
              \ response header parameter name and the mapped value is an integration\
              \ response header value, a static value enclosed within a pair of single\
              \ quotes, or a JSON expression from the integration response body. The\
              \ mapping key must match the pattern of method.response.header.<replaceable>{name}</replaceable>\n\
              \               , where name is a valid and unique header name. The\
              \ mapped non-static value must match the pattern of integration.response.header.<replaceable>{name}</replaceable>\n\
              \                or integration.response.body.<replaceable>{JSON-expression}</replaceable>\n\
              \               , where \n                  <replaceable>{name}</replaceable>\n\
              \                is a valid and unique response header name and \n \
              \                 <replaceable>{JSON-expression}</replaceable>\n   \
              \             is a valid JSON expression without the $ prefix."
            xml:
              name: responseParameters
        ResponseTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          - description: "The collection of response templates for the integration\
              \ response as a string-to-string map of key-value pairs. Response templates\
              \ are represented as a key/value map, with a content-type as the key\
              \ and a template as the value."
            xml:
              name: responseTemplates
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The template selection expression for the integration response.
              Supported only for WebSocket APIs.
            xml:
              name: templateSelectionExpression
      title: UpdateIntegrationResponseRequest
      type: object
    UpdateModelRequest:
      description: Updates a Model.
      example:
        Description: ""
        ContentType: ""
        Schema: ""
        Name: ""
      properties:
        ContentType:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And256'
          - description: "The content-type for the model, for example, \"application/json\"\
              ."
            xml:
              name: contentType
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description of the model.
            xml:
              name: description
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the model.
            xml:
              name: name
        Schema:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          - description: "The schema for the model. For application/json models, this\
              \ should be JSON schema draft 4 model."
            xml:
              name: schema
      title: UpdateModelRequest
      type: object
    UpdateRouteRequest:
      description: Updates a Route.
      example:
        Target: ""
        RouteResponseSelectionExpression: ""
        AuthorizerId: ""
        OperationName: ""
        RequestModels: ""
        ApiKeyRequired: ""
        AuthorizationScopes: ""
        RouteKey: ""
        AuthorizationType: ""
        ModelSelectionExpression: ""
        RequestParameters: ""
      properties:
        ApiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether an API key is required for the route. Supported
              only for WebSocket APIs.
            xml:
              name: apiKeyRequired
        AuthorizationScopes:
          allOf:
          - $ref: '#/components/schemas/AuthorizationScopes'
          - description: The authorization scopes supported by this route.
            xml:
              name: authorizationScopes
        AuthorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          - description: "The authorization type for the route. For WebSocket APIs,\
              \ valid values are NONE for open access, AWS_IAM for using AWS IAM permissions,\
              \ and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values\
              \ are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for\
              \ using AWS IAM permissions, and CUSTOM for using a Lambda authorizer."
            xml:
              name: authorizationType
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the Authorizer resource to be associated
              with this route. The authorizer identifier is generated by API Gateway
              when you created the authorizer.
            xml:
              name: authorizerId
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The model selection expression for the route. Supported only
              for WebSocket APIs.
            xml:
              name: modelSelectionExpression
        OperationName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: The operation name for the route.
            xml:
              name: operationName
        RequestModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          - description: The request models for the route. Supported only for WebSocket
              APIs.
            xml:
              name: requestModels
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          - description: The request parameters for the route. Supported only for
              WebSocket APIs.
            xml:
              name: requestParameters
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The route key for the route.
            xml:
              name: routeKey
        RouteResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The route response selection expression for the route. Supported
              only for WebSocket APIs.
            xml:
              name: routeResponseSelectionExpression
        Target:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The target for the route.
            xml:
              name: target
      title: UpdateRouteRequest
      type: object
    UpdateRouteResponseRequest:
      description: Updates a RouteResponse.
      example:
        RouteResponseKey: ""
        ResponseParameters: ""
        ModelSelectionExpression: ""
        ResponseModels: ""
      properties:
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          - description: The model selection expression for the route response. Supported
              only for WebSocket APIs.
            xml:
              name: modelSelectionExpression
        ResponseModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          - description: The response models for the route response.
            xml:
              name: responseModels
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          - description: The route response parameters.
            xml:
              name: responseParameters
        RouteResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          - description: The route response key.
            xml:
              name: routeResponseKey
      title: UpdateRouteResponseRequest
      type: object
    UpdateStageRequest:
      description: Updates a Stage.
      example:
        ClientCertificateId: ""
        DeploymentId: ""
        AccessLogSettings:
          Format: ""
          DestinationArn: ""
        AutoDeploy: ""
        Description: ""
        RouteSettings: ""
        StageVariables: ""
        DefaultRouteSettings:
          LoggingLevel: ""
          DataTraceEnabled: ""
          ThrottlingBurstLimit: ""
          DetailedMetricsEnabled: ""
          ThrottlingRateLimit: ""
      properties:
        AccessLogSettings:
          $ref: '#/components/schemas/CreateStageResponse_AccessLogSettings'
        AutoDeploy:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether updates to an API automatically trigger
              a new deployment. The default value is false.
            xml:
              name: autoDeploy
        ClientCertificateId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of a client certificate for a Stage.
            xml:
              name: clientCertificateId
        DefaultRouteSettings:
          $ref: '#/components/schemas/CreateStageRequest_DefaultRouteSettings'
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The deployment identifier for the API stage. Can't be updated
              if autoDeploy is enabled.
            xml:
              name: deploymentId
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: The description for the API stage.
            xml:
              name: description
        RouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettingsMap'
          - description: Route settings for the stage.
            xml:
              name: routeSettings
        StageVariables:
          allOf:
          - $ref: '#/components/schemas/StageVariablesMap'
          - description: "A map that defines the stage variables for a Stage. Variable\
              \ names can have alphanumeric and underscore characters, and the values\
              \ must match [A-Za-z0-9-._~:/?#&amp;=,]+."
            xml:
              name: stageVariables
      title: UpdateStageRequest
      type: object
    UpdateVpcLinkRequest:
      description: Updates a VPC link.
      example:
        Name: ""
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the VPC link.
            xml:
              name: name
      title: UpdateVpcLinkRequest
      type: object
    VpcLink:
      description: Represents a VPC link.
      properties:
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The timestamp when the VPC link was created.
            xml:
              name: createdDate
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          - description: The name of the VPC link.
            xml:
              name: name
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          - description: A list of security group IDs for the VPC link.
            xml:
              name: securityGroupIds
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIdList'
          - description: A list of subnet IDs to include in the VPC link.
            xml:
              name: subnetIds
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: Tags for the VPC link.
            xml:
              name: tags
        VpcLinkId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The ID of the VPC link.
            xml:
              name: vpcLinkId
        VpcLinkStatus:
          allOf:
          - $ref: '#/components/schemas/VpcLinkStatus'
          - description: The status of the VPC link.
            xml:
              name: vpcLinkStatus
        VpcLinkStatusMessage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          - description: A message summarizing the cause of the status of the VPC
              link.
            xml:
              name: vpcLinkStatusMessage
        VpcLinkVersion:
          allOf:
          - $ref: '#/components/schemas/VpcLinkVersion'
          - description: The version of the VPC link.
            xml:
              name: vpcLinkVersion
      required:
      - Name
      - SecurityGroupIds
      - SubnetIds
      - VpcLinkId
      type: object
    ImportApi_request:
      properties:
        body:
          description: The OpenAPI definition. Supported only for HTTP APIs.
          type: string
      required:
      - body
      type: object
    CreateApi_request_corsConfiguration:
      description: Represents a CORS configuration. Supported only for HTTP APIs.
        See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring
        CORS</a> for more information.
      properties:
        AllowCredentials:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether credentials are included in the CORS request.
              Supported only for HTTP APIs.
            xml:
              name: allowCredentials
        AllowHeaders:
          allOf:
          - $ref: '#/components/schemas/CorsHeaderList'
          - description: Represents a collection of allowed headers. Supported only
              for HTTP APIs.
            xml:
              name: allowHeaders
        AllowMethods:
          allOf:
          - $ref: '#/components/schemas/CorsMethodList'
          - description: Represents a collection of allowed HTTP methods. Supported
              only for HTTP APIs.
            xml:
              name: allowMethods
        AllowOrigins:
          allOf:
          - $ref: '#/components/schemas/CorsOriginList'
          - description: Represents a collection of allowed origins. Supported only
              for HTTP APIs.
            xml:
              name: allowOrigins
        ExposeHeaders:
          allOf:
          - $ref: '#/components/schemas/CorsHeaderList'
          - description: Represents a collection of exposed headers. Supported only
              for HTTP APIs.
            xml:
              name: exposeHeaders
        MaxAge:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetweenMinus1And86400'
          - description: The number of seconds that the browser should cache preflight
              request results. Supported only for HTTP APIs.
            xml:
              name: maxAge
      type: object
    CreateApi_request:
      properties:
        apiKeySelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
        corsConfiguration:
          $ref: '#/components/schemas/CreateApi_request_corsConfiguration'
        credentialsArn:
          description: Represents an Amazon Resource Name (ARN).
          type: string
        description:
          description: "A string with a length between [0-1024]."
          type: string
        disableSchemaValidation:
          description: Avoid validating models when creating a deployment. Supported
            only for WebSocket APIs.
          type: boolean
        disableExecuteApiEndpoint:
          description: "Specifies whether clients can invoke your API by using the\
            \ default execute-api endpoint. By default, clients can invoke your API\
            \ with the default https://{api_id}.execute-api.{region}.amazonaws.com\
            \ endpoint. To require that clients use a custom domain name to invoke\
            \ your API, disable the default endpoint."
          type: boolean
        name:
          description: "A string with a length between [1-128]."
          type: string
        protocolType:
          description: Represents a protocol type.
          enum:
          - WEBSOCKET
          - HTTP
          type: string
        routeKey:
          description: "After evaluating a selection expression, the result is compared\
            \ against one or more selection keys to find a matching key. See <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\"\
            >Selection Expressions</a> for a list of expressions and each expression's\
            \ associated selection key type."
          type: string
        routeSelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And1600'
          description: Represents a collection of tags associated with the resource.
          type: object
        target:
          description: "A string representation of a URI with a length between [1-2048]."
          type: string
        version:
          description: "A string with a length between [1-64]."
          type: string
      required:
      - name
      - protocolType
      type: object
    CreateApiMapping_request:
      properties:
        apiId:
          description: The identifier.
          type: string
        apiMappingKey:
          description: "After evaluating a selection expression, the result is compared\
            \ against one or more selection keys to find a matching key. See <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\"\
            >Selection Expressions</a> for a list of expressions and each expression's\
            \ associated selection key type."
          type: string
        stage:
          description: "A string with a length between [1-128]."
          type: string
      required:
      - apiId
      - stage
      type: object
    CreateAuthorizer_request_jwtConfiguration:
      description: Represents the configuration of a JWT authorizer. Required for
        the JWT authorizer type. Supported only for HTTP APIs.
      properties:
        Audience:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: A list of the intended recipients of the JWT. A valid JWT
              must provide an aud that matches at least one entry in this list. See
              <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>.
              Supported only for HTTP APIs.
            xml:
              name: audience
        Issuer:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: |-
              The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>
                             . Required for the JWT authorizer type. Supported only for HTTP APIs.
            xml:
              name: issuer
      type: object
    CreateAuthorizer_request:
      properties:
        authorizerCredentialsArn:
          description: Represents an Amazon Resource Name (ARN).
          type: string
        authorizerPayloadFormatVersion:
          description: "A string with a length between [1-64]."
          type: string
        authorizerResultTtlInSeconds:
          description: "An integer with a value between [0-3600]."
          maximum: 3600
          minimum: 0
          type: integer
        authorizerType:
          description: The authorizer type. Specify REQUEST for a Lambda function
            using incoming request parameters. Specify JWT to use JSON Web Tokens
            (supported only for HTTP APIs).
          enum:
          - REQUEST
          - JWT
          type: string
        authorizerUri:
          description: "A string representation of a URI with a length between [1-2048]."
          type: string
        enableSimpleResponses:
          description: "Specifies whether a Lambda authorizer returns a response in\
            \ a simple format. By default, a Lambda authorizer must return an IAM\
            \ policy. If enabled, the Lambda authorizer can return a boolean value\
            \ instead of an IAM policy. Supported only for HTTP APIs. To learn more,\
            \ see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
            >Working with AWS Lambda authorizers for HTTP APIs</a>"
          type: boolean
        identitySource:
          description: "The identity source for which authorization is requested.\
            \ For the REQUEST authorizer, this is required when authorization caching\
            \ is enabled. The value is a comma-separated string of one or more mapping\
            \ expressions of the specified request parameters. For example, if an\
            \ Auth header, a Name query string parameter are defined as identity sources,\
            \ this value is $method.request.header.Auth, $method.request.querystring.Name.\
            \ These parameters will be used to derive the authorization caching key\
            \ and to perform runtime validation of the REQUEST authorizer by verifying\
            \ all of the identity-related request parameters are present, not null\
            \ and non-empty. Only when this is true does the authorizer invoke the\
            \ authorizer Lambda function, otherwise, it returns a 401 Unauthorized\
            \ response without calling the Lambda function. The valid value is a string\
            \ of comma-separated mapping expressions of the specified request parameters.\
            \ When the authorization caching is not enabled, this property is optional."
          items:
            $ref: '#/components/schemas/__string'
          type: array
        identityValidationExpression:
          description: "A string with a length between [0-1024]."
          type: string
        jwtConfiguration:
          $ref: '#/components/schemas/CreateAuthorizer_request_jwtConfiguration'
        name:
          description: "A string with a length between [1-128]."
          type: string
      required:
      - authorizerType
      - identitySource
      - name
      type: object
    CreateDeployment_request:
      properties:
        description:
          description: "A string with a length between [0-1024]."
          type: string
        stageName:
          description: "A string with a length between [1-128]."
          type: string
      type: object
    CreateDomainName_request_mutualTlsAuthentication:
      description: The mutual TLS authentication configuration for a custom domain
        name.
      properties:
        TruststoreUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          - description: "An Amazon S3 URL that specifies the truststore for mutual\
              \ TLS authentication, for example, s3://<replaceable>bucket-name</replaceable>/<replaceable>key-name</replaceable>.\
              \ The truststore can contain certificates from public or private certificate\
              \ authorities. To update the truststore, upload a new version to S3,\
              \ and then update your custom domain name to use the new version. To\
              \ update the truststore, you must have permissions to access the S3\
              \ object."
            xml:
              name: truststoreUri
        TruststoreVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          - description: "The version of the S3 object that contains your truststore.\
              \ To specify a version, you must have versioning enabled for the S3\
              \ bucket."
            xml:
              name: truststoreVersion
      type: object
    CreateDomainName_request:
      properties:
        domainName:
          description: "A string with a length between [1-512]."
          type: string
        domainNameConfigurations:
          description: The domain name configurations.
          items:
            $ref: '#/components/schemas/DomainNameConfiguration'
          type: array
        mutualTlsAuthentication:
          $ref: '#/components/schemas/CreateDomainName_request_mutualTlsAuthentication'
        tags:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And1600'
          description: Represents a collection of tags associated with the resource.
          type: object
      required:
      - domainName
      type: object
    CreateIntegration_request_tlsConfig:
      description: "The TLS configuration for a private integration. If you specify\
        \ a TLS configuration, private integration traffic uses the HTTPS protocol.\
        \ Supported only for HTTP APIs."
      properties:
        ServerNameToVerify:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          - description: "If you specify a server name, API Gateway uses it to verify\
              \ the hostname on the integration's certificate. The server name is\
              \ also included in the TLS handshake to support Server Name Indication\
              \ (SNI) or virtual hosting."
            xml:
              name: serverNameToVerify
      type: object
    CreateIntegration_request:
      properties:
        connectionId:
          description: "A string with a length between [1-1024]."
          type: string
        connectionType:
          description: Represents a connection type.
          enum:
          - INTERNET
          - VPC_LINK
          type: string
        contentHandlingStrategy:
          description: Specifies how to handle response payload content type conversions.
            Supported only for WebSocket APIs.
          enum:
          - CONVERT_TO_BINARY
          - CONVERT_TO_TEXT
          type: string
        credentialsArn:
          description: Represents an Amazon Resource Name (ARN).
          type: string
        description:
          description: "A string with a length between [0-1024]."
          type: string
        integrationMethod:
          description: "A string with a length between [1-64]."
          type: string
        integrationSubtype:
          description: "A string with a length between [1-128]."
          type: string
        integrationType:
          description: Represents an API method integration type.
          enum:
          - AWS
          - HTTP
          - MOCK
          - HTTP_PROXY
          - AWS_PROXY
          type: string
        integrationUri:
          description: "A string representation of a URI with a length between [1-2048]."
          type: string
        passthroughBehavior:
          description: Represents passthrough behavior for an integration response.
            Supported only for WebSocket APIs.
          enum:
          - WHEN_NO_MATCH
          - NEVER
          - WHEN_NO_TEMPLATES
          type: string
        payloadFormatVersion:
          description: "A string with a length between [1-64]."
          type: string
        requestParameters:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: "<p>For WebSocket APIs, a key-value map specifying request\
            \ parameters that are passed from the method request to the backend. The\
            \ key is an integration request parameter name and the associated value\
            \ is a method request parameter value or static value that must be enclosed\
            \ within single quotes and pre-encoded as required by the backend. The\
            \ method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>\n\
            \          , where \n            <replaceable>{location}</replaceable>\n\
            \           is querystring, path, or header; and \n            <replaceable>{name}</replaceable>\n\
            \           must be a valid and unique method request parameter name.</p>\
            \ <p>For HTTP API integrations with a specified integrationSubtype, request\
            \ parameters are a key-value map specifying parameters that are passed\
            \ to AWS_PROXY integrations. You can provide static values, or map request\
            \ data, stage variables, or context variables that are evaluated at runtime.\
            \ To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\"\
            >Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP\
            \ API integrations without a specified integrationSubtype request parameters\
            \ are a key-value map specifying how to transform HTTP requests before\
            \ sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;\
            \ where action can be append, overwrite or remove. For values, you can\
            \ provide static values, or map request data, stage variables, or context\
            \ variables that are evaluated at runtime. To learn more, see <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
            >Transforming API requests and responses</a>.</p>"
          type: object
        requestTemplates:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: A mapping of identifier keys to templates. The value is an
            actual template script. The key is typically a SelectionKey which is chosen
            based on evaluating a selection expression.
          type: object
        responseParameters:
          additionalProperties:
            $ref: '#/components/schemas/IntegrationParameters'
          description: Supported only for HTTP APIs. You use response parameters to
            transform the HTTP response from a backend integration before returning
            the response to clients.
          type: object
        templateSelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
        timeoutInMillis:
          description: "An integer with a value between [50-30000]."
          maximum: 30000
          minimum: 50
          type: integer
        tlsConfig:
          $ref: '#/components/schemas/CreateIntegration_request_tlsConfig'
      required:
      - integrationType
      type: object
    CreateIntegrationResponse_request:
      properties:
        contentHandlingStrategy:
          description: Specifies how to handle response payload content type conversions.
            Supported only for WebSocket APIs.
          enum:
          - CONVERT_TO_BINARY
          - CONVERT_TO_TEXT
          type: string
        integrationResponseKey:
          description: "After evaluating a selection expression, the result is compared\
            \ against one or more selection keys to find a matching key. See <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\"\
            >Selection Expressions</a> for a list of expressions and each expression's\
            \ associated selection key type."
          type: string
        responseParameters:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: "<p>For WebSocket APIs, a key-value map specifying request\
            \ parameters that are passed from the method request to the backend. The\
            \ key is an integration request parameter name and the associated value\
            \ is a method request parameter value or static value that must be enclosed\
            \ within single quotes and pre-encoded as required by the backend. The\
            \ method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>\n\
            \          , where \n            <replaceable>{location}</replaceable>\n\
            \           is querystring, path, or header; and \n            <replaceable>{name}</replaceable>\n\
            \           must be a valid and unique method request parameter name.</p>\
            \ <p>For HTTP API integrations with a specified integrationSubtype, request\
            \ parameters are a key-value map specifying parameters that are passed\
            \ to AWS_PROXY integrations. You can provide static values, or map request\
            \ data, stage variables, or context variables that are evaluated at runtime.\
            \ To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\"\
            >Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP\
            \ API integrations without a specified integrationSubtype request parameters\
            \ are a key-value map specifying how to transform HTTP requests before\
            \ sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;\
            \ where action can be append, overwrite or remove. For values, you can\
            \ provide static values, or map request data, stage variables, or context\
            \ variables that are evaluated at runtime. To learn more, see <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
            >Transforming API requests and responses</a>.</p>"
          type: object
        responseTemplates:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: A mapping of identifier keys to templates. The value is an
            actual template script. The key is typically a SelectionKey which is chosen
            based on evaluating a selection expression.
          type: object
        templateSelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
      required:
      - integrationResponseKey
      type: object
    CreateModel_request:
      properties:
        contentType:
          description: "A string with a length between [1-256]."
          type: string
        description:
          description: "A string with a length between [0-1024]."
          type: string
        name:
          description: "A string with a length between [1-128]."
          type: string
        schema:
          description: "A string with a length between [0-32768]."
          type: string
      required:
      - name
      - schema
      type: object
    CreateRoute_request:
      properties:
        apiKeyRequired:
          description: Specifies whether an API key is required for the route. Supported
            only for WebSocket APIs.
          type: boolean
        authorizationScopes:
          description: "A list of authorization scopes configured on a route. The\
            \ scopes are used with a JWT authorizer to authorize the method invocation.\
            \ The authorization works by matching the route scopes against the scopes\
            \ parsed from the access token in the incoming request. The method invocation\
            \ is authorized if any route scope matches a claimed scope in the access\
            \ token. Otherwise, the invocation is not authorized. When the route scope\
            \ is configured, the client must provide an access token instead of an\
            \ identity token for authorization purposes."
          items:
            $ref: '#/components/schemas/StringWithLengthBetween1And64'
          type: array
        authorizationType:
          description: "The authorization type. For WebSocket APIs, valid values are\
            \ NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM\
            \ for using a Lambda authorizer. For HTTP APIs, valid values are NONE\
            \ for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS\
            \ IAM permissions, and CUSTOM for using a Lambda authorizer."
          enum:
          - NONE
          - AWS_IAM
          - CUSTOM
          - JWT
          type: string
        authorizerId:
          description: The identifier.
          type: string
        modelSelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
        operationName:
          description: "A string with a length between [1-64]."
          type: string
        requestModels:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The route models.
          type: object
        requestParameters:
          additionalProperties:
            $ref: '#/components/schemas/ParameterConstraints'
          description: The route parameters.
          type: object
        routeKey:
          description: "After evaluating a selection expression, the result is compared\
            \ against one or more selection keys to find a matching key. See <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\"\
            >Selection Expressions</a> for a list of expressions and each expression's\
            \ associated selection key type."
          type: string
        routeResponseSelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
        target:
          description: "A string with a length between [1-128]."
          type: string
      required:
      - routeKey
      type: object
    CreateRouteResponse_request:
      properties:
        modelSelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
        responseModels:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The route models.
          type: object
        responseParameters:
          additionalProperties:
            $ref: '#/components/schemas/ParameterConstraints'
          description: The route parameters.
          type: object
        routeResponseKey:
          description: "After evaluating a selection expression, the result is compared\
            \ against one or more selection keys to find a matching key. See <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\"\
            >Selection Expressions</a> for a list of expressions and each expression's\
            \ associated selection key type."
          type: string
      required:
      - routeResponseKey
      type: object
    CreateStage_request_accessLogSettings:
      description: Settings for logging access in a stage.
      properties:
        DestinationArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN of the CloudWatch Logs log group to receive access
              logs.
            xml:
              name: destinationArn
        Format:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          - description: "A single line format of the access logs of data, as specified\
              \ by selected $context variables. The format must include at least $context.requestId."
            xml:
              name: format
      type: object
    CreateStage_request_defaultRouteSettings:
      description: Represents a collection of route settings.
      properties:
        DataTraceEnabled:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether (true) or not (false) data trace logging
              is enabled for this route. This property affects the log entries pushed
              to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
            xml:
              name: dataTraceEnabled
        DetailedMetricsEnabled:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Specifies whether detailed metrics are enabled.
            xml:
              name: detailedMetricsEnabled
        LoggingLevel:
          allOf:
          - $ref: '#/components/schemas/LoggingLevel'
          - description: "Specifies the logging level for this route: INFO, ERROR,\
              \ or OFF. This property affects the log entries pushed to Amazon CloudWatch\
              \ Logs. Supported only for WebSocket APIs."
            xml:
              name: loggingLevel
        ThrottlingBurstLimit:
          allOf:
          - $ref: '#/components/schemas/__integer'
          - description: Specifies the throttling burst limit.
            xml:
              name: throttlingBurstLimit
        ThrottlingRateLimit:
          allOf:
          - $ref: '#/components/schemas/__double'
          - description: Specifies the throttling rate limit.
            xml:
              name: throttlingRateLimit
      type: object
    CreateStage_request:
      properties:
        accessLogSettings:
          $ref: '#/components/schemas/CreateStage_request_accessLogSettings'
        autoDeploy:
          description: Specifies whether updates to an API automatically trigger a
            new deployment. The default value is false.
          type: boolean
        clientCertificateId:
          description: The identifier.
          type: string
        defaultRouteSettings:
          $ref: '#/components/schemas/CreateStage_request_defaultRouteSettings'
        deploymentId:
          description: The identifier.
          type: string
        description:
          description: "A string with a length between [0-1024]."
          type: string
        routeSettings:
          additionalProperties:
            $ref: '#/components/schemas/RouteSettings'
          description: The route settings map.
          type: object
        stageName:
          description: "A string with a length between [1-128]."
          type: string
        stageVariables:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween0And2048'
          description: The stage variable map.
          type: object
        tags:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And1600'
          description: Represents a collection of tags associated with the resource.
          type: object
      required:
      - stageName
      type: object
    CreateVpcLink_request:
      properties:
        name:
          description: "A string with a length between [1-128]."
          type: string
        securityGroupIds:
          description: A list of security group IDs for the VPC link.
          items:
            $ref: '#/components/schemas/__string'
          type: array
        subnetIds:
          description: A list of subnet IDs to include in the VPC link.
          items:
            $ref: '#/components/schemas/__string'
          type: array
        tags:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And1600'
          description: Represents a collection of tags associated with the resource.
          type: object
      required:
      - name
      - subnetIds
      type: object
    UpdateApi_request:
      properties:
        apiKeySelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
        corsConfiguration:
          $ref: '#/components/schemas/CreateApi_request_corsConfiguration'
        credentialsArn:
          description: Represents an Amazon Resource Name (ARN).
          type: string
        description:
          description: "A string with a length between [0-1024]."
          type: string
        disableSchemaValidation:
          description: Avoid validating models when creating a deployment. Supported
            only for WebSocket APIs.
          type: boolean
        disableExecuteApiEndpoint:
          description: "Specifies whether clients can invoke your API by using the\
            \ default execute-api endpoint. By default, clients can invoke your API\
            \ with the default https://{api_id}.execute-api.{region}.amazonaws.com\
            \ endpoint. To require that clients use a custom domain name to invoke\
            \ your API, disable the default endpoint."
          type: boolean
        name:
          description: "A string with a length between [1-128]."
          type: string
        routeKey:
          description: "After evaluating a selection expression, the result is compared\
            \ against one or more selection keys to find a matching key. See <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\"\
            >Selection Expressions</a> for a list of expressions and each expression's\
            \ associated selection key type."
          type: string
        routeSelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
        target:
          description: "A string representation of a URI with a length between [1-2048]."
          type: string
        version:
          description: "A string with a length between [1-64]."
          type: string
      type: object
    UpdateApiMapping_request:
      properties:
        apiId:
          description: The identifier.
          type: string
        apiMappingKey:
          description: "After evaluating a selection expression, the result is compared\
            \ against one or more selection keys to find a matching key. See <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\"\
            >Selection Expressions</a> for a list of expressions and each expression's\
            \ associated selection key type."
          type: string
        stage:
          description: "A string with a length between [1-128]."
          type: string
      required:
      - apiId
      type: object
    UpdateAuthorizer_request:
      properties:
        authorizerCredentialsArn:
          description: Represents an Amazon Resource Name (ARN).
          type: string
        authorizerPayloadFormatVersion:
          description: "A string with a length between [1-64]."
          type: string
        authorizerResultTtlInSeconds:
          description: "An integer with a value between [0-3600]."
          maximum: 3600
          minimum: 0
          type: integer
        authorizerType:
          description: The authorizer type. Specify REQUEST for a Lambda function
            using incoming request parameters. Specify JWT to use JSON Web Tokens
            (supported only for HTTP APIs).
          enum:
          - REQUEST
          - JWT
          type: string
        authorizerUri:
          description: "A string representation of a URI with a length between [1-2048]."
          type: string
        enableSimpleResponses:
          description: "Specifies whether a Lambda authorizer returns a response in\
            \ a simple format. By default, a Lambda authorizer must return an IAM\
            \ policy. If enabled, the Lambda authorizer can return a boolean value\
            \ instead of an IAM policy. Supported only for HTTP APIs. To learn more,\
            \ see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\"\
            >Working with AWS Lambda authorizers for HTTP APIs</a>"
          type: boolean
        identitySource:
          description: "The identity source for which authorization is requested.\
            \ For the REQUEST authorizer, this is required when authorization caching\
            \ is enabled. The value is a comma-separated string of one or more mapping\
            \ expressions of the specified request parameters. For example, if an\
            \ Auth header, a Name query string parameter are defined as identity sources,\
            \ this value is $method.request.header.Auth, $method.request.querystring.Name.\
            \ These parameters will be used to derive the authorization caching key\
            \ and to perform runtime validation of the REQUEST authorizer by verifying\
            \ all of the identity-related request parameters are present, not null\
            \ and non-empty. Only when this is true does the authorizer invoke the\
            \ authorizer Lambda function, otherwise, it returns a 401 Unauthorized\
            \ response without calling the Lambda function. The valid value is a string\
            \ of comma-separated mapping expressions of the specified request parameters.\
            \ When the authorization caching is not enabled, this property is optional."
          items:
            $ref: '#/components/schemas/__string'
          type: array
        identityValidationExpression:
          description: "A string with a length between [0-1024]."
          type: string
        jwtConfiguration:
          $ref: '#/components/schemas/CreateAuthorizer_request_jwtConfiguration'
        name:
          description: "A string with a length between [1-128]."
          type: string
      type: object
    UpdateDeployment_request:
      properties:
        description:
          description: "A string with a length between [0-1024]."
          type: string
      type: object
    UpdateDomainName_request:
      properties:
        domainNameConfigurations:
          description: The domain name configurations.
          items:
            $ref: '#/components/schemas/DomainNameConfiguration'
          type: array
        mutualTlsAuthentication:
          $ref: '#/components/schemas/CreateDomainName_request_mutualTlsAuthentication'
      type: object
    UpdateIntegration_request:
      properties:
        connectionId:
          description: "A string with a length between [1-1024]."
          type: string
        connectionType:
          description: Represents a connection type.
          enum:
          - INTERNET
          - VPC_LINK
          type: string
        contentHandlingStrategy:
          description: Specifies how to handle response payload content type conversions.
            Supported only for WebSocket APIs.
          enum:
          - CONVERT_TO_BINARY
          - CONVERT_TO_TEXT
          type: string
        credentialsArn:
          description: Represents an Amazon Resource Name (ARN).
          type: string
        description:
          description: "A string with a length between [0-1024]."
          type: string
        integrationMethod:
          description: "A string with a length between [1-64]."
          type: string
        integrationSubtype:
          description: "A string with a length between [1-128]."
          type: string
        integrationType:
          description: Represents an API method integration type.
          enum:
          - AWS
          - HTTP
          - MOCK
          - HTTP_PROXY
          - AWS_PROXY
          type: string
        integrationUri:
          description: "A string representation of a URI with a length between [1-2048]."
          type: string
        passthroughBehavior:
          description: Represents passthrough behavior for an integration response.
            Supported only for WebSocket APIs.
          enum:
          - WHEN_NO_MATCH
          - NEVER
          - WHEN_NO_TEMPLATES
          type: string
        payloadFormatVersion:
          description: "A string with a length between [1-64]."
          type: string
        requestParameters:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: "<p>For WebSocket APIs, a key-value map specifying request\
            \ parameters that are passed from the method request to the backend. The\
            \ key is an integration request parameter name and the associated value\
            \ is a method request parameter value or static value that must be enclosed\
            \ within single quotes and pre-encoded as required by the backend. The\
            \ method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>\n\
            \          , where \n            <replaceable>{location}</replaceable>\n\
            \           is querystring, path, or header; and \n            <replaceable>{name}</replaceable>\n\
            \           must be a valid and unique method request parameter name.</p>\
            \ <p>For HTTP API integrations with a specified integrationSubtype, request\
            \ parameters are a key-value map specifying parameters that are passed\
            \ to AWS_PROXY integrations. You can provide static values, or map request\
            \ data, stage variables, or context variables that are evaluated at runtime.\
            \ To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\"\
            >Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP\
            \ API integrations without a specified integrationSubtype request parameters\
            \ are a key-value map specifying how to transform HTTP requests before\
            \ sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;\
            \ where action can be append, overwrite or remove. For values, you can\
            \ provide static values, or map request data, stage variables, or context\
            \ variables that are evaluated at runtime. To learn more, see <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
            >Transforming API requests and responses</a>.</p>"
          type: object
        requestTemplates:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: A mapping of identifier keys to templates. The value is an
            actual template script. The key is typically a SelectionKey which is chosen
            based on evaluating a selection expression.
          type: object
        responseParameters:
          additionalProperties:
            $ref: '#/components/schemas/IntegrationParameters'
          description: Supported only for HTTP APIs. You use response parameters to
            transform the HTTP response from a backend integration before returning
            the response to clients.
          type: object
        templateSelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
        timeoutInMillis:
          description: "An integer with a value between [50-30000]."
          maximum: 30000
          minimum: 50
          type: integer
        tlsConfig:
          $ref: '#/components/schemas/CreateIntegration_request_tlsConfig'
      type: object
    UpdateIntegrationResponse_request:
      properties:
        contentHandlingStrategy:
          description: Specifies how to handle response payload content type conversions.
            Supported only for WebSocket APIs.
          enum:
          - CONVERT_TO_BINARY
          - CONVERT_TO_TEXT
          type: string
        integrationResponseKey:
          description: "After evaluating a selection expression, the result is compared\
            \ against one or more selection keys to find a matching key. See <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\"\
            >Selection Expressions</a> for a list of expressions and each expression's\
            \ associated selection key type."
          type: string
        responseParameters:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: "<p>For WebSocket APIs, a key-value map specifying request\
            \ parameters that are passed from the method request to the backend. The\
            \ key is an integration request parameter name and the associated value\
            \ is a method request parameter value or static value that must be enclosed\
            \ within single quotes and pre-encoded as required by the backend. The\
            \ method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>\n\
            \          , where \n            <replaceable>{location}</replaceable>\n\
            \           is querystring, path, or header; and \n            <replaceable>{name}</replaceable>\n\
            \           must be a valid and unique method request parameter name.</p>\
            \ <p>For HTTP API integrations with a specified integrationSubtype, request\
            \ parameters are a key-value map specifying parameters that are passed\
            \ to AWS_PROXY integrations. You can provide static values, or map request\
            \ data, stage variables, or context variables that are evaluated at runtime.\
            \ To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\"\
            >Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP\
            \ API integrations without a specified integrationSubtype request parameters\
            \ are a key-value map specifying how to transform HTTP requests before\
            \ sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;\
            \ where action can be append, overwrite or remove. For values, you can\
            \ provide static values, or map request data, stage variables, or context\
            \ variables that are evaluated at runtime. To learn more, see <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
            >Transforming API requests and responses</a>.</p>"
          type: object
        responseTemplates:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: A mapping of identifier keys to templates. The value is an
            actual template script. The key is typically a SelectionKey which is chosen
            based on evaluating a selection expression.
          type: object
        templateSelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
      type: object
    UpdateModel_request:
      properties:
        contentType:
          description: "A string with a length between [1-256]."
          type: string
        description:
          description: "A string with a length between [0-1024]."
          type: string
        name:
          description: "A string with a length between [1-128]."
          type: string
        schema:
          description: "A string with a length between [0-32768]."
          type: string
      type: object
    UpdateRoute_request:
      properties:
        apiKeyRequired:
          description: Specifies whether an API key is required for the route. Supported
            only for WebSocket APIs.
          type: boolean
        authorizationScopes:
          description: "A list of authorization scopes configured on a route. The\
            \ scopes are used with a JWT authorizer to authorize the method invocation.\
            \ The authorization works by matching the route scopes against the scopes\
            \ parsed from the access token in the incoming request. The method invocation\
            \ is authorized if any route scope matches a claimed scope in the access\
            \ token. Otherwise, the invocation is not authorized. When the route scope\
            \ is configured, the client must provide an access token instead of an\
            \ identity token for authorization purposes."
          items:
            $ref: '#/components/schemas/StringWithLengthBetween1And64'
          type: array
        authorizationType:
          description: "The authorization type. For WebSocket APIs, valid values are\
            \ NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM\
            \ for using a Lambda authorizer. For HTTP APIs, valid values are NONE\
            \ for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS\
            \ IAM permissions, and CUSTOM for using a Lambda authorizer."
          enum:
          - NONE
          - AWS_IAM
          - CUSTOM
          - JWT
          type: string
        authorizerId:
          description: The identifier.
          type: string
        modelSelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
        operationName:
          description: "A string with a length between [1-64]."
          type: string
        requestModels:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The route models.
          type: object
        requestParameters:
          additionalProperties:
            $ref: '#/components/schemas/ParameterConstraints'
          description: The route parameters.
          type: object
        routeKey:
          description: "After evaluating a selection expression, the result is compared\
            \ against one or more selection keys to find a matching key. See <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\"\
            >Selection Expressions</a> for a list of expressions and each expression's\
            \ associated selection key type."
          type: string
        routeResponseSelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
        target:
          description: "A string with a length between [1-128]."
          type: string
      type: object
    UpdateRouteResponse_request:
      properties:
        modelSelectionExpression:
          description: An expression used to extract information at runtime. See <a
            href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
            Expressions</a> for more information.
          type: string
        responseModels:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The route models.
          type: object
        responseParameters:
          additionalProperties:
            $ref: '#/components/schemas/ParameterConstraints'
          description: The route parameters.
          type: object
        routeResponseKey:
          description: "After evaluating a selection expression, the result is compared\
            \ against one or more selection keys to find a matching key. See <a href=\"\
            https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\"\
            >Selection Expressions</a> for a list of expressions and each expression's\
            \ associated selection key type."
          type: string
      type: object
    UpdateStage_request:
      properties:
        accessLogSettings:
          $ref: '#/components/schemas/CreateStage_request_accessLogSettings'
        autoDeploy:
          description: Specifies whether updates to an API automatically trigger a
            new deployment. The default value is false.
          type: boolean
        clientCertificateId:
          description: The identifier.
          type: string
        defaultRouteSettings:
          $ref: '#/components/schemas/CreateStage_request_defaultRouteSettings'
        deploymentId:
          description: The identifier.
          type: string
        description:
          description: "A string with a length between [0-1024]."
          type: string
        routeSettings:
          additionalProperties:
            $ref: '#/components/schemas/RouteSettings'
          description: The route settings map.
          type: object
        stageVariables:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween0And2048'
          description: The stage variable map.
          type: object
      type: object
    UpdateVpcLink_request:
      properties:
        name:
          description: "A string with a length between [1-128]."
          type: string
      type: object
    TagResource_request:
      properties:
        tags:
          additionalProperties:
            $ref: '#/components/schemas/StringWithLengthBetween1And1600'
          description: Represents a collection of tags associated with the resource.
          type: object
      type: object
    CreateApiResponse_CorsConfiguration:
      allOf:
      - $ref: '#/components/schemas/Cors'
      - description: A CORS configuration. Supported only for HTTP APIs.
        xml:
          name: corsConfiguration
      example:
        AllowCredentials: ""
        AllowOrigins: ""
        ExposeHeaders: ""
        AllowHeaders: ""
        MaxAge: ""
        AllowMethods: ""
    CreateAuthorizerResponse_JwtConfiguration:
      allOf:
      - $ref: '#/components/schemas/JWTConfiguration'
      - description: Represents the configuration of a JWT authorizer. Required for
          the JWT authorizer type. Supported only for HTTP APIs.
        xml:
          name: jwtConfiguration
      example:
        Audience: ""
        Issuer: ""
    CreateDomainNameResponse_MutualTlsAuthentication:
      allOf:
      - $ref: '#/components/schemas/MutualTlsAuthentication'
      - description: The mutual TLS authentication configuration for a custom domain
          name.
        xml:
          name: mutualTlsAuthentication
      example:
        TruststoreWarnings: ""
        TruststoreVersion: ""
        TruststoreUri: ""
    CreateIntegrationResult_TlsConfig:
      allOf:
      - $ref: '#/components/schemas/TlsConfig'
      - description: "The TLS configuration for a private integration. If you specify\
          \ a TLS configuration, private integration traffic uses the HTTPS protocol.\
          \ Supported only for HTTP APIs."
        xml:
          name: tlsConfig
      example:
        ServerNameToVerify: ""
    CreateStageResponse_AccessLogSettings:
      allOf:
      - $ref: '#/components/schemas/AccessLogSettings'
      - description: Settings for logging access in this stage.
        xml:
          name: accessLogSettings
      example:
        Format: ""
        DestinationArn: ""
    CreateStageResponse_DefaultRouteSettings:
      allOf:
      - $ref: '#/components/schemas/RouteSettings'
      - description: Default route settings for the stage.
        xml:
          name: defaultRouteSettings
      example:
        LoggingLevel: ""
        DataTraceEnabled: ""
        ThrottlingBurstLimit: ""
        DetailedMetricsEnabled: ""
        ThrottlingRateLimit: ""
    CreateApiRequest_CorsConfiguration:
      allOf:
      - $ref: '#/components/schemas/Cors'
      - description: A CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring
          CORS</a> for more information.
        xml:
          name: corsConfiguration
      example:
        AllowCredentials: ""
        AllowOrigins: ""
        ExposeHeaders: ""
        AllowHeaders: ""
        MaxAge: ""
        AllowMethods: ""
    CreateDomainNameRequest_MutualTlsAuthentication:
      allOf:
      - $ref: '#/components/schemas/MutualTlsAuthenticationInput'
      - description: The mutual TLS authentication configuration for a custom domain
          name.
        xml:
          name: mutualTlsAuthentication
      example:
        TruststoreVersion: ""
        TruststoreUri: ""
    CreateIntegrationRequest_TlsConfig:
      allOf:
      - $ref: '#/components/schemas/TlsConfigInput'
      - description: "The TLS configuration for a private integration. If you specify\
          \ a TLS configuration, private integration traffic uses the HTTPS protocol.\
          \ Supported only for HTTP APIs."
        xml:
          name: tlsConfig
      example:
        ServerNameToVerify: ""
    CreateStageRequest_DefaultRouteSettings:
      allOf:
      - $ref: '#/components/schemas/RouteSettings'
      - description: The default route settings for the stage.
        xml:
          name: defaultRouteSettings
      example:
        LoggingLevel: ""
        DataTraceEnabled: ""
        ThrottlingBurstLimit: ""
        DetailedMetricsEnabled: ""
        ThrottlingRateLimit: ""
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

