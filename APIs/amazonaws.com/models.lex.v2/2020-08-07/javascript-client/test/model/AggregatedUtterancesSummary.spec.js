/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonLexModelBuildingV2);
  }
}(this, function(expect, AmazonLexModelBuildingV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonLexModelBuildingV2.AggregatedUtterancesSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AggregatedUtterancesSummary', function() {
    it('should create an instance of AggregatedUtterancesSummary', function() {
      // uncomment below and update the code to test AggregatedUtterancesSummary
      //var instance = new AmazonLexModelBuildingV2.AggregatedUtterancesSummary();
      //expect(instance).to.be.a(AmazonLexModelBuildingV2.AggregatedUtterancesSummary);
    });

    it('should have the property utterance (base name: "utterance")', function() {
      // uncomment below and update the code to test the property utterance
      //var instance = new AmazonLexModelBuildingV2.AggregatedUtterancesSummary();
      //expect(instance).to.be();
    });

    it('should have the property hitCount (base name: "hitCount")', function() {
      // uncomment below and update the code to test the property hitCount
      //var instance = new AmazonLexModelBuildingV2.AggregatedUtterancesSummary();
      //expect(instance).to.be();
    });

    it('should have the property missedCount (base name: "missedCount")', function() {
      // uncomment below and update the code to test the property missedCount
      //var instance = new AmazonLexModelBuildingV2.AggregatedUtterancesSummary();
      //expect(instance).to.be();
    });

    it('should have the property utteranceFirstRecordedInAggregationDuration (base name: "utteranceFirstRecordedInAggregationDuration")', function() {
      // uncomment below and update the code to test the property utteranceFirstRecordedInAggregationDuration
      //var instance = new AmazonLexModelBuildingV2.AggregatedUtterancesSummary();
      //expect(instance).to.be();
    });

    it('should have the property utteranceLastRecordedInAggregationDuration (base name: "utteranceLastRecordedInAggregationDuration")', function() {
      // uncomment below and update the code to test the property utteranceLastRecordedInAggregationDuration
      //var instance = new AmazonLexModelBuildingV2.AggregatedUtterancesSummary();
      //expect(instance).to.be();
    });

    it('should have the property containsDataFromDeletedResources (base name: "containsDataFromDeletedResources")', function() {
      // uncomment below and update the code to test the property containsDataFromDeletedResources
      //var instance = new AmazonLexModelBuildingV2.AggregatedUtterancesSummary();
      //expect(instance).to.be();
    });

  });

}));
