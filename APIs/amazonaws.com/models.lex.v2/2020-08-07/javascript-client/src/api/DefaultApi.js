/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchCreateCustomVocabularyItemRequest from '../model/BatchCreateCustomVocabularyItemRequest';
import BatchCreateCustomVocabularyItemResponse from '../model/BatchCreateCustomVocabularyItemResponse';
import BatchDeleteCustomVocabularyItemRequest from '../model/BatchDeleteCustomVocabularyItemRequest';
import BatchDeleteCustomVocabularyItemResponse from '../model/BatchDeleteCustomVocabularyItemResponse';
import BatchUpdateCustomVocabularyItemRequest from '../model/BatchUpdateCustomVocabularyItemRequest';
import BatchUpdateCustomVocabularyItemResponse from '../model/BatchUpdateCustomVocabularyItemResponse';
import BuildBotLocaleResponse from '../model/BuildBotLocaleResponse';
import CreateBotAliasRequest from '../model/CreateBotAliasRequest';
import CreateBotAliasResponse from '../model/CreateBotAliasResponse';
import CreateBotLocaleRequest from '../model/CreateBotLocaleRequest';
import CreateBotLocaleResponse from '../model/CreateBotLocaleResponse';
import CreateBotRequest from '../model/CreateBotRequest';
import CreateBotResponse from '../model/CreateBotResponse';
import CreateBotVersionRequest from '../model/CreateBotVersionRequest';
import CreateBotVersionResponse from '../model/CreateBotVersionResponse';
import CreateExportRequest from '../model/CreateExportRequest';
import CreateExportResponse from '../model/CreateExportResponse';
import CreateIntentRequest from '../model/CreateIntentRequest';
import CreateIntentResponse from '../model/CreateIntentResponse';
import CreateResourcePolicyResponse from '../model/CreateResourcePolicyResponse';
import CreateResourcePolicyStatementRequest from '../model/CreateResourcePolicyStatementRequest';
import CreateResourcePolicyStatementResponse from '../model/CreateResourcePolicyStatementResponse';
import CreateSlotRequest from '../model/CreateSlotRequest';
import CreateSlotResponse from '../model/CreateSlotResponse';
import CreateSlotTypeRequest from '../model/CreateSlotTypeRequest';
import CreateSlotTypeResponse from '../model/CreateSlotTypeResponse';
import CreateTestSetDiscrepancyReportRequest from '../model/CreateTestSetDiscrepancyReportRequest';
import CreateTestSetDiscrepancyReportResponse from '../model/CreateTestSetDiscrepancyReportResponse';
import CreateUploadUrlResponse from '../model/CreateUploadUrlResponse';
import DeleteBotAliasResponse from '../model/DeleteBotAliasResponse';
import DeleteBotLocaleResponse from '../model/DeleteBotLocaleResponse';
import DeleteBotResponse from '../model/DeleteBotResponse';
import DeleteBotVersionResponse from '../model/DeleteBotVersionResponse';
import DeleteCustomVocabularyResponse from '../model/DeleteCustomVocabularyResponse';
import DeleteExportResponse from '../model/DeleteExportResponse';
import DeleteImportResponse from '../model/DeleteImportResponse';
import DeleteResourcePolicyResponse from '../model/DeleteResourcePolicyResponse';
import DeleteResourcePolicyStatementResponse from '../model/DeleteResourcePolicyStatementResponse';
import DescribeBotAliasResponse from '../model/DescribeBotAliasResponse';
import DescribeBotLocaleResponse from '../model/DescribeBotLocaleResponse';
import DescribeBotRecommendationResponse from '../model/DescribeBotRecommendationResponse';
import DescribeBotResponse from '../model/DescribeBotResponse';
import DescribeBotVersionResponse from '../model/DescribeBotVersionResponse';
import DescribeCustomVocabularyMetadataResponse from '../model/DescribeCustomVocabularyMetadataResponse';
import DescribeExportResponse from '../model/DescribeExportResponse';
import DescribeImportResponse from '../model/DescribeImportResponse';
import DescribeIntentResponse from '../model/DescribeIntentResponse';
import DescribeResourcePolicyResponse from '../model/DescribeResourcePolicyResponse';
import DescribeSlotResponse from '../model/DescribeSlotResponse';
import DescribeSlotTypeResponse from '../model/DescribeSlotTypeResponse';
import DescribeTestExecutionResponse from '../model/DescribeTestExecutionResponse';
import DescribeTestSetDiscrepancyReportResponse from '../model/DescribeTestSetDiscrepancyReportResponse';
import DescribeTestSetGenerationResponse from '../model/DescribeTestSetGenerationResponse';
import DescribeTestSetResponse from '../model/DescribeTestSetResponse';
import GetTestExecutionArtifactsUrlResponse from '../model/GetTestExecutionArtifactsUrlResponse';
import ListAggregatedUtterancesRequest from '../model/ListAggregatedUtterancesRequest';
import ListAggregatedUtterancesResponse from '../model/ListAggregatedUtterancesResponse';
import ListBotAliasesRequest from '../model/ListBotAliasesRequest';
import ListBotAliasesResponse from '../model/ListBotAliasesResponse';
import ListBotLocalesRequest from '../model/ListBotLocalesRequest';
import ListBotLocalesResponse from '../model/ListBotLocalesResponse';
import ListBotRecommendationsRequest from '../model/ListBotRecommendationsRequest';
import ListBotRecommendationsResponse from '../model/ListBotRecommendationsResponse';
import ListBotVersionsRequest from '../model/ListBotVersionsRequest';
import ListBotVersionsResponse from '../model/ListBotVersionsResponse';
import ListBotsRequest from '../model/ListBotsRequest';
import ListBotsResponse from '../model/ListBotsResponse';
import ListBuiltInIntentsRequest from '../model/ListBuiltInIntentsRequest';
import ListBuiltInIntentsResponse from '../model/ListBuiltInIntentsResponse';
import ListBuiltInSlotTypesRequest from '../model/ListBuiltInSlotTypesRequest';
import ListBuiltInSlotTypesResponse from '../model/ListBuiltInSlotTypesResponse';
import ListCustomVocabularyItemsRequest from '../model/ListCustomVocabularyItemsRequest';
import ListCustomVocabularyItemsResponse from '../model/ListCustomVocabularyItemsResponse';
import ListExportsRequest from '../model/ListExportsRequest';
import ListExportsResponse from '../model/ListExportsResponse';
import ListImportsRequest from '../model/ListImportsRequest';
import ListImportsResponse from '../model/ListImportsResponse';
import ListIntentMetricsRequest from '../model/ListIntentMetricsRequest';
import ListIntentMetricsResponse from '../model/ListIntentMetricsResponse';
import ListIntentPathsRequest from '../model/ListIntentPathsRequest';
import ListIntentPathsResponse from '../model/ListIntentPathsResponse';
import ListIntentStageMetricsRequest from '../model/ListIntentStageMetricsRequest';
import ListIntentStageMetricsResponse from '../model/ListIntentStageMetricsResponse';
import ListIntentsRequest from '../model/ListIntentsRequest';
import ListIntentsResponse from '../model/ListIntentsResponse';
import ListRecommendedIntentsRequest from '../model/ListRecommendedIntentsRequest';
import ListRecommendedIntentsResponse from '../model/ListRecommendedIntentsResponse';
import ListSessionAnalyticsDataRequest from '../model/ListSessionAnalyticsDataRequest';
import ListSessionAnalyticsDataResponse from '../model/ListSessionAnalyticsDataResponse';
import ListSessionMetricsRequest from '../model/ListSessionMetricsRequest';
import ListSessionMetricsResponse from '../model/ListSessionMetricsResponse';
import ListSlotTypesRequest from '../model/ListSlotTypesRequest';
import ListSlotTypesResponse from '../model/ListSlotTypesResponse';
import ListSlotsRequest from '../model/ListSlotsRequest';
import ListSlotsResponse from '../model/ListSlotsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListTestExecutionResultItemsRequest from '../model/ListTestExecutionResultItemsRequest';
import ListTestExecutionResultItemsResponse from '../model/ListTestExecutionResultItemsResponse';
import ListTestExecutionsRequest from '../model/ListTestExecutionsRequest';
import ListTestExecutionsResponse from '../model/ListTestExecutionsResponse';
import ListTestSetRecordsRequest from '../model/ListTestSetRecordsRequest';
import ListTestSetRecordsResponse from '../model/ListTestSetRecordsResponse';
import ListTestSetsRequest from '../model/ListTestSetsRequest';
import ListTestSetsResponse from '../model/ListTestSetsResponse';
import ListUtteranceAnalyticsDataRequest from '../model/ListUtteranceAnalyticsDataRequest';
import ListUtteranceAnalyticsDataResponse from '../model/ListUtteranceAnalyticsDataResponse';
import ListUtteranceMetricsRequest from '../model/ListUtteranceMetricsRequest';
import ListUtteranceMetricsResponse from '../model/ListUtteranceMetricsResponse';
import SearchAssociatedTranscriptsRequest from '../model/SearchAssociatedTranscriptsRequest';
import SearchAssociatedTranscriptsResponse from '../model/SearchAssociatedTranscriptsResponse';
import StartBotRecommendationRequest from '../model/StartBotRecommendationRequest';
import StartBotRecommendationResponse from '../model/StartBotRecommendationResponse';
import StartImportRequest from '../model/StartImportRequest';
import StartImportResponse from '../model/StartImportResponse';
import StartTestExecutionRequest from '../model/StartTestExecutionRequest';
import StartTestExecutionResponse from '../model/StartTestExecutionResponse';
import StartTestSetGenerationRequest from '../model/StartTestSetGenerationRequest';
import StartTestSetGenerationResponse from '../model/StartTestSetGenerationResponse';
import StopBotRecommendationResponse from '../model/StopBotRecommendationResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateBotAliasRequest from '../model/UpdateBotAliasRequest';
import UpdateBotAliasResponse from '../model/UpdateBotAliasResponse';
import UpdateBotLocaleRequest from '../model/UpdateBotLocaleRequest';
import UpdateBotLocaleResponse from '../model/UpdateBotLocaleResponse';
import UpdateBotRecommendationRequest from '../model/UpdateBotRecommendationRequest';
import UpdateBotRecommendationResponse from '../model/UpdateBotRecommendationResponse';
import UpdateBotRequest from '../model/UpdateBotRequest';
import UpdateBotResponse from '../model/UpdateBotResponse';
import UpdateExportRequest from '../model/UpdateExportRequest';
import UpdateExportResponse from '../model/UpdateExportResponse';
import UpdateIntentRequest from '../model/UpdateIntentRequest';
import UpdateIntentResponse from '../model/UpdateIntentResponse';
import UpdateResourcePolicyRequest from '../model/UpdateResourcePolicyRequest';
import UpdateResourcePolicyResponse from '../model/UpdateResourcePolicyResponse';
import UpdateSlotRequest from '../model/UpdateSlotRequest';
import UpdateSlotResponse from '../model/UpdateSlotResponse';
import UpdateSlotTypeRequest from '../model/UpdateSlotTypeRequest';
import UpdateSlotTypeResponse from '../model/UpdateSlotTypeResponse';
import UpdateTestSetRequest from '../model/UpdateTestSetRequest';
import UpdateTestSetResponse from '../model/UpdateTestSetResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-08-07
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchCreateCustomVocabularyItem operation.
     * @callback module:api/DefaultApi~batchCreateCustomVocabularyItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchCreateCustomVocabularyItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a batch of custom vocabulary items for a given bot locale's custom vocabulary.
     * @param {String} botId The identifier of the bot associated with this custom vocabulary.
     * @param {String} botVersion The identifier of the version of the bot associated with this custom vocabulary.
     * @param {String} localeId The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"> Supported Languages </a>.
     * @param {module:model/BatchCreateCustomVocabularyItemRequest} batchCreateCustomVocabularyItemRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchCreateCustomVocabularyItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchCreateCustomVocabularyItemResponse}
     */
    batchCreateCustomVocabularyItem(botId, botVersion, localeId, batchCreateCustomVocabularyItemRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchCreateCustomVocabularyItemRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling batchCreateCustomVocabularyItem");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling batchCreateCustomVocabularyItem");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling batchCreateCustomVocabularyItem");
      }
      // verify the required parameter 'batchCreateCustomVocabularyItemRequest' is set
      if (batchCreateCustomVocabularyItemRequest === undefined || batchCreateCustomVocabularyItemRequest === null) {
        throw new Error("Missing the required parameter 'batchCreateCustomVocabularyItemRequest' when calling batchCreateCustomVocabularyItem");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchCreateCustomVocabularyItemResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchcreate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDeleteCustomVocabularyItem operation.
     * @callback module:api/DefaultApi~batchDeleteCustomVocabularyItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteCustomVocabularyItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a batch of custom vocabulary items for a given bot locale's custom vocabulary.
     * @param {String} botId The identifier of the bot associated with this custom vocabulary.
     * @param {String} botVersion The identifier of the version of the bot associated with this custom vocabulary.
     * @param {String} localeId The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"> Supported Languages </a>.
     * @param {module:model/BatchDeleteCustomVocabularyItemRequest} batchDeleteCustomVocabularyItemRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteCustomVocabularyItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteCustomVocabularyItemResponse}
     */
    batchDeleteCustomVocabularyItem(botId, botVersion, localeId, batchDeleteCustomVocabularyItemRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteCustomVocabularyItemRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling batchDeleteCustomVocabularyItem");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling batchDeleteCustomVocabularyItem");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling batchDeleteCustomVocabularyItem");
      }
      // verify the required parameter 'batchDeleteCustomVocabularyItemRequest' is set
      if (batchDeleteCustomVocabularyItemRequest === undefined || batchDeleteCustomVocabularyItemRequest === null) {
        throw new Error("Missing the required parameter 'batchDeleteCustomVocabularyItemRequest' when calling batchDeleteCustomVocabularyItem");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteCustomVocabularyItemResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchdelete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchUpdateCustomVocabularyItem operation.
     * @callback module:api/DefaultApi~batchUpdateCustomVocabularyItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateCustomVocabularyItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a batch of custom vocabulary items for a given bot locale's custom vocabulary.
     * @param {String} botId The identifier of the bot associated with this custom vocabulary
     * @param {String} botVersion The identifier of the version of the bot associated with this custom vocabulary.
     * @param {String} localeId The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"> Supported Languages </a>.
     * @param {module:model/BatchUpdateCustomVocabularyItemRequest} batchUpdateCustomVocabularyItemRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchUpdateCustomVocabularyItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateCustomVocabularyItemResponse}
     */
    batchUpdateCustomVocabularyItem(botId, botVersion, localeId, batchUpdateCustomVocabularyItemRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchUpdateCustomVocabularyItemRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling batchUpdateCustomVocabularyItem");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling batchUpdateCustomVocabularyItem");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling batchUpdateCustomVocabularyItem");
      }
      // verify the required parameter 'batchUpdateCustomVocabularyItemRequest' is set
      if (batchUpdateCustomVocabularyItemRequest === undefined || batchUpdateCustomVocabularyItemRequest === null) {
        throw new Error("Missing the required parameter 'batchUpdateCustomVocabularyItemRequest' when calling batchUpdateCustomVocabularyItem");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateCustomVocabularyItemResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchupdate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildBotLocale operation.
     * @callback module:api/DefaultApi~buildBotLocaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildBotLocaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Builds a bot, its intents, and its slot types into a specific locale. A bot can be built into multiple locales. At runtime the locale is used to choose a specific build of the bot.
     * @param {String} botId The identifier of the bot to build. The identifier is returned in the response from the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html\">CreateBot</a> operation.
     * @param {String} botVersion The version of the bot to build. This can only be the draft version of the bot.
     * @param {String} localeId The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~buildBotLocaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildBotLocaleResponse}
     */
    buildBotLocale(botId, botVersion, localeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling buildBotLocale");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling buildBotLocale");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling buildBotLocale");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildBotLocaleResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBot operation.
     * @callback module:api/DefaultApi~createBotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Amazon Lex conversational bot. 
     * @param {module:model/CreateBotRequest} createBotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBotResponse}
     */
    createBot(createBotRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBotRequest;
      // verify the required parameter 'createBotRequest' is set
      if (createBotRequest === undefined || createBotRequest === null) {
        throw new Error("Missing the required parameter 'createBotRequest' when calling createBot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBotResponse;
      return this.apiClient.callApi(
        '/bots/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBotAlias operation.
     * @callback module:api/DefaultApi~createBotAliasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBotAliasResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an alias for the specified version of a bot. Use an alias to enable you to change the version of a bot without updating applications that use the bot.</p> <p>For example, you can create an alias called \"PROD\" that your applications use to call the Amazon Lex bot. </p>
     * @param {String} botId The unique identifier of the bot that the alias applies to.
     * @param {module:model/CreateBotAliasRequest} createBotAliasRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBotAliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBotAliasResponse}
     */
    createBotAlias(botId, createBotAliasRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBotAliasRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling createBotAlias");
      }
      // verify the required parameter 'createBotAliasRequest' is set
      if (createBotAliasRequest === undefined || createBotAliasRequest === null) {
        throw new Error("Missing the required parameter 'createBotAliasRequest' when calling createBotAlias");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBotAliasResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botaliases/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBotLocale operation.
     * @callback module:api/DefaultApi~createBotLocaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBotLocaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a locale in the bot. The locale contains the intents and slot types that the bot uses in conversations with users in the specified language and locale. You must add a locale to a bot before you can add intents and slot types to the bot.
     * @param {String} botId The identifier of the bot to create the locale for.
     * @param {String} botVersion The version of the bot to create the locale for. This can only be the draft version of the bot.
     * @param {module:model/CreateBotLocaleRequest} createBotLocaleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBotLocaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBotLocaleResponse}
     */
    createBotLocale(botId, botVersion, createBotLocaleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBotLocaleRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling createBotLocale");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling createBotLocale");
      }
      // verify the required parameter 'createBotLocaleRequest' is set
      if (createBotLocaleRequest === undefined || createBotLocaleRequest === null) {
        throw new Error("Missing the required parameter 'createBotLocaleRequest' when calling createBotLocale");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBotLocaleResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBotVersion operation.
     * @callback module:api/DefaultApi~createBotVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBotVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new version of the bot based on the <code>DRAFT</code> version. If the <code>DRAFT</code> version of this resource hasn't changed since you created the last version, Amazon Lex doesn't create a new version, it returns the last created version.</p> <p>When you create the first version of a bot, Amazon Lex sets the version to 1. Subsequent versions increment by 1.</p>
     * @param {String} botId The identifier of the bot to create the version for.
     * @param {module:model/CreateBotVersionRequest} createBotVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBotVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBotVersionResponse}
     */
    createBotVersion(botId, createBotVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBotVersionRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling createBotVersion");
      }
      // verify the required parameter 'createBotVersionRequest' is set
      if (createBotVersionRequest === undefined || createBotVersionRequest === null) {
        throw new Error("Missing the required parameter 'createBotVersionRequest' when calling createBotVersion");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBotVersionResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExport operation.
     * @callback module:api/DefaultApi~createExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a zip archive containing the contents of a bot or a bot locale. The archive contains a directory structure that contains JSON files that define the bot.</p> <p>You can create an archive that contains the complete definition of a bot, or you can specify that the archive contain only the definition of a single bot locale.</p> <p>For more information about exporting bots, and about the structure of the export archive, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/importing-exporting.html\"> Importing and exporting bots </a> </p>
     * @param {module:model/CreateExportRequest} createExportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateExportResponse}
     */
    createExport(createExportRequest, opts, callback) {
      opts = opts || {};
      let postBody = createExportRequest;
      // verify the required parameter 'createExportRequest' is set
      if (createExportRequest === undefined || createExportRequest === null) {
        throw new Error("Missing the required parameter 'createExportRequest' when calling createExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateExportResponse;
      return this.apiClient.callApi(
        '/exports/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIntent operation.
     * @callback module:api/DefaultApi~createIntentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateIntentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an intent.</p> <p>To define the interaction between the user and your bot, you define one or more intents. For example, for a pizza ordering bot you would create an <code>OrderPizza</code> intent.</p> <p>When you create an intent, you must provide a name. You can optionally provide the following:</p> <ul> <li> <p>Sample utterances. For example, \"I want to order a pizza\" and \"Can I order a pizza.\" You can't provide utterances for built-in intents.</p> </li> <li> <p>Information to be gathered. You specify slots for the information that you bot requests from the user. You can specify standard slot types, such as date and time, or custom slot types for your application.</p> </li> <li> <p>How the intent is fulfilled. You can provide a Lambda function or configure the intent to return the intent information to your client application. If you use a Lambda function, Amazon Lex invokes the function when all of the intent information is available.</p> </li> <li> <p>A confirmation prompt to send to the user to confirm an intent. For example, \"Shall I order your pizza?\"</p> </li> <li> <p>A conclusion statement to send to the user after the intent is fulfilled. For example, \"I ordered your pizza.\"</p> </li> <li> <p>A follow-up prompt that asks the user for additional activity. For example, \"Do you want a drink with your pizza?\"</p> </li> </ul>
     * @param {String} botId The identifier of the bot associated with this intent.
     * @param {String} botVersion The version of the bot associated with this intent.
     * @param {String} localeId The identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {module:model/CreateIntentRequest} createIntentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createIntentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateIntentResponse}
     */
    createIntent(botId, botVersion, localeId, createIntentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createIntentRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling createIntent");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling createIntent");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling createIntent");
      }
      // verify the required parameter 'createIntentRequest' is set
      if (createIntentRequest === undefined || createIntentRequest === null) {
        throw new Error("Missing the required parameter 'createIntentRequest' when calling createIntent");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateIntentResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createResourcePolicy operation.
     * @callback module:api/DefaultApi~createResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateResourcePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new resource policy with the specified policy statements.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
     * @param {module:model/UpdateResourcePolicyRequest} updateResourcePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateResourcePolicyResponse}
     */
    createResourcePolicy(resourceArn, updateResourcePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateResourcePolicyRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling createResourcePolicy");
      }
      // verify the required parameter 'updateResourcePolicyRequest' is set
      if (updateResourcePolicyRequest === undefined || updateResourcePolicyRequest === null) {
        throw new Error("Missing the required parameter 'updateResourcePolicyRequest' when calling createResourcePolicy");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateResourcePolicyResponse;
      return this.apiClient.callApi(
        '/policy/{resourceArn}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createResourcePolicyStatement operation.
     * @callback module:api/DefaultApi~createResourcePolicyStatementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateResourcePolicyStatementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds a new resource policy statement to a bot or bot alias. If a resource policy exists, the statement is added to the current resource policy. If a policy doesn't exist, a new policy is created.</p> <p>You can't create a resource policy statement that allows cross-account access.</p>
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
     * @param {module:model/CreateResourcePolicyStatementRequest} createResourcePolicyStatementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [expectedRevisionId] <p>The identifier of the revision of the policy to edit. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.</p> <p>If you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.</p>
     * @param {module:api/DefaultApi~createResourcePolicyStatementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateResourcePolicyStatementResponse}
     */
    createResourcePolicyStatement(resourceArn, createResourcePolicyStatementRequest, opts, callback) {
      opts = opts || {};
      let postBody = createResourcePolicyStatementRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling createResourcePolicyStatement");
      }
      // verify the required parameter 'createResourcePolicyStatementRequest' is set
      if (createResourcePolicyStatementRequest === undefined || createResourcePolicyStatementRequest === null) {
        throw new Error("Missing the required parameter 'createResourcePolicyStatementRequest' when calling createResourcePolicyStatement");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'expectedRevisionId': opts['expectedRevisionId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateResourcePolicyStatementResponse;
      return this.apiClient.callApi(
        '/policy/{resourceArn}/statements/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSlot operation.
     * @callback module:api/DefaultApi~createSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSlotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a slot in an intent. A slot is a variable needed to fulfill an intent. For example, an <code>OrderPizza</code> intent might need slots for size, crust, and number of pizzas. For each slot, you define one or more utterances that Amazon Lex uses to elicit a response from the user. 
     * @param {String} botId The identifier of the bot associated with the slot.
     * @param {String} botVersion The version of the bot associated with the slot.
     * @param {String} localeId The identifier of the language and locale that the slot will be used in. The string must match one of the supported locales. All of the bots, intents, slot types used by the slot must have the same locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {String} intentId The identifier of the intent that contains the slot.
     * @param {module:model/CreateSlotRequest} createSlotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSlotResponse}
     */
    createSlot(botId, botVersion, localeId, intentId, createSlotRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSlotRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling createSlot");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling createSlot");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling createSlot");
      }
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling createSlot");
      }
      // verify the required parameter 'createSlotRequest' is set
      if (createSlotRequest === undefined || createSlotRequest === null) {
        throw new Error("Missing the required parameter 'createSlotRequest' when calling createSlot");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId,
        'intentId': intentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSlotResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSlotType operation.
     * @callback module:api/DefaultApi~createSlotTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSlotTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a custom slot type</p> <p> To create a custom slot type, specify a name for the slot type and a set of enumeration values, the values that a slot of this type can assume. </p>
     * @param {String} botId The identifier of the bot associated with this slot type.
     * @param {String} botVersion The identifier of the bot version associated with this slot type.
     * @param {String} localeId The identifier of the language and locale that the slot type will be used in. The string must match one of the supported locales. All of the bots, intents, and slots used by the slot type must have the same locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {module:model/CreateSlotTypeRequest} createSlotTypeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSlotTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSlotTypeResponse}
     */
    createSlotType(botId, botVersion, localeId, createSlotTypeRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSlotTypeRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling createSlotType");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling createSlotType");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling createSlotType");
      }
      // verify the required parameter 'createSlotTypeRequest' is set
      if (createSlotTypeRequest === undefined || createSlotTypeRequest === null) {
        throw new Error("Missing the required parameter 'createSlotTypeRequest' when calling createSlotType");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSlotTypeResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTestSetDiscrepancyReport operation.
     * @callback module:api/DefaultApi~createTestSetDiscrepancyReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTestSetDiscrepancyReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a report that describes the differences between the bot and the test set.
     * @param {String} testSetId The test set Id for the test set discrepancy report.
     * @param {module:model/CreateTestSetDiscrepancyReportRequest} createTestSetDiscrepancyReportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTestSetDiscrepancyReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTestSetDiscrepancyReportResponse}
     */
    createTestSetDiscrepancyReport(testSetId, createTestSetDiscrepancyReportRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTestSetDiscrepancyReportRequest;
      // verify the required parameter 'testSetId' is set
      if (testSetId === undefined || testSetId === null) {
        throw new Error("Missing the required parameter 'testSetId' when calling createTestSetDiscrepancyReport");
      }
      // verify the required parameter 'createTestSetDiscrepancyReportRequest' is set
      if (createTestSetDiscrepancyReportRequest === undefined || createTestSetDiscrepancyReportRequest === null) {
        throw new Error("Missing the required parameter 'createTestSetDiscrepancyReportRequest' when calling createTestSetDiscrepancyReport");
      }

      let pathParams = {
        'testSetId': testSetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTestSetDiscrepancyReportResponse;
      return this.apiClient.callApi(
        '/testsets/{testSetId}/testsetdiscrepancy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUploadUrl operation.
     * @callback module:api/DefaultApi~createUploadUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUploadUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a pre-signed S3 write URL that you use to upload the zip archive when importing a bot or a bot locale. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUploadUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUploadUrlResponse}
     */
    createUploadUrl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateUploadUrlResponse;
      return this.apiClient.callApi(
        '/createuploadurl/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBot operation.
     * @callback module:api/DefaultApi~deleteBotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes all versions of a bot, including the <code>Draft</code> version. To delete a specific version, use the <code>DeleteBotVersion</code> operation.</p> <p>When you delete a bot, all of the resources contained in the bot are also deleted. Deleting a bot removes all locales, intents, slot, and slot types defined for the bot.</p> <p>If a bot has an alias, the <code>DeleteBot</code> operation returns a <code>ResourceInUseException</code> exception. If you want to delete the bot and the alias, set the <code>skipResourceInUseCheck</code> parameter to <code>true</code>.</p>
     * @param {String} botId The identifier of the bot to delete. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [skipResourceInUseCheck] By default, Amazon Lex checks if any other resource, such as an alias or bot network, is using the bot version before it is deleted and throws a <code>ResourceInUseException</code> exception if the bot is being used by another resource. Set this parameter to <code>true</code> to skip this check and remove the bot even if it is being used by another resource.
     * @param {module:api/DefaultApi~deleteBotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBotResponse}
     */
    deleteBot(botId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling deleteBot");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
        'skipResourceInUseCheck': opts['skipResourceInUseCheck']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteBotResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBotAlias operation.
     * @callback module:api/DefaultApi~deleteBotAliasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBotAliasResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified bot alias.
     * @param {String} botAliasId The unique identifier of the bot alias to delete.
     * @param {String} botId The unique identifier of the bot associated with the alias to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [skipResourceInUseCheck] By default, Amazon Lex checks if any other resource, such as a bot network, is using the bot alias before it is deleted and throws a <code>ResourceInUseException</code> exception if the alias is being used by another resource. Set this parameter to <code>true</code> to skip this check and remove the alias even if it is being used by another resource.
     * @param {module:api/DefaultApi~deleteBotAliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBotAliasResponse}
     */
    deleteBotAlias(botAliasId, botId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botAliasId' is set
      if (botAliasId === undefined || botAliasId === null) {
        throw new Error("Missing the required parameter 'botAliasId' when calling deleteBotAlias");
      }
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling deleteBotAlias");
      }

      let pathParams = {
        'botAliasId': botAliasId,
        'botId': botId
      };
      let queryParams = {
        'skipResourceInUseCheck': opts['skipResourceInUseCheck']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteBotAliasResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botaliases/{botAliasId}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBotLocale operation.
     * @callback module:api/DefaultApi~deleteBotLocaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBotLocaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes a locale from a bot.</p> <p>When you delete a locale, all intents, slots, and slot types defined for the locale are also deleted.</p>
     * @param {String} botId The unique identifier of the bot that contains the locale.
     * @param {String} botVersion The version of the bot that contains the locale. 
     * @param {String} localeId The identifier of the language and locale that will be deleted. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBotLocaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBotLocaleResponse}
     */
    deleteBotLocale(botId, botVersion, localeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling deleteBotLocale");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling deleteBotLocale");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling deleteBotLocale");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteBotLocaleResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBotVersion operation.
     * @callback module:api/DefaultApi~deleteBotVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBotVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific version of a bot. To delete all versions of a bot, use the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DeleteBot.html\">DeleteBot</a> operation.
     * @param {String} botId The identifier of the bot that contains the version.
     * @param {String} botVersion The version of the bot to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [skipResourceInUseCheck] By default, Amazon Lex checks if any other resource, such as an alias or bot network, is using the bot version before it is deleted and throws a <code>ResourceInUseException</code> exception if the version is being used by another resource. Set this parameter to <code>true</code> to skip this check and remove the version even if it is being used by another resource.
     * @param {module:api/DefaultApi~deleteBotVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBotVersionResponse}
     */
    deleteBotVersion(botId, botVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling deleteBotVersion");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling deleteBotVersion");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion
      };
      let queryParams = {
        'skipResourceInUseCheck': opts['skipResourceInUseCheck']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteBotVersionResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomVocabulary operation.
     * @callback module:api/DefaultApi~deleteCustomVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteCustomVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a custom vocabulary from the specified locale in the specified bot.
     * @param {String} botId The unique identifier of the bot to remove the custom vocabulary from.
     * @param {String} botVersion The version of the bot to remove the custom vocabulary from.
     * @param {String} localeId The locale identifier for the locale that contains the custom vocabulary to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCustomVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteCustomVocabularyResponse}
     */
    deleteCustomVocabulary(botId, botVersion, localeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling deleteCustomVocabulary");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling deleteCustomVocabulary");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling deleteCustomVocabulary");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteCustomVocabularyResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExport operation.
     * @callback module:api/DefaultApi~deleteExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a previous export and the associated files stored in an S3 bucket.
     * @param {String} exportId The unique identifier of the export to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteExportResponse}
     */
    deleteExport(exportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'exportId' is set
      if (exportId === undefined || exportId === null) {
        throw new Error("Missing the required parameter 'exportId' when calling deleteExport");
      }

      let pathParams = {
        'exportId': exportId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteExportResponse;
      return this.apiClient.callApi(
        '/exports/{exportId}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImport operation.
     * @callback module:api/DefaultApi~deleteImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a previous import and the associated file stored in an S3 bucket.
     * @param {String} importId The unique identifier of the import to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteImportResponse}
     */
    deleteImport(importId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'importId' is set
      if (importId === undefined || importId === null) {
        throw new Error("Missing the required parameter 'importId' when calling deleteImport");
      }

      let pathParams = {
        'importId': importId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteImportResponse;
      return this.apiClient.callApi(
        '/imports/{importId}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntent operation.
     * @callback module:api/DefaultApi~deleteIntentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the specified intent.</p> <p>Deleting an intent also deletes the slots associated with the intent.</p>
     * @param {String} intentId The unique identifier of the intent to delete.
     * @param {String} botId The identifier of the bot associated with the intent.
     * @param {String} botVersion The version of the bot associated with the intent.
     * @param {String} localeId The identifier of the language and locale where the bot will be deleted. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteIntentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIntent(intentId, botId, botVersion, localeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling deleteIntent");
      }
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling deleteIntent");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling deleteIntent");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling deleteIntent");
      }

      let pathParams = {
        'intentId': intentId,
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourcePolicy operation.
     * @callback module:api/DefaultApi~deleteResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteResourcePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an existing policy from a bot or bot alias. If the resource doesn't have a policy attached, Amazon Lex returns an exception.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the bot or bot alias that has the resource policy attached.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [expectedRevisionId] <p>The identifier of the revision to edit. If this ID doesn't match the current revision number, Amazon Lex returns an exception</p> <p>If you don't specify a revision ID, Amazon Lex will delete the current policy.</p>
     * @param {module:api/DefaultApi~deleteResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteResourcePolicyResponse}
     */
    deleteResourcePolicy(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling deleteResourcePolicy");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'expectedRevisionId': opts['expectedRevisionId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteResourcePolicyResponse;
      return this.apiClient.callApi(
        '/policy/{resourceArn}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourcePolicyStatement operation.
     * @callback module:api/DefaultApi~deleteResourcePolicyStatementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteResourcePolicyStatementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a policy statement from a resource policy. If you delete the last statement from a policy, the policy is deleted. If you specify a statement ID that doesn't exist in the policy, or if the bot or bot alias doesn't have a policy attached, Amazon Lex returns an exception.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
     * @param {String} statementId The name of the statement (SID) to delete from the policy.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [expectedRevisionId] <p>The identifier of the revision of the policy to delete the statement from. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.</p> <p>If you don't specify a revision, Amazon Lex removes the current contents of the statement. </p>
     * @param {module:api/DefaultApi~deleteResourcePolicyStatementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteResourcePolicyStatementResponse}
     */
    deleteResourcePolicyStatement(resourceArn, statementId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling deleteResourcePolicyStatement");
      }
      // verify the required parameter 'statementId' is set
      if (statementId === undefined || statementId === null) {
        throw new Error("Missing the required parameter 'statementId' when calling deleteResourcePolicyStatement");
      }

      let pathParams = {
        'resourceArn': resourceArn,
        'statementId': statementId
      };
      let queryParams = {
        'expectedRevisionId': opts['expectedRevisionId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteResourcePolicyStatementResponse;
      return this.apiClient.callApi(
        '/policy/{resourceArn}/statements/{statementId}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSlot operation.
     * @callback module:api/DefaultApi~deleteSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified slot from an intent.
     * @param {String} slotId The identifier of the slot to delete. 
     * @param {String} botId The identifier of the bot associated with the slot to delete.
     * @param {String} botVersion The version of the bot associated with the slot to delete.
     * @param {String} localeId The identifier of the language and locale that the slot will be deleted from. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {String} intentId The identifier of the intent associated with the slot.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSlot(slotId, botId, botVersion, localeId, intentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling deleteSlot");
      }
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling deleteSlot");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling deleteSlot");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling deleteSlot");
      }
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling deleteSlot");
      }

      let pathParams = {
        'slotId': slotId,
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId,
        'intentId': intentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSlotType operation.
     * @callback module:api/DefaultApi~deleteSlotTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a slot type from a bot locale.</p> <p>If a slot is using the slot type, Amazon Lex throws a <code>ResourceInUseException</code> exception. To avoid the exception, set the <code>skipResourceInUseCheck</code> parameter to <code>true</code>.</p>
     * @param {String} slotTypeId The identifier of the slot type to delete.
     * @param {String} botId The identifier of the bot associated with the slot type.
     * @param {String} botVersion The version of the bot associated with the slot type.
     * @param {String} localeId The identifier of the language and locale that the slot type will be deleted from. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [skipResourceInUseCheck] By default, the <code>DeleteSlotType</code> operations throws a <code>ResourceInUseException</code> exception if you try to delete a slot type used by a slot. Set the <code>skipResourceInUseCheck</code> parameter to <code>true</code> to skip this check and remove the slot type even if a slot uses it.
     * @param {module:api/DefaultApi~deleteSlotTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSlotType(slotTypeId, botId, botVersion, localeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'slotTypeId' is set
      if (slotTypeId === undefined || slotTypeId === null) {
        throw new Error("Missing the required parameter 'slotTypeId' when calling deleteSlotType");
      }
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling deleteSlotType");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling deleteSlotType");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling deleteSlotType");
      }

      let pathParams = {
        'slotTypeId': slotTypeId,
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
        'skipResourceInUseCheck': opts['skipResourceInUseCheck']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTestSet operation.
     * @callback module:api/DefaultApi~deleteTestSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The action to delete the selected test set.
     * @param {String} testSetId The test set Id of the test set to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTestSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTestSet(testSetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'testSetId' is set
      if (testSetId === undefined || testSetId === null) {
        throw new Error("Missing the required parameter 'testSetId' when calling deleteTestSet");
      }

      let pathParams = {
        'testSetId': testSetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/testsets/{testSetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUtterances operation.
     * @callback module:api/DefaultApi~deleteUtterancesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes stored utterances.</p> <p>Amazon Lex stores the utterances that users send to your bot. Utterances are stored for 15 days for use with the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html\">ListAggregatedUtterances</a> operation, and then stored indefinitely for use in improving the ability of your bot to respond to user input..</p> <p>Use the <code>DeleteUtterances</code> operation to manually delete utterances for a specific session. When you use the <code>DeleteUtterances</code> operation, utterances stored for improving your bot's ability to respond to user input are deleted immediately. Utterances stored for use with the <code>ListAggregatedUtterances</code> operation are deleted after 15 days.</p>
     * @param {String} botId The unique identifier of the bot that contains the utterances.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [localeId] The identifier of the language and locale where the utterances were collected. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {String} [sessionId] The unique identifier of the session with the user. The ID is returned in the response from the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_RecognizeText.html\">RecognizeText</a> and <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_RecognizeUtterance.html\">RecognizeUtterance</a> operations.
     * @param {module:api/DefaultApi~deleteUtterancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteUtterances(botId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling deleteUtterances");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
        'localeId': opts['localeId'],
        'sessionId': opts['sessionId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/bots/{botId}/utterances/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeBot operation.
     * @callback module:api/DefaultApi~describeBotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeBotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides metadata information about a bot. 
     * @param {String} botId The unique identifier of the bot to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeBotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeBotResponse}
     */
    describeBot(botId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling describeBot");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeBotResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeBotAlias operation.
     * @callback module:api/DefaultApi~describeBotAliasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeBotAliasResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a specific bot alias.
     * @param {String} botAliasId The identifier of the bot alias to describe.
     * @param {String} botId The identifier of the bot associated with the bot alias to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeBotAliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeBotAliasResponse}
     */
    describeBotAlias(botAliasId, botId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botAliasId' is set
      if (botAliasId === undefined || botAliasId === null) {
        throw new Error("Missing the required parameter 'botAliasId' when calling describeBotAlias");
      }
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling describeBotAlias");
      }

      let pathParams = {
        'botAliasId': botAliasId,
        'botId': botId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeBotAliasResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botaliases/{botAliasId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeBotLocale operation.
     * @callback module:api/DefaultApi~describeBotLocaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeBotLocaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the settings that a bot has for a specific locale. 
     * @param {String} botId The identifier of the bot associated with the locale.
     * @param {String} botVersion The version of the bot associated with the locale.
     * @param {String} localeId The unique identifier of the locale to describe. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeBotLocaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeBotLocaleResponse}
     */
    describeBotLocale(botId, botVersion, localeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling describeBotLocale");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling describeBotLocale");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling describeBotLocale");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeBotLocaleResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeBotRecommendation operation.
     * @callback module:api/DefaultApi~describeBotRecommendationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeBotRecommendationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides metadata information about a bot recommendation. This information will enable you to get a description on the request inputs, to download associated transcripts after processing is complete, and to download intents and slot-types generated by the bot recommendation.
     * @param {String} botId The unique identifier of the bot associated with the bot recommendation.
     * @param {String} botVersion The version of the bot associated with the bot recommendation.
     * @param {String} localeId The identifier of the language and locale of the bot recommendation to describe. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {String} botRecommendationId The identifier of the bot recommendation to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeBotRecommendationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeBotRecommendationResponse}
     */
    describeBotRecommendation(botId, botVersion, localeId, botRecommendationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling describeBotRecommendation");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling describeBotRecommendation");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling describeBotRecommendation");
      }
      // verify the required parameter 'botRecommendationId' is set
      if (botRecommendationId === undefined || botRecommendationId === null) {
        throw new Error("Missing the required parameter 'botRecommendationId' when calling describeBotRecommendation");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId,
        'botRecommendationId': botRecommendationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeBotRecommendationResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeBotVersion operation.
     * @callback module:api/DefaultApi~describeBotVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeBotVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides metadata about a version of a bot.
     * @param {String} botId The identifier of the bot containing the version to return metadata for.
     * @param {String} botVersion The version of the bot to return metadata for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeBotVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeBotVersionResponse}
     */
    describeBotVersion(botId, botVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling describeBotVersion");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling describeBotVersion");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeBotVersionResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCustomVocabularyMetadata operation.
     * @callback module:api/DefaultApi~describeCustomVocabularyMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeCustomVocabularyMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides metadata information about a custom vocabulary.
     * @param {String} botId The unique identifier of the bot that contains the custom vocabulary.
     * @param {String} botVersion The bot version of the bot to return metadata for.
     * @param {String} localeId The locale to return the custom vocabulary information for. The locale must be <code>en_GB</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeCustomVocabularyMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeCustomVocabularyMetadataResponse}
     */
    describeCustomVocabularyMetadata(botId, botVersion, localeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling describeCustomVocabularyMetadata");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling describeCustomVocabularyMetadata");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling describeCustomVocabularyMetadata");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeCustomVocabularyMetadataResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeExport operation.
     * @callback module:api/DefaultApi~describeExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specific export.
     * @param {String} exportId The unique identifier of the export to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeExportResponse}
     */
    describeExport(exportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'exportId' is set
      if (exportId === undefined || exportId === null) {
        throw new Error("Missing the required parameter 'exportId' when calling describeExport");
      }

      let pathParams = {
        'exportId': exportId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeExportResponse;
      return this.apiClient.callApi(
        '/exports/{exportId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeImport operation.
     * @callback module:api/DefaultApi~describeImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specific import.
     * @param {String} importId The unique identifier of the import to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeImportResponse}
     */
    describeImport(importId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'importId' is set
      if (importId === undefined || importId === null) {
        throw new Error("Missing the required parameter 'importId' when calling describeImport");
      }

      let pathParams = {
        'importId': importId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeImportResponse;
      return this.apiClient.callApi(
        '/imports/{importId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeIntent operation.
     * @callback module:api/DefaultApi~describeIntentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeIntentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata about an intent.
     * @param {String} intentId The identifier of the intent to describe.
     * @param {String} botId The identifier of the bot associated with the intent.
     * @param {String} botVersion The version of the bot associated with the intent.
     * @param {String} localeId The identifier of the language and locale of the intent to describe. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeIntentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeIntentResponse}
     */
    describeIntent(intentId, botId, botVersion, localeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling describeIntent");
      }
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling describeIntent");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling describeIntent");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling describeIntent");
      }

      let pathParams = {
        'intentId': intentId,
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeIntentResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeResourcePolicy operation.
     * @callback module:api/DefaultApi~describeResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeResourcePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the resource policy and policy revision for a bot or bot alias.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeResourcePolicyResponse}
     */
    describeResourcePolicy(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling describeResourcePolicy");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeResourcePolicyResponse;
      return this.apiClient.callApi(
        '/policy/{resourceArn}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSlot operation.
     * @callback module:api/DefaultApi~describeSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSlotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metadata information about a slot.
     * @param {String} slotId The unique identifier for the slot.
     * @param {String} botId The identifier of the bot associated with the slot.
     * @param {String} botVersion The version of the bot associated with the slot.
     * @param {String} localeId The identifier of the language and locale of the slot to describe. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {String} intentId The identifier of the intent that contains the slot.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSlotResponse}
     */
    describeSlot(slotId, botId, botVersion, localeId, intentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling describeSlot");
      }
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling describeSlot");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling describeSlot");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling describeSlot");
      }
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling describeSlot");
      }

      let pathParams = {
        'slotId': slotId,
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId,
        'intentId': intentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeSlotResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSlotType operation.
     * @callback module:api/DefaultApi~describeSlotTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSlotTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metadata information about a slot type.
     * @param {String} slotTypeId The identifier of the slot type.
     * @param {String} botId The identifier of the bot associated with the slot type.
     * @param {String} botVersion The version of the bot associated with the slot type.
     * @param {String} localeId The identifier of the language and locale of the slot type to describe. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSlotTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSlotTypeResponse}
     */
    describeSlotType(slotTypeId, botId, botVersion, localeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'slotTypeId' is set
      if (slotTypeId === undefined || slotTypeId === null) {
        throw new Error("Missing the required parameter 'slotTypeId' when calling describeSlotType");
      }
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling describeSlotType");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling describeSlotType");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling describeSlotType");
      }

      let pathParams = {
        'slotTypeId': slotTypeId,
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeSlotTypeResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTestExecution operation.
     * @callback module:api/DefaultApi~describeTestExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTestExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metadata information about the test execution.
     * @param {String} testExecutionId The execution Id of the test set execution.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTestExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTestExecutionResponse}
     */
    describeTestExecution(testExecutionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'testExecutionId' is set
      if (testExecutionId === undefined || testExecutionId === null) {
        throw new Error("Missing the required parameter 'testExecutionId' when calling describeTestExecution");
      }

      let pathParams = {
        'testExecutionId': testExecutionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeTestExecutionResponse;
      return this.apiClient.callApi(
        '/testexecutions/{testExecutionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTestSet operation.
     * @callback module:api/DefaultApi~describeTestSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTestSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metadata information about the test set.
     * @param {String} testSetId The test set Id for the test set request.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTestSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTestSetResponse}
     */
    describeTestSet(testSetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'testSetId' is set
      if (testSetId === undefined || testSetId === null) {
        throw new Error("Missing the required parameter 'testSetId' when calling describeTestSet");
      }

      let pathParams = {
        'testSetId': testSetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeTestSetResponse;
      return this.apiClient.callApi(
        '/testsets/{testSetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTestSetDiscrepancyReport operation.
     * @callback module:api/DefaultApi~describeTestSetDiscrepancyReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTestSetDiscrepancyReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metadata information about the test set discrepancy report.
     * @param {String} testSetDiscrepancyReportId The unique identifier of the test set discrepancy report.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTestSetDiscrepancyReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTestSetDiscrepancyReportResponse}
     */
    describeTestSetDiscrepancyReport(testSetDiscrepancyReportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'testSetDiscrepancyReportId' is set
      if (testSetDiscrepancyReportId === undefined || testSetDiscrepancyReportId === null) {
        throw new Error("Missing the required parameter 'testSetDiscrepancyReportId' when calling describeTestSetDiscrepancyReport");
      }

      let pathParams = {
        'testSetDiscrepancyReportId': testSetDiscrepancyReportId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeTestSetDiscrepancyReportResponse;
      return this.apiClient.callApi(
        '/testsetdiscrepancy/{testSetDiscrepancyReportId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTestSetGeneration operation.
     * @callback module:api/DefaultApi~describeTestSetGenerationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTestSetGenerationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metadata information about the test set generation.
     * @param {String} testSetGenerationId The unique identifier of the test set generation.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTestSetGenerationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTestSetGenerationResponse}
     */
    describeTestSetGeneration(testSetGenerationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'testSetGenerationId' is set
      if (testSetGenerationId === undefined || testSetGenerationId === null) {
        throw new Error("Missing the required parameter 'testSetGenerationId' when calling describeTestSetGeneration");
      }

      let pathParams = {
        'testSetGenerationId': testSetGenerationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeTestSetGenerationResponse;
      return this.apiClient.callApi(
        '/testsetgenerations/{testSetGenerationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestExecutionArtifactsUrl operation.
     * @callback module:api/DefaultApi~getTestExecutionArtifactsUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTestExecutionArtifactsUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The pre-signed Amazon S3 URL to download the test execution result artifacts.
     * @param {String} testExecutionId The unique identifier of the completed test execution.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTestExecutionArtifactsUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTestExecutionArtifactsUrlResponse}
     */
    getTestExecutionArtifactsUrl(testExecutionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'testExecutionId' is set
      if (testExecutionId === undefined || testExecutionId === null) {
        throw new Error("Missing the required parameter 'testExecutionId' when calling getTestExecutionArtifactsUrl");
      }

      let pathParams = {
        'testExecutionId': testExecutionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTestExecutionArtifactsUrlResponse;
      return this.apiClient.callApi(
        '/testexecutions/{testExecutionId}/artifacturl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAggregatedUtterances operation.
     * @callback module:api/DefaultApi~listAggregatedUtterancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAggregatedUtterancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a list of utterances that users have sent to the bot.</p> <p>Utterances are aggregated by the text of the utterance. For example, all instances where customers used the phrase \"I want to order pizza\" are aggregated into the same line in the response.</p> <p>You can see both detected utterances and missed utterances. A detected utterance is where the bot properly recognized the utterance and activated the associated intent. A missed utterance was not recognized by the bot and didn't activate an intent.</p> <p>Utterances can be aggregated for a bot alias or for a bot version, but not both at the same time.</p> <p>Utterances statistics are not generated under the following conditions:</p> <ul> <li> <p>The <code>childDirected</code> field was set to true when the bot was created.</p> </li> <li> <p>You are using slot obfuscation with one or more slots.</p> </li> <li> <p>You opted out of participating in improving Amazon Lex.</p> </li> </ul>
     * @param {String} botId The unique identifier of the bot associated with this request.
     * @param {module:model/ListAggregatedUtterancesRequest} listAggregatedUtterancesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAggregatedUtterancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAggregatedUtterancesResponse}
     */
    listAggregatedUtterances(botId, listAggregatedUtterancesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAggregatedUtterancesRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listAggregatedUtterances");
      }
      // verify the required parameter 'listAggregatedUtterancesRequest' is set
      if (listAggregatedUtterancesRequest === undefined || listAggregatedUtterancesRequest === null) {
        throw new Error("Missing the required parameter 'listAggregatedUtterancesRequest' when calling listAggregatedUtterances");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAggregatedUtterancesResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/aggregatedutterances/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBotAliases operation.
     * @callback module:api/DefaultApi~listBotAliasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBotAliasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of aliases for the specified bot.
     * @param {String} botId The identifier of the bot to list aliases for.
     * @param {module:model/ListBotAliasesRequest} listBotAliasesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listBotAliasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBotAliasesResponse}
     */
    listBotAliases(botId, listBotAliasesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listBotAliasesRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listBotAliases");
      }
      // verify the required parameter 'listBotAliasesRequest' is set
      if (listBotAliasesRequest === undefined || listBotAliasesRequest === null) {
        throw new Error("Missing the required parameter 'listBotAliasesRequest' when calling listBotAliases");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBotAliasesResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botaliases/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBotLocales operation.
     * @callback module:api/DefaultApi~listBotLocalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBotLocalesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of locales for the specified bot.
     * @param {String} botId The identifier of the bot to list locales for.
     * @param {String} botVersion The version of the bot to list locales for.
     * @param {module:model/ListBotLocalesRequest} listBotLocalesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listBotLocalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBotLocalesResponse}
     */
    listBotLocales(botId, botVersion, listBotLocalesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listBotLocalesRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listBotLocales");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling listBotLocales");
      }
      // verify the required parameter 'listBotLocalesRequest' is set
      if (listBotLocalesRequest === undefined || listBotLocalesRequest === null) {
        throw new Error("Missing the required parameter 'listBotLocalesRequest' when calling listBotLocales");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBotLocalesResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBotRecommendations operation.
     * @callback module:api/DefaultApi~listBotRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBotRecommendationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of bot recommendations that meet the specified criteria.
     * @param {String} botId The unique identifier of the bot that contains the bot recommendation list.
     * @param {String} botVersion The version of the bot that contains the bot recommendation list.
     * @param {String} localeId The identifier of the language and locale of the bot recommendation list.
     * @param {module:model/ListBotRecommendationsRequest} listBotRecommendationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listBotRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBotRecommendationsResponse}
     */
    listBotRecommendations(botId, botVersion, localeId, listBotRecommendationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listBotRecommendationsRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listBotRecommendations");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling listBotRecommendations");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling listBotRecommendations");
      }
      // verify the required parameter 'listBotRecommendationsRequest' is set
      if (listBotRecommendationsRequest === undefined || listBotRecommendationsRequest === null) {
        throw new Error("Missing the required parameter 'listBotRecommendationsRequest' when calling listBotRecommendations");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBotRecommendationsResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBotVersions operation.
     * @callback module:api/DefaultApi~listBotVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBotVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets information about all of the versions of a bot.</p> <p>The <code>ListBotVersions</code> operation returns a summary of each version of a bot. For example, if a bot has three numbered versions, the <code>ListBotVersions</code> operation returns for summaries, one for each numbered version and one for the <code>DRAFT</code> version.</p> <p>The <code>ListBotVersions</code> operation always returns at least one version, the <code>DRAFT</code> version.</p>
     * @param {String} botId The identifier of the bot to list versions for.
     * @param {module:model/ListBotVersionsRequest} listBotVersionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listBotVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBotVersionsResponse}
     */
    listBotVersions(botId, listBotVersionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listBotVersionsRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listBotVersions");
      }
      // verify the required parameter 'listBotVersionsRequest' is set
      if (listBotVersionsRequest === undefined || listBotVersionsRequest === null) {
        throw new Error("Missing the required parameter 'listBotVersionsRequest' when calling listBotVersions");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBotVersionsResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBots operation.
     * @callback module:api/DefaultApi~listBotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of available bots.
     * @param {module:model/ListBotsRequest} listBotsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listBotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBotsResponse}
     */
    listBots(listBotsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listBotsRequest;
      // verify the required parameter 'listBotsRequest' is set
      if (listBotsRequest === undefined || listBotsRequest === null) {
        throw new Error("Missing the required parameter 'listBotsRequest' when calling listBots");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBotsResponse;
      return this.apiClient.callApi(
        '/bots/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBuiltInIntents operation.
     * @callback module:api/DefaultApi~listBuiltInIntentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuiltInIntentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of built-in intents provided by Amazon Lex that you can use in your bot. </p> <p>To use a built-in intent as a the base for your own intent, include the built-in intent signature in the <code>parentIntentSignature</code> parameter when you call the <code>CreateIntent</code> operation. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateIntent.html\">CreateIntent</a>.</p>
     * @param {String} localeId The identifier of the language and locale of the intents to list. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {module:model/ListBuiltInIntentsRequest} listBuiltInIntentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listBuiltInIntentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuiltInIntentsResponse}
     */
    listBuiltInIntents(localeId, listBuiltInIntentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listBuiltInIntentsRequest;
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling listBuiltInIntents");
      }
      // verify the required parameter 'listBuiltInIntentsRequest' is set
      if (listBuiltInIntentsRequest === undefined || listBuiltInIntentsRequest === null) {
        throw new Error("Missing the required parameter 'listBuiltInIntentsRequest' when calling listBuiltInIntents");
      }

      let pathParams = {
        'localeId': localeId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBuiltInIntentsResponse;
      return this.apiClient.callApi(
        '/builtins/locales/{localeId}/intents/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBuiltInSlotTypes operation.
     * @callback module:api/DefaultApi~listBuiltInSlotTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuiltInSlotTypesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of built-in slot types that meet the specified criteria.
     * @param {String} localeId The identifier of the language and locale of the slot types to list. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {module:model/ListBuiltInSlotTypesRequest} listBuiltInSlotTypesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listBuiltInSlotTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuiltInSlotTypesResponse}
     */
    listBuiltInSlotTypes(localeId, listBuiltInSlotTypesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listBuiltInSlotTypesRequest;
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling listBuiltInSlotTypes");
      }
      // verify the required parameter 'listBuiltInSlotTypesRequest' is set
      if (listBuiltInSlotTypesRequest === undefined || listBuiltInSlotTypesRequest === null) {
        throw new Error("Missing the required parameter 'listBuiltInSlotTypesRequest' when calling listBuiltInSlotTypes");
      }

      let pathParams = {
        'localeId': localeId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBuiltInSlotTypesResponse;
      return this.apiClient.callApi(
        '/builtins/locales/{localeId}/slottypes/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCustomVocabularyItems operation.
     * @callback module:api/DefaultApi~listCustomVocabularyItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCustomVocabularyItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Paginated list of custom vocabulary items for a given bot locale's custom vocabulary.
     * @param {String} botId The identifier of the version of the bot associated with this custom vocabulary.
     * @param {String} botVersion The bot version of the bot to the list custom vocabulary request.
     * @param {String} localeId The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
     * @param {module:model/ListCustomVocabularyItemsRequest} listCustomVocabularyItemsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCustomVocabularyItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCustomVocabularyItemsResponse}
     */
    listCustomVocabularyItems(botId, botVersion, localeId, listCustomVocabularyItemsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCustomVocabularyItemsRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listCustomVocabularyItems");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling listCustomVocabularyItems");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling listCustomVocabularyItems");
      }
      // verify the required parameter 'listCustomVocabularyItemsRequest' is set
      if (listCustomVocabularyItemsRequest === undefined || listCustomVocabularyItemsRequest === null) {
        throw new Error("Missing the required parameter 'listCustomVocabularyItemsRequest' when calling listCustomVocabularyItems");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCustomVocabularyItemsResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExports operation.
     * @callback module:api/DefaultApi~listExportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the exports for a bot, bot locale, or custom vocabulary. Exports are kept in the list for 7 days.
     * @param {module:model/ListExportsRequest} listExportsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listExportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExportsResponse}
     */
    listExports(listExportsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listExportsRequest;
      // verify the required parameter 'listExportsRequest' is set
      if (listExportsRequest === undefined || listExportsRequest === null) {
        throw new Error("Missing the required parameter 'listExportsRequest' when calling listExports");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListExportsResponse;
      return this.apiClient.callApi(
        '/exports/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImports operation.
     * @callback module:api/DefaultApi~listImportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListImportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the imports for a bot, bot locale, or custom vocabulary. Imports are kept in the list for 7 days.
     * @param {module:model/ListImportsRequest} listImportsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listImportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListImportsResponse}
     */
    listImports(listImportsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listImportsRequest;
      // verify the required parameter 'listImportsRequest' is set
      if (listImportsRequest === undefined || listImportsRequest === null) {
        throw new Error("Missing the required parameter 'listImportsRequest' when calling listImports");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListImportsResponse;
      return this.apiClient.callApi(
        '/imports/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIntentMetrics operation.
     * @callback module:api/DefaultApi~listIntentMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIntentMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves summary metrics for the intents in your bot. The following fields are required:</p> <ul> <li> <p> <code>metrics</code> – A list of <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsIntentMetric.html\">AnalyticsIntentMetric</a> objects. In each object, use the <code>name</code> field to specify the metric to calculate, the <code>statistic</code> field to specify whether to calculate the <code>Sum</code>, <code>Average</code>, or <code>Max</code> number, and the <code>order</code> field to specify whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results, the <code>groupBy</code> field to specify categories by which to group the results, and the <code>binBy</code> field to specify time intervals by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul> <p>Note that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>. You can specify only one <code>order</code> in a given request.</p>
     * @param {String} botId The identifier for the bot for which you want to retrieve intent metrics.
     * @param {module:model/ListIntentMetricsRequest} listIntentMetricsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listIntentMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIntentMetricsResponse}
     */
    listIntentMetrics(botId, listIntentMetricsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listIntentMetricsRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listIntentMetrics");
      }
      // verify the required parameter 'listIntentMetricsRequest' is set
      if (listIntentMetricsRequest === undefined || listIntentMetricsRequest === null) {
        throw new Error("Missing the required parameter 'listIntentMetricsRequest' when calling listIntentMetrics");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListIntentMetricsResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/analytics/intentmetrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIntentPaths operation.
     * @callback module:api/DefaultApi~listIntentPathsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIntentPathsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves summary statistics for a path of intents that users take over sessions with your bot. The following fields are required:</p> <ul> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> <li> <p> <code>intentPath</code> – Define an order of intents for which you want to retrieve metrics. Separate intents in the path with a forward slash. For example, populate the <code>intentPath</code> field with <code>/BookCar/BookHotel</code> to see details about how many times users invoked the <code>BookCar</code> and <code>BookHotel</code> intents in that order.</p> </li> </ul> <p>Use the optional <code>filters</code> field to filter the results.</p>
     * @param {String} botId The identifier for the bot for which you want to retrieve intent path metrics.
     * @param {module:model/ListIntentPathsRequest} listIntentPathsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listIntentPathsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIntentPathsResponse}
     */
    listIntentPaths(botId, listIntentPathsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listIntentPathsRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listIntentPaths");
      }
      // verify the required parameter 'listIntentPathsRequest' is set
      if (listIntentPathsRequest === undefined || listIntentPathsRequest === null) {
        throw new Error("Missing the required parameter 'listIntentPathsRequest' when calling listIntentPaths");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListIntentPathsResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/analytics/intentpaths', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIntentStageMetrics operation.
     * @callback module:api/DefaultApi~listIntentStageMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIntentStageMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves summary metrics for the stages within intents in your bot. The following fields are required:</p> <ul> <li> <p> <code>metrics</code> – A list of <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsIntentStageMetric.html\">AnalyticsIntentStageMetric</a> objects. In each object, use the <code>name</code> field to specify the metric to calculate, the <code>statistic</code> field to specify whether to calculate the <code>Sum</code>, <code>Average</code>, or <code>Max</code> number, and the <code>order</code> field to specify whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results, the <code>groupBy</code> field to specify categories by which to group the results, and the <code>binBy</code> field to specify time intervals by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul> <p>Note that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>. You can only specify one <code>order</code> in a given request.</p>
     * @param {String} botId The identifier for the bot for which you want to retrieve intent stage metrics.
     * @param {module:model/ListIntentStageMetricsRequest} listIntentStageMetricsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listIntentStageMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIntentStageMetricsResponse}
     */
    listIntentStageMetrics(botId, listIntentStageMetricsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listIntentStageMetricsRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listIntentStageMetrics");
      }
      // verify the required parameter 'listIntentStageMetricsRequest' is set
      if (listIntentStageMetricsRequest === undefined || listIntentStageMetricsRequest === null) {
        throw new Error("Missing the required parameter 'listIntentStageMetricsRequest' when calling listIntentStageMetrics");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListIntentStageMetricsResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/analytics/intentstagemetrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIntents operation.
     * @callback module:api/DefaultApi~listIntentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIntentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of intents that meet the specified criteria.
     * @param {String} botId The unique identifier of the bot that contains the intent.
     * @param {String} botVersion The version of the bot that contains the intent.
     * @param {String} localeId The identifier of the language and locale of the intents to list. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {module:model/ListIntentsRequest} listIntentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listIntentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIntentsResponse}
     */
    listIntents(botId, botVersion, localeId, listIntentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listIntentsRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listIntents");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling listIntents");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling listIntents");
      }
      // verify the required parameter 'listIntentsRequest' is set
      if (listIntentsRequest === undefined || listIntentsRequest === null) {
        throw new Error("Missing the required parameter 'listIntentsRequest' when calling listIntents");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListIntentsResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecommendedIntents operation.
     * @callback module:api/DefaultApi~listRecommendedIntentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRecommendedIntentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of recommended intents provided by the bot recommendation that you can use in your bot. Intents in the response are ordered by relevance.
     * @param {String} botId The unique identifier of the bot associated with the recommended intents.
     * @param {String} botVersion The version of the bot that contains the recommended intents.
     * @param {String} localeId The identifier of the language and locale of the recommended intents.
     * @param {String} botRecommendationId The identifier of the bot recommendation that contains the recommended intents.
     * @param {module:model/ListRecommendedIntentsRequest} listRecommendedIntentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listRecommendedIntentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRecommendedIntentsResponse}
     */
    listRecommendedIntents(botId, botVersion, localeId, botRecommendationId, listRecommendedIntentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRecommendedIntentsRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listRecommendedIntents");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling listRecommendedIntents");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling listRecommendedIntents");
      }
      // verify the required parameter 'botRecommendationId' is set
      if (botRecommendationId === undefined || botRecommendationId === null) {
        throw new Error("Missing the required parameter 'botRecommendationId' when calling listRecommendedIntents");
      }
      // verify the required parameter 'listRecommendedIntentsRequest' is set
      if (listRecommendedIntentsRequest === undefined || listRecommendedIntentsRequest === null) {
        throw new Error("Missing the required parameter 'listRecommendedIntentsRequest' when calling listRecommendedIntents");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId,
        'botRecommendationId': botRecommendationId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRecommendedIntentsResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/intents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSessionAnalyticsData operation.
     * @callback module:api/DefaultApi~listSessionAnalyticsDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSessionAnalyticsDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves a list of metadata for individual user sessions with your bot. The <code>startDateTime</code> and <code>endDateTime</code> fields are required. These fields define a time range for which you want to retrieve results. Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results and the <code>sortBy</code> field to specify the values by which to sort the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul>
     * @param {String} botId The identifier for the bot for which you want to retrieve session analytics.
     * @param {module:model/ListSessionAnalyticsDataRequest} listSessionAnalyticsDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSessionAnalyticsDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSessionAnalyticsDataResponse}
     */
    listSessionAnalyticsData(botId, listSessionAnalyticsDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSessionAnalyticsDataRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listSessionAnalyticsData");
      }
      // verify the required parameter 'listSessionAnalyticsDataRequest' is set
      if (listSessionAnalyticsDataRequest === undefined || listSessionAnalyticsDataRequest === null) {
        throw new Error("Missing the required parameter 'listSessionAnalyticsDataRequest' when calling listSessionAnalyticsData");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSessionAnalyticsDataResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/analytics/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSessionMetrics operation.
     * @callback module:api/DefaultApi~listSessionMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSessionMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves summary metrics for the user sessions with your bot. The following fields are required:</p> <ul> <li> <p> <code>metrics</code> – A list of <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsSessionMetric.html\">AnalyticsSessionMetric</a> objects. In each object, use the <code>name</code> field to specify the metric to calculate, the <code>statistic</code> field to specify whether to calculate the <code>Sum</code>, <code>Average</code>, or <code>Max</code> number, and the <code>order</code> field to specify whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results, the <code>groupBy</code> field to specify categories by which to group the results, and the <code>binBy</code> field to specify time intervals by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul> <p>Note that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>. Currently, you can specify it in either field, but not in both.</p>
     * @param {String} botId The identifier for the bot for which you want to retrieve session metrics.
     * @param {module:model/ListSessionMetricsRequest} listSessionMetricsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSessionMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSessionMetricsResponse}
     */
    listSessionMetrics(botId, listSessionMetricsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSessionMetricsRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listSessionMetrics");
      }
      // verify the required parameter 'listSessionMetricsRequest' is set
      if (listSessionMetricsRequest === undefined || listSessionMetricsRequest === null) {
        throw new Error("Missing the required parameter 'listSessionMetricsRequest' when calling listSessionMetrics");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSessionMetricsResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/analytics/sessionmetrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSlotTypes operation.
     * @callback module:api/DefaultApi~listSlotTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSlotTypesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of slot types that match the specified criteria.
     * @param {String} botId The unique identifier of the bot that contains the slot types.
     * @param {String} botVersion The version of the bot that contains the slot type.
     * @param {String} localeId The identifier of the language and locale of the slot types to list. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {module:model/ListSlotTypesRequest} listSlotTypesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSlotTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSlotTypesResponse}
     */
    listSlotTypes(botId, botVersion, localeId, listSlotTypesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSlotTypesRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listSlotTypes");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling listSlotTypes");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling listSlotTypes");
      }
      // verify the required parameter 'listSlotTypesRequest' is set
      if (listSlotTypesRequest === undefined || listSlotTypesRequest === null) {
        throw new Error("Missing the required parameter 'listSlotTypesRequest' when calling listSlotTypes");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSlotTypesResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSlots operation.
     * @callback module:api/DefaultApi~listSlotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSlotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of slots that match the specified criteria.
     * @param {String} botId The identifier of the bot that contains the slot.
     * @param {String} botVersion The version of the bot that contains the slot.
     * @param {String} localeId The identifier of the language and locale of the slots to list. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {String} intentId The unique identifier of the intent that contains the slot.
     * @param {module:model/ListSlotsRequest} listSlotsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSlotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSlotsResponse}
     */
    listSlots(botId, botVersion, localeId, intentId, listSlotsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSlotsRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listSlots");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling listSlots");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling listSlots");
      }
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling listSlots");
      }
      // verify the required parameter 'listSlotsRequest' is set
      if (listSlotsRequest === undefined || listSlotsRequest === null) {
        throw new Error("Missing the required parameter 'listSlotsRequest' when calling listSlots");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId,
        'intentId': intentId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSlotsResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of tags associated with a resource. Only bots, bot aliases, and bot channels can have tags associated with them.
     * @param {String} resourceARN The Amazon Resource Name (ARN) of the resource to get a list of tags for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceARN, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceARN' is set
      if (resourceARN === undefined || resourceARN === null) {
        throw new Error("Missing the required parameter 'resourceARN' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceARN': resourceARN
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceARN}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTestExecutionResultItems operation.
     * @callback module:api/DefaultApi~listTestExecutionResultItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTestExecutionResultItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of test execution result items.
     * @param {String} testExecutionId The unique identifier of the test execution to list the result items.
     * @param {module:model/ListTestExecutionResultItemsRequest} listTestExecutionResultItemsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTestExecutionResultItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTestExecutionResultItemsResponse}
     */
    listTestExecutionResultItems(testExecutionId, listTestExecutionResultItemsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTestExecutionResultItemsRequest;
      // verify the required parameter 'testExecutionId' is set
      if (testExecutionId === undefined || testExecutionId === null) {
        throw new Error("Missing the required parameter 'testExecutionId' when calling listTestExecutionResultItems");
      }
      // verify the required parameter 'listTestExecutionResultItemsRequest' is set
      if (listTestExecutionResultItemsRequest === undefined || listTestExecutionResultItemsRequest === null) {
        throw new Error("Missing the required parameter 'listTestExecutionResultItemsRequest' when calling listTestExecutionResultItems");
      }

      let pathParams = {
        'testExecutionId': testExecutionId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTestExecutionResultItemsResponse;
      return this.apiClient.callApi(
        '/testexecutions/{testExecutionId}/results', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTestExecutions operation.
     * @callback module:api/DefaultApi~listTestExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTestExecutionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The list of test set executions.
     * @param {module:model/ListTestExecutionsRequest} listTestExecutionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTestExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTestExecutionsResponse}
     */
    listTestExecutions(listTestExecutionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTestExecutionsRequest;
      // verify the required parameter 'listTestExecutionsRequest' is set
      if (listTestExecutionsRequest === undefined || listTestExecutionsRequest === null) {
        throw new Error("Missing the required parameter 'listTestExecutionsRequest' when calling listTestExecutions");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTestExecutionsResponse;
      return this.apiClient.callApi(
        '/testexecutions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTestSetRecords operation.
     * @callback module:api/DefaultApi~listTestSetRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTestSetRecordsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The list of test set records.
     * @param {String} testSetId The identifier of the test set to list its test set records.
     * @param {module:model/ListTestSetRecordsRequest} listTestSetRecordsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTestSetRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTestSetRecordsResponse}
     */
    listTestSetRecords(testSetId, listTestSetRecordsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTestSetRecordsRequest;
      // verify the required parameter 'testSetId' is set
      if (testSetId === undefined || testSetId === null) {
        throw new Error("Missing the required parameter 'testSetId' when calling listTestSetRecords");
      }
      // verify the required parameter 'listTestSetRecordsRequest' is set
      if (listTestSetRecordsRequest === undefined || listTestSetRecordsRequest === null) {
        throw new Error("Missing the required parameter 'listTestSetRecordsRequest' when calling listTestSetRecords");
      }

      let pathParams = {
        'testSetId': testSetId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTestSetRecordsResponse;
      return this.apiClient.callApi(
        '/testsets/{testSetId}/records', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTestSets operation.
     * @callback module:api/DefaultApi~listTestSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTestSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The list of the test sets
     * @param {module:model/ListTestSetsRequest} listTestSetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTestSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTestSetsResponse}
     */
    listTestSets(listTestSetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTestSetsRequest;
      // verify the required parameter 'listTestSetsRequest' is set
      if (listTestSetsRequest === undefined || listTestSetsRequest === null) {
        throw new Error("Missing the required parameter 'listTestSetsRequest' when calling listTestSets");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTestSetsResponse;
      return this.apiClient.callApi(
        '/testsets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUtteranceAnalyticsData operation.
     * @callback module:api/DefaultApi~listUtteranceAnalyticsDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUtteranceAnalyticsDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <note> <p>To use this API operation, your IAM role must have permissions to perform the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html\">ListAggregatedUtterances</a> operation, which provides access to utterance-related analytics. See <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/monitoring-utterances.html\">Viewing utterance statistics</a> for the IAM policy to apply to the IAM role.</p> </note> <p>Retrieves a list of metadata for individual user utterances to your bot. The following fields are required:</p> <ul> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results and the <code>sortBy</code> field to specify the values by which to sort the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul>
     * @param {String} botId The identifier for the bot for which you want to retrieve utterance analytics.
     * @param {module:model/ListUtteranceAnalyticsDataRequest} listUtteranceAnalyticsDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listUtteranceAnalyticsDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUtteranceAnalyticsDataResponse}
     */
    listUtteranceAnalyticsData(botId, listUtteranceAnalyticsDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = listUtteranceAnalyticsDataRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listUtteranceAnalyticsData");
      }
      // verify the required parameter 'listUtteranceAnalyticsDataRequest' is set
      if (listUtteranceAnalyticsDataRequest === undefined || listUtteranceAnalyticsDataRequest === null) {
        throw new Error("Missing the required parameter 'listUtteranceAnalyticsDataRequest' when calling listUtteranceAnalyticsData");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListUtteranceAnalyticsDataResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/analytics/utterances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUtteranceMetrics operation.
     * @callback module:api/DefaultApi~listUtteranceMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUtteranceMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <note> <p>To use this API operation, your IAM role must have permissions to perform the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html\">ListAggregatedUtterances</a> operation, which provides access to utterance-related analytics. See <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/monitoring-utterances.html\">Viewing utterance statistics</a> for the IAM policy to apply to the IAM role.</p> </note> <p>Retrieves summary metrics for the utterances in your bot. The following fields are required:</p> <ul> <li> <p> <code>metrics</code> – A list of <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsUtteranceMetric.html\">AnalyticsUtteranceMetric</a> objects. In each object, use the <code>name</code> field to specify the metric to calculate, the <code>statistic</code> field to specify whether to calculate the <code>Sum</code>, <code>Average</code>, or <code>Max</code> number, and the <code>order</code> field to specify whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results, the <code>groupBy</code> field to specify categories by which to group the results, and the <code>binBy</code> field to specify time intervals by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul> <p>Note that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>. Currently, you can specify it in either field, but not in both.</p>
     * @param {String} botId The identifier for the bot for which you want to retrieve utterance metrics.
     * @param {module:model/ListUtteranceMetricsRequest} listUtteranceMetricsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listUtteranceMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUtteranceMetricsResponse}
     */
    listUtteranceMetrics(botId, listUtteranceMetricsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listUtteranceMetricsRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling listUtteranceMetrics");
      }
      // verify the required parameter 'listUtteranceMetricsRequest' is set
      if (listUtteranceMetricsRequest === undefined || listUtteranceMetricsRequest === null) {
        throw new Error("Missing the required parameter 'listUtteranceMetricsRequest' when calling listUtteranceMetrics");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListUtteranceMetricsResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/analytics/utterancemetrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAssociatedTranscripts operation.
     * @callback module:api/DefaultApi~searchAssociatedTranscriptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchAssociatedTranscriptsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for associated transcripts that meet the specified criteria.
     * @param {String} botId The unique identifier of the bot associated with the transcripts that you are searching.
     * @param {String} botVersion The version of the bot containing the transcripts that you are searching.
     * @param {String} localeId The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a> 
     * @param {String} botRecommendationId The unique identifier of the bot recommendation associated with the transcripts to search.
     * @param {module:model/SearchAssociatedTranscriptsRequest} searchAssociatedTranscriptsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~searchAssociatedTranscriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchAssociatedTranscriptsResponse}
     */
    searchAssociatedTranscripts(botId, botVersion, localeId, botRecommendationId, searchAssociatedTranscriptsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchAssociatedTranscriptsRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling searchAssociatedTranscripts");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling searchAssociatedTranscripts");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling searchAssociatedTranscripts");
      }
      // verify the required parameter 'botRecommendationId' is set
      if (botRecommendationId === undefined || botRecommendationId === null) {
        throw new Error("Missing the required parameter 'botRecommendationId' when calling searchAssociatedTranscripts");
      }
      // verify the required parameter 'searchAssociatedTranscriptsRequest' is set
      if (searchAssociatedTranscriptsRequest === undefined || searchAssociatedTranscriptsRequest === null) {
        throw new Error("Missing the required parameter 'searchAssociatedTranscriptsRequest' when calling searchAssociatedTranscripts");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId,
        'botRecommendationId': botRecommendationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchAssociatedTranscriptsResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/associatedtranscripts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startBotRecommendation operation.
     * @callback module:api/DefaultApi~startBotRecommendationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartBotRecommendationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this to provide your transcript data, and to start the bot recommendation process.
     * @param {String} botId The unique identifier of the bot containing the bot recommendation.
     * @param {String} botVersion The version of the bot containing the bot recommendation.
     * @param {String} localeId The identifier of the language and locale of the bot recommendation to start. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a> 
     * @param {module:model/StartBotRecommendationRequest} startBotRecommendationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startBotRecommendationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartBotRecommendationResponse}
     */
    startBotRecommendation(botId, botVersion, localeId, startBotRecommendationRequest, opts, callback) {
      opts = opts || {};
      let postBody = startBotRecommendationRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling startBotRecommendation");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling startBotRecommendation");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling startBotRecommendation");
      }
      // verify the required parameter 'startBotRecommendationRequest' is set
      if (startBotRecommendationRequest === undefined || startBotRecommendationRequest === null) {
        throw new Error("Missing the required parameter 'startBotRecommendationRequest' when calling startBotRecommendation");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartBotRecommendationResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startImport operation.
     * @callback module:api/DefaultApi~startImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts importing a bot, bot locale, or custom vocabulary from a zip archive that you uploaded to an S3 bucket.
     * @param {module:model/StartImportRequest} startImportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartImportResponse}
     */
    startImport(startImportRequest, opts, callback) {
      opts = opts || {};
      let postBody = startImportRequest;
      // verify the required parameter 'startImportRequest' is set
      if (startImportRequest === undefined || startImportRequest === null) {
        throw new Error("Missing the required parameter 'startImportRequest' when calling startImport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartImportResponse;
      return this.apiClient.callApi(
        '/imports/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTestExecution operation.
     * @callback module:api/DefaultApi~startTestExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartTestExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The action to start test set execution.
     * @param {String} testSetId The test set Id for the test set execution.
     * @param {module:model/StartTestExecutionRequest} startTestExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startTestExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartTestExecutionResponse}
     */
    startTestExecution(testSetId, startTestExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = startTestExecutionRequest;
      // verify the required parameter 'testSetId' is set
      if (testSetId === undefined || testSetId === null) {
        throw new Error("Missing the required parameter 'testSetId' when calling startTestExecution");
      }
      // verify the required parameter 'startTestExecutionRequest' is set
      if (startTestExecutionRequest === undefined || startTestExecutionRequest === null) {
        throw new Error("Missing the required parameter 'startTestExecutionRequest' when calling startTestExecution");
      }

      let pathParams = {
        'testSetId': testSetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartTestExecutionResponse;
      return this.apiClient.callApi(
        '/testsets/{testSetId}/testexecutions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTestSetGeneration operation.
     * @callback module:api/DefaultApi~startTestSetGenerationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartTestSetGenerationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The action to start the generation of test set.
     * @param {module:model/StartTestSetGenerationRequest} startTestSetGenerationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startTestSetGenerationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartTestSetGenerationResponse}
     */
    startTestSetGeneration(startTestSetGenerationRequest, opts, callback) {
      opts = opts || {};
      let postBody = startTestSetGenerationRequest;
      // verify the required parameter 'startTestSetGenerationRequest' is set
      if (startTestSetGenerationRequest === undefined || startTestSetGenerationRequest === null) {
        throw new Error("Missing the required parameter 'startTestSetGenerationRequest' when calling startTestSetGeneration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartTestSetGenerationResponse;
      return this.apiClient.callApi(
        '/testsetgenerations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopBotRecommendation operation.
     * @callback module:api/DefaultApi~stopBotRecommendationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopBotRecommendationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop an already running Bot Recommendation request.
     * @param {String} botId The unique identifier of the bot containing the bot recommendation to be stopped.
     * @param {String} botVersion The version of the bot containing the bot recommendation.
     * @param {String} localeId The identifier of the language and locale of the bot recommendation to stop. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a> 
     * @param {String} botRecommendationId The unique identifier of the bot recommendation to be stopped.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopBotRecommendationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopBotRecommendationResponse}
     */
    stopBotRecommendation(botId, botVersion, localeId, botRecommendationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling stopBotRecommendation");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling stopBotRecommendation");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling stopBotRecommendation");
      }
      // verify the required parameter 'botRecommendationId' is set
      if (botRecommendationId === undefined || botRecommendationId === null) {
        throw new Error("Missing the required parameter 'botRecommendationId' when calling stopBotRecommendation");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId,
        'botRecommendationId': botRecommendationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StopBotRecommendationResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/stopbotrecommendation', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the specified tags to the specified resource. If a tag key already exists, the existing value is replaced with the new value.
     * @param {String} resourceARN The Amazon Resource Name (ARN) of the bot, bot alias, or bot channel to tag.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceARN, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceARN' is set
      if (resourceARN === undefined || resourceARN === null) {
        throw new Error("Missing the required parameter 'resourceARN' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceARN': resourceARN
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceARN}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes tags from a bot, bot alias, or bot channel.
     * @param {String} resourceARN The Amazon Resource Name (ARN) of the resource to remove the tags from.
     * @param {Array.<String>} tagKeys A list of tag keys to remove from the resource. If a tag key does not exist on the resource, it is ignored.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceARN, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceARN' is set
      if (resourceARN === undefined || resourceARN === null) {
        throw new Error("Missing the required parameter 'resourceARN' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceARN': resourceARN
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceARN}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBot operation.
     * @callback module:api/DefaultApi~updateBotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration of an existing bot. 
     * @param {String} botId The unique identifier of the bot to update. This identifier is returned by the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html\">CreateBot</a> operation.
     * @param {module:model/UpdateBotRequest} updateBotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBotResponse}
     */
    updateBot(botId, updateBotRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBotRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling updateBot");
      }
      // verify the required parameter 'updateBotRequest' is set
      if (updateBotRequest === undefined || updateBotRequest === null) {
        throw new Error("Missing the required parameter 'updateBotRequest' when calling updateBot");
      }

      let pathParams = {
        'botId': botId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBotResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBotAlias operation.
     * @callback module:api/DefaultApi~updateBotAliasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBotAliasResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration of an existing bot alias.
     * @param {String} botAliasId The unique identifier of the bot alias.
     * @param {String} botId The identifier of the bot with the updated alias.
     * @param {module:model/UpdateBotAliasRequest} updateBotAliasRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBotAliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBotAliasResponse}
     */
    updateBotAlias(botAliasId, botId, updateBotAliasRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBotAliasRequest;
      // verify the required parameter 'botAliasId' is set
      if (botAliasId === undefined || botAliasId === null) {
        throw new Error("Missing the required parameter 'botAliasId' when calling updateBotAlias");
      }
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling updateBotAlias");
      }
      // verify the required parameter 'updateBotAliasRequest' is set
      if (updateBotAliasRequest === undefined || updateBotAliasRequest === null) {
        throw new Error("Missing the required parameter 'updateBotAliasRequest' when calling updateBotAlias");
      }

      let pathParams = {
        'botAliasId': botAliasId,
        'botId': botId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBotAliasResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botaliases/{botAliasId}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBotLocale operation.
     * @callback module:api/DefaultApi~updateBotLocaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBotLocaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the settings that a bot has for a specific locale.
     * @param {String} botId The unique identifier of the bot that contains the locale.
     * @param {String} botVersion The version of the bot that contains the locale to be updated. The version can only be the <code>DRAFT</code> version.
     * @param {String} localeId The identifier of the language and locale to update. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {module:model/UpdateBotLocaleRequest} updateBotLocaleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBotLocaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBotLocaleResponse}
     */
    updateBotLocale(botId, botVersion, localeId, updateBotLocaleRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBotLocaleRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling updateBotLocale");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling updateBotLocale");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling updateBotLocale");
      }
      // verify the required parameter 'updateBotLocaleRequest' is set
      if (updateBotLocaleRequest === undefined || updateBotLocaleRequest === null) {
        throw new Error("Missing the required parameter 'updateBotLocaleRequest' when calling updateBotLocale");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBotLocaleResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBotRecommendation operation.
     * @callback module:api/DefaultApi~updateBotRecommendationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBotRecommendationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing bot recommendation request.
     * @param {String} botId The unique identifier of the bot containing the bot recommendation to be updated.
     * @param {String} botVersion The version of the bot containing the bot recommendation to be updated.
     * @param {String} localeId The identifier of the language and locale of the bot recommendation to update. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a> 
     * @param {String} botRecommendationId The unique identifier of the bot recommendation to be updated.
     * @param {module:model/UpdateBotRecommendationRequest} updateBotRecommendationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBotRecommendationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBotRecommendationResponse}
     */
    updateBotRecommendation(botId, botVersion, localeId, botRecommendationId, updateBotRecommendationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBotRecommendationRequest;
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling updateBotRecommendation");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling updateBotRecommendation");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling updateBotRecommendation");
      }
      // verify the required parameter 'botRecommendationId' is set
      if (botRecommendationId === undefined || botRecommendationId === null) {
        throw new Error("Missing the required parameter 'botRecommendationId' when calling updateBotRecommendation");
      }
      // verify the required parameter 'updateBotRecommendationRequest' is set
      if (updateBotRecommendationRequest === undefined || updateBotRecommendationRequest === null) {
        throw new Error("Missing the required parameter 'updateBotRecommendationRequest' when calling updateBotRecommendation");
      }

      let pathParams = {
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId,
        'botRecommendationId': botRecommendationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBotRecommendationResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExport operation.
     * @callback module:api/DefaultApi~updateExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the password used to protect an export zip archive.</p> <p>The password is not required. If you don't supply a password, Amazon Lex generates a zip file that is not protected by a password. This is the archive that is available at the pre-signed S3 URL provided by the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeExport.html\">DescribeExport</a> operation.</p>
     * @param {String} exportId The unique identifier Amazon Lex assigned to the export.
     * @param {module:model/UpdateExportRequest} updateExportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateExportResponse}
     */
    updateExport(exportId, updateExportRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateExportRequest;
      // verify the required parameter 'exportId' is set
      if (exportId === undefined || exportId === null) {
        throw new Error("Missing the required parameter 'exportId' when calling updateExport");
      }
      // verify the required parameter 'updateExportRequest' is set
      if (updateExportRequest === undefined || updateExportRequest === null) {
        throw new Error("Missing the required parameter 'updateExportRequest' when calling updateExport");
      }

      let pathParams = {
        'exportId': exportId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateExportResponse;
      return this.apiClient.callApi(
        '/exports/{exportId}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIntent operation.
     * @callback module:api/DefaultApi~updateIntentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateIntentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the settings for an intent.
     * @param {String} intentId The unique identifier of the intent to update.
     * @param {String} botId The identifier of the bot that contains the intent.
     * @param {String} botVersion The version of the bot that contains the intent. Must be <code>DRAFT</code>.
     * @param {String} localeId The identifier of the language and locale where this intent is used. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {module:model/UpdateIntentRequest} updateIntentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateIntentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateIntentResponse}
     */
    updateIntent(intentId, botId, botVersion, localeId, updateIntentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateIntentRequest;
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling updateIntent");
      }
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling updateIntent");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling updateIntent");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling updateIntent");
      }
      // verify the required parameter 'updateIntentRequest' is set
      if (updateIntentRequest === undefined || updateIntentRequest === null) {
        throw new Error("Missing the required parameter 'updateIntentRequest' when calling updateIntent");
      }

      let pathParams = {
        'intentId': intentId,
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateIntentResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResourcePolicy operation.
     * @callback module:api/DefaultApi~updateResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateResourcePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the existing resource policy for a bot or bot alias with a new one. If the policy doesn't exist, Amazon Lex returns an exception.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
     * @param {module:model/UpdateResourcePolicyRequest} updateResourcePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [expectedRevisionId] <p>The identifier of the revision of the policy to update. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.</p> <p>If you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.</p>
     * @param {module:api/DefaultApi~updateResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateResourcePolicyResponse}
     */
    updateResourcePolicy(resourceArn, updateResourcePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateResourcePolicyRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling updateResourcePolicy");
      }
      // verify the required parameter 'updateResourcePolicyRequest' is set
      if (updateResourcePolicyRequest === undefined || updateResourcePolicyRequest === null) {
        throw new Error("Missing the required parameter 'updateResourcePolicyRequest' when calling updateResourcePolicy");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'expectedRevisionId': opts['expectedRevisionId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateResourcePolicyResponse;
      return this.apiClient.callApi(
        '/policy/{resourceArn}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSlot operation.
     * @callback module:api/DefaultApi~updateSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSlotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the settings for a slot.
     * @param {String} slotId The unique identifier for the slot to update.
     * @param {String} botId The unique identifier of the bot that contains the slot.
     * @param {String} botVersion The version of the bot that contains the slot. Must always be <code>DRAFT</code>.
     * @param {String} localeId The identifier of the language and locale that contains the slot. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {String} intentId The identifier of the intent that contains the slot.
     * @param {module:model/UpdateSlotRequest} updateSlotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSlotResponse}
     */
    updateSlot(slotId, botId, botVersion, localeId, intentId, updateSlotRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSlotRequest;
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling updateSlot");
      }
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling updateSlot");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling updateSlot");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling updateSlot");
      }
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling updateSlot");
      }
      // verify the required parameter 'updateSlotRequest' is set
      if (updateSlotRequest === undefined || updateSlotRequest === null) {
        throw new Error("Missing the required parameter 'updateSlotRequest' when calling updateSlot");
      }

      let pathParams = {
        'slotId': slotId,
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId,
        'intentId': intentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSlotResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSlotType operation.
     * @callback module:api/DefaultApi~updateSlotTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSlotTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration of an existing slot type.
     * @param {String} slotTypeId The unique identifier of the slot type to update.
     * @param {String} botId The identifier of the bot that contains the slot type.
     * @param {String} botVersion The version of the bot that contains the slot type. Must be <code>DRAFT</code>.
     * @param {String} localeId The identifier of the language and locale that contains the slot type. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param {module:model/UpdateSlotTypeRequest} updateSlotTypeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSlotTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSlotTypeResponse}
     */
    updateSlotType(slotTypeId, botId, botVersion, localeId, updateSlotTypeRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSlotTypeRequest;
      // verify the required parameter 'slotTypeId' is set
      if (slotTypeId === undefined || slotTypeId === null) {
        throw new Error("Missing the required parameter 'slotTypeId' when calling updateSlotType");
      }
      // verify the required parameter 'botId' is set
      if (botId === undefined || botId === null) {
        throw new Error("Missing the required parameter 'botId' when calling updateSlotType");
      }
      // verify the required parameter 'botVersion' is set
      if (botVersion === undefined || botVersion === null) {
        throw new Error("Missing the required parameter 'botVersion' when calling updateSlotType");
      }
      // verify the required parameter 'localeId' is set
      if (localeId === undefined || localeId === null) {
        throw new Error("Missing the required parameter 'localeId' when calling updateSlotType");
      }
      // verify the required parameter 'updateSlotTypeRequest' is set
      if (updateSlotTypeRequest === undefined || updateSlotTypeRequest === null) {
        throw new Error("Missing the required parameter 'updateSlotTypeRequest' when calling updateSlotType");
      }

      let pathParams = {
        'slotTypeId': slotTypeId,
        'botId': botId,
        'botVersion': botVersion,
        'localeId': localeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSlotTypeResponse;
      return this.apiClient.callApi(
        '/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTestSet operation.
     * @callback module:api/DefaultApi~updateTestSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTestSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The action to update the test set.
     * @param {String} testSetId The test set Id for which update test operation to be performed.
     * @param {module:model/UpdateTestSetRequest} updateTestSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTestSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTestSetResponse}
     */
    updateTestSet(testSetId, updateTestSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTestSetRequest;
      // verify the required parameter 'testSetId' is set
      if (testSetId === undefined || testSetId === null) {
        throw new Error("Missing the required parameter 'testSetId' when calling updateTestSet");
      }
      // verify the required parameter 'updateTestSetRequest' is set
      if (updateTestSetRequest === undefined || updateTestSetRequest === null) {
        throw new Error("Missing the required parameter 'updateTestSetRequest' when calling updateTestSet");
      }

      let pathParams = {
        'testSetId': testSetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTestSetResponse;
      return this.apiClient.callApi(
        '/testsets/{testSetId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
