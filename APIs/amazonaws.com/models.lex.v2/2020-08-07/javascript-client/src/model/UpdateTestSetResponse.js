/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestSetModality from './TestSetModality';
import TestSetStatus from './TestSetStatus';
import UpdateTestSetResponseStorageLocation from './UpdateTestSetResponseStorageLocation';

/**
 * The UpdateTestSetResponse model module.
 * @module model/UpdateTestSetResponse
 * @version 2020-08-07
 */
class UpdateTestSetResponse {
    /**
     * Constructs a new <code>UpdateTestSetResponse</code>.
     * @alias module:model/UpdateTestSetResponse
     */
    constructor() { 
        
        UpdateTestSetResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateTestSetResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateTestSetResponse} obj Optional instance to populate.
     * @return {module:model/UpdateTestSetResponse} The populated <code>UpdateTestSetResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateTestSetResponse();

            if (data.hasOwnProperty('testSetId')) {
                obj['testSetId'] = ApiClient.convertToType(data['testSetId'], 'String');
            }
            if (data.hasOwnProperty('testSetName')) {
                obj['testSetName'] = ApiClient.convertToType(data['testSetName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('modality')) {
                obj['modality'] = ApiClient.convertToType(data['modality'], TestSetModality);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], TestSetStatus);
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('numTurns')) {
                obj['numTurns'] = ApiClient.convertToType(data['numTurns'], 'Number');
            }
            if (data.hasOwnProperty('storageLocation')) {
                obj['storageLocation'] = UpdateTestSetResponseStorageLocation.constructFromObject(data['storageLocation']);
            }
            if (data.hasOwnProperty('creationDateTime')) {
                obj['creationDateTime'] = ApiClient.convertToType(data['creationDateTime'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdatedDateTime')) {
                obj['lastUpdatedDateTime'] = ApiClient.convertToType(data['lastUpdatedDateTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateTestSetResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateTestSetResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `testSetId`
        if (data['testSetId']) { // data not null
          String.validateJSON(data['testSetId']);
        }
        // validate the optional field `testSetName`
        if (data['testSetName']) { // data not null
          String.validateJSON(data['testSetName']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `modality`
        if (data['modality']) { // data not null
          TestSetModality.validateJSON(data['modality']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          TestSetStatus.validateJSON(data['status']);
        }
        // validate the optional field `roleArn`
        if (data['roleArn']) { // data not null
          String.validateJSON(data['roleArn']);
        }
        // validate the optional field `numTurns`
        if (data['numTurns']) { // data not null
          Number.validateJSON(data['numTurns']);
        }
        // validate the optional field `storageLocation`
        if (data['storageLocation']) { // data not null
          UpdateTestSetResponseStorageLocation.validateJSON(data['storageLocation']);
        }
        // validate the optional field `creationDateTime`
        if (data['creationDateTime']) { // data not null
          Date.validateJSON(data['creationDateTime']);
        }
        // validate the optional field `lastUpdatedDateTime`
        if (data['lastUpdatedDateTime']) { // data not null
          Date.validateJSON(data['lastUpdatedDateTime']);
        }

        return true;
    }


}



/**
 * @member {String} testSetId
 */
UpdateTestSetResponse.prototype['testSetId'] = undefined;

/**
 * @member {String} testSetName
 */
UpdateTestSetResponse.prototype['testSetName'] = undefined;

/**
 * @member {String} description
 */
UpdateTestSetResponse.prototype['description'] = undefined;

/**
 * @member {module:model/TestSetModality} modality
 */
UpdateTestSetResponse.prototype['modality'] = undefined;

/**
 * @member {module:model/TestSetStatus} status
 */
UpdateTestSetResponse.prototype['status'] = undefined;

/**
 * @member {String} roleArn
 */
UpdateTestSetResponse.prototype['roleArn'] = undefined;

/**
 * @member {Number} numTurns
 */
UpdateTestSetResponse.prototype['numTurns'] = undefined;

/**
 * @member {module:model/UpdateTestSetResponseStorageLocation} storageLocation
 */
UpdateTestSetResponse.prototype['storageLocation'] = undefined;

/**
 * @member {Date} creationDateTime
 */
UpdateTestSetResponse.prototype['creationDateTime'] = undefined;

/**
 * @member {Date} lastUpdatedDateTime
 */
UpdateTestSetResponse.prototype['lastUpdatedDateTime'] = undefined;






export default UpdateTestSetResponse;

