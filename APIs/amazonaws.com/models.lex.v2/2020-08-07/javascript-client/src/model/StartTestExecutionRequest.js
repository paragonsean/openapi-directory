/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StartTestExecutionRequestTarget from './StartTestExecutionRequestTarget';

/**
 * The StartTestExecutionRequest model module.
 * @module model/StartTestExecutionRequest
 * @version 2020-08-07
 */
class StartTestExecutionRequest {
    /**
     * Constructs a new <code>StartTestExecutionRequest</code>.
     * @alias module:model/StartTestExecutionRequest
     * @param target {module:model/StartTestExecutionRequestTarget} 
     * @param apiMode {module:model/StartTestExecutionRequest.ApiModeEnum} Indicates whether we use streaming or non-streaming APIs for the test set execution. For streaming, StartConversation Runtime API is used. Whereas, for non-streaming, RecognizeUtterance and RecognizeText Amazon Lex Runtime API are used.
     */
    constructor(target, apiMode) { 
        
        StartTestExecutionRequest.initialize(this, target, apiMode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, target, apiMode) { 
        obj['target'] = target;
        obj['apiMode'] = apiMode;
    }

    /**
     * Constructs a <code>StartTestExecutionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartTestExecutionRequest} obj Optional instance to populate.
     * @return {module:model/StartTestExecutionRequest} The populated <code>StartTestExecutionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartTestExecutionRequest();

            if (data.hasOwnProperty('target')) {
                obj['target'] = StartTestExecutionRequestTarget.constructFromObject(data['target']);
            }
            if (data.hasOwnProperty('apiMode')) {
                obj['apiMode'] = ApiClient.convertToType(data['apiMode'], 'String');
            }
            if (data.hasOwnProperty('testExecutionModality')) {
                obj['testExecutionModality'] = ApiClient.convertToType(data['testExecutionModality'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartTestExecutionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartTestExecutionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartTestExecutionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          StartTestExecutionRequestTarget.validateJSON(data['target']);
        }
        // ensure the json data is a string
        if (data['apiMode'] && !(typeof data['apiMode'] === 'string' || data['apiMode'] instanceof String)) {
            throw new Error("Expected the field `apiMode` to be a primitive type in the JSON string but got " + data['apiMode']);
        }
        // ensure the json data is a string
        if (data['testExecutionModality'] && !(typeof data['testExecutionModality'] === 'string' || data['testExecutionModality'] instanceof String)) {
            throw new Error("Expected the field `testExecutionModality` to be a primitive type in the JSON string but got " + data['testExecutionModality']);
        }

        return true;
    }


}

StartTestExecutionRequest.RequiredProperties = ["target", "apiMode"];

/**
 * @member {module:model/StartTestExecutionRequestTarget} target
 */
StartTestExecutionRequest.prototype['target'] = undefined;

/**
 * Indicates whether we use streaming or non-streaming APIs for the test set execution. For streaming, StartConversation Runtime API is used. Whereas, for non-streaming, RecognizeUtterance and RecognizeText Amazon Lex Runtime API are used.
 * @member {module:model/StartTestExecutionRequest.ApiModeEnum} apiMode
 */
StartTestExecutionRequest.prototype['apiMode'] = undefined;

/**
 * Indicates whether audio or text is used.
 * @member {module:model/StartTestExecutionRequest.TestExecutionModalityEnum} testExecutionModality
 */
StartTestExecutionRequest.prototype['testExecutionModality'] = undefined;





/**
 * Allowed values for the <code>apiMode</code> property.
 * @enum {String}
 * @readonly
 */
StartTestExecutionRequest['ApiModeEnum'] = {

    /**
     * value: "Streaming"
     * @const
     */
    "Streaming": "Streaming",

    /**
     * value: "NonStreaming"
     * @const
     */
    "NonStreaming": "NonStreaming"
};


/**
 * Allowed values for the <code>testExecutionModality</code> property.
 * @enum {String}
 * @readonly
 */
StartTestExecutionRequest['TestExecutionModalityEnum'] = {

    /**
     * value: "Text"
     * @const
     */
    "Text": "Text",

    /**
     * value: "Audio"
     * @const
     */
    "Audio": "Audio"
};



export default StartTestExecutionRequest;

