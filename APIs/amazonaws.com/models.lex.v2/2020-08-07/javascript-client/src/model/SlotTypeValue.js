/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SlotTypeValueSampleValue from './SlotTypeValueSampleValue';

/**
 * The SlotTypeValue model module.
 * @module model/SlotTypeValue
 * @version 2020-08-07
 */
class SlotTypeValue {
    /**
     * Constructs a new <code>SlotTypeValue</code>.
     * Each slot type can have a set of values. Each &lt;code&gt;SlotTypeValue&lt;/code&gt; represents a value that the slot type can take.
     * @alias module:model/SlotTypeValue
     */
    constructor() { 
        
        SlotTypeValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlotTypeValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlotTypeValue} obj Optional instance to populate.
     * @return {module:model/SlotTypeValue} The populated <code>SlotTypeValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlotTypeValue();

            if (data.hasOwnProperty('sampleValue')) {
                obj['sampleValue'] = SlotTypeValueSampleValue.constructFromObject(data['sampleValue']);
            }
            if (data.hasOwnProperty('synonyms')) {
                obj['synonyms'] = ApiClient.convertToType(data['synonyms'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlotTypeValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlotTypeValue</code>.
     */
    static validateJSON(data) {
        // validate the optional field `sampleValue`
        if (data['sampleValue']) { // data not null
          SlotTypeValueSampleValue.validateJSON(data['sampleValue']);
        }
        // validate the optional field `synonyms`
        if (data['synonyms']) { // data not null
          Array.validateJSON(data['synonyms']);
        }

        return true;
    }


}



/**
 * @member {module:model/SlotTypeValueSampleValue} sampleValue
 */
SlotTypeValue.prototype['sampleValue'] = undefined;

/**
 * @member {Array} synonyms
 */
SlotTypeValue.prototype['synonyms'] = undefined;






export default SlotTypeValue;

