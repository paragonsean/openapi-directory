/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalyticsBinBySpecification from './AnalyticsBinBySpecification';
import AnalyticsUtteranceAttribute from './AnalyticsUtteranceAttribute';
import AnalyticsUtteranceFilter from './AnalyticsUtteranceFilter';
import AnalyticsUtteranceGroupBySpecification from './AnalyticsUtteranceGroupBySpecification';
import AnalyticsUtteranceMetric from './AnalyticsUtteranceMetric';

/**
 * The ListUtteranceMetricsRequest model module.
 * @module model/ListUtteranceMetricsRequest
 * @version 2020-08-07
 */
class ListUtteranceMetricsRequest {
    /**
     * Constructs a new <code>ListUtteranceMetricsRequest</code>.
     * @alias module:model/ListUtteranceMetricsRequest
     * @param startDateTime {Date} The date and time that marks the beginning of the range of time for which you want to see utterance metrics.
     * @param endDateTime {Date} The date and time that marks the end of the range of time for which you want to see utterance metrics.
     * @param metrics {Array.<module:model/AnalyticsUtteranceMetric>} A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.
     */
    constructor(startDateTime, endDateTime, metrics) { 
        
        ListUtteranceMetricsRequest.initialize(this, startDateTime, endDateTime, metrics);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, startDateTime, endDateTime, metrics) { 
        obj['startDateTime'] = startDateTime;
        obj['endDateTime'] = endDateTime;
        obj['metrics'] = metrics;
    }

    /**
     * Constructs a <code>ListUtteranceMetricsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListUtteranceMetricsRequest} obj Optional instance to populate.
     * @return {module:model/ListUtteranceMetricsRequest} The populated <code>ListUtteranceMetricsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListUtteranceMetricsRequest();

            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'Date');
            }
            if (data.hasOwnProperty('endDateTime')) {
                obj['endDateTime'] = ApiClient.convertToType(data['endDateTime'], 'Date');
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [AnalyticsUtteranceMetric]);
            }
            if (data.hasOwnProperty('binBy')) {
                obj['binBy'] = ApiClient.convertToType(data['binBy'], [AnalyticsBinBySpecification]);
            }
            if (data.hasOwnProperty('groupBy')) {
                obj['groupBy'] = ApiClient.convertToType(data['groupBy'], [AnalyticsUtteranceGroupBySpecification]);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [AnalyticsUtteranceAttribute]);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [AnalyticsUtteranceFilter]);
            }
            if (data.hasOwnProperty('maxResults')) {
                obj['maxResults'] = ApiClient.convertToType(data['maxResults'], 'Number');
            }
            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListUtteranceMetricsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListUtteranceMetricsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListUtteranceMetricsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                AnalyticsUtteranceMetric.validateJSON(item);
            };
        }
        if (data['binBy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['binBy'])) {
                throw new Error("Expected the field `binBy` to be an array in the JSON data but got " + data['binBy']);
            }
            // validate the optional field `binBy` (array)
            for (const item of data['binBy']) {
                AnalyticsBinBySpecification.validateJSON(item);
            };
        }
        if (data['groupBy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groupBy'])) {
                throw new Error("Expected the field `groupBy` to be an array in the JSON data but got " + data['groupBy']);
            }
            // validate the optional field `groupBy` (array)
            for (const item of data['groupBy']) {
                AnalyticsUtteranceGroupBySpecification.validateJSON(item);
            };
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                AnalyticsUtteranceAttribute.validateJSON(item);
            };
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                AnalyticsUtteranceFilter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nextToken'] && !(typeof data['nextToken'] === 'string' || data['nextToken'] instanceof String)) {
            throw new Error("Expected the field `nextToken` to be a primitive type in the JSON string but got " + data['nextToken']);
        }

        return true;
    }


}

ListUtteranceMetricsRequest.RequiredProperties = ["startDateTime", "endDateTime", "metrics"];

/**
 * The date and time that marks the beginning of the range of time for which you want to see utterance metrics.
 * @member {Date} startDateTime
 */
ListUtteranceMetricsRequest.prototype['startDateTime'] = undefined;

/**
 * The date and time that marks the end of the range of time for which you want to see utterance metrics.
 * @member {Date} endDateTime
 */
ListUtteranceMetricsRequest.prototype['endDateTime'] = undefined;

/**
 * A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.
 * @member {Array.<module:model/AnalyticsUtteranceMetric>} metrics
 */
ListUtteranceMetricsRequest.prototype['metrics'] = undefined;

/**
 * A list of objects, each of which contains specifications for organizing the results by time.
 * @member {Array.<module:model/AnalyticsBinBySpecification>} binBy
 */
ListUtteranceMetricsRequest.prototype['binBy'] = undefined;

/**
 * <p>A list of objects, each of which specifies how to group the results. You can group by the following criteria:</p> <ul> <li> <p> <code>UtteranceText</code> – The transcription of the utterance.</p> </li> <li> <p> <code>UtteranceState</code> – The state of the utterance. The possible states are detailed in <a href=\"https://docs.aws.amazon.com/analytics-key-definitions-utterances\">Key definitions</a> in the user guide.</p> </li> </ul>
 * @member {Array.<module:model/AnalyticsUtteranceGroupBySpecification>} groupBy
 */
ListUtteranceMetricsRequest.prototype['groupBy'] = undefined;

/**
 * <p>A list containing attributes related to the utterance that you want the response to return. The following attributes are possible:</p> <ul> <li> <p> <code>LastUsedIntent</code> – The last used intent at the time of the utterance.</p> </li> </ul>
 * @member {Array.<module:model/AnalyticsUtteranceAttribute>} attributes
 */
ListUtteranceMetricsRequest.prototype['attributes'] = undefined;

/**
 * A list of objects, each of which describes a condition by which you want to filter the results.
 * @member {Array.<module:model/AnalyticsUtteranceFilter>} filters
 */
ListUtteranceMetricsRequest.prototype['filters'] = undefined;

/**
 * The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
 * @member {Number} maxResults
 */
ListUtteranceMetricsRequest.prototype['maxResults'] = undefined;

/**
 * <p>If the response from the ListUtteranceMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p> <p>Use the returned token in the nextToken parameter of a ListUtteranceMetrics request to return the next page of results. For a complete set of results, call the ListUtteranceMetrics operation until the nextToken returned in the response is null.</p>
 * @member {String} nextToken
 */
ListUtteranceMetricsRequest.prototype['nextToken'] = undefined;






export default ListUtteranceMetricsRequest;

