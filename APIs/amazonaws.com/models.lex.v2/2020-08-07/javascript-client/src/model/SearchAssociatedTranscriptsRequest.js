/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssociatedTranscriptFilter from './AssociatedTranscriptFilter';

/**
 * The SearchAssociatedTranscriptsRequest model module.
 * @module model/SearchAssociatedTranscriptsRequest
 * @version 2020-08-07
 */
class SearchAssociatedTranscriptsRequest {
    /**
     * Constructs a new <code>SearchAssociatedTranscriptsRequest</code>.
     * @alias module:model/SearchAssociatedTranscriptsRequest
     * @param filters {Array.<module:model/AssociatedTranscriptFilter>} A list of filter objects.
     */
    constructor(filters) { 
        
        SearchAssociatedTranscriptsRequest.initialize(this, filters);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, filters) { 
        obj['filters'] = filters;
    }

    /**
     * Constructs a <code>SearchAssociatedTranscriptsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchAssociatedTranscriptsRequest} obj Optional instance to populate.
     * @return {module:model/SearchAssociatedTranscriptsRequest} The populated <code>SearchAssociatedTranscriptsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchAssociatedTranscriptsRequest();

            if (data.hasOwnProperty('searchOrder')) {
                obj['searchOrder'] = ApiClient.convertToType(data['searchOrder'], 'String');
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [AssociatedTranscriptFilter]);
            }
            if (data.hasOwnProperty('maxResults')) {
                obj['maxResults'] = ApiClient.convertToType(data['maxResults'], 'Number');
            }
            if (data.hasOwnProperty('nextIndex')) {
                obj['nextIndex'] = ApiClient.convertToType(data['nextIndex'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchAssociatedTranscriptsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchAssociatedTranscriptsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchAssociatedTranscriptsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['searchOrder'] && !(typeof data['searchOrder'] === 'string' || data['searchOrder'] instanceof String)) {
            throw new Error("Expected the field `searchOrder` to be a primitive type in the JSON string but got " + data['searchOrder']);
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                AssociatedTranscriptFilter.validateJSON(item);
            };
        }

        return true;
    }


}

SearchAssociatedTranscriptsRequest.RequiredProperties = ["filters"];

/**
 * How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.
 * @member {module:model/SearchAssociatedTranscriptsRequest.SearchOrderEnum} searchOrder
 */
SearchAssociatedTranscriptsRequest.prototype['searchOrder'] = undefined;

/**
 * A list of filter objects.
 * @member {Array.<module:model/AssociatedTranscriptFilter>} filters
 */
SearchAssociatedTranscriptsRequest.prototype['filters'] = undefined;

/**
 * The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
 * @member {Number} maxResults
 */
SearchAssociatedTranscriptsRequest.prototype['maxResults'] = undefined;

/**
 * If the response from the SearchAssociatedTranscriptsRequest operation contains more results than specified in the maxResults parameter, an index is returned in the response. Use that index in the nextIndex parameter to return the next page of results.
 * @member {Number} nextIndex
 */
SearchAssociatedTranscriptsRequest.prototype['nextIndex'] = undefined;





/**
 * Allowed values for the <code>searchOrder</code> property.
 * @enum {String}
 * @readonly
 */
SearchAssociatedTranscriptsRequest['SearchOrderEnum'] = {

    /**
     * value: "Ascending"
     * @const
     */
    "Ascending": "Ascending",

    /**
     * value: "Descending"
     * @const
     */
    "Descending": "Descending"
};



export default SearchAssociatedTranscriptsRequest;

