/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregatedUtterancesFilter from './AggregatedUtterancesFilter';
import ListAggregatedUtterancesRequestAggregationDuration from './ListAggregatedUtterancesRequestAggregationDuration';
import ListAggregatedUtterancesRequestSortBy from './ListAggregatedUtterancesRequestSortBy';

/**
 * The ListAggregatedUtterancesRequest model module.
 * @module model/ListAggregatedUtterancesRequest
 * @version 2020-08-07
 */
class ListAggregatedUtterancesRequest {
    /**
     * Constructs a new <code>ListAggregatedUtterancesRequest</code>.
     * @alias module:model/ListAggregatedUtterancesRequest
     * @param localeId {String} The identifier of the language and locale where the utterances were collected. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
     * @param aggregationDuration {module:model/ListAggregatedUtterancesRequestAggregationDuration} 
     */
    constructor(localeId, aggregationDuration) { 
        
        ListAggregatedUtterancesRequest.initialize(this, localeId, aggregationDuration);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, localeId, aggregationDuration) { 
        obj['localeId'] = localeId;
        obj['aggregationDuration'] = aggregationDuration;
    }

    /**
     * Constructs a <code>ListAggregatedUtterancesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListAggregatedUtterancesRequest} obj Optional instance to populate.
     * @return {module:model/ListAggregatedUtterancesRequest} The populated <code>ListAggregatedUtterancesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListAggregatedUtterancesRequest();

            if (data.hasOwnProperty('botAliasId')) {
                obj['botAliasId'] = ApiClient.convertToType(data['botAliasId'], 'String');
            }
            if (data.hasOwnProperty('botVersion')) {
                obj['botVersion'] = ApiClient.convertToType(data['botVersion'], 'String');
            }
            if (data.hasOwnProperty('localeId')) {
                obj['localeId'] = ApiClient.convertToType(data['localeId'], 'String');
            }
            if (data.hasOwnProperty('aggregationDuration')) {
                obj['aggregationDuration'] = ListAggregatedUtterancesRequestAggregationDuration.constructFromObject(data['aggregationDuration']);
            }
            if (data.hasOwnProperty('sortBy')) {
                obj['sortBy'] = ListAggregatedUtterancesRequestSortBy.constructFromObject(data['sortBy']);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [AggregatedUtterancesFilter]);
            }
            if (data.hasOwnProperty('maxResults')) {
                obj['maxResults'] = ApiClient.convertToType(data['maxResults'], 'Number');
            }
            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListAggregatedUtterancesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListAggregatedUtterancesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListAggregatedUtterancesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['botAliasId'] && !(typeof data['botAliasId'] === 'string' || data['botAliasId'] instanceof String)) {
            throw new Error("Expected the field `botAliasId` to be a primitive type in the JSON string but got " + data['botAliasId']);
        }
        // ensure the json data is a string
        if (data['botVersion'] && !(typeof data['botVersion'] === 'string' || data['botVersion'] instanceof String)) {
            throw new Error("Expected the field `botVersion` to be a primitive type in the JSON string but got " + data['botVersion']);
        }
        // ensure the json data is a string
        if (data['localeId'] && !(typeof data['localeId'] === 'string' || data['localeId'] instanceof String)) {
            throw new Error("Expected the field `localeId` to be a primitive type in the JSON string but got " + data['localeId']);
        }
        // validate the optional field `aggregationDuration`
        if (data['aggregationDuration']) { // data not null
          ListAggregatedUtterancesRequestAggregationDuration.validateJSON(data['aggregationDuration']);
        }
        // validate the optional field `sortBy`
        if (data['sortBy']) { // data not null
          ListAggregatedUtterancesRequestSortBy.validateJSON(data['sortBy']);
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                AggregatedUtterancesFilter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nextToken'] && !(typeof data['nextToken'] === 'string' || data['nextToken'] instanceof String)) {
            throw new Error("Expected the field `nextToken` to be a primitive type in the JSON string but got " + data['nextToken']);
        }

        return true;
    }


}

ListAggregatedUtterancesRequest.RequiredProperties = ["localeId", "aggregationDuration"];

/**
 * The identifier of the bot alias associated with this request. If you specify the bot alias, you can't specify the bot version.
 * @member {String} botAliasId
 */
ListAggregatedUtterancesRequest.prototype['botAliasId'] = undefined;

/**
 * The identifier of the bot version associated with this request. If you specify the bot version, you can't specify the bot alias.
 * @member {String} botVersion
 */
ListAggregatedUtterancesRequest.prototype['botVersion'] = undefined;

/**
 * The identifier of the language and locale where the utterances were collected. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.
 * @member {String} localeId
 */
ListAggregatedUtterancesRequest.prototype['localeId'] = undefined;

/**
 * @member {module:model/ListAggregatedUtterancesRequestAggregationDuration} aggregationDuration
 */
ListAggregatedUtterancesRequest.prototype['aggregationDuration'] = undefined;

/**
 * @member {module:model/ListAggregatedUtterancesRequestSortBy} sortBy
 */
ListAggregatedUtterancesRequest.prototype['sortBy'] = undefined;

/**
 * Provides the specification of a filter used to limit the utterances in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
 * @member {Array.<module:model/AggregatedUtterancesFilter>} filters
 */
ListAggregatedUtterancesRequest.prototype['filters'] = undefined;

/**
 * The maximum number of utterances to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned. If you don't specify the <code>maxResults</code> parameter, 1,000 results are returned.
 * @member {Number} maxResults
 */
ListAggregatedUtterancesRequest.prototype['maxResults'] = undefined;

/**
 * If the response from the <code>ListAggregatedUtterances</code> operation contains more results that specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.
 * @member {String} nextToken
 */
ListAggregatedUtterancesRequest.prototype['nextToken'] = undefined;






export default ListAggregatedUtterancesRequest;

