/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Principal from './Principal';

/**
 * The CreateResourcePolicyStatementRequest model module.
 * @module model/CreateResourcePolicyStatementRequest
 * @version 2020-08-07
 */
class CreateResourcePolicyStatementRequest {
    /**
     * Constructs a new <code>CreateResourcePolicyStatementRequest</code>.
     * @alias module:model/CreateResourcePolicyStatementRequest
     * @param statementId {String} The name of the statement. The ID is the same as the <code>Sid</code> IAM property. The statement name must be unique within the policy. For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html\">IAM JSON policy elements: Sid</a>. 
     * @param effect {module:model/CreateResourcePolicyStatementRequest.EffectEnum} Determines whether the statement allows or denies access to the resource.
     * @param principal {Array.<module:model/Principal>} An IAM principal, such as an IAM user, IAM role, or Amazon Web Services services that is allowed or denied access to a resource. For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\">Amazon Web Services JSON policy elements: Principal</a>.
     * @param action {Array.<String>} The Amazon Lex action that this policy either allows or denies. The action must apply to the resource type of the specified ARN. For more information, see <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html\"> Actions, resources, and condition keys for Amazon Lex V2</a>.
     */
    constructor(statementId, effect, principal, action) { 
        
        CreateResourcePolicyStatementRequest.initialize(this, statementId, effect, principal, action);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, statementId, effect, principal, action) { 
        obj['statementId'] = statementId;
        obj['effect'] = effect;
        obj['principal'] = principal;
        obj['action'] = action;
    }

    /**
     * Constructs a <code>CreateResourcePolicyStatementRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateResourcePolicyStatementRequest} obj Optional instance to populate.
     * @return {module:model/CreateResourcePolicyStatementRequest} The populated <code>CreateResourcePolicyStatementRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateResourcePolicyStatementRequest();

            if (data.hasOwnProperty('statementId')) {
                obj['statementId'] = ApiClient.convertToType(data['statementId'], 'String');
            }
            if (data.hasOwnProperty('effect')) {
                obj['effect'] = ApiClient.convertToType(data['effect'], 'String');
            }
            if (data.hasOwnProperty('principal')) {
                obj['principal'] = ApiClient.convertToType(data['principal'], [Principal]);
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], ['String']);
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateResourcePolicyStatementRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateResourcePolicyStatementRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateResourcePolicyStatementRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['statementId'] && !(typeof data['statementId'] === 'string' || data['statementId'] instanceof String)) {
            throw new Error("Expected the field `statementId` to be a primitive type in the JSON string but got " + data['statementId']);
        }
        // ensure the json data is a string
        if (data['effect'] && !(typeof data['effect'] === 'string' || data['effect'] instanceof String)) {
            throw new Error("Expected the field `effect` to be a primitive type in the JSON string but got " + data['effect']);
        }
        if (data['principal']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['principal'])) {
                throw new Error("Expected the field `principal` to be an array in the JSON data but got " + data['principal']);
            }
            // validate the optional field `principal` (array)
            for (const item of data['principal']) {
                Principal.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['action'])) {
            throw new Error("Expected the field `action` to be an array in the JSON data but got " + data['action']);
        }

        return true;
    }


}

CreateResourcePolicyStatementRequest.RequiredProperties = ["statementId", "effect", "principal", "action"];

/**
 * The name of the statement. The ID is the same as the <code>Sid</code> IAM property. The statement name must be unique within the policy. For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html\">IAM JSON policy elements: Sid</a>. 
 * @member {String} statementId
 */
CreateResourcePolicyStatementRequest.prototype['statementId'] = undefined;

/**
 * Determines whether the statement allows or denies access to the resource.
 * @member {module:model/CreateResourcePolicyStatementRequest.EffectEnum} effect
 */
CreateResourcePolicyStatementRequest.prototype['effect'] = undefined;

/**
 * An IAM principal, such as an IAM user, IAM role, or Amazon Web Services services that is allowed or denied access to a resource. For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\">Amazon Web Services JSON policy elements: Principal</a>.
 * @member {Array.<module:model/Principal>} principal
 */
CreateResourcePolicyStatementRequest.prototype['principal'] = undefined;

/**
 * The Amazon Lex action that this policy either allows or denies. The action must apply to the resource type of the specified ARN. For more information, see <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html\"> Actions, resources, and condition keys for Amazon Lex V2</a>.
 * @member {Array.<String>} action
 */
CreateResourcePolicyStatementRequest.prototype['action'] = undefined;

/**
 * <p>Specifies a condition when the policy is in effect. If the principal of the policy is a service principal, you must provide two condition blocks, one with a SourceAccount global condition key and one with a SourceArn global condition key.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html\">IAM JSON policy elements: Condition </a>.</p>
 * @member {Object.<String, Object.<String, String>>} condition
 */
CreateResourcePolicyStatementRequest.prototype['condition'] = undefined;





/**
 * Allowed values for the <code>effect</code> property.
 * @enum {String}
 * @readonly
 */
CreateResourcePolicyStatementRequest['EffectEnum'] = {

    /**
     * value: "Allow"
     * @const
     */
    "Allow": "Allow",

    /**
     * value: "Deny"
     * @const
     */
    "Deny": "Deny"
};



export default CreateResourcePolicyStatementRequest;

