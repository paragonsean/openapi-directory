/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StartTestSetGenerationRequestGenerationDataSource from './StartTestSetGenerationRequestGenerationDataSource';
import StartTestSetGenerationRequestStorageLocation from './StartTestSetGenerationRequestStorageLocation';

/**
 * The StartTestSetGenerationRequest model module.
 * @module model/StartTestSetGenerationRequest
 * @version 2020-08-07
 */
class StartTestSetGenerationRequest {
    /**
     * Constructs a new <code>StartTestSetGenerationRequest</code>.
     * @alias module:model/StartTestSetGenerationRequest
     * @param testSetName {String} The test set name for the test set generation request.
     * @param storageLocation {module:model/StartTestSetGenerationRequestStorageLocation} 
     * @param generationDataSource {module:model/StartTestSetGenerationRequestGenerationDataSource} 
     * @param roleArn {String} The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.
     */
    constructor(testSetName, storageLocation, generationDataSource, roleArn) { 
        
        StartTestSetGenerationRequest.initialize(this, testSetName, storageLocation, generationDataSource, roleArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, testSetName, storageLocation, generationDataSource, roleArn) { 
        obj['testSetName'] = testSetName;
        obj['storageLocation'] = storageLocation;
        obj['generationDataSource'] = generationDataSource;
        obj['roleArn'] = roleArn;
    }

    /**
     * Constructs a <code>StartTestSetGenerationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartTestSetGenerationRequest} obj Optional instance to populate.
     * @return {module:model/StartTestSetGenerationRequest} The populated <code>StartTestSetGenerationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartTestSetGenerationRequest();

            if (data.hasOwnProperty('testSetName')) {
                obj['testSetName'] = ApiClient.convertToType(data['testSetName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('storageLocation')) {
                obj['storageLocation'] = StartTestSetGenerationRequestStorageLocation.constructFromObject(data['storageLocation']);
            }
            if (data.hasOwnProperty('generationDataSource')) {
                obj['generationDataSource'] = StartTestSetGenerationRequestGenerationDataSource.constructFromObject(data['generationDataSource']);
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('testSetTags')) {
                obj['testSetTags'] = ApiClient.convertToType(data['testSetTags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartTestSetGenerationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartTestSetGenerationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartTestSetGenerationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['testSetName'] && !(typeof data['testSetName'] === 'string' || data['testSetName'] instanceof String)) {
            throw new Error("Expected the field `testSetName` to be a primitive type in the JSON string but got " + data['testSetName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `storageLocation`
        if (data['storageLocation']) { // data not null
          StartTestSetGenerationRequestStorageLocation.validateJSON(data['storageLocation']);
        }
        // validate the optional field `generationDataSource`
        if (data['generationDataSource']) { // data not null
          StartTestSetGenerationRequestGenerationDataSource.validateJSON(data['generationDataSource']);
        }
        // ensure the json data is a string
        if (data['roleArn'] && !(typeof data['roleArn'] === 'string' || data['roleArn'] instanceof String)) {
            throw new Error("Expected the field `roleArn` to be a primitive type in the JSON string but got " + data['roleArn']);
        }

        return true;
    }


}

StartTestSetGenerationRequest.RequiredProperties = ["testSetName", "storageLocation", "generationDataSource", "roleArn"];

/**
 * The test set name for the test set generation request.
 * @member {String} testSetName
 */
StartTestSetGenerationRequest.prototype['testSetName'] = undefined;

/**
 * The test set description for the test set generation request.
 * @member {String} description
 */
StartTestSetGenerationRequest.prototype['description'] = undefined;

/**
 * @member {module:model/StartTestSetGenerationRequestStorageLocation} storageLocation
 */
StartTestSetGenerationRequest.prototype['storageLocation'] = undefined;

/**
 * @member {module:model/StartTestSetGenerationRequestGenerationDataSource} generationDataSource
 */
StartTestSetGenerationRequest.prototype['generationDataSource'] = undefined;

/**
 * The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.
 * @member {String} roleArn
 */
StartTestSetGenerationRequest.prototype['roleArn'] = undefined;

/**
 * A list of tags to add to the test set. You can only add tags when you import/generate a new test set. You can't use the <code>UpdateTestSet</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.
 * @member {Object.<String, String>} testSetTags
 */
StartTestSetGenerationRequest.prototype['testSetTags'] = undefined;






export default StartTestSetGenerationRequest;

