/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OutputContext model module.
 * @module model/OutputContext
 * @version 2020-08-07
 */
class OutputContext {
    /**
     * Constructs a new <code>OutputContext</code>.
     * Describes a session context that is activated when an intent is fulfilled.
     * @alias module:model/OutputContext
     * @param name {String} 
     * @param timeToLiveInSeconds {Number} 
     * @param turnsToLive {Number} 
     */
    constructor(name, timeToLiveInSeconds, turnsToLive) { 
        
        OutputContext.initialize(this, name, timeToLiveInSeconds, turnsToLive);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, timeToLiveInSeconds, turnsToLive) { 
        obj['name'] = name;
        obj['timeToLiveInSeconds'] = timeToLiveInSeconds;
        obj['turnsToLive'] = turnsToLive;
    }

    /**
     * Constructs a <code>OutputContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutputContext} obj Optional instance to populate.
     * @return {module:model/OutputContext} The populated <code>OutputContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutputContext();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('timeToLiveInSeconds')) {
                obj['timeToLiveInSeconds'] = ApiClient.convertToType(data['timeToLiveInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('turnsToLive')) {
                obj['turnsToLive'] = ApiClient.convertToType(data['turnsToLive'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutputContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutputContext</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OutputContext.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `timeToLiveInSeconds`
        if (data['timeToLiveInSeconds']) { // data not null
          Number.validateJSON(data['timeToLiveInSeconds']);
        }
        // validate the optional field `turnsToLive`
        if (data['turnsToLive']) { // data not null
          Number.validateJSON(data['turnsToLive']);
        }

        return true;
    }


}

OutputContext.RequiredProperties = ["name", "timeToLiveInSeconds", "turnsToLive"];

/**
 * @member {String} name
 */
OutputContext.prototype['name'] = undefined;

/**
 * @member {Number} timeToLiveInSeconds
 */
OutputContext.prototype['timeToLiveInSeconds'] = undefined;

/**
 * @member {Number} turnsToLive
 */
OutputContext.prototype['turnsToLive'] = undefined;






export default OutputContext;

