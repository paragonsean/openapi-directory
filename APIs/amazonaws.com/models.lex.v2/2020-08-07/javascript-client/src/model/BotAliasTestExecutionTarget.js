/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BotAliasTestExecutionTarget model module.
 * @module model/BotAliasTestExecutionTarget
 * @version 2020-08-07
 */
class BotAliasTestExecutionTarget {
    /**
     * Constructs a new <code>BotAliasTestExecutionTarget</code>.
     * The target Amazon S3 location for the test set execution using a bot alias.
     * @alias module:model/BotAliasTestExecutionTarget
     * @param botId {String} 
     * @param botAliasId {String} 
     * @param localeId {String} 
     */
    constructor(botId, botAliasId, localeId) { 
        
        BotAliasTestExecutionTarget.initialize(this, botId, botAliasId, localeId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, botId, botAliasId, localeId) { 
        obj['botId'] = botId;
        obj['botAliasId'] = botAliasId;
        obj['localeId'] = localeId;
    }

    /**
     * Constructs a <code>BotAliasTestExecutionTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BotAliasTestExecutionTarget} obj Optional instance to populate.
     * @return {module:model/BotAliasTestExecutionTarget} The populated <code>BotAliasTestExecutionTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BotAliasTestExecutionTarget();

            if (data.hasOwnProperty('botId')) {
                obj['botId'] = ApiClient.convertToType(data['botId'], 'String');
            }
            if (data.hasOwnProperty('botAliasId')) {
                obj['botAliasId'] = ApiClient.convertToType(data['botAliasId'], 'String');
            }
            if (data.hasOwnProperty('localeId')) {
                obj['localeId'] = ApiClient.convertToType(data['localeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BotAliasTestExecutionTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BotAliasTestExecutionTarget</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BotAliasTestExecutionTarget.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `botId`
        if (data['botId']) { // data not null
          String.validateJSON(data['botId']);
        }
        // validate the optional field `botAliasId`
        if (data['botAliasId']) { // data not null
          String.validateJSON(data['botAliasId']);
        }
        // validate the optional field `localeId`
        if (data['localeId']) { // data not null
          String.validateJSON(data['localeId']);
        }

        return true;
    }


}

BotAliasTestExecutionTarget.RequiredProperties = ["botId", "botAliasId", "localeId"];

/**
 * @member {String} botId
 */
BotAliasTestExecutionTarget.prototype['botId'] = undefined;

/**
 * @member {String} botAliasId
 */
BotAliasTestExecutionTarget.prototype['botAliasId'] = undefined;

/**
 * @member {String} localeId
 */
BotAliasTestExecutionTarget.prototype['localeId'] = undefined;






export default BotAliasTestExecutionTarget;

