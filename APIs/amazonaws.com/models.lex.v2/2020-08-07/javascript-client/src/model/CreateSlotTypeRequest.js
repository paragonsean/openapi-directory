/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateSlotTypeRequestCompositeSlotTypeSetting from './CreateSlotTypeRequestCompositeSlotTypeSetting';
import CreateSlotTypeRequestExternalSourceSetting from './CreateSlotTypeRequestExternalSourceSetting';
import CreateSlotTypeRequestValueSelectionSetting from './CreateSlotTypeRequestValueSelectionSetting';
import SlotTypeValue from './SlotTypeValue';

/**
 * The CreateSlotTypeRequest model module.
 * @module model/CreateSlotTypeRequest
 * @version 2020-08-07
 */
class CreateSlotTypeRequest {
    /**
     * Constructs a new <code>CreateSlotTypeRequest</code>.
     * @alias module:model/CreateSlotTypeRequest
     * @param slotTypeName {String} The name for the slot. A slot type name must be unique within the intent.
     */
    constructor(slotTypeName) { 
        
        CreateSlotTypeRequest.initialize(this, slotTypeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, slotTypeName) { 
        obj['slotTypeName'] = slotTypeName;
    }

    /**
     * Constructs a <code>CreateSlotTypeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSlotTypeRequest} obj Optional instance to populate.
     * @return {module:model/CreateSlotTypeRequest} The populated <code>CreateSlotTypeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateSlotTypeRequest();

            if (data.hasOwnProperty('slotTypeName')) {
                obj['slotTypeName'] = ApiClient.convertToType(data['slotTypeName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('slotTypeValues')) {
                obj['slotTypeValues'] = ApiClient.convertToType(data['slotTypeValues'], [SlotTypeValue]);
            }
            if (data.hasOwnProperty('valueSelectionSetting')) {
                obj['valueSelectionSetting'] = CreateSlotTypeRequestValueSelectionSetting.constructFromObject(data['valueSelectionSetting']);
            }
            if (data.hasOwnProperty('parentSlotTypeSignature')) {
                obj['parentSlotTypeSignature'] = ApiClient.convertToType(data['parentSlotTypeSignature'], 'String');
            }
            if (data.hasOwnProperty('externalSourceSetting')) {
                obj['externalSourceSetting'] = CreateSlotTypeRequestExternalSourceSetting.constructFromObject(data['externalSourceSetting']);
            }
            if (data.hasOwnProperty('compositeSlotTypeSetting')) {
                obj['compositeSlotTypeSetting'] = CreateSlotTypeRequestCompositeSlotTypeSetting.constructFromObject(data['compositeSlotTypeSetting']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateSlotTypeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateSlotTypeRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateSlotTypeRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['slotTypeName'] && !(typeof data['slotTypeName'] === 'string' || data['slotTypeName'] instanceof String)) {
            throw new Error("Expected the field `slotTypeName` to be a primitive type in the JSON string but got " + data['slotTypeName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['slotTypeValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['slotTypeValues'])) {
                throw new Error("Expected the field `slotTypeValues` to be an array in the JSON data but got " + data['slotTypeValues']);
            }
            // validate the optional field `slotTypeValues` (array)
            for (const item of data['slotTypeValues']) {
                SlotTypeValue.validateJSON(item);
            };
        }
        // validate the optional field `valueSelectionSetting`
        if (data['valueSelectionSetting']) { // data not null
          CreateSlotTypeRequestValueSelectionSetting.validateJSON(data['valueSelectionSetting']);
        }
        // ensure the json data is a string
        if (data['parentSlotTypeSignature'] && !(typeof data['parentSlotTypeSignature'] === 'string' || data['parentSlotTypeSignature'] instanceof String)) {
            throw new Error("Expected the field `parentSlotTypeSignature` to be a primitive type in the JSON string but got " + data['parentSlotTypeSignature']);
        }
        // validate the optional field `externalSourceSetting`
        if (data['externalSourceSetting']) { // data not null
          CreateSlotTypeRequestExternalSourceSetting.validateJSON(data['externalSourceSetting']);
        }
        // validate the optional field `compositeSlotTypeSetting`
        if (data['compositeSlotTypeSetting']) { // data not null
          CreateSlotTypeRequestCompositeSlotTypeSetting.validateJSON(data['compositeSlotTypeSetting']);
        }

        return true;
    }


}

CreateSlotTypeRequest.RequiredProperties = ["slotTypeName"];

/**
 * The name for the slot. A slot type name must be unique within the intent.
 * @member {String} slotTypeName
 */
CreateSlotTypeRequest.prototype['slotTypeName'] = undefined;

/**
 * A description of the slot type. Use the description to help identify the slot type in lists.
 * @member {String} description
 */
CreateSlotTypeRequest.prototype['description'] = undefined;

/**
 * A list of <code>SlotTypeValue</code> objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot.
 * @member {Array.<module:model/SlotTypeValue>} slotTypeValues
 */
CreateSlotTypeRequest.prototype['slotTypeValues'] = undefined;

/**
 * @member {module:model/CreateSlotTypeRequestValueSelectionSetting} valueSelectionSetting
 */
CreateSlotTypeRequest.prototype['valueSelectionSetting'] = undefined;

/**
 * <p>The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type.</p> <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
 * @member {String} parentSlotTypeSignature
 */
CreateSlotTypeRequest.prototype['parentSlotTypeSignature'] = undefined;

/**
 * @member {module:model/CreateSlotTypeRequestExternalSourceSetting} externalSourceSetting
 */
CreateSlotTypeRequest.prototype['externalSourceSetting'] = undefined;

/**
 * @member {module:model/CreateSlotTypeRequestCompositeSlotTypeSetting} compositeSlotTypeSetting
 */
CreateSlotTypeRequest.prototype['compositeSlotTypeSetting'] = undefined;






export default CreateSlotTypeRequest;

