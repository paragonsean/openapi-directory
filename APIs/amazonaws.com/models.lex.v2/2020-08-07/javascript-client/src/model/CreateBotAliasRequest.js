/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BotAliasLocaleSettings from './BotAliasLocaleSettings';
import CreateBotAliasRequestConversationLogSettings from './CreateBotAliasRequestConversationLogSettings';
import CreateBotAliasRequestSentimentAnalysisSettings from './CreateBotAliasRequestSentimentAnalysisSettings';

/**
 * The CreateBotAliasRequest model module.
 * @module model/CreateBotAliasRequest
 * @version 2020-08-07
 */
class CreateBotAliasRequest {
    /**
     * Constructs a new <code>CreateBotAliasRequest</code>.
     * @alias module:model/CreateBotAliasRequest
     * @param botAliasName {String} The alias to create. The name must be unique for the bot.
     */
    constructor(botAliasName) { 
        
        CreateBotAliasRequest.initialize(this, botAliasName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, botAliasName) { 
        obj['botAliasName'] = botAliasName;
    }

    /**
     * Constructs a <code>CreateBotAliasRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateBotAliasRequest} obj Optional instance to populate.
     * @return {module:model/CreateBotAliasRequest} The populated <code>CreateBotAliasRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateBotAliasRequest();

            if (data.hasOwnProperty('botAliasName')) {
                obj['botAliasName'] = ApiClient.convertToType(data['botAliasName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('botVersion')) {
                obj['botVersion'] = ApiClient.convertToType(data['botVersion'], 'String');
            }
            if (data.hasOwnProperty('botAliasLocaleSettings')) {
                obj['botAliasLocaleSettings'] = ApiClient.convertToType(data['botAliasLocaleSettings'], {'String': BotAliasLocaleSettings});
            }
            if (data.hasOwnProperty('conversationLogSettings')) {
                obj['conversationLogSettings'] = CreateBotAliasRequestConversationLogSettings.constructFromObject(data['conversationLogSettings']);
            }
            if (data.hasOwnProperty('sentimentAnalysisSettings')) {
                obj['sentimentAnalysisSettings'] = CreateBotAliasRequestSentimentAnalysisSettings.constructFromObject(data['sentimentAnalysisSettings']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateBotAliasRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateBotAliasRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateBotAliasRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['botAliasName'] && !(typeof data['botAliasName'] === 'string' || data['botAliasName'] instanceof String)) {
            throw new Error("Expected the field `botAliasName` to be a primitive type in the JSON string but got " + data['botAliasName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['botVersion'] && !(typeof data['botVersion'] === 'string' || data['botVersion'] instanceof String)) {
            throw new Error("Expected the field `botVersion` to be a primitive type in the JSON string but got " + data['botVersion']);
        }
        // validate the optional field `conversationLogSettings`
        if (data['conversationLogSettings']) { // data not null
          CreateBotAliasRequestConversationLogSettings.validateJSON(data['conversationLogSettings']);
        }
        // validate the optional field `sentimentAnalysisSettings`
        if (data['sentimentAnalysisSettings']) { // data not null
          CreateBotAliasRequestSentimentAnalysisSettings.validateJSON(data['sentimentAnalysisSettings']);
        }

        return true;
    }


}

CreateBotAliasRequest.RequiredProperties = ["botAliasName"];

/**
 * The alias to create. The name must be unique for the bot.
 * @member {String} botAliasName
 */
CreateBotAliasRequest.prototype['botAliasName'] = undefined;

/**
 * A description of the alias. Use this description to help identify the alias.
 * @member {String} description
 */
CreateBotAliasRequest.prototype['description'] = undefined;

/**
 * The version of the bot that this alias points to. You can use the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_UpdateBotAlias.html\">UpdateBotAlias</a> operation to change the bot version associated with the alias.
 * @member {String} botVersion
 */
CreateBotAliasRequest.prototype['botVersion'] = undefined;

/**
 * Maps configuration information to a specific locale. You can use this parameter to specify a specific Lambda function to run different functions in different locales.
 * @member {Object.<String, module:model/BotAliasLocaleSettings>} botAliasLocaleSettings
 */
CreateBotAliasRequest.prototype['botAliasLocaleSettings'] = undefined;

/**
 * @member {module:model/CreateBotAliasRequestConversationLogSettings} conversationLogSettings
 */
CreateBotAliasRequest.prototype['conversationLogSettings'] = undefined;

/**
 * @member {module:model/CreateBotAliasRequestSentimentAnalysisSettings} sentimentAnalysisSettings
 */
CreateBotAliasRequest.prototype['sentimentAnalysisSettings'] = undefined;

/**
 * A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the <code>UpdateBotAlias</code> operation to update the tags on a bot alias. To update tags, use the <code>TagResource</code> operation.
 * @member {Object.<String, String>} tags
 */
CreateBotAliasRequest.prototype['tags'] = undefined;






export default CreateBotAliasRequest;

