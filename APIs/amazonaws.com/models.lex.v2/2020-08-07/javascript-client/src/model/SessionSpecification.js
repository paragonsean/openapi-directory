/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalyticsModality from './AnalyticsModality';
import ConversationEndState from './ConversationEndState';

/**
 * The SessionSpecification model module.
 * @module model/SessionSpecification
 * @version 2020-08-07
 */
class SessionSpecification {
    /**
     * Constructs a new <code>SessionSpecification</code>.
     * An object containing information about a specific session.
     * @alias module:model/SessionSpecification
     */
    constructor() { 
        
        SessionSpecification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SessionSpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SessionSpecification} obj Optional instance to populate.
     * @return {module:model/SessionSpecification} The populated <code>SessionSpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SessionSpecification();

            if (data.hasOwnProperty('botAliasId')) {
                obj['botAliasId'] = ApiClient.convertToType(data['botAliasId'], 'String');
            }
            if (data.hasOwnProperty('botVersion')) {
                obj['botVersion'] = ApiClient.convertToType(data['botVersion'], 'String');
            }
            if (data.hasOwnProperty('localeId')) {
                obj['localeId'] = ApiClient.convertToType(data['localeId'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('conversationStartTime')) {
                obj['conversationStartTime'] = ApiClient.convertToType(data['conversationStartTime'], 'Date');
            }
            if (data.hasOwnProperty('conversationEndTime')) {
                obj['conversationEndTime'] = ApiClient.convertToType(data['conversationEndTime'], 'Date');
            }
            if (data.hasOwnProperty('conversationDurationSeconds')) {
                obj['conversationDurationSeconds'] = ApiClient.convertToType(data['conversationDurationSeconds'], 'Number');
            }
            if (data.hasOwnProperty('conversationEndState')) {
                obj['conversationEndState'] = ApiClient.convertToType(data['conversationEndState'], ConversationEndState);
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], AnalyticsModality);
            }
            if (data.hasOwnProperty('numberOfTurns')) {
                obj['numberOfTurns'] = ApiClient.convertToType(data['numberOfTurns'], 'Number');
            }
            if (data.hasOwnProperty('invokedIntentSamples')) {
                obj['invokedIntentSamples'] = ApiClient.convertToType(data['invokedIntentSamples'], Array);
            }
            if (data.hasOwnProperty('originatingRequestId')) {
                obj['originatingRequestId'] = ApiClient.convertToType(data['originatingRequestId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SessionSpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SessionSpecification</code>.
     */
    static validateJSON(data) {
        // validate the optional field `botAliasId`
        if (data['botAliasId']) { // data not null
          String.validateJSON(data['botAliasId']);
        }
        // validate the optional field `botVersion`
        if (data['botVersion']) { // data not null
          String.validateJSON(data['botVersion']);
        }
        // validate the optional field `localeId`
        if (data['localeId']) { // data not null
          String.validateJSON(data['localeId']);
        }
        // validate the optional field `channel`
        if (data['channel']) { // data not null
          String.validateJSON(data['channel']);
        }
        // validate the optional field `sessionId`
        if (data['sessionId']) { // data not null
          String.validateJSON(data['sessionId']);
        }
        // validate the optional field `conversationStartTime`
        if (data['conversationStartTime']) { // data not null
          Date.validateJSON(data['conversationStartTime']);
        }
        // validate the optional field `conversationEndTime`
        if (data['conversationEndTime']) { // data not null
          Date.validateJSON(data['conversationEndTime']);
        }
        // validate the optional field `conversationDurationSeconds`
        if (data['conversationDurationSeconds']) { // data not null
          Number.validateJSON(data['conversationDurationSeconds']);
        }
        // validate the optional field `conversationEndState`
        if (data['conversationEndState']) { // data not null
          ConversationEndState.validateJSON(data['conversationEndState']);
        }
        // validate the optional field `mode`
        if (data['mode']) { // data not null
          AnalyticsModality.validateJSON(data['mode']);
        }
        // validate the optional field `numberOfTurns`
        if (data['numberOfTurns']) { // data not null
          Number.validateJSON(data['numberOfTurns']);
        }
        // validate the optional field `invokedIntentSamples`
        if (data['invokedIntentSamples']) { // data not null
          Array.validateJSON(data['invokedIntentSamples']);
        }
        // validate the optional field `originatingRequestId`
        if (data['originatingRequestId']) { // data not null
          String.validateJSON(data['originatingRequestId']);
        }

        return true;
    }


}



/**
 * @member {String} botAliasId
 */
SessionSpecification.prototype['botAliasId'] = undefined;

/**
 * @member {String} botVersion
 */
SessionSpecification.prototype['botVersion'] = undefined;

/**
 * @member {String} localeId
 */
SessionSpecification.prototype['localeId'] = undefined;

/**
 * @member {String} channel
 */
SessionSpecification.prototype['channel'] = undefined;

/**
 * @member {String} sessionId
 */
SessionSpecification.prototype['sessionId'] = undefined;

/**
 * @member {Date} conversationStartTime
 */
SessionSpecification.prototype['conversationStartTime'] = undefined;

/**
 * @member {Date} conversationEndTime
 */
SessionSpecification.prototype['conversationEndTime'] = undefined;

/**
 * @member {Number} conversationDurationSeconds
 */
SessionSpecification.prototype['conversationDurationSeconds'] = undefined;

/**
 * @member {module:model/ConversationEndState} conversationEndState
 */
SessionSpecification.prototype['conversationEndState'] = undefined;

/**
 * @member {module:model/AnalyticsModality} mode
 */
SessionSpecification.prototype['mode'] = undefined;

/**
 * @member {Number} numberOfTurns
 */
SessionSpecification.prototype['numberOfTurns'] = undefined;

/**
 * @member {Array} invokedIntentSamples
 */
SessionSpecification.prototype['invokedIntentSamples'] = undefined;

/**
 * @member {String} originatingRequestId
 */
SessionSpecification.prototype['originatingRequestId'] = undefined;






export default SessionSpecification;

