/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateIntentRequestDialogCodeHook from './CreateIntentRequestDialogCodeHook';
import CreateIntentRequestFulfillmentCodeHook from './CreateIntentRequestFulfillmentCodeHook';
import CreateIntentRequestInitialResponseSetting from './CreateIntentRequestInitialResponseSetting';
import CreateIntentRequestIntentClosingSetting from './CreateIntentRequestIntentClosingSetting';
import CreateIntentRequestIntentConfirmationSetting from './CreateIntentRequestIntentConfirmationSetting';
import CreateIntentRequestKendraConfiguration from './CreateIntentRequestKendraConfiguration';
import InputContext from './InputContext';
import OutputContext from './OutputContext';
import SampleUtterance from './SampleUtterance';

/**
 * The CreateIntentRequest model module.
 * @module model/CreateIntentRequest
 * @version 2020-08-07
 */
class CreateIntentRequest {
    /**
     * Constructs a new <code>CreateIntentRequest</code>.
     * @alias module:model/CreateIntentRequest
     * @param intentName {String} The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
     */
    constructor(intentName) { 
        
        CreateIntentRequest.initialize(this, intentName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, intentName) { 
        obj['intentName'] = intentName;
    }

    /**
     * Constructs a <code>CreateIntentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateIntentRequest} obj Optional instance to populate.
     * @return {module:model/CreateIntentRequest} The populated <code>CreateIntentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateIntentRequest();

            if (data.hasOwnProperty('intentName')) {
                obj['intentName'] = ApiClient.convertToType(data['intentName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('parentIntentSignature')) {
                obj['parentIntentSignature'] = ApiClient.convertToType(data['parentIntentSignature'], 'String');
            }
            if (data.hasOwnProperty('sampleUtterances')) {
                obj['sampleUtterances'] = ApiClient.convertToType(data['sampleUtterances'], [SampleUtterance]);
            }
            if (data.hasOwnProperty('dialogCodeHook')) {
                obj['dialogCodeHook'] = CreateIntentRequestDialogCodeHook.constructFromObject(data['dialogCodeHook']);
            }
            if (data.hasOwnProperty('fulfillmentCodeHook')) {
                obj['fulfillmentCodeHook'] = CreateIntentRequestFulfillmentCodeHook.constructFromObject(data['fulfillmentCodeHook']);
            }
            if (data.hasOwnProperty('intentConfirmationSetting')) {
                obj['intentConfirmationSetting'] = CreateIntentRequestIntentConfirmationSetting.constructFromObject(data['intentConfirmationSetting']);
            }
            if (data.hasOwnProperty('intentClosingSetting')) {
                obj['intentClosingSetting'] = CreateIntentRequestIntentClosingSetting.constructFromObject(data['intentClosingSetting']);
            }
            if (data.hasOwnProperty('inputContexts')) {
                obj['inputContexts'] = ApiClient.convertToType(data['inputContexts'], [InputContext]);
            }
            if (data.hasOwnProperty('outputContexts')) {
                obj['outputContexts'] = ApiClient.convertToType(data['outputContexts'], [OutputContext]);
            }
            if (data.hasOwnProperty('kendraConfiguration')) {
                obj['kendraConfiguration'] = CreateIntentRequestKendraConfiguration.constructFromObject(data['kendraConfiguration']);
            }
            if (data.hasOwnProperty('initialResponseSetting')) {
                obj['initialResponseSetting'] = CreateIntentRequestInitialResponseSetting.constructFromObject(data['initialResponseSetting']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateIntentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateIntentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateIntentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['intentName'] && !(typeof data['intentName'] === 'string' || data['intentName'] instanceof String)) {
            throw new Error("Expected the field `intentName` to be a primitive type in the JSON string but got " + data['intentName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['parentIntentSignature'] && !(typeof data['parentIntentSignature'] === 'string' || data['parentIntentSignature'] instanceof String)) {
            throw new Error("Expected the field `parentIntentSignature` to be a primitive type in the JSON string but got " + data['parentIntentSignature']);
        }
        if (data['sampleUtterances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sampleUtterances'])) {
                throw new Error("Expected the field `sampleUtterances` to be an array in the JSON data but got " + data['sampleUtterances']);
            }
            // validate the optional field `sampleUtterances` (array)
            for (const item of data['sampleUtterances']) {
                SampleUtterance.validateJSON(item);
            };
        }
        // validate the optional field `dialogCodeHook`
        if (data['dialogCodeHook']) { // data not null
          CreateIntentRequestDialogCodeHook.validateJSON(data['dialogCodeHook']);
        }
        // validate the optional field `fulfillmentCodeHook`
        if (data['fulfillmentCodeHook']) { // data not null
          CreateIntentRequestFulfillmentCodeHook.validateJSON(data['fulfillmentCodeHook']);
        }
        // validate the optional field `intentConfirmationSetting`
        if (data['intentConfirmationSetting']) { // data not null
          CreateIntentRequestIntentConfirmationSetting.validateJSON(data['intentConfirmationSetting']);
        }
        // validate the optional field `intentClosingSetting`
        if (data['intentClosingSetting']) { // data not null
          CreateIntentRequestIntentClosingSetting.validateJSON(data['intentClosingSetting']);
        }
        if (data['inputContexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputContexts'])) {
                throw new Error("Expected the field `inputContexts` to be an array in the JSON data but got " + data['inputContexts']);
            }
            // validate the optional field `inputContexts` (array)
            for (const item of data['inputContexts']) {
                InputContext.validateJSON(item);
            };
        }
        if (data['outputContexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputContexts'])) {
                throw new Error("Expected the field `outputContexts` to be an array in the JSON data but got " + data['outputContexts']);
            }
            // validate the optional field `outputContexts` (array)
            for (const item of data['outputContexts']) {
                OutputContext.validateJSON(item);
            };
        }
        // validate the optional field `kendraConfiguration`
        if (data['kendraConfiguration']) { // data not null
          CreateIntentRequestKendraConfiguration.validateJSON(data['kendraConfiguration']);
        }
        // validate the optional field `initialResponseSetting`
        if (data['initialResponseSetting']) { // data not null
          CreateIntentRequestInitialResponseSetting.validateJSON(data['initialResponseSetting']);
        }

        return true;
    }


}

CreateIntentRequest.RequiredProperties = ["intentName"];

/**
 * The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
 * @member {String} intentName
 */
CreateIntentRequest.prototype['intentName'] = undefined;

/**
 * A description of the intent. Use the description to help identify the intent in lists.
 * @member {String} description
 */
CreateIntentRequest.prototype['description'] = undefined;

/**
 * A unique identifier for the built-in intent to base this intent on.
 * @member {String} parentIntentSignature
 */
CreateIntentRequest.prototype['parentIntentSignature'] = undefined;

/**
 * <p>An array of strings that a user might say to signal the intent. For example, \"I want a pizza\", or \"I want a {PizzaSize} pizza\". </p> <p>In an utterance, slot names are enclosed in curly braces (\"{\", \"}\") to indicate where they should be displayed in the utterance shown to the user.. </p>
 * @member {Array.<module:model/SampleUtterance>} sampleUtterances
 */
CreateIntentRequest.prototype['sampleUtterances'] = undefined;

/**
 * @member {module:model/CreateIntentRequestDialogCodeHook} dialogCodeHook
 */
CreateIntentRequest.prototype['dialogCodeHook'] = undefined;

/**
 * @member {module:model/CreateIntentRequestFulfillmentCodeHook} fulfillmentCodeHook
 */
CreateIntentRequest.prototype['fulfillmentCodeHook'] = undefined;

/**
 * @member {module:model/CreateIntentRequestIntentConfirmationSetting} intentConfirmationSetting
 */
CreateIntentRequest.prototype['intentConfirmationSetting'] = undefined;

/**
 * @member {module:model/CreateIntentRequestIntentClosingSetting} intentClosingSetting
 */
CreateIntentRequest.prototype['intentClosingSetting'] = undefined;

/**
 * <p>A list of contexts that must be active for this intent to be considered by Amazon Lex.</p> <p>When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent.</p> <p>A context can be automatically activated using the <code>outputContexts</code> property or it can be set at runtime.</p> <p> For example, if there are two intents with different input contexts that respond to the same utterances, only the intent with the active context will respond.</p> <p>An intent may have up to 5 input contexts. If an intent has multiple input contexts, all of the contexts must be active to consider the intent.</p>
 * @member {Array.<module:model/InputContext>} inputContexts
 */
CreateIntentRequest.prototype['inputContexts'] = undefined;

/**
 * <p>A lists of contexts that the intent activates when it is fulfilled.</p> <p>You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. </p> <p>When you use the <code>outputContextsList</code> property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active.</p>
 * @member {Array.<module:model/OutputContext>} outputContexts
 */
CreateIntentRequest.prototype['outputContexts'] = undefined;

/**
 * @member {module:model/CreateIntentRequestKendraConfiguration} kendraConfiguration
 */
CreateIntentRequest.prototype['kendraConfiguration'] = undefined;

/**
 * @member {module:model/CreateIntentRequestInitialResponseSetting} initialResponseSetting
 */
CreateIntentRequest.prototype['initialResponseSetting'] = undefined;






export default CreateIntentRequest;

