/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalyticsModality from './AnalyticsModality';
import IntentState from './IntentState';

/**
 * The UtteranceSpecification model module.
 * @module model/UtteranceSpecification
 * @version 2020-08-07
 */
class UtteranceSpecification {
    /**
     * Constructs a new <code>UtteranceSpecification</code>.
     * An object containing information about a specific utterance.
     * @alias module:model/UtteranceSpecification
     */
    constructor() { 
        
        UtteranceSpecification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UtteranceSpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UtteranceSpecification} obj Optional instance to populate.
     * @return {module:model/UtteranceSpecification} The populated <code>UtteranceSpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UtteranceSpecification();

            if (data.hasOwnProperty('botAliasId')) {
                obj['botAliasId'] = ApiClient.convertToType(data['botAliasId'], 'String');
            }
            if (data.hasOwnProperty('botVersion')) {
                obj['botVersion'] = ApiClient.convertToType(data['botVersion'], 'String');
            }
            if (data.hasOwnProperty('localeId')) {
                obj['localeId'] = ApiClient.convertToType(data['localeId'], 'String');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], AnalyticsModality);
            }
            if (data.hasOwnProperty('conversationStartTime')) {
                obj['conversationStartTime'] = ApiClient.convertToType(data['conversationStartTime'], 'Date');
            }
            if (data.hasOwnProperty('conversationEndTime')) {
                obj['conversationEndTime'] = ApiClient.convertToType(data['conversationEndTime'], 'Date');
            }
            if (data.hasOwnProperty('utterance')) {
                obj['utterance'] = ApiClient.convertToType(data['utterance'], 'String');
            }
            if (data.hasOwnProperty('utteranceTimestamp')) {
                obj['utteranceTimestamp'] = ApiClient.convertToType(data['utteranceTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('audioVoiceDurationMillis')) {
                obj['audioVoiceDurationMillis'] = ApiClient.convertToType(data['audioVoiceDurationMillis'], 'Number');
            }
            if (data.hasOwnProperty('utteranceUnderstood')) {
                obj['utteranceUnderstood'] = ApiClient.convertToType(data['utteranceUnderstood'], 'Boolean');
            }
            if (data.hasOwnProperty('inputType')) {
                obj['inputType'] = ApiClient.convertToType(data['inputType'], 'String');
            }
            if (data.hasOwnProperty('outputType')) {
                obj['outputType'] = ApiClient.convertToType(data['outputType'], 'String');
            }
            if (data.hasOwnProperty('associatedIntentName')) {
                obj['associatedIntentName'] = ApiClient.convertToType(data['associatedIntentName'], 'String');
            }
            if (data.hasOwnProperty('associatedSlotName')) {
                obj['associatedSlotName'] = ApiClient.convertToType(data['associatedSlotName'], 'String');
            }
            if (data.hasOwnProperty('intentState')) {
                obj['intentState'] = ApiClient.convertToType(data['intentState'], IntentState);
            }
            if (data.hasOwnProperty('dialogActionType')) {
                obj['dialogActionType'] = ApiClient.convertToType(data['dialogActionType'], 'String');
            }
            if (data.hasOwnProperty('botResponseAudioVoiceId')) {
                obj['botResponseAudioVoiceId'] = ApiClient.convertToType(data['botResponseAudioVoiceId'], 'String');
            }
            if (data.hasOwnProperty('slotsFilledInSession')) {
                obj['slotsFilledInSession'] = ApiClient.convertToType(data['slotsFilledInSession'], 'String');
            }
            if (data.hasOwnProperty('utteranceRequestId')) {
                obj['utteranceRequestId'] = ApiClient.convertToType(data['utteranceRequestId'], 'String');
            }
            if (data.hasOwnProperty('botResponses')) {
                obj['botResponses'] = ApiClient.convertToType(data['botResponses'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UtteranceSpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UtteranceSpecification</code>.
     */
    static validateJSON(data) {
        // validate the optional field `botAliasId`
        if (data['botAliasId']) { // data not null
          String.validateJSON(data['botAliasId']);
        }
        // validate the optional field `botVersion`
        if (data['botVersion']) { // data not null
          String.validateJSON(data['botVersion']);
        }
        // validate the optional field `localeId`
        if (data['localeId']) { // data not null
          String.validateJSON(data['localeId']);
        }
        // validate the optional field `sessionId`
        if (data['sessionId']) { // data not null
          String.validateJSON(data['sessionId']);
        }
        // validate the optional field `channel`
        if (data['channel']) { // data not null
          String.validateJSON(data['channel']);
        }
        // validate the optional field `mode`
        if (data['mode']) { // data not null
          AnalyticsModality.validateJSON(data['mode']);
        }
        // validate the optional field `conversationStartTime`
        if (data['conversationStartTime']) { // data not null
          Date.validateJSON(data['conversationStartTime']);
        }
        // validate the optional field `conversationEndTime`
        if (data['conversationEndTime']) { // data not null
          Date.validateJSON(data['conversationEndTime']);
        }
        // validate the optional field `utterance`
        if (data['utterance']) { // data not null
          String.validateJSON(data['utterance']);
        }
        // validate the optional field `utteranceTimestamp`
        if (data['utteranceTimestamp']) { // data not null
          Date.validateJSON(data['utteranceTimestamp']);
        }
        // validate the optional field `audioVoiceDurationMillis`
        if (data['audioVoiceDurationMillis']) { // data not null
          Number.validateJSON(data['audioVoiceDurationMillis']);
        }
        // validate the optional field `utteranceUnderstood`
        if (data['utteranceUnderstood']) { // data not null
          Boolean.validateJSON(data['utteranceUnderstood']);
        }
        // validate the optional field `inputType`
        if (data['inputType']) { // data not null
          String.validateJSON(data['inputType']);
        }
        // validate the optional field `outputType`
        if (data['outputType']) { // data not null
          String.validateJSON(data['outputType']);
        }
        // validate the optional field `associatedIntentName`
        if (data['associatedIntentName']) { // data not null
          String.validateJSON(data['associatedIntentName']);
        }
        // validate the optional field `associatedSlotName`
        if (data['associatedSlotName']) { // data not null
          String.validateJSON(data['associatedSlotName']);
        }
        // validate the optional field `intentState`
        if (data['intentState']) { // data not null
          IntentState.validateJSON(data['intentState']);
        }
        // validate the optional field `dialogActionType`
        if (data['dialogActionType']) { // data not null
          String.validateJSON(data['dialogActionType']);
        }
        // validate the optional field `botResponseAudioVoiceId`
        if (data['botResponseAudioVoiceId']) { // data not null
          String.validateJSON(data['botResponseAudioVoiceId']);
        }
        // validate the optional field `slotsFilledInSession`
        if (data['slotsFilledInSession']) { // data not null
          String.validateJSON(data['slotsFilledInSession']);
        }
        // validate the optional field `utteranceRequestId`
        if (data['utteranceRequestId']) { // data not null
          String.validateJSON(data['utteranceRequestId']);
        }
        // validate the optional field `botResponses`
        if (data['botResponses']) { // data not null
          Array.validateJSON(data['botResponses']);
        }

        return true;
    }


}



/**
 * @member {String} botAliasId
 */
UtteranceSpecification.prototype['botAliasId'] = undefined;

/**
 * @member {String} botVersion
 */
UtteranceSpecification.prototype['botVersion'] = undefined;

/**
 * @member {String} localeId
 */
UtteranceSpecification.prototype['localeId'] = undefined;

/**
 * @member {String} sessionId
 */
UtteranceSpecification.prototype['sessionId'] = undefined;

/**
 * @member {String} channel
 */
UtteranceSpecification.prototype['channel'] = undefined;

/**
 * @member {module:model/AnalyticsModality} mode
 */
UtteranceSpecification.prototype['mode'] = undefined;

/**
 * @member {Date} conversationStartTime
 */
UtteranceSpecification.prototype['conversationStartTime'] = undefined;

/**
 * @member {Date} conversationEndTime
 */
UtteranceSpecification.prototype['conversationEndTime'] = undefined;

/**
 * @member {String} utterance
 */
UtteranceSpecification.prototype['utterance'] = undefined;

/**
 * @member {Date} utteranceTimestamp
 */
UtteranceSpecification.prototype['utteranceTimestamp'] = undefined;

/**
 * @member {Number} audioVoiceDurationMillis
 */
UtteranceSpecification.prototype['audioVoiceDurationMillis'] = undefined;

/**
 * @member {Boolean} utteranceUnderstood
 */
UtteranceSpecification.prototype['utteranceUnderstood'] = undefined;

/**
 * @member {String} inputType
 */
UtteranceSpecification.prototype['inputType'] = undefined;

/**
 * @member {String} outputType
 */
UtteranceSpecification.prototype['outputType'] = undefined;

/**
 * @member {String} associatedIntentName
 */
UtteranceSpecification.prototype['associatedIntentName'] = undefined;

/**
 * @member {String} associatedSlotName
 */
UtteranceSpecification.prototype['associatedSlotName'] = undefined;

/**
 * @member {module:model/IntentState} intentState
 */
UtteranceSpecification.prototype['intentState'] = undefined;

/**
 * @member {String} dialogActionType
 */
UtteranceSpecification.prototype['dialogActionType'] = undefined;

/**
 * @member {String} botResponseAudioVoiceId
 */
UtteranceSpecification.prototype['botResponseAudioVoiceId'] = undefined;

/**
 * @member {String} slotsFilledInSession
 */
UtteranceSpecification.prototype['slotsFilledInSession'] = undefined;

/**
 * @member {String} utteranceRequestId
 */
UtteranceSpecification.prototype['utteranceRequestId'] = undefined;

/**
 * @member {Array} botResponses
 */
UtteranceSpecification.prototype['botResponses'] = undefined;






export default UtteranceSpecification;

