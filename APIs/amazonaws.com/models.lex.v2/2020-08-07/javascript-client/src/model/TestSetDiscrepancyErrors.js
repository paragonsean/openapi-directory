/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestSetDiscrepancyErrors model module.
 * @module model/TestSetDiscrepancyErrors
 * @version 2020-08-07
 */
class TestSetDiscrepancyErrors {
    /**
     * Constructs a new <code>TestSetDiscrepancyErrors</code>.
     * Contains details about the errors in the test set discrepancy report
     * @alias module:model/TestSetDiscrepancyErrors
     * @param intentDiscrepancies {Array} 
     * @param slotDiscrepancies {Array} 
     */
    constructor(intentDiscrepancies, slotDiscrepancies) { 
        
        TestSetDiscrepancyErrors.initialize(this, intentDiscrepancies, slotDiscrepancies);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, intentDiscrepancies, slotDiscrepancies) { 
        obj['intentDiscrepancies'] = intentDiscrepancies;
        obj['slotDiscrepancies'] = slotDiscrepancies;
    }

    /**
     * Constructs a <code>TestSetDiscrepancyErrors</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestSetDiscrepancyErrors} obj Optional instance to populate.
     * @return {module:model/TestSetDiscrepancyErrors} The populated <code>TestSetDiscrepancyErrors</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestSetDiscrepancyErrors();

            if (data.hasOwnProperty('intentDiscrepancies')) {
                obj['intentDiscrepancies'] = ApiClient.convertToType(data['intentDiscrepancies'], Array);
            }
            if (data.hasOwnProperty('slotDiscrepancies')) {
                obj['slotDiscrepancies'] = ApiClient.convertToType(data['slotDiscrepancies'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestSetDiscrepancyErrors</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestSetDiscrepancyErrors</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestSetDiscrepancyErrors.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `intentDiscrepancies`
        if (data['intentDiscrepancies']) { // data not null
          Array.validateJSON(data['intentDiscrepancies']);
        }
        // validate the optional field `slotDiscrepancies`
        if (data['slotDiscrepancies']) { // data not null
          Array.validateJSON(data['slotDiscrepancies']);
        }

        return true;
    }


}

TestSetDiscrepancyErrors.RequiredProperties = ["intentDiscrepancies", "slotDiscrepancies"];

/**
 * @member {Array} intentDiscrepancies
 */
TestSetDiscrepancyErrors.prototype['intentDiscrepancies'] = undefined;

/**
 * @member {Array} slotDiscrepancies
 */
TestSetDiscrepancyErrors.prototype['slotDiscrepancies'] = undefined;






export default TestSetDiscrepancyErrors;

