/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StartImportRequestResourceSpecification from './StartImportRequestResourceSpecification';

/**
 * The StartImportRequest model module.
 * @module model/StartImportRequest
 * @version 2020-08-07
 */
class StartImportRequest {
    /**
     * Constructs a new <code>StartImportRequest</code>.
     * @alias module:model/StartImportRequest
     * @param importId {String} The unique identifier for the import. It is included in the response from the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateUploadUrl.html\">CreateUploadUrl</a> operation.
     * @param resourceSpecification {module:model/StartImportRequestResourceSpecification} 
     * @param mergeStrategy {module:model/StartImportRequest.MergeStrategyEnum} The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is <code>FailOnConflict</code> existing resources are not overwritten and the import fails.
     */
    constructor(importId, resourceSpecification, mergeStrategy) { 
        
        StartImportRequest.initialize(this, importId, resourceSpecification, mergeStrategy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, importId, resourceSpecification, mergeStrategy) { 
        obj['importId'] = importId;
        obj['resourceSpecification'] = resourceSpecification;
        obj['mergeStrategy'] = mergeStrategy;
    }

    /**
     * Constructs a <code>StartImportRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartImportRequest} obj Optional instance to populate.
     * @return {module:model/StartImportRequest} The populated <code>StartImportRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartImportRequest();

            if (data.hasOwnProperty('importId')) {
                obj['importId'] = ApiClient.convertToType(data['importId'], 'String');
            }
            if (data.hasOwnProperty('resourceSpecification')) {
                obj['resourceSpecification'] = StartImportRequestResourceSpecification.constructFromObject(data['resourceSpecification']);
            }
            if (data.hasOwnProperty('mergeStrategy')) {
                obj['mergeStrategy'] = ApiClient.convertToType(data['mergeStrategy'], 'String');
            }
            if (data.hasOwnProperty('filePassword')) {
                obj['filePassword'] = ApiClient.convertToType(data['filePassword'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartImportRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartImportRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartImportRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['importId'] && !(typeof data['importId'] === 'string' || data['importId'] instanceof String)) {
            throw new Error("Expected the field `importId` to be a primitive type in the JSON string but got " + data['importId']);
        }
        // validate the optional field `resourceSpecification`
        if (data['resourceSpecification']) { // data not null
          StartImportRequestResourceSpecification.validateJSON(data['resourceSpecification']);
        }
        // ensure the json data is a string
        if (data['mergeStrategy'] && !(typeof data['mergeStrategy'] === 'string' || data['mergeStrategy'] instanceof String)) {
            throw new Error("Expected the field `mergeStrategy` to be a primitive type in the JSON string but got " + data['mergeStrategy']);
        }
        // ensure the json data is a string
        if (data['filePassword'] && !(typeof data['filePassword'] === 'string' || data['filePassword'] instanceof String)) {
            throw new Error("Expected the field `filePassword` to be a primitive type in the JSON string but got " + data['filePassword']);
        }

        return true;
    }


}

StartImportRequest.RequiredProperties = ["importId", "resourceSpecification", "mergeStrategy"];

/**
 * The unique identifier for the import. It is included in the response from the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateUploadUrl.html\">CreateUploadUrl</a> operation.
 * @member {String} importId
 */
StartImportRequest.prototype['importId'] = undefined;

/**
 * @member {module:model/StartImportRequestResourceSpecification} resourceSpecification
 */
StartImportRequest.prototype['resourceSpecification'] = undefined;

/**
 * The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is <code>FailOnConflict</code> existing resources are not overwritten and the import fails.
 * @member {module:model/StartImportRequest.MergeStrategyEnum} mergeStrategy
 */
StartImportRequest.prototype['mergeStrategy'] = undefined;

/**
 * The password used to encrypt the zip archive that contains the resource definition. You should always encrypt the zip archive to protect it during transit between your site and Amazon Lex.
 * @member {String} filePassword
 */
StartImportRequest.prototype['filePassword'] = undefined;





/**
 * Allowed values for the <code>mergeStrategy</code> property.
 * @enum {String}
 * @readonly
 */
StartImportRequest['MergeStrategyEnum'] = {

    /**
     * value: "Overwrite"
     * @const
     */
    "Overwrite": "Overwrite",

    /**
     * value: "FailOnConflict"
     * @const
     */
    "FailOnConflict": "FailOnConflict",

    /**
     * value: "Append"
     * @const
     */
    "Append": "Append"
};



export default StartImportRequest;

