/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BotMember from './BotMember';
import CreateBotRequestDataPrivacy from './CreateBotRequestDataPrivacy';

/**
 * The UpdateBotRequest model module.
 * @module model/UpdateBotRequest
 * @version 2020-08-07
 */
class UpdateBotRequest {
    /**
     * Constructs a new <code>UpdateBotRequest</code>.
     * @alias module:model/UpdateBotRequest
     * @param botName {String} The new name of the bot. The name must be unique in the account that creates the bot.
     * @param roleArn {String} The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.
     * @param dataPrivacy {module:model/CreateBotRequestDataPrivacy} 
     * @param idleSessionTTLInSeconds {Number} <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
     */
    constructor(botName, roleArn, dataPrivacy, idleSessionTTLInSeconds) { 
        
        UpdateBotRequest.initialize(this, botName, roleArn, dataPrivacy, idleSessionTTLInSeconds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, botName, roleArn, dataPrivacy, idleSessionTTLInSeconds) { 
        obj['botName'] = botName;
        obj['roleArn'] = roleArn;
        obj['dataPrivacy'] = dataPrivacy;
        obj['idleSessionTTLInSeconds'] = idleSessionTTLInSeconds;
    }

    /**
     * Constructs a <code>UpdateBotRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateBotRequest} obj Optional instance to populate.
     * @return {module:model/UpdateBotRequest} The populated <code>UpdateBotRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateBotRequest();

            if (data.hasOwnProperty('botName')) {
                obj['botName'] = ApiClient.convertToType(data['botName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('dataPrivacy')) {
                obj['dataPrivacy'] = CreateBotRequestDataPrivacy.constructFromObject(data['dataPrivacy']);
            }
            if (data.hasOwnProperty('idleSessionTTLInSeconds')) {
                obj['idleSessionTTLInSeconds'] = ApiClient.convertToType(data['idleSessionTTLInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('botType')) {
                obj['botType'] = ApiClient.convertToType(data['botType'], 'String');
            }
            if (data.hasOwnProperty('botMembers')) {
                obj['botMembers'] = ApiClient.convertToType(data['botMembers'], [BotMember]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateBotRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateBotRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateBotRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['botName'] && !(typeof data['botName'] === 'string' || data['botName'] instanceof String)) {
            throw new Error("Expected the field `botName` to be a primitive type in the JSON string but got " + data['botName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['roleArn'] && !(typeof data['roleArn'] === 'string' || data['roleArn'] instanceof String)) {
            throw new Error("Expected the field `roleArn` to be a primitive type in the JSON string but got " + data['roleArn']);
        }
        // validate the optional field `dataPrivacy`
        if (data['dataPrivacy']) { // data not null
          CreateBotRequestDataPrivacy.validateJSON(data['dataPrivacy']);
        }
        // ensure the json data is a string
        if (data['botType'] && !(typeof data['botType'] === 'string' || data['botType'] instanceof String)) {
            throw new Error("Expected the field `botType` to be a primitive type in the JSON string but got " + data['botType']);
        }
        if (data['botMembers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['botMembers'])) {
                throw new Error("Expected the field `botMembers` to be an array in the JSON data but got " + data['botMembers']);
            }
            // validate the optional field `botMembers` (array)
            for (const item of data['botMembers']) {
                BotMember.validateJSON(item);
            };
        }

        return true;
    }


}

UpdateBotRequest.RequiredProperties = ["botName", "roleArn", "dataPrivacy", "idleSessionTTLInSeconds"];

/**
 * The new name of the bot. The name must be unique in the account that creates the bot.
 * @member {String} botName
 */
UpdateBotRequest.prototype['botName'] = undefined;

/**
 * A description of the bot.
 * @member {String} description
 */
UpdateBotRequest.prototype['description'] = undefined;

/**
 * The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.
 * @member {String} roleArn
 */
UpdateBotRequest.prototype['roleArn'] = undefined;

/**
 * @member {module:model/CreateBotRequestDataPrivacy} dataPrivacy
 */
UpdateBotRequest.prototype['dataPrivacy'] = undefined;

/**
 * <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
 * @member {Number} idleSessionTTLInSeconds
 */
UpdateBotRequest.prototype['idleSessionTTLInSeconds'] = undefined;

/**
 * The type of the bot to be updated.
 * @member {module:model/UpdateBotRequest.BotTypeEnum} botType
 */
UpdateBotRequest.prototype['botType'] = undefined;

/**
 * The list of bot members in the network associated with the update action.
 * @member {Array.<module:model/BotMember>} botMembers
 */
UpdateBotRequest.prototype['botMembers'] = undefined;





/**
 * Allowed values for the <code>botType</code> property.
 * @enum {String}
 * @readonly
 */
UpdateBotRequest['BotTypeEnum'] = {

    /**
     * value: "Bot"
     * @const
     */
    "Bot": "Bot",

    /**
     * value: "BotNetwork"
     * @const
     */
    "BotNetwork": "BotNetwork"
};



export default UpdateBotRequest;

