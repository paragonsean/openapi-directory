/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OverallTestResultItem model module.
 * @module model/OverallTestResultItem
 * @version 2020-08-07
 */
class OverallTestResultItem {
    /**
     * Constructs a new <code>OverallTestResultItem</code>.
     * Information about the overall results for a test execution result.
     * @alias module:model/OverallTestResultItem
     * @param multiTurnConversation {Boolean} 
     * @param totalResultCount {Number} 
     * @param endToEndResultCounts {Object} 
     */
    constructor(multiTurnConversation, totalResultCount, endToEndResultCounts) { 
        
        OverallTestResultItem.initialize(this, multiTurnConversation, totalResultCount, endToEndResultCounts);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, multiTurnConversation, totalResultCount, endToEndResultCounts) { 
        obj['multiTurnConversation'] = multiTurnConversation;
        obj['totalResultCount'] = totalResultCount;
        obj['endToEndResultCounts'] = endToEndResultCounts;
    }

    /**
     * Constructs a <code>OverallTestResultItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OverallTestResultItem} obj Optional instance to populate.
     * @return {module:model/OverallTestResultItem} The populated <code>OverallTestResultItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OverallTestResultItem();

            if (data.hasOwnProperty('multiTurnConversation')) {
                obj['multiTurnConversation'] = ApiClient.convertToType(data['multiTurnConversation'], 'Boolean');
            }
            if (data.hasOwnProperty('totalResultCount')) {
                obj['totalResultCount'] = ApiClient.convertToType(data['totalResultCount'], 'Number');
            }
            if (data.hasOwnProperty('speechTranscriptionResultCounts')) {
                obj['speechTranscriptionResultCounts'] = ApiClient.convertToType(data['speechTranscriptionResultCounts'], Object);
            }
            if (data.hasOwnProperty('endToEndResultCounts')) {
                obj['endToEndResultCounts'] = ApiClient.convertToType(data['endToEndResultCounts'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OverallTestResultItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OverallTestResultItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OverallTestResultItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `multiTurnConversation`
        if (data['multiTurnConversation']) { // data not null
          Boolean.validateJSON(data['multiTurnConversation']);
        }
        // validate the optional field `totalResultCount`
        if (data['totalResultCount']) { // data not null
          Number.validateJSON(data['totalResultCount']);
        }
        // validate the optional field `speechTranscriptionResultCounts`
        if (data['speechTranscriptionResultCounts']) { // data not null
          Object.validateJSON(data['speechTranscriptionResultCounts']);
        }
        // validate the optional field `endToEndResultCounts`
        if (data['endToEndResultCounts']) { // data not null
          Object.validateJSON(data['endToEndResultCounts']);
        }

        return true;
    }


}

OverallTestResultItem.RequiredProperties = ["multiTurnConversation", "totalResultCount", "endToEndResultCounts"];

/**
 * @member {Boolean} multiTurnConversation
 */
OverallTestResultItem.prototype['multiTurnConversation'] = undefined;

/**
 * @member {Number} totalResultCount
 */
OverallTestResultItem.prototype['totalResultCount'] = undefined;

/**
 * @member {Object} speechTranscriptionResultCounts
 */
OverallTestResultItem.prototype['speechTranscriptionResultCounts'] = undefined;

/**
 * @member {Object} endToEndResultCounts
 */
OverallTestResultItem.prototype['endToEndResultCounts'] = undefined;






export default OverallTestResultItem;

