# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_bin_by_name import AnalyticsBinByName
from openapi_server.models.analytics_interval import AnalyticsInterval
from openapi_server.models.analytics_sort_order import AnalyticsSortOrder
from openapi_server import util


class AnalyticsBinBySpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: AnalyticsBinByName=None, interval: AnalyticsInterval=None, order: AnalyticsSortOrder=None):
        """AnalyticsBinBySpecification - a model defined in OpenAPI

        :param name: The name of this AnalyticsBinBySpecification.
        :param interval: The interval of this AnalyticsBinBySpecification.
        :param order: The order of this AnalyticsBinBySpecification.
        """
        self.openapi_types = {
            'name': AnalyticsBinByName,
            'interval': AnalyticsInterval,
            'order': AnalyticsSortOrder
        }

        self.attribute_map = {
            'name': 'name',
            'interval': 'interval',
            'order': 'order'
        }

        self._name = name
        self._interval = interval
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsBinBySpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyticsBinBySpecification of this AnalyticsBinBySpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AnalyticsBinBySpecification.


        :return: The name of this AnalyticsBinBySpecification.
        :rtype: AnalyticsBinByName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyticsBinBySpecification.


        :param name: The name of this AnalyticsBinBySpecification.
        :type name: AnalyticsBinByName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def interval(self):
        """Gets the interval of this AnalyticsBinBySpecification.


        :return: The interval of this AnalyticsBinBySpecification.
        :rtype: AnalyticsInterval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this AnalyticsBinBySpecification.


        :param interval: The interval of this AnalyticsBinBySpecification.
        :type interval: AnalyticsInterval
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")

        self._interval = interval

    @property
    def order(self):
        """Gets the order of this AnalyticsBinBySpecification.


        :return: The order of this AnalyticsBinBySpecification.
        :rtype: AnalyticsSortOrder
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this AnalyticsBinBySpecification.


        :param order: The order of this AnalyticsBinBySpecification.
        :type order: AnalyticsSortOrder
        """

        self._order = order
