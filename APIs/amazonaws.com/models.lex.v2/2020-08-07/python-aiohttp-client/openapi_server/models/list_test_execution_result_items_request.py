# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_test_execution_result_items_request_result_filter_by import ListTestExecutionResultItemsRequestResultFilterBy
from openapi_server import util


class ListTestExecutionResultItemsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, result_filter_by: ListTestExecutionResultItemsRequestResultFilterBy=None, max_results: int=None, next_token: str=None):
        """ListTestExecutionResultItemsRequest - a model defined in OpenAPI

        :param result_filter_by: The result_filter_by of this ListTestExecutionResultItemsRequest.
        :param max_results: The max_results of this ListTestExecutionResultItemsRequest.
        :param next_token: The next_token of this ListTestExecutionResultItemsRequest.
        """
        self.openapi_types = {
            'result_filter_by': ListTestExecutionResultItemsRequestResultFilterBy,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'result_filter_by': 'resultFilterBy',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._result_filter_by = result_filter_by
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTestExecutionResultItemsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTestExecutionResultItems_request of this ListTestExecutionResultItemsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result_filter_by(self):
        """Gets the result_filter_by of this ListTestExecutionResultItemsRequest.


        :return: The result_filter_by of this ListTestExecutionResultItemsRequest.
        :rtype: ListTestExecutionResultItemsRequestResultFilterBy
        """
        return self._result_filter_by

    @result_filter_by.setter
    def result_filter_by(self, result_filter_by):
        """Sets the result_filter_by of this ListTestExecutionResultItemsRequest.


        :param result_filter_by: The result_filter_by of this ListTestExecutionResultItemsRequest.
        :type result_filter_by: ListTestExecutionResultItemsRequestResultFilterBy
        """
        if result_filter_by is None:
            raise ValueError("Invalid value for `result_filter_by`, must not be `None`")

        self._result_filter_by = result_filter_by

    @property
    def max_results(self):
        """Gets the max_results of this ListTestExecutionResultItemsRequest.

        The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.

        :return: The max_results of this ListTestExecutionResultItemsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListTestExecutionResultItemsRequest.

        The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.

        :param max_results: The max_results of this ListTestExecutionResultItemsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListTestExecutionResultItemsRequest.

        If the response from the <code>ListTestExecutionResultItems</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.

        :return: The next_token of this ListTestExecutionResultItemsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListTestExecutionResultItemsRequest.

        If the response from the <code>ListTestExecutionResultItems</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.

        :param next_token: The next_token of this ListTestExecutionResultItemsRequest.
        :type next_token: str
        """

        self._next_token = next_token
