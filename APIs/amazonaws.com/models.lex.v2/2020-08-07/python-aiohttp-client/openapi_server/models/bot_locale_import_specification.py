# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.voice_settings import VoiceSettings
from openapi_server import util


class BotLocaleImportSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_id: str=None, bot_version: str=None, locale_id: str=None, nlu_intent_confidence_threshold: float=None, voice_settings: VoiceSettings=None):
        """BotLocaleImportSpecification - a model defined in OpenAPI

        :param bot_id: The bot_id of this BotLocaleImportSpecification.
        :param bot_version: The bot_version of this BotLocaleImportSpecification.
        :param locale_id: The locale_id of this BotLocaleImportSpecification.
        :param nlu_intent_confidence_threshold: The nlu_intent_confidence_threshold of this BotLocaleImportSpecification.
        :param voice_settings: The voice_settings of this BotLocaleImportSpecification.
        """
        self.openapi_types = {
            'bot_id': str,
            'bot_version': str,
            'locale_id': str,
            'nlu_intent_confidence_threshold': float,
            'voice_settings': VoiceSettings
        }

        self.attribute_map = {
            'bot_id': 'botId',
            'bot_version': 'botVersion',
            'locale_id': 'localeId',
            'nlu_intent_confidence_threshold': 'nluIntentConfidenceThreshold',
            'voice_settings': 'voiceSettings'
        }

        self._bot_id = bot_id
        self._bot_version = bot_version
        self._locale_id = locale_id
        self._nlu_intent_confidence_threshold = nlu_intent_confidence_threshold
        self._voice_settings = voice_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BotLocaleImportSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BotLocaleImportSpecification of this BotLocaleImportSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_id(self):
        """Gets the bot_id of this BotLocaleImportSpecification.


        :return: The bot_id of this BotLocaleImportSpecification.
        :rtype: str
        """
        return self._bot_id

    @bot_id.setter
    def bot_id(self, bot_id):
        """Sets the bot_id of this BotLocaleImportSpecification.


        :param bot_id: The bot_id of this BotLocaleImportSpecification.
        :type bot_id: str
        """
        if bot_id is None:
            raise ValueError("Invalid value for `bot_id`, must not be `None`")

        self._bot_id = bot_id

    @property
    def bot_version(self):
        """Gets the bot_version of this BotLocaleImportSpecification.


        :return: The bot_version of this BotLocaleImportSpecification.
        :rtype: str
        """
        return self._bot_version

    @bot_version.setter
    def bot_version(self, bot_version):
        """Sets the bot_version of this BotLocaleImportSpecification.


        :param bot_version: The bot_version of this BotLocaleImportSpecification.
        :type bot_version: str
        """
        if bot_version is None:
            raise ValueError("Invalid value for `bot_version`, must not be `None`")

        self._bot_version = bot_version

    @property
    def locale_id(self):
        """Gets the locale_id of this BotLocaleImportSpecification.


        :return: The locale_id of this BotLocaleImportSpecification.
        :rtype: str
        """
        return self._locale_id

    @locale_id.setter
    def locale_id(self, locale_id):
        """Sets the locale_id of this BotLocaleImportSpecification.


        :param locale_id: The locale_id of this BotLocaleImportSpecification.
        :type locale_id: str
        """
        if locale_id is None:
            raise ValueError("Invalid value for `locale_id`, must not be `None`")

        self._locale_id = locale_id

    @property
    def nlu_intent_confidence_threshold(self):
        """Gets the nlu_intent_confidence_threshold of this BotLocaleImportSpecification.


        :return: The nlu_intent_confidence_threshold of this BotLocaleImportSpecification.
        :rtype: float
        """
        return self._nlu_intent_confidence_threshold

    @nlu_intent_confidence_threshold.setter
    def nlu_intent_confidence_threshold(self, nlu_intent_confidence_threshold):
        """Sets the nlu_intent_confidence_threshold of this BotLocaleImportSpecification.


        :param nlu_intent_confidence_threshold: The nlu_intent_confidence_threshold of this BotLocaleImportSpecification.
        :type nlu_intent_confidence_threshold: float
        """

        self._nlu_intent_confidence_threshold = nlu_intent_confidence_threshold

    @property
    def voice_settings(self):
        """Gets the voice_settings of this BotLocaleImportSpecification.


        :return: The voice_settings of this BotLocaleImportSpecification.
        :rtype: VoiceSettings
        """
        return self._voice_settings

    @voice_settings.setter
    def voice_settings(self, voice_settings):
        """Sets the voice_settings of this BotLocaleImportSpecification.


        :param voice_settings: The voice_settings of this BotLocaleImportSpecification.
        :type voice_settings: VoiceSettings
        """

        self._voice_settings = voice_settings
