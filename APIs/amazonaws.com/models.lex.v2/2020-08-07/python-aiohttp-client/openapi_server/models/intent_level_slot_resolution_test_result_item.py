# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IntentLevelSlotResolutionTestResultItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, intent_name: str=None, multi_turn_conversation: bool=None, slot_resolution_results: List=None):
        """IntentLevelSlotResolutionTestResultItem - a model defined in OpenAPI

        :param intent_name: The intent_name of this IntentLevelSlotResolutionTestResultItem.
        :param multi_turn_conversation: The multi_turn_conversation of this IntentLevelSlotResolutionTestResultItem.
        :param slot_resolution_results: The slot_resolution_results of this IntentLevelSlotResolutionTestResultItem.
        """
        self.openapi_types = {
            'intent_name': str,
            'multi_turn_conversation': bool,
            'slot_resolution_results': List
        }

        self.attribute_map = {
            'intent_name': 'intentName',
            'multi_turn_conversation': 'multiTurnConversation',
            'slot_resolution_results': 'slotResolutionResults'
        }

        self._intent_name = intent_name
        self._multi_turn_conversation = multi_turn_conversation
        self._slot_resolution_results = slot_resolution_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntentLevelSlotResolutionTestResultItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntentLevelSlotResolutionTestResultItem of this IntentLevelSlotResolutionTestResultItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def intent_name(self):
        """Gets the intent_name of this IntentLevelSlotResolutionTestResultItem.


        :return: The intent_name of this IntentLevelSlotResolutionTestResultItem.
        :rtype: str
        """
        return self._intent_name

    @intent_name.setter
    def intent_name(self, intent_name):
        """Sets the intent_name of this IntentLevelSlotResolutionTestResultItem.


        :param intent_name: The intent_name of this IntentLevelSlotResolutionTestResultItem.
        :type intent_name: str
        """
        if intent_name is None:
            raise ValueError("Invalid value for `intent_name`, must not be `None`")

        self._intent_name = intent_name

    @property
    def multi_turn_conversation(self):
        """Gets the multi_turn_conversation of this IntentLevelSlotResolutionTestResultItem.


        :return: The multi_turn_conversation of this IntentLevelSlotResolutionTestResultItem.
        :rtype: bool
        """
        return self._multi_turn_conversation

    @multi_turn_conversation.setter
    def multi_turn_conversation(self, multi_turn_conversation):
        """Sets the multi_turn_conversation of this IntentLevelSlotResolutionTestResultItem.


        :param multi_turn_conversation: The multi_turn_conversation of this IntentLevelSlotResolutionTestResultItem.
        :type multi_turn_conversation: bool
        """
        if multi_turn_conversation is None:
            raise ValueError("Invalid value for `multi_turn_conversation`, must not be `None`")

        self._multi_turn_conversation = multi_turn_conversation

    @property
    def slot_resolution_results(self):
        """Gets the slot_resolution_results of this IntentLevelSlotResolutionTestResultItem.


        :return: The slot_resolution_results of this IntentLevelSlotResolutionTestResultItem.
        :rtype: List
        """
        return self._slot_resolution_results

    @slot_resolution_results.setter
    def slot_resolution_results(self, slot_resolution_results):
        """Sets the slot_resolution_results of this IntentLevelSlotResolutionTestResultItem.


        :param slot_resolution_results: The slot_resolution_results of this IntentLevelSlotResolutionTestResultItem.
        :type slot_resolution_results: List
        """
        if slot_resolution_results is None:
            raise ValueError("Invalid value for `slot_resolution_results`, must not be `None`")

        self._slot_resolution_results = slot_resolution_results
