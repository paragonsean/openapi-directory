# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.test_result_match_status import TestResultMatchStatus
from openapi_server import util


class ConversationLevelTestResultItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conversation_id: str=None, end_to_end_result: TestResultMatchStatus=None, speech_transcription_result: TestResultMatchStatus=None, intent_classification_results: List=None, slot_resolution_results: List=None):
        """ConversationLevelTestResultItem - a model defined in OpenAPI

        :param conversation_id: The conversation_id of this ConversationLevelTestResultItem.
        :param end_to_end_result: The end_to_end_result of this ConversationLevelTestResultItem.
        :param speech_transcription_result: The speech_transcription_result of this ConversationLevelTestResultItem.
        :param intent_classification_results: The intent_classification_results of this ConversationLevelTestResultItem.
        :param slot_resolution_results: The slot_resolution_results of this ConversationLevelTestResultItem.
        """
        self.openapi_types = {
            'conversation_id': str,
            'end_to_end_result': TestResultMatchStatus,
            'speech_transcription_result': TestResultMatchStatus,
            'intent_classification_results': List,
            'slot_resolution_results': List
        }

        self.attribute_map = {
            'conversation_id': 'conversationId',
            'end_to_end_result': 'endToEndResult',
            'speech_transcription_result': 'speechTranscriptionResult',
            'intent_classification_results': 'intentClassificationResults',
            'slot_resolution_results': 'slotResolutionResults'
        }

        self._conversation_id = conversation_id
        self._end_to_end_result = end_to_end_result
        self._speech_transcription_result = speech_transcription_result
        self._intent_classification_results = intent_classification_results
        self._slot_resolution_results = slot_resolution_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationLevelTestResultItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConversationLevelTestResultItem of this ConversationLevelTestResultItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conversation_id(self):
        """Gets the conversation_id of this ConversationLevelTestResultItem.


        :return: The conversation_id of this ConversationLevelTestResultItem.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this ConversationLevelTestResultItem.


        :param conversation_id: The conversation_id of this ConversationLevelTestResultItem.
        :type conversation_id: str
        """
        if conversation_id is None:
            raise ValueError("Invalid value for `conversation_id`, must not be `None`")

        self._conversation_id = conversation_id

    @property
    def end_to_end_result(self):
        """Gets the end_to_end_result of this ConversationLevelTestResultItem.


        :return: The end_to_end_result of this ConversationLevelTestResultItem.
        :rtype: TestResultMatchStatus
        """
        return self._end_to_end_result

    @end_to_end_result.setter
    def end_to_end_result(self, end_to_end_result):
        """Sets the end_to_end_result of this ConversationLevelTestResultItem.


        :param end_to_end_result: The end_to_end_result of this ConversationLevelTestResultItem.
        :type end_to_end_result: TestResultMatchStatus
        """
        if end_to_end_result is None:
            raise ValueError("Invalid value for `end_to_end_result`, must not be `None`")

        self._end_to_end_result = end_to_end_result

    @property
    def speech_transcription_result(self):
        """Gets the speech_transcription_result of this ConversationLevelTestResultItem.


        :return: The speech_transcription_result of this ConversationLevelTestResultItem.
        :rtype: TestResultMatchStatus
        """
        return self._speech_transcription_result

    @speech_transcription_result.setter
    def speech_transcription_result(self, speech_transcription_result):
        """Sets the speech_transcription_result of this ConversationLevelTestResultItem.


        :param speech_transcription_result: The speech_transcription_result of this ConversationLevelTestResultItem.
        :type speech_transcription_result: TestResultMatchStatus
        """

        self._speech_transcription_result = speech_transcription_result

    @property
    def intent_classification_results(self):
        """Gets the intent_classification_results of this ConversationLevelTestResultItem.


        :return: The intent_classification_results of this ConversationLevelTestResultItem.
        :rtype: List
        """
        return self._intent_classification_results

    @intent_classification_results.setter
    def intent_classification_results(self, intent_classification_results):
        """Sets the intent_classification_results of this ConversationLevelTestResultItem.


        :param intent_classification_results: The intent_classification_results of this ConversationLevelTestResultItem.
        :type intent_classification_results: List
        """
        if intent_classification_results is None:
            raise ValueError("Invalid value for `intent_classification_results`, must not be `None`")

        self._intent_classification_results = intent_classification_results

    @property
    def slot_resolution_results(self):
        """Gets the slot_resolution_results of this ConversationLevelTestResultItem.


        :return: The slot_resolution_results of this ConversationLevelTestResultItem.
        :rtype: List
        """
        return self._slot_resolution_results

    @slot_resolution_results.setter
    def slot_resolution_results(self, slot_resolution_results):
        """Sets the slot_resolution_results of this ConversationLevelTestResultItem.


        :param slot_resolution_results: The slot_resolution_results of this ConversationLevelTestResultItem.
        :type slot_resolution_results: List
        """
        if slot_resolution_results is None:
            raise ValueError("Invalid value for `slot_resolution_results`, must not be `None`")

        self._slot_resolution_results = slot_resolution_results
