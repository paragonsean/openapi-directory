# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_test_execution_request_target import StartTestExecutionRequestTarget
from openapi_server import util


class StartTestExecutionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target: StartTestExecutionRequestTarget=None, api_mode: str=None, test_execution_modality: str=None):
        """StartTestExecutionRequest - a model defined in OpenAPI

        :param target: The target of this StartTestExecutionRequest.
        :param api_mode: The api_mode of this StartTestExecutionRequest.
        :param test_execution_modality: The test_execution_modality of this StartTestExecutionRequest.
        """
        self.openapi_types = {
            'target': StartTestExecutionRequestTarget,
            'api_mode': str,
            'test_execution_modality': str
        }

        self.attribute_map = {
            'target': 'target',
            'api_mode': 'apiMode',
            'test_execution_modality': 'testExecutionModality'
        }

        self._target = target
        self._api_mode = api_mode
        self._test_execution_modality = test_execution_modality

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTestExecutionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartTestExecution_request of this StartTestExecutionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target(self):
        """Gets the target of this StartTestExecutionRequest.


        :return: The target of this StartTestExecutionRequest.
        :rtype: StartTestExecutionRequestTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this StartTestExecutionRequest.


        :param target: The target of this StartTestExecutionRequest.
        :type target: StartTestExecutionRequestTarget
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def api_mode(self):
        """Gets the api_mode of this StartTestExecutionRequest.

        Indicates whether we use streaming or non-streaming APIs for the test set execution. For streaming, StartConversation Runtime API is used. Whereas, for non-streaming, RecognizeUtterance and RecognizeText Amazon Lex Runtime API are used.

        :return: The api_mode of this StartTestExecutionRequest.
        :rtype: str
        """
        return self._api_mode

    @api_mode.setter
    def api_mode(self, api_mode):
        """Sets the api_mode of this StartTestExecutionRequest.

        Indicates whether we use streaming or non-streaming APIs for the test set execution. For streaming, StartConversation Runtime API is used. Whereas, for non-streaming, RecognizeUtterance and RecognizeText Amazon Lex Runtime API are used.

        :param api_mode: The api_mode of this StartTestExecutionRequest.
        :type api_mode: str
        """
        allowed_values = ["Streaming", "NonStreaming"]  # noqa: E501
        if api_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `api_mode` ({0}), must be one of {1}"
                .format(api_mode, allowed_values)
            )

        self._api_mode = api_mode

    @property
    def test_execution_modality(self):
        """Gets the test_execution_modality of this StartTestExecutionRequest.

        Indicates whether audio or text is used.

        :return: The test_execution_modality of this StartTestExecutionRequest.
        :rtype: str
        """
        return self._test_execution_modality

    @test_execution_modality.setter
    def test_execution_modality(self, test_execution_modality):
        """Sets the test_execution_modality of this StartTestExecutionRequest.

        Indicates whether audio or text is used.

        :param test_execution_modality: The test_execution_modality of this StartTestExecutionRequest.
        :type test_execution_modality: str
        """
        allowed_values = ["Text", "Audio"]  # noqa: E501
        if test_execution_modality not in allowed_values:
            raise ValueError(
                "Invalid value for `test_execution_modality` ({0}), must be one of {1}"
                .format(test_execution_modality, allowed_values)
            )

        self._test_execution_modality = test_execution_modality
