# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubSlotTypeComposition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, slot_type_id: str=None):
        """SubSlotTypeComposition - a model defined in OpenAPI

        :param name: The name of this SubSlotTypeComposition.
        :param slot_type_id: The slot_type_id of this SubSlotTypeComposition.
        """
        self.openapi_types = {
            'name': str,
            'slot_type_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'slot_type_id': 'slotTypeId'
        }

        self._name = name
        self._slot_type_id = slot_type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubSlotTypeComposition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubSlotTypeComposition of this SubSlotTypeComposition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SubSlotTypeComposition.


        :return: The name of this SubSlotTypeComposition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubSlotTypeComposition.


        :param name: The name of this SubSlotTypeComposition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def slot_type_id(self):
        """Gets the slot_type_id of this SubSlotTypeComposition.


        :return: The slot_type_id of this SubSlotTypeComposition.
        :rtype: str
        """
        return self._slot_type_id

    @slot_type_id.setter
    def slot_type_id(self, slot_type_id):
        """Sets the slot_type_id of this SubSlotTypeComposition.


        :param slot_type_id: The slot_type_id of this SubSlotTypeComposition.
        :type slot_type_id: str
        """
        if slot_type_id is None:
            raise ValueError("Invalid value for `slot_type_id`, must not be `None`")

        self._slot_type_id = slot_type_id
