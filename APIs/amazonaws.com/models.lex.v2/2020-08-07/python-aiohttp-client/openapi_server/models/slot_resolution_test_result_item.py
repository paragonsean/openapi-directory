# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.slot_resolution_test_result_item_result_counts import SlotResolutionTestResultItemResultCounts
from openapi_server import util


class SlotResolutionTestResultItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, slot_name: str=None, result_counts: SlotResolutionTestResultItemResultCounts=None):
        """SlotResolutionTestResultItem - a model defined in OpenAPI

        :param slot_name: The slot_name of this SlotResolutionTestResultItem.
        :param result_counts: The result_counts of this SlotResolutionTestResultItem.
        """
        self.openapi_types = {
            'slot_name': str,
            'result_counts': SlotResolutionTestResultItemResultCounts
        }

        self.attribute_map = {
            'slot_name': 'slotName',
            'result_counts': 'resultCounts'
        }

        self._slot_name = slot_name
        self._result_counts = result_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlotResolutionTestResultItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlotResolutionTestResultItem of this SlotResolutionTestResultItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def slot_name(self):
        """Gets the slot_name of this SlotResolutionTestResultItem.


        :return: The slot_name of this SlotResolutionTestResultItem.
        :rtype: str
        """
        return self._slot_name

    @slot_name.setter
    def slot_name(self, slot_name):
        """Sets the slot_name of this SlotResolutionTestResultItem.


        :param slot_name: The slot_name of this SlotResolutionTestResultItem.
        :type slot_name: str
        """
        if slot_name is None:
            raise ValueError("Invalid value for `slot_name`, must not be `None`")

        self._slot_name = slot_name

    @property
    def result_counts(self):
        """Gets the result_counts of this SlotResolutionTestResultItem.


        :return: The result_counts of this SlotResolutionTestResultItem.
        :rtype: SlotResolutionTestResultItemResultCounts
        """
        return self._result_counts

    @result_counts.setter
    def result_counts(self, result_counts):
        """Sets the result_counts of this SlotResolutionTestResultItem.


        :param result_counts: The result_counts of this SlotResolutionTestResultItem.
        :type result_counts: SlotResolutionTestResultItemResultCounts
        """
        if result_counts is None:
            raise ValueError("Invalid value for `result_counts`, must not be `None`")

        self._result_counts = result_counts
