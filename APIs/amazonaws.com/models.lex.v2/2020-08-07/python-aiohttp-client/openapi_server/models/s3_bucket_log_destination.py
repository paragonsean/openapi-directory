# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3BucketLogDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kms_key_arn: str=None, s3_bucket_arn: str=None, log_prefix: str=None):
        """S3BucketLogDestination - a model defined in OpenAPI

        :param kms_key_arn: The kms_key_arn of this S3BucketLogDestination.
        :param s3_bucket_arn: The s3_bucket_arn of this S3BucketLogDestination.
        :param log_prefix: The log_prefix of this S3BucketLogDestination.
        """
        self.openapi_types = {
            'kms_key_arn': str,
            's3_bucket_arn': str,
            'log_prefix': str
        }

        self.attribute_map = {
            'kms_key_arn': 'kmsKeyArn',
            's3_bucket_arn': 's3BucketArn',
            'log_prefix': 'logPrefix'
        }

        self._kms_key_arn = kms_key_arn
        self._s3_bucket_arn = s3_bucket_arn
        self._log_prefix = log_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3BucketLogDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3BucketLogDestination of this S3BucketLogDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this S3BucketLogDestination.


        :return: The kms_key_arn of this S3BucketLogDestination.
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this S3BucketLogDestination.


        :param kms_key_arn: The kms_key_arn of this S3BucketLogDestination.
        :type kms_key_arn: str
        """

        self._kms_key_arn = kms_key_arn

    @property
    def s3_bucket_arn(self):
        """Gets the s3_bucket_arn of this S3BucketLogDestination.


        :return: The s3_bucket_arn of this S3BucketLogDestination.
        :rtype: str
        """
        return self._s3_bucket_arn

    @s3_bucket_arn.setter
    def s3_bucket_arn(self, s3_bucket_arn):
        """Sets the s3_bucket_arn of this S3BucketLogDestination.


        :param s3_bucket_arn: The s3_bucket_arn of this S3BucketLogDestination.
        :type s3_bucket_arn: str
        """
        if s3_bucket_arn is None:
            raise ValueError("Invalid value for `s3_bucket_arn`, must not be `None`")

        self._s3_bucket_arn = s3_bucket_arn

    @property
    def log_prefix(self):
        """Gets the log_prefix of this S3BucketLogDestination.


        :return: The log_prefix of this S3BucketLogDestination.
        :rtype: str
        """
        return self._log_prefix

    @log_prefix.setter
    def log_prefix(self, log_prefix):
        """Sets the log_prefix of this S3BucketLogDestination.


        :param log_prefix: The log_prefix of this S3BucketLogDestination.
        :type log_prefix: str
        """
        if log_prefix is None:
            raise ValueError("Invalid value for `log_prefix`, must not be `None`")

        self._log_prefix = log_prefix
