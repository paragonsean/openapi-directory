# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_intent_request_dialog_code_hook import CreateIntentRequestDialogCodeHook
from openapi_server.models.create_intent_request_fulfillment_code_hook import CreateIntentRequestFulfillmentCodeHook
from openapi_server.models.create_intent_request_initial_response_setting import CreateIntentRequestInitialResponseSetting
from openapi_server.models.create_intent_request_intent_closing_setting import CreateIntentRequestIntentClosingSetting
from openapi_server.models.create_intent_request_intent_confirmation_setting import CreateIntentRequestIntentConfirmationSetting
from openapi_server.models.create_intent_request_kendra_configuration import CreateIntentRequestKendraConfiguration
from openapi_server.models.input_context import InputContext
from openapi_server.models.output_context import OutputContext
from openapi_server.models.sample_utterance import SampleUtterance
import re
from openapi_server import util


class CreateIntentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, intent_name: str=None, description: str=None, parent_intent_signature: str=None, sample_utterances: List[SampleUtterance]=None, dialog_code_hook: CreateIntentRequestDialogCodeHook=None, fulfillment_code_hook: CreateIntentRequestFulfillmentCodeHook=None, intent_confirmation_setting: CreateIntentRequestIntentConfirmationSetting=None, intent_closing_setting: CreateIntentRequestIntentClosingSetting=None, input_contexts: List[InputContext]=None, output_contexts: List[OutputContext]=None, kendra_configuration: CreateIntentRequestKendraConfiguration=None, initial_response_setting: CreateIntentRequestInitialResponseSetting=None):
        """CreateIntentRequest - a model defined in OpenAPI

        :param intent_name: The intent_name of this CreateIntentRequest.
        :param description: The description of this CreateIntentRequest.
        :param parent_intent_signature: The parent_intent_signature of this CreateIntentRequest.
        :param sample_utterances: The sample_utterances of this CreateIntentRequest.
        :param dialog_code_hook: The dialog_code_hook of this CreateIntentRequest.
        :param fulfillment_code_hook: The fulfillment_code_hook of this CreateIntentRequest.
        :param intent_confirmation_setting: The intent_confirmation_setting of this CreateIntentRequest.
        :param intent_closing_setting: The intent_closing_setting of this CreateIntentRequest.
        :param input_contexts: The input_contexts of this CreateIntentRequest.
        :param output_contexts: The output_contexts of this CreateIntentRequest.
        :param kendra_configuration: The kendra_configuration of this CreateIntentRequest.
        :param initial_response_setting: The initial_response_setting of this CreateIntentRequest.
        """
        self.openapi_types = {
            'intent_name': str,
            'description': str,
            'parent_intent_signature': str,
            'sample_utterances': List[SampleUtterance],
            'dialog_code_hook': CreateIntentRequestDialogCodeHook,
            'fulfillment_code_hook': CreateIntentRequestFulfillmentCodeHook,
            'intent_confirmation_setting': CreateIntentRequestIntentConfirmationSetting,
            'intent_closing_setting': CreateIntentRequestIntentClosingSetting,
            'input_contexts': List[InputContext],
            'output_contexts': List[OutputContext],
            'kendra_configuration': CreateIntentRequestKendraConfiguration,
            'initial_response_setting': CreateIntentRequestInitialResponseSetting
        }

        self.attribute_map = {
            'intent_name': 'intentName',
            'description': 'description',
            'parent_intent_signature': 'parentIntentSignature',
            'sample_utterances': 'sampleUtterances',
            'dialog_code_hook': 'dialogCodeHook',
            'fulfillment_code_hook': 'fulfillmentCodeHook',
            'intent_confirmation_setting': 'intentConfirmationSetting',
            'intent_closing_setting': 'intentClosingSetting',
            'input_contexts': 'inputContexts',
            'output_contexts': 'outputContexts',
            'kendra_configuration': 'kendraConfiguration',
            'initial_response_setting': 'initialResponseSetting'
        }

        self._intent_name = intent_name
        self._description = description
        self._parent_intent_signature = parent_intent_signature
        self._sample_utterances = sample_utterances
        self._dialog_code_hook = dialog_code_hook
        self._fulfillment_code_hook = fulfillment_code_hook
        self._intent_confirmation_setting = intent_confirmation_setting
        self._intent_closing_setting = intent_closing_setting
        self._input_contexts = input_contexts
        self._output_contexts = output_contexts
        self._kendra_configuration = kendra_configuration
        self._initial_response_setting = initial_response_setting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateIntentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateIntent_request of this CreateIntentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def intent_name(self):
        """Gets the intent_name of this CreateIntentRequest.

        The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.

        :return: The intent_name of this CreateIntentRequest.
        :rtype: str
        """
        return self._intent_name

    @intent_name.setter
    def intent_name(self, intent_name):
        """Sets the intent_name of this CreateIntentRequest.

        The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.

        :param intent_name: The intent_name of this CreateIntentRequest.
        :type intent_name: str
        """
        if intent_name is None:
            raise ValueError("Invalid value for `intent_name`, must not be `None`")
        if intent_name is not None and len(intent_name) > 100:
            raise ValueError("Invalid value for `intent_name`, length must be less than or equal to `100`")
        if intent_name is not None and len(intent_name) < 1:
            raise ValueError("Invalid value for `intent_name`, length must be greater than or equal to `1`")
        if intent_name is not None and not re.search(r'^([0-9a-zA-Z][_-]?){1,100}$', intent_name):
            raise ValueError("Invalid value for `intent_name`, must be a follow pattern or equal to `/^([0-9a-zA-Z][_-]?){1,100}$/`")

        self._intent_name = intent_name

    @property
    def description(self):
        """Gets the description of this CreateIntentRequest.

        A description of the intent. Use the description to help identify the intent in lists.

        :return: The description of this CreateIntentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateIntentRequest.

        A description of the intent. Use the description to help identify the intent in lists.

        :param description: The description of this CreateIntentRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def parent_intent_signature(self):
        """Gets the parent_intent_signature of this CreateIntentRequest.

        A unique identifier for the built-in intent to base this intent on.

        :return: The parent_intent_signature of this CreateIntentRequest.
        :rtype: str
        """
        return self._parent_intent_signature

    @parent_intent_signature.setter
    def parent_intent_signature(self, parent_intent_signature):
        """Sets the parent_intent_signature of this CreateIntentRequest.

        A unique identifier for the built-in intent to base this intent on.

        :param parent_intent_signature: The parent_intent_signature of this CreateIntentRequest.
        :type parent_intent_signature: str
        """

        self._parent_intent_signature = parent_intent_signature

    @property
    def sample_utterances(self):
        """Gets the sample_utterances of this CreateIntentRequest.

        <p>An array of strings that a user might say to signal the intent. For example, \"I want a pizza\", or \"I want a {PizzaSize} pizza\". </p> <p>In an utterance, slot names are enclosed in curly braces (\"{\", \"}\") to indicate where they should be displayed in the utterance shown to the user.. </p>

        :return: The sample_utterances of this CreateIntentRequest.
        :rtype: List[SampleUtterance]
        """
        return self._sample_utterances

    @sample_utterances.setter
    def sample_utterances(self, sample_utterances):
        """Sets the sample_utterances of this CreateIntentRequest.

        <p>An array of strings that a user might say to signal the intent. For example, \"I want a pizza\", or \"I want a {PizzaSize} pizza\". </p> <p>In an utterance, slot names are enclosed in curly braces (\"{\", \"}\") to indicate where they should be displayed in the utterance shown to the user.. </p>

        :param sample_utterances: The sample_utterances of this CreateIntentRequest.
        :type sample_utterances: List[SampleUtterance]
        """

        self._sample_utterances = sample_utterances

    @property
    def dialog_code_hook(self):
        """Gets the dialog_code_hook of this CreateIntentRequest.


        :return: The dialog_code_hook of this CreateIntentRequest.
        :rtype: CreateIntentRequestDialogCodeHook
        """
        return self._dialog_code_hook

    @dialog_code_hook.setter
    def dialog_code_hook(self, dialog_code_hook):
        """Sets the dialog_code_hook of this CreateIntentRequest.


        :param dialog_code_hook: The dialog_code_hook of this CreateIntentRequest.
        :type dialog_code_hook: CreateIntentRequestDialogCodeHook
        """

        self._dialog_code_hook = dialog_code_hook

    @property
    def fulfillment_code_hook(self):
        """Gets the fulfillment_code_hook of this CreateIntentRequest.


        :return: The fulfillment_code_hook of this CreateIntentRequest.
        :rtype: CreateIntentRequestFulfillmentCodeHook
        """
        return self._fulfillment_code_hook

    @fulfillment_code_hook.setter
    def fulfillment_code_hook(self, fulfillment_code_hook):
        """Sets the fulfillment_code_hook of this CreateIntentRequest.


        :param fulfillment_code_hook: The fulfillment_code_hook of this CreateIntentRequest.
        :type fulfillment_code_hook: CreateIntentRequestFulfillmentCodeHook
        """

        self._fulfillment_code_hook = fulfillment_code_hook

    @property
    def intent_confirmation_setting(self):
        """Gets the intent_confirmation_setting of this CreateIntentRequest.


        :return: The intent_confirmation_setting of this CreateIntentRequest.
        :rtype: CreateIntentRequestIntentConfirmationSetting
        """
        return self._intent_confirmation_setting

    @intent_confirmation_setting.setter
    def intent_confirmation_setting(self, intent_confirmation_setting):
        """Sets the intent_confirmation_setting of this CreateIntentRequest.


        :param intent_confirmation_setting: The intent_confirmation_setting of this CreateIntentRequest.
        :type intent_confirmation_setting: CreateIntentRequestIntentConfirmationSetting
        """

        self._intent_confirmation_setting = intent_confirmation_setting

    @property
    def intent_closing_setting(self):
        """Gets the intent_closing_setting of this CreateIntentRequest.


        :return: The intent_closing_setting of this CreateIntentRequest.
        :rtype: CreateIntentRequestIntentClosingSetting
        """
        return self._intent_closing_setting

    @intent_closing_setting.setter
    def intent_closing_setting(self, intent_closing_setting):
        """Sets the intent_closing_setting of this CreateIntentRequest.


        :param intent_closing_setting: The intent_closing_setting of this CreateIntentRequest.
        :type intent_closing_setting: CreateIntentRequestIntentClosingSetting
        """

        self._intent_closing_setting = intent_closing_setting

    @property
    def input_contexts(self):
        """Gets the input_contexts of this CreateIntentRequest.

        <p>A list of contexts that must be active for this intent to be considered by Amazon Lex.</p> <p>When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent.</p> <p>A context can be automatically activated using the <code>outputContexts</code> property or it can be set at runtime.</p> <p> For example, if there are two intents with different input contexts that respond to the same utterances, only the intent with the active context will respond.</p> <p>An intent may have up to 5 input contexts. If an intent has multiple input contexts, all of the contexts must be active to consider the intent.</p>

        :return: The input_contexts of this CreateIntentRequest.
        :rtype: List[InputContext]
        """
        return self._input_contexts

    @input_contexts.setter
    def input_contexts(self, input_contexts):
        """Sets the input_contexts of this CreateIntentRequest.

        <p>A list of contexts that must be active for this intent to be considered by Amazon Lex.</p> <p>When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent.</p> <p>A context can be automatically activated using the <code>outputContexts</code> property or it can be set at runtime.</p> <p> For example, if there are two intents with different input contexts that respond to the same utterances, only the intent with the active context will respond.</p> <p>An intent may have up to 5 input contexts. If an intent has multiple input contexts, all of the contexts must be active to consider the intent.</p>

        :param input_contexts: The input_contexts of this CreateIntentRequest.
        :type input_contexts: List[InputContext]
        """
        if input_contexts is not None and len(input_contexts) > 5:
            raise ValueError("Invalid value for `input_contexts`, number of items must be less than or equal to `5`")
        if input_contexts is not None and len(input_contexts) < 0:
            raise ValueError("Invalid value for `input_contexts`, number of items must be greater than or equal to `0`")

        self._input_contexts = input_contexts

    @property
    def output_contexts(self):
        """Gets the output_contexts of this CreateIntentRequest.

        <p>A lists of contexts that the intent activates when it is fulfilled.</p> <p>You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. </p> <p>When you use the <code>outputContextsList</code> property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active.</p>

        :return: The output_contexts of this CreateIntentRequest.
        :rtype: List[OutputContext]
        """
        return self._output_contexts

    @output_contexts.setter
    def output_contexts(self, output_contexts):
        """Sets the output_contexts of this CreateIntentRequest.

        <p>A lists of contexts that the intent activates when it is fulfilled.</p> <p>You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. </p> <p>When you use the <code>outputContextsList</code> property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active.</p>

        :param output_contexts: The output_contexts of this CreateIntentRequest.
        :type output_contexts: List[OutputContext]
        """
        if output_contexts is not None and len(output_contexts) > 10:
            raise ValueError("Invalid value for `output_contexts`, number of items must be less than or equal to `10`")
        if output_contexts is not None and len(output_contexts) < 0:
            raise ValueError("Invalid value for `output_contexts`, number of items must be greater than or equal to `0`")

        self._output_contexts = output_contexts

    @property
    def kendra_configuration(self):
        """Gets the kendra_configuration of this CreateIntentRequest.


        :return: The kendra_configuration of this CreateIntentRequest.
        :rtype: CreateIntentRequestKendraConfiguration
        """
        return self._kendra_configuration

    @kendra_configuration.setter
    def kendra_configuration(self, kendra_configuration):
        """Sets the kendra_configuration of this CreateIntentRequest.


        :param kendra_configuration: The kendra_configuration of this CreateIntentRequest.
        :type kendra_configuration: CreateIntentRequestKendraConfiguration
        """

        self._kendra_configuration = kendra_configuration

    @property
    def initial_response_setting(self):
        """Gets the initial_response_setting of this CreateIntentRequest.


        :return: The initial_response_setting of this CreateIntentRequest.
        :rtype: CreateIntentRequestInitialResponseSetting
        """
        return self._initial_response_setting

    @initial_response_setting.setter
    def initial_response_setting(self, initial_response_setting):
        """Sets the initial_response_setting of this CreateIntentRequest.


        :param initial_response_setting: The initial_response_setting of this CreateIntentRequest.
        :type initial_response_setting: CreateIntentRequestInitialResponseSetting
        """

        self._initial_response_setting = initial_response_setting
