# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prompt_specification import PromptSpecification
from openapi_server.models.slot_default_value_specification import SlotDefaultValueSpecification
from openapi_server.models.wait_and_continue_specification import WaitAndContinueSpecification
from openapi_server import util


class SubSlotValueElicitationSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_value_specification: SlotDefaultValueSpecification=None, prompt_specification: PromptSpecification=None, sample_utterances: List=None, wait_and_continue_specification: WaitAndContinueSpecification=None):
        """SubSlotValueElicitationSetting - a model defined in OpenAPI

        :param default_value_specification: The default_value_specification of this SubSlotValueElicitationSetting.
        :param prompt_specification: The prompt_specification of this SubSlotValueElicitationSetting.
        :param sample_utterances: The sample_utterances of this SubSlotValueElicitationSetting.
        :param wait_and_continue_specification: The wait_and_continue_specification of this SubSlotValueElicitationSetting.
        """
        self.openapi_types = {
            'default_value_specification': SlotDefaultValueSpecification,
            'prompt_specification': PromptSpecification,
            'sample_utterances': List,
            'wait_and_continue_specification': WaitAndContinueSpecification
        }

        self.attribute_map = {
            'default_value_specification': 'defaultValueSpecification',
            'prompt_specification': 'promptSpecification',
            'sample_utterances': 'sampleUtterances',
            'wait_and_continue_specification': 'waitAndContinueSpecification'
        }

        self._default_value_specification = default_value_specification
        self._prompt_specification = prompt_specification
        self._sample_utterances = sample_utterances
        self._wait_and_continue_specification = wait_and_continue_specification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubSlotValueElicitationSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubSlotValueElicitationSetting of this SubSlotValueElicitationSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_value_specification(self):
        """Gets the default_value_specification of this SubSlotValueElicitationSetting.


        :return: The default_value_specification of this SubSlotValueElicitationSetting.
        :rtype: SlotDefaultValueSpecification
        """
        return self._default_value_specification

    @default_value_specification.setter
    def default_value_specification(self, default_value_specification):
        """Sets the default_value_specification of this SubSlotValueElicitationSetting.


        :param default_value_specification: The default_value_specification of this SubSlotValueElicitationSetting.
        :type default_value_specification: SlotDefaultValueSpecification
        """

        self._default_value_specification = default_value_specification

    @property
    def prompt_specification(self):
        """Gets the prompt_specification of this SubSlotValueElicitationSetting.


        :return: The prompt_specification of this SubSlotValueElicitationSetting.
        :rtype: PromptSpecification
        """
        return self._prompt_specification

    @prompt_specification.setter
    def prompt_specification(self, prompt_specification):
        """Sets the prompt_specification of this SubSlotValueElicitationSetting.


        :param prompt_specification: The prompt_specification of this SubSlotValueElicitationSetting.
        :type prompt_specification: PromptSpecification
        """
        if prompt_specification is None:
            raise ValueError("Invalid value for `prompt_specification`, must not be `None`")

        self._prompt_specification = prompt_specification

    @property
    def sample_utterances(self):
        """Gets the sample_utterances of this SubSlotValueElicitationSetting.


        :return: The sample_utterances of this SubSlotValueElicitationSetting.
        :rtype: List
        """
        return self._sample_utterances

    @sample_utterances.setter
    def sample_utterances(self, sample_utterances):
        """Sets the sample_utterances of this SubSlotValueElicitationSetting.


        :param sample_utterances: The sample_utterances of this SubSlotValueElicitationSetting.
        :type sample_utterances: List
        """

        self._sample_utterances = sample_utterances

    @property
    def wait_and_continue_specification(self):
        """Gets the wait_and_continue_specification of this SubSlotValueElicitationSetting.


        :return: The wait_and_continue_specification of this SubSlotValueElicitationSetting.
        :rtype: WaitAndContinueSpecification
        """
        return self._wait_and_continue_specification

    @wait_and_continue_specification.setter
    def wait_and_continue_specification(self, wait_and_continue_specification):
        """Sets the wait_and_continue_specification of this SubSlotValueElicitationSetting.


        :param wait_and_continue_specification: The wait_and_continue_specification of this SubSlotValueElicitationSetting.
        :type wait_and_continue_specification: WaitAndContinueSpecification
        """

        self._wait_and_continue_specification = wait_and_continue_specification
