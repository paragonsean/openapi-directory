# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bot_sort_attribute import BotSortAttribute
from openapi_server.models.sort_order import SortOrder
from openapi_server import util


class BotSortBy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute: BotSortAttribute=None, order: SortOrder=None):
        """BotSortBy - a model defined in OpenAPI

        :param attribute: The attribute of this BotSortBy.
        :param order: The order of this BotSortBy.
        """
        self.openapi_types = {
            'attribute': BotSortAttribute,
            'order': SortOrder
        }

        self.attribute_map = {
            'attribute': 'attribute',
            'order': 'order'
        }

        self._attribute = attribute
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BotSortBy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BotSortBy of this BotSortBy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute(self):
        """Gets the attribute of this BotSortBy.


        :return: The attribute of this BotSortBy.
        :rtype: BotSortAttribute
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this BotSortBy.


        :param attribute: The attribute of this BotSortBy.
        :type attribute: BotSortAttribute
        """
        if attribute is None:
            raise ValueError("Invalid value for `attribute`, must not be `None`")

        self._attribute = attribute

    @property
    def order(self):
        """Gets the order of this BotSortBy.


        :return: The order of this BotSortBy.
        :rtype: SortOrder
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this BotSortBy.


        :param order: The order of this BotSortBy.
        :type order: SortOrder
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order
