# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bot_filter import BotFilter
from openapi_server.models.list_bots_request_sort_by import ListBotsRequestSortBy
from openapi_server import util


class ListBotsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sort_by: ListBotsRequestSortBy=None, filters: List[BotFilter]=None, max_results: int=None, next_token: str=None):
        """ListBotsRequest - a model defined in OpenAPI

        :param sort_by: The sort_by of this ListBotsRequest.
        :param filters: The filters of this ListBotsRequest.
        :param max_results: The max_results of this ListBotsRequest.
        :param next_token: The next_token of this ListBotsRequest.
        """
        self.openapi_types = {
            'sort_by': ListBotsRequestSortBy,
            'filters': List[BotFilter],
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'sort_by': 'sortBy',
            'filters': 'filters',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._sort_by = sort_by
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListBotsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListBots_request of this ListBotsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sort_by(self):
        """Gets the sort_by of this ListBotsRequest.


        :return: The sort_by of this ListBotsRequest.
        :rtype: ListBotsRequestSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this ListBotsRequest.


        :param sort_by: The sort_by of this ListBotsRequest.
        :type sort_by: ListBotsRequestSortBy
        """

        self._sort_by = sort_by

    @property
    def filters(self):
        """Gets the filters of this ListBotsRequest.

        Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.

        :return: The filters of this ListBotsRequest.
        :rtype: List[BotFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListBotsRequest.

        Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.

        :param filters: The filters of this ListBotsRequest.
        :type filters: List[BotFilter]
        """
        if filters is not None and len(filters) > 2:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `2`")
        if filters is not None and len(filters) < 1:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `1`")

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this ListBotsRequest.

        The maximum number of bots to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.

        :return: The max_results of this ListBotsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListBotsRequest.

        The maximum number of bots to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.

        :param max_results: The max_results of this ListBotsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListBotsRequest.

        <p>If the response from the <code>ListBots</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. </p> <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListBots</code> request to return the next page of results. For a complete set of results, call the <code>ListBots</code> operation until the <code>nextToken</code> returned in the response is null.</p>

        :return: The next_token of this ListBotsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListBotsRequest.

        <p>If the response from the <code>ListBots</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. </p> <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListBots</code> request to return the next page of results. For a complete set of results, call the <code>ListBots</code> operation until the <code>nextToken</code> returned in the response is null.</p>

        :param next_token: The next_token of this ListBotsRequest.
        :type next_token: str
        """

        self._next_token = next_token
