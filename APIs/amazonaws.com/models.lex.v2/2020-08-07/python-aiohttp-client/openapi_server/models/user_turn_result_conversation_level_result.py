# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.test_result_match_status import TestResultMatchStatus
from openapi_server import util


class UserTurnResultConversationLevelResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_to_end_result: TestResultMatchStatus=None, speech_transcription_result: TestResultMatchStatus=None):
        """UserTurnResultConversationLevelResult - a model defined in OpenAPI

        :param end_to_end_result: The end_to_end_result of this UserTurnResultConversationLevelResult.
        :param speech_transcription_result: The speech_transcription_result of this UserTurnResultConversationLevelResult.
        """
        self.openapi_types = {
            'end_to_end_result': TestResultMatchStatus,
            'speech_transcription_result': TestResultMatchStatus
        }

        self.attribute_map = {
            'end_to_end_result': 'endToEndResult',
            'speech_transcription_result': 'speechTranscriptionResult'
        }

        self._end_to_end_result = end_to_end_result
        self._speech_transcription_result = speech_transcription_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserTurnResultConversationLevelResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserTurnResult_conversationLevelResult of this UserTurnResultConversationLevelResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_to_end_result(self):
        """Gets the end_to_end_result of this UserTurnResultConversationLevelResult.


        :return: The end_to_end_result of this UserTurnResultConversationLevelResult.
        :rtype: TestResultMatchStatus
        """
        return self._end_to_end_result

    @end_to_end_result.setter
    def end_to_end_result(self, end_to_end_result):
        """Sets the end_to_end_result of this UserTurnResultConversationLevelResult.


        :param end_to_end_result: The end_to_end_result of this UserTurnResultConversationLevelResult.
        :type end_to_end_result: TestResultMatchStatus
        """
        if end_to_end_result is None:
            raise ValueError("Invalid value for `end_to_end_result`, must not be `None`")

        self._end_to_end_result = end_to_end_result

    @property
    def speech_transcription_result(self):
        """Gets the speech_transcription_result of this UserTurnResultConversationLevelResult.


        :return: The speech_transcription_result of this UserTurnResultConversationLevelResult.
        :rtype: TestResultMatchStatus
        """
        return self._speech_transcription_result

    @speech_transcription_result.setter
    def speech_transcription_result(self, speech_transcription_result):
        """Sets the speech_transcription_result of this UserTurnResultConversationLevelResult.


        :param speech_transcription_result: The speech_transcription_result of this UserTurnResultConversationLevelResult.
        :type speech_transcription_result: TestResultMatchStatus
        """

        self._speech_transcription_result = speech_transcription_result
