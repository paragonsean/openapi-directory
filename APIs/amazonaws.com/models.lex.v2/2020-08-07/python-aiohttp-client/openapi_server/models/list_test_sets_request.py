# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_test_sets_request_sort_by import ListTestSetsRequestSortBy
from openapi_server import util


class ListTestSetsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sort_by: ListTestSetsRequestSortBy=None, max_results: int=None, next_token: str=None):
        """ListTestSetsRequest - a model defined in OpenAPI

        :param sort_by: The sort_by of this ListTestSetsRequest.
        :param max_results: The max_results of this ListTestSetsRequest.
        :param next_token: The next_token of this ListTestSetsRequest.
        """
        self.openapi_types = {
            'sort_by': ListTestSetsRequestSortBy,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'sort_by': 'sortBy',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._sort_by = sort_by
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTestSetsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTestSets_request of this ListTestSetsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sort_by(self):
        """Gets the sort_by of this ListTestSetsRequest.


        :return: The sort_by of this ListTestSetsRequest.
        :rtype: ListTestSetsRequestSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this ListTestSetsRequest.


        :param sort_by: The sort_by of this ListTestSetsRequest.
        :type sort_by: ListTestSetsRequestSortBy
        """

        self._sort_by = sort_by

    @property
    def max_results(self):
        """Gets the max_results of this ListTestSetsRequest.

        The maximum number of test sets to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.

        :return: The max_results of this ListTestSetsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListTestSetsRequest.

        The maximum number of test sets to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.

        :param max_results: The max_results of this ListTestSetsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListTestSetsRequest.

        If the response from the ListTestSets operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.

        :return: The next_token of this ListTestSetsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListTestSetsRequest.

        If the response from the ListTestSets operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.

        :param next_token: The next_token of this ListTestSetsRequest.
        :type next_token: str
        """

        self._next_token = next_token
