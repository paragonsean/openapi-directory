# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataPrivacy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_directed: bool=None):
        """DataPrivacy - a model defined in OpenAPI

        :param child_directed: The child_directed of this DataPrivacy.
        """
        self.openapi_types = {
            'child_directed': bool
        }

        self.attribute_map = {
            'child_directed': 'childDirected'
        }

        self._child_directed = child_directed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataPrivacy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataPrivacy of this DataPrivacy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_directed(self):
        """Gets the child_directed of this DataPrivacy.


        :return: The child_directed of this DataPrivacy.
        :rtype: bool
        """
        return self._child_directed

    @child_directed.setter
    def child_directed(self, child_directed):
        """Sets the child_directed of this DataPrivacy.


        :param child_directed: The child_directed of this DataPrivacy.
        :type child_directed: bool
        """
        if child_directed is None:
            raise ValueError("Invalid value for `child_directed`, must not be `None`")

        self._child_directed = child_directed
