# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateTestSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, test_set_name: str=None, description: str=None):
        """UpdateTestSetRequest - a model defined in OpenAPI

        :param test_set_name: The test_set_name of this UpdateTestSetRequest.
        :param description: The description of this UpdateTestSetRequest.
        """
        self.openapi_types = {
            'test_set_name': str,
            'description': str
        }

        self.attribute_map = {
            'test_set_name': 'testSetName',
            'description': 'description'
        }

        self._test_set_name = test_set_name
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTestSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTestSet_request of this UpdateTestSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def test_set_name(self):
        """Gets the test_set_name of this UpdateTestSetRequest.

        The new test set name.

        :return: The test_set_name of this UpdateTestSetRequest.
        :rtype: str
        """
        return self._test_set_name

    @test_set_name.setter
    def test_set_name(self, test_set_name):
        """Sets the test_set_name of this UpdateTestSetRequest.

        The new test set name.

        :param test_set_name: The test_set_name of this UpdateTestSetRequest.
        :type test_set_name: str
        """
        if test_set_name is None:
            raise ValueError("Invalid value for `test_set_name`, must not be `None`")
        if test_set_name is not None and len(test_set_name) > 100:
            raise ValueError("Invalid value for `test_set_name`, length must be less than or equal to `100`")
        if test_set_name is not None and len(test_set_name) < 1:
            raise ValueError("Invalid value for `test_set_name`, length must be greater than or equal to `1`")
        if test_set_name is not None and not re.search(r'^([0-9a-zA-Z][_-]?){1,100}$', test_set_name):
            raise ValueError("Invalid value for `test_set_name`, must be a follow pattern or equal to `/^([0-9a-zA-Z][_-]?){1,100}$/`")

        self._test_set_name = test_set_name

    @property
    def description(self):
        """Gets the description of this UpdateTestSetRequest.

        The new test set description.

        :return: The description of this UpdateTestSetRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateTestSetRequest.

        The new test set description.

        :param description: The description of this UpdateTestSetRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description
