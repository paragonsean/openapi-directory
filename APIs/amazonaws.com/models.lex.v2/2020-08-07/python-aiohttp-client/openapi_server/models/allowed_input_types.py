# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AllowedInputTypes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_audio_input: bool=None, allow_dtmf_input: bool=None):
        """AllowedInputTypes - a model defined in OpenAPI

        :param allow_audio_input: The allow_audio_input of this AllowedInputTypes.
        :param allow_dtmf_input: The allow_dtmf_input of this AllowedInputTypes.
        """
        self.openapi_types = {
            'allow_audio_input': bool,
            'allow_dtmf_input': bool
        }

        self.attribute_map = {
            'allow_audio_input': 'allowAudioInput',
            'allow_dtmf_input': 'allowDTMFInput'
        }

        self._allow_audio_input = allow_audio_input
        self._allow_dtmf_input = allow_dtmf_input

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AllowedInputTypes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AllowedInputTypes of this AllowedInputTypes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_audio_input(self):
        """Gets the allow_audio_input of this AllowedInputTypes.


        :return: The allow_audio_input of this AllowedInputTypes.
        :rtype: bool
        """
        return self._allow_audio_input

    @allow_audio_input.setter
    def allow_audio_input(self, allow_audio_input):
        """Sets the allow_audio_input of this AllowedInputTypes.


        :param allow_audio_input: The allow_audio_input of this AllowedInputTypes.
        :type allow_audio_input: bool
        """
        if allow_audio_input is None:
            raise ValueError("Invalid value for `allow_audio_input`, must not be `None`")

        self._allow_audio_input = allow_audio_input

    @property
    def allow_dtmf_input(self):
        """Gets the allow_dtmf_input of this AllowedInputTypes.


        :return: The allow_dtmf_input of this AllowedInputTypes.
        :rtype: bool
        """
        return self._allow_dtmf_input

    @allow_dtmf_input.setter
    def allow_dtmf_input(self, allow_dtmf_input):
        """Sets the allow_dtmf_input of this AllowedInputTypes.


        :param allow_dtmf_input: The allow_dtmf_input of this AllowedInputTypes.
        :type allow_dtmf_input: bool
        """
        if allow_dtmf_input is None:
            raise ValueError("Invalid value for `allow_dtmf_input`, must not be `None`")

        self._allow_dtmf_input = allow_dtmf_input
