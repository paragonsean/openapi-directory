# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListBotAliasesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, next_token: str=None):
        """ListBotAliasesRequest - a model defined in OpenAPI

        :param max_results: The max_results of this ListBotAliasesRequest.
        :param next_token: The next_token of this ListBotAliasesRequest.
        """
        self.openapi_types = {
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListBotAliasesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListBotAliases_request of this ListBotAliasesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this ListBotAliasesRequest.

        The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.

        :return: The max_results of this ListBotAliasesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListBotAliasesRequest.

        The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.

        :param max_results: The max_results of this ListBotAliasesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListBotAliasesRequest.

        If the response from the <code>ListBotAliases</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.

        :return: The next_token of this ListBotAliasesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListBotAliasesRequest.

        If the response from the <code>ListBotAliases</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.

        :param next_token: The next_token of this ListBotAliasesRequest.
        :type next_token: str
        """

        self._next_token = next_token
