# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.slot_type_value_sample_value import SlotTypeValueSampleValue
from openapi_server import util


class SlotTypeValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sample_value: SlotTypeValueSampleValue=None, synonyms: List=None):
        """SlotTypeValue - a model defined in OpenAPI

        :param sample_value: The sample_value of this SlotTypeValue.
        :param synonyms: The synonyms of this SlotTypeValue.
        """
        self.openapi_types = {
            'sample_value': SlotTypeValueSampleValue,
            'synonyms': List
        }

        self.attribute_map = {
            'sample_value': 'sampleValue',
            'synonyms': 'synonyms'
        }

        self._sample_value = sample_value
        self._synonyms = synonyms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlotTypeValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlotTypeValue of this SlotTypeValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sample_value(self):
        """Gets the sample_value of this SlotTypeValue.


        :return: The sample_value of this SlotTypeValue.
        :rtype: SlotTypeValueSampleValue
        """
        return self._sample_value

    @sample_value.setter
    def sample_value(self, sample_value):
        """Sets the sample_value of this SlotTypeValue.


        :param sample_value: The sample_value of this SlotTypeValue.
        :type sample_value: SlotTypeValueSampleValue
        """

        self._sample_value = sample_value

    @property
    def synonyms(self):
        """Gets the synonyms of this SlotTypeValue.


        :return: The synonyms of this SlotTypeValue.
        :rtype: List
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this SlotTypeValue.


        :param synonyms: The synonyms of this SlotTypeValue.
        :type synonyms: List
        """

        self._synonyms = synonyms
