# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SlotValueRegexFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pattern: str=None):
        """SlotValueRegexFilter - a model defined in OpenAPI

        :param pattern: The pattern of this SlotValueRegexFilter.
        """
        self.openapi_types = {
            'pattern': str
        }

        self.attribute_map = {
            'pattern': 'pattern'
        }

        self._pattern = pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlotValueRegexFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlotValueRegexFilter of this SlotValueRegexFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pattern(self):
        """Gets the pattern of this SlotValueRegexFilter.


        :return: The pattern of this SlotValueRegexFilter.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this SlotValueRegexFilter.


        :param pattern: The pattern of this SlotValueRegexFilter.
        :type pattern: str
        """
        if pattern is None:
            raise ValueError("Invalid value for `pattern`, must not be `None`")

        self._pattern = pattern
