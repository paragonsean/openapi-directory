# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_import_request_resource_specification import StartImportRequestResourceSpecification
import re
from openapi_server import util


class StartImportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, import_id: str=None, resource_specification: StartImportRequestResourceSpecification=None, merge_strategy: str=None, file_password: str=None):
        """StartImportRequest - a model defined in OpenAPI

        :param import_id: The import_id of this StartImportRequest.
        :param resource_specification: The resource_specification of this StartImportRequest.
        :param merge_strategy: The merge_strategy of this StartImportRequest.
        :param file_password: The file_password of this StartImportRequest.
        """
        self.openapi_types = {
            'import_id': str,
            'resource_specification': StartImportRequestResourceSpecification,
            'merge_strategy': str,
            'file_password': str
        }

        self.attribute_map = {
            'import_id': 'importId',
            'resource_specification': 'resourceSpecification',
            'merge_strategy': 'mergeStrategy',
            'file_password': 'filePassword'
        }

        self._import_id = import_id
        self._resource_specification = resource_specification
        self._merge_strategy = merge_strategy
        self._file_password = file_password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartImportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartImport_request of this StartImportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def import_id(self):
        """Gets the import_id of this StartImportRequest.

        The unique identifier for the import. It is included in the response from the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateUploadUrl.html\">CreateUploadUrl</a> operation.

        :return: The import_id of this StartImportRequest.
        :rtype: str
        """
        return self._import_id

    @import_id.setter
    def import_id(self, import_id):
        """Sets the import_id of this StartImportRequest.

        The unique identifier for the import. It is included in the response from the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateUploadUrl.html\">CreateUploadUrl</a> operation.

        :param import_id: The import_id of this StartImportRequest.
        :type import_id: str
        """
        if import_id is None:
            raise ValueError("Invalid value for `import_id`, must not be `None`")
        if import_id is not None and len(import_id) > 10:
            raise ValueError("Invalid value for `import_id`, length must be less than or equal to `10`")
        if import_id is not None and len(import_id) < 10:
            raise ValueError("Invalid value for `import_id`, length must be greater than or equal to `10`")
        if import_id is not None and not re.search(r'^[0-9a-zA-Z]+$', import_id):
            raise ValueError("Invalid value for `import_id`, must be a follow pattern or equal to `/^[0-9a-zA-Z]+$/`")

        self._import_id = import_id

    @property
    def resource_specification(self):
        """Gets the resource_specification of this StartImportRequest.


        :return: The resource_specification of this StartImportRequest.
        :rtype: StartImportRequestResourceSpecification
        """
        return self._resource_specification

    @resource_specification.setter
    def resource_specification(self, resource_specification):
        """Sets the resource_specification of this StartImportRequest.


        :param resource_specification: The resource_specification of this StartImportRequest.
        :type resource_specification: StartImportRequestResourceSpecification
        """
        if resource_specification is None:
            raise ValueError("Invalid value for `resource_specification`, must not be `None`")

        self._resource_specification = resource_specification

    @property
    def merge_strategy(self):
        """Gets the merge_strategy of this StartImportRequest.

        The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is <code>FailOnConflict</code> existing resources are not overwritten and the import fails.

        :return: The merge_strategy of this StartImportRequest.
        :rtype: str
        """
        return self._merge_strategy

    @merge_strategy.setter
    def merge_strategy(self, merge_strategy):
        """Sets the merge_strategy of this StartImportRequest.

        The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is <code>FailOnConflict</code> existing resources are not overwritten and the import fails.

        :param merge_strategy: The merge_strategy of this StartImportRequest.
        :type merge_strategy: str
        """
        allowed_values = ["Overwrite", "FailOnConflict", "Append"]  # noqa: E501
        if merge_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `merge_strategy` ({0}), must be one of {1}"
                .format(merge_strategy, allowed_values)
            )

        self._merge_strategy = merge_strategy

    @property
    def file_password(self):
        """Gets the file_password of this StartImportRequest.

        The password used to encrypt the zip archive that contains the resource definition. You should always encrypt the zip archive to protect it during transit between your site and Amazon Lex.

        :return: The file_password of this StartImportRequest.
        :rtype: str
        """
        return self._file_password

    @file_password.setter
    def file_password(self, file_password):
        """Sets the file_password of this StartImportRequest.

        The password used to encrypt the zip archive that contains the resource definition. You should always encrypt the zip archive to protect it during transit between your site and Amazon Lex.

        :param file_password: The file_password of this StartImportRequest.
        :type file_password: str
        """
        if file_password is not None and len(file_password) > 1024:
            raise ValueError("Invalid value for `file_password`, length must be less than or equal to `1024`")
        if file_password is not None and len(file_password) < 1:
            raise ValueError("Invalid value for `file_password`, length must be greater than or equal to `1`")

        self._file_password = file_password
