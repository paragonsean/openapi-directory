# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_slot_type_request_value_selection_setting_advanced_recognition_setting import CreateSlotTypeRequestValueSelectionSettingAdvancedRecognitionSetting
from openapi_server.models.create_slot_type_request_value_selection_setting_regex_filter import CreateSlotTypeRequestValueSelectionSettingRegexFilter
from openapi_server.models.slot_value_resolution_strategy import SlotValueResolutionStrategy
from openapi_server import util


class UpdateSlotTypeRequestValueSelectionSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resolution_strategy: SlotValueResolutionStrategy=None, regex_filter: CreateSlotTypeRequestValueSelectionSettingRegexFilter=None, advanced_recognition_setting: CreateSlotTypeRequestValueSelectionSettingAdvancedRecognitionSetting=None):
        """UpdateSlotTypeRequestValueSelectionSetting - a model defined in OpenAPI

        :param resolution_strategy: The resolution_strategy of this UpdateSlotTypeRequestValueSelectionSetting.
        :param regex_filter: The regex_filter of this UpdateSlotTypeRequestValueSelectionSetting.
        :param advanced_recognition_setting: The advanced_recognition_setting of this UpdateSlotTypeRequestValueSelectionSetting.
        """
        self.openapi_types = {
            'resolution_strategy': SlotValueResolutionStrategy,
            'regex_filter': CreateSlotTypeRequestValueSelectionSettingRegexFilter,
            'advanced_recognition_setting': CreateSlotTypeRequestValueSelectionSettingAdvancedRecognitionSetting
        }

        self.attribute_map = {
            'resolution_strategy': 'resolutionStrategy',
            'regex_filter': 'regexFilter',
            'advanced_recognition_setting': 'advancedRecognitionSetting'
        }

        self._resolution_strategy = resolution_strategy
        self._regex_filter = regex_filter
        self._advanced_recognition_setting = advanced_recognition_setting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSlotTypeRequestValueSelectionSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSlotTypeRequest_valueSelectionSetting of this UpdateSlotTypeRequestValueSelectionSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resolution_strategy(self):
        """Gets the resolution_strategy of this UpdateSlotTypeRequestValueSelectionSetting.


        :return: The resolution_strategy of this UpdateSlotTypeRequestValueSelectionSetting.
        :rtype: SlotValueResolutionStrategy
        """
        return self._resolution_strategy

    @resolution_strategy.setter
    def resolution_strategy(self, resolution_strategy):
        """Sets the resolution_strategy of this UpdateSlotTypeRequestValueSelectionSetting.


        :param resolution_strategy: The resolution_strategy of this UpdateSlotTypeRequestValueSelectionSetting.
        :type resolution_strategy: SlotValueResolutionStrategy
        """
        if resolution_strategy is None:
            raise ValueError("Invalid value for `resolution_strategy`, must not be `None`")

        self._resolution_strategy = resolution_strategy

    @property
    def regex_filter(self):
        """Gets the regex_filter of this UpdateSlotTypeRequestValueSelectionSetting.


        :return: The regex_filter of this UpdateSlotTypeRequestValueSelectionSetting.
        :rtype: CreateSlotTypeRequestValueSelectionSettingRegexFilter
        """
        return self._regex_filter

    @regex_filter.setter
    def regex_filter(self, regex_filter):
        """Sets the regex_filter of this UpdateSlotTypeRequestValueSelectionSetting.


        :param regex_filter: The regex_filter of this UpdateSlotTypeRequestValueSelectionSetting.
        :type regex_filter: CreateSlotTypeRequestValueSelectionSettingRegexFilter
        """

        self._regex_filter = regex_filter

    @property
    def advanced_recognition_setting(self):
        """Gets the advanced_recognition_setting of this UpdateSlotTypeRequestValueSelectionSetting.


        :return: The advanced_recognition_setting of this UpdateSlotTypeRequestValueSelectionSetting.
        :rtype: CreateSlotTypeRequestValueSelectionSettingAdvancedRecognitionSetting
        """
        return self._advanced_recognition_setting

    @advanced_recognition_setting.setter
    def advanced_recognition_setting(self, advanced_recognition_setting):
        """Sets the advanced_recognition_setting of this UpdateSlotTypeRequestValueSelectionSetting.


        :param advanced_recognition_setting: The advanced_recognition_setting of this UpdateSlotTypeRequestValueSelectionSetting.
        :type advanced_recognition_setting: CreateSlotTypeRequestValueSelectionSettingAdvancedRecognitionSetting
        """

        self._advanced_recognition_setting = advanced_recognition_setting
