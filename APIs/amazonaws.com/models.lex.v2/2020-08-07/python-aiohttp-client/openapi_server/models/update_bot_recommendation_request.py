# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_bot_recommendation_request_encryption_setting import UpdateBotRecommendationRequestEncryptionSetting
from openapi_server import util


class UpdateBotRecommendationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_setting: UpdateBotRecommendationRequestEncryptionSetting=None):
        """UpdateBotRecommendationRequest - a model defined in OpenAPI

        :param encryption_setting: The encryption_setting of this UpdateBotRecommendationRequest.
        """
        self.openapi_types = {
            'encryption_setting': UpdateBotRecommendationRequestEncryptionSetting
        }

        self.attribute_map = {
            'encryption_setting': 'encryptionSetting'
        }

        self._encryption_setting = encryption_setting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBotRecommendationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBotRecommendation_request of this UpdateBotRecommendationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_setting(self):
        """Gets the encryption_setting of this UpdateBotRecommendationRequest.


        :return: The encryption_setting of this UpdateBotRecommendationRequest.
        :rtype: UpdateBotRecommendationRequestEncryptionSetting
        """
        return self._encryption_setting

    @encryption_setting.setter
    def encryption_setting(self, encryption_setting):
        """Sets the encryption_setting of this UpdateBotRecommendationRequest.


        :param encryption_setting: The encryption_setting of this UpdateBotRecommendationRequest.
        :type encryption_setting: UpdateBotRecommendationRequestEncryptionSetting
        """
        if encryption_setting is None:
            raise ValueError("Invalid value for `encryption_setting`, must not be `None`")

        self._encryption_setting = encryption_setting
