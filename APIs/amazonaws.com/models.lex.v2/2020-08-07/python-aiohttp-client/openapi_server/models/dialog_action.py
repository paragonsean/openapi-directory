# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dialog_action_type import DialogActionType
from openapi_server import util


class DialogAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: DialogActionType=None, slot_to_elicit: str=None, suppress_next_message: bool=None):
        """DialogAction - a model defined in OpenAPI

        :param type: The type of this DialogAction.
        :param slot_to_elicit: The slot_to_elicit of this DialogAction.
        :param suppress_next_message: The suppress_next_message of this DialogAction.
        """
        self.openapi_types = {
            'type': DialogActionType,
            'slot_to_elicit': str,
            'suppress_next_message': bool
        }

        self.attribute_map = {
            'type': 'type',
            'slot_to_elicit': 'slotToElicit',
            'suppress_next_message': 'suppressNextMessage'
        }

        self._type = type
        self._slot_to_elicit = slot_to_elicit
        self._suppress_next_message = suppress_next_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DialogAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DialogAction of this DialogAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this DialogAction.


        :return: The type of this DialogAction.
        :rtype: DialogActionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DialogAction.


        :param type: The type of this DialogAction.
        :type type: DialogActionType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def slot_to_elicit(self):
        """Gets the slot_to_elicit of this DialogAction.


        :return: The slot_to_elicit of this DialogAction.
        :rtype: str
        """
        return self._slot_to_elicit

    @slot_to_elicit.setter
    def slot_to_elicit(self, slot_to_elicit):
        """Sets the slot_to_elicit of this DialogAction.


        :param slot_to_elicit: The slot_to_elicit of this DialogAction.
        :type slot_to_elicit: str
        """

        self._slot_to_elicit = slot_to_elicit

    @property
    def suppress_next_message(self):
        """Gets the suppress_next_message of this DialogAction.


        :return: The suppress_next_message of this DialogAction.
        :rtype: bool
        """
        return self._suppress_next_message

    @suppress_next_message.setter
    def suppress_next_message(self, suppress_next_message):
        """Sets the suppress_next_message of this DialogAction.


        :param suppress_next_message: The suppress_next_message of this DialogAction.
        :type suppress_next_message: bool
        """

        self._suppress_next_message = suppress_next_message
