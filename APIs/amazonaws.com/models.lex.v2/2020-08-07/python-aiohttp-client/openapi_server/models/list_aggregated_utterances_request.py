# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregated_utterances_filter import AggregatedUtterancesFilter
from openapi_server.models.list_aggregated_utterances_request_aggregation_duration import ListAggregatedUtterancesRequestAggregationDuration
from openapi_server.models.list_aggregated_utterances_request_sort_by import ListAggregatedUtterancesRequestSortBy
import re
from openapi_server import util


class ListAggregatedUtterancesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_alias_id: str=None, bot_version: str=None, locale_id: str=None, aggregation_duration: ListAggregatedUtterancesRequestAggregationDuration=None, sort_by: ListAggregatedUtterancesRequestSortBy=None, filters: List[AggregatedUtterancesFilter]=None, max_results: int=None, next_token: str=None):
        """ListAggregatedUtterancesRequest - a model defined in OpenAPI

        :param bot_alias_id: The bot_alias_id of this ListAggregatedUtterancesRequest.
        :param bot_version: The bot_version of this ListAggregatedUtterancesRequest.
        :param locale_id: The locale_id of this ListAggregatedUtterancesRequest.
        :param aggregation_duration: The aggregation_duration of this ListAggregatedUtterancesRequest.
        :param sort_by: The sort_by of this ListAggregatedUtterancesRequest.
        :param filters: The filters of this ListAggregatedUtterancesRequest.
        :param max_results: The max_results of this ListAggregatedUtterancesRequest.
        :param next_token: The next_token of this ListAggregatedUtterancesRequest.
        """
        self.openapi_types = {
            'bot_alias_id': str,
            'bot_version': str,
            'locale_id': str,
            'aggregation_duration': ListAggregatedUtterancesRequestAggregationDuration,
            'sort_by': ListAggregatedUtterancesRequestSortBy,
            'filters': List[AggregatedUtterancesFilter],
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'bot_alias_id': 'botAliasId',
            'bot_version': 'botVersion',
            'locale_id': 'localeId',
            'aggregation_duration': 'aggregationDuration',
            'sort_by': 'sortBy',
            'filters': 'filters',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._bot_alias_id = bot_alias_id
        self._bot_version = bot_version
        self._locale_id = locale_id
        self._aggregation_duration = aggregation_duration
        self._sort_by = sort_by
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAggregatedUtterancesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListAggregatedUtterances_request of this ListAggregatedUtterancesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_alias_id(self):
        """Gets the bot_alias_id of this ListAggregatedUtterancesRequest.

        The identifier of the bot alias associated with this request. If you specify the bot alias, you can't specify the bot version.

        :return: The bot_alias_id of this ListAggregatedUtterancesRequest.
        :rtype: str
        """
        return self._bot_alias_id

    @bot_alias_id.setter
    def bot_alias_id(self, bot_alias_id):
        """Sets the bot_alias_id of this ListAggregatedUtterancesRequest.

        The identifier of the bot alias associated with this request. If you specify the bot alias, you can't specify the bot version.

        :param bot_alias_id: The bot_alias_id of this ListAggregatedUtterancesRequest.
        :type bot_alias_id: str
        """
        if bot_alias_id is not None and len(bot_alias_id) > 10:
            raise ValueError("Invalid value for `bot_alias_id`, length must be less than or equal to `10`")
        if bot_alias_id is not None and len(bot_alias_id) < 10:
            raise ValueError("Invalid value for `bot_alias_id`, length must be greater than or equal to `10`")
        if bot_alias_id is not None and not re.search(r'^(\bTSTALIASID\b|[0-9a-zA-Z]+)$', bot_alias_id):
            raise ValueError("Invalid value for `bot_alias_id`, must be a follow pattern or equal to `/^(\bTSTALIASID\b|[0-9a-zA-Z]+)$/`")

        self._bot_alias_id = bot_alias_id

    @property
    def bot_version(self):
        """Gets the bot_version of this ListAggregatedUtterancesRequest.

        The identifier of the bot version associated with this request. If you specify the bot version, you can't specify the bot alias.

        :return: The bot_version of this ListAggregatedUtterancesRequest.
        :rtype: str
        """
        return self._bot_version

    @bot_version.setter
    def bot_version(self, bot_version):
        """Sets the bot_version of this ListAggregatedUtterancesRequest.

        The identifier of the bot version associated with this request. If you specify the bot version, you can't specify the bot alias.

        :param bot_version: The bot_version of this ListAggregatedUtterancesRequest.
        :type bot_version: str
        """
        if bot_version is not None and len(bot_version) > 5:
            raise ValueError("Invalid value for `bot_version`, length must be less than or equal to `5`")
        if bot_version is not None and len(bot_version) < 1:
            raise ValueError("Invalid value for `bot_version`, length must be greater than or equal to `1`")
        if bot_version is not None and not re.search(r'^(DRAFT|[0-9]+)$', bot_version):
            raise ValueError("Invalid value for `bot_version`, must be a follow pattern or equal to `/^(DRAFT|[0-9]+)$/`")

        self._bot_version = bot_version

    @property
    def locale_id(self):
        """Gets the locale_id of this ListAggregatedUtterancesRequest.

        The identifier of the language and locale where the utterances were collected. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.

        :return: The locale_id of this ListAggregatedUtterancesRequest.
        :rtype: str
        """
        return self._locale_id

    @locale_id.setter
    def locale_id(self, locale_id):
        """Sets the locale_id of this ListAggregatedUtterancesRequest.

        The identifier of the language and locale where the utterances were collected. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.

        :param locale_id: The locale_id of this ListAggregatedUtterancesRequest.
        :type locale_id: str
        """
        if locale_id is None:
            raise ValueError("Invalid value for `locale_id`, must not be `None`")

        self._locale_id = locale_id

    @property
    def aggregation_duration(self):
        """Gets the aggregation_duration of this ListAggregatedUtterancesRequest.


        :return: The aggregation_duration of this ListAggregatedUtterancesRequest.
        :rtype: ListAggregatedUtterancesRequestAggregationDuration
        """
        return self._aggregation_duration

    @aggregation_duration.setter
    def aggregation_duration(self, aggregation_duration):
        """Sets the aggregation_duration of this ListAggregatedUtterancesRequest.


        :param aggregation_duration: The aggregation_duration of this ListAggregatedUtterancesRequest.
        :type aggregation_duration: ListAggregatedUtterancesRequestAggregationDuration
        """
        if aggregation_duration is None:
            raise ValueError("Invalid value for `aggregation_duration`, must not be `None`")

        self._aggregation_duration = aggregation_duration

    @property
    def sort_by(self):
        """Gets the sort_by of this ListAggregatedUtterancesRequest.


        :return: The sort_by of this ListAggregatedUtterancesRequest.
        :rtype: ListAggregatedUtterancesRequestSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this ListAggregatedUtterancesRequest.


        :param sort_by: The sort_by of this ListAggregatedUtterancesRequest.
        :type sort_by: ListAggregatedUtterancesRequestSortBy
        """

        self._sort_by = sort_by

    @property
    def filters(self):
        """Gets the filters of this ListAggregatedUtterancesRequest.

        Provides the specification of a filter used to limit the utterances in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.

        :return: The filters of this ListAggregatedUtterancesRequest.
        :rtype: List[AggregatedUtterancesFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListAggregatedUtterancesRequest.

        Provides the specification of a filter used to limit the utterances in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.

        :param filters: The filters of this ListAggregatedUtterancesRequest.
        :type filters: List[AggregatedUtterancesFilter]
        """
        if filters is not None and len(filters) > 1:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `1`")
        if filters is not None and len(filters) < 1:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `1`")

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this ListAggregatedUtterancesRequest.

        The maximum number of utterances to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned. If you don't specify the <code>maxResults</code> parameter, 1,000 results are returned.

        :return: The max_results of this ListAggregatedUtterancesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListAggregatedUtterancesRequest.

        The maximum number of utterances to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned. If you don't specify the <code>maxResults</code> parameter, 1,000 results are returned.

        :param max_results: The max_results of this ListAggregatedUtterancesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListAggregatedUtterancesRequest.

        If the response from the <code>ListAggregatedUtterances</code> operation contains more results that specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.

        :return: The next_token of this ListAggregatedUtterancesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListAggregatedUtterancesRequest.

        If the response from the <code>ListAggregatedUtterances</code> operation contains more results that specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.

        :param next_token: The next_token of this ListAggregatedUtterancesRequest.
        :type next_token: str
        """

        self._next_token = next_token
