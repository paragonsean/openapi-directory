# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_dimension import TimeDimension
from openapi_server import util


class RelativeAggregationDuration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time_dimension: TimeDimension=None, time_value: int=None):
        """RelativeAggregationDuration - a model defined in OpenAPI

        :param time_dimension: The time_dimension of this RelativeAggregationDuration.
        :param time_value: The time_value of this RelativeAggregationDuration.
        """
        self.openapi_types = {
            'time_dimension': TimeDimension,
            'time_value': int
        }

        self.attribute_map = {
            'time_dimension': 'timeDimension',
            'time_value': 'timeValue'
        }

        self._time_dimension = time_dimension
        self._time_value = time_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelativeAggregationDuration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelativeAggregationDuration of this RelativeAggregationDuration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_dimension(self):
        """Gets the time_dimension of this RelativeAggregationDuration.


        :return: The time_dimension of this RelativeAggregationDuration.
        :rtype: TimeDimension
        """
        return self._time_dimension

    @time_dimension.setter
    def time_dimension(self, time_dimension):
        """Sets the time_dimension of this RelativeAggregationDuration.


        :param time_dimension: The time_dimension of this RelativeAggregationDuration.
        :type time_dimension: TimeDimension
        """
        if time_dimension is None:
            raise ValueError("Invalid value for `time_dimension`, must not be `None`")

        self._time_dimension = time_dimension

    @property
    def time_value(self):
        """Gets the time_value of this RelativeAggregationDuration.


        :return: The time_value of this RelativeAggregationDuration.
        :rtype: int
        """
        return self._time_value

    @time_value.setter
    def time_value(self, time_value):
        """Sets the time_value of this RelativeAggregationDuration.


        :param time_value: The time_value of this RelativeAggregationDuration.
        :type time_value: int
        """
        if time_value is None:
            raise ValueError("Invalid value for `time_value`, must not be `None`")

        self._time_value = time_value
