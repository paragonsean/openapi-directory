# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_group_message import MessageGroupMessage
from openapi_server import util


class MessageGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: MessageGroupMessage=None, variations: List=None):
        """MessageGroup - a model defined in OpenAPI

        :param message: The message of this MessageGroup.
        :param variations: The variations of this MessageGroup.
        """
        self.openapi_types = {
            'message': MessageGroupMessage,
            'variations': List
        }

        self.attribute_map = {
            'message': 'message',
            'variations': 'variations'
        }

        self._message = message
        self._variations = variations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageGroup of this MessageGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this MessageGroup.


        :return: The message of this MessageGroup.
        :rtype: MessageGroupMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MessageGroup.


        :param message: The message of this MessageGroup.
        :type message: MessageGroupMessage
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def variations(self):
        """Gets the variations of this MessageGroup.


        :return: The variations of this MessageGroup.
        :rtype: List
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this MessageGroup.


        :param variations: The variations of this MessageGroup.
        :type variations: List
        """

        self._variations = variations
