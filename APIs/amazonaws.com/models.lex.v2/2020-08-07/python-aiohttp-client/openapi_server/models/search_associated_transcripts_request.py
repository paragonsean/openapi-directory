# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associated_transcript_filter import AssociatedTranscriptFilter
from openapi_server import util


class SearchAssociatedTranscriptsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, search_order: str=None, filters: List[AssociatedTranscriptFilter]=None, max_results: int=None, next_index: int=None):
        """SearchAssociatedTranscriptsRequest - a model defined in OpenAPI

        :param search_order: The search_order of this SearchAssociatedTranscriptsRequest.
        :param filters: The filters of this SearchAssociatedTranscriptsRequest.
        :param max_results: The max_results of this SearchAssociatedTranscriptsRequest.
        :param next_index: The next_index of this SearchAssociatedTranscriptsRequest.
        """
        self.openapi_types = {
            'search_order': str,
            'filters': List[AssociatedTranscriptFilter],
            'max_results': int,
            'next_index': int
        }

        self.attribute_map = {
            'search_order': 'searchOrder',
            'filters': 'filters',
            'max_results': 'maxResults',
            'next_index': 'nextIndex'
        }

        self._search_order = search_order
        self._filters = filters
        self._max_results = max_results
        self._next_index = next_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchAssociatedTranscriptsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchAssociatedTranscripts_request of this SearchAssociatedTranscriptsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def search_order(self):
        """Gets the search_order of this SearchAssociatedTranscriptsRequest.

        How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.

        :return: The search_order of this SearchAssociatedTranscriptsRequest.
        :rtype: str
        """
        return self._search_order

    @search_order.setter
    def search_order(self, search_order):
        """Sets the search_order of this SearchAssociatedTranscriptsRequest.

        How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.

        :param search_order: The search_order of this SearchAssociatedTranscriptsRequest.
        :type search_order: str
        """
        allowed_values = ["Ascending", "Descending"]  # noqa: E501
        if search_order not in allowed_values:
            raise ValueError(
                "Invalid value for `search_order` ({0}), must be one of {1}"
                .format(search_order, allowed_values)
            )

        self._search_order = search_order

    @property
    def filters(self):
        """Gets the filters of this SearchAssociatedTranscriptsRequest.

        A list of filter objects.

        :return: The filters of this SearchAssociatedTranscriptsRequest.
        :rtype: List[AssociatedTranscriptFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this SearchAssociatedTranscriptsRequest.

        A list of filter objects.

        :param filters: The filters of this SearchAssociatedTranscriptsRequest.
        :type filters: List[AssociatedTranscriptFilter]
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")
        if filters is not None and len(filters) > 1:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `1`")
        if filters is not None and len(filters) < 1:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `1`")

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this SearchAssociatedTranscriptsRequest.

        The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.

        :return: The max_results of this SearchAssociatedTranscriptsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchAssociatedTranscriptsRequest.

        The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.

        :param max_results: The max_results of this SearchAssociatedTranscriptsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_index(self):
        """Gets the next_index of this SearchAssociatedTranscriptsRequest.

        If the response from the SearchAssociatedTranscriptsRequest operation contains more results than specified in the maxResults parameter, an index is returned in the response. Use that index in the nextIndex parameter to return the next page of results.

        :return: The next_index of this SearchAssociatedTranscriptsRequest.
        :rtype: int
        """
        return self._next_index

    @next_index.setter
    def next_index(self, next_index):
        """Sets the next_index of this SearchAssociatedTranscriptsRequest.

        If the response from the SearchAssociatedTranscriptsRequest operation contains more results than specified in the maxResults parameter, an index is returned in the response. Use that index in the nextIndex parameter to return the next page of results.

        :param next_index: The next_index of this SearchAssociatedTranscriptsRequest.
        :type next_index: int
        """
        if next_index is not None and next_index > 10000000:
            raise ValueError("Invalid value for `next_index`, must be a value less than or equal to `10000000`")
        if next_index is not None and next_index < 0:
            raise ValueError("Invalid value for `next_index`, must be a value greater than or equal to `0`")

        self._next_index = next_index
