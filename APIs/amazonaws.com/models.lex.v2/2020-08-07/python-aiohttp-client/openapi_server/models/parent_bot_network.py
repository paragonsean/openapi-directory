# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParentBotNetwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_id: str=None, bot_version: str=None):
        """ParentBotNetwork - a model defined in OpenAPI

        :param bot_id: The bot_id of this ParentBotNetwork.
        :param bot_version: The bot_version of this ParentBotNetwork.
        """
        self.openapi_types = {
            'bot_id': str,
            'bot_version': str
        }

        self.attribute_map = {
            'bot_id': 'botId',
            'bot_version': 'botVersion'
        }

        self._bot_id = bot_id
        self._bot_version = bot_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParentBotNetwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParentBotNetwork of this ParentBotNetwork.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_id(self):
        """Gets the bot_id of this ParentBotNetwork.


        :return: The bot_id of this ParentBotNetwork.
        :rtype: str
        """
        return self._bot_id

    @bot_id.setter
    def bot_id(self, bot_id):
        """Sets the bot_id of this ParentBotNetwork.


        :param bot_id: The bot_id of this ParentBotNetwork.
        :type bot_id: str
        """
        if bot_id is None:
            raise ValueError("Invalid value for `bot_id`, must not be `None`")

        self._bot_id = bot_id

    @property
    def bot_version(self):
        """Gets the bot_version of this ParentBotNetwork.


        :return: The bot_version of this ParentBotNetwork.
        :rtype: str
        """
        return self._bot_version

    @bot_version.setter
    def bot_version(self, bot_version):
        """Sets the bot_version of this ParentBotNetwork.


        :param bot_version: The bot_version of this ParentBotNetwork.
        :type bot_version: str
        """
        if bot_version is None:
            raise ValueError("Invalid value for `bot_version`, must not be `None`")

        self._bot_version = bot_version
