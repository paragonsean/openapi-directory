# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.utterance_level_test_result_item_turn_result import UtteranceLevelTestResultItemTurnResult
from openapi_server import util


class UtteranceLevelTestResultItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, record_number: int=None, conversation_id: str=None, turn_result: UtteranceLevelTestResultItemTurnResult=None):
        """UtteranceLevelTestResultItem - a model defined in OpenAPI

        :param record_number: The record_number of this UtteranceLevelTestResultItem.
        :param conversation_id: The conversation_id of this UtteranceLevelTestResultItem.
        :param turn_result: The turn_result of this UtteranceLevelTestResultItem.
        """
        self.openapi_types = {
            'record_number': int,
            'conversation_id': str,
            'turn_result': UtteranceLevelTestResultItemTurnResult
        }

        self.attribute_map = {
            'record_number': 'recordNumber',
            'conversation_id': 'conversationId',
            'turn_result': 'turnResult'
        }

        self._record_number = record_number
        self._conversation_id = conversation_id
        self._turn_result = turn_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UtteranceLevelTestResultItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UtteranceLevelTestResultItem of this UtteranceLevelTestResultItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def record_number(self):
        """Gets the record_number of this UtteranceLevelTestResultItem.


        :return: The record_number of this UtteranceLevelTestResultItem.
        :rtype: int
        """
        return self._record_number

    @record_number.setter
    def record_number(self, record_number):
        """Sets the record_number of this UtteranceLevelTestResultItem.


        :param record_number: The record_number of this UtteranceLevelTestResultItem.
        :type record_number: int
        """
        if record_number is None:
            raise ValueError("Invalid value for `record_number`, must not be `None`")

        self._record_number = record_number

    @property
    def conversation_id(self):
        """Gets the conversation_id of this UtteranceLevelTestResultItem.


        :return: The conversation_id of this UtteranceLevelTestResultItem.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this UtteranceLevelTestResultItem.


        :param conversation_id: The conversation_id of this UtteranceLevelTestResultItem.
        :type conversation_id: str
        """

        self._conversation_id = conversation_id

    @property
    def turn_result(self):
        """Gets the turn_result of this UtteranceLevelTestResultItem.


        :return: The turn_result of this UtteranceLevelTestResultItem.
        :rtype: UtteranceLevelTestResultItemTurnResult
        """
        return self._turn_result

    @turn_result.setter
    def turn_result(self, turn_result):
        """Sets the turn_result of this UtteranceLevelTestResultItem.


        :param turn_result: The turn_result of this UtteranceLevelTestResultItem.
        :type turn_result: UtteranceLevelTestResultItemTurnResult
        """
        if turn_result is None:
            raise ValueError("Invalid value for `turn_result`, must not be `None`")

        self._turn_result = turn_result
