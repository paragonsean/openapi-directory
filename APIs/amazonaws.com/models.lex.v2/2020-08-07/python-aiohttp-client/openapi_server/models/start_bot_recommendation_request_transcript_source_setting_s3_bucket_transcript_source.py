# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_bucket_transcript_source_path_format import S3BucketTranscriptSourcePathFormat
from openapi_server.models.s3_bucket_transcript_source_transcript_filter import S3BucketTranscriptSourceTranscriptFilter
from openapi_server.models.transcript_format import TranscriptFormat
from openapi_server import util


class StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_bucket_name: str=None, path_format: S3BucketTranscriptSourcePathFormat=None, transcript_format: TranscriptFormat=None, transcript_filter: S3BucketTranscriptSourceTranscriptFilter=None, kms_key_arn: str=None):
        """StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource - a model defined in OpenAPI

        :param s3_bucket_name: The s3_bucket_name of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :param path_format: The path_format of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :param transcript_format: The transcript_format of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :param transcript_filter: The transcript_filter of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :param kms_key_arn: The kms_key_arn of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        """
        self.openapi_types = {
            's3_bucket_name': str,
            'path_format': S3BucketTranscriptSourcePathFormat,
            'transcript_format': TranscriptFormat,
            'transcript_filter': S3BucketTranscriptSourceTranscriptFilter,
            'kms_key_arn': str
        }

        self.attribute_map = {
            's3_bucket_name': 's3BucketName',
            'path_format': 'pathFormat',
            'transcript_format': 'transcriptFormat',
            'transcript_filter': 'transcriptFilter',
            'kms_key_arn': 'kmsKeyArn'
        }

        self._s3_bucket_name = s3_bucket_name
        self._path_format = path_format
        self._transcript_format = transcript_format
        self._transcript_filter = transcript_filter
        self._kms_key_arn = kms_key_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartBotRecommendation_request_transcriptSourceSetting_s3BucketTranscriptSource of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_bucket_name(self):
        """Gets the s3_bucket_name of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.


        :return: The s3_bucket_name of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :rtype: str
        """
        return self._s3_bucket_name

    @s3_bucket_name.setter
    def s3_bucket_name(self, s3_bucket_name):
        """Sets the s3_bucket_name of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.


        :param s3_bucket_name: The s3_bucket_name of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :type s3_bucket_name: str
        """
        if s3_bucket_name is None:
            raise ValueError("Invalid value for `s3_bucket_name`, must not be `None`")

        self._s3_bucket_name = s3_bucket_name

    @property
    def path_format(self):
        """Gets the path_format of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.


        :return: The path_format of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :rtype: S3BucketTranscriptSourcePathFormat
        """
        return self._path_format

    @path_format.setter
    def path_format(self, path_format):
        """Sets the path_format of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.


        :param path_format: The path_format of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :type path_format: S3BucketTranscriptSourcePathFormat
        """

        self._path_format = path_format

    @property
    def transcript_format(self):
        """Gets the transcript_format of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.


        :return: The transcript_format of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :rtype: TranscriptFormat
        """
        return self._transcript_format

    @transcript_format.setter
    def transcript_format(self, transcript_format):
        """Sets the transcript_format of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.


        :param transcript_format: The transcript_format of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :type transcript_format: TranscriptFormat
        """
        if transcript_format is None:
            raise ValueError("Invalid value for `transcript_format`, must not be `None`")

        self._transcript_format = transcript_format

    @property
    def transcript_filter(self):
        """Gets the transcript_filter of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.


        :return: The transcript_filter of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :rtype: S3BucketTranscriptSourceTranscriptFilter
        """
        return self._transcript_filter

    @transcript_filter.setter
    def transcript_filter(self, transcript_filter):
        """Sets the transcript_filter of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.


        :param transcript_filter: The transcript_filter of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :type transcript_filter: S3BucketTranscriptSourceTranscriptFilter
        """

        self._transcript_filter = transcript_filter

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.


        :return: The kms_key_arn of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.


        :param kms_key_arn: The kms_key_arn of this StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.
        :type kms_key_arn: str
        """

        self._kms_key_arn = kms_key_arn
