# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_bot_recommendation_request_transcript_source_setting import StartBotRecommendationRequestTranscriptSourceSetting
from openapi_server.models.update_bot_recommendation_request_encryption_setting import UpdateBotRecommendationRequestEncryptionSetting
from openapi_server import util


class StartBotRecommendationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transcript_source_setting: StartBotRecommendationRequestTranscriptSourceSetting=None, encryption_setting: UpdateBotRecommendationRequestEncryptionSetting=None):
        """StartBotRecommendationRequest - a model defined in OpenAPI

        :param transcript_source_setting: The transcript_source_setting of this StartBotRecommendationRequest.
        :param encryption_setting: The encryption_setting of this StartBotRecommendationRequest.
        """
        self.openapi_types = {
            'transcript_source_setting': StartBotRecommendationRequestTranscriptSourceSetting,
            'encryption_setting': UpdateBotRecommendationRequestEncryptionSetting
        }

        self.attribute_map = {
            'transcript_source_setting': 'transcriptSourceSetting',
            'encryption_setting': 'encryptionSetting'
        }

        self._transcript_source_setting = transcript_source_setting
        self._encryption_setting = encryption_setting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartBotRecommendationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartBotRecommendation_request of this StartBotRecommendationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transcript_source_setting(self):
        """Gets the transcript_source_setting of this StartBotRecommendationRequest.


        :return: The transcript_source_setting of this StartBotRecommendationRequest.
        :rtype: StartBotRecommendationRequestTranscriptSourceSetting
        """
        return self._transcript_source_setting

    @transcript_source_setting.setter
    def transcript_source_setting(self, transcript_source_setting):
        """Sets the transcript_source_setting of this StartBotRecommendationRequest.


        :param transcript_source_setting: The transcript_source_setting of this StartBotRecommendationRequest.
        :type transcript_source_setting: StartBotRecommendationRequestTranscriptSourceSetting
        """
        if transcript_source_setting is None:
            raise ValueError("Invalid value for `transcript_source_setting`, must not be `None`")

        self._transcript_source_setting = transcript_source_setting

    @property
    def encryption_setting(self):
        """Gets the encryption_setting of this StartBotRecommendationRequest.


        :return: The encryption_setting of this StartBotRecommendationRequest.
        :rtype: UpdateBotRecommendationRequestEncryptionSetting
        """
        return self._encryption_setting

    @encryption_setting.setter
    def encryption_setting(self, encryption_setting):
        """Sets the encryption_setting of this StartBotRecommendationRequest.


        :param encryption_setting: The encryption_setting of this StartBotRecommendationRequest.
        :type encryption_setting: UpdateBotRecommendationRequestEncryptionSetting
        """

        self._encryption_setting = encryption_setting
