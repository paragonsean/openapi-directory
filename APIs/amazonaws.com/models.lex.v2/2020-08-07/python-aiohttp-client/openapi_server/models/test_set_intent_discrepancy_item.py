# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestSetIntentDiscrepancyItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, intent_name: str=None, error_message: str=None):
        """TestSetIntentDiscrepancyItem - a model defined in OpenAPI

        :param intent_name: The intent_name of this TestSetIntentDiscrepancyItem.
        :param error_message: The error_message of this TestSetIntentDiscrepancyItem.
        """
        self.openapi_types = {
            'intent_name': str,
            'error_message': str
        }

        self.attribute_map = {
            'intent_name': 'intentName',
            'error_message': 'errorMessage'
        }

        self._intent_name = intent_name
        self._error_message = error_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestSetIntentDiscrepancyItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestSetIntentDiscrepancyItem of this TestSetIntentDiscrepancyItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def intent_name(self):
        """Gets the intent_name of this TestSetIntentDiscrepancyItem.


        :return: The intent_name of this TestSetIntentDiscrepancyItem.
        :rtype: str
        """
        return self._intent_name

    @intent_name.setter
    def intent_name(self, intent_name):
        """Sets the intent_name of this TestSetIntentDiscrepancyItem.


        :param intent_name: The intent_name of this TestSetIntentDiscrepancyItem.
        :type intent_name: str
        """
        if intent_name is None:
            raise ValueError("Invalid value for `intent_name`, must not be `None`")

        self._intent_name = intent_name

    @property
    def error_message(self):
        """Gets the error_message of this TestSetIntentDiscrepancyItem.


        :return: The error_message of this TestSetIntentDiscrepancyItem.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this TestSetIntentDiscrepancyItem.


        :param error_message: The error_message of this TestSetIntentDiscrepancyItem.
        :type error_message: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")

        self._error_message = error_message
