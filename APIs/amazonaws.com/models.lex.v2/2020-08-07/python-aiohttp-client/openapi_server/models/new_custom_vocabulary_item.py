# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewCustomVocabularyItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, phrase: str=None, weight: int=None, display_as: str=None):
        """NewCustomVocabularyItem - a model defined in OpenAPI

        :param phrase: The phrase of this NewCustomVocabularyItem.
        :param weight: The weight of this NewCustomVocabularyItem.
        :param display_as: The display_as of this NewCustomVocabularyItem.
        """
        self.openapi_types = {
            'phrase': str,
            'weight': int,
            'display_as': str
        }

        self.attribute_map = {
            'phrase': 'phrase',
            'weight': 'weight',
            'display_as': 'displayAs'
        }

        self._phrase = phrase
        self._weight = weight
        self._display_as = display_as

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewCustomVocabularyItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewCustomVocabularyItem of this NewCustomVocabularyItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def phrase(self):
        """Gets the phrase of this NewCustomVocabularyItem.


        :return: The phrase of this NewCustomVocabularyItem.
        :rtype: str
        """
        return self._phrase

    @phrase.setter
    def phrase(self, phrase):
        """Sets the phrase of this NewCustomVocabularyItem.


        :param phrase: The phrase of this NewCustomVocabularyItem.
        :type phrase: str
        """
        if phrase is None:
            raise ValueError("Invalid value for `phrase`, must not be `None`")

        self._phrase = phrase

    @property
    def weight(self):
        """Gets the weight of this NewCustomVocabularyItem.


        :return: The weight of this NewCustomVocabularyItem.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this NewCustomVocabularyItem.


        :param weight: The weight of this NewCustomVocabularyItem.
        :type weight: int
        """

        self._weight = weight

    @property
    def display_as(self):
        """Gets the display_as of this NewCustomVocabularyItem.


        :return: The display_as of this NewCustomVocabularyItem.
        :rtype: str
        """
        return self._display_as

    @display_as.setter
    def display_as(self, display_as):
        """Sets the display_as of this NewCustomVocabularyItem.


        :param display_as: The display_as of this NewCustomVocabularyItem.
        :type display_as: str
        """

        self._display_as = display_as
