# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_session_state_specification_runtime_hints import InputSessionStateSpecificationRuntimeHints
from openapi_server import util


class UserTurnInputSpecificationSessionState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, session_attributes: Dict=None, active_contexts: List=None, runtime_hints: InputSessionStateSpecificationRuntimeHints=None):
        """UserTurnInputSpecificationSessionState - a model defined in OpenAPI

        :param session_attributes: The session_attributes of this UserTurnInputSpecificationSessionState.
        :param active_contexts: The active_contexts of this UserTurnInputSpecificationSessionState.
        :param runtime_hints: The runtime_hints of this UserTurnInputSpecificationSessionState.
        """
        self.openapi_types = {
            'session_attributes': Dict,
            'active_contexts': List,
            'runtime_hints': InputSessionStateSpecificationRuntimeHints
        }

        self.attribute_map = {
            'session_attributes': 'sessionAttributes',
            'active_contexts': 'activeContexts',
            'runtime_hints': 'runtimeHints'
        }

        self._session_attributes = session_attributes
        self._active_contexts = active_contexts
        self._runtime_hints = runtime_hints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserTurnInputSpecificationSessionState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserTurnInputSpecification_sessionState of this UserTurnInputSpecificationSessionState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_attributes(self):
        """Gets the session_attributes of this UserTurnInputSpecificationSessionState.


        :return: The session_attributes of this UserTurnInputSpecificationSessionState.
        :rtype: Dict
        """
        return self._session_attributes

    @session_attributes.setter
    def session_attributes(self, session_attributes):
        """Sets the session_attributes of this UserTurnInputSpecificationSessionState.


        :param session_attributes: The session_attributes of this UserTurnInputSpecificationSessionState.
        :type session_attributes: Dict
        """

        self._session_attributes = session_attributes

    @property
    def active_contexts(self):
        """Gets the active_contexts of this UserTurnInputSpecificationSessionState.


        :return: The active_contexts of this UserTurnInputSpecificationSessionState.
        :rtype: List
        """
        return self._active_contexts

    @active_contexts.setter
    def active_contexts(self, active_contexts):
        """Sets the active_contexts of this UserTurnInputSpecificationSessionState.


        :param active_contexts: The active_contexts of this UserTurnInputSpecificationSessionState.
        :type active_contexts: List
        """

        self._active_contexts = active_contexts

    @property
    def runtime_hints(self):
        """Gets the runtime_hints of this UserTurnInputSpecificationSessionState.


        :return: The runtime_hints of this UserTurnInputSpecificationSessionState.
        :rtype: InputSessionStateSpecificationRuntimeHints
        """
        return self._runtime_hints

    @runtime_hints.setter
    def runtime_hints(self, runtime_hints):
        """Sets the runtime_hints of this UserTurnInputSpecificationSessionState.


        :param runtime_hints: The runtime_hints of this UserTurnInputSpecificationSessionState.
        :type runtime_hints: InputSessionStateSpecificationRuntimeHints
        """

        self._runtime_hints = runtime_hints
