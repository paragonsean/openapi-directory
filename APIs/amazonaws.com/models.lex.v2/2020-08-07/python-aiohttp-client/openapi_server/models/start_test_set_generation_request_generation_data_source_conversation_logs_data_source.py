# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conversation_logs_data_source_filter import ConversationLogsDataSourceFilter
from openapi_server import util


class StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_id: str=None, bot_alias_id: str=None, locale_id: str=None, filter: ConversationLogsDataSourceFilter=None):
        """StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource - a model defined in OpenAPI

        :param bot_id: The bot_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        :param bot_alias_id: The bot_alias_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        :param locale_id: The locale_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        :param filter: The filter of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        """
        self.openapi_types = {
            'bot_id': str,
            'bot_alias_id': str,
            'locale_id': str,
            'filter': ConversationLogsDataSourceFilter
        }

        self.attribute_map = {
            'bot_id': 'botId',
            'bot_alias_id': 'botAliasId',
            'locale_id': 'localeId',
            'filter': 'filter'
        }

        self._bot_id = bot_id
        self._bot_alias_id = bot_alias_id
        self._locale_id = locale_id
        self._filter = filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartTestSetGeneration_request_generationDataSource_conversationLogsDataSource of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_id(self):
        """Gets the bot_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.


        :return: The bot_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        :rtype: str
        """
        return self._bot_id

    @bot_id.setter
    def bot_id(self, bot_id):
        """Sets the bot_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.


        :param bot_id: The bot_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        :type bot_id: str
        """
        if bot_id is None:
            raise ValueError("Invalid value for `bot_id`, must not be `None`")

        self._bot_id = bot_id

    @property
    def bot_alias_id(self):
        """Gets the bot_alias_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.


        :return: The bot_alias_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        :rtype: str
        """
        return self._bot_alias_id

    @bot_alias_id.setter
    def bot_alias_id(self, bot_alias_id):
        """Sets the bot_alias_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.


        :param bot_alias_id: The bot_alias_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        :type bot_alias_id: str
        """
        if bot_alias_id is None:
            raise ValueError("Invalid value for `bot_alias_id`, must not be `None`")

        self._bot_alias_id = bot_alias_id

    @property
    def locale_id(self):
        """Gets the locale_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.


        :return: The locale_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        :rtype: str
        """
        return self._locale_id

    @locale_id.setter
    def locale_id(self, locale_id):
        """Sets the locale_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.


        :param locale_id: The locale_id of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        :type locale_id: str
        """
        if locale_id is None:
            raise ValueError("Invalid value for `locale_id`, must not be `None`")

        self._locale_id = locale_id

    @property
    def filter(self):
        """Gets the filter of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.


        :return: The filter of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        :rtype: ConversationLogsDataSourceFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.


        :param filter: The filter of this StartTestSetGenerationRequestGenerationDataSourceConversationLogsDataSource.
        :type filter: ConversationLogsDataSourceFilter
        """
        if filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")

        self._filter = filter
