# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_path_filter import AnalyticsPathFilter
from openapi_server import util


class ListIntentPathsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_date_time: datetime=None, end_date_time: datetime=None, intent_path: str=None, filters: List[AnalyticsPathFilter]=None):
        """ListIntentPathsRequest - a model defined in OpenAPI

        :param start_date_time: The start_date_time of this ListIntentPathsRequest.
        :param end_date_time: The end_date_time of this ListIntentPathsRequest.
        :param intent_path: The intent_path of this ListIntentPathsRequest.
        :param filters: The filters of this ListIntentPathsRequest.
        """
        self.openapi_types = {
            'start_date_time': datetime,
            'end_date_time': datetime,
            'intent_path': str,
            'filters': List[AnalyticsPathFilter]
        }

        self.attribute_map = {
            'start_date_time': 'startDateTime',
            'end_date_time': 'endDateTime',
            'intent_path': 'intentPath',
            'filters': 'filters'
        }

        self._start_date_time = start_date_time
        self._end_date_time = end_date_time
        self._intent_path = intent_path
        self._filters = filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListIntentPathsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListIntentPaths_request of this ListIntentPathsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ListIntentPathsRequest.

        The date and time that marks the beginning of the range of time for which you want to see intent path metrics.

        :return: The start_date_time of this ListIntentPathsRequest.
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ListIntentPathsRequest.

        The date and time that marks the beginning of the range of time for which you want to see intent path metrics.

        :param start_date_time: The start_date_time of this ListIntentPathsRequest.
        :type start_date_time: datetime
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ListIntentPathsRequest.

        The date and time that marks the end of the range of time for which you want to see intent path metrics.

        :return: The end_date_time of this ListIntentPathsRequest.
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ListIntentPathsRequest.

        The date and time that marks the end of the range of time for which you want to see intent path metrics.

        :param end_date_time: The end_date_time of this ListIntentPathsRequest.
        :type end_date_time: datetime
        """
        if end_date_time is None:
            raise ValueError("Invalid value for `end_date_time`, must not be `None`")

        self._end_date_time = end_date_time

    @property
    def intent_path(self):
        """Gets the intent_path of this ListIntentPathsRequest.

        <p>The intent path for which you want to retrieve metrics. Use a forward slash to separate intents in the path. For example:</p> <ul> <li> <p>/BookCar</p> </li> <li> <p>/BookCar/BookHotel</p> </li> <li> <p>/BookHotel/BookCar</p> </li> </ul>

        :return: The intent_path of this ListIntentPathsRequest.
        :rtype: str
        """
        return self._intent_path

    @intent_path.setter
    def intent_path(self, intent_path):
        """Sets the intent_path of this ListIntentPathsRequest.

        <p>The intent path for which you want to retrieve metrics. Use a forward slash to separate intents in the path. For example:</p> <ul> <li> <p>/BookCar</p> </li> <li> <p>/BookCar/BookHotel</p> </li> <li> <p>/BookHotel/BookCar</p> </li> </ul>

        :param intent_path: The intent_path of this ListIntentPathsRequest.
        :type intent_path: str
        """
        if intent_path is None:
            raise ValueError("Invalid value for `intent_path`, must not be `None`")
        if intent_path is not None and len(intent_path) > 1024:
            raise ValueError("Invalid value for `intent_path`, length must be less than or equal to `1024`")
        if intent_path is not None and len(intent_path) < 1:
            raise ValueError("Invalid value for `intent_path`, length must be greater than or equal to `1`")

        self._intent_path = intent_path

    @property
    def filters(self):
        """Gets the filters of this ListIntentPathsRequest.

        A list of objects, each describes a condition by which you want to filter the results.

        :return: The filters of this ListIntentPathsRequest.
        :rtype: List[AnalyticsPathFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListIntentPathsRequest.

        A list of objects, each describes a condition by which you want to filter the results.

        :param filters: The filters of this ListIntentPathsRequest.
        :type filters: List[AnalyticsPathFilter]
        """
        if filters is not None and len(filters) > 5:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `5`")
        if filters is not None and len(filters) < 1:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `1`")

        self._filters = filters
