# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_modality import AnalyticsModality
from openapi_server.models.conversation_end_state import ConversationEndState
from openapi_server import util


class SessionSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_alias_id: str=None, bot_version: str=None, locale_id: str=None, channel: str=None, session_id: str=None, conversation_start_time: datetime=None, conversation_end_time: datetime=None, conversation_duration_seconds: int=None, conversation_end_state: ConversationEndState=None, mode: AnalyticsModality=None, number_of_turns: int=None, invoked_intent_samples: List=None, originating_request_id: str=None):
        """SessionSpecification - a model defined in OpenAPI

        :param bot_alias_id: The bot_alias_id of this SessionSpecification.
        :param bot_version: The bot_version of this SessionSpecification.
        :param locale_id: The locale_id of this SessionSpecification.
        :param channel: The channel of this SessionSpecification.
        :param session_id: The session_id of this SessionSpecification.
        :param conversation_start_time: The conversation_start_time of this SessionSpecification.
        :param conversation_end_time: The conversation_end_time of this SessionSpecification.
        :param conversation_duration_seconds: The conversation_duration_seconds of this SessionSpecification.
        :param conversation_end_state: The conversation_end_state of this SessionSpecification.
        :param mode: The mode of this SessionSpecification.
        :param number_of_turns: The number_of_turns of this SessionSpecification.
        :param invoked_intent_samples: The invoked_intent_samples of this SessionSpecification.
        :param originating_request_id: The originating_request_id of this SessionSpecification.
        """
        self.openapi_types = {
            'bot_alias_id': str,
            'bot_version': str,
            'locale_id': str,
            'channel': str,
            'session_id': str,
            'conversation_start_time': datetime,
            'conversation_end_time': datetime,
            'conversation_duration_seconds': int,
            'conversation_end_state': ConversationEndState,
            'mode': AnalyticsModality,
            'number_of_turns': int,
            'invoked_intent_samples': List,
            'originating_request_id': str
        }

        self.attribute_map = {
            'bot_alias_id': 'botAliasId',
            'bot_version': 'botVersion',
            'locale_id': 'localeId',
            'channel': 'channel',
            'session_id': 'sessionId',
            'conversation_start_time': 'conversationStartTime',
            'conversation_end_time': 'conversationEndTime',
            'conversation_duration_seconds': 'conversationDurationSeconds',
            'conversation_end_state': 'conversationEndState',
            'mode': 'mode',
            'number_of_turns': 'numberOfTurns',
            'invoked_intent_samples': 'invokedIntentSamples',
            'originating_request_id': 'originatingRequestId'
        }

        self._bot_alias_id = bot_alias_id
        self._bot_version = bot_version
        self._locale_id = locale_id
        self._channel = channel
        self._session_id = session_id
        self._conversation_start_time = conversation_start_time
        self._conversation_end_time = conversation_end_time
        self._conversation_duration_seconds = conversation_duration_seconds
        self._conversation_end_state = conversation_end_state
        self._mode = mode
        self._number_of_turns = number_of_turns
        self._invoked_intent_samples = invoked_intent_samples
        self._originating_request_id = originating_request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionSpecification of this SessionSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_alias_id(self):
        """Gets the bot_alias_id of this SessionSpecification.


        :return: The bot_alias_id of this SessionSpecification.
        :rtype: str
        """
        return self._bot_alias_id

    @bot_alias_id.setter
    def bot_alias_id(self, bot_alias_id):
        """Sets the bot_alias_id of this SessionSpecification.


        :param bot_alias_id: The bot_alias_id of this SessionSpecification.
        :type bot_alias_id: str
        """

        self._bot_alias_id = bot_alias_id

    @property
    def bot_version(self):
        """Gets the bot_version of this SessionSpecification.


        :return: The bot_version of this SessionSpecification.
        :rtype: str
        """
        return self._bot_version

    @bot_version.setter
    def bot_version(self, bot_version):
        """Sets the bot_version of this SessionSpecification.


        :param bot_version: The bot_version of this SessionSpecification.
        :type bot_version: str
        """

        self._bot_version = bot_version

    @property
    def locale_id(self):
        """Gets the locale_id of this SessionSpecification.


        :return: The locale_id of this SessionSpecification.
        :rtype: str
        """
        return self._locale_id

    @locale_id.setter
    def locale_id(self, locale_id):
        """Sets the locale_id of this SessionSpecification.


        :param locale_id: The locale_id of this SessionSpecification.
        :type locale_id: str
        """

        self._locale_id = locale_id

    @property
    def channel(self):
        """Gets the channel of this SessionSpecification.


        :return: The channel of this SessionSpecification.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this SessionSpecification.


        :param channel: The channel of this SessionSpecification.
        :type channel: str
        """

        self._channel = channel

    @property
    def session_id(self):
        """Gets the session_id of this SessionSpecification.


        :return: The session_id of this SessionSpecification.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this SessionSpecification.


        :param session_id: The session_id of this SessionSpecification.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def conversation_start_time(self):
        """Gets the conversation_start_time of this SessionSpecification.


        :return: The conversation_start_time of this SessionSpecification.
        :rtype: datetime
        """
        return self._conversation_start_time

    @conversation_start_time.setter
    def conversation_start_time(self, conversation_start_time):
        """Sets the conversation_start_time of this SessionSpecification.


        :param conversation_start_time: The conversation_start_time of this SessionSpecification.
        :type conversation_start_time: datetime
        """

        self._conversation_start_time = conversation_start_time

    @property
    def conversation_end_time(self):
        """Gets the conversation_end_time of this SessionSpecification.


        :return: The conversation_end_time of this SessionSpecification.
        :rtype: datetime
        """
        return self._conversation_end_time

    @conversation_end_time.setter
    def conversation_end_time(self, conversation_end_time):
        """Sets the conversation_end_time of this SessionSpecification.


        :param conversation_end_time: The conversation_end_time of this SessionSpecification.
        :type conversation_end_time: datetime
        """

        self._conversation_end_time = conversation_end_time

    @property
    def conversation_duration_seconds(self):
        """Gets the conversation_duration_seconds of this SessionSpecification.


        :return: The conversation_duration_seconds of this SessionSpecification.
        :rtype: int
        """
        return self._conversation_duration_seconds

    @conversation_duration_seconds.setter
    def conversation_duration_seconds(self, conversation_duration_seconds):
        """Sets the conversation_duration_seconds of this SessionSpecification.


        :param conversation_duration_seconds: The conversation_duration_seconds of this SessionSpecification.
        :type conversation_duration_seconds: int
        """

        self._conversation_duration_seconds = conversation_duration_seconds

    @property
    def conversation_end_state(self):
        """Gets the conversation_end_state of this SessionSpecification.


        :return: The conversation_end_state of this SessionSpecification.
        :rtype: ConversationEndState
        """
        return self._conversation_end_state

    @conversation_end_state.setter
    def conversation_end_state(self, conversation_end_state):
        """Sets the conversation_end_state of this SessionSpecification.


        :param conversation_end_state: The conversation_end_state of this SessionSpecification.
        :type conversation_end_state: ConversationEndState
        """

        self._conversation_end_state = conversation_end_state

    @property
    def mode(self):
        """Gets the mode of this SessionSpecification.


        :return: The mode of this SessionSpecification.
        :rtype: AnalyticsModality
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this SessionSpecification.


        :param mode: The mode of this SessionSpecification.
        :type mode: AnalyticsModality
        """

        self._mode = mode

    @property
    def number_of_turns(self):
        """Gets the number_of_turns of this SessionSpecification.


        :return: The number_of_turns of this SessionSpecification.
        :rtype: int
        """
        return self._number_of_turns

    @number_of_turns.setter
    def number_of_turns(self, number_of_turns):
        """Sets the number_of_turns of this SessionSpecification.


        :param number_of_turns: The number_of_turns of this SessionSpecification.
        :type number_of_turns: int
        """

        self._number_of_turns = number_of_turns

    @property
    def invoked_intent_samples(self):
        """Gets the invoked_intent_samples of this SessionSpecification.


        :return: The invoked_intent_samples of this SessionSpecification.
        :rtype: List
        """
        return self._invoked_intent_samples

    @invoked_intent_samples.setter
    def invoked_intent_samples(self, invoked_intent_samples):
        """Sets the invoked_intent_samples of this SessionSpecification.


        :param invoked_intent_samples: The invoked_intent_samples of this SessionSpecification.
        :type invoked_intent_samples: List
        """

        self._invoked_intent_samples = invoked_intent_samples

    @property
    def originating_request_id(self):
        """Gets the originating_request_id of this SessionSpecification.


        :return: The originating_request_id of this SessionSpecification.
        :rtype: str
        """
        return self._originating_request_id

    @originating_request_id.setter
    def originating_request_id(self, originating_request_id):
        """Sets the originating_request_id of this SessionSpecification.


        :param originating_request_id: The originating_request_id of this SessionSpecification.
        :type originating_request_id: str
        """

        self._originating_request_id = originating_request_id
