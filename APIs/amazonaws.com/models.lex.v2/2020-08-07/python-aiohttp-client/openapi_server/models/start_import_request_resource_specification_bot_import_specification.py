# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_privacy import DataPrivacy
from openapi_server import util


class StartImportRequestResourceSpecificationBotImportSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_name: str=None, role_arn: str=None, data_privacy: DataPrivacy=None, idle_session_ttlin_seconds: int=None, bot_tags: Dict=None, test_bot_alias_tags: Dict=None):
        """StartImportRequestResourceSpecificationBotImportSpecification - a model defined in OpenAPI

        :param bot_name: The bot_name of this StartImportRequestResourceSpecificationBotImportSpecification.
        :param role_arn: The role_arn of this StartImportRequestResourceSpecificationBotImportSpecification.
        :param data_privacy: The data_privacy of this StartImportRequestResourceSpecificationBotImportSpecification.
        :param idle_session_ttlin_seconds: The idle_session_ttlin_seconds of this StartImportRequestResourceSpecificationBotImportSpecification.
        :param bot_tags: The bot_tags of this StartImportRequestResourceSpecificationBotImportSpecification.
        :param test_bot_alias_tags: The test_bot_alias_tags of this StartImportRequestResourceSpecificationBotImportSpecification.
        """
        self.openapi_types = {
            'bot_name': str,
            'role_arn': str,
            'data_privacy': DataPrivacy,
            'idle_session_ttlin_seconds': int,
            'bot_tags': Dict,
            'test_bot_alias_tags': Dict
        }

        self.attribute_map = {
            'bot_name': 'botName',
            'role_arn': 'roleArn',
            'data_privacy': 'dataPrivacy',
            'idle_session_ttlin_seconds': 'idleSessionTTLInSeconds',
            'bot_tags': 'botTags',
            'test_bot_alias_tags': 'testBotAliasTags'
        }

        self._bot_name = bot_name
        self._role_arn = role_arn
        self._data_privacy = data_privacy
        self._idle_session_ttlin_seconds = idle_session_ttlin_seconds
        self._bot_tags = bot_tags
        self._test_bot_alias_tags = test_bot_alias_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartImportRequestResourceSpecificationBotImportSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartImport_request_resourceSpecification_botImportSpecification of this StartImportRequestResourceSpecificationBotImportSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_name(self):
        """Gets the bot_name of this StartImportRequestResourceSpecificationBotImportSpecification.


        :return: The bot_name of this StartImportRequestResourceSpecificationBotImportSpecification.
        :rtype: str
        """
        return self._bot_name

    @bot_name.setter
    def bot_name(self, bot_name):
        """Sets the bot_name of this StartImportRequestResourceSpecificationBotImportSpecification.


        :param bot_name: The bot_name of this StartImportRequestResourceSpecificationBotImportSpecification.
        :type bot_name: str
        """
        if bot_name is None:
            raise ValueError("Invalid value for `bot_name`, must not be `None`")

        self._bot_name = bot_name

    @property
    def role_arn(self):
        """Gets the role_arn of this StartImportRequestResourceSpecificationBotImportSpecification.


        :return: The role_arn of this StartImportRequestResourceSpecificationBotImportSpecification.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this StartImportRequestResourceSpecificationBotImportSpecification.


        :param role_arn: The role_arn of this StartImportRequestResourceSpecificationBotImportSpecification.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def data_privacy(self):
        """Gets the data_privacy of this StartImportRequestResourceSpecificationBotImportSpecification.


        :return: The data_privacy of this StartImportRequestResourceSpecificationBotImportSpecification.
        :rtype: DataPrivacy
        """
        return self._data_privacy

    @data_privacy.setter
    def data_privacy(self, data_privacy):
        """Sets the data_privacy of this StartImportRequestResourceSpecificationBotImportSpecification.


        :param data_privacy: The data_privacy of this StartImportRequestResourceSpecificationBotImportSpecification.
        :type data_privacy: DataPrivacy
        """
        if data_privacy is None:
            raise ValueError("Invalid value for `data_privacy`, must not be `None`")

        self._data_privacy = data_privacy

    @property
    def idle_session_ttlin_seconds(self):
        """Gets the idle_session_ttlin_seconds of this StartImportRequestResourceSpecificationBotImportSpecification.


        :return: The idle_session_ttlin_seconds of this StartImportRequestResourceSpecificationBotImportSpecification.
        :rtype: int
        """
        return self._idle_session_ttlin_seconds

    @idle_session_ttlin_seconds.setter
    def idle_session_ttlin_seconds(self, idle_session_ttlin_seconds):
        """Sets the idle_session_ttlin_seconds of this StartImportRequestResourceSpecificationBotImportSpecification.


        :param idle_session_ttlin_seconds: The idle_session_ttlin_seconds of this StartImportRequestResourceSpecificationBotImportSpecification.
        :type idle_session_ttlin_seconds: int
        """

        self._idle_session_ttlin_seconds = idle_session_ttlin_seconds

    @property
    def bot_tags(self):
        """Gets the bot_tags of this StartImportRequestResourceSpecificationBotImportSpecification.


        :return: The bot_tags of this StartImportRequestResourceSpecificationBotImportSpecification.
        :rtype: Dict
        """
        return self._bot_tags

    @bot_tags.setter
    def bot_tags(self, bot_tags):
        """Sets the bot_tags of this StartImportRequestResourceSpecificationBotImportSpecification.


        :param bot_tags: The bot_tags of this StartImportRequestResourceSpecificationBotImportSpecification.
        :type bot_tags: Dict
        """

        self._bot_tags = bot_tags

    @property
    def test_bot_alias_tags(self):
        """Gets the test_bot_alias_tags of this StartImportRequestResourceSpecificationBotImportSpecification.


        :return: The test_bot_alias_tags of this StartImportRequestResourceSpecificationBotImportSpecification.
        :rtype: Dict
        """
        return self._test_bot_alias_tags

    @test_bot_alias_tags.setter
    def test_bot_alias_tags(self, test_bot_alias_tags):
        """Sets the test_bot_alias_tags of this StartImportRequestResourceSpecificationBotImportSpecification.


        :param test_bot_alias_tags: The test_bot_alias_tags of this StartImportRequestResourceSpecificationBotImportSpecification.
        :type test_bot_alias_tags: Dict
        """

        self._test_bot_alias_tags = test_bot_alias_tags
