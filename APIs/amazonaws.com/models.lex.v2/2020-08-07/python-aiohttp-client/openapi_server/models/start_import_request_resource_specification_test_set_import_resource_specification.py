# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.test_set_import_resource_specification_import_input_location import TestSetImportResourceSpecificationImportInputLocation
from openapi_server.models.test_set_import_resource_specification_storage_location import TestSetImportResourceSpecificationStorageLocation
from openapi_server.models.test_set_modality import TestSetModality
from openapi_server import util


class StartImportRequestResourceSpecificationTestSetImportResourceSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, test_set_name: str=None, description: str=None, role_arn: str=None, storage_location: TestSetImportResourceSpecificationStorageLocation=None, import_input_location: TestSetImportResourceSpecificationImportInputLocation=None, modality: TestSetModality=None, test_set_tags: Dict=None):
        """StartImportRequestResourceSpecificationTestSetImportResourceSpecification - a model defined in OpenAPI

        :param test_set_name: The test_set_name of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :param description: The description of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :param role_arn: The role_arn of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :param storage_location: The storage_location of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :param import_input_location: The import_input_location of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :param modality: The modality of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :param test_set_tags: The test_set_tags of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        """
        self.openapi_types = {
            'test_set_name': str,
            'description': str,
            'role_arn': str,
            'storage_location': TestSetImportResourceSpecificationStorageLocation,
            'import_input_location': TestSetImportResourceSpecificationImportInputLocation,
            'modality': TestSetModality,
            'test_set_tags': Dict
        }

        self.attribute_map = {
            'test_set_name': 'testSetName',
            'description': 'description',
            'role_arn': 'roleArn',
            'storage_location': 'storageLocation',
            'import_input_location': 'importInputLocation',
            'modality': 'modality',
            'test_set_tags': 'testSetTags'
        }

        self._test_set_name = test_set_name
        self._description = description
        self._role_arn = role_arn
        self._storage_location = storage_location
        self._import_input_location = import_input_location
        self._modality = modality
        self._test_set_tags = test_set_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartImportRequestResourceSpecificationTestSetImportResourceSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartImport_request_resourceSpecification_testSetImportResourceSpecification of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def test_set_name(self):
        """Gets the test_set_name of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :return: The test_set_name of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :rtype: str
        """
        return self._test_set_name

    @test_set_name.setter
    def test_set_name(self, test_set_name):
        """Sets the test_set_name of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :param test_set_name: The test_set_name of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :type test_set_name: str
        """
        if test_set_name is None:
            raise ValueError("Invalid value for `test_set_name`, must not be `None`")

        self._test_set_name = test_set_name

    @property
    def description(self):
        """Gets the description of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :return: The description of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :param description: The description of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :type description: str
        """

        self._description = description

    @property
    def role_arn(self):
        """Gets the role_arn of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :return: The role_arn of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :param role_arn: The role_arn of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def storage_location(self):
        """Gets the storage_location of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :return: The storage_location of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :rtype: TestSetImportResourceSpecificationStorageLocation
        """
        return self._storage_location

    @storage_location.setter
    def storage_location(self, storage_location):
        """Sets the storage_location of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :param storage_location: The storage_location of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :type storage_location: TestSetImportResourceSpecificationStorageLocation
        """
        if storage_location is None:
            raise ValueError("Invalid value for `storage_location`, must not be `None`")

        self._storage_location = storage_location

    @property
    def import_input_location(self):
        """Gets the import_input_location of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :return: The import_input_location of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :rtype: TestSetImportResourceSpecificationImportInputLocation
        """
        return self._import_input_location

    @import_input_location.setter
    def import_input_location(self, import_input_location):
        """Sets the import_input_location of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :param import_input_location: The import_input_location of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :type import_input_location: TestSetImportResourceSpecificationImportInputLocation
        """
        if import_input_location is None:
            raise ValueError("Invalid value for `import_input_location`, must not be `None`")

        self._import_input_location = import_input_location

    @property
    def modality(self):
        """Gets the modality of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :return: The modality of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :rtype: TestSetModality
        """
        return self._modality

    @modality.setter
    def modality(self, modality):
        """Sets the modality of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :param modality: The modality of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :type modality: TestSetModality
        """
        if modality is None:
            raise ValueError("Invalid value for `modality`, must not be `None`")

        self._modality = modality

    @property
    def test_set_tags(self):
        """Gets the test_set_tags of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :return: The test_set_tags of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :rtype: Dict
        """
        return self._test_set_tags

    @test_set_tags.setter
    def test_set_tags(self, test_set_tags):
        """Sets the test_set_tags of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.


        :param test_set_tags: The test_set_tags of this StartImportRequestResourceSpecificationTestSetImportResourceSpecification.
        :type test_set_tags: Dict
        """

        self._test_set_tags = test_set_tags
