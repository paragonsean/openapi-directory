# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SlotPriority(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, priority: int=None, slot_id: str=None):
        """SlotPriority - a model defined in OpenAPI

        :param priority: The priority of this SlotPriority.
        :param slot_id: The slot_id of this SlotPriority.
        """
        self.openapi_types = {
            'priority': int,
            'slot_id': str
        }

        self.attribute_map = {
            'priority': 'priority',
            'slot_id': 'slotId'
        }

        self._priority = priority
        self._slot_id = slot_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlotPriority':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlotPriority of this SlotPriority.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def priority(self):
        """Gets the priority of this SlotPriority.


        :return: The priority of this SlotPriority.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SlotPriority.


        :param priority: The priority of this SlotPriority.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def slot_id(self):
        """Gets the slot_id of this SlotPriority.


        :return: The slot_id of this SlotPriority.
        :rtype: str
        """
        return self._slot_id

    @slot_id.setter
    def slot_id(self, slot_id):
        """Sets the slot_id of this SlotPriority.


        :param slot_id: The slot_id of this SlotPriority.
        :type slot_id: str
        """
        if slot_id is None:
            raise ValueError("Invalid value for `slot_id`, must not be `None`")

        self._slot_id = slot_id
