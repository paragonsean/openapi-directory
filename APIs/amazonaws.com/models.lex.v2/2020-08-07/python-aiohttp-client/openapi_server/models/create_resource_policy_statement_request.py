# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.principal import Principal
import re
from openapi_server import util


class CreateResourcePolicyStatementRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, statement_id: str=None, effect: str=None, principal: List[Principal]=None, action: List[str]=None, condition: Dict[str, Dict[str, str]]=None):
        """CreateResourcePolicyStatementRequest - a model defined in OpenAPI

        :param statement_id: The statement_id of this CreateResourcePolicyStatementRequest.
        :param effect: The effect of this CreateResourcePolicyStatementRequest.
        :param principal: The principal of this CreateResourcePolicyStatementRequest.
        :param action: The action of this CreateResourcePolicyStatementRequest.
        :param condition: The condition of this CreateResourcePolicyStatementRequest.
        """
        self.openapi_types = {
            'statement_id': str,
            'effect': str,
            'principal': List[Principal],
            'action': List[str],
            'condition': Dict[str, Dict[str, str]]
        }

        self.attribute_map = {
            'statement_id': 'statementId',
            'effect': 'effect',
            'principal': 'principal',
            'action': 'action',
            'condition': 'condition'
        }

        self._statement_id = statement_id
        self._effect = effect
        self._principal = principal
        self._action = action
        self._condition = condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateResourcePolicyStatementRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateResourcePolicyStatement_request of this CreateResourcePolicyStatementRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def statement_id(self):
        """Gets the statement_id of this CreateResourcePolicyStatementRequest.

        The name of the statement. The ID is the same as the <code>Sid</code> IAM property. The statement name must be unique within the policy. For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html\">IAM JSON policy elements: Sid</a>. 

        :return: The statement_id of this CreateResourcePolicyStatementRequest.
        :rtype: str
        """
        return self._statement_id

    @statement_id.setter
    def statement_id(self, statement_id):
        """Sets the statement_id of this CreateResourcePolicyStatementRequest.

        The name of the statement. The ID is the same as the <code>Sid</code> IAM property. The statement name must be unique within the policy. For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html\">IAM JSON policy elements: Sid</a>. 

        :param statement_id: The statement_id of this CreateResourcePolicyStatementRequest.
        :type statement_id: str
        """
        if statement_id is None:
            raise ValueError("Invalid value for `statement_id`, must not be `None`")
        if statement_id is not None and len(statement_id) > 100:
            raise ValueError("Invalid value for `statement_id`, length must be less than or equal to `100`")
        if statement_id is not None and len(statement_id) < 1:
            raise ValueError("Invalid value for `statement_id`, length must be greater than or equal to `1`")
        if statement_id is not None and not re.search(r'^([0-9a-zA-Z][_-]?){1,100}$', statement_id):
            raise ValueError("Invalid value for `statement_id`, must be a follow pattern or equal to `/^([0-9a-zA-Z][_-]?){1,100}$/`")

        self._statement_id = statement_id

    @property
    def effect(self):
        """Gets the effect of this CreateResourcePolicyStatementRequest.

        Determines whether the statement allows or denies access to the resource.

        :return: The effect of this CreateResourcePolicyStatementRequest.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this CreateResourcePolicyStatementRequest.

        Determines whether the statement allows or denies access to the resource.

        :param effect: The effect of this CreateResourcePolicyStatementRequest.
        :type effect: str
        """
        allowed_values = ["Allow", "Deny"]  # noqa: E501
        if effect not in allowed_values:
            raise ValueError(
                "Invalid value for `effect` ({0}), must be one of {1}"
                .format(effect, allowed_values)
            )

        self._effect = effect

    @property
    def principal(self):
        """Gets the principal of this CreateResourcePolicyStatementRequest.

        An IAM principal, such as an IAM user, IAM role, or Amazon Web Services services that is allowed or denied access to a resource. For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\">Amazon Web Services JSON policy elements: Principal</a>.

        :return: The principal of this CreateResourcePolicyStatementRequest.
        :rtype: List[Principal]
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this CreateResourcePolicyStatementRequest.

        An IAM principal, such as an IAM user, IAM role, or Amazon Web Services services that is allowed or denied access to a resource. For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\">Amazon Web Services JSON policy elements: Principal</a>.

        :param principal: The principal of this CreateResourcePolicyStatementRequest.
        :type principal: List[Principal]
        """
        if principal is None:
            raise ValueError("Invalid value for `principal`, must not be `None`")

        self._principal = principal

    @property
    def action(self):
        """Gets the action of this CreateResourcePolicyStatementRequest.

        The Amazon Lex action that this policy either allows or denies. The action must apply to the resource type of the specified ARN. For more information, see <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html\"> Actions, resources, and condition keys for Amazon Lex V2</a>.

        :return: The action of this CreateResourcePolicyStatementRequest.
        :rtype: List[str]
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateResourcePolicyStatementRequest.

        The Amazon Lex action that this policy either allows or denies. The action must apply to the resource type of the specified ARN. For more information, see <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html\"> Actions, resources, and condition keys for Amazon Lex V2</a>.

        :param action: The action of this CreateResourcePolicyStatementRequest.
        :type action: List[str]
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def condition(self):
        """Gets the condition of this CreateResourcePolicyStatementRequest.

        <p>Specifies a condition when the policy is in effect. If the principal of the policy is a service principal, you must provide two condition blocks, one with a SourceAccount global condition key and one with a SourceArn global condition key.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html\">IAM JSON policy elements: Condition </a>.</p>

        :return: The condition of this CreateResourcePolicyStatementRequest.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this CreateResourcePolicyStatementRequest.

        <p>Specifies a condition when the policy is in effect. If the principal of the policy is a service principal, you must provide two condition blocks, one with a SourceAccount global condition key and one with a SourceArn global condition key.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html\">IAM JSON policy elements: Condition </a>.</p>

        :param condition: The condition of this CreateResourcePolicyStatementRequest.
        :type condition: Dict[str, Dict[str, str]]
        """
        if condition is not None and len(condition) > 10:
            raise ValueError("Invalid value for `condition`, number of items must be less than or equal to `10`")
        if condition is not None and len(condition) < 0:
            raise ValueError("Invalid value for `condition`, number of items must be greater than or equal to `0`")

        self._condition = condition
