# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IntentClassificationTestResultItemCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_result_count: int=None, speech_transcription_result_counts: Dict=None, intent_match_result_counts: Dict=None):
        """IntentClassificationTestResultItemCounts - a model defined in OpenAPI

        :param total_result_count: The total_result_count of this IntentClassificationTestResultItemCounts.
        :param speech_transcription_result_counts: The speech_transcription_result_counts of this IntentClassificationTestResultItemCounts.
        :param intent_match_result_counts: The intent_match_result_counts of this IntentClassificationTestResultItemCounts.
        """
        self.openapi_types = {
            'total_result_count': int,
            'speech_transcription_result_counts': Dict,
            'intent_match_result_counts': Dict
        }

        self.attribute_map = {
            'total_result_count': 'totalResultCount',
            'speech_transcription_result_counts': 'speechTranscriptionResultCounts',
            'intent_match_result_counts': 'intentMatchResultCounts'
        }

        self._total_result_count = total_result_count
        self._speech_transcription_result_counts = speech_transcription_result_counts
        self._intent_match_result_counts = intent_match_result_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntentClassificationTestResultItemCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntentClassificationTestResultItemCounts of this IntentClassificationTestResultItemCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_result_count(self):
        """Gets the total_result_count of this IntentClassificationTestResultItemCounts.


        :return: The total_result_count of this IntentClassificationTestResultItemCounts.
        :rtype: int
        """
        return self._total_result_count

    @total_result_count.setter
    def total_result_count(self, total_result_count):
        """Sets the total_result_count of this IntentClassificationTestResultItemCounts.


        :param total_result_count: The total_result_count of this IntentClassificationTestResultItemCounts.
        :type total_result_count: int
        """
        if total_result_count is None:
            raise ValueError("Invalid value for `total_result_count`, must not be `None`")

        self._total_result_count = total_result_count

    @property
    def speech_transcription_result_counts(self):
        """Gets the speech_transcription_result_counts of this IntentClassificationTestResultItemCounts.


        :return: The speech_transcription_result_counts of this IntentClassificationTestResultItemCounts.
        :rtype: Dict
        """
        return self._speech_transcription_result_counts

    @speech_transcription_result_counts.setter
    def speech_transcription_result_counts(self, speech_transcription_result_counts):
        """Sets the speech_transcription_result_counts of this IntentClassificationTestResultItemCounts.


        :param speech_transcription_result_counts: The speech_transcription_result_counts of this IntentClassificationTestResultItemCounts.
        :type speech_transcription_result_counts: Dict
        """

        self._speech_transcription_result_counts = speech_transcription_result_counts

    @property
    def intent_match_result_counts(self):
        """Gets the intent_match_result_counts of this IntentClassificationTestResultItemCounts.


        :return: The intent_match_result_counts of this IntentClassificationTestResultItemCounts.
        :rtype: Dict
        """
        return self._intent_match_result_counts

    @intent_match_result_counts.setter
    def intent_match_result_counts(self, intent_match_result_counts):
        """Sets the intent_match_result_counts of this IntentClassificationTestResultItemCounts.


        :param intent_match_result_counts: The intent_match_result_counts of this IntentClassificationTestResultItemCounts.
        :type intent_match_result_counts: Dict
        """
        if intent_match_result_counts is None:
            raise ValueError("Invalid value for `intent_match_result_counts`, must not be `None`")

        self._intent_match_result_counts = intent_match_result_counts
