# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_intent_request_intent_closing_setting_closing_response import CreateIntentRequestIntentClosingSettingClosingResponse
from openapi_server.models.create_intent_request_intent_closing_setting_conditional import CreateIntentRequestIntentClosingSettingConditional
from openapi_server.models.create_intent_request_intent_closing_setting_next_step import CreateIntentRequestIntentClosingSettingNextStep
from openapi_server import util


class DescribeIntentResponseIntentClosingSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closing_response: CreateIntentRequestIntentClosingSettingClosingResponse=None, active: bool=None, next_step: CreateIntentRequestIntentClosingSettingNextStep=None, conditional: CreateIntentRequestIntentClosingSettingConditional=None):
        """DescribeIntentResponseIntentClosingSetting - a model defined in OpenAPI

        :param closing_response: The closing_response of this DescribeIntentResponseIntentClosingSetting.
        :param active: The active of this DescribeIntentResponseIntentClosingSetting.
        :param next_step: The next_step of this DescribeIntentResponseIntentClosingSetting.
        :param conditional: The conditional of this DescribeIntentResponseIntentClosingSetting.
        """
        self.openapi_types = {
            'closing_response': CreateIntentRequestIntentClosingSettingClosingResponse,
            'active': bool,
            'next_step': CreateIntentRequestIntentClosingSettingNextStep,
            'conditional': CreateIntentRequestIntentClosingSettingConditional
        }

        self.attribute_map = {
            'closing_response': 'closingResponse',
            'active': 'active',
            'next_step': 'nextStep',
            'conditional': 'conditional'
        }

        self._closing_response = closing_response
        self._active = active
        self._next_step = next_step
        self._conditional = conditional

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeIntentResponseIntentClosingSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeIntentResponse_intentClosingSetting of this DescribeIntentResponseIntentClosingSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closing_response(self):
        """Gets the closing_response of this DescribeIntentResponseIntentClosingSetting.


        :return: The closing_response of this DescribeIntentResponseIntentClosingSetting.
        :rtype: CreateIntentRequestIntentClosingSettingClosingResponse
        """
        return self._closing_response

    @closing_response.setter
    def closing_response(self, closing_response):
        """Sets the closing_response of this DescribeIntentResponseIntentClosingSetting.


        :param closing_response: The closing_response of this DescribeIntentResponseIntentClosingSetting.
        :type closing_response: CreateIntentRequestIntentClosingSettingClosingResponse
        """

        self._closing_response = closing_response

    @property
    def active(self):
        """Gets the active of this DescribeIntentResponseIntentClosingSetting.


        :return: The active of this DescribeIntentResponseIntentClosingSetting.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this DescribeIntentResponseIntentClosingSetting.


        :param active: The active of this DescribeIntentResponseIntentClosingSetting.
        :type active: bool
        """

        self._active = active

    @property
    def next_step(self):
        """Gets the next_step of this DescribeIntentResponseIntentClosingSetting.


        :return: The next_step of this DescribeIntentResponseIntentClosingSetting.
        :rtype: CreateIntentRequestIntentClosingSettingNextStep
        """
        return self._next_step

    @next_step.setter
    def next_step(self, next_step):
        """Sets the next_step of this DescribeIntentResponseIntentClosingSetting.


        :param next_step: The next_step of this DescribeIntentResponseIntentClosingSetting.
        :type next_step: CreateIntentRequestIntentClosingSettingNextStep
        """

        self._next_step = next_step

    @property
    def conditional(self):
        """Gets the conditional of this DescribeIntentResponseIntentClosingSetting.


        :return: The conditional of this DescribeIntentResponseIntentClosingSetting.
        :rtype: CreateIntentRequestIntentClosingSettingConditional
        """
        return self._conditional

    @conditional.setter
    def conditional(self, conditional):
        """Sets the conditional of this DescribeIntentResponseIntentClosingSetting.


        :param conditional: The conditional of this DescribeIntentResponseIntentClosingSetting.
        :type conditional: CreateIntentRequestIntentClosingSettingConditional
        """

        self._conditional = conditional
