# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.wait_and_continue_specification_continue_response import WaitAndContinueSpecificationContinueResponse
from openapi_server.models.wait_and_continue_specification_still_waiting_response import WaitAndContinueSpecificationStillWaitingResponse
from openapi_server.models.wait_and_continue_specification_waiting_response import WaitAndContinueSpecificationWaitingResponse
from openapi_server import util


class WaitAndContinueSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, waiting_response: WaitAndContinueSpecificationWaitingResponse=None, continue_response: WaitAndContinueSpecificationContinueResponse=None, still_waiting_response: WaitAndContinueSpecificationStillWaitingResponse=None, active: bool=None):
        """WaitAndContinueSpecification - a model defined in OpenAPI

        :param waiting_response: The waiting_response of this WaitAndContinueSpecification.
        :param continue_response: The continue_response of this WaitAndContinueSpecification.
        :param still_waiting_response: The still_waiting_response of this WaitAndContinueSpecification.
        :param active: The active of this WaitAndContinueSpecification.
        """
        self.openapi_types = {
            'waiting_response': WaitAndContinueSpecificationWaitingResponse,
            'continue_response': WaitAndContinueSpecificationContinueResponse,
            'still_waiting_response': WaitAndContinueSpecificationStillWaitingResponse,
            'active': bool
        }

        self.attribute_map = {
            'waiting_response': 'waitingResponse',
            'continue_response': 'continueResponse',
            'still_waiting_response': 'stillWaitingResponse',
            'active': 'active'
        }

        self._waiting_response = waiting_response
        self._continue_response = continue_response
        self._still_waiting_response = still_waiting_response
        self._active = active

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaitAndContinueSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaitAndContinueSpecification of this WaitAndContinueSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def waiting_response(self):
        """Gets the waiting_response of this WaitAndContinueSpecification.


        :return: The waiting_response of this WaitAndContinueSpecification.
        :rtype: WaitAndContinueSpecificationWaitingResponse
        """
        return self._waiting_response

    @waiting_response.setter
    def waiting_response(self, waiting_response):
        """Sets the waiting_response of this WaitAndContinueSpecification.


        :param waiting_response: The waiting_response of this WaitAndContinueSpecification.
        :type waiting_response: WaitAndContinueSpecificationWaitingResponse
        """
        if waiting_response is None:
            raise ValueError("Invalid value for `waiting_response`, must not be `None`")

        self._waiting_response = waiting_response

    @property
    def continue_response(self):
        """Gets the continue_response of this WaitAndContinueSpecification.


        :return: The continue_response of this WaitAndContinueSpecification.
        :rtype: WaitAndContinueSpecificationContinueResponse
        """
        return self._continue_response

    @continue_response.setter
    def continue_response(self, continue_response):
        """Sets the continue_response of this WaitAndContinueSpecification.


        :param continue_response: The continue_response of this WaitAndContinueSpecification.
        :type continue_response: WaitAndContinueSpecificationContinueResponse
        """
        if continue_response is None:
            raise ValueError("Invalid value for `continue_response`, must not be `None`")

        self._continue_response = continue_response

    @property
    def still_waiting_response(self):
        """Gets the still_waiting_response of this WaitAndContinueSpecification.


        :return: The still_waiting_response of this WaitAndContinueSpecification.
        :rtype: WaitAndContinueSpecificationStillWaitingResponse
        """
        return self._still_waiting_response

    @still_waiting_response.setter
    def still_waiting_response(self, still_waiting_response):
        """Sets the still_waiting_response of this WaitAndContinueSpecification.


        :param still_waiting_response: The still_waiting_response of this WaitAndContinueSpecification.
        :type still_waiting_response: WaitAndContinueSpecificationStillWaitingResponse
        """

        self._still_waiting_response = still_waiting_response

    @property
    def active(self):
        """Gets the active of this WaitAndContinueSpecification.


        :return: The active of this WaitAndContinueSpecification.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this WaitAndContinueSpecification.


        :param active: The active of this WaitAndContinueSpecification.
        :type active: bool
        """

        self._active = active
