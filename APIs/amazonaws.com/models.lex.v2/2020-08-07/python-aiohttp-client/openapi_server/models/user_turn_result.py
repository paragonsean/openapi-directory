# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.execution_error_details import ExecutionErrorDetails
from openapi_server.models.test_result_match_status import TestResultMatchStatus
from openapi_server.models.user_turn_result_actual_output import UserTurnResultActualOutput
from openapi_server.models.user_turn_result_conversation_level_result import UserTurnResultConversationLevelResult
from openapi_server.models.user_turn_result_expected_output import UserTurnResultExpectedOutput
from openapi_server.models.user_turn_result_input import UserTurnResultInput
from openapi_server import util


class UserTurnResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input: UserTurnResultInput=None, expected_output: UserTurnResultExpectedOutput=None, actual_output: UserTurnResultActualOutput=None, error_details: ExecutionErrorDetails=None, end_to_end_result: TestResultMatchStatus=None, intent_match_result: TestResultMatchStatus=None, slot_match_result: TestResultMatchStatus=None, speech_transcription_result: TestResultMatchStatus=None, conversation_level_result: UserTurnResultConversationLevelResult=None):
        """UserTurnResult - a model defined in OpenAPI

        :param input: The input of this UserTurnResult.
        :param expected_output: The expected_output of this UserTurnResult.
        :param actual_output: The actual_output of this UserTurnResult.
        :param error_details: The error_details of this UserTurnResult.
        :param end_to_end_result: The end_to_end_result of this UserTurnResult.
        :param intent_match_result: The intent_match_result of this UserTurnResult.
        :param slot_match_result: The slot_match_result of this UserTurnResult.
        :param speech_transcription_result: The speech_transcription_result of this UserTurnResult.
        :param conversation_level_result: The conversation_level_result of this UserTurnResult.
        """
        self.openapi_types = {
            'input': UserTurnResultInput,
            'expected_output': UserTurnResultExpectedOutput,
            'actual_output': UserTurnResultActualOutput,
            'error_details': ExecutionErrorDetails,
            'end_to_end_result': TestResultMatchStatus,
            'intent_match_result': TestResultMatchStatus,
            'slot_match_result': TestResultMatchStatus,
            'speech_transcription_result': TestResultMatchStatus,
            'conversation_level_result': UserTurnResultConversationLevelResult
        }

        self.attribute_map = {
            'input': 'input',
            'expected_output': 'expectedOutput',
            'actual_output': 'actualOutput',
            'error_details': 'errorDetails',
            'end_to_end_result': 'endToEndResult',
            'intent_match_result': 'intentMatchResult',
            'slot_match_result': 'slotMatchResult',
            'speech_transcription_result': 'speechTranscriptionResult',
            'conversation_level_result': 'conversationLevelResult'
        }

        self._input = input
        self._expected_output = expected_output
        self._actual_output = actual_output
        self._error_details = error_details
        self._end_to_end_result = end_to_end_result
        self._intent_match_result = intent_match_result
        self._slot_match_result = slot_match_result
        self._speech_transcription_result = speech_transcription_result
        self._conversation_level_result = conversation_level_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserTurnResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserTurnResult of this UserTurnResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self):
        """Gets the input of this UserTurnResult.


        :return: The input of this UserTurnResult.
        :rtype: UserTurnResultInput
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this UserTurnResult.


        :param input: The input of this UserTurnResult.
        :type input: UserTurnResultInput
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def expected_output(self):
        """Gets the expected_output of this UserTurnResult.


        :return: The expected_output of this UserTurnResult.
        :rtype: UserTurnResultExpectedOutput
        """
        return self._expected_output

    @expected_output.setter
    def expected_output(self, expected_output):
        """Sets the expected_output of this UserTurnResult.


        :param expected_output: The expected_output of this UserTurnResult.
        :type expected_output: UserTurnResultExpectedOutput
        """
        if expected_output is None:
            raise ValueError("Invalid value for `expected_output`, must not be `None`")

        self._expected_output = expected_output

    @property
    def actual_output(self):
        """Gets the actual_output of this UserTurnResult.


        :return: The actual_output of this UserTurnResult.
        :rtype: UserTurnResultActualOutput
        """
        return self._actual_output

    @actual_output.setter
    def actual_output(self, actual_output):
        """Sets the actual_output of this UserTurnResult.


        :param actual_output: The actual_output of this UserTurnResult.
        :type actual_output: UserTurnResultActualOutput
        """

        self._actual_output = actual_output

    @property
    def error_details(self):
        """Gets the error_details of this UserTurnResult.


        :return: The error_details of this UserTurnResult.
        :rtype: ExecutionErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this UserTurnResult.


        :param error_details: The error_details of this UserTurnResult.
        :type error_details: ExecutionErrorDetails
        """

        self._error_details = error_details

    @property
    def end_to_end_result(self):
        """Gets the end_to_end_result of this UserTurnResult.


        :return: The end_to_end_result of this UserTurnResult.
        :rtype: TestResultMatchStatus
        """
        return self._end_to_end_result

    @end_to_end_result.setter
    def end_to_end_result(self, end_to_end_result):
        """Sets the end_to_end_result of this UserTurnResult.


        :param end_to_end_result: The end_to_end_result of this UserTurnResult.
        :type end_to_end_result: TestResultMatchStatus
        """

        self._end_to_end_result = end_to_end_result

    @property
    def intent_match_result(self):
        """Gets the intent_match_result of this UserTurnResult.


        :return: The intent_match_result of this UserTurnResult.
        :rtype: TestResultMatchStatus
        """
        return self._intent_match_result

    @intent_match_result.setter
    def intent_match_result(self, intent_match_result):
        """Sets the intent_match_result of this UserTurnResult.


        :param intent_match_result: The intent_match_result of this UserTurnResult.
        :type intent_match_result: TestResultMatchStatus
        """

        self._intent_match_result = intent_match_result

    @property
    def slot_match_result(self):
        """Gets the slot_match_result of this UserTurnResult.


        :return: The slot_match_result of this UserTurnResult.
        :rtype: TestResultMatchStatus
        """
        return self._slot_match_result

    @slot_match_result.setter
    def slot_match_result(self, slot_match_result):
        """Sets the slot_match_result of this UserTurnResult.


        :param slot_match_result: The slot_match_result of this UserTurnResult.
        :type slot_match_result: TestResultMatchStatus
        """

        self._slot_match_result = slot_match_result

    @property
    def speech_transcription_result(self):
        """Gets the speech_transcription_result of this UserTurnResult.


        :return: The speech_transcription_result of this UserTurnResult.
        :rtype: TestResultMatchStatus
        """
        return self._speech_transcription_result

    @speech_transcription_result.setter
    def speech_transcription_result(self, speech_transcription_result):
        """Sets the speech_transcription_result of this UserTurnResult.


        :param speech_transcription_result: The speech_transcription_result of this UserTurnResult.
        :type speech_transcription_result: TestResultMatchStatus
        """

        self._speech_transcription_result = speech_transcription_result

    @property
    def conversation_level_result(self):
        """Gets the conversation_level_result of this UserTurnResult.


        :return: The conversation_level_result of this UserTurnResult.
        :rtype: UserTurnResultConversationLevelResult
        """
        return self._conversation_level_result

    @conversation_level_result.setter
    def conversation_level_result(self, conversation_level_result):
        """Sets the conversation_level_result of this UserTurnResult.


        :param conversation_level_result: The conversation_level_result of this UserTurnResult.
        :type conversation_level_result: UserTurnResultConversationLevelResult
        """

        self._conversation_level_result = conversation_level_result
