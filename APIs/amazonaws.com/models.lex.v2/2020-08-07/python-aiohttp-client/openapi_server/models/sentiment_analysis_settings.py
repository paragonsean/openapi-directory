# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SentimentAnalysisSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detect_sentiment: bool=None):
        """SentimentAnalysisSettings - a model defined in OpenAPI

        :param detect_sentiment: The detect_sentiment of this SentimentAnalysisSettings.
        """
        self.openapi_types = {
            'detect_sentiment': bool
        }

        self.attribute_map = {
            'detect_sentiment': 'detectSentiment'
        }

        self._detect_sentiment = detect_sentiment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SentimentAnalysisSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SentimentAnalysisSettings of this SentimentAnalysisSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detect_sentiment(self):
        """Gets the detect_sentiment of this SentimentAnalysisSettings.


        :return: The detect_sentiment of this SentimentAnalysisSettings.
        :rtype: bool
        """
        return self._detect_sentiment

    @detect_sentiment.setter
    def detect_sentiment(self, detect_sentiment):
        """Sets the detect_sentiment of this SentimentAnalysisSettings.


        :param detect_sentiment: The detect_sentiment of this SentimentAnalysisSettings.
        :type detect_sentiment: bool
        """
        if detect_sentiment is None:
            raise ValueError("Invalid value for `detect_sentiment`, must not be `None`")

        self._detect_sentiment = detect_sentiment
