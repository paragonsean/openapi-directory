# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bot_alias_locale_settings import BotAliasLocaleSettings
from openapi_server.models.create_bot_alias_request_conversation_log_settings import CreateBotAliasRequestConversationLogSettings
from openapi_server.models.create_bot_alias_request_sentiment_analysis_settings import CreateBotAliasRequestSentimentAnalysisSettings
import re
from openapi_server import util


class UpdateBotAliasRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_alias_name: str=None, description: str=None, bot_version: str=None, bot_alias_locale_settings: Dict[str, BotAliasLocaleSettings]=None, conversation_log_settings: CreateBotAliasRequestConversationLogSettings=None, sentiment_analysis_settings: CreateBotAliasRequestSentimentAnalysisSettings=None):
        """UpdateBotAliasRequest - a model defined in OpenAPI

        :param bot_alias_name: The bot_alias_name of this UpdateBotAliasRequest.
        :param description: The description of this UpdateBotAliasRequest.
        :param bot_version: The bot_version of this UpdateBotAliasRequest.
        :param bot_alias_locale_settings: The bot_alias_locale_settings of this UpdateBotAliasRequest.
        :param conversation_log_settings: The conversation_log_settings of this UpdateBotAliasRequest.
        :param sentiment_analysis_settings: The sentiment_analysis_settings of this UpdateBotAliasRequest.
        """
        self.openapi_types = {
            'bot_alias_name': str,
            'description': str,
            'bot_version': str,
            'bot_alias_locale_settings': Dict[str, BotAliasLocaleSettings],
            'conversation_log_settings': CreateBotAliasRequestConversationLogSettings,
            'sentiment_analysis_settings': CreateBotAliasRequestSentimentAnalysisSettings
        }

        self.attribute_map = {
            'bot_alias_name': 'botAliasName',
            'description': 'description',
            'bot_version': 'botVersion',
            'bot_alias_locale_settings': 'botAliasLocaleSettings',
            'conversation_log_settings': 'conversationLogSettings',
            'sentiment_analysis_settings': 'sentimentAnalysisSettings'
        }

        self._bot_alias_name = bot_alias_name
        self._description = description
        self._bot_version = bot_version
        self._bot_alias_locale_settings = bot_alias_locale_settings
        self._conversation_log_settings = conversation_log_settings
        self._sentiment_analysis_settings = sentiment_analysis_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBotAliasRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBotAlias_request of this UpdateBotAliasRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_alias_name(self):
        """Gets the bot_alias_name of this UpdateBotAliasRequest.

        The new name to assign to the bot alias.

        :return: The bot_alias_name of this UpdateBotAliasRequest.
        :rtype: str
        """
        return self._bot_alias_name

    @bot_alias_name.setter
    def bot_alias_name(self, bot_alias_name):
        """Sets the bot_alias_name of this UpdateBotAliasRequest.

        The new name to assign to the bot alias.

        :param bot_alias_name: The bot_alias_name of this UpdateBotAliasRequest.
        :type bot_alias_name: str
        """
        if bot_alias_name is None:
            raise ValueError("Invalid value for `bot_alias_name`, must not be `None`")
        if bot_alias_name is not None and len(bot_alias_name) > 100:
            raise ValueError("Invalid value for `bot_alias_name`, length must be less than or equal to `100`")
        if bot_alias_name is not None and len(bot_alias_name) < 1:
            raise ValueError("Invalid value for `bot_alias_name`, length must be greater than or equal to `1`")
        if bot_alias_name is not None and not re.search(r'^([0-9a-zA-Z][_-]?){1,100}$', bot_alias_name):
            raise ValueError("Invalid value for `bot_alias_name`, must be a follow pattern or equal to `/^([0-9a-zA-Z][_-]?){1,100}$/`")

        self._bot_alias_name = bot_alias_name

    @property
    def description(self):
        """Gets the description of this UpdateBotAliasRequest.

        The new description to assign to the bot alias.

        :return: The description of this UpdateBotAliasRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateBotAliasRequest.

        The new description to assign to the bot alias.

        :param description: The description of this UpdateBotAliasRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def bot_version(self):
        """Gets the bot_version of this UpdateBotAliasRequest.

        The new bot version to assign to the bot alias.

        :return: The bot_version of this UpdateBotAliasRequest.
        :rtype: str
        """
        return self._bot_version

    @bot_version.setter
    def bot_version(self, bot_version):
        """Sets the bot_version of this UpdateBotAliasRequest.

        The new bot version to assign to the bot alias.

        :param bot_version: The bot_version of this UpdateBotAliasRequest.
        :type bot_version: str
        """
        if bot_version is not None and len(bot_version) > 5:
            raise ValueError("Invalid value for `bot_version`, length must be less than or equal to `5`")
        if bot_version is not None and len(bot_version) < 1:
            raise ValueError("Invalid value for `bot_version`, length must be greater than or equal to `1`")
        if bot_version is not None and not re.search(r'^(DRAFT|[0-9]+)$', bot_version):
            raise ValueError("Invalid value for `bot_version`, must be a follow pattern or equal to `/^(DRAFT|[0-9]+)$/`")

        self._bot_version = bot_version

    @property
    def bot_alias_locale_settings(self):
        """Gets the bot_alias_locale_settings of this UpdateBotAliasRequest.

        The new Lambda functions to use in each locale for the bot alias.

        :return: The bot_alias_locale_settings of this UpdateBotAliasRequest.
        :rtype: Dict[str, BotAliasLocaleSettings]
        """
        return self._bot_alias_locale_settings

    @bot_alias_locale_settings.setter
    def bot_alias_locale_settings(self, bot_alias_locale_settings):
        """Sets the bot_alias_locale_settings of this UpdateBotAliasRequest.

        The new Lambda functions to use in each locale for the bot alias.

        :param bot_alias_locale_settings: The bot_alias_locale_settings of this UpdateBotAliasRequest.
        :type bot_alias_locale_settings: Dict[str, BotAliasLocaleSettings]
        """
        if bot_alias_locale_settings is not None and len(bot_alias_locale_settings) < 1:
            raise ValueError("Invalid value for `bot_alias_locale_settings`, number of items must be greater than or equal to `1`")

        self._bot_alias_locale_settings = bot_alias_locale_settings

    @property
    def conversation_log_settings(self):
        """Gets the conversation_log_settings of this UpdateBotAliasRequest.


        :return: The conversation_log_settings of this UpdateBotAliasRequest.
        :rtype: CreateBotAliasRequestConversationLogSettings
        """
        return self._conversation_log_settings

    @conversation_log_settings.setter
    def conversation_log_settings(self, conversation_log_settings):
        """Sets the conversation_log_settings of this UpdateBotAliasRequest.


        :param conversation_log_settings: The conversation_log_settings of this UpdateBotAliasRequest.
        :type conversation_log_settings: CreateBotAliasRequestConversationLogSettings
        """

        self._conversation_log_settings = conversation_log_settings

    @property
    def sentiment_analysis_settings(self):
        """Gets the sentiment_analysis_settings of this UpdateBotAliasRequest.


        :return: The sentiment_analysis_settings of this UpdateBotAliasRequest.
        :rtype: CreateBotAliasRequestSentimentAnalysisSettings
        """
        return self._sentiment_analysis_settings

    @sentiment_analysis_settings.setter
    def sentiment_analysis_settings(self, sentiment_analysis_settings):
        """Sets the sentiment_analysis_settings of this UpdateBotAliasRequest.


        :param sentiment_analysis_settings: The sentiment_analysis_settings of this UpdateBotAliasRequest.
        :type sentiment_analysis_settings: CreateBotAliasRequestSentimentAnalysisSettings
        """

        self._sentiment_analysis_settings = sentiment_analysis_settings
