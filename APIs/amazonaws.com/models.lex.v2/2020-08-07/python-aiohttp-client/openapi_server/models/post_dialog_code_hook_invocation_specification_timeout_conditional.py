# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conditional_specification_default_branch import ConditionalSpecificationDefaultBranch
from openapi_server import util


class PostDialogCodeHookInvocationSpecificationTimeoutConditional(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, conditional_branches: List=None, default_branch: ConditionalSpecificationDefaultBranch=None):
        """PostDialogCodeHookInvocationSpecificationTimeoutConditional - a model defined in OpenAPI

        :param active: The active of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.
        :param conditional_branches: The conditional_branches of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.
        :param default_branch: The default_branch of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.
        """
        self.openapi_types = {
            'active': bool,
            'conditional_branches': List,
            'default_branch': ConditionalSpecificationDefaultBranch
        }

        self.attribute_map = {
            'active': 'active',
            'conditional_branches': 'conditionalBranches',
            'default_branch': 'defaultBranch'
        }

        self._active = active
        self._conditional_branches = conditional_branches
        self._default_branch = default_branch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostDialogCodeHookInvocationSpecificationTimeoutConditional':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostDialogCodeHookInvocationSpecification_timeoutConditional of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.


        :return: The active of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.


        :param active: The active of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def conditional_branches(self):
        """Gets the conditional_branches of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.


        :return: The conditional_branches of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.
        :rtype: List
        """
        return self._conditional_branches

    @conditional_branches.setter
    def conditional_branches(self, conditional_branches):
        """Sets the conditional_branches of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.


        :param conditional_branches: The conditional_branches of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.
        :type conditional_branches: List
        """
        if conditional_branches is None:
            raise ValueError("Invalid value for `conditional_branches`, must not be `None`")

        self._conditional_branches = conditional_branches

    @property
    def default_branch(self):
        """Gets the default_branch of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.


        :return: The default_branch of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.
        :rtype: ConditionalSpecificationDefaultBranch
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.


        :param default_branch: The default_branch of this PostDialogCodeHookInvocationSpecificationTimeoutConditional.
        :type default_branch: ConditionalSpecificationDefaultBranch
        """
        if default_branch is None:
            raise ValueError("Invalid value for `default_branch`, must not be `None`")

        self._default_branch = default_branch
