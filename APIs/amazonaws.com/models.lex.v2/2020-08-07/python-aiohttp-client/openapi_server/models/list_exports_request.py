# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.export_filter import ExportFilter
from openapi_server.models.list_exports_request_sort_by import ListExportsRequestSortBy
import re
from openapi_server import util


class ListExportsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_id: str=None, bot_version: str=None, sort_by: ListExportsRequestSortBy=None, filters: List[ExportFilter]=None, max_results: int=None, next_token: str=None, locale_id: str=None):
        """ListExportsRequest - a model defined in OpenAPI

        :param bot_id: The bot_id of this ListExportsRequest.
        :param bot_version: The bot_version of this ListExportsRequest.
        :param sort_by: The sort_by of this ListExportsRequest.
        :param filters: The filters of this ListExportsRequest.
        :param max_results: The max_results of this ListExportsRequest.
        :param next_token: The next_token of this ListExportsRequest.
        :param locale_id: The locale_id of this ListExportsRequest.
        """
        self.openapi_types = {
            'bot_id': str,
            'bot_version': str,
            'sort_by': ListExportsRequestSortBy,
            'filters': List[ExportFilter],
            'max_results': int,
            'next_token': str,
            'locale_id': str
        }

        self.attribute_map = {
            'bot_id': 'botId',
            'bot_version': 'botVersion',
            'sort_by': 'sortBy',
            'filters': 'filters',
            'max_results': 'maxResults',
            'next_token': 'nextToken',
            'locale_id': 'localeId'
        }

        self._bot_id = bot_id
        self._bot_version = bot_version
        self._sort_by = sort_by
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token
        self._locale_id = locale_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListExportsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListExports_request of this ListExportsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_id(self):
        """Gets the bot_id of this ListExportsRequest.

        The unique identifier that Amazon Lex assigned to the bot.

        :return: The bot_id of this ListExportsRequest.
        :rtype: str
        """
        return self._bot_id

    @bot_id.setter
    def bot_id(self, bot_id):
        """Sets the bot_id of this ListExportsRequest.

        The unique identifier that Amazon Lex assigned to the bot.

        :param bot_id: The bot_id of this ListExportsRequest.
        :type bot_id: str
        """
        if bot_id is not None and len(bot_id) > 10:
            raise ValueError("Invalid value for `bot_id`, length must be less than or equal to `10`")
        if bot_id is not None and len(bot_id) < 10:
            raise ValueError("Invalid value for `bot_id`, length must be greater than or equal to `10`")
        if bot_id is not None and not re.search(r'^[0-9a-zA-Z]+$', bot_id):
            raise ValueError("Invalid value for `bot_id`, must be a follow pattern or equal to `/^[0-9a-zA-Z]+$/`")

        self._bot_id = bot_id

    @property
    def bot_version(self):
        """Gets the bot_version of this ListExportsRequest.

        The version of the bot to list exports for. 

        :return: The bot_version of this ListExportsRequest.
        :rtype: str
        """
        return self._bot_version

    @bot_version.setter
    def bot_version(self, bot_version):
        """Sets the bot_version of this ListExportsRequest.

        The version of the bot to list exports for. 

        :param bot_version: The bot_version of this ListExportsRequest.
        :type bot_version: str
        """
        if bot_version is not None and len(bot_version) > 5:
            raise ValueError("Invalid value for `bot_version`, length must be less than or equal to `5`")
        if bot_version is not None and len(bot_version) < 1:
            raise ValueError("Invalid value for `bot_version`, length must be greater than or equal to `1`")
        if bot_version is not None and not re.search(r'^(DRAFT|[0-9]+)$', bot_version):
            raise ValueError("Invalid value for `bot_version`, must be a follow pattern or equal to `/^(DRAFT|[0-9]+)$/`")

        self._bot_version = bot_version

    @property
    def sort_by(self):
        """Gets the sort_by of this ListExportsRequest.


        :return: The sort_by of this ListExportsRequest.
        :rtype: ListExportsRequestSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this ListExportsRequest.


        :param sort_by: The sort_by of this ListExportsRequest.
        :type sort_by: ListExportsRequestSortBy
        """

        self._sort_by = sort_by

    @property
    def filters(self):
        """Gets the filters of this ListExportsRequest.

        Provides the specification of a filter used to limit the exports in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.

        :return: The filters of this ListExportsRequest.
        :rtype: List[ExportFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListExportsRequest.

        Provides the specification of a filter used to limit the exports in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.

        :param filters: The filters of this ListExportsRequest.
        :type filters: List[ExportFilter]
        """
        if filters is not None and len(filters) > 1:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `1`")
        if filters is not None and len(filters) < 1:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `1`")

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this ListExportsRequest.

        The maximum number of exports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.

        :return: The max_results of this ListExportsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListExportsRequest.

        The maximum number of exports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.

        :param max_results: The max_results of this ListExportsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListExportsRequest.

        <p>If the response from the <code>ListExports</code> operation contains more results that specified in the <code>maxResults</code> parameter, a token is returned in the response. </p> <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListExports</code> request to return the next page of results. For a complete set of results, call the <code>ListExports</code> operation until the <code>nextToken</code> returned in the response is null.</p>

        :return: The next_token of this ListExportsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListExportsRequest.

        <p>If the response from the <code>ListExports</code> operation contains more results that specified in the <code>maxResults</code> parameter, a token is returned in the response. </p> <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListExports</code> request to return the next page of results. For a complete set of results, call the <code>ListExports</code> operation until the <code>nextToken</code> returned in the response is null.</p>

        :param next_token: The next_token of this ListExportsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def locale_id(self):
        """Gets the locale_id of this ListExportsRequest.

        Specifies the resources that should be exported. If you don't specify a resource type in the <code>filters</code> parameter, both bot locales and custom vocabularies are exported.

        :return: The locale_id of this ListExportsRequest.
        :rtype: str
        """
        return self._locale_id

    @locale_id.setter
    def locale_id(self, locale_id):
        """Sets the locale_id of this ListExportsRequest.

        Specifies the resources that should be exported. If you don't specify a resource type in the <code>filters</code> parameter, both bot locales and custom vocabularies are exported.

        :param locale_id: The locale_id of this ListExportsRequest.
        :type locale_id: str
        """

        self._locale_id = locale_id
