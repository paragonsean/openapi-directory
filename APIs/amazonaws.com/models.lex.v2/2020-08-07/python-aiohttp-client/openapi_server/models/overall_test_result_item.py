# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OverallTestResultItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, multi_turn_conversation: bool=None, total_result_count: int=None, speech_transcription_result_counts: Dict=None, end_to_end_result_counts: Dict=None):
        """OverallTestResultItem - a model defined in OpenAPI

        :param multi_turn_conversation: The multi_turn_conversation of this OverallTestResultItem.
        :param total_result_count: The total_result_count of this OverallTestResultItem.
        :param speech_transcription_result_counts: The speech_transcription_result_counts of this OverallTestResultItem.
        :param end_to_end_result_counts: The end_to_end_result_counts of this OverallTestResultItem.
        """
        self.openapi_types = {
            'multi_turn_conversation': bool,
            'total_result_count': int,
            'speech_transcription_result_counts': Dict,
            'end_to_end_result_counts': Dict
        }

        self.attribute_map = {
            'multi_turn_conversation': 'multiTurnConversation',
            'total_result_count': 'totalResultCount',
            'speech_transcription_result_counts': 'speechTranscriptionResultCounts',
            'end_to_end_result_counts': 'endToEndResultCounts'
        }

        self._multi_turn_conversation = multi_turn_conversation
        self._total_result_count = total_result_count
        self._speech_transcription_result_counts = speech_transcription_result_counts
        self._end_to_end_result_counts = end_to_end_result_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OverallTestResultItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OverallTestResultItem of this OverallTestResultItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def multi_turn_conversation(self):
        """Gets the multi_turn_conversation of this OverallTestResultItem.


        :return: The multi_turn_conversation of this OverallTestResultItem.
        :rtype: bool
        """
        return self._multi_turn_conversation

    @multi_turn_conversation.setter
    def multi_turn_conversation(self, multi_turn_conversation):
        """Sets the multi_turn_conversation of this OverallTestResultItem.


        :param multi_turn_conversation: The multi_turn_conversation of this OverallTestResultItem.
        :type multi_turn_conversation: bool
        """
        if multi_turn_conversation is None:
            raise ValueError("Invalid value for `multi_turn_conversation`, must not be `None`")

        self._multi_turn_conversation = multi_turn_conversation

    @property
    def total_result_count(self):
        """Gets the total_result_count of this OverallTestResultItem.


        :return: The total_result_count of this OverallTestResultItem.
        :rtype: int
        """
        return self._total_result_count

    @total_result_count.setter
    def total_result_count(self, total_result_count):
        """Sets the total_result_count of this OverallTestResultItem.


        :param total_result_count: The total_result_count of this OverallTestResultItem.
        :type total_result_count: int
        """
        if total_result_count is None:
            raise ValueError("Invalid value for `total_result_count`, must not be `None`")

        self._total_result_count = total_result_count

    @property
    def speech_transcription_result_counts(self):
        """Gets the speech_transcription_result_counts of this OverallTestResultItem.


        :return: The speech_transcription_result_counts of this OverallTestResultItem.
        :rtype: Dict
        """
        return self._speech_transcription_result_counts

    @speech_transcription_result_counts.setter
    def speech_transcription_result_counts(self, speech_transcription_result_counts):
        """Sets the speech_transcription_result_counts of this OverallTestResultItem.


        :param speech_transcription_result_counts: The speech_transcription_result_counts of this OverallTestResultItem.
        :type speech_transcription_result_counts: Dict
        """

        self._speech_transcription_result_counts = speech_transcription_result_counts

    @property
    def end_to_end_result_counts(self):
        """Gets the end_to_end_result_counts of this OverallTestResultItem.


        :return: The end_to_end_result_counts of this OverallTestResultItem.
        :rtype: Dict
        """
        return self._end_to_end_result_counts

    @end_to_end_result_counts.setter
    def end_to_end_result_counts(self, end_to_end_result_counts):
        """Sets the end_to_end_result_counts of this OverallTestResultItem.


        :param end_to_end_result_counts: The end_to_end_result_counts of this OverallTestResultItem.
        :type end_to_end_result_counts: Dict
        """
        if end_to_end_result_counts is None:
            raise ValueError("Invalid value for `end_to_end_result_counts`, must not be `None`")

        self._end_to_end_result_counts = end_to_end_result_counts
