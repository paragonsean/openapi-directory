# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeTestSetResponseStorageLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_bucket_name: str=None, s3_path: str=None, kms_key_arn: str=None):
        """DescribeTestSetResponseStorageLocation - a model defined in OpenAPI

        :param s3_bucket_name: The s3_bucket_name of this DescribeTestSetResponseStorageLocation.
        :param s3_path: The s3_path of this DescribeTestSetResponseStorageLocation.
        :param kms_key_arn: The kms_key_arn of this DescribeTestSetResponseStorageLocation.
        """
        self.openapi_types = {
            's3_bucket_name': str,
            's3_path': str,
            'kms_key_arn': str
        }

        self.attribute_map = {
            's3_bucket_name': 's3BucketName',
            's3_path': 's3Path',
            'kms_key_arn': 'kmsKeyArn'
        }

        self._s3_bucket_name = s3_bucket_name
        self._s3_path = s3_path
        self._kms_key_arn = kms_key_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeTestSetResponseStorageLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeTestSetResponse_storageLocation of this DescribeTestSetResponseStorageLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_bucket_name(self):
        """Gets the s3_bucket_name of this DescribeTestSetResponseStorageLocation.


        :return: The s3_bucket_name of this DescribeTestSetResponseStorageLocation.
        :rtype: str
        """
        return self._s3_bucket_name

    @s3_bucket_name.setter
    def s3_bucket_name(self, s3_bucket_name):
        """Sets the s3_bucket_name of this DescribeTestSetResponseStorageLocation.


        :param s3_bucket_name: The s3_bucket_name of this DescribeTestSetResponseStorageLocation.
        :type s3_bucket_name: str
        """
        if s3_bucket_name is None:
            raise ValueError("Invalid value for `s3_bucket_name`, must not be `None`")

        self._s3_bucket_name = s3_bucket_name

    @property
    def s3_path(self):
        """Gets the s3_path of this DescribeTestSetResponseStorageLocation.


        :return: The s3_path of this DescribeTestSetResponseStorageLocation.
        :rtype: str
        """
        return self._s3_path

    @s3_path.setter
    def s3_path(self, s3_path):
        """Sets the s3_path of this DescribeTestSetResponseStorageLocation.


        :param s3_path: The s3_path of this DescribeTestSetResponseStorageLocation.
        :type s3_path: str
        """
        if s3_path is None:
            raise ValueError("Invalid value for `s3_path`, must not be `None`")

        self._s3_path = s3_path

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this DescribeTestSetResponseStorageLocation.


        :return: The kms_key_arn of this DescribeTestSetResponseStorageLocation.
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this DescribeTestSetResponseStorageLocation.


        :param kms_key_arn: The kms_key_arn of this DescribeTestSetResponseStorageLocation.
        :type kms_key_arn: str
        """

        self._kms_key_arn = kms_key_arn
