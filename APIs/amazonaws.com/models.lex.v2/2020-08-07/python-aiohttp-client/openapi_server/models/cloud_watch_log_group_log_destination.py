# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudWatchLogGroupLogDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_watch_log_group_arn: str=None, log_prefix: str=None):
        """CloudWatchLogGroupLogDestination - a model defined in OpenAPI

        :param cloud_watch_log_group_arn: The cloud_watch_log_group_arn of this CloudWatchLogGroupLogDestination.
        :param log_prefix: The log_prefix of this CloudWatchLogGroupLogDestination.
        """
        self.openapi_types = {
            'cloud_watch_log_group_arn': str,
            'log_prefix': str
        }

        self.attribute_map = {
            'cloud_watch_log_group_arn': 'cloudWatchLogGroupArn',
            'log_prefix': 'logPrefix'
        }

        self._cloud_watch_log_group_arn = cloud_watch_log_group_arn
        self._log_prefix = log_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudWatchLogGroupLogDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudWatchLogGroupLogDestination of this CloudWatchLogGroupLogDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_watch_log_group_arn(self):
        """Gets the cloud_watch_log_group_arn of this CloudWatchLogGroupLogDestination.


        :return: The cloud_watch_log_group_arn of this CloudWatchLogGroupLogDestination.
        :rtype: str
        """
        return self._cloud_watch_log_group_arn

    @cloud_watch_log_group_arn.setter
    def cloud_watch_log_group_arn(self, cloud_watch_log_group_arn):
        """Sets the cloud_watch_log_group_arn of this CloudWatchLogGroupLogDestination.


        :param cloud_watch_log_group_arn: The cloud_watch_log_group_arn of this CloudWatchLogGroupLogDestination.
        :type cloud_watch_log_group_arn: str
        """
        if cloud_watch_log_group_arn is None:
            raise ValueError("Invalid value for `cloud_watch_log_group_arn`, must not be `None`")

        self._cloud_watch_log_group_arn = cloud_watch_log_group_arn

    @property
    def log_prefix(self):
        """Gets the log_prefix of this CloudWatchLogGroupLogDestination.


        :return: The log_prefix of this CloudWatchLogGroupLogDestination.
        :rtype: str
        """
        return self._log_prefix

    @log_prefix.setter
    def log_prefix(self, log_prefix):
        """Sets the log_prefix of this CloudWatchLogGroupLogDestination.


        :param log_prefix: The log_prefix of this CloudWatchLogGroupLogDestination.
        :type log_prefix: str
        """
        if log_prefix is None:
            raise ValueError("Invalid value for `log_prefix`, must not be `None`")

        self._log_prefix = log_prefix
