# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_sort_order import AnalyticsSortOrder
from openapi_server.models.analytics_utterance_sort_by_name import AnalyticsUtteranceSortByName
from openapi_server import util


class UtteranceDataSortBy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: AnalyticsUtteranceSortByName=None, order: AnalyticsSortOrder=None):
        """UtteranceDataSortBy - a model defined in OpenAPI

        :param name: The name of this UtteranceDataSortBy.
        :param order: The order of this UtteranceDataSortBy.
        """
        self.openapi_types = {
            'name': AnalyticsUtteranceSortByName,
            'order': AnalyticsSortOrder
        }

        self.attribute_map = {
            'name': 'name',
            'order': 'order'
        }

        self._name = name
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UtteranceDataSortBy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UtteranceDataSortBy of this UtteranceDataSortBy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UtteranceDataSortBy.


        :return: The name of this UtteranceDataSortBy.
        :rtype: AnalyticsUtteranceSortByName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UtteranceDataSortBy.


        :param name: The name of this UtteranceDataSortBy.
        :type name: AnalyticsUtteranceSortByName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def order(self):
        """Gets the order of this UtteranceDataSortBy.


        :return: The order of this UtteranceDataSortBy.
        :rtype: AnalyticsSortOrder
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this UtteranceDataSortBy.


        :param order: The order of this UtteranceDataSortBy.
        :type order: AnalyticsSortOrder
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order
