# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.intent_classification_test_result_item_result_counts import IntentClassificationTestResultItemResultCounts
from openapi_server import util


class IntentClassificationTestResultItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, intent_name: str=None, multi_turn_conversation: bool=None, result_counts: IntentClassificationTestResultItemResultCounts=None):
        """IntentClassificationTestResultItem - a model defined in OpenAPI

        :param intent_name: The intent_name of this IntentClassificationTestResultItem.
        :param multi_turn_conversation: The multi_turn_conversation of this IntentClassificationTestResultItem.
        :param result_counts: The result_counts of this IntentClassificationTestResultItem.
        """
        self.openapi_types = {
            'intent_name': str,
            'multi_turn_conversation': bool,
            'result_counts': IntentClassificationTestResultItemResultCounts
        }

        self.attribute_map = {
            'intent_name': 'intentName',
            'multi_turn_conversation': 'multiTurnConversation',
            'result_counts': 'resultCounts'
        }

        self._intent_name = intent_name
        self._multi_turn_conversation = multi_turn_conversation
        self._result_counts = result_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntentClassificationTestResultItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntentClassificationTestResultItem of this IntentClassificationTestResultItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def intent_name(self):
        """Gets the intent_name of this IntentClassificationTestResultItem.


        :return: The intent_name of this IntentClassificationTestResultItem.
        :rtype: str
        """
        return self._intent_name

    @intent_name.setter
    def intent_name(self, intent_name):
        """Sets the intent_name of this IntentClassificationTestResultItem.


        :param intent_name: The intent_name of this IntentClassificationTestResultItem.
        :type intent_name: str
        """
        if intent_name is None:
            raise ValueError("Invalid value for `intent_name`, must not be `None`")

        self._intent_name = intent_name

    @property
    def multi_turn_conversation(self):
        """Gets the multi_turn_conversation of this IntentClassificationTestResultItem.


        :return: The multi_turn_conversation of this IntentClassificationTestResultItem.
        :rtype: bool
        """
        return self._multi_turn_conversation

    @multi_turn_conversation.setter
    def multi_turn_conversation(self, multi_turn_conversation):
        """Sets the multi_turn_conversation of this IntentClassificationTestResultItem.


        :param multi_turn_conversation: The multi_turn_conversation of this IntentClassificationTestResultItem.
        :type multi_turn_conversation: bool
        """
        if multi_turn_conversation is None:
            raise ValueError("Invalid value for `multi_turn_conversation`, must not be `None`")

        self._multi_turn_conversation = multi_turn_conversation

    @property
    def result_counts(self):
        """Gets the result_counts of this IntentClassificationTestResultItem.


        :return: The result_counts of this IntentClassificationTestResultItem.
        :rtype: IntentClassificationTestResultItemResultCounts
        """
        return self._result_counts

    @result_counts.setter
    def result_counts(self, result_counts):
        """Sets the result_counts of this IntentClassificationTestResultItem.


        :param result_counts: The result_counts of this IntentClassificationTestResultItem.
        :type result_counts: IntentClassificationTestResultItemResultCounts
        """
        if result_counts is None:
            raise ValueError("Invalid value for `result_counts`, must not be `None`")

        self._result_counts = result_counts
