# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.voice_engine import VoiceEngine
from openapi_server import util


class UpdateBotLocaleResponseVoiceSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, voice_id: str=None, engine: VoiceEngine=None):
        """UpdateBotLocaleResponseVoiceSettings - a model defined in OpenAPI

        :param voice_id: The voice_id of this UpdateBotLocaleResponseVoiceSettings.
        :param engine: The engine of this UpdateBotLocaleResponseVoiceSettings.
        """
        self.openapi_types = {
            'voice_id': str,
            'engine': VoiceEngine
        }

        self.attribute_map = {
            'voice_id': 'voiceId',
            'engine': 'engine'
        }

        self._voice_id = voice_id
        self._engine = engine

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBotLocaleResponseVoiceSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBotLocaleResponse_voiceSettings of this UpdateBotLocaleResponseVoiceSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def voice_id(self):
        """Gets the voice_id of this UpdateBotLocaleResponseVoiceSettings.


        :return: The voice_id of this UpdateBotLocaleResponseVoiceSettings.
        :rtype: str
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this UpdateBotLocaleResponseVoiceSettings.


        :param voice_id: The voice_id of this UpdateBotLocaleResponseVoiceSettings.
        :type voice_id: str
        """
        if voice_id is None:
            raise ValueError("Invalid value for `voice_id`, must not be `None`")

        self._voice_id = voice_id

    @property
    def engine(self):
        """Gets the engine of this UpdateBotLocaleResponseVoiceSettings.


        :return: The engine of this UpdateBotLocaleResponseVoiceSettings.
        :rtype: VoiceEngine
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this UpdateBotLocaleResponseVoiceSettings.


        :param engine: The engine of this UpdateBotLocaleResponseVoiceSettings.
        :type engine: VoiceEngine
        """

        self._engine = engine
