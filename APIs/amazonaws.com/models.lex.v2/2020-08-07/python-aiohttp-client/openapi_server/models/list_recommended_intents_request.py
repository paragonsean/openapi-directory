# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListRecommendedIntentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, max_results: int=None):
        """ListRecommendedIntentsRequest - a model defined in OpenAPI

        :param next_token: The next_token of this ListRecommendedIntentsRequest.
        :param max_results: The max_results of this ListRecommendedIntentsRequest.
        """
        self.openapi_types = {
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListRecommendedIntentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListRecommendedIntents_request of this ListRecommendedIntentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListRecommendedIntentsRequest.

        If the response from the ListRecommendedIntents operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.

        :return: The next_token of this ListRecommendedIntentsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListRecommendedIntentsRequest.

        If the response from the ListRecommendedIntents operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.

        :param next_token: The next_token of this ListRecommendedIntentsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListRecommendedIntentsRequest.

        The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.

        :return: The max_results of this ListRecommendedIntentsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListRecommendedIntentsRequest.

        The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.

        :param max_results: The max_results of this ListRecommendedIntentsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
