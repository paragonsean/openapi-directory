# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_turn_input_specification_session_state import UserTurnInputSpecificationSessionState
from openapi_server.models.user_turn_input_specification_utterance_input import UserTurnInputSpecificationUtteranceInput
from openapi_server import util


class UserTurnResultInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, utterance_input: UserTurnInputSpecificationUtteranceInput=None, request_attributes: Dict=None, session_state: UserTurnInputSpecificationSessionState=None):
        """UserTurnResultInput - a model defined in OpenAPI

        :param utterance_input: The utterance_input of this UserTurnResultInput.
        :param request_attributes: The request_attributes of this UserTurnResultInput.
        :param session_state: The session_state of this UserTurnResultInput.
        """
        self.openapi_types = {
            'utterance_input': UserTurnInputSpecificationUtteranceInput,
            'request_attributes': Dict,
            'session_state': UserTurnInputSpecificationSessionState
        }

        self.attribute_map = {
            'utterance_input': 'utteranceInput',
            'request_attributes': 'requestAttributes',
            'session_state': 'sessionState'
        }

        self._utterance_input = utterance_input
        self._request_attributes = request_attributes
        self._session_state = session_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserTurnResultInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserTurnResult_input of this UserTurnResultInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def utterance_input(self):
        """Gets the utterance_input of this UserTurnResultInput.


        :return: The utterance_input of this UserTurnResultInput.
        :rtype: UserTurnInputSpecificationUtteranceInput
        """
        return self._utterance_input

    @utterance_input.setter
    def utterance_input(self, utterance_input):
        """Sets the utterance_input of this UserTurnResultInput.


        :param utterance_input: The utterance_input of this UserTurnResultInput.
        :type utterance_input: UserTurnInputSpecificationUtteranceInput
        """
        if utterance_input is None:
            raise ValueError("Invalid value for `utterance_input`, must not be `None`")

        self._utterance_input = utterance_input

    @property
    def request_attributes(self):
        """Gets the request_attributes of this UserTurnResultInput.


        :return: The request_attributes of this UserTurnResultInput.
        :rtype: Dict
        """
        return self._request_attributes

    @request_attributes.setter
    def request_attributes(self, request_attributes):
        """Sets the request_attributes of this UserTurnResultInput.


        :param request_attributes: The request_attributes of this UserTurnResultInput.
        :type request_attributes: Dict
        """

        self._request_attributes = request_attributes

    @property
    def session_state(self):
        """Gets the session_state of this UserTurnResultInput.


        :return: The session_state of this UserTurnResultInput.
        :rtype: UserTurnInputSpecificationSessionState
        """
        return self._session_state

    @session_state.setter
    def session_state(self, session_state):
        """Sets the session_state of this UserTurnResultInput.


        :param session_state: The session_state of this UserTurnResultInput.
        :type session_state: UserTurnInputSpecificationSessionState
        """

        self._session_state = session_state
