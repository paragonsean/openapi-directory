# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_export_request_resource_specification import CreateExportRequestResourceSpecification
from openapi_server import util


class CreateExportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_specification: CreateExportRequestResourceSpecification=None, file_format: str=None, file_password: str=None):
        """CreateExportRequest - a model defined in OpenAPI

        :param resource_specification: The resource_specification of this CreateExportRequest.
        :param file_format: The file_format of this CreateExportRequest.
        :param file_password: The file_password of this CreateExportRequest.
        """
        self.openapi_types = {
            'resource_specification': CreateExportRequestResourceSpecification,
            'file_format': str,
            'file_password': str
        }

        self.attribute_map = {
            'resource_specification': 'resourceSpecification',
            'file_format': 'fileFormat',
            'file_password': 'filePassword'
        }

        self._resource_specification = resource_specification
        self._file_format = file_format
        self._file_password = file_password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateExportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateExport_request of this CreateExportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_specification(self):
        """Gets the resource_specification of this CreateExportRequest.


        :return: The resource_specification of this CreateExportRequest.
        :rtype: CreateExportRequestResourceSpecification
        """
        return self._resource_specification

    @resource_specification.setter
    def resource_specification(self, resource_specification):
        """Sets the resource_specification of this CreateExportRequest.


        :param resource_specification: The resource_specification of this CreateExportRequest.
        :type resource_specification: CreateExportRequestResourceSpecification
        """
        if resource_specification is None:
            raise ValueError("Invalid value for `resource_specification`, must not be `None`")

        self._resource_specification = resource_specification

    @property
    def file_format(self):
        """Gets the file_format of this CreateExportRequest.

        The file format of the bot or bot locale definition files.

        :return: The file_format of this CreateExportRequest.
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this CreateExportRequest.

        The file format of the bot or bot locale definition files.

        :param file_format: The file_format of this CreateExportRequest.
        :type file_format: str
        """
        allowed_values = ["LexJson", "TSV", "CSV"]  # noqa: E501
        if file_format not in allowed_values:
            raise ValueError(
                "Invalid value for `file_format` ({0}), must be one of {1}"
                .format(file_format, allowed_values)
            )

        self._file_format = file_format

    @property
    def file_password(self):
        """Gets the file_password of this CreateExportRequest.

        An password to use to encrypt the exported archive. Using a password is optional, but you should encrypt the archive to protect the data in transit between Amazon Lex and your local computer.

        :return: The file_password of this CreateExportRequest.
        :rtype: str
        """
        return self._file_password

    @file_password.setter
    def file_password(self, file_password):
        """Sets the file_password of this CreateExportRequest.

        An password to use to encrypt the exported archive. Using a password is optional, but you should encrypt the archive to protect the data in transit between Amazon Lex and your local computer.

        :param file_password: The file_password of this CreateExportRequest.
        :type file_password: str
        """
        if file_password is not None and len(file_password) > 1024:
            raise ValueError("Invalid value for `file_password`, length must be less than or equal to `1024`")
        if file_password is not None and len(file_password) < 1:
            raise ValueError("Invalid value for `file_password`, length must be greater than or equal to `1`")

        self._file_password = file_password
