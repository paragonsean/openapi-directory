# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_test_set_generation_request_generation_data_source import StartTestSetGenerationRequestGenerationDataSource
from openapi_server.models.start_test_set_generation_request_storage_location import StartTestSetGenerationRequestStorageLocation
import re
from openapi_server import util


class StartTestSetGenerationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, test_set_name: str=None, description: str=None, storage_location: StartTestSetGenerationRequestStorageLocation=None, generation_data_source: StartTestSetGenerationRequestGenerationDataSource=None, role_arn: str=None, test_set_tags: Dict[str, str]=None):
        """StartTestSetGenerationRequest - a model defined in OpenAPI

        :param test_set_name: The test_set_name of this StartTestSetGenerationRequest.
        :param description: The description of this StartTestSetGenerationRequest.
        :param storage_location: The storage_location of this StartTestSetGenerationRequest.
        :param generation_data_source: The generation_data_source of this StartTestSetGenerationRequest.
        :param role_arn: The role_arn of this StartTestSetGenerationRequest.
        :param test_set_tags: The test_set_tags of this StartTestSetGenerationRequest.
        """
        self.openapi_types = {
            'test_set_name': str,
            'description': str,
            'storage_location': StartTestSetGenerationRequestStorageLocation,
            'generation_data_source': StartTestSetGenerationRequestGenerationDataSource,
            'role_arn': str,
            'test_set_tags': Dict[str, str]
        }

        self.attribute_map = {
            'test_set_name': 'testSetName',
            'description': 'description',
            'storage_location': 'storageLocation',
            'generation_data_source': 'generationDataSource',
            'role_arn': 'roleArn',
            'test_set_tags': 'testSetTags'
        }

        self._test_set_name = test_set_name
        self._description = description
        self._storage_location = storage_location
        self._generation_data_source = generation_data_source
        self._role_arn = role_arn
        self._test_set_tags = test_set_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTestSetGenerationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartTestSetGeneration_request of this StartTestSetGenerationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def test_set_name(self):
        """Gets the test_set_name of this StartTestSetGenerationRequest.

        The test set name for the test set generation request.

        :return: The test_set_name of this StartTestSetGenerationRequest.
        :rtype: str
        """
        return self._test_set_name

    @test_set_name.setter
    def test_set_name(self, test_set_name):
        """Sets the test_set_name of this StartTestSetGenerationRequest.

        The test set name for the test set generation request.

        :param test_set_name: The test_set_name of this StartTestSetGenerationRequest.
        :type test_set_name: str
        """
        if test_set_name is None:
            raise ValueError("Invalid value for `test_set_name`, must not be `None`")
        if test_set_name is not None and len(test_set_name) > 100:
            raise ValueError("Invalid value for `test_set_name`, length must be less than or equal to `100`")
        if test_set_name is not None and len(test_set_name) < 1:
            raise ValueError("Invalid value for `test_set_name`, length must be greater than or equal to `1`")
        if test_set_name is not None and not re.search(r'^([0-9a-zA-Z][_-]?){1,100}$', test_set_name):
            raise ValueError("Invalid value for `test_set_name`, must be a follow pattern or equal to `/^([0-9a-zA-Z][_-]?){1,100}$/`")

        self._test_set_name = test_set_name

    @property
    def description(self):
        """Gets the description of this StartTestSetGenerationRequest.

        The test set description for the test set generation request.

        :return: The description of this StartTestSetGenerationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StartTestSetGenerationRequest.

        The test set description for the test set generation request.

        :param description: The description of this StartTestSetGenerationRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def storage_location(self):
        """Gets the storage_location of this StartTestSetGenerationRequest.


        :return: The storage_location of this StartTestSetGenerationRequest.
        :rtype: StartTestSetGenerationRequestStorageLocation
        """
        return self._storage_location

    @storage_location.setter
    def storage_location(self, storage_location):
        """Sets the storage_location of this StartTestSetGenerationRequest.


        :param storage_location: The storage_location of this StartTestSetGenerationRequest.
        :type storage_location: StartTestSetGenerationRequestStorageLocation
        """
        if storage_location is None:
            raise ValueError("Invalid value for `storage_location`, must not be `None`")

        self._storage_location = storage_location

    @property
    def generation_data_source(self):
        """Gets the generation_data_source of this StartTestSetGenerationRequest.


        :return: The generation_data_source of this StartTestSetGenerationRequest.
        :rtype: StartTestSetGenerationRequestGenerationDataSource
        """
        return self._generation_data_source

    @generation_data_source.setter
    def generation_data_source(self, generation_data_source):
        """Sets the generation_data_source of this StartTestSetGenerationRequest.


        :param generation_data_source: The generation_data_source of this StartTestSetGenerationRequest.
        :type generation_data_source: StartTestSetGenerationRequestGenerationDataSource
        """
        if generation_data_source is None:
            raise ValueError("Invalid value for `generation_data_source`, must not be `None`")

        self._generation_data_source = generation_data_source

    @property
    def role_arn(self):
        """Gets the role_arn of this StartTestSetGenerationRequest.

        The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.

        :return: The role_arn of this StartTestSetGenerationRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this StartTestSetGenerationRequest.

        The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.

        :param role_arn: The role_arn of this StartTestSetGenerationRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and len(role_arn) > 2048:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `2048`")
        if role_arn is not None and len(role_arn) < 32:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `32`")
        if role_arn is not None and not re.search(r'^arn:aws:iam::[0-9]{12}:role\/.*$', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/^arn:aws:iam::[0-9]{12}:role\/.*$/`")

        self._role_arn = role_arn

    @property
    def test_set_tags(self):
        """Gets the test_set_tags of this StartTestSetGenerationRequest.

        A list of tags to add to the test set. You can only add tags when you import/generate a new test set. You can't use the <code>UpdateTestSet</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.

        :return: The test_set_tags of this StartTestSetGenerationRequest.
        :rtype: Dict[str, str]
        """
        return self._test_set_tags

    @test_set_tags.setter
    def test_set_tags(self, test_set_tags):
        """Sets the test_set_tags of this StartTestSetGenerationRequest.

        A list of tags to add to the test set. You can only add tags when you import/generate a new test set. You can't use the <code>UpdateTestSet</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.

        :param test_set_tags: The test_set_tags of this StartTestSetGenerationRequest.
        :type test_set_tags: Dict[str, str]
        """
        if test_set_tags is not None and len(test_set_tags) > 200:
            raise ValueError("Invalid value for `test_set_tags`, number of items must be less than or equal to `200`")
        if test_set_tags is not None and len(test_set_tags) < 0:
            raise ValueError("Invalid value for `test_set_tags`, number of items must be greater than or equal to `0`")

        self._test_set_tags = test_set_tags
