# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_turn_output_specification_intent import UserTurnOutputSpecificationIntent
from openapi_server import util


class UserTurnOutputSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, intent: UserTurnOutputSpecificationIntent=None, active_contexts: List=None, transcript: str=None):
        """UserTurnOutputSpecification - a model defined in OpenAPI

        :param intent: The intent of this UserTurnOutputSpecification.
        :param active_contexts: The active_contexts of this UserTurnOutputSpecification.
        :param transcript: The transcript of this UserTurnOutputSpecification.
        """
        self.openapi_types = {
            'intent': UserTurnOutputSpecificationIntent,
            'active_contexts': List,
            'transcript': str
        }

        self.attribute_map = {
            'intent': 'intent',
            'active_contexts': 'activeContexts',
            'transcript': 'transcript'
        }

        self._intent = intent
        self._active_contexts = active_contexts
        self._transcript = transcript

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserTurnOutputSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserTurnOutputSpecification of this UserTurnOutputSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def intent(self):
        """Gets the intent of this UserTurnOutputSpecification.


        :return: The intent of this UserTurnOutputSpecification.
        :rtype: UserTurnOutputSpecificationIntent
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this UserTurnOutputSpecification.


        :param intent: The intent of this UserTurnOutputSpecification.
        :type intent: UserTurnOutputSpecificationIntent
        """
        if intent is None:
            raise ValueError("Invalid value for `intent`, must not be `None`")

        self._intent = intent

    @property
    def active_contexts(self):
        """Gets the active_contexts of this UserTurnOutputSpecification.


        :return: The active_contexts of this UserTurnOutputSpecification.
        :rtype: List
        """
        return self._active_contexts

    @active_contexts.setter
    def active_contexts(self, active_contexts):
        """Sets the active_contexts of this UserTurnOutputSpecification.


        :param active_contexts: The active_contexts of this UserTurnOutputSpecification.
        :type active_contexts: List
        """

        self._active_contexts = active_contexts

    @property
    def transcript(self):
        """Gets the transcript of this UserTurnOutputSpecification.


        :return: The transcript of this UserTurnOutputSpecification.
        :rtype: str
        """
        return self._transcript

    @transcript.setter
    def transcript(self, transcript):
        """Sets the transcript of this UserTurnOutputSpecification.


        :param transcript: The transcript of this UserTurnOutputSpecification.
        :type transcript: str
        """

        self._transcript = transcript
