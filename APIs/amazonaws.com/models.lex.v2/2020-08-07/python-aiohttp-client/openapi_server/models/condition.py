# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Condition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expression_string: str=None):
        """Condition - a model defined in OpenAPI

        :param expression_string: The expression_string of this Condition.
        """
        self.openapi_types = {
            'expression_string': str
        }

        self.attribute_map = {
            'expression_string': 'expressionString'
        }

        self._expression_string = expression_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Condition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Condition of this Condition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expression_string(self):
        """Gets the expression_string of this Condition.


        :return: The expression_string of this Condition.
        :rtype: str
        """
        return self._expression_string

    @expression_string.setter
    def expression_string(self, expression_string):
        """Sets the expression_string of this Condition.


        :param expression_string: The expression_string of this Condition.
        :type expression_string: str
        """
        if expression_string is None:
            raise ValueError("Invalid value for `expression_string`, must not be `None`")

        self._expression_string = expression_string
