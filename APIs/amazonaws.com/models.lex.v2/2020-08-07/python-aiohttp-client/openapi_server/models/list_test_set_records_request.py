# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListTestSetRecordsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, next_token: str=None):
        """ListTestSetRecordsRequest - a model defined in OpenAPI

        :param max_results: The max_results of this ListTestSetRecordsRequest.
        :param next_token: The next_token of this ListTestSetRecordsRequest.
        """
        self.openapi_types = {
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTestSetRecordsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTestSetRecords_request of this ListTestSetRecordsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this ListTestSetRecordsRequest.

        The maximum number of test set records to return in each page. If there are fewer records than the max page size, only the actual number of records are returned.

        :return: The max_results of this ListTestSetRecordsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListTestSetRecordsRequest.

        The maximum number of test set records to return in each page. If there are fewer records than the max page size, only the actual number of records are returned.

        :param max_results: The max_results of this ListTestSetRecordsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListTestSetRecordsRequest.

        If the response from the ListTestSetRecords operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.

        :return: The next_token of this ListTestSetRecordsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListTestSetRecordsRequest.

        If the response from the ListTestSetRecords operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.

        :param next_token: The next_token of this ListTestSetRecordsRequest.
        :type next_token: str
        """

        self._next_token = next_token
