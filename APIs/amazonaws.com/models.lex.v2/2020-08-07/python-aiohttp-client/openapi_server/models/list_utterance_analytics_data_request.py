# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_utterance_filter import AnalyticsUtteranceFilter
from openapi_server.models.list_utterance_analytics_data_request_sort_by import ListUtteranceAnalyticsDataRequestSortBy
from openapi_server import util


class ListUtteranceAnalyticsDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_date_time: datetime=None, end_date_time: datetime=None, sort_by: ListUtteranceAnalyticsDataRequestSortBy=None, filters: List[AnalyticsUtteranceFilter]=None, max_results: int=None, next_token: str=None):
        """ListUtteranceAnalyticsDataRequest - a model defined in OpenAPI

        :param start_date_time: The start_date_time of this ListUtteranceAnalyticsDataRequest.
        :param end_date_time: The end_date_time of this ListUtteranceAnalyticsDataRequest.
        :param sort_by: The sort_by of this ListUtteranceAnalyticsDataRequest.
        :param filters: The filters of this ListUtteranceAnalyticsDataRequest.
        :param max_results: The max_results of this ListUtteranceAnalyticsDataRequest.
        :param next_token: The next_token of this ListUtteranceAnalyticsDataRequest.
        """
        self.openapi_types = {
            'start_date_time': datetime,
            'end_date_time': datetime,
            'sort_by': ListUtteranceAnalyticsDataRequestSortBy,
            'filters': List[AnalyticsUtteranceFilter],
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'start_date_time': 'startDateTime',
            'end_date_time': 'endDateTime',
            'sort_by': 'sortBy',
            'filters': 'filters',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._start_date_time = start_date_time
        self._end_date_time = end_date_time
        self._sort_by = sort_by
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListUtteranceAnalyticsDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListUtteranceAnalyticsData_request of this ListUtteranceAnalyticsDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ListUtteranceAnalyticsDataRequest.

        The date and time that marks the beginning of the range of time for which you want to see utterance analytics.

        :return: The start_date_time of this ListUtteranceAnalyticsDataRequest.
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ListUtteranceAnalyticsDataRequest.

        The date and time that marks the beginning of the range of time for which you want to see utterance analytics.

        :param start_date_time: The start_date_time of this ListUtteranceAnalyticsDataRequest.
        :type start_date_time: datetime
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ListUtteranceAnalyticsDataRequest.

        The date and time that marks the end of the range of time for which you want to see utterance analytics.

        :return: The end_date_time of this ListUtteranceAnalyticsDataRequest.
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ListUtteranceAnalyticsDataRequest.

        The date and time that marks the end of the range of time for which you want to see utterance analytics.

        :param end_date_time: The end_date_time of this ListUtteranceAnalyticsDataRequest.
        :type end_date_time: datetime
        """
        if end_date_time is None:
            raise ValueError("Invalid value for `end_date_time`, must not be `None`")

        self._end_date_time = end_date_time

    @property
    def sort_by(self):
        """Gets the sort_by of this ListUtteranceAnalyticsDataRequest.


        :return: The sort_by of this ListUtteranceAnalyticsDataRequest.
        :rtype: ListUtteranceAnalyticsDataRequestSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this ListUtteranceAnalyticsDataRequest.


        :param sort_by: The sort_by of this ListUtteranceAnalyticsDataRequest.
        :type sort_by: ListUtteranceAnalyticsDataRequestSortBy
        """

        self._sort_by = sort_by

    @property
    def filters(self):
        """Gets the filters of this ListUtteranceAnalyticsDataRequest.

        A list of objects, each of which describes a condition by which you want to filter the results.

        :return: The filters of this ListUtteranceAnalyticsDataRequest.
        :rtype: List[AnalyticsUtteranceFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListUtteranceAnalyticsDataRequest.

        A list of objects, each of which describes a condition by which you want to filter the results.

        :param filters: The filters of this ListUtteranceAnalyticsDataRequest.
        :type filters: List[AnalyticsUtteranceFilter]
        """
        if filters is not None and len(filters) > 9:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `9`")
        if filters is not None and len(filters) < 1:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `1`")

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this ListUtteranceAnalyticsDataRequest.

        The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.

        :return: The max_results of this ListUtteranceAnalyticsDataRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListUtteranceAnalyticsDataRequest.

        The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.

        :param max_results: The max_results of this ListUtteranceAnalyticsDataRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListUtteranceAnalyticsDataRequest.

        <p>If the response from the ListUtteranceAnalyticsData operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p> <p>Use the returned token in the nextToken parameter of a ListUtteranceAnalyticsData request to return the next page of results. For a complete set of results, call the ListUtteranceAnalyticsData operation until the nextToken returned in the response is null.</p>

        :return: The next_token of this ListUtteranceAnalyticsDataRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListUtteranceAnalyticsDataRequest.

        <p>If the response from the ListUtteranceAnalyticsData operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p> <p>Use the returned token in the nextToken parameter of a ListUtteranceAnalyticsData request to return the next page of results. For a complete set of results, call the ListUtteranceAnalyticsData operation until the nextToken returned in the response is null.</p>

        :param next_token: The next_token of this ListUtteranceAnalyticsDataRequest.
        :type next_token: str
        """

        self._next_token = next_token
