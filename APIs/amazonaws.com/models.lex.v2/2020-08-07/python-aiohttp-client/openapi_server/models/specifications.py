# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.specifications_value_elicitation_setting import SpecificationsValueElicitationSetting
from openapi_server import util


class Specifications(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, slot_type_id: str=None, value_elicitation_setting: SpecificationsValueElicitationSetting=None):
        """Specifications - a model defined in OpenAPI

        :param slot_type_id: The slot_type_id of this Specifications.
        :param value_elicitation_setting: The value_elicitation_setting of this Specifications.
        """
        self.openapi_types = {
            'slot_type_id': str,
            'value_elicitation_setting': SpecificationsValueElicitationSetting
        }

        self.attribute_map = {
            'slot_type_id': 'slotTypeId',
            'value_elicitation_setting': 'valueElicitationSetting'
        }

        self._slot_type_id = slot_type_id
        self._value_elicitation_setting = value_elicitation_setting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Specifications':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Specifications of this Specifications.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def slot_type_id(self):
        """Gets the slot_type_id of this Specifications.


        :return: The slot_type_id of this Specifications.
        :rtype: str
        """
        return self._slot_type_id

    @slot_type_id.setter
    def slot_type_id(self, slot_type_id):
        """Sets the slot_type_id of this Specifications.


        :param slot_type_id: The slot_type_id of this Specifications.
        :type slot_type_id: str
        """
        if slot_type_id is None:
            raise ValueError("Invalid value for `slot_type_id`, must not be `None`")

        self._slot_type_id = slot_type_id

    @property
    def value_elicitation_setting(self):
        """Gets the value_elicitation_setting of this Specifications.


        :return: The value_elicitation_setting of this Specifications.
        :rtype: SpecificationsValueElicitationSetting
        """
        return self._value_elicitation_setting

    @value_elicitation_setting.setter
    def value_elicitation_setting(self, value_elicitation_setting):
        """Sets the value_elicitation_setting of this Specifications.


        :param value_elicitation_setting: The value_elicitation_setting of this Specifications.
        :type value_elicitation_setting: SpecificationsValueElicitationSetting
        """
        if value_elicitation_setting is None:
            raise ValueError("Invalid value for `value_elicitation_setting`, must not be `None`")

        self._value_elicitation_setting = value_elicitation_setting
