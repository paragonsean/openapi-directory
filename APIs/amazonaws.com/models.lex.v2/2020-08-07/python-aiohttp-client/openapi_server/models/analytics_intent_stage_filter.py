# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_filter_operator import AnalyticsFilterOperator
from openapi_server.models.analytics_intent_stage_filter_name import AnalyticsIntentStageFilterName
from openapi_server import util


class AnalyticsIntentStageFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: AnalyticsIntentStageFilterName=None, operator: AnalyticsFilterOperator=None, values: List=None):
        """AnalyticsIntentStageFilter - a model defined in OpenAPI

        :param name: The name of this AnalyticsIntentStageFilter.
        :param operator: The operator of this AnalyticsIntentStageFilter.
        :param values: The values of this AnalyticsIntentStageFilter.
        """
        self.openapi_types = {
            'name': AnalyticsIntentStageFilterName,
            'operator': AnalyticsFilterOperator,
            'values': List
        }

        self.attribute_map = {
            'name': 'name',
            'operator': 'operator',
            'values': 'values'
        }

        self._name = name
        self._operator = operator
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsIntentStageFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyticsIntentStageFilter of this AnalyticsIntentStageFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AnalyticsIntentStageFilter.


        :return: The name of this AnalyticsIntentStageFilter.
        :rtype: AnalyticsIntentStageFilterName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyticsIntentStageFilter.


        :param name: The name of this AnalyticsIntentStageFilter.
        :type name: AnalyticsIntentStageFilterName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def operator(self):
        """Gets the operator of this AnalyticsIntentStageFilter.


        :return: The operator of this AnalyticsIntentStageFilter.
        :rtype: AnalyticsFilterOperator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this AnalyticsIntentStageFilter.


        :param operator: The operator of this AnalyticsIntentStageFilter.
        :type operator: AnalyticsFilterOperator
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")

        self._operator = operator

    @property
    def values(self):
        """Gets the values of this AnalyticsIntentStageFilter.


        :return: The values of this AnalyticsIntentStageFilter.
        :rtype: List
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AnalyticsIntentStageFilter.


        :param values: The values of this AnalyticsIntentStageFilter.
        :type values: List
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
