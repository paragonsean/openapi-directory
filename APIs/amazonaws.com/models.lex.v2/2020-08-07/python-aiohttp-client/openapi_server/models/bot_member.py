# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BotMember(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_member_id: str=None, bot_member_name: str=None, bot_member_alias_id: str=None, bot_member_alias_name: str=None, bot_member_version: str=None):
        """BotMember - a model defined in OpenAPI

        :param bot_member_id: The bot_member_id of this BotMember.
        :param bot_member_name: The bot_member_name of this BotMember.
        :param bot_member_alias_id: The bot_member_alias_id of this BotMember.
        :param bot_member_alias_name: The bot_member_alias_name of this BotMember.
        :param bot_member_version: The bot_member_version of this BotMember.
        """
        self.openapi_types = {
            'bot_member_id': str,
            'bot_member_name': str,
            'bot_member_alias_id': str,
            'bot_member_alias_name': str,
            'bot_member_version': str
        }

        self.attribute_map = {
            'bot_member_id': 'botMemberId',
            'bot_member_name': 'botMemberName',
            'bot_member_alias_id': 'botMemberAliasId',
            'bot_member_alias_name': 'botMemberAliasName',
            'bot_member_version': 'botMemberVersion'
        }

        self._bot_member_id = bot_member_id
        self._bot_member_name = bot_member_name
        self._bot_member_alias_id = bot_member_alias_id
        self._bot_member_alias_name = bot_member_alias_name
        self._bot_member_version = bot_member_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BotMember':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BotMember of this BotMember.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_member_id(self):
        """Gets the bot_member_id of this BotMember.


        :return: The bot_member_id of this BotMember.
        :rtype: str
        """
        return self._bot_member_id

    @bot_member_id.setter
    def bot_member_id(self, bot_member_id):
        """Sets the bot_member_id of this BotMember.


        :param bot_member_id: The bot_member_id of this BotMember.
        :type bot_member_id: str
        """
        if bot_member_id is None:
            raise ValueError("Invalid value for `bot_member_id`, must not be `None`")

        self._bot_member_id = bot_member_id

    @property
    def bot_member_name(self):
        """Gets the bot_member_name of this BotMember.


        :return: The bot_member_name of this BotMember.
        :rtype: str
        """
        return self._bot_member_name

    @bot_member_name.setter
    def bot_member_name(self, bot_member_name):
        """Sets the bot_member_name of this BotMember.


        :param bot_member_name: The bot_member_name of this BotMember.
        :type bot_member_name: str
        """
        if bot_member_name is None:
            raise ValueError("Invalid value for `bot_member_name`, must not be `None`")

        self._bot_member_name = bot_member_name

    @property
    def bot_member_alias_id(self):
        """Gets the bot_member_alias_id of this BotMember.


        :return: The bot_member_alias_id of this BotMember.
        :rtype: str
        """
        return self._bot_member_alias_id

    @bot_member_alias_id.setter
    def bot_member_alias_id(self, bot_member_alias_id):
        """Sets the bot_member_alias_id of this BotMember.


        :param bot_member_alias_id: The bot_member_alias_id of this BotMember.
        :type bot_member_alias_id: str
        """
        if bot_member_alias_id is None:
            raise ValueError("Invalid value for `bot_member_alias_id`, must not be `None`")

        self._bot_member_alias_id = bot_member_alias_id

    @property
    def bot_member_alias_name(self):
        """Gets the bot_member_alias_name of this BotMember.


        :return: The bot_member_alias_name of this BotMember.
        :rtype: str
        """
        return self._bot_member_alias_name

    @bot_member_alias_name.setter
    def bot_member_alias_name(self, bot_member_alias_name):
        """Sets the bot_member_alias_name of this BotMember.


        :param bot_member_alias_name: The bot_member_alias_name of this BotMember.
        :type bot_member_alias_name: str
        """
        if bot_member_alias_name is None:
            raise ValueError("Invalid value for `bot_member_alias_name`, must not be `None`")

        self._bot_member_alias_name = bot_member_alias_name

    @property
    def bot_member_version(self):
        """Gets the bot_member_version of this BotMember.


        :return: The bot_member_version of this BotMember.
        :rtype: str
        """
        return self._bot_member_version

    @bot_member_version.setter
    def bot_member_version(self, bot_member_version):
        """Sets the bot_member_version of this BotMember.


        :param bot_member_version: The bot_member_version of this BotMember.
        :type bot_member_version: str
        """
        if bot_member_version is None:
            raise ValueError("Invalid value for `bot_member_version`, must not be `None`")

        self._bot_member_version = bot_member_version
