# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_bot_locale_request_voice_settings import UpdateBotLocaleRequestVoiceSettings
from openapi_server import util


class CreateBotLocaleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, locale_id: str=None, description: str=None, nlu_intent_confidence_threshold: float=None, voice_settings: UpdateBotLocaleRequestVoiceSettings=None):
        """CreateBotLocaleRequest - a model defined in OpenAPI

        :param locale_id: The locale_id of this CreateBotLocaleRequest.
        :param description: The description of this CreateBotLocaleRequest.
        :param nlu_intent_confidence_threshold: The nlu_intent_confidence_threshold of this CreateBotLocaleRequest.
        :param voice_settings: The voice_settings of this CreateBotLocaleRequest.
        """
        self.openapi_types = {
            'locale_id': str,
            'description': str,
            'nlu_intent_confidence_threshold': float,
            'voice_settings': UpdateBotLocaleRequestVoiceSettings
        }

        self.attribute_map = {
            'locale_id': 'localeId',
            'description': 'description',
            'nlu_intent_confidence_threshold': 'nluIntentConfidenceThreshold',
            'voice_settings': 'voiceSettings'
        }

        self._locale_id = locale_id
        self._description = description
        self._nlu_intent_confidence_threshold = nlu_intent_confidence_threshold
        self._voice_settings = voice_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBotLocaleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBotLocale_request of this CreateBotLocaleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locale_id(self):
        """Gets the locale_id of this CreateBotLocaleRequest.

        The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.

        :return: The locale_id of this CreateBotLocaleRequest.
        :rtype: str
        """
        return self._locale_id

    @locale_id.setter
    def locale_id(self, locale_id):
        """Sets the locale_id of this CreateBotLocaleRequest.

        The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.

        :param locale_id: The locale_id of this CreateBotLocaleRequest.
        :type locale_id: str
        """
        if locale_id is None:
            raise ValueError("Invalid value for `locale_id`, must not be `None`")

        self._locale_id = locale_id

    @property
    def description(self):
        """Gets the description of this CreateBotLocaleRequest.

        A description of the bot locale. Use this to help identify the bot locale in lists.

        :return: The description of this CreateBotLocaleRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateBotLocaleRequest.

        A description of the bot locale. Use this to help identify the bot locale in lists.

        :param description: The description of this CreateBotLocaleRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def nlu_intent_confidence_threshold(self):
        """Gets the nlu_intent_confidence_threshold of this CreateBotLocaleRequest.

        <p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot.</p> <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>RecognizeText</code> operation would be:</p> <ul> <li> <p>AMAZON.FallbackIntent</p> </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p> </li> <li> <p>IntentC</p> </li> </ul>

        :return: The nlu_intent_confidence_threshold of this CreateBotLocaleRequest.
        :rtype: float
        """
        return self._nlu_intent_confidence_threshold

    @nlu_intent_confidence_threshold.setter
    def nlu_intent_confidence_threshold(self, nlu_intent_confidence_threshold):
        """Sets the nlu_intent_confidence_threshold of this CreateBotLocaleRequest.

        <p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot.</p> <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>RecognizeText</code> operation would be:</p> <ul> <li> <p>AMAZON.FallbackIntent</p> </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p> </li> <li> <p>IntentC</p> </li> </ul>

        :param nlu_intent_confidence_threshold: The nlu_intent_confidence_threshold of this CreateBotLocaleRequest.
        :type nlu_intent_confidence_threshold: float
        """
        if nlu_intent_confidence_threshold is None:
            raise ValueError("Invalid value for `nlu_intent_confidence_threshold`, must not be `None`")
        if nlu_intent_confidence_threshold is not None and nlu_intent_confidence_threshold > 1:
            raise ValueError("Invalid value for `nlu_intent_confidence_threshold`, must be a value less than or equal to `1`")
        if nlu_intent_confidence_threshold is not None and nlu_intent_confidence_threshold < 0:
            raise ValueError("Invalid value for `nlu_intent_confidence_threshold`, must be a value greater than or equal to `0`")

        self._nlu_intent_confidence_threshold = nlu_intent_confidence_threshold

    @property
    def voice_settings(self):
        """Gets the voice_settings of this CreateBotLocaleRequest.


        :return: The voice_settings of this CreateBotLocaleRequest.
        :rtype: UpdateBotLocaleRequestVoiceSettings
        """
        return self._voice_settings

    @voice_settings.setter
    def voice_settings(self, voice_settings):
        """Sets the voice_settings of this CreateBotLocaleRequest.


        :param voice_settings: The voice_settings of this CreateBotLocaleRequest.
        :type voice_settings: UpdateBotLocaleRequestVoiceSettings
        """

        self._voice_settings = voice_settings
