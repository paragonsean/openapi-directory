# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dialog_code_hook_invocation_setting_post_code_hook_specification import DialogCodeHookInvocationSettingPostCodeHookSpecification
from openapi_server import util


class SlotCaptureSettingCodeHook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_code_hook_invocation: bool=None, active: bool=None, invocation_label: str=None, post_code_hook_specification: DialogCodeHookInvocationSettingPostCodeHookSpecification=None):
        """SlotCaptureSettingCodeHook - a model defined in OpenAPI

        :param enable_code_hook_invocation: The enable_code_hook_invocation of this SlotCaptureSettingCodeHook.
        :param active: The active of this SlotCaptureSettingCodeHook.
        :param invocation_label: The invocation_label of this SlotCaptureSettingCodeHook.
        :param post_code_hook_specification: The post_code_hook_specification of this SlotCaptureSettingCodeHook.
        """
        self.openapi_types = {
            'enable_code_hook_invocation': bool,
            'active': bool,
            'invocation_label': str,
            'post_code_hook_specification': DialogCodeHookInvocationSettingPostCodeHookSpecification
        }

        self.attribute_map = {
            'enable_code_hook_invocation': 'enableCodeHookInvocation',
            'active': 'active',
            'invocation_label': 'invocationLabel',
            'post_code_hook_specification': 'postCodeHookSpecification'
        }

        self._enable_code_hook_invocation = enable_code_hook_invocation
        self._active = active
        self._invocation_label = invocation_label
        self._post_code_hook_specification = post_code_hook_specification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlotCaptureSettingCodeHook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlotCaptureSetting_codeHook of this SlotCaptureSettingCodeHook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_code_hook_invocation(self):
        """Gets the enable_code_hook_invocation of this SlotCaptureSettingCodeHook.


        :return: The enable_code_hook_invocation of this SlotCaptureSettingCodeHook.
        :rtype: bool
        """
        return self._enable_code_hook_invocation

    @enable_code_hook_invocation.setter
    def enable_code_hook_invocation(self, enable_code_hook_invocation):
        """Sets the enable_code_hook_invocation of this SlotCaptureSettingCodeHook.


        :param enable_code_hook_invocation: The enable_code_hook_invocation of this SlotCaptureSettingCodeHook.
        :type enable_code_hook_invocation: bool
        """
        if enable_code_hook_invocation is None:
            raise ValueError("Invalid value for `enable_code_hook_invocation`, must not be `None`")

        self._enable_code_hook_invocation = enable_code_hook_invocation

    @property
    def active(self):
        """Gets the active of this SlotCaptureSettingCodeHook.


        :return: The active of this SlotCaptureSettingCodeHook.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SlotCaptureSettingCodeHook.


        :param active: The active of this SlotCaptureSettingCodeHook.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def invocation_label(self):
        """Gets the invocation_label of this SlotCaptureSettingCodeHook.


        :return: The invocation_label of this SlotCaptureSettingCodeHook.
        :rtype: str
        """
        return self._invocation_label

    @invocation_label.setter
    def invocation_label(self, invocation_label):
        """Sets the invocation_label of this SlotCaptureSettingCodeHook.


        :param invocation_label: The invocation_label of this SlotCaptureSettingCodeHook.
        :type invocation_label: str
        """

        self._invocation_label = invocation_label

    @property
    def post_code_hook_specification(self):
        """Gets the post_code_hook_specification of this SlotCaptureSettingCodeHook.


        :return: The post_code_hook_specification of this SlotCaptureSettingCodeHook.
        :rtype: DialogCodeHookInvocationSettingPostCodeHookSpecification
        """
        return self._post_code_hook_specification

    @post_code_hook_specification.setter
    def post_code_hook_specification(self, post_code_hook_specification):
        """Sets the post_code_hook_specification of this SlotCaptureSettingCodeHook.


        :param post_code_hook_specification: The post_code_hook_specification of this SlotCaptureSettingCodeHook.
        :type post_code_hook_specification: DialogCodeHookInvocationSettingPostCodeHookSpecification
        """
        if post_code_hook_specification is None:
            raise ValueError("Invalid value for `post_code_hook_specification`, must not be `None`")

        self._post_code_hook_specification = post_code_hook_specification
