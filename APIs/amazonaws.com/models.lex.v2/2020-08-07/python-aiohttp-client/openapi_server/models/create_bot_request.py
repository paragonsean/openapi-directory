# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bot_member import BotMember
from openapi_server.models.create_bot_request_data_privacy import CreateBotRequestDataPrivacy
import re
from openapi_server import util


class CreateBotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_name: str=None, description: str=None, role_arn: str=None, data_privacy: CreateBotRequestDataPrivacy=None, idle_session_ttlin_seconds: int=None, bot_tags: Dict[str, str]=None, test_bot_alias_tags: Dict[str, str]=None, bot_type: str=None, bot_members: List[BotMember]=None):
        """CreateBotRequest - a model defined in OpenAPI

        :param bot_name: The bot_name of this CreateBotRequest.
        :param description: The description of this CreateBotRequest.
        :param role_arn: The role_arn of this CreateBotRequest.
        :param data_privacy: The data_privacy of this CreateBotRequest.
        :param idle_session_ttlin_seconds: The idle_session_ttlin_seconds of this CreateBotRequest.
        :param bot_tags: The bot_tags of this CreateBotRequest.
        :param test_bot_alias_tags: The test_bot_alias_tags of this CreateBotRequest.
        :param bot_type: The bot_type of this CreateBotRequest.
        :param bot_members: The bot_members of this CreateBotRequest.
        """
        self.openapi_types = {
            'bot_name': str,
            'description': str,
            'role_arn': str,
            'data_privacy': CreateBotRequestDataPrivacy,
            'idle_session_ttlin_seconds': int,
            'bot_tags': Dict[str, str],
            'test_bot_alias_tags': Dict[str, str],
            'bot_type': str,
            'bot_members': List[BotMember]
        }

        self.attribute_map = {
            'bot_name': 'botName',
            'description': 'description',
            'role_arn': 'roleArn',
            'data_privacy': 'dataPrivacy',
            'idle_session_ttlin_seconds': 'idleSessionTTLInSeconds',
            'bot_tags': 'botTags',
            'test_bot_alias_tags': 'testBotAliasTags',
            'bot_type': 'botType',
            'bot_members': 'botMembers'
        }

        self._bot_name = bot_name
        self._description = description
        self._role_arn = role_arn
        self._data_privacy = data_privacy
        self._idle_session_ttlin_seconds = idle_session_ttlin_seconds
        self._bot_tags = bot_tags
        self._test_bot_alias_tags = test_bot_alias_tags
        self._bot_type = bot_type
        self._bot_members = bot_members

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBot_request of this CreateBotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_name(self):
        """Gets the bot_name of this CreateBotRequest.

        The name of the bot. The bot name must be unique in the account that creates the bot.

        :return: The bot_name of this CreateBotRequest.
        :rtype: str
        """
        return self._bot_name

    @bot_name.setter
    def bot_name(self, bot_name):
        """Sets the bot_name of this CreateBotRequest.

        The name of the bot. The bot name must be unique in the account that creates the bot.

        :param bot_name: The bot_name of this CreateBotRequest.
        :type bot_name: str
        """
        if bot_name is None:
            raise ValueError("Invalid value for `bot_name`, must not be `None`")
        if bot_name is not None and len(bot_name) > 100:
            raise ValueError("Invalid value for `bot_name`, length must be less than or equal to `100`")
        if bot_name is not None and len(bot_name) < 1:
            raise ValueError("Invalid value for `bot_name`, length must be greater than or equal to `1`")
        if bot_name is not None and not re.search(r'^([0-9a-zA-Z][_-]?){1,100}$', bot_name):
            raise ValueError("Invalid value for `bot_name`, must be a follow pattern or equal to `/^([0-9a-zA-Z][_-]?){1,100}$/`")

        self._bot_name = bot_name

    @property
    def description(self):
        """Gets the description of this CreateBotRequest.

        A description of the bot. It appears in lists to help you identify a particular bot.

        :return: The description of this CreateBotRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateBotRequest.

        A description of the bot. It appears in lists to help you identify a particular bot.

        :param description: The description of this CreateBotRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateBotRequest.

        The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.

        :return: The role_arn of this CreateBotRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateBotRequest.

        The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.

        :param role_arn: The role_arn of this CreateBotRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and len(role_arn) > 2048:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `2048`")
        if role_arn is not None and len(role_arn) < 32:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `32`")
        if role_arn is not None and not re.search(r'^arn:aws:iam::[0-9]{12}:role\/.*$', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/^arn:aws:iam::[0-9]{12}:role\/.*$/`")

        self._role_arn = role_arn

    @property
    def data_privacy(self):
        """Gets the data_privacy of this CreateBotRequest.


        :return: The data_privacy of this CreateBotRequest.
        :rtype: CreateBotRequestDataPrivacy
        """
        return self._data_privacy

    @data_privacy.setter
    def data_privacy(self, data_privacy):
        """Sets the data_privacy of this CreateBotRequest.


        :param data_privacy: The data_privacy of this CreateBotRequest.
        :type data_privacy: CreateBotRequestDataPrivacy
        """
        if data_privacy is None:
            raise ValueError("Invalid value for `data_privacy`, must not be `None`")

        self._data_privacy = data_privacy

    @property
    def idle_session_ttlin_seconds(self):
        """Gets the idle_session_ttlin_seconds of this CreateBotRequest.

        <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. </p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>

        :return: The idle_session_ttlin_seconds of this CreateBotRequest.
        :rtype: int
        """
        return self._idle_session_ttlin_seconds

    @idle_session_ttlin_seconds.setter
    def idle_session_ttlin_seconds(self, idle_session_ttlin_seconds):
        """Sets the idle_session_ttlin_seconds of this CreateBotRequest.

        <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. </p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>

        :param idle_session_ttlin_seconds: The idle_session_ttlin_seconds of this CreateBotRequest.
        :type idle_session_ttlin_seconds: int
        """
        if idle_session_ttlin_seconds is None:
            raise ValueError("Invalid value for `idle_session_ttlin_seconds`, must not be `None`")
        if idle_session_ttlin_seconds is not None and idle_session_ttlin_seconds > 86400:
            raise ValueError("Invalid value for `idle_session_ttlin_seconds`, must be a value less than or equal to `86400`")
        if idle_session_ttlin_seconds is not None and idle_session_ttlin_seconds < 60:
            raise ValueError("Invalid value for `idle_session_ttlin_seconds`, must be a value greater than or equal to `60`")

        self._idle_session_ttlin_seconds = idle_session_ttlin_seconds

    @property
    def bot_tags(self):
        """Gets the bot_tags of this CreateBotRequest.

        A list of tags to add to the bot. You can only add tags when you create a bot. You can't use the <code>UpdateBot</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.

        :return: The bot_tags of this CreateBotRequest.
        :rtype: Dict[str, str]
        """
        return self._bot_tags

    @bot_tags.setter
    def bot_tags(self, bot_tags):
        """Sets the bot_tags of this CreateBotRequest.

        A list of tags to add to the bot. You can only add tags when you create a bot. You can't use the <code>UpdateBot</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.

        :param bot_tags: The bot_tags of this CreateBotRequest.
        :type bot_tags: Dict[str, str]
        """
        if bot_tags is not None and len(bot_tags) > 200:
            raise ValueError("Invalid value for `bot_tags`, number of items must be less than or equal to `200`")
        if bot_tags is not None and len(bot_tags) < 0:
            raise ValueError("Invalid value for `bot_tags`, number of items must be greater than or equal to `0`")

        self._bot_tags = bot_tags

    @property
    def test_bot_alias_tags(self):
        """Gets the test_bot_alias_tags of this CreateBotRequest.

        A list of tags to add to the test alias for a bot. You can only add tags when you create a bot. You can't use the <code>UpdateAlias</code> operation to update tags. To update tags on the test alias, use the <code>TagResource</code> operation.

        :return: The test_bot_alias_tags of this CreateBotRequest.
        :rtype: Dict[str, str]
        """
        return self._test_bot_alias_tags

    @test_bot_alias_tags.setter
    def test_bot_alias_tags(self, test_bot_alias_tags):
        """Sets the test_bot_alias_tags of this CreateBotRequest.

        A list of tags to add to the test alias for a bot. You can only add tags when you create a bot. You can't use the <code>UpdateAlias</code> operation to update tags. To update tags on the test alias, use the <code>TagResource</code> operation.

        :param test_bot_alias_tags: The test_bot_alias_tags of this CreateBotRequest.
        :type test_bot_alias_tags: Dict[str, str]
        """
        if test_bot_alias_tags is not None and len(test_bot_alias_tags) > 200:
            raise ValueError("Invalid value for `test_bot_alias_tags`, number of items must be less than or equal to `200`")
        if test_bot_alias_tags is not None and len(test_bot_alias_tags) < 0:
            raise ValueError("Invalid value for `test_bot_alias_tags`, number of items must be greater than or equal to `0`")

        self._test_bot_alias_tags = test_bot_alias_tags

    @property
    def bot_type(self):
        """Gets the bot_type of this CreateBotRequest.

        The type of a bot to create.

        :return: The bot_type of this CreateBotRequest.
        :rtype: str
        """
        return self._bot_type

    @bot_type.setter
    def bot_type(self, bot_type):
        """Sets the bot_type of this CreateBotRequest.

        The type of a bot to create.

        :param bot_type: The bot_type of this CreateBotRequest.
        :type bot_type: str
        """
        allowed_values = ["Bot", "BotNetwork"]  # noqa: E501
        if bot_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bot_type` ({0}), must be one of {1}"
                .format(bot_type, allowed_values)
            )

        self._bot_type = bot_type

    @property
    def bot_members(self):
        """Gets the bot_members of this CreateBotRequest.

        The list of bot members in a network to be created.

        :return: The bot_members of this CreateBotRequest.
        :rtype: List[BotMember]
        """
        return self._bot_members

    @bot_members.setter
    def bot_members(self, bot_members):
        """Sets the bot_members of this CreateBotRequest.

        The list of bot members in a network to be created.

        :param bot_members: The bot_members of this CreateBotRequest.
        :type bot_members: List[BotMember]
        """
        if bot_members is not None and len(bot_members) > 10:
            raise ValueError("Invalid value for `bot_members`, number of items must be less than or equal to `10`")
        if bot_members is not None and len(bot_members) < 0:
            raise ValueError("Invalid value for `bot_members`, number of items must be greater than or equal to `0`")

        self._bot_members = bot_members
