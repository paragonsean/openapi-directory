# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bot_locale_filter import BotLocaleFilter
from openapi_server.models.list_bot_locales_request_sort_by import ListBotLocalesRequestSortBy
from openapi_server import util


class ListBotLocalesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sort_by: ListBotLocalesRequestSortBy=None, filters: List[BotLocaleFilter]=None, max_results: int=None, next_token: str=None):
        """ListBotLocalesRequest - a model defined in OpenAPI

        :param sort_by: The sort_by of this ListBotLocalesRequest.
        :param filters: The filters of this ListBotLocalesRequest.
        :param max_results: The max_results of this ListBotLocalesRequest.
        :param next_token: The next_token of this ListBotLocalesRequest.
        """
        self.openapi_types = {
            'sort_by': ListBotLocalesRequestSortBy,
            'filters': List[BotLocaleFilter],
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'sort_by': 'sortBy',
            'filters': 'filters',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._sort_by = sort_by
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListBotLocalesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListBotLocales_request of this ListBotLocalesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sort_by(self):
        """Gets the sort_by of this ListBotLocalesRequest.


        :return: The sort_by of this ListBotLocalesRequest.
        :rtype: ListBotLocalesRequestSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this ListBotLocalesRequest.


        :param sort_by: The sort_by of this ListBotLocalesRequest.
        :type sort_by: ListBotLocalesRequestSortBy
        """

        self._sort_by = sort_by

    @property
    def filters(self):
        """Gets the filters of this ListBotLocalesRequest.

        Provides the specification for a filter used to limit the response to only those locales that match the filter specification. You can only specify one filter and one value to filter on.

        :return: The filters of this ListBotLocalesRequest.
        :rtype: List[BotLocaleFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListBotLocalesRequest.

        Provides the specification for a filter used to limit the response to only those locales that match the filter specification. You can only specify one filter and one value to filter on.

        :param filters: The filters of this ListBotLocalesRequest.
        :type filters: List[BotLocaleFilter]
        """
        if filters is not None and len(filters) > 1:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `1`")
        if filters is not None and len(filters) < 1:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `1`")

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this ListBotLocalesRequest.

        The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.

        :return: The max_results of this ListBotLocalesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListBotLocalesRequest.

        The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.

        :param max_results: The max_results of this ListBotLocalesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListBotLocalesRequest.

        If the response from the <code>ListBotLocales</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token as the <code>nextToken</code> parameter to return the next page of results. 

        :return: The next_token of this ListBotLocalesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListBotLocalesRequest.

        If the response from the <code>ListBotLocales</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token as the <code>nextToken</code> parameter to return the next page of results. 

        :param next_token: The next_token of this ListBotLocalesRequest.
        :type next_token: str
        """

        self._next_token = next_token
