# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conditional_branch_condition import ConditionalBranchCondition
from openapi_server.models.create_intent_request_initial_response_setting_next_step import CreateIntentRequestInitialResponseSettingNextStep
from openapi_server.models.response_specification import ResponseSpecification
from openapi_server import util


class ConditionalBranch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, condition: ConditionalBranchCondition=None, next_step: CreateIntentRequestInitialResponseSettingNextStep=None, response: ResponseSpecification=None):
        """ConditionalBranch - a model defined in OpenAPI

        :param name: The name of this ConditionalBranch.
        :param condition: The condition of this ConditionalBranch.
        :param next_step: The next_step of this ConditionalBranch.
        :param response: The response of this ConditionalBranch.
        """
        self.openapi_types = {
            'name': str,
            'condition': ConditionalBranchCondition,
            'next_step': CreateIntentRequestInitialResponseSettingNextStep,
            'response': ResponseSpecification
        }

        self.attribute_map = {
            'name': 'name',
            'condition': 'condition',
            'next_step': 'nextStep',
            'response': 'response'
        }

        self._name = name
        self._condition = condition
        self._next_step = next_step
        self._response = response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionalBranch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConditionalBranch of this ConditionalBranch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ConditionalBranch.


        :return: The name of this ConditionalBranch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConditionalBranch.


        :param name: The name of this ConditionalBranch.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def condition(self):
        """Gets the condition of this ConditionalBranch.


        :return: The condition of this ConditionalBranch.
        :rtype: ConditionalBranchCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ConditionalBranch.


        :param condition: The condition of this ConditionalBranch.
        :type condition: ConditionalBranchCondition
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")

        self._condition = condition

    @property
    def next_step(self):
        """Gets the next_step of this ConditionalBranch.


        :return: The next_step of this ConditionalBranch.
        :rtype: CreateIntentRequestInitialResponseSettingNextStep
        """
        return self._next_step

    @next_step.setter
    def next_step(self, next_step):
        """Sets the next_step of this ConditionalBranch.


        :param next_step: The next_step of this ConditionalBranch.
        :type next_step: CreateIntentRequestInitialResponseSettingNextStep
        """
        if next_step is None:
            raise ValueError("Invalid value for `next_step`, must not be `None`")

        self._next_step = next_step

    @property
    def response(self):
        """Gets the response of this ConditionalBranch.


        :return: The response of this ConditionalBranch.
        :rtype: ResponseSpecification
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this ConditionalBranch.


        :param response: The response of this ConditionalBranch.
        :type response: ResponseSpecification
        """

        self._response = response
