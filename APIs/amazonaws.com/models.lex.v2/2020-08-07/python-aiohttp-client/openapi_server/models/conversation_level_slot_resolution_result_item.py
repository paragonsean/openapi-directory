# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.test_result_match_status import TestResultMatchStatus
from openapi_server import util


class ConversationLevelSlotResolutionResultItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, intent_name: str=None, slot_name: str=None, match_result: TestResultMatchStatus=None):
        """ConversationLevelSlotResolutionResultItem - a model defined in OpenAPI

        :param intent_name: The intent_name of this ConversationLevelSlotResolutionResultItem.
        :param slot_name: The slot_name of this ConversationLevelSlotResolutionResultItem.
        :param match_result: The match_result of this ConversationLevelSlotResolutionResultItem.
        """
        self.openapi_types = {
            'intent_name': str,
            'slot_name': str,
            'match_result': TestResultMatchStatus
        }

        self.attribute_map = {
            'intent_name': 'intentName',
            'slot_name': 'slotName',
            'match_result': 'matchResult'
        }

        self._intent_name = intent_name
        self._slot_name = slot_name
        self._match_result = match_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationLevelSlotResolutionResultItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConversationLevelSlotResolutionResultItem of this ConversationLevelSlotResolutionResultItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def intent_name(self):
        """Gets the intent_name of this ConversationLevelSlotResolutionResultItem.


        :return: The intent_name of this ConversationLevelSlotResolutionResultItem.
        :rtype: str
        """
        return self._intent_name

    @intent_name.setter
    def intent_name(self, intent_name):
        """Sets the intent_name of this ConversationLevelSlotResolutionResultItem.


        :param intent_name: The intent_name of this ConversationLevelSlotResolutionResultItem.
        :type intent_name: str
        """
        if intent_name is None:
            raise ValueError("Invalid value for `intent_name`, must not be `None`")

        self._intent_name = intent_name

    @property
    def slot_name(self):
        """Gets the slot_name of this ConversationLevelSlotResolutionResultItem.


        :return: The slot_name of this ConversationLevelSlotResolutionResultItem.
        :rtype: str
        """
        return self._slot_name

    @slot_name.setter
    def slot_name(self, slot_name):
        """Sets the slot_name of this ConversationLevelSlotResolutionResultItem.


        :param slot_name: The slot_name of this ConversationLevelSlotResolutionResultItem.
        :type slot_name: str
        """
        if slot_name is None:
            raise ValueError("Invalid value for `slot_name`, must not be `None`")

        self._slot_name = slot_name

    @property
    def match_result(self):
        """Gets the match_result of this ConversationLevelSlotResolutionResultItem.


        :return: The match_result of this ConversationLevelSlotResolutionResultItem.
        :rtype: TestResultMatchStatus
        """
        return self._match_result

    @match_result.setter
    def match_result(self, match_result):
        """Sets the match_result of this ConversationLevelSlotResolutionResultItem.


        :param match_result: The match_result of this ConversationLevelSlotResolutionResultItem.
        :type match_result: TestResultMatchStatus
        """
        if match_result is None:
            raise ValueError("Invalid value for `match_result`, must not be `None`")

        self._match_result = match_result
