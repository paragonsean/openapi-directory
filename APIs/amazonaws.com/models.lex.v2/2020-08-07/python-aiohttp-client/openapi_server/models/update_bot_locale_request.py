# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_bot_locale_request_voice_settings import UpdateBotLocaleRequestVoiceSettings
from openapi_server import util


class UpdateBotLocaleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, nlu_intent_confidence_threshold: float=None, voice_settings: UpdateBotLocaleRequestVoiceSettings=None):
        """UpdateBotLocaleRequest - a model defined in OpenAPI

        :param description: The description of this UpdateBotLocaleRequest.
        :param nlu_intent_confidence_threshold: The nlu_intent_confidence_threshold of this UpdateBotLocaleRequest.
        :param voice_settings: The voice_settings of this UpdateBotLocaleRequest.
        """
        self.openapi_types = {
            'description': str,
            'nlu_intent_confidence_threshold': float,
            'voice_settings': UpdateBotLocaleRequestVoiceSettings
        }

        self.attribute_map = {
            'description': 'description',
            'nlu_intent_confidence_threshold': 'nluIntentConfidenceThreshold',
            'voice_settings': 'voiceSettings'
        }

        self._description = description
        self._nlu_intent_confidence_threshold = nlu_intent_confidence_threshold
        self._voice_settings = voice_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBotLocaleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBotLocale_request of this UpdateBotLocaleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UpdateBotLocaleRequest.

        The new description of the locale.

        :return: The description of this UpdateBotLocaleRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateBotLocaleRequest.

        The new description of the locale.

        :param description: The description of this UpdateBotLocaleRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def nlu_intent_confidence_threshold(self):
        """Gets the nlu_intent_confidence_threshold of this UpdateBotLocaleRequest.

        The new confidence threshold where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> intents in the list of possible intents for an utterance.

        :return: The nlu_intent_confidence_threshold of this UpdateBotLocaleRequest.
        :rtype: float
        """
        return self._nlu_intent_confidence_threshold

    @nlu_intent_confidence_threshold.setter
    def nlu_intent_confidence_threshold(self, nlu_intent_confidence_threshold):
        """Sets the nlu_intent_confidence_threshold of this UpdateBotLocaleRequest.

        The new confidence threshold where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> intents in the list of possible intents for an utterance.

        :param nlu_intent_confidence_threshold: The nlu_intent_confidence_threshold of this UpdateBotLocaleRequest.
        :type nlu_intent_confidence_threshold: float
        """
        if nlu_intent_confidence_threshold is None:
            raise ValueError("Invalid value for `nlu_intent_confidence_threshold`, must not be `None`")
        if nlu_intent_confidence_threshold is not None and nlu_intent_confidence_threshold > 1:
            raise ValueError("Invalid value for `nlu_intent_confidence_threshold`, must be a value less than or equal to `1`")
        if nlu_intent_confidence_threshold is not None and nlu_intent_confidence_threshold < 0:
            raise ValueError("Invalid value for `nlu_intent_confidence_threshold`, must be a value greater than or equal to `0`")

        self._nlu_intent_confidence_threshold = nlu_intent_confidence_threshold

    @property
    def voice_settings(self):
        """Gets the voice_settings of this UpdateBotLocaleRequest.


        :return: The voice_settings of this UpdateBotLocaleRequest.
        :rtype: UpdateBotLocaleRequestVoiceSettings
        """
        return self._voice_settings

    @voice_settings.setter
    def voice_settings(self, voice_settings):
        """Sets the voice_settings of this UpdateBotLocaleRequest.


        :param voice_settings: The voice_settings of this UpdateBotLocaleRequest.
        :type voice_settings: UpdateBotLocaleRequestVoiceSettings
        """

        self._voice_settings = voice_settings
