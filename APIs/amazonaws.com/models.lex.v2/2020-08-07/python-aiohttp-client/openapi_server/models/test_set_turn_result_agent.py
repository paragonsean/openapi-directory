# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.execution_error_details import ExecutionErrorDetails
from openapi_server import util


class TestSetTurnResultAgent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_agent_prompt: str=None, actual_agent_prompt: str=None, error_details: ExecutionErrorDetails=None, actual_elicited_slot: str=None, actual_intent: str=None):
        """TestSetTurnResultAgent - a model defined in OpenAPI

        :param expected_agent_prompt: The expected_agent_prompt of this TestSetTurnResultAgent.
        :param actual_agent_prompt: The actual_agent_prompt of this TestSetTurnResultAgent.
        :param error_details: The error_details of this TestSetTurnResultAgent.
        :param actual_elicited_slot: The actual_elicited_slot of this TestSetTurnResultAgent.
        :param actual_intent: The actual_intent of this TestSetTurnResultAgent.
        """
        self.openapi_types = {
            'expected_agent_prompt': str,
            'actual_agent_prompt': str,
            'error_details': ExecutionErrorDetails,
            'actual_elicited_slot': str,
            'actual_intent': str
        }

        self.attribute_map = {
            'expected_agent_prompt': 'expectedAgentPrompt',
            'actual_agent_prompt': 'actualAgentPrompt',
            'error_details': 'errorDetails',
            'actual_elicited_slot': 'actualElicitedSlot',
            'actual_intent': 'actualIntent'
        }

        self._expected_agent_prompt = expected_agent_prompt
        self._actual_agent_prompt = actual_agent_prompt
        self._error_details = error_details
        self._actual_elicited_slot = actual_elicited_slot
        self._actual_intent = actual_intent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestSetTurnResultAgent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestSetTurnResult_agent of this TestSetTurnResultAgent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_agent_prompt(self):
        """Gets the expected_agent_prompt of this TestSetTurnResultAgent.


        :return: The expected_agent_prompt of this TestSetTurnResultAgent.
        :rtype: str
        """
        return self._expected_agent_prompt

    @expected_agent_prompt.setter
    def expected_agent_prompt(self, expected_agent_prompt):
        """Sets the expected_agent_prompt of this TestSetTurnResultAgent.


        :param expected_agent_prompt: The expected_agent_prompt of this TestSetTurnResultAgent.
        :type expected_agent_prompt: str
        """
        if expected_agent_prompt is None:
            raise ValueError("Invalid value for `expected_agent_prompt`, must not be `None`")

        self._expected_agent_prompt = expected_agent_prompt

    @property
    def actual_agent_prompt(self):
        """Gets the actual_agent_prompt of this TestSetTurnResultAgent.


        :return: The actual_agent_prompt of this TestSetTurnResultAgent.
        :rtype: str
        """
        return self._actual_agent_prompt

    @actual_agent_prompt.setter
    def actual_agent_prompt(self, actual_agent_prompt):
        """Sets the actual_agent_prompt of this TestSetTurnResultAgent.


        :param actual_agent_prompt: The actual_agent_prompt of this TestSetTurnResultAgent.
        :type actual_agent_prompt: str
        """

        self._actual_agent_prompt = actual_agent_prompt

    @property
    def error_details(self):
        """Gets the error_details of this TestSetTurnResultAgent.


        :return: The error_details of this TestSetTurnResultAgent.
        :rtype: ExecutionErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this TestSetTurnResultAgent.


        :param error_details: The error_details of this TestSetTurnResultAgent.
        :type error_details: ExecutionErrorDetails
        """

        self._error_details = error_details

    @property
    def actual_elicited_slot(self):
        """Gets the actual_elicited_slot of this TestSetTurnResultAgent.


        :return: The actual_elicited_slot of this TestSetTurnResultAgent.
        :rtype: str
        """
        return self._actual_elicited_slot

    @actual_elicited_slot.setter
    def actual_elicited_slot(self, actual_elicited_slot):
        """Sets the actual_elicited_slot of this TestSetTurnResultAgent.


        :param actual_elicited_slot: The actual_elicited_slot of this TestSetTurnResultAgent.
        :type actual_elicited_slot: str
        """

        self._actual_elicited_slot = actual_elicited_slot

    @property
    def actual_intent(self):
        """Gets the actual_intent of this TestSetTurnResultAgent.


        :return: The actual_intent of this TestSetTurnResultAgent.
        :rtype: str
        """
        return self._actual_intent

    @actual_intent.setter
    def actual_intent(self, actual_intent):
        """Sets the actual_intent of this TestSetTurnResultAgent.


        :param actual_intent: The actual_intent of this TestSetTurnResultAgent.
        :type actual_intent: str
        """

        self._actual_intent = actual_intent
