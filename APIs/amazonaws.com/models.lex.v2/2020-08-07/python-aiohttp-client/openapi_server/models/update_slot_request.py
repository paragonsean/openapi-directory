# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_slot_request_multiple_values_setting import CreateSlotRequestMultipleValuesSetting
from openapi_server.models.create_slot_request_obfuscation_setting import CreateSlotRequestObfuscationSetting
from openapi_server.models.create_slot_request_sub_slot_setting import CreateSlotRequestSubSlotSetting
from openapi_server.models.create_slot_request_value_elicitation_setting import CreateSlotRequestValueElicitationSetting
import re
from openapi_server import util


class UpdateSlotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, slot_name: str=None, description: str=None, slot_type_id: str=None, value_elicitation_setting: CreateSlotRequestValueElicitationSetting=None, obfuscation_setting: CreateSlotRequestObfuscationSetting=None, multiple_values_setting: CreateSlotRequestMultipleValuesSetting=None, sub_slot_setting: CreateSlotRequestSubSlotSetting=None):
        """UpdateSlotRequest - a model defined in OpenAPI

        :param slot_name: The slot_name of this UpdateSlotRequest.
        :param description: The description of this UpdateSlotRequest.
        :param slot_type_id: The slot_type_id of this UpdateSlotRequest.
        :param value_elicitation_setting: The value_elicitation_setting of this UpdateSlotRequest.
        :param obfuscation_setting: The obfuscation_setting of this UpdateSlotRequest.
        :param multiple_values_setting: The multiple_values_setting of this UpdateSlotRequest.
        :param sub_slot_setting: The sub_slot_setting of this UpdateSlotRequest.
        """
        self.openapi_types = {
            'slot_name': str,
            'description': str,
            'slot_type_id': str,
            'value_elicitation_setting': CreateSlotRequestValueElicitationSetting,
            'obfuscation_setting': CreateSlotRequestObfuscationSetting,
            'multiple_values_setting': CreateSlotRequestMultipleValuesSetting,
            'sub_slot_setting': CreateSlotRequestSubSlotSetting
        }

        self.attribute_map = {
            'slot_name': 'slotName',
            'description': 'description',
            'slot_type_id': 'slotTypeId',
            'value_elicitation_setting': 'valueElicitationSetting',
            'obfuscation_setting': 'obfuscationSetting',
            'multiple_values_setting': 'multipleValuesSetting',
            'sub_slot_setting': 'subSlotSetting'
        }

        self._slot_name = slot_name
        self._description = description
        self._slot_type_id = slot_type_id
        self._value_elicitation_setting = value_elicitation_setting
        self._obfuscation_setting = obfuscation_setting
        self._multiple_values_setting = multiple_values_setting
        self._sub_slot_setting = sub_slot_setting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSlotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSlot_request of this UpdateSlotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def slot_name(self):
        """Gets the slot_name of this UpdateSlotRequest.

        The new name for the slot.

        :return: The slot_name of this UpdateSlotRequest.
        :rtype: str
        """
        return self._slot_name

    @slot_name.setter
    def slot_name(self, slot_name):
        """Sets the slot_name of this UpdateSlotRequest.

        The new name for the slot.

        :param slot_name: The slot_name of this UpdateSlotRequest.
        :type slot_name: str
        """
        if slot_name is None:
            raise ValueError("Invalid value for `slot_name`, must not be `None`")
        if slot_name is not None and len(slot_name) > 100:
            raise ValueError("Invalid value for `slot_name`, length must be less than or equal to `100`")
        if slot_name is not None and len(slot_name) < 1:
            raise ValueError("Invalid value for `slot_name`, length must be greater than or equal to `1`")
        if slot_name is not None and not re.search(r'^([0-9a-zA-Z][_-]?){1,100}$', slot_name):
            raise ValueError("Invalid value for `slot_name`, must be a follow pattern or equal to `/^([0-9a-zA-Z][_-]?){1,100}$/`")

        self._slot_name = slot_name

    @property
    def description(self):
        """Gets the description of this UpdateSlotRequest.

        The new description for the slot.

        :return: The description of this UpdateSlotRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSlotRequest.

        The new description for the slot.

        :param description: The description of this UpdateSlotRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def slot_type_id(self):
        """Gets the slot_type_id of this UpdateSlotRequest.

        The unique identifier of the new slot type to associate with this slot. 

        :return: The slot_type_id of this UpdateSlotRequest.
        :rtype: str
        """
        return self._slot_type_id

    @slot_type_id.setter
    def slot_type_id(self, slot_type_id):
        """Sets the slot_type_id of this UpdateSlotRequest.

        The unique identifier of the new slot type to associate with this slot. 

        :param slot_type_id: The slot_type_id of this UpdateSlotRequest.
        :type slot_type_id: str
        """
        if slot_type_id is not None and len(slot_type_id) > 25:
            raise ValueError("Invalid value for `slot_type_id`, length must be less than or equal to `25`")
        if slot_type_id is not None and len(slot_type_id) < 1:
            raise ValueError("Invalid value for `slot_type_id`, length must be greater than or equal to `1`")
        if slot_type_id is not None and not re.search(r'^((AMAZON\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$', slot_type_id):
            raise ValueError("Invalid value for `slot_type_id`, must be a follow pattern or equal to `/^((AMAZON\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$/`")

        self._slot_type_id = slot_type_id

    @property
    def value_elicitation_setting(self):
        """Gets the value_elicitation_setting of this UpdateSlotRequest.


        :return: The value_elicitation_setting of this UpdateSlotRequest.
        :rtype: CreateSlotRequestValueElicitationSetting
        """
        return self._value_elicitation_setting

    @value_elicitation_setting.setter
    def value_elicitation_setting(self, value_elicitation_setting):
        """Sets the value_elicitation_setting of this UpdateSlotRequest.


        :param value_elicitation_setting: The value_elicitation_setting of this UpdateSlotRequest.
        :type value_elicitation_setting: CreateSlotRequestValueElicitationSetting
        """
        if value_elicitation_setting is None:
            raise ValueError("Invalid value for `value_elicitation_setting`, must not be `None`")

        self._value_elicitation_setting = value_elicitation_setting

    @property
    def obfuscation_setting(self):
        """Gets the obfuscation_setting of this UpdateSlotRequest.


        :return: The obfuscation_setting of this UpdateSlotRequest.
        :rtype: CreateSlotRequestObfuscationSetting
        """
        return self._obfuscation_setting

    @obfuscation_setting.setter
    def obfuscation_setting(self, obfuscation_setting):
        """Sets the obfuscation_setting of this UpdateSlotRequest.


        :param obfuscation_setting: The obfuscation_setting of this UpdateSlotRequest.
        :type obfuscation_setting: CreateSlotRequestObfuscationSetting
        """

        self._obfuscation_setting = obfuscation_setting

    @property
    def multiple_values_setting(self):
        """Gets the multiple_values_setting of this UpdateSlotRequest.


        :return: The multiple_values_setting of this UpdateSlotRequest.
        :rtype: CreateSlotRequestMultipleValuesSetting
        """
        return self._multiple_values_setting

    @multiple_values_setting.setter
    def multiple_values_setting(self, multiple_values_setting):
        """Sets the multiple_values_setting of this UpdateSlotRequest.


        :param multiple_values_setting: The multiple_values_setting of this UpdateSlotRequest.
        :type multiple_values_setting: CreateSlotRequestMultipleValuesSetting
        """

        self._multiple_values_setting = multiple_values_setting

    @property
    def sub_slot_setting(self):
        """Gets the sub_slot_setting of this UpdateSlotRequest.


        :return: The sub_slot_setting of this UpdateSlotRequest.
        :rtype: CreateSlotRequestSubSlotSetting
        """
        return self._sub_slot_setting

    @sub_slot_setting.setter
    def sub_slot_setting(self, sub_slot_setting):
        """Sets the sub_slot_setting of this UpdateSlotRequest.


        :param sub_slot_setting: The sub_slot_setting of this UpdateSlotRequest.
        :type sub_slot_setting: CreateSlotRequestSubSlotSetting
        """

        self._sub_slot_setting = sub_slot_setting
