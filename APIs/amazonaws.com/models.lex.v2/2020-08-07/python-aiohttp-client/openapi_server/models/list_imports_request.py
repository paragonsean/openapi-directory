# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_filter import ImportFilter
from openapi_server.models.list_imports_request_sort_by import ListImportsRequestSortBy
import re
from openapi_server import util


class ListImportsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_id: str=None, bot_version: str=None, sort_by: ListImportsRequestSortBy=None, filters: List[ImportFilter]=None, max_results: int=None, next_token: str=None, locale_id: str=None):
        """ListImportsRequest - a model defined in OpenAPI

        :param bot_id: The bot_id of this ListImportsRequest.
        :param bot_version: The bot_version of this ListImportsRequest.
        :param sort_by: The sort_by of this ListImportsRequest.
        :param filters: The filters of this ListImportsRequest.
        :param max_results: The max_results of this ListImportsRequest.
        :param next_token: The next_token of this ListImportsRequest.
        :param locale_id: The locale_id of this ListImportsRequest.
        """
        self.openapi_types = {
            'bot_id': str,
            'bot_version': str,
            'sort_by': ListImportsRequestSortBy,
            'filters': List[ImportFilter],
            'max_results': int,
            'next_token': str,
            'locale_id': str
        }

        self.attribute_map = {
            'bot_id': 'botId',
            'bot_version': 'botVersion',
            'sort_by': 'sortBy',
            'filters': 'filters',
            'max_results': 'maxResults',
            'next_token': 'nextToken',
            'locale_id': 'localeId'
        }

        self._bot_id = bot_id
        self._bot_version = bot_version
        self._sort_by = sort_by
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token
        self._locale_id = locale_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListImportsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListImports_request of this ListImportsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_id(self):
        """Gets the bot_id of this ListImportsRequest.

        The unique identifier that Amazon Lex assigned to the bot.

        :return: The bot_id of this ListImportsRequest.
        :rtype: str
        """
        return self._bot_id

    @bot_id.setter
    def bot_id(self, bot_id):
        """Sets the bot_id of this ListImportsRequest.

        The unique identifier that Amazon Lex assigned to the bot.

        :param bot_id: The bot_id of this ListImportsRequest.
        :type bot_id: str
        """
        if bot_id is not None and len(bot_id) > 10:
            raise ValueError("Invalid value for `bot_id`, length must be less than or equal to `10`")
        if bot_id is not None and len(bot_id) < 10:
            raise ValueError("Invalid value for `bot_id`, length must be greater than or equal to `10`")
        if bot_id is not None and not re.search(r'^[0-9a-zA-Z]+$', bot_id):
            raise ValueError("Invalid value for `bot_id`, must be a follow pattern or equal to `/^[0-9a-zA-Z]+$/`")

        self._bot_id = bot_id

    @property
    def bot_version(self):
        """Gets the bot_version of this ListImportsRequest.

        The version of the bot to list imports for.

        :return: The bot_version of this ListImportsRequest.
        :rtype: str
        """
        return self._bot_version

    @bot_version.setter
    def bot_version(self, bot_version):
        """Sets the bot_version of this ListImportsRequest.

        The version of the bot to list imports for.

        :param bot_version: The bot_version of this ListImportsRequest.
        :type bot_version: str
        """
        if bot_version is not None and len(bot_version) > 5:
            raise ValueError("Invalid value for `bot_version`, length must be less than or equal to `5`")
        if bot_version is not None and len(bot_version) < 5:
            raise ValueError("Invalid value for `bot_version`, length must be greater than or equal to `5`")
        if bot_version is not None and not re.search(r'^DRAFT$', bot_version):
            raise ValueError("Invalid value for `bot_version`, must be a follow pattern or equal to `/^DRAFT$/`")

        self._bot_version = bot_version

    @property
    def sort_by(self):
        """Gets the sort_by of this ListImportsRequest.


        :return: The sort_by of this ListImportsRequest.
        :rtype: ListImportsRequestSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this ListImportsRequest.


        :param sort_by: The sort_by of this ListImportsRequest.
        :type sort_by: ListImportsRequestSortBy
        """

        self._sort_by = sort_by

    @property
    def filters(self):
        """Gets the filters of this ListImportsRequest.

        Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.

        :return: The filters of this ListImportsRequest.
        :rtype: List[ImportFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListImportsRequest.

        Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.

        :param filters: The filters of this ListImportsRequest.
        :type filters: List[ImportFilter]
        """
        if filters is not None and len(filters) > 1:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `1`")
        if filters is not None and len(filters) < 1:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `1`")

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this ListImportsRequest.

        The maximum number of imports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.

        :return: The max_results of this ListImportsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListImportsRequest.

        The maximum number of imports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.

        :param max_results: The max_results of this ListImportsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListImportsRequest.

        <p>If the response from the <code>ListImports</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response.</p> <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListImports</code> request to return the next page of results. For a complete set of results, call the <code>ListImports</code> operation until the <code>nextToken</code> returned in the response is null.</p>

        :return: The next_token of this ListImportsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListImportsRequest.

        <p>If the response from the <code>ListImports</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response.</p> <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListImports</code> request to return the next page of results. For a complete set of results, call the <code>ListImports</code> operation until the <code>nextToken</code> returned in the response is null.</p>

        :param next_token: The next_token of this ListImportsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def locale_id(self):
        """Gets the locale_id of this ListImportsRequest.

        Specifies the locale that should be present in the list. If you don't specify a resource type in the <code>filters</code> parameter, the list contains both bot locales and custom vocabularies.

        :return: The locale_id of this ListImportsRequest.
        :rtype: str
        """
        return self._locale_id

    @locale_id.setter
    def locale_id(self, locale_id):
        """Sets the locale_id of this ListImportsRequest.

        Specifies the locale that should be present in the list. If you don't specify a resource type in the <code>filters</code> parameter, the list contains both bot locales and custom vocabularies.

        :param locale_id: The locale_id of this ListImportsRequest.
        :type locale_id: str
        """

        self._locale_id = locale_id
