# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.text_log_destination_cloud_watch import TextLogDestinationCloudWatch
from openapi_server import util


class TextLogDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_watch: TextLogDestinationCloudWatch=None):
        """TextLogDestination - a model defined in OpenAPI

        :param cloud_watch: The cloud_watch of this TextLogDestination.
        """
        self.openapi_types = {
            'cloud_watch': TextLogDestinationCloudWatch
        }

        self.attribute_map = {
            'cloud_watch': 'cloudWatch'
        }

        self._cloud_watch = cloud_watch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextLogDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextLogDestination of this TextLogDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_watch(self):
        """Gets the cloud_watch of this TextLogDestination.


        :return: The cloud_watch of this TextLogDestination.
        :rtype: TextLogDestinationCloudWatch
        """
        return self._cloud_watch

    @cloud_watch.setter
    def cloud_watch(self, cloud_watch):
        """Sets the cloud_watch of this TextLogDestination.


        :param cloud_watch: The cloud_watch of this TextLogDestination.
        :type cloud_watch: TextLogDestinationCloudWatch
        """
        if cloud_watch is None:
            raise ValueError("Invalid value for `cloud_watch`, must not be `None`")

        self._cloud_watch = cloud_watch
