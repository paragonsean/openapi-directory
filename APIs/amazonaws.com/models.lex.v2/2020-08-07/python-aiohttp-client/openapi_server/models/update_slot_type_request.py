# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_slot_type_request_composite_slot_type_setting import CreateSlotTypeRequestCompositeSlotTypeSetting
from openapi_server.models.create_slot_type_request_external_source_setting import CreateSlotTypeRequestExternalSourceSetting
from openapi_server.models.create_slot_type_request_value_selection_setting import CreateSlotTypeRequestValueSelectionSetting
from openapi_server.models.slot_type_value import SlotTypeValue
import re
from openapi_server import util


class UpdateSlotTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, slot_type_name: str=None, description: str=None, slot_type_values: List[SlotTypeValue]=None, value_selection_setting: CreateSlotTypeRequestValueSelectionSetting=None, parent_slot_type_signature: str=None, external_source_setting: CreateSlotTypeRequestExternalSourceSetting=None, composite_slot_type_setting: CreateSlotTypeRequestCompositeSlotTypeSetting=None):
        """UpdateSlotTypeRequest - a model defined in OpenAPI

        :param slot_type_name: The slot_type_name of this UpdateSlotTypeRequest.
        :param description: The description of this UpdateSlotTypeRequest.
        :param slot_type_values: The slot_type_values of this UpdateSlotTypeRequest.
        :param value_selection_setting: The value_selection_setting of this UpdateSlotTypeRequest.
        :param parent_slot_type_signature: The parent_slot_type_signature of this UpdateSlotTypeRequest.
        :param external_source_setting: The external_source_setting of this UpdateSlotTypeRequest.
        :param composite_slot_type_setting: The composite_slot_type_setting of this UpdateSlotTypeRequest.
        """
        self.openapi_types = {
            'slot_type_name': str,
            'description': str,
            'slot_type_values': List[SlotTypeValue],
            'value_selection_setting': CreateSlotTypeRequestValueSelectionSetting,
            'parent_slot_type_signature': str,
            'external_source_setting': CreateSlotTypeRequestExternalSourceSetting,
            'composite_slot_type_setting': CreateSlotTypeRequestCompositeSlotTypeSetting
        }

        self.attribute_map = {
            'slot_type_name': 'slotTypeName',
            'description': 'description',
            'slot_type_values': 'slotTypeValues',
            'value_selection_setting': 'valueSelectionSetting',
            'parent_slot_type_signature': 'parentSlotTypeSignature',
            'external_source_setting': 'externalSourceSetting',
            'composite_slot_type_setting': 'compositeSlotTypeSetting'
        }

        self._slot_type_name = slot_type_name
        self._description = description
        self._slot_type_values = slot_type_values
        self._value_selection_setting = value_selection_setting
        self._parent_slot_type_signature = parent_slot_type_signature
        self._external_source_setting = external_source_setting
        self._composite_slot_type_setting = composite_slot_type_setting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSlotTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSlotType_request of this UpdateSlotTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def slot_type_name(self):
        """Gets the slot_type_name of this UpdateSlotTypeRequest.

        The new name of the slot type.

        :return: The slot_type_name of this UpdateSlotTypeRequest.
        :rtype: str
        """
        return self._slot_type_name

    @slot_type_name.setter
    def slot_type_name(self, slot_type_name):
        """Sets the slot_type_name of this UpdateSlotTypeRequest.

        The new name of the slot type.

        :param slot_type_name: The slot_type_name of this UpdateSlotTypeRequest.
        :type slot_type_name: str
        """
        if slot_type_name is None:
            raise ValueError("Invalid value for `slot_type_name`, must not be `None`")
        if slot_type_name is not None and len(slot_type_name) > 100:
            raise ValueError("Invalid value for `slot_type_name`, length must be less than or equal to `100`")
        if slot_type_name is not None and len(slot_type_name) < 1:
            raise ValueError("Invalid value for `slot_type_name`, length must be greater than or equal to `1`")
        if slot_type_name is not None and not re.search(r'^([0-9a-zA-Z][_-]?){1,100}$', slot_type_name):
            raise ValueError("Invalid value for `slot_type_name`, must be a follow pattern or equal to `/^([0-9a-zA-Z][_-]?){1,100}$/`")

        self._slot_type_name = slot_type_name

    @property
    def description(self):
        """Gets the description of this UpdateSlotTypeRequest.

        The new description of the slot type.

        :return: The description of this UpdateSlotTypeRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSlotTypeRequest.

        The new description of the slot type.

        :param description: The description of this UpdateSlotTypeRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def slot_type_values(self):
        """Gets the slot_type_values of this UpdateSlotTypeRequest.

        A new list of values and their optional synonyms that define the values that the slot type can take.

        :return: The slot_type_values of this UpdateSlotTypeRequest.
        :rtype: List[SlotTypeValue]
        """
        return self._slot_type_values

    @slot_type_values.setter
    def slot_type_values(self, slot_type_values):
        """Sets the slot_type_values of this UpdateSlotTypeRequest.

        A new list of values and their optional synonyms that define the values that the slot type can take.

        :param slot_type_values: The slot_type_values of this UpdateSlotTypeRequest.
        :type slot_type_values: List[SlotTypeValue]
        """
        if slot_type_values is not None and len(slot_type_values) > 10000:
            raise ValueError("Invalid value for `slot_type_values`, number of items must be less than or equal to `10000`")
        if slot_type_values is not None and len(slot_type_values) < 1:
            raise ValueError("Invalid value for `slot_type_values`, number of items must be greater than or equal to `1`")

        self._slot_type_values = slot_type_values

    @property
    def value_selection_setting(self):
        """Gets the value_selection_setting of this UpdateSlotTypeRequest.


        :return: The value_selection_setting of this UpdateSlotTypeRequest.
        :rtype: CreateSlotTypeRequestValueSelectionSetting
        """
        return self._value_selection_setting

    @value_selection_setting.setter
    def value_selection_setting(self, value_selection_setting):
        """Sets the value_selection_setting of this UpdateSlotTypeRequest.


        :param value_selection_setting: The value_selection_setting of this UpdateSlotTypeRequest.
        :type value_selection_setting: CreateSlotTypeRequestValueSelectionSetting
        """

        self._value_selection_setting = value_selection_setting

    @property
    def parent_slot_type_signature(self):
        """Gets the parent_slot_type_signature of this UpdateSlotTypeRequest.

        The new built-in slot type that should be used as the parent of this slot type.

        :return: The parent_slot_type_signature of this UpdateSlotTypeRequest.
        :rtype: str
        """
        return self._parent_slot_type_signature

    @parent_slot_type_signature.setter
    def parent_slot_type_signature(self, parent_slot_type_signature):
        """Sets the parent_slot_type_signature of this UpdateSlotTypeRequest.

        The new built-in slot type that should be used as the parent of this slot type.

        :param parent_slot_type_signature: The parent_slot_type_signature of this UpdateSlotTypeRequest.
        :type parent_slot_type_signature: str
        """

        self._parent_slot_type_signature = parent_slot_type_signature

    @property
    def external_source_setting(self):
        """Gets the external_source_setting of this UpdateSlotTypeRequest.


        :return: The external_source_setting of this UpdateSlotTypeRequest.
        :rtype: CreateSlotTypeRequestExternalSourceSetting
        """
        return self._external_source_setting

    @external_source_setting.setter
    def external_source_setting(self, external_source_setting):
        """Sets the external_source_setting of this UpdateSlotTypeRequest.


        :param external_source_setting: The external_source_setting of this UpdateSlotTypeRequest.
        :type external_source_setting: CreateSlotTypeRequestExternalSourceSetting
        """

        self._external_source_setting = external_source_setting

    @property
    def composite_slot_type_setting(self):
        """Gets the composite_slot_type_setting of this UpdateSlotTypeRequest.


        :return: The composite_slot_type_setting of this UpdateSlotTypeRequest.
        :rtype: CreateSlotTypeRequestCompositeSlotTypeSetting
        """
        return self._composite_slot_type_setting

    @composite_slot_type_setting.setter
    def composite_slot_type_setting(self, composite_slot_type_setting):
        """Sets the composite_slot_type_setting of this UpdateSlotTypeRequest.


        :param composite_slot_type_setting: The composite_slot_type_setting of this UpdateSlotTypeRequest.
        :type composite_slot_type_setting: CreateSlotTypeRequestCompositeSlotTypeSetting
        """

        self._composite_slot_type_setting = composite_slot_type_setting
