/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnalyticsSessionFilter.h
 *
 * &lt;p&gt;Contains fields describing a condition by which to filter the sessions. The expression may be understood as &lt;code&gt;name&lt;/code&gt; &lt;code&gt;operator&lt;/code&gt; &lt;code&gt;values&lt;/code&gt;. For example:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LocaleId EQ en&lt;/code&gt; – The locale is \&quot;en\&quot;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Duration GT 200&lt;/code&gt; – The duration is greater than 200 seconds.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The operators that each filter supports are listed below:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BotAlias&lt;/code&gt; – &lt;code&gt;EQ&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BotVersion&lt;/code&gt; – &lt;code&gt;EQ&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LocaleId&lt;/code&gt; – &lt;code&gt;EQ&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Modality&lt;/code&gt; – &lt;code&gt;EQ&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Channel&lt;/code&gt; – &lt;code&gt;EQ&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Duration&lt;/code&gt; – &lt;code&gt;EQ&lt;/code&gt;, &lt;code&gt;GT&lt;/code&gt;, &lt;code&gt;LT&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;conversationEndState&lt;/code&gt; – &lt;code&gt;EQ&lt;/code&gt;, &lt;code&gt;CO&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SessionId&lt;/code&gt; – &lt;code&gt;EQ&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OriginatingRequestId&lt;/code&gt; – &lt;code&gt;EQ&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IntentPath&lt;/code&gt; – &lt;code&gt;EQ&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAIAnalyticsSessionFilter_H
#define OAIAnalyticsSessionFilter_H

#include <QJsonObject>

#include "OAIAnalyticsFilterOperator.h"
#include "OAIAnalyticsSessionFilterName.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAnalyticsSessionFilter : public OAIObject {
public:
    OAIAnalyticsSessionFilter();
    OAIAnalyticsSessionFilter(QString json);
    ~OAIAnalyticsSessionFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAnalyticsSessionFilterName getName() const;
    void setName(const OAIAnalyticsSessionFilterName &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIAnalyticsFilterOperator getROperator() const;
    void setROperator(const OAIAnalyticsFilterOperator &r_operator);
    bool is_r_operator_Set() const;
    bool is_r_operator_Valid() const;

    QList getValues() const;
    void setValues(const QList &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAnalyticsSessionFilterName m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIAnalyticsFilterOperator m_r_operator;
    bool m_r_operator_isSet;
    bool m_r_operator_isValid;

    QList m_values;
    bool m_values_isSet;
    bool m_values_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnalyticsSessionFilter)

#endif // OAIAnalyticsSessionFilter_H
