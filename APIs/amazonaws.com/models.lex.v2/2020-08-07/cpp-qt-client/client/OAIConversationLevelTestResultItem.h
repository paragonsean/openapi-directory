/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConversationLevelTestResultItem.h
 *
 * The test result evaluation item at the conversation level.
 */

#ifndef OAIConversationLevelTestResultItem_H
#define OAIConversationLevelTestResultItem_H

#include <QJsonObject>

#include "OAITestResultMatchStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConversationLevelTestResultItem : public OAIObject {
public:
    OAIConversationLevelTestResultItem();
    OAIConversationLevelTestResultItem(QString json);
    ~OAIConversationLevelTestResultItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConversationId() const;
    void setConversationId(const QString &conversation_id);
    bool is_conversation_id_Set() const;
    bool is_conversation_id_Valid() const;

    OAITestResultMatchStatus getEndToEndResult() const;
    void setEndToEndResult(const OAITestResultMatchStatus &end_to_end_result);
    bool is_end_to_end_result_Set() const;
    bool is_end_to_end_result_Valid() const;

    OAITestResultMatchStatus getSpeechTranscriptionResult() const;
    void setSpeechTranscriptionResult(const OAITestResultMatchStatus &speech_transcription_result);
    bool is_speech_transcription_result_Set() const;
    bool is_speech_transcription_result_Valid() const;

    QList getIntentClassificationResults() const;
    void setIntentClassificationResults(const QList &intent_classification_results);
    bool is_intent_classification_results_Set() const;
    bool is_intent_classification_results_Valid() const;

    QList getSlotResolutionResults() const;
    void setSlotResolutionResults(const QList &slot_resolution_results);
    bool is_slot_resolution_results_Set() const;
    bool is_slot_resolution_results_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_conversation_id;
    bool m_conversation_id_isSet;
    bool m_conversation_id_isValid;

    OAITestResultMatchStatus m_end_to_end_result;
    bool m_end_to_end_result_isSet;
    bool m_end_to_end_result_isValid;

    OAITestResultMatchStatus m_speech_transcription_result;
    bool m_speech_transcription_result_isSet;
    bool m_speech_transcription_result_isValid;

    QList m_intent_classification_results;
    bool m_intent_classification_results_isSet;
    bool m_intent_classification_results_isValid;

    QList m_slot_resolution_results;
    bool m_slot_resolution_results_isSet;
    bool m_slot_resolution_results_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConversationLevelTestResultItem)

#endif // OAIConversationLevelTestResultItem_H
