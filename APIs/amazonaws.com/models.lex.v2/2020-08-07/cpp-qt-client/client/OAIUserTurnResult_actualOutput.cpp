/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserTurnResult_actualOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserTurnResult_actualOutput::OAIUserTurnResult_actualOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserTurnResult_actualOutput::OAIUserTurnResult_actualOutput() {
    this->initializeModel();
}

OAIUserTurnResult_actualOutput::~OAIUserTurnResult_actualOutput() {}

void OAIUserTurnResult_actualOutput::initializeModel() {

    m_intent_isSet = false;
    m_intent_isValid = false;

    m_active_contexts_isSet = false;
    m_active_contexts_isValid = false;

    m_transcript_isSet = false;
    m_transcript_isValid = false;
}

void OAIUserTurnResult_actualOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserTurnResult_actualOutput::fromJsonObject(QJsonObject json) {

    m_intent_isValid = ::OpenAPI::fromJsonValue(m_intent, json[QString("intent")]);
    m_intent_isSet = !json[QString("intent")].isNull() && m_intent_isValid;

    m_active_contexts_isValid = ::OpenAPI::fromJsonValue(m_active_contexts, json[QString("activeContexts")]);
    m_active_contexts_isSet = !json[QString("activeContexts")].isNull() && m_active_contexts_isValid;

    m_transcript_isValid = ::OpenAPI::fromJsonValue(m_transcript, json[QString("transcript")]);
    m_transcript_isSet = !json[QString("transcript")].isNull() && m_transcript_isValid;
}

QString OAIUserTurnResult_actualOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserTurnResult_actualOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_intent.isSet()) {
        obj.insert(QString("intent"), ::OpenAPI::toJsonValue(m_intent));
    }
    if (m_active_contexts.isSet()) {
        obj.insert(QString("activeContexts"), ::OpenAPI::toJsonValue(m_active_contexts));
    }
    if (m_transcript_isSet) {
        obj.insert(QString("transcript"), ::OpenAPI::toJsonValue(m_transcript));
    }
    return obj;
}

OAIUserTurnOutputSpecification_intent OAIUserTurnResult_actualOutput::getIntent() const {
    return m_intent;
}
void OAIUserTurnResult_actualOutput::setIntent(const OAIUserTurnOutputSpecification_intent &intent) {
    m_intent = intent;
    m_intent_isSet = true;
}

bool OAIUserTurnResult_actualOutput::is_intent_Set() const{
    return m_intent_isSet;
}

bool OAIUserTurnResult_actualOutput::is_intent_Valid() const{
    return m_intent_isValid;
}

QList OAIUserTurnResult_actualOutput::getActiveContexts() const {
    return m_active_contexts;
}
void OAIUserTurnResult_actualOutput::setActiveContexts(const QList &active_contexts) {
    m_active_contexts = active_contexts;
    m_active_contexts_isSet = true;
}

bool OAIUserTurnResult_actualOutput::is_active_contexts_Set() const{
    return m_active_contexts_isSet;
}

bool OAIUserTurnResult_actualOutput::is_active_contexts_Valid() const{
    return m_active_contexts_isValid;
}

QString OAIUserTurnResult_actualOutput::getTranscript() const {
    return m_transcript;
}
void OAIUserTurnResult_actualOutput::setTranscript(const QString &transcript) {
    m_transcript = transcript;
    m_transcript_isSet = true;
}

bool OAIUserTurnResult_actualOutput::is_transcript_Set() const{
    return m_transcript_isSet;
}

bool OAIUserTurnResult_actualOutput::is_transcript_Valid() const{
    return m_transcript_isValid;
}

bool OAIUserTurnResult_actualOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_intent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_contexts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserTurnResult_actualOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_intent_isValid && true;
}

} // namespace OpenAPI
