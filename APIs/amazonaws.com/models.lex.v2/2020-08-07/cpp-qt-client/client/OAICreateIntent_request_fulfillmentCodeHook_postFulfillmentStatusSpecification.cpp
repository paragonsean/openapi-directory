/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification() {
    this->initializeModel();
}

OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::~OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification() {}

void OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::initializeModel() {

    m_success_response_isSet = false;
    m_success_response_isValid = false;

    m_failure_response_isSet = false;
    m_failure_response_isValid = false;

    m_timeout_response_isSet = false;
    m_timeout_response_isValid = false;

    m_success_next_step_isSet = false;
    m_success_next_step_isValid = false;

    m_success_conditional_isSet = false;
    m_success_conditional_isValid = false;

    m_failure_next_step_isSet = false;
    m_failure_next_step_isValid = false;

    m_failure_conditional_isSet = false;
    m_failure_conditional_isValid = false;

    m_timeout_next_step_isSet = false;
    m_timeout_next_step_isValid = false;

    m_timeout_conditional_isSet = false;
    m_timeout_conditional_isValid = false;
}

void OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::fromJsonObject(QJsonObject json) {

    m_success_response_isValid = ::OpenAPI::fromJsonValue(m_success_response, json[QString("successResponse")]);
    m_success_response_isSet = !json[QString("successResponse")].isNull() && m_success_response_isValid;

    m_failure_response_isValid = ::OpenAPI::fromJsonValue(m_failure_response, json[QString("failureResponse")]);
    m_failure_response_isSet = !json[QString("failureResponse")].isNull() && m_failure_response_isValid;

    m_timeout_response_isValid = ::OpenAPI::fromJsonValue(m_timeout_response, json[QString("timeoutResponse")]);
    m_timeout_response_isSet = !json[QString("timeoutResponse")].isNull() && m_timeout_response_isValid;

    m_success_next_step_isValid = ::OpenAPI::fromJsonValue(m_success_next_step, json[QString("successNextStep")]);
    m_success_next_step_isSet = !json[QString("successNextStep")].isNull() && m_success_next_step_isValid;

    m_success_conditional_isValid = ::OpenAPI::fromJsonValue(m_success_conditional, json[QString("successConditional")]);
    m_success_conditional_isSet = !json[QString("successConditional")].isNull() && m_success_conditional_isValid;

    m_failure_next_step_isValid = ::OpenAPI::fromJsonValue(m_failure_next_step, json[QString("failureNextStep")]);
    m_failure_next_step_isSet = !json[QString("failureNextStep")].isNull() && m_failure_next_step_isValid;

    m_failure_conditional_isValid = ::OpenAPI::fromJsonValue(m_failure_conditional, json[QString("failureConditional")]);
    m_failure_conditional_isSet = !json[QString("failureConditional")].isNull() && m_failure_conditional_isValid;

    m_timeout_next_step_isValid = ::OpenAPI::fromJsonValue(m_timeout_next_step, json[QString("timeoutNextStep")]);
    m_timeout_next_step_isSet = !json[QString("timeoutNextStep")].isNull() && m_timeout_next_step_isValid;

    m_timeout_conditional_isValid = ::OpenAPI::fromJsonValue(m_timeout_conditional, json[QString("timeoutConditional")]);
    m_timeout_conditional_isSet = !json[QString("timeoutConditional")].isNull() && m_timeout_conditional_isValid;
}

QString OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_success_response.isSet()) {
        obj.insert(QString("successResponse"), ::OpenAPI::toJsonValue(m_success_response));
    }
    if (m_failure_response.isSet()) {
        obj.insert(QString("failureResponse"), ::OpenAPI::toJsonValue(m_failure_response));
    }
    if (m_timeout_response.isSet()) {
        obj.insert(QString("timeoutResponse"), ::OpenAPI::toJsonValue(m_timeout_response));
    }
    if (m_success_next_step.isSet()) {
        obj.insert(QString("successNextStep"), ::OpenAPI::toJsonValue(m_success_next_step));
    }
    if (m_success_conditional.isSet()) {
        obj.insert(QString("successConditional"), ::OpenAPI::toJsonValue(m_success_conditional));
    }
    if (m_failure_next_step.isSet()) {
        obj.insert(QString("failureNextStep"), ::OpenAPI::toJsonValue(m_failure_next_step));
    }
    if (m_failure_conditional.isSet()) {
        obj.insert(QString("failureConditional"), ::OpenAPI::toJsonValue(m_failure_conditional));
    }
    if (m_timeout_next_step.isSet()) {
        obj.insert(QString("timeoutNextStep"), ::OpenAPI::toJsonValue(m_timeout_next_step));
    }
    if (m_timeout_conditional.isSet()) {
        obj.insert(QString("timeoutConditional"), ::OpenAPI::toJsonValue(m_timeout_conditional));
    }
    return obj;
}

OAIResponseSpecification OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::getSuccessResponse() const {
    return m_success_response;
}
void OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::setSuccessResponse(const OAIResponseSpecification &success_response) {
    m_success_response = success_response;
    m_success_response_isSet = true;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_success_response_Set() const{
    return m_success_response_isSet;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_success_response_Valid() const{
    return m_success_response_isValid;
}

OAIResponseSpecification OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::getFailureResponse() const {
    return m_failure_response;
}
void OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::setFailureResponse(const OAIResponseSpecification &failure_response) {
    m_failure_response = failure_response;
    m_failure_response_isSet = true;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_failure_response_Set() const{
    return m_failure_response_isSet;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_failure_response_Valid() const{
    return m_failure_response_isValid;
}

OAIResponseSpecification OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::getTimeoutResponse() const {
    return m_timeout_response;
}
void OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::setTimeoutResponse(const OAIResponseSpecification &timeout_response) {
    m_timeout_response = timeout_response;
    m_timeout_response_isSet = true;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_timeout_response_Set() const{
    return m_timeout_response_isSet;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_timeout_response_Valid() const{
    return m_timeout_response_isValid;
}

OAIPostFulfillmentStatusSpecification_successNextStep OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::getSuccessNextStep() const {
    return m_success_next_step;
}
void OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::setSuccessNextStep(const OAIPostFulfillmentStatusSpecification_successNextStep &success_next_step) {
    m_success_next_step = success_next_step;
    m_success_next_step_isSet = true;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_success_next_step_Set() const{
    return m_success_next_step_isSet;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_success_next_step_Valid() const{
    return m_success_next_step_isValid;
}

OAIPostFulfillmentStatusSpecification_successConditional OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::getSuccessConditional() const {
    return m_success_conditional;
}
void OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::setSuccessConditional(const OAIPostFulfillmentStatusSpecification_successConditional &success_conditional) {
    m_success_conditional = success_conditional;
    m_success_conditional_isSet = true;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_success_conditional_Set() const{
    return m_success_conditional_isSet;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_success_conditional_Valid() const{
    return m_success_conditional_isValid;
}

OAIPostFulfillmentStatusSpecification_failureNextStep OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::getFailureNextStep() const {
    return m_failure_next_step;
}
void OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::setFailureNextStep(const OAIPostFulfillmentStatusSpecification_failureNextStep &failure_next_step) {
    m_failure_next_step = failure_next_step;
    m_failure_next_step_isSet = true;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_failure_next_step_Set() const{
    return m_failure_next_step_isSet;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_failure_next_step_Valid() const{
    return m_failure_next_step_isValid;
}

OAIPostFulfillmentStatusSpecification_failureConditional OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::getFailureConditional() const {
    return m_failure_conditional;
}
void OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::setFailureConditional(const OAIPostFulfillmentStatusSpecification_failureConditional &failure_conditional) {
    m_failure_conditional = failure_conditional;
    m_failure_conditional_isSet = true;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_failure_conditional_Set() const{
    return m_failure_conditional_isSet;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_failure_conditional_Valid() const{
    return m_failure_conditional_isValid;
}

OAIPostFulfillmentStatusSpecification_timeoutNextStep OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::getTimeoutNextStep() const {
    return m_timeout_next_step;
}
void OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::setTimeoutNextStep(const OAIPostFulfillmentStatusSpecification_timeoutNextStep &timeout_next_step) {
    m_timeout_next_step = timeout_next_step;
    m_timeout_next_step_isSet = true;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_timeout_next_step_Set() const{
    return m_timeout_next_step_isSet;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_timeout_next_step_Valid() const{
    return m_timeout_next_step_isValid;
}

OAIPostFulfillmentStatusSpecification_timeoutConditional OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::getTimeoutConditional() const {
    return m_timeout_conditional;
}
void OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::setTimeoutConditional(const OAIPostFulfillmentStatusSpecification_timeoutConditional &timeout_conditional) {
    m_timeout_conditional = timeout_conditional;
    m_timeout_conditional_isSet = true;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_timeout_conditional_Set() const{
    return m_timeout_conditional_isSet;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::is_timeout_conditional_Valid() const{
    return m_timeout_conditional_isValid;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_success_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_next_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_conditional.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_next_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_conditional.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_next_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_conditional.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
