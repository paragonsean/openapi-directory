/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversationLevelResultDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversationLevelResultDetail::OAIConversationLevelResultDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversationLevelResultDetail::OAIConversationLevelResultDetail() {
    this->initializeModel();
}

OAIConversationLevelResultDetail::~OAIConversationLevelResultDetail() {}

void OAIConversationLevelResultDetail::initializeModel() {

    m_end_to_end_result_isSet = false;
    m_end_to_end_result_isValid = false;

    m_speech_transcription_result_isSet = false;
    m_speech_transcription_result_isValid = false;
}

void OAIConversationLevelResultDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversationLevelResultDetail::fromJsonObject(QJsonObject json) {

    m_end_to_end_result_isValid = ::OpenAPI::fromJsonValue(m_end_to_end_result, json[QString("endToEndResult")]);
    m_end_to_end_result_isSet = !json[QString("endToEndResult")].isNull() && m_end_to_end_result_isValid;

    m_speech_transcription_result_isValid = ::OpenAPI::fromJsonValue(m_speech_transcription_result, json[QString("speechTranscriptionResult")]);
    m_speech_transcription_result_isSet = !json[QString("speechTranscriptionResult")].isNull() && m_speech_transcription_result_isValid;
}

QString OAIConversationLevelResultDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversationLevelResultDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_end_to_end_result.isSet()) {
        obj.insert(QString("endToEndResult"), ::OpenAPI::toJsonValue(m_end_to_end_result));
    }
    if (m_speech_transcription_result.isSet()) {
        obj.insert(QString("speechTranscriptionResult"), ::OpenAPI::toJsonValue(m_speech_transcription_result));
    }
    return obj;
}

OAITestResultMatchStatus OAIConversationLevelResultDetail::getEndToEndResult() const {
    return m_end_to_end_result;
}
void OAIConversationLevelResultDetail::setEndToEndResult(const OAITestResultMatchStatus &end_to_end_result) {
    m_end_to_end_result = end_to_end_result;
    m_end_to_end_result_isSet = true;
}

bool OAIConversationLevelResultDetail::is_end_to_end_result_Set() const{
    return m_end_to_end_result_isSet;
}

bool OAIConversationLevelResultDetail::is_end_to_end_result_Valid() const{
    return m_end_to_end_result_isValid;
}

OAITestResultMatchStatus OAIConversationLevelResultDetail::getSpeechTranscriptionResult() const {
    return m_speech_transcription_result;
}
void OAIConversationLevelResultDetail::setSpeechTranscriptionResult(const OAITestResultMatchStatus &speech_transcription_result) {
    m_speech_transcription_result = speech_transcription_result;
    m_speech_transcription_result_isSet = true;
}

bool OAIConversationLevelResultDetail::is_speech_transcription_result_Set() const{
    return m_speech_transcription_result_isSet;
}

bool OAIConversationLevelResultDetail::is_speech_transcription_result_Valid() const{
    return m_speech_transcription_result_isValid;
}

bool OAIConversationLevelResultDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_to_end_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_transcription_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversationLevelResultDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_to_end_result_isValid && true;
}

} // namespace OpenAPI
