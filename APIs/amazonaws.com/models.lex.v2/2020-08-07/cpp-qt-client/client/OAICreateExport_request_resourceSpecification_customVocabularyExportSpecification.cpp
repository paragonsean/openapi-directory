/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification() {
    this->initializeModel();
}

OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::~OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification() {}

void OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::initializeModel() {

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_locale_id_isSet = false;
    m_locale_id_isValid = false;
}

void OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::fromJsonObject(QJsonObject json) {

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("botId")]);
    m_bot_id_isSet = !json[QString("botId")].isNull() && m_bot_id_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_locale_id_isValid = ::OpenAPI::fromJsonValue(m_locale_id, json[QString("localeId")]);
    m_locale_id_isSet = !json[QString("localeId")].isNull() && m_locale_id_isValid;
}

QString OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_id_isSet) {
        obj.insert(QString("botId"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_locale_id_isSet) {
        obj.insert(QString("localeId"), ::OpenAPI::toJsonValue(m_locale_id));
    }
    return obj;
}

QString OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::getBotId() const {
    return m_bot_id;
}
void OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

QString OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::getBotVersion() const {
    return m_bot_version;
}
void OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QString OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::getLocaleId() const {
    return m_locale_id;
}
void OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::setLocaleId(const QString &locale_id) {
    m_locale_id = locale_id;
    m_locale_id_isSet = true;
}

bool OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::is_locale_id_Set() const{
    return m_locale_id_isSet;
}

bool OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::is_locale_id_Valid() const{
    return m_locale_id_isValid;
}

bool OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateExport_request_resourceSpecification_customVocabularyExportSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bot_id_isValid && m_bot_version_isValid && m_locale_id_isValid && true;
}

} // namespace OpenAPI
