/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTestExecutionResultItems_request_resultFilterBy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTestExecutionResultItems_request_resultFilterBy::OAIListTestExecutionResultItems_request_resultFilterBy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTestExecutionResultItems_request_resultFilterBy::OAIListTestExecutionResultItems_request_resultFilterBy() {
    this->initializeModel();
}

OAIListTestExecutionResultItems_request_resultFilterBy::~OAIListTestExecutionResultItems_request_resultFilterBy() {}

void OAIListTestExecutionResultItems_request_resultFilterBy::initializeModel() {

    m_result_type_filter_isSet = false;
    m_result_type_filter_isValid = false;

    m_conversation_level_test_results_filter_by_isSet = false;
    m_conversation_level_test_results_filter_by_isValid = false;
}

void OAIListTestExecutionResultItems_request_resultFilterBy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTestExecutionResultItems_request_resultFilterBy::fromJsonObject(QJsonObject json) {

    m_result_type_filter_isValid = ::OpenAPI::fromJsonValue(m_result_type_filter, json[QString("resultTypeFilter")]);
    m_result_type_filter_isSet = !json[QString("resultTypeFilter")].isNull() && m_result_type_filter_isValid;

    m_conversation_level_test_results_filter_by_isValid = ::OpenAPI::fromJsonValue(m_conversation_level_test_results_filter_by, json[QString("conversationLevelTestResultsFilterBy")]);
    m_conversation_level_test_results_filter_by_isSet = !json[QString("conversationLevelTestResultsFilterBy")].isNull() && m_conversation_level_test_results_filter_by_isValid;
}

QString OAIListTestExecutionResultItems_request_resultFilterBy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTestExecutionResultItems_request_resultFilterBy::asJsonObject() const {
    QJsonObject obj;
    if (m_result_type_filter.isSet()) {
        obj.insert(QString("resultTypeFilter"), ::OpenAPI::toJsonValue(m_result_type_filter));
    }
    if (m_conversation_level_test_results_filter_by.isSet()) {
        obj.insert(QString("conversationLevelTestResultsFilterBy"), ::OpenAPI::toJsonValue(m_conversation_level_test_results_filter_by));
    }
    return obj;
}

OAITestResultTypeFilter OAIListTestExecutionResultItems_request_resultFilterBy::getResultTypeFilter() const {
    return m_result_type_filter;
}
void OAIListTestExecutionResultItems_request_resultFilterBy::setResultTypeFilter(const OAITestResultTypeFilter &result_type_filter) {
    m_result_type_filter = result_type_filter;
    m_result_type_filter_isSet = true;
}

bool OAIListTestExecutionResultItems_request_resultFilterBy::is_result_type_filter_Set() const{
    return m_result_type_filter_isSet;
}

bool OAIListTestExecutionResultItems_request_resultFilterBy::is_result_type_filter_Valid() const{
    return m_result_type_filter_isValid;
}

OAIListTestExecutionResultItems_request_resultFilterBy_conversationLevelTestResultsFilterBy OAIListTestExecutionResultItems_request_resultFilterBy::getConversationLevelTestResultsFilterBy() const {
    return m_conversation_level_test_results_filter_by;
}
void OAIListTestExecutionResultItems_request_resultFilterBy::setConversationLevelTestResultsFilterBy(const OAIListTestExecutionResultItems_request_resultFilterBy_conversationLevelTestResultsFilterBy &conversation_level_test_results_filter_by) {
    m_conversation_level_test_results_filter_by = conversation_level_test_results_filter_by;
    m_conversation_level_test_results_filter_by_isSet = true;
}

bool OAIListTestExecutionResultItems_request_resultFilterBy::is_conversation_level_test_results_filter_by_Set() const{
    return m_conversation_level_test_results_filter_by_isSet;
}

bool OAIListTestExecutionResultItems_request_resultFilterBy::is_conversation_level_test_results_filter_by_Valid() const{
    return m_conversation_level_test_results_filter_by_isValid;
}

bool OAIListTestExecutionResultItems_request_resultFilterBy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_result_type_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_level_test_results_filter_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTestExecutionResultItems_request_resultFilterBy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
