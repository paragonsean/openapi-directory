/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaitAndContinueSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaitAndContinueSpecification::OAIWaitAndContinueSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaitAndContinueSpecification::OAIWaitAndContinueSpecification() {
    this->initializeModel();
}

OAIWaitAndContinueSpecification::~OAIWaitAndContinueSpecification() {}

void OAIWaitAndContinueSpecification::initializeModel() {

    m_waiting_response_isSet = false;
    m_waiting_response_isValid = false;

    m_continue_response_isSet = false;
    m_continue_response_isValid = false;

    m_still_waiting_response_isSet = false;
    m_still_waiting_response_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;
}

void OAIWaitAndContinueSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaitAndContinueSpecification::fromJsonObject(QJsonObject json) {

    m_waiting_response_isValid = ::OpenAPI::fromJsonValue(m_waiting_response, json[QString("waitingResponse")]);
    m_waiting_response_isSet = !json[QString("waitingResponse")].isNull() && m_waiting_response_isValid;

    m_continue_response_isValid = ::OpenAPI::fromJsonValue(m_continue_response, json[QString("continueResponse")]);
    m_continue_response_isSet = !json[QString("continueResponse")].isNull() && m_continue_response_isValid;

    m_still_waiting_response_isValid = ::OpenAPI::fromJsonValue(m_still_waiting_response, json[QString("stillWaitingResponse")]);
    m_still_waiting_response_isSet = !json[QString("stillWaitingResponse")].isNull() && m_still_waiting_response_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;
}

QString OAIWaitAndContinueSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaitAndContinueSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_waiting_response.isSet()) {
        obj.insert(QString("waitingResponse"), ::OpenAPI::toJsonValue(m_waiting_response));
    }
    if (m_continue_response.isSet()) {
        obj.insert(QString("continueResponse"), ::OpenAPI::toJsonValue(m_continue_response));
    }
    if (m_still_waiting_response.isSet()) {
        obj.insert(QString("stillWaitingResponse"), ::OpenAPI::toJsonValue(m_still_waiting_response));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    return obj;
}

OAIWaitAndContinueSpecification_waitingResponse OAIWaitAndContinueSpecification::getWaitingResponse() const {
    return m_waiting_response;
}
void OAIWaitAndContinueSpecification::setWaitingResponse(const OAIWaitAndContinueSpecification_waitingResponse &waiting_response) {
    m_waiting_response = waiting_response;
    m_waiting_response_isSet = true;
}

bool OAIWaitAndContinueSpecification::is_waiting_response_Set() const{
    return m_waiting_response_isSet;
}

bool OAIWaitAndContinueSpecification::is_waiting_response_Valid() const{
    return m_waiting_response_isValid;
}

OAIWaitAndContinueSpecification_continueResponse OAIWaitAndContinueSpecification::getContinueResponse() const {
    return m_continue_response;
}
void OAIWaitAndContinueSpecification::setContinueResponse(const OAIWaitAndContinueSpecification_continueResponse &continue_response) {
    m_continue_response = continue_response;
    m_continue_response_isSet = true;
}

bool OAIWaitAndContinueSpecification::is_continue_response_Set() const{
    return m_continue_response_isSet;
}

bool OAIWaitAndContinueSpecification::is_continue_response_Valid() const{
    return m_continue_response_isValid;
}

OAIWaitAndContinueSpecification_stillWaitingResponse OAIWaitAndContinueSpecification::getStillWaitingResponse() const {
    return m_still_waiting_response;
}
void OAIWaitAndContinueSpecification::setStillWaitingResponse(const OAIWaitAndContinueSpecification_stillWaitingResponse &still_waiting_response) {
    m_still_waiting_response = still_waiting_response;
    m_still_waiting_response_isSet = true;
}

bool OAIWaitAndContinueSpecification::is_still_waiting_response_Set() const{
    return m_still_waiting_response_isSet;
}

bool OAIWaitAndContinueSpecification::is_still_waiting_response_Valid() const{
    return m_still_waiting_response_isValid;
}

bool OAIWaitAndContinueSpecification::getActive() const {
    return m_active;
}
void OAIWaitAndContinueSpecification::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIWaitAndContinueSpecification::is_active_Set() const{
    return m_active_isSet;
}

bool OAIWaitAndContinueSpecification::is_active_Valid() const{
    return m_active_isValid;
}

bool OAIWaitAndContinueSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_waiting_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_continue_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_still_waiting_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaitAndContinueSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_waiting_response_isValid && m_continue_response_isValid && true;
}

} // namespace OpenAPI
