/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestExecutionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestExecutionStatus::OAITestExecutionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestExecutionStatus::OAITestExecutionStatus() {
    this->initializeModel();
}

OAITestExecutionStatus::~OAITestExecutionStatus() {}

void OAITestExecutionStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITestExecutionStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITestExecutionStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestExecutionStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Waiting", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestExecutionStatus::WAITING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestExecutionStatus::INPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completed", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestExecutionStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestExecutionStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopping", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestExecutionStatus::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopped", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestExecutionStatus::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITestExecutionStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITestExecutionStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITestExecutionStatus::PENDING:
            val = "Pending";
            break;
        case eOAITestExecutionStatus::WAITING:
            val = "Waiting";
            break;
        case eOAITestExecutionStatus::INPROGRESS:
            val = "InProgress";
            break;
        case eOAITestExecutionStatus::COMPLETED:
            val = "Completed";
            break;
        case eOAITestExecutionStatus::FAILED:
            val = "Failed";
            break;
        case eOAITestExecutionStatus::STOPPING:
            val = "Stopping";
            break;
        case eOAITestExecutionStatus::STOPPED:
            val = "Stopped";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITestExecutionStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITestExecutionStatus::eOAITestExecutionStatus OAITestExecutionStatus::getValue() const {
    return m_value;
}

void OAITestExecutionStatus::setValue(const OAITestExecutionStatus::eOAITestExecutionStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITestExecutionStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAITestExecutionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
