/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregatedUtterancesSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregatedUtterancesSummary::OAIAggregatedUtterancesSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregatedUtterancesSummary::OAIAggregatedUtterancesSummary() {
    this->initializeModel();
}

OAIAggregatedUtterancesSummary::~OAIAggregatedUtterancesSummary() {}

void OAIAggregatedUtterancesSummary::initializeModel() {

    m_utterance_isSet = false;
    m_utterance_isValid = false;

    m_hit_count_isSet = false;
    m_hit_count_isValid = false;

    m_missed_count_isSet = false;
    m_missed_count_isValid = false;

    m_utterance_first_recorded_in_aggregation_duration_isSet = false;
    m_utterance_first_recorded_in_aggregation_duration_isValid = false;

    m_utterance_last_recorded_in_aggregation_duration_isSet = false;
    m_utterance_last_recorded_in_aggregation_duration_isValid = false;

    m_contains_data_from_deleted_resources_isSet = false;
    m_contains_data_from_deleted_resources_isValid = false;
}

void OAIAggregatedUtterancesSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregatedUtterancesSummary::fromJsonObject(QJsonObject json) {

    m_utterance_isValid = ::OpenAPI::fromJsonValue(m_utterance, json[QString("utterance")]);
    m_utterance_isSet = !json[QString("utterance")].isNull() && m_utterance_isValid;

    m_hit_count_isValid = ::OpenAPI::fromJsonValue(m_hit_count, json[QString("hitCount")]);
    m_hit_count_isSet = !json[QString("hitCount")].isNull() && m_hit_count_isValid;

    m_missed_count_isValid = ::OpenAPI::fromJsonValue(m_missed_count, json[QString("missedCount")]);
    m_missed_count_isSet = !json[QString("missedCount")].isNull() && m_missed_count_isValid;

    m_utterance_first_recorded_in_aggregation_duration_isValid = ::OpenAPI::fromJsonValue(m_utterance_first_recorded_in_aggregation_duration, json[QString("utteranceFirstRecordedInAggregationDuration")]);
    m_utterance_first_recorded_in_aggregation_duration_isSet = !json[QString("utteranceFirstRecordedInAggregationDuration")].isNull() && m_utterance_first_recorded_in_aggregation_duration_isValid;

    m_utterance_last_recorded_in_aggregation_duration_isValid = ::OpenAPI::fromJsonValue(m_utterance_last_recorded_in_aggregation_duration, json[QString("utteranceLastRecordedInAggregationDuration")]);
    m_utterance_last_recorded_in_aggregation_duration_isSet = !json[QString("utteranceLastRecordedInAggregationDuration")].isNull() && m_utterance_last_recorded_in_aggregation_duration_isValid;

    m_contains_data_from_deleted_resources_isValid = ::OpenAPI::fromJsonValue(m_contains_data_from_deleted_resources, json[QString("containsDataFromDeletedResources")]);
    m_contains_data_from_deleted_resources_isSet = !json[QString("containsDataFromDeletedResources")].isNull() && m_contains_data_from_deleted_resources_isValid;
}

QString OAIAggregatedUtterancesSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregatedUtterancesSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_utterance_isSet) {
        obj.insert(QString("utterance"), ::OpenAPI::toJsonValue(m_utterance));
    }
    if (m_hit_count_isSet) {
        obj.insert(QString("hitCount"), ::OpenAPI::toJsonValue(m_hit_count));
    }
    if (m_missed_count_isSet) {
        obj.insert(QString("missedCount"), ::OpenAPI::toJsonValue(m_missed_count));
    }
    if (m_utterance_first_recorded_in_aggregation_duration_isSet) {
        obj.insert(QString("utteranceFirstRecordedInAggregationDuration"), ::OpenAPI::toJsonValue(m_utterance_first_recorded_in_aggregation_duration));
    }
    if (m_utterance_last_recorded_in_aggregation_duration_isSet) {
        obj.insert(QString("utteranceLastRecordedInAggregationDuration"), ::OpenAPI::toJsonValue(m_utterance_last_recorded_in_aggregation_duration));
    }
    if (m_contains_data_from_deleted_resources_isSet) {
        obj.insert(QString("containsDataFromDeletedResources"), ::OpenAPI::toJsonValue(m_contains_data_from_deleted_resources));
    }
    return obj;
}

QString OAIAggregatedUtterancesSummary::getUtterance() const {
    return m_utterance;
}
void OAIAggregatedUtterancesSummary::setUtterance(const QString &utterance) {
    m_utterance = utterance;
    m_utterance_isSet = true;
}

bool OAIAggregatedUtterancesSummary::is_utterance_Set() const{
    return m_utterance_isSet;
}

bool OAIAggregatedUtterancesSummary::is_utterance_Valid() const{
    return m_utterance_isValid;
}

qint32 OAIAggregatedUtterancesSummary::getHitCount() const {
    return m_hit_count;
}
void OAIAggregatedUtterancesSummary::setHitCount(const qint32 &hit_count) {
    m_hit_count = hit_count;
    m_hit_count_isSet = true;
}

bool OAIAggregatedUtterancesSummary::is_hit_count_Set() const{
    return m_hit_count_isSet;
}

bool OAIAggregatedUtterancesSummary::is_hit_count_Valid() const{
    return m_hit_count_isValid;
}

qint32 OAIAggregatedUtterancesSummary::getMissedCount() const {
    return m_missed_count;
}
void OAIAggregatedUtterancesSummary::setMissedCount(const qint32 &missed_count) {
    m_missed_count = missed_count;
    m_missed_count_isSet = true;
}

bool OAIAggregatedUtterancesSummary::is_missed_count_Set() const{
    return m_missed_count_isSet;
}

bool OAIAggregatedUtterancesSummary::is_missed_count_Valid() const{
    return m_missed_count_isValid;
}

QDateTime OAIAggregatedUtterancesSummary::getUtteranceFirstRecordedInAggregationDuration() const {
    return m_utterance_first_recorded_in_aggregation_duration;
}
void OAIAggregatedUtterancesSummary::setUtteranceFirstRecordedInAggregationDuration(const QDateTime &utterance_first_recorded_in_aggregation_duration) {
    m_utterance_first_recorded_in_aggregation_duration = utterance_first_recorded_in_aggregation_duration;
    m_utterance_first_recorded_in_aggregation_duration_isSet = true;
}

bool OAIAggregatedUtterancesSummary::is_utterance_first_recorded_in_aggregation_duration_Set() const{
    return m_utterance_first_recorded_in_aggregation_duration_isSet;
}

bool OAIAggregatedUtterancesSummary::is_utterance_first_recorded_in_aggregation_duration_Valid() const{
    return m_utterance_first_recorded_in_aggregation_duration_isValid;
}

QDateTime OAIAggregatedUtterancesSummary::getUtteranceLastRecordedInAggregationDuration() const {
    return m_utterance_last_recorded_in_aggregation_duration;
}
void OAIAggregatedUtterancesSummary::setUtteranceLastRecordedInAggregationDuration(const QDateTime &utterance_last_recorded_in_aggregation_duration) {
    m_utterance_last_recorded_in_aggregation_duration = utterance_last_recorded_in_aggregation_duration;
    m_utterance_last_recorded_in_aggregation_duration_isSet = true;
}

bool OAIAggregatedUtterancesSummary::is_utterance_last_recorded_in_aggregation_duration_Set() const{
    return m_utterance_last_recorded_in_aggregation_duration_isSet;
}

bool OAIAggregatedUtterancesSummary::is_utterance_last_recorded_in_aggregation_duration_Valid() const{
    return m_utterance_last_recorded_in_aggregation_duration_isValid;
}

bool OAIAggregatedUtterancesSummary::getContainsDataFromDeletedResources() const {
    return m_contains_data_from_deleted_resources;
}
void OAIAggregatedUtterancesSummary::setContainsDataFromDeletedResources(const bool &contains_data_from_deleted_resources) {
    m_contains_data_from_deleted_resources = contains_data_from_deleted_resources;
    m_contains_data_from_deleted_resources_isSet = true;
}

bool OAIAggregatedUtterancesSummary::is_contains_data_from_deleted_resources_Set() const{
    return m_contains_data_from_deleted_resources_isSet;
}

bool OAIAggregatedUtterancesSummary::is_contains_data_from_deleted_resources_Valid() const{
    return m_contains_data_from_deleted_resources_isValid;
}

bool OAIAggregatedUtterancesSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_utterance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utterance_first_recorded_in_aggregation_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utterance_last_recorded_in_aggregation_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_data_from_deleted_resources_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregatedUtterancesSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
