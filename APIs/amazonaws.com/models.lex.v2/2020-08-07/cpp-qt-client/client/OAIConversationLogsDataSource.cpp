/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversationLogsDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversationLogsDataSource::OAIConversationLogsDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversationLogsDataSource::OAIConversationLogsDataSource() {
    this->initializeModel();
}

OAIConversationLogsDataSource::~OAIConversationLogsDataSource() {}

void OAIConversationLogsDataSource::initializeModel() {

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_bot_alias_id_isSet = false;
    m_bot_alias_id_isValid = false;

    m_locale_id_isSet = false;
    m_locale_id_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;
}

void OAIConversationLogsDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversationLogsDataSource::fromJsonObject(QJsonObject json) {

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("botId")]);
    m_bot_id_isSet = !json[QString("botId")].isNull() && m_bot_id_isValid;

    m_bot_alias_id_isValid = ::OpenAPI::fromJsonValue(m_bot_alias_id, json[QString("botAliasId")]);
    m_bot_alias_id_isSet = !json[QString("botAliasId")].isNull() && m_bot_alias_id_isValid;

    m_locale_id_isValid = ::OpenAPI::fromJsonValue(m_locale_id, json[QString("localeId")]);
    m_locale_id_isSet = !json[QString("localeId")].isNull() && m_locale_id_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;
}

QString OAIConversationLogsDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversationLogsDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_id_isSet) {
        obj.insert(QString("botId"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_bot_alias_id_isSet) {
        obj.insert(QString("botAliasId"), ::OpenAPI::toJsonValue(m_bot_alias_id));
    }
    if (m_locale_id_isSet) {
        obj.insert(QString("localeId"), ::OpenAPI::toJsonValue(m_locale_id));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    return obj;
}

QString OAIConversationLogsDataSource::getBotId() const {
    return m_bot_id;
}
void OAIConversationLogsDataSource::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAIConversationLogsDataSource::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAIConversationLogsDataSource::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

QString OAIConversationLogsDataSource::getBotAliasId() const {
    return m_bot_alias_id;
}
void OAIConversationLogsDataSource::setBotAliasId(const QString &bot_alias_id) {
    m_bot_alias_id = bot_alias_id;
    m_bot_alias_id_isSet = true;
}

bool OAIConversationLogsDataSource::is_bot_alias_id_Set() const{
    return m_bot_alias_id_isSet;
}

bool OAIConversationLogsDataSource::is_bot_alias_id_Valid() const{
    return m_bot_alias_id_isValid;
}

QString OAIConversationLogsDataSource::getLocaleId() const {
    return m_locale_id;
}
void OAIConversationLogsDataSource::setLocaleId(const QString &locale_id) {
    m_locale_id = locale_id;
    m_locale_id_isSet = true;
}

bool OAIConversationLogsDataSource::is_locale_id_Set() const{
    return m_locale_id_isSet;
}

bool OAIConversationLogsDataSource::is_locale_id_Valid() const{
    return m_locale_id_isValid;
}

OAIConversationLogsDataSource_filter OAIConversationLogsDataSource::getFilter() const {
    return m_filter;
}
void OAIConversationLogsDataSource::setFilter(const OAIConversationLogsDataSource_filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIConversationLogsDataSource::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIConversationLogsDataSource::is_filter_Valid() const{
    return m_filter_isValid;
}

bool OAIConversationLogsDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_alias_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversationLogsDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bot_id_isValid && m_bot_alias_id_isValid && m_locale_id_isValid && m_filter_isValid && true;
}

} // namespace OpenAPI
