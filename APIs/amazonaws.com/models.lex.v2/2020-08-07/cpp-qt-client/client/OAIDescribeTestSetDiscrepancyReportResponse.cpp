/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTestSetDiscrepancyReportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTestSetDiscrepancyReportResponse::OAIDescribeTestSetDiscrepancyReportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTestSetDiscrepancyReportResponse::OAIDescribeTestSetDiscrepancyReportResponse() {
    this->initializeModel();
}

OAIDescribeTestSetDiscrepancyReportResponse::~OAIDescribeTestSetDiscrepancyReportResponse() {}

void OAIDescribeTestSetDiscrepancyReportResponse::initializeModel() {

    m_test_set_discrepancy_report_id_isSet = false;
    m_test_set_discrepancy_report_id_isValid = false;

    m_test_set_id_isSet = false;
    m_test_set_id_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_test_set_discrepancy_report_status_isSet = false;
    m_test_set_discrepancy_report_status_isValid = false;

    m_last_updated_data_time_isSet = false;
    m_last_updated_data_time_isValid = false;

    m_test_set_discrepancy_top_errors_isSet = false;
    m_test_set_discrepancy_top_errors_isValid = false;

    m_test_set_discrepancy_raw_output_url_isSet = false;
    m_test_set_discrepancy_raw_output_url_isValid = false;

    m_failure_reasons_isSet = false;
    m_failure_reasons_isValid = false;
}

void OAIDescribeTestSetDiscrepancyReportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTestSetDiscrepancyReportResponse::fromJsonObject(QJsonObject json) {

    m_test_set_discrepancy_report_id_isValid = ::OpenAPI::fromJsonValue(m_test_set_discrepancy_report_id, json[QString("testSetDiscrepancyReportId")]);
    m_test_set_discrepancy_report_id_isSet = !json[QString("testSetDiscrepancyReportId")].isNull() && m_test_set_discrepancy_report_id_isValid;

    m_test_set_id_isValid = ::OpenAPI::fromJsonValue(m_test_set_id, json[QString("testSetId")]);
    m_test_set_id_isSet = !json[QString("testSetId")].isNull() && m_test_set_id_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_test_set_discrepancy_report_status_isValid = ::OpenAPI::fromJsonValue(m_test_set_discrepancy_report_status, json[QString("testSetDiscrepancyReportStatus")]);
    m_test_set_discrepancy_report_status_isSet = !json[QString("testSetDiscrepancyReportStatus")].isNull() && m_test_set_discrepancy_report_status_isValid;

    m_last_updated_data_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_data_time, json[QString("lastUpdatedDataTime")]);
    m_last_updated_data_time_isSet = !json[QString("lastUpdatedDataTime")].isNull() && m_last_updated_data_time_isValid;

    m_test_set_discrepancy_top_errors_isValid = ::OpenAPI::fromJsonValue(m_test_set_discrepancy_top_errors, json[QString("testSetDiscrepancyTopErrors")]);
    m_test_set_discrepancy_top_errors_isSet = !json[QString("testSetDiscrepancyTopErrors")].isNull() && m_test_set_discrepancy_top_errors_isValid;

    m_test_set_discrepancy_raw_output_url_isValid = ::OpenAPI::fromJsonValue(m_test_set_discrepancy_raw_output_url, json[QString("testSetDiscrepancyRawOutputUrl")]);
    m_test_set_discrepancy_raw_output_url_isSet = !json[QString("testSetDiscrepancyRawOutputUrl")].isNull() && m_test_set_discrepancy_raw_output_url_isValid;

    m_failure_reasons_isValid = ::OpenAPI::fromJsonValue(m_failure_reasons, json[QString("failureReasons")]);
    m_failure_reasons_isSet = !json[QString("failureReasons")].isNull() && m_failure_reasons_isValid;
}

QString OAIDescribeTestSetDiscrepancyReportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTestSetDiscrepancyReportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_test_set_discrepancy_report_id_isSet) {
        obj.insert(QString("testSetDiscrepancyReportId"), ::OpenAPI::toJsonValue(m_test_set_discrepancy_report_id));
    }
    if (m_test_set_id_isSet) {
        obj.insert(QString("testSetId"), ::OpenAPI::toJsonValue(m_test_set_id));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_test_set_discrepancy_report_status.isSet()) {
        obj.insert(QString("testSetDiscrepancyReportStatus"), ::OpenAPI::toJsonValue(m_test_set_discrepancy_report_status));
    }
    if (m_last_updated_data_time_isSet) {
        obj.insert(QString("lastUpdatedDataTime"), ::OpenAPI::toJsonValue(m_last_updated_data_time));
    }
    if (m_test_set_discrepancy_top_errors.isSet()) {
        obj.insert(QString("testSetDiscrepancyTopErrors"), ::OpenAPI::toJsonValue(m_test_set_discrepancy_top_errors));
    }
    if (m_test_set_discrepancy_raw_output_url_isSet) {
        obj.insert(QString("testSetDiscrepancyRawOutputUrl"), ::OpenAPI::toJsonValue(m_test_set_discrepancy_raw_output_url));
    }
    if (m_failure_reasons.isSet()) {
        obj.insert(QString("failureReasons"), ::OpenAPI::toJsonValue(m_failure_reasons));
    }
    return obj;
}

QString OAIDescribeTestSetDiscrepancyReportResponse::getTestSetDiscrepancyReportId() const {
    return m_test_set_discrepancy_report_id;
}
void OAIDescribeTestSetDiscrepancyReportResponse::setTestSetDiscrepancyReportId(const QString &test_set_discrepancy_report_id) {
    m_test_set_discrepancy_report_id = test_set_discrepancy_report_id;
    m_test_set_discrepancy_report_id_isSet = true;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_test_set_discrepancy_report_id_Set() const{
    return m_test_set_discrepancy_report_id_isSet;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_test_set_discrepancy_report_id_Valid() const{
    return m_test_set_discrepancy_report_id_isValid;
}

QString OAIDescribeTestSetDiscrepancyReportResponse::getTestSetId() const {
    return m_test_set_id;
}
void OAIDescribeTestSetDiscrepancyReportResponse::setTestSetId(const QString &test_set_id) {
    m_test_set_id = test_set_id;
    m_test_set_id_isSet = true;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_test_set_id_Set() const{
    return m_test_set_id_isSet;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_test_set_id_Valid() const{
    return m_test_set_id_isValid;
}

QDateTime OAIDescribeTestSetDiscrepancyReportResponse::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIDescribeTestSetDiscrepancyReportResponse::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

OAIDescribeTestSetDiscrepancyReportResponse_target OAIDescribeTestSetDiscrepancyReportResponse::getTarget() const {
    return m_target;
}
void OAIDescribeTestSetDiscrepancyReportResponse::setTarget(const OAIDescribeTestSetDiscrepancyReportResponse_target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_target_Set() const{
    return m_target_isSet;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_target_Valid() const{
    return m_target_isValid;
}

OAITestSetDiscrepancyReportStatus OAIDescribeTestSetDiscrepancyReportResponse::getTestSetDiscrepancyReportStatus() const {
    return m_test_set_discrepancy_report_status;
}
void OAIDescribeTestSetDiscrepancyReportResponse::setTestSetDiscrepancyReportStatus(const OAITestSetDiscrepancyReportStatus &test_set_discrepancy_report_status) {
    m_test_set_discrepancy_report_status = test_set_discrepancy_report_status;
    m_test_set_discrepancy_report_status_isSet = true;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_test_set_discrepancy_report_status_Set() const{
    return m_test_set_discrepancy_report_status_isSet;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_test_set_discrepancy_report_status_Valid() const{
    return m_test_set_discrepancy_report_status_isValid;
}

QDateTime OAIDescribeTestSetDiscrepancyReportResponse::getLastUpdatedDataTime() const {
    return m_last_updated_data_time;
}
void OAIDescribeTestSetDiscrepancyReportResponse::setLastUpdatedDataTime(const QDateTime &last_updated_data_time) {
    m_last_updated_data_time = last_updated_data_time;
    m_last_updated_data_time_isSet = true;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_last_updated_data_time_Set() const{
    return m_last_updated_data_time_isSet;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_last_updated_data_time_Valid() const{
    return m_last_updated_data_time_isValid;
}

OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors OAIDescribeTestSetDiscrepancyReportResponse::getTestSetDiscrepancyTopErrors() const {
    return m_test_set_discrepancy_top_errors;
}
void OAIDescribeTestSetDiscrepancyReportResponse::setTestSetDiscrepancyTopErrors(const OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors &test_set_discrepancy_top_errors) {
    m_test_set_discrepancy_top_errors = test_set_discrepancy_top_errors;
    m_test_set_discrepancy_top_errors_isSet = true;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_test_set_discrepancy_top_errors_Set() const{
    return m_test_set_discrepancy_top_errors_isSet;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_test_set_discrepancy_top_errors_Valid() const{
    return m_test_set_discrepancy_top_errors_isValid;
}

QString OAIDescribeTestSetDiscrepancyReportResponse::getTestSetDiscrepancyRawOutputUrl() const {
    return m_test_set_discrepancy_raw_output_url;
}
void OAIDescribeTestSetDiscrepancyReportResponse::setTestSetDiscrepancyRawOutputUrl(const QString &test_set_discrepancy_raw_output_url) {
    m_test_set_discrepancy_raw_output_url = test_set_discrepancy_raw_output_url;
    m_test_set_discrepancy_raw_output_url_isSet = true;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_test_set_discrepancy_raw_output_url_Set() const{
    return m_test_set_discrepancy_raw_output_url_isSet;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_test_set_discrepancy_raw_output_url_Valid() const{
    return m_test_set_discrepancy_raw_output_url_isValid;
}

QList OAIDescribeTestSetDiscrepancyReportResponse::getFailureReasons() const {
    return m_failure_reasons;
}
void OAIDescribeTestSetDiscrepancyReportResponse::setFailureReasons(const QList &failure_reasons) {
    m_failure_reasons = failure_reasons;
    m_failure_reasons_isSet = true;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_failure_reasons_Set() const{
    return m_failure_reasons_isSet;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::is_failure_reasons_Valid() const{
    return m_failure_reasons_isValid;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_test_set_discrepancy_report_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_set_discrepancy_report_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_data_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_set_discrepancy_top_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_set_discrepancy_raw_output_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTestSetDiscrepancyReportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
