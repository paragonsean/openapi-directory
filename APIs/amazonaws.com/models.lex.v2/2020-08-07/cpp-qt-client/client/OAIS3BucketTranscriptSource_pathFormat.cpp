/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3BucketTranscriptSource_pathFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3BucketTranscriptSource_pathFormat::OAIS3BucketTranscriptSource_pathFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3BucketTranscriptSource_pathFormat::OAIS3BucketTranscriptSource_pathFormat() {
    this->initializeModel();
}

OAIS3BucketTranscriptSource_pathFormat::~OAIS3BucketTranscriptSource_pathFormat() {}

void OAIS3BucketTranscriptSource_pathFormat::initializeModel() {

    m_object_prefixes_isSet = false;
    m_object_prefixes_isValid = false;
}

void OAIS3BucketTranscriptSource_pathFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3BucketTranscriptSource_pathFormat::fromJsonObject(QJsonObject json) {

    m_object_prefixes_isValid = ::OpenAPI::fromJsonValue(m_object_prefixes, json[QString("objectPrefixes")]);
    m_object_prefixes_isSet = !json[QString("objectPrefixes")].isNull() && m_object_prefixes_isValid;
}

QString OAIS3BucketTranscriptSource_pathFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3BucketTranscriptSource_pathFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_object_prefixes.isSet()) {
        obj.insert(QString("objectPrefixes"), ::OpenAPI::toJsonValue(m_object_prefixes));
    }
    return obj;
}

QList OAIS3BucketTranscriptSource_pathFormat::getObjectPrefixes() const {
    return m_object_prefixes;
}
void OAIS3BucketTranscriptSource_pathFormat::setObjectPrefixes(const QList &object_prefixes) {
    m_object_prefixes = object_prefixes;
    m_object_prefixes_isSet = true;
}

bool OAIS3BucketTranscriptSource_pathFormat::is_object_prefixes_Set() const{
    return m_object_prefixes_isSet;
}

bool OAIS3BucketTranscriptSource_pathFormat::is_object_prefixes_Valid() const{
    return m_object_prefixes_isValid;
}

bool OAIS3BucketTranscriptSource_pathFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_prefixes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3BucketTranscriptSource_pathFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
