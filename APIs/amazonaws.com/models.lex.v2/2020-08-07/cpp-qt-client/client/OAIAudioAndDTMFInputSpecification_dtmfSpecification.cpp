/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioAndDTMFInputSpecification_dtmfSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioAndDTMFInputSpecification_dtmfSpecification::OAIAudioAndDTMFInputSpecification_dtmfSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioAndDTMFInputSpecification_dtmfSpecification::OAIAudioAndDTMFInputSpecification_dtmfSpecification() {
    this->initializeModel();
}

OAIAudioAndDTMFInputSpecification_dtmfSpecification::~OAIAudioAndDTMFInputSpecification_dtmfSpecification() {}

void OAIAudioAndDTMFInputSpecification_dtmfSpecification::initializeModel() {

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_end_timeout_ms_isSet = false;
    m_end_timeout_ms_isValid = false;

    m_deletion_character_isSet = false;
    m_deletion_character_isValid = false;

    m_end_character_isSet = false;
    m_end_character_isValid = false;
}

void OAIAudioAndDTMFInputSpecification_dtmfSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioAndDTMFInputSpecification_dtmfSpecification::fromJsonObject(QJsonObject json) {

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("maxLength")]);
    m_max_length_isSet = !json[QString("maxLength")].isNull() && m_max_length_isValid;

    m_end_timeout_ms_isValid = ::OpenAPI::fromJsonValue(m_end_timeout_ms, json[QString("endTimeoutMs")]);
    m_end_timeout_ms_isSet = !json[QString("endTimeoutMs")].isNull() && m_end_timeout_ms_isValid;

    m_deletion_character_isValid = ::OpenAPI::fromJsonValue(m_deletion_character, json[QString("deletionCharacter")]);
    m_deletion_character_isSet = !json[QString("deletionCharacter")].isNull() && m_deletion_character_isValid;

    m_end_character_isValid = ::OpenAPI::fromJsonValue(m_end_character, json[QString("endCharacter")]);
    m_end_character_isSet = !json[QString("endCharacter")].isNull() && m_end_character_isValid;
}

QString OAIAudioAndDTMFInputSpecification_dtmfSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioAndDTMFInputSpecification_dtmfSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_max_length_isSet) {
        obj.insert(QString("maxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_end_timeout_ms_isSet) {
        obj.insert(QString("endTimeoutMs"), ::OpenAPI::toJsonValue(m_end_timeout_ms));
    }
    if (m_deletion_character_isSet) {
        obj.insert(QString("deletionCharacter"), ::OpenAPI::toJsonValue(m_deletion_character));
    }
    if (m_end_character_isSet) {
        obj.insert(QString("endCharacter"), ::OpenAPI::toJsonValue(m_end_character));
    }
    return obj;
}

qint32 OAIAudioAndDTMFInputSpecification_dtmfSpecification::getMaxLength() const {
    return m_max_length;
}
void OAIAudioAndDTMFInputSpecification_dtmfSpecification::setMaxLength(const qint32 &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIAudioAndDTMFInputSpecification_dtmfSpecification::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIAudioAndDTMFInputSpecification_dtmfSpecification::is_max_length_Valid() const{
    return m_max_length_isValid;
}

qint32 OAIAudioAndDTMFInputSpecification_dtmfSpecification::getEndTimeoutMs() const {
    return m_end_timeout_ms;
}
void OAIAudioAndDTMFInputSpecification_dtmfSpecification::setEndTimeoutMs(const qint32 &end_timeout_ms) {
    m_end_timeout_ms = end_timeout_ms;
    m_end_timeout_ms_isSet = true;
}

bool OAIAudioAndDTMFInputSpecification_dtmfSpecification::is_end_timeout_ms_Set() const{
    return m_end_timeout_ms_isSet;
}

bool OAIAudioAndDTMFInputSpecification_dtmfSpecification::is_end_timeout_ms_Valid() const{
    return m_end_timeout_ms_isValid;
}

QString OAIAudioAndDTMFInputSpecification_dtmfSpecification::getDeletionCharacter() const {
    return m_deletion_character;
}
void OAIAudioAndDTMFInputSpecification_dtmfSpecification::setDeletionCharacter(const QString &deletion_character) {
    m_deletion_character = deletion_character;
    m_deletion_character_isSet = true;
}

bool OAIAudioAndDTMFInputSpecification_dtmfSpecification::is_deletion_character_Set() const{
    return m_deletion_character_isSet;
}

bool OAIAudioAndDTMFInputSpecification_dtmfSpecification::is_deletion_character_Valid() const{
    return m_deletion_character_isValid;
}

QString OAIAudioAndDTMFInputSpecification_dtmfSpecification::getEndCharacter() const {
    return m_end_character;
}
void OAIAudioAndDTMFInputSpecification_dtmfSpecification::setEndCharacter(const QString &end_character) {
    m_end_character = end_character;
    m_end_character_isSet = true;
}

bool OAIAudioAndDTMFInputSpecification_dtmfSpecification::is_end_character_Set() const{
    return m_end_character_isSet;
}

bool OAIAudioAndDTMFInputSpecification_dtmfSpecification::is_end_character_Valid() const{
    return m_end_character_isValid;
}

bool OAIAudioAndDTMFInputSpecification_dtmfSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_timeout_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_character_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioAndDTMFInputSpecification_dtmfSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_length_isValid && m_end_timeout_ms_isValid && m_deletion_character_isValid && m_end_character_isValid && true;
}

} // namespace OpenAPI
