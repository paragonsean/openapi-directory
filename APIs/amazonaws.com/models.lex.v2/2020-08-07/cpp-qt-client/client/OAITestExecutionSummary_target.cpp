/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestExecutionSummary_target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestExecutionSummary_target::OAITestExecutionSummary_target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestExecutionSummary_target::OAITestExecutionSummary_target() {
    this->initializeModel();
}

OAITestExecutionSummary_target::~OAITestExecutionSummary_target() {}

void OAITestExecutionSummary_target::initializeModel() {

    m_bot_alias_target_isSet = false;
    m_bot_alias_target_isValid = false;
}

void OAITestExecutionSummary_target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestExecutionSummary_target::fromJsonObject(QJsonObject json) {

    m_bot_alias_target_isValid = ::OpenAPI::fromJsonValue(m_bot_alias_target, json[QString("botAliasTarget")]);
    m_bot_alias_target_isSet = !json[QString("botAliasTarget")].isNull() && m_bot_alias_target_isValid;
}

QString OAITestExecutionSummary_target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestExecutionSummary_target::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_alias_target.isSet()) {
        obj.insert(QString("botAliasTarget"), ::OpenAPI::toJsonValue(m_bot_alias_target));
    }
    return obj;
}

OAIStartTestExecution_request_target_botAliasTarget OAITestExecutionSummary_target::getBotAliasTarget() const {
    return m_bot_alias_target;
}
void OAITestExecutionSummary_target::setBotAliasTarget(const OAIStartTestExecution_request_target_botAliasTarget &bot_alias_target) {
    m_bot_alias_target = bot_alias_target;
    m_bot_alias_target_isSet = true;
}

bool OAITestExecutionSummary_target::is_bot_alias_target_Set() const{
    return m_bot_alias_target_isSet;
}

bool OAITestExecutionSummary_target::is_bot_alias_target_Valid() const{
    return m_bot_alias_target_isValid;
}

bool OAITestExecutionSummary_target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_alias_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestExecutionSummary_target::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
