/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchAssociatedTranscriptsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchAssociatedTranscriptsRequest::OAISearchAssociatedTranscriptsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchAssociatedTranscriptsRequest::OAISearchAssociatedTranscriptsRequest() {
    this->initializeModel();
}

OAISearchAssociatedTranscriptsRequest::~OAISearchAssociatedTranscriptsRequest() {}

void OAISearchAssociatedTranscriptsRequest::initializeModel() {

    m_search_order_isSet = false;
    m_search_order_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_index_isSet = false;
    m_next_index_isValid = false;
}

void OAISearchAssociatedTranscriptsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchAssociatedTranscriptsRequest::fromJsonObject(QJsonObject json) {

    m_search_order_isValid = ::OpenAPI::fromJsonValue(m_search_order, json[QString("searchOrder")]);
    m_search_order_isSet = !json[QString("searchOrder")].isNull() && m_search_order_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_index_isValid = ::OpenAPI::fromJsonValue(m_next_index, json[QString("nextIndex")]);
    m_next_index_isSet = !json[QString("nextIndex")].isNull() && m_next_index_isValid;
}

QString OAISearchAssociatedTranscriptsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchAssociatedTranscriptsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_search_order.isSet()) {
        obj.insert(QString("searchOrder"), ::OpenAPI::toJsonValue(m_search_order));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_index_isSet) {
        obj.insert(QString("nextIndex"), ::OpenAPI::toJsonValue(m_next_index));
    }
    return obj;
}

OAISearchOrder OAISearchAssociatedTranscriptsRequest::getSearchOrder() const {
    return m_search_order;
}
void OAISearchAssociatedTranscriptsRequest::setSearchOrder(const OAISearchOrder &search_order) {
    m_search_order = search_order;
    m_search_order_isSet = true;
}

bool OAISearchAssociatedTranscriptsRequest::is_search_order_Set() const{
    return m_search_order_isSet;
}

bool OAISearchAssociatedTranscriptsRequest::is_search_order_Valid() const{
    return m_search_order_isValid;
}

QList OAISearchAssociatedTranscriptsRequest::getFilters() const {
    return m_filters;
}
void OAISearchAssociatedTranscriptsRequest::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAISearchAssociatedTranscriptsRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAISearchAssociatedTranscriptsRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAISearchAssociatedTranscriptsRequest::getMaxResults() const {
    return m_max_results;
}
void OAISearchAssociatedTranscriptsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchAssociatedTranscriptsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchAssociatedTranscriptsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

qint32 OAISearchAssociatedTranscriptsRequest::getNextIndex() const {
    return m_next_index;
}
void OAISearchAssociatedTranscriptsRequest::setNextIndex(const qint32 &next_index) {
    m_next_index = next_index;
    m_next_index_isSet = true;
}

bool OAISearchAssociatedTranscriptsRequest::is_next_index_Set() const{
    return m_next_index_isSet;
}

bool OAISearchAssociatedTranscriptsRequest::is_next_index_Valid() const{
    return m_next_index_isValid;
}

bool OAISearchAssociatedTranscriptsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_search_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchAssociatedTranscriptsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filters_isValid && true;
}

} // namespace OpenAPI
