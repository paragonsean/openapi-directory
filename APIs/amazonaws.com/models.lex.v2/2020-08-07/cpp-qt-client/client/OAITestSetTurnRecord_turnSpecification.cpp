/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestSetTurnRecord_turnSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestSetTurnRecord_turnSpecification::OAITestSetTurnRecord_turnSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestSetTurnRecord_turnSpecification::OAITestSetTurnRecord_turnSpecification() {
    this->initializeModel();
}

OAITestSetTurnRecord_turnSpecification::~OAITestSetTurnRecord_turnSpecification() {}

void OAITestSetTurnRecord_turnSpecification::initializeModel() {

    m_agent_turn_isSet = false;
    m_agent_turn_isValid = false;

    m_user_turn_isSet = false;
    m_user_turn_isValid = false;
}

void OAITestSetTurnRecord_turnSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestSetTurnRecord_turnSpecification::fromJsonObject(QJsonObject json) {

    m_agent_turn_isValid = ::OpenAPI::fromJsonValue(m_agent_turn, json[QString("agentTurn")]);
    m_agent_turn_isSet = !json[QString("agentTurn")].isNull() && m_agent_turn_isValid;

    m_user_turn_isValid = ::OpenAPI::fromJsonValue(m_user_turn, json[QString("userTurn")]);
    m_user_turn_isSet = !json[QString("userTurn")].isNull() && m_user_turn_isValid;
}

QString OAITestSetTurnRecord_turnSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestSetTurnRecord_turnSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_turn.isSet()) {
        obj.insert(QString("agentTurn"), ::OpenAPI::toJsonValue(m_agent_turn));
    }
    if (m_user_turn.isSet()) {
        obj.insert(QString("userTurn"), ::OpenAPI::toJsonValue(m_user_turn));
    }
    return obj;
}

OAITurnSpecification_agentTurn OAITestSetTurnRecord_turnSpecification::getAgentTurn() const {
    return m_agent_turn;
}
void OAITestSetTurnRecord_turnSpecification::setAgentTurn(const OAITurnSpecification_agentTurn &agent_turn) {
    m_agent_turn = agent_turn;
    m_agent_turn_isSet = true;
}

bool OAITestSetTurnRecord_turnSpecification::is_agent_turn_Set() const{
    return m_agent_turn_isSet;
}

bool OAITestSetTurnRecord_turnSpecification::is_agent_turn_Valid() const{
    return m_agent_turn_isValid;
}

OAITurnSpecification_userTurn OAITestSetTurnRecord_turnSpecification::getUserTurn() const {
    return m_user_turn;
}
void OAITestSetTurnRecord_turnSpecification::setUserTurn(const OAITurnSpecification_userTurn &user_turn) {
    m_user_turn = user_turn;
    m_user_turn_isSet = true;
}

bool OAITestSetTurnRecord_turnSpecification::is_user_turn_Set() const{
    return m_user_turn_isSet;
}

bool OAITestSetTurnRecord_turnSpecification::is_user_turn_Valid() const{
    return m_user_turn_isValid;
}

bool OAITestSetTurnRecord_turnSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_turn.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_turn.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestSetTurnRecord_turnSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
