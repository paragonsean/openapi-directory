/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyticsSessionFilterName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyticsSessionFilterName::OAIAnalyticsSessionFilterName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyticsSessionFilterName::OAIAnalyticsSessionFilterName() {
    this->initializeModel();
}

OAIAnalyticsSessionFilterName::~OAIAnalyticsSessionFilterName() {}

void OAIAnalyticsSessionFilterName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAnalyticsSessionFilterName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAnalyticsSessionFilterName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BotAliasId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsSessionFilterName::BOTALIASID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BotVersion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsSessionFilterName::BOTVERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LocaleId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsSessionFilterName::LOCALEID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Modality", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsSessionFilterName::MODALITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Channel", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsSessionFilterName::CHANNEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Duration", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsSessionFilterName::DURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ConversationEndState", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsSessionFilterName::CONVERSATIONENDSTATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SessionId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsSessionFilterName::SESSIONID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OriginatingRequestId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsSessionFilterName::ORIGINATINGREQUESTID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IntentPath", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsSessionFilterName::INTENTPATH;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAnalyticsSessionFilterName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAnalyticsSessionFilterName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAnalyticsSessionFilterName::BOTALIASID:
            val = "BotAliasId";
            break;
        case eOAIAnalyticsSessionFilterName::BOTVERSION:
            val = "BotVersion";
            break;
        case eOAIAnalyticsSessionFilterName::LOCALEID:
            val = "LocaleId";
            break;
        case eOAIAnalyticsSessionFilterName::MODALITY:
            val = "Modality";
            break;
        case eOAIAnalyticsSessionFilterName::CHANNEL:
            val = "Channel";
            break;
        case eOAIAnalyticsSessionFilterName::DURATION:
            val = "Duration";
            break;
        case eOAIAnalyticsSessionFilterName::CONVERSATIONENDSTATE:
            val = "ConversationEndState";
            break;
        case eOAIAnalyticsSessionFilterName::SESSIONID:
            val = "SessionId";
            break;
        case eOAIAnalyticsSessionFilterName::ORIGINATINGREQUESTID:
            val = "OriginatingRequestId";
            break;
        case eOAIAnalyticsSessionFilterName::INTENTPATH:
            val = "IntentPath";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAnalyticsSessionFilterName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAnalyticsSessionFilterName::eOAIAnalyticsSessionFilterName OAIAnalyticsSessionFilterName::getValue() const {
    return m_value;
}

void OAIAnalyticsSessionFilterName::setValue(const OAIAnalyticsSessionFilterName::eOAIAnalyticsSessionFilterName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAnalyticsSessionFilterName::isSet() const {
    
    return m_value_isSet;
}

bool OAIAnalyticsSessionFilterName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
