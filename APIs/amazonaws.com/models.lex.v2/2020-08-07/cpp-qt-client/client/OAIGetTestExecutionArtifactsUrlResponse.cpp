/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTestExecutionArtifactsUrlResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTestExecutionArtifactsUrlResponse::OAIGetTestExecutionArtifactsUrlResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTestExecutionArtifactsUrlResponse::OAIGetTestExecutionArtifactsUrlResponse() {
    this->initializeModel();
}

OAIGetTestExecutionArtifactsUrlResponse::~OAIGetTestExecutionArtifactsUrlResponse() {}

void OAIGetTestExecutionArtifactsUrlResponse::initializeModel() {

    m_test_execution_id_isSet = false;
    m_test_execution_id_isValid = false;

    m_download_artifacts_url_isSet = false;
    m_download_artifacts_url_isValid = false;
}

void OAIGetTestExecutionArtifactsUrlResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTestExecutionArtifactsUrlResponse::fromJsonObject(QJsonObject json) {

    m_test_execution_id_isValid = ::OpenAPI::fromJsonValue(m_test_execution_id, json[QString("testExecutionId")]);
    m_test_execution_id_isSet = !json[QString("testExecutionId")].isNull() && m_test_execution_id_isValid;

    m_download_artifacts_url_isValid = ::OpenAPI::fromJsonValue(m_download_artifacts_url, json[QString("downloadArtifactsUrl")]);
    m_download_artifacts_url_isSet = !json[QString("downloadArtifactsUrl")].isNull() && m_download_artifacts_url_isValid;
}

QString OAIGetTestExecutionArtifactsUrlResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTestExecutionArtifactsUrlResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_test_execution_id_isSet) {
        obj.insert(QString("testExecutionId"), ::OpenAPI::toJsonValue(m_test_execution_id));
    }
    if (m_download_artifacts_url_isSet) {
        obj.insert(QString("downloadArtifactsUrl"), ::OpenAPI::toJsonValue(m_download_artifacts_url));
    }
    return obj;
}

QString OAIGetTestExecutionArtifactsUrlResponse::getTestExecutionId() const {
    return m_test_execution_id;
}
void OAIGetTestExecutionArtifactsUrlResponse::setTestExecutionId(const QString &test_execution_id) {
    m_test_execution_id = test_execution_id;
    m_test_execution_id_isSet = true;
}

bool OAIGetTestExecutionArtifactsUrlResponse::is_test_execution_id_Set() const{
    return m_test_execution_id_isSet;
}

bool OAIGetTestExecutionArtifactsUrlResponse::is_test_execution_id_Valid() const{
    return m_test_execution_id_isValid;
}

QString OAIGetTestExecutionArtifactsUrlResponse::getDownloadArtifactsUrl() const {
    return m_download_artifacts_url;
}
void OAIGetTestExecutionArtifactsUrlResponse::setDownloadArtifactsUrl(const QString &download_artifacts_url) {
    m_download_artifacts_url = download_artifacts_url;
    m_download_artifacts_url_isSet = true;
}

bool OAIGetTestExecutionArtifactsUrlResponse::is_download_artifacts_url_Set() const{
    return m_download_artifacts_url_isSet;
}

bool OAIGetTestExecutionArtifactsUrlResponse::is_download_artifacts_url_Valid() const{
    return m_download_artifacts_url_isValid;
}

bool OAIGetTestExecutionArtifactsUrlResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_test_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_artifacts_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTestExecutionArtifactsUrlResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
