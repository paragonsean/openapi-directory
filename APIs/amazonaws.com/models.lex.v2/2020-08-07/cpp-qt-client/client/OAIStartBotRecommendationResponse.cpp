/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartBotRecommendationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartBotRecommendationResponse::OAIStartBotRecommendationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartBotRecommendationResponse::OAIStartBotRecommendationResponse() {
    this->initializeModel();
}

OAIStartBotRecommendationResponse::~OAIStartBotRecommendationResponse() {}

void OAIStartBotRecommendationResponse::initializeModel() {

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_locale_id_isSet = false;
    m_locale_id_isValid = false;

    m_bot_recommendation_status_isSet = false;
    m_bot_recommendation_status_isValid = false;

    m_bot_recommendation_id_isSet = false;
    m_bot_recommendation_id_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_transcript_source_setting_isSet = false;
    m_transcript_source_setting_isValid = false;

    m_encryption_setting_isSet = false;
    m_encryption_setting_isValid = false;
}

void OAIStartBotRecommendationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartBotRecommendationResponse::fromJsonObject(QJsonObject json) {

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("botId")]);
    m_bot_id_isSet = !json[QString("botId")].isNull() && m_bot_id_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_locale_id_isValid = ::OpenAPI::fromJsonValue(m_locale_id, json[QString("localeId")]);
    m_locale_id_isSet = !json[QString("localeId")].isNull() && m_locale_id_isValid;

    m_bot_recommendation_status_isValid = ::OpenAPI::fromJsonValue(m_bot_recommendation_status, json[QString("botRecommendationStatus")]);
    m_bot_recommendation_status_isSet = !json[QString("botRecommendationStatus")].isNull() && m_bot_recommendation_status_isValid;

    m_bot_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_bot_recommendation_id, json[QString("botRecommendationId")]);
    m_bot_recommendation_id_isSet = !json[QString("botRecommendationId")].isNull() && m_bot_recommendation_id_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_transcript_source_setting_isValid = ::OpenAPI::fromJsonValue(m_transcript_source_setting, json[QString("transcriptSourceSetting")]);
    m_transcript_source_setting_isSet = !json[QString("transcriptSourceSetting")].isNull() && m_transcript_source_setting_isValid;

    m_encryption_setting_isValid = ::OpenAPI::fromJsonValue(m_encryption_setting, json[QString("encryptionSetting")]);
    m_encryption_setting_isSet = !json[QString("encryptionSetting")].isNull() && m_encryption_setting_isValid;
}

QString OAIStartBotRecommendationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartBotRecommendationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_id_isSet) {
        obj.insert(QString("botId"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_locale_id_isSet) {
        obj.insert(QString("localeId"), ::OpenAPI::toJsonValue(m_locale_id));
    }
    if (m_bot_recommendation_status.isSet()) {
        obj.insert(QString("botRecommendationStatus"), ::OpenAPI::toJsonValue(m_bot_recommendation_status));
    }
    if (m_bot_recommendation_id_isSet) {
        obj.insert(QString("botRecommendationId"), ::OpenAPI::toJsonValue(m_bot_recommendation_id));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_transcript_source_setting.isSet()) {
        obj.insert(QString("transcriptSourceSetting"), ::OpenAPI::toJsonValue(m_transcript_source_setting));
    }
    if (m_encryption_setting.isSet()) {
        obj.insert(QString("encryptionSetting"), ::OpenAPI::toJsonValue(m_encryption_setting));
    }
    return obj;
}

QString OAIStartBotRecommendationResponse::getBotId() const {
    return m_bot_id;
}
void OAIStartBotRecommendationResponse::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAIStartBotRecommendationResponse::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAIStartBotRecommendationResponse::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

QString OAIStartBotRecommendationResponse::getBotVersion() const {
    return m_bot_version;
}
void OAIStartBotRecommendationResponse::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAIStartBotRecommendationResponse::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAIStartBotRecommendationResponse::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QString OAIStartBotRecommendationResponse::getLocaleId() const {
    return m_locale_id;
}
void OAIStartBotRecommendationResponse::setLocaleId(const QString &locale_id) {
    m_locale_id = locale_id;
    m_locale_id_isSet = true;
}

bool OAIStartBotRecommendationResponse::is_locale_id_Set() const{
    return m_locale_id_isSet;
}

bool OAIStartBotRecommendationResponse::is_locale_id_Valid() const{
    return m_locale_id_isValid;
}

OAIBotRecommendationStatus OAIStartBotRecommendationResponse::getBotRecommendationStatus() const {
    return m_bot_recommendation_status;
}
void OAIStartBotRecommendationResponse::setBotRecommendationStatus(const OAIBotRecommendationStatus &bot_recommendation_status) {
    m_bot_recommendation_status = bot_recommendation_status;
    m_bot_recommendation_status_isSet = true;
}

bool OAIStartBotRecommendationResponse::is_bot_recommendation_status_Set() const{
    return m_bot_recommendation_status_isSet;
}

bool OAIStartBotRecommendationResponse::is_bot_recommendation_status_Valid() const{
    return m_bot_recommendation_status_isValid;
}

QString OAIStartBotRecommendationResponse::getBotRecommendationId() const {
    return m_bot_recommendation_id;
}
void OAIStartBotRecommendationResponse::setBotRecommendationId(const QString &bot_recommendation_id) {
    m_bot_recommendation_id = bot_recommendation_id;
    m_bot_recommendation_id_isSet = true;
}

bool OAIStartBotRecommendationResponse::is_bot_recommendation_id_Set() const{
    return m_bot_recommendation_id_isSet;
}

bool OAIStartBotRecommendationResponse::is_bot_recommendation_id_Valid() const{
    return m_bot_recommendation_id_isValid;
}

QDateTime OAIStartBotRecommendationResponse::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIStartBotRecommendationResponse::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIStartBotRecommendationResponse::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIStartBotRecommendationResponse::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

OAIDescribeBotRecommendationResponse_transcriptSourceSetting OAIStartBotRecommendationResponse::getTranscriptSourceSetting() const {
    return m_transcript_source_setting;
}
void OAIStartBotRecommendationResponse::setTranscriptSourceSetting(const OAIDescribeBotRecommendationResponse_transcriptSourceSetting &transcript_source_setting) {
    m_transcript_source_setting = transcript_source_setting;
    m_transcript_source_setting_isSet = true;
}

bool OAIStartBotRecommendationResponse::is_transcript_source_setting_Set() const{
    return m_transcript_source_setting_isSet;
}

bool OAIStartBotRecommendationResponse::is_transcript_source_setting_Valid() const{
    return m_transcript_source_setting_isValid;
}

OAIDescribeBotRecommendationResponse_encryptionSetting OAIStartBotRecommendationResponse::getEncryptionSetting() const {
    return m_encryption_setting;
}
void OAIStartBotRecommendationResponse::setEncryptionSetting(const OAIDescribeBotRecommendationResponse_encryptionSetting &encryption_setting) {
    m_encryption_setting = encryption_setting;
    m_encryption_setting_isSet = true;
}

bool OAIStartBotRecommendationResponse::is_encryption_setting_Set() const{
    return m_encryption_setting_isSet;
}

bool OAIStartBotRecommendationResponse::is_encryption_setting_Valid() const{
    return m_encryption_setting_isValid;
}

bool OAIStartBotRecommendationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_recommendation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript_source_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartBotRecommendationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
