/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalBranch_condition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalBranch_condition::OAIConditionalBranch_condition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalBranch_condition::OAIConditionalBranch_condition() {
    this->initializeModel();
}

OAIConditionalBranch_condition::~OAIConditionalBranch_condition() {}

void OAIConditionalBranch_condition::initializeModel() {

    m_expression_string_isSet = false;
    m_expression_string_isValid = false;
}

void OAIConditionalBranch_condition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalBranch_condition::fromJsonObject(QJsonObject json) {

    m_expression_string_isValid = ::OpenAPI::fromJsonValue(m_expression_string, json[QString("expressionString")]);
    m_expression_string_isSet = !json[QString("expressionString")].isNull() && m_expression_string_isValid;
}

QString OAIConditionalBranch_condition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalBranch_condition::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_string_isSet) {
        obj.insert(QString("expressionString"), ::OpenAPI::toJsonValue(m_expression_string));
    }
    return obj;
}

QString OAIConditionalBranch_condition::getExpressionString() const {
    return m_expression_string;
}
void OAIConditionalBranch_condition::setExpressionString(const QString &expression_string) {
    m_expression_string = expression_string;
    m_expression_string_isSet = true;
}

bool OAIConditionalBranch_condition::is_expression_string_Set() const{
    return m_expression_string_isSet;
}

bool OAIConditionalBranch_condition::is_expression_string_Valid() const{
    return m_expression_string_isValid;
}

bool OAIConditionalBranch_condition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalBranch_condition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_string_isValid && true;
}

} // namespace OpenAPI
