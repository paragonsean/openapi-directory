/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserTurnInputSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserTurnInputSpecification::OAIUserTurnInputSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserTurnInputSpecification::OAIUserTurnInputSpecification() {
    this->initializeModel();
}

OAIUserTurnInputSpecification::~OAIUserTurnInputSpecification() {}

void OAIUserTurnInputSpecification::initializeModel() {

    m_utterance_input_isSet = false;
    m_utterance_input_isValid = false;

    m_request_attributes_isSet = false;
    m_request_attributes_isValid = false;

    m_session_state_isSet = false;
    m_session_state_isValid = false;
}

void OAIUserTurnInputSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserTurnInputSpecification::fromJsonObject(QJsonObject json) {

    m_utterance_input_isValid = ::OpenAPI::fromJsonValue(m_utterance_input, json[QString("utteranceInput")]);
    m_utterance_input_isSet = !json[QString("utteranceInput")].isNull() && m_utterance_input_isValid;

    m_request_attributes_isValid = ::OpenAPI::fromJsonValue(m_request_attributes, json[QString("requestAttributes")]);
    m_request_attributes_isSet = !json[QString("requestAttributes")].isNull() && m_request_attributes_isValid;

    m_session_state_isValid = ::OpenAPI::fromJsonValue(m_session_state, json[QString("sessionState")]);
    m_session_state_isSet = !json[QString("sessionState")].isNull() && m_session_state_isValid;
}

QString OAIUserTurnInputSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserTurnInputSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_utterance_input.isSet()) {
        obj.insert(QString("utteranceInput"), ::OpenAPI::toJsonValue(m_utterance_input));
    }
    if (m_request_attributes.isSet()) {
        obj.insert(QString("requestAttributes"), ::OpenAPI::toJsonValue(m_request_attributes));
    }
    if (m_session_state.isSet()) {
        obj.insert(QString("sessionState"), ::OpenAPI::toJsonValue(m_session_state));
    }
    return obj;
}

OAIUserTurnInputSpecification_utteranceInput OAIUserTurnInputSpecification::getUtteranceInput() const {
    return m_utterance_input;
}
void OAIUserTurnInputSpecification::setUtteranceInput(const OAIUserTurnInputSpecification_utteranceInput &utterance_input) {
    m_utterance_input = utterance_input;
    m_utterance_input_isSet = true;
}

bool OAIUserTurnInputSpecification::is_utterance_input_Set() const{
    return m_utterance_input_isSet;
}

bool OAIUserTurnInputSpecification::is_utterance_input_Valid() const{
    return m_utterance_input_isValid;
}

QMap OAIUserTurnInputSpecification::getRequestAttributes() const {
    return m_request_attributes;
}
void OAIUserTurnInputSpecification::setRequestAttributes(const QMap &request_attributes) {
    m_request_attributes = request_attributes;
    m_request_attributes_isSet = true;
}

bool OAIUserTurnInputSpecification::is_request_attributes_Set() const{
    return m_request_attributes_isSet;
}

bool OAIUserTurnInputSpecification::is_request_attributes_Valid() const{
    return m_request_attributes_isValid;
}

OAIUserTurnInputSpecification_sessionState OAIUserTurnInputSpecification::getSessionState() const {
    return m_session_state;
}
void OAIUserTurnInputSpecification::setSessionState(const OAIUserTurnInputSpecification_sessionState &session_state) {
    m_session_state = session_state;
    m_session_state_isSet = true;
}

bool OAIUserTurnInputSpecification::is_session_state_Set() const{
    return m_session_state_isSet;
}

bool OAIUserTurnInputSpecification::is_session_state_Valid() const{
    return m_session_state_isValid;
}

bool OAIUserTurnInputSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_utterance_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserTurnInputSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_utterance_input_isValid && true;
}

} // namespace OpenAPI
