/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUtteranceLevelTestResultItem_turnResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUtteranceLevelTestResultItem_turnResult::OAIUtteranceLevelTestResultItem_turnResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUtteranceLevelTestResultItem_turnResult::OAIUtteranceLevelTestResultItem_turnResult() {
    this->initializeModel();
}

OAIUtteranceLevelTestResultItem_turnResult::~OAIUtteranceLevelTestResultItem_turnResult() {}

void OAIUtteranceLevelTestResultItem_turnResult::initializeModel() {

    m_agent_isSet = false;
    m_agent_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIUtteranceLevelTestResultItem_turnResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUtteranceLevelTestResultItem_turnResult::fromJsonObject(QJsonObject json) {

    m_agent_isValid = ::OpenAPI::fromJsonValue(m_agent, json[QString("agent")]);
    m_agent_isSet = !json[QString("agent")].isNull() && m_agent_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIUtteranceLevelTestResultItem_turnResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUtteranceLevelTestResultItem_turnResult::asJsonObject() const {
    QJsonObject obj;
    if (m_agent.isSet()) {
        obj.insert(QString("agent"), ::OpenAPI::toJsonValue(m_agent));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAITestSetTurnResult_agent OAIUtteranceLevelTestResultItem_turnResult::getAgent() const {
    return m_agent;
}
void OAIUtteranceLevelTestResultItem_turnResult::setAgent(const OAITestSetTurnResult_agent &agent) {
    m_agent = agent;
    m_agent_isSet = true;
}

bool OAIUtteranceLevelTestResultItem_turnResult::is_agent_Set() const{
    return m_agent_isSet;
}

bool OAIUtteranceLevelTestResultItem_turnResult::is_agent_Valid() const{
    return m_agent_isValid;
}

OAITestSetTurnResult_user OAIUtteranceLevelTestResultItem_turnResult::getUser() const {
    return m_user;
}
void OAIUtteranceLevelTestResultItem_turnResult::setUser(const OAITestSetTurnResult_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUtteranceLevelTestResultItem_turnResult::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUtteranceLevelTestResultItem_turnResult::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIUtteranceLevelTestResultItem_turnResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUtteranceLevelTestResultItem_turnResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
