/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSlotRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSlotRequest::OAICreateSlotRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSlotRequest::OAICreateSlotRequest() {
    this->initializeModel();
}

OAICreateSlotRequest::~OAICreateSlotRequest() {}

void OAICreateSlotRequest::initializeModel() {

    m_slot_name_isSet = false;
    m_slot_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_slot_type_id_isSet = false;
    m_slot_type_id_isValid = false;

    m_value_elicitation_setting_isSet = false;
    m_value_elicitation_setting_isValid = false;

    m_obfuscation_setting_isSet = false;
    m_obfuscation_setting_isValid = false;

    m_multiple_values_setting_isSet = false;
    m_multiple_values_setting_isValid = false;

    m_sub_slot_setting_isSet = false;
    m_sub_slot_setting_isValid = false;
}

void OAICreateSlotRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSlotRequest::fromJsonObject(QJsonObject json) {

    m_slot_name_isValid = ::OpenAPI::fromJsonValue(m_slot_name, json[QString("slotName")]);
    m_slot_name_isSet = !json[QString("slotName")].isNull() && m_slot_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_slot_type_id_isValid = ::OpenAPI::fromJsonValue(m_slot_type_id, json[QString("slotTypeId")]);
    m_slot_type_id_isSet = !json[QString("slotTypeId")].isNull() && m_slot_type_id_isValid;

    m_value_elicitation_setting_isValid = ::OpenAPI::fromJsonValue(m_value_elicitation_setting, json[QString("valueElicitationSetting")]);
    m_value_elicitation_setting_isSet = !json[QString("valueElicitationSetting")].isNull() && m_value_elicitation_setting_isValid;

    m_obfuscation_setting_isValid = ::OpenAPI::fromJsonValue(m_obfuscation_setting, json[QString("obfuscationSetting")]);
    m_obfuscation_setting_isSet = !json[QString("obfuscationSetting")].isNull() && m_obfuscation_setting_isValid;

    m_multiple_values_setting_isValid = ::OpenAPI::fromJsonValue(m_multiple_values_setting, json[QString("multipleValuesSetting")]);
    m_multiple_values_setting_isSet = !json[QString("multipleValuesSetting")].isNull() && m_multiple_values_setting_isValid;

    m_sub_slot_setting_isValid = ::OpenAPI::fromJsonValue(m_sub_slot_setting, json[QString("subSlotSetting")]);
    m_sub_slot_setting_isSet = !json[QString("subSlotSetting")].isNull() && m_sub_slot_setting_isValid;
}

QString OAICreateSlotRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSlotRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_slot_name_isSet) {
        obj.insert(QString("slotName"), ::OpenAPI::toJsonValue(m_slot_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_slot_type_id_isSet) {
        obj.insert(QString("slotTypeId"), ::OpenAPI::toJsonValue(m_slot_type_id));
    }
    if (m_value_elicitation_setting.isSet()) {
        obj.insert(QString("valueElicitationSetting"), ::OpenAPI::toJsonValue(m_value_elicitation_setting));
    }
    if (m_obfuscation_setting.isSet()) {
        obj.insert(QString("obfuscationSetting"), ::OpenAPI::toJsonValue(m_obfuscation_setting));
    }
    if (m_multiple_values_setting.isSet()) {
        obj.insert(QString("multipleValuesSetting"), ::OpenAPI::toJsonValue(m_multiple_values_setting));
    }
    if (m_sub_slot_setting.isSet()) {
        obj.insert(QString("subSlotSetting"), ::OpenAPI::toJsonValue(m_sub_slot_setting));
    }
    return obj;
}

QString OAICreateSlotRequest::getSlotName() const {
    return m_slot_name;
}
void OAICreateSlotRequest::setSlotName(const QString &slot_name) {
    m_slot_name = slot_name;
    m_slot_name_isSet = true;
}

bool OAICreateSlotRequest::is_slot_name_Set() const{
    return m_slot_name_isSet;
}

bool OAICreateSlotRequest::is_slot_name_Valid() const{
    return m_slot_name_isValid;
}

QString OAICreateSlotRequest::getDescription() const {
    return m_description;
}
void OAICreateSlotRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSlotRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSlotRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateSlotRequest::getSlotTypeId() const {
    return m_slot_type_id;
}
void OAICreateSlotRequest::setSlotTypeId(const QString &slot_type_id) {
    m_slot_type_id = slot_type_id;
    m_slot_type_id_isSet = true;
}

bool OAICreateSlotRequest::is_slot_type_id_Set() const{
    return m_slot_type_id_isSet;
}

bool OAICreateSlotRequest::is_slot_type_id_Valid() const{
    return m_slot_type_id_isValid;
}

OAICreateSlotRequest_valueElicitationSetting OAICreateSlotRequest::getValueElicitationSetting() const {
    return m_value_elicitation_setting;
}
void OAICreateSlotRequest::setValueElicitationSetting(const OAICreateSlotRequest_valueElicitationSetting &value_elicitation_setting) {
    m_value_elicitation_setting = value_elicitation_setting;
    m_value_elicitation_setting_isSet = true;
}

bool OAICreateSlotRequest::is_value_elicitation_setting_Set() const{
    return m_value_elicitation_setting_isSet;
}

bool OAICreateSlotRequest::is_value_elicitation_setting_Valid() const{
    return m_value_elicitation_setting_isValid;
}

OAICreateSlotRequest_obfuscationSetting OAICreateSlotRequest::getObfuscationSetting() const {
    return m_obfuscation_setting;
}
void OAICreateSlotRequest::setObfuscationSetting(const OAICreateSlotRequest_obfuscationSetting &obfuscation_setting) {
    m_obfuscation_setting = obfuscation_setting;
    m_obfuscation_setting_isSet = true;
}

bool OAICreateSlotRequest::is_obfuscation_setting_Set() const{
    return m_obfuscation_setting_isSet;
}

bool OAICreateSlotRequest::is_obfuscation_setting_Valid() const{
    return m_obfuscation_setting_isValid;
}

OAICreateSlotRequest_multipleValuesSetting OAICreateSlotRequest::getMultipleValuesSetting() const {
    return m_multiple_values_setting;
}
void OAICreateSlotRequest::setMultipleValuesSetting(const OAICreateSlotRequest_multipleValuesSetting &multiple_values_setting) {
    m_multiple_values_setting = multiple_values_setting;
    m_multiple_values_setting_isSet = true;
}

bool OAICreateSlotRequest::is_multiple_values_setting_Set() const{
    return m_multiple_values_setting_isSet;
}

bool OAICreateSlotRequest::is_multiple_values_setting_Valid() const{
    return m_multiple_values_setting_isValid;
}

OAICreateSlotResponse_subSlotSetting OAICreateSlotRequest::getSubSlotSetting() const {
    return m_sub_slot_setting;
}
void OAICreateSlotRequest::setSubSlotSetting(const OAICreateSlotResponse_subSlotSetting &sub_slot_setting) {
    m_sub_slot_setting = sub_slot_setting;
    m_sub_slot_setting_isSet = true;
}

bool OAICreateSlotRequest::is_sub_slot_setting_Set() const{
    return m_sub_slot_setting_isSet;
}

bool OAICreateSlotRequest::is_sub_slot_setting_Valid() const{
    return m_sub_slot_setting_isValid;
}

bool OAICreateSlotRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_slot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_elicitation_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_obfuscation_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_values_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_slot_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSlotRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_slot_name_isValid && m_value_elicitation_setting_isValid && true;
}

} // namespace OpenAPI
