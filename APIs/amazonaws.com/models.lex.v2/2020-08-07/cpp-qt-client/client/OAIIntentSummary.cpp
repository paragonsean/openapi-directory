/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntentSummary::OAIIntentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntentSummary::OAIIntentSummary() {
    this->initializeModel();
}

OAIIntentSummary::~OAIIntentSummary() {}

void OAIIntentSummary::initializeModel() {

    m_intent_id_isSet = false;
    m_intent_id_isValid = false;

    m_intent_name_isSet = false;
    m_intent_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_parent_intent_signature_isSet = false;
    m_parent_intent_signature_isValid = false;

    m_input_contexts_isSet = false;
    m_input_contexts_isValid = false;

    m_output_contexts_isSet = false;
    m_output_contexts_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;
}

void OAIIntentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntentSummary::fromJsonObject(QJsonObject json) {

    m_intent_id_isValid = ::OpenAPI::fromJsonValue(m_intent_id, json[QString("intentId")]);
    m_intent_id_isSet = !json[QString("intentId")].isNull() && m_intent_id_isValid;

    m_intent_name_isValid = ::OpenAPI::fromJsonValue(m_intent_name, json[QString("intentName")]);
    m_intent_name_isSet = !json[QString("intentName")].isNull() && m_intent_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_parent_intent_signature_isValid = ::OpenAPI::fromJsonValue(m_parent_intent_signature, json[QString("parentIntentSignature")]);
    m_parent_intent_signature_isSet = !json[QString("parentIntentSignature")].isNull() && m_parent_intent_signature_isValid;

    m_input_contexts_isValid = ::OpenAPI::fromJsonValue(m_input_contexts, json[QString("inputContexts")]);
    m_input_contexts_isSet = !json[QString("inputContexts")].isNull() && m_input_contexts_isValid;

    m_output_contexts_isValid = ::OpenAPI::fromJsonValue(m_output_contexts, json[QString("outputContexts")]);
    m_output_contexts_isSet = !json[QString("outputContexts")].isNull() && m_output_contexts_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;
}

QString OAIIntentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_intent_id_isSet) {
        obj.insert(QString("intentId"), ::OpenAPI::toJsonValue(m_intent_id));
    }
    if (m_intent_name_isSet) {
        obj.insert(QString("intentName"), ::OpenAPI::toJsonValue(m_intent_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_parent_intent_signature_isSet) {
        obj.insert(QString("parentIntentSignature"), ::OpenAPI::toJsonValue(m_parent_intent_signature));
    }
    if (m_input_contexts.isSet()) {
        obj.insert(QString("inputContexts"), ::OpenAPI::toJsonValue(m_input_contexts));
    }
    if (m_output_contexts.isSet()) {
        obj.insert(QString("outputContexts"), ::OpenAPI::toJsonValue(m_output_contexts));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    return obj;
}

QString OAIIntentSummary::getIntentId() const {
    return m_intent_id;
}
void OAIIntentSummary::setIntentId(const QString &intent_id) {
    m_intent_id = intent_id;
    m_intent_id_isSet = true;
}

bool OAIIntentSummary::is_intent_id_Set() const{
    return m_intent_id_isSet;
}

bool OAIIntentSummary::is_intent_id_Valid() const{
    return m_intent_id_isValid;
}

QString OAIIntentSummary::getIntentName() const {
    return m_intent_name;
}
void OAIIntentSummary::setIntentName(const QString &intent_name) {
    m_intent_name = intent_name;
    m_intent_name_isSet = true;
}

bool OAIIntentSummary::is_intent_name_Set() const{
    return m_intent_name_isSet;
}

bool OAIIntentSummary::is_intent_name_Valid() const{
    return m_intent_name_isValid;
}

QString OAIIntentSummary::getDescription() const {
    return m_description;
}
void OAIIntentSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIntentSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIntentSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIIntentSummary::getParentIntentSignature() const {
    return m_parent_intent_signature;
}
void OAIIntentSummary::setParentIntentSignature(const QString &parent_intent_signature) {
    m_parent_intent_signature = parent_intent_signature;
    m_parent_intent_signature_isSet = true;
}

bool OAIIntentSummary::is_parent_intent_signature_Set() const{
    return m_parent_intent_signature_isSet;
}

bool OAIIntentSummary::is_parent_intent_signature_Valid() const{
    return m_parent_intent_signature_isValid;
}

QList OAIIntentSummary::getInputContexts() const {
    return m_input_contexts;
}
void OAIIntentSummary::setInputContexts(const QList &input_contexts) {
    m_input_contexts = input_contexts;
    m_input_contexts_isSet = true;
}

bool OAIIntentSummary::is_input_contexts_Set() const{
    return m_input_contexts_isSet;
}

bool OAIIntentSummary::is_input_contexts_Valid() const{
    return m_input_contexts_isValid;
}

QList OAIIntentSummary::getOutputContexts() const {
    return m_output_contexts;
}
void OAIIntentSummary::setOutputContexts(const QList &output_contexts) {
    m_output_contexts = output_contexts;
    m_output_contexts_isSet = true;
}

bool OAIIntentSummary::is_output_contexts_Set() const{
    return m_output_contexts_isSet;
}

bool OAIIntentSummary::is_output_contexts_Valid() const{
    return m_output_contexts_isValid;
}

QDateTime OAIIntentSummary::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIIntentSummary::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIIntentSummary::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIIntentSummary::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

bool OAIIntentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_intent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_intent_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_contexts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_contexts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
