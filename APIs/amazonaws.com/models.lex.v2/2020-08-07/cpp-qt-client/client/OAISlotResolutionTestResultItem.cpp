/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlotResolutionTestResultItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlotResolutionTestResultItem::OAISlotResolutionTestResultItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlotResolutionTestResultItem::OAISlotResolutionTestResultItem() {
    this->initializeModel();
}

OAISlotResolutionTestResultItem::~OAISlotResolutionTestResultItem() {}

void OAISlotResolutionTestResultItem::initializeModel() {

    m_slot_name_isSet = false;
    m_slot_name_isValid = false;

    m_result_counts_isSet = false;
    m_result_counts_isValid = false;
}

void OAISlotResolutionTestResultItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlotResolutionTestResultItem::fromJsonObject(QJsonObject json) {

    m_slot_name_isValid = ::OpenAPI::fromJsonValue(m_slot_name, json[QString("slotName")]);
    m_slot_name_isSet = !json[QString("slotName")].isNull() && m_slot_name_isValid;

    m_result_counts_isValid = ::OpenAPI::fromJsonValue(m_result_counts, json[QString("resultCounts")]);
    m_result_counts_isSet = !json[QString("resultCounts")].isNull() && m_result_counts_isValid;
}

QString OAISlotResolutionTestResultItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlotResolutionTestResultItem::asJsonObject() const {
    QJsonObject obj;
    if (m_slot_name_isSet) {
        obj.insert(QString("slotName"), ::OpenAPI::toJsonValue(m_slot_name));
    }
    if (m_result_counts.isSet()) {
        obj.insert(QString("resultCounts"), ::OpenAPI::toJsonValue(m_result_counts));
    }
    return obj;
}

QString OAISlotResolutionTestResultItem::getSlotName() const {
    return m_slot_name;
}
void OAISlotResolutionTestResultItem::setSlotName(const QString &slot_name) {
    m_slot_name = slot_name;
    m_slot_name_isSet = true;
}

bool OAISlotResolutionTestResultItem::is_slot_name_Set() const{
    return m_slot_name_isSet;
}

bool OAISlotResolutionTestResultItem::is_slot_name_Valid() const{
    return m_slot_name_isValid;
}

OAISlotResolutionTestResultItem_resultCounts OAISlotResolutionTestResultItem::getResultCounts() const {
    return m_result_counts;
}
void OAISlotResolutionTestResultItem::setResultCounts(const OAISlotResolutionTestResultItem_resultCounts &result_counts) {
    m_result_counts = result_counts;
    m_result_counts_isSet = true;
}

bool OAISlotResolutionTestResultItem::is_result_counts_Set() const{
    return m_result_counts_isSet;
}

bool OAISlotResolutionTestResultItem::is_result_counts_Valid() const{
    return m_result_counts_isValid;
}

bool OAISlotResolutionTestResultItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_slot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlotResolutionTestResultItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_slot_name_isValid && m_result_counts_isValid && true;
}

} // namespace OpenAPI
