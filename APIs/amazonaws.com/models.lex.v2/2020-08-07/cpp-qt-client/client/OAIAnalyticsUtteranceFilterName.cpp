/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyticsUtteranceFilterName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyticsUtteranceFilterName::OAIAnalyticsUtteranceFilterName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyticsUtteranceFilterName::OAIAnalyticsUtteranceFilterName() {
    this->initializeModel();
}

OAIAnalyticsUtteranceFilterName::~OAIAnalyticsUtteranceFilterName() {}

void OAIAnalyticsUtteranceFilterName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAnalyticsUtteranceFilterName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAnalyticsUtteranceFilterName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BotAliasId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsUtteranceFilterName::BOTALIASID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BotVersion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsUtteranceFilterName::BOTVERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LocaleId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsUtteranceFilterName::LOCALEID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Modality", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsUtteranceFilterName::MODALITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Channel", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsUtteranceFilterName::CHANNEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SessionId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsUtteranceFilterName::SESSIONID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OriginatingRequestId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsUtteranceFilterName::ORIGINATINGREQUESTID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UtteranceState", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsUtteranceFilterName::UTTERANCESTATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UtteranceText", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsUtteranceFilterName::UTTERANCETEXT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAnalyticsUtteranceFilterName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAnalyticsUtteranceFilterName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAnalyticsUtteranceFilterName::BOTALIASID:
            val = "BotAliasId";
            break;
        case eOAIAnalyticsUtteranceFilterName::BOTVERSION:
            val = "BotVersion";
            break;
        case eOAIAnalyticsUtteranceFilterName::LOCALEID:
            val = "LocaleId";
            break;
        case eOAIAnalyticsUtteranceFilterName::MODALITY:
            val = "Modality";
            break;
        case eOAIAnalyticsUtteranceFilterName::CHANNEL:
            val = "Channel";
            break;
        case eOAIAnalyticsUtteranceFilterName::SESSIONID:
            val = "SessionId";
            break;
        case eOAIAnalyticsUtteranceFilterName::ORIGINATINGREQUESTID:
            val = "OriginatingRequestId";
            break;
        case eOAIAnalyticsUtteranceFilterName::UTTERANCESTATE:
            val = "UtteranceState";
            break;
        case eOAIAnalyticsUtteranceFilterName::UTTERANCETEXT:
            val = "UtteranceText";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAnalyticsUtteranceFilterName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAnalyticsUtteranceFilterName::eOAIAnalyticsUtteranceFilterName OAIAnalyticsUtteranceFilterName::getValue() const {
    return m_value;
}

void OAIAnalyticsUtteranceFilterName::setValue(const OAIAnalyticsUtteranceFilterName::eOAIAnalyticsUtteranceFilterName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAnalyticsUtteranceFilterName::isSet() const {
    
    return m_value_isSet;
}

bool OAIAnalyticsUtteranceFilterName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
