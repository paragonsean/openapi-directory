/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateIntentRequest_intentClosingSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateIntentRequest_intentClosingSetting::OAIUpdateIntentRequest_intentClosingSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateIntentRequest_intentClosingSetting::OAIUpdateIntentRequest_intentClosingSetting() {
    this->initializeModel();
}

OAIUpdateIntentRequest_intentClosingSetting::~OAIUpdateIntentRequest_intentClosingSetting() {}

void OAIUpdateIntentRequest_intentClosingSetting::initializeModel() {

    m_closing_response_isSet = false;
    m_closing_response_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_next_step_isSet = false;
    m_next_step_isValid = false;

    m_conditional_isSet = false;
    m_conditional_isValid = false;
}

void OAIUpdateIntentRequest_intentClosingSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateIntentRequest_intentClosingSetting::fromJsonObject(QJsonObject json) {

    m_closing_response_isValid = ::OpenAPI::fromJsonValue(m_closing_response, json[QString("closingResponse")]);
    m_closing_response_isSet = !json[QString("closingResponse")].isNull() && m_closing_response_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_next_step_isValid = ::OpenAPI::fromJsonValue(m_next_step, json[QString("nextStep")]);
    m_next_step_isSet = !json[QString("nextStep")].isNull() && m_next_step_isValid;

    m_conditional_isValid = ::OpenAPI::fromJsonValue(m_conditional, json[QString("conditional")]);
    m_conditional_isSet = !json[QString("conditional")].isNull() && m_conditional_isValid;
}

QString OAIUpdateIntentRequest_intentClosingSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateIntentRequest_intentClosingSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_closing_response.isSet()) {
        obj.insert(QString("closingResponse"), ::OpenAPI::toJsonValue(m_closing_response));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_next_step.isSet()) {
        obj.insert(QString("nextStep"), ::OpenAPI::toJsonValue(m_next_step));
    }
    if (m_conditional.isSet()) {
        obj.insert(QString("conditional"), ::OpenAPI::toJsonValue(m_conditional));
    }
    return obj;
}

OAICreateIntent_request_intentClosingSetting_closingResponse OAIUpdateIntentRequest_intentClosingSetting::getClosingResponse() const {
    return m_closing_response;
}
void OAIUpdateIntentRequest_intentClosingSetting::setClosingResponse(const OAICreateIntent_request_intentClosingSetting_closingResponse &closing_response) {
    m_closing_response = closing_response;
    m_closing_response_isSet = true;
}

bool OAIUpdateIntentRequest_intentClosingSetting::is_closing_response_Set() const{
    return m_closing_response_isSet;
}

bool OAIUpdateIntentRequest_intentClosingSetting::is_closing_response_Valid() const{
    return m_closing_response_isValid;
}

bool OAIUpdateIntentRequest_intentClosingSetting::getActive() const {
    return m_active;
}
void OAIUpdateIntentRequest_intentClosingSetting::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIUpdateIntentRequest_intentClosingSetting::is_active_Set() const{
    return m_active_isSet;
}

bool OAIUpdateIntentRequest_intentClosingSetting::is_active_Valid() const{
    return m_active_isValid;
}

OAICreateIntent_request_intentClosingSetting_nextStep OAIUpdateIntentRequest_intentClosingSetting::getNextStep() const {
    return m_next_step;
}
void OAIUpdateIntentRequest_intentClosingSetting::setNextStep(const OAICreateIntent_request_intentClosingSetting_nextStep &next_step) {
    m_next_step = next_step;
    m_next_step_isSet = true;
}

bool OAIUpdateIntentRequest_intentClosingSetting::is_next_step_Set() const{
    return m_next_step_isSet;
}

bool OAIUpdateIntentRequest_intentClosingSetting::is_next_step_Valid() const{
    return m_next_step_isValid;
}

OAICreateIntent_request_intentClosingSetting_conditional OAIUpdateIntentRequest_intentClosingSetting::getConditional() const {
    return m_conditional;
}
void OAIUpdateIntentRequest_intentClosingSetting::setConditional(const OAICreateIntent_request_intentClosingSetting_conditional &conditional) {
    m_conditional = conditional;
    m_conditional_isSet = true;
}

bool OAIUpdateIntentRequest_intentClosingSetting::is_conditional_Set() const{
    return m_conditional_isSet;
}

bool OAIUpdateIntentRequest_intentClosingSetting::is_conditional_Valid() const{
    return m_conditional_isValid;
}

bool OAIUpdateIntentRequest_intentClosingSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closing_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateIntentRequest_intentClosingSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
