/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserTurnResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserTurnResult::OAIUserTurnResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserTurnResult::OAIUserTurnResult() {
    this->initializeModel();
}

OAIUserTurnResult::~OAIUserTurnResult() {}

void OAIUserTurnResult::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_expected_output_isSet = false;
    m_expected_output_isValid = false;

    m_actual_output_isSet = false;
    m_actual_output_isValid = false;

    m_error_details_isSet = false;
    m_error_details_isValid = false;

    m_end_to_end_result_isSet = false;
    m_end_to_end_result_isValid = false;

    m_intent_match_result_isSet = false;
    m_intent_match_result_isValid = false;

    m_slot_match_result_isSet = false;
    m_slot_match_result_isValid = false;

    m_speech_transcription_result_isSet = false;
    m_speech_transcription_result_isValid = false;

    m_conversation_level_result_isSet = false;
    m_conversation_level_result_isValid = false;
}

void OAIUserTurnResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserTurnResult::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_expected_output_isValid = ::OpenAPI::fromJsonValue(m_expected_output, json[QString("expectedOutput")]);
    m_expected_output_isSet = !json[QString("expectedOutput")].isNull() && m_expected_output_isValid;

    m_actual_output_isValid = ::OpenAPI::fromJsonValue(m_actual_output, json[QString("actualOutput")]);
    m_actual_output_isSet = !json[QString("actualOutput")].isNull() && m_actual_output_isValid;

    m_error_details_isValid = ::OpenAPI::fromJsonValue(m_error_details, json[QString("errorDetails")]);
    m_error_details_isSet = !json[QString("errorDetails")].isNull() && m_error_details_isValid;

    m_end_to_end_result_isValid = ::OpenAPI::fromJsonValue(m_end_to_end_result, json[QString("endToEndResult")]);
    m_end_to_end_result_isSet = !json[QString("endToEndResult")].isNull() && m_end_to_end_result_isValid;

    m_intent_match_result_isValid = ::OpenAPI::fromJsonValue(m_intent_match_result, json[QString("intentMatchResult")]);
    m_intent_match_result_isSet = !json[QString("intentMatchResult")].isNull() && m_intent_match_result_isValid;

    m_slot_match_result_isValid = ::OpenAPI::fromJsonValue(m_slot_match_result, json[QString("slotMatchResult")]);
    m_slot_match_result_isSet = !json[QString("slotMatchResult")].isNull() && m_slot_match_result_isValid;

    m_speech_transcription_result_isValid = ::OpenAPI::fromJsonValue(m_speech_transcription_result, json[QString("speechTranscriptionResult")]);
    m_speech_transcription_result_isSet = !json[QString("speechTranscriptionResult")].isNull() && m_speech_transcription_result_isValid;

    m_conversation_level_result_isValid = ::OpenAPI::fromJsonValue(m_conversation_level_result, json[QString("conversationLevelResult")]);
    m_conversation_level_result_isSet = !json[QString("conversationLevelResult")].isNull() && m_conversation_level_result_isValid;
}

QString OAIUserTurnResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserTurnResult::asJsonObject() const {
    QJsonObject obj;
    if (m_input.isSet()) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_expected_output.isSet()) {
        obj.insert(QString("expectedOutput"), ::OpenAPI::toJsonValue(m_expected_output));
    }
    if (m_actual_output.isSet()) {
        obj.insert(QString("actualOutput"), ::OpenAPI::toJsonValue(m_actual_output));
    }
    if (m_error_details.isSet()) {
        obj.insert(QString("errorDetails"), ::OpenAPI::toJsonValue(m_error_details));
    }
    if (m_end_to_end_result.isSet()) {
        obj.insert(QString("endToEndResult"), ::OpenAPI::toJsonValue(m_end_to_end_result));
    }
    if (m_intent_match_result.isSet()) {
        obj.insert(QString("intentMatchResult"), ::OpenAPI::toJsonValue(m_intent_match_result));
    }
    if (m_slot_match_result.isSet()) {
        obj.insert(QString("slotMatchResult"), ::OpenAPI::toJsonValue(m_slot_match_result));
    }
    if (m_speech_transcription_result.isSet()) {
        obj.insert(QString("speechTranscriptionResult"), ::OpenAPI::toJsonValue(m_speech_transcription_result));
    }
    if (m_conversation_level_result.isSet()) {
        obj.insert(QString("conversationLevelResult"), ::OpenAPI::toJsonValue(m_conversation_level_result));
    }
    return obj;
}

OAIUserTurnResult_input OAIUserTurnResult::getInput() const {
    return m_input;
}
void OAIUserTurnResult::setInput(const OAIUserTurnResult_input &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIUserTurnResult::is_input_Set() const{
    return m_input_isSet;
}

bool OAIUserTurnResult::is_input_Valid() const{
    return m_input_isValid;
}

OAIUserTurnResult_expectedOutput OAIUserTurnResult::getExpectedOutput() const {
    return m_expected_output;
}
void OAIUserTurnResult::setExpectedOutput(const OAIUserTurnResult_expectedOutput &expected_output) {
    m_expected_output = expected_output;
    m_expected_output_isSet = true;
}

bool OAIUserTurnResult::is_expected_output_Set() const{
    return m_expected_output_isSet;
}

bool OAIUserTurnResult::is_expected_output_Valid() const{
    return m_expected_output_isValid;
}

OAIUserTurnResult_actualOutput OAIUserTurnResult::getActualOutput() const {
    return m_actual_output;
}
void OAIUserTurnResult::setActualOutput(const OAIUserTurnResult_actualOutput &actual_output) {
    m_actual_output = actual_output;
    m_actual_output_isSet = true;
}

bool OAIUserTurnResult::is_actual_output_Set() const{
    return m_actual_output_isSet;
}

bool OAIUserTurnResult::is_actual_output_Valid() const{
    return m_actual_output_isValid;
}

OAIExecutionErrorDetails OAIUserTurnResult::getErrorDetails() const {
    return m_error_details;
}
void OAIUserTurnResult::setErrorDetails(const OAIExecutionErrorDetails &error_details) {
    m_error_details = error_details;
    m_error_details_isSet = true;
}

bool OAIUserTurnResult::is_error_details_Set() const{
    return m_error_details_isSet;
}

bool OAIUserTurnResult::is_error_details_Valid() const{
    return m_error_details_isValid;
}

OAITestResultMatchStatus OAIUserTurnResult::getEndToEndResult() const {
    return m_end_to_end_result;
}
void OAIUserTurnResult::setEndToEndResult(const OAITestResultMatchStatus &end_to_end_result) {
    m_end_to_end_result = end_to_end_result;
    m_end_to_end_result_isSet = true;
}

bool OAIUserTurnResult::is_end_to_end_result_Set() const{
    return m_end_to_end_result_isSet;
}

bool OAIUserTurnResult::is_end_to_end_result_Valid() const{
    return m_end_to_end_result_isValid;
}

OAITestResultMatchStatus OAIUserTurnResult::getIntentMatchResult() const {
    return m_intent_match_result;
}
void OAIUserTurnResult::setIntentMatchResult(const OAITestResultMatchStatus &intent_match_result) {
    m_intent_match_result = intent_match_result;
    m_intent_match_result_isSet = true;
}

bool OAIUserTurnResult::is_intent_match_result_Set() const{
    return m_intent_match_result_isSet;
}

bool OAIUserTurnResult::is_intent_match_result_Valid() const{
    return m_intent_match_result_isValid;
}

OAITestResultMatchStatus OAIUserTurnResult::getSlotMatchResult() const {
    return m_slot_match_result;
}
void OAIUserTurnResult::setSlotMatchResult(const OAITestResultMatchStatus &slot_match_result) {
    m_slot_match_result = slot_match_result;
    m_slot_match_result_isSet = true;
}

bool OAIUserTurnResult::is_slot_match_result_Set() const{
    return m_slot_match_result_isSet;
}

bool OAIUserTurnResult::is_slot_match_result_Valid() const{
    return m_slot_match_result_isValid;
}

OAITestResultMatchStatus OAIUserTurnResult::getSpeechTranscriptionResult() const {
    return m_speech_transcription_result;
}
void OAIUserTurnResult::setSpeechTranscriptionResult(const OAITestResultMatchStatus &speech_transcription_result) {
    m_speech_transcription_result = speech_transcription_result;
    m_speech_transcription_result_isSet = true;
}

bool OAIUserTurnResult::is_speech_transcription_result_Set() const{
    return m_speech_transcription_result_isSet;
}

bool OAIUserTurnResult::is_speech_transcription_result_Valid() const{
    return m_speech_transcription_result_isValid;
}

OAIUserTurnResult_conversationLevelResult OAIUserTurnResult::getConversationLevelResult() const {
    return m_conversation_level_result;
}
void OAIUserTurnResult::setConversationLevelResult(const OAIUserTurnResult_conversationLevelResult &conversation_level_result) {
    m_conversation_level_result = conversation_level_result;
    m_conversation_level_result_isSet = true;
}

bool OAIUserTurnResult::is_conversation_level_result_Set() const{
    return m_conversation_level_result_isSet;
}

bool OAIUserTurnResult::is_conversation_level_result_Valid() const{
    return m_conversation_level_result_isValid;
}

bool OAIUserTurnResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_to_end_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_match_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_match_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_transcription_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_level_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserTurnResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_expected_output_isValid && true;
}

} // namespace OpenAPI
