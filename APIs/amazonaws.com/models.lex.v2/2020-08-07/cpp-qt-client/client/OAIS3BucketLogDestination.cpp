/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3BucketLogDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3BucketLogDestination::OAIS3BucketLogDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3BucketLogDestination::OAIS3BucketLogDestination() {
    this->initializeModel();
}

OAIS3BucketLogDestination::~OAIS3BucketLogDestination() {}

void OAIS3BucketLogDestination::initializeModel() {

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_s3_bucket_arn_isSet = false;
    m_s3_bucket_arn_isValid = false;

    m_log_prefix_isSet = false;
    m_log_prefix_isValid = false;
}

void OAIS3BucketLogDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3BucketLogDestination::fromJsonObject(QJsonObject json) {

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("kmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("kmsKeyArn")].isNull() && m_kms_key_arn_isValid;

    m_s3_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_arn, json[QString("s3BucketArn")]);
    m_s3_bucket_arn_isSet = !json[QString("s3BucketArn")].isNull() && m_s3_bucket_arn_isValid;

    m_log_prefix_isValid = ::OpenAPI::fromJsonValue(m_log_prefix, json[QString("logPrefix")]);
    m_log_prefix_isSet = !json[QString("logPrefix")].isNull() && m_log_prefix_isValid;
}

QString OAIS3BucketLogDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3BucketLogDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("kmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_s3_bucket_arn_isSet) {
        obj.insert(QString("s3BucketArn"), ::OpenAPI::toJsonValue(m_s3_bucket_arn));
    }
    if (m_log_prefix_isSet) {
        obj.insert(QString("logPrefix"), ::OpenAPI::toJsonValue(m_log_prefix));
    }
    return obj;
}

QString OAIS3BucketLogDestination::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIS3BucketLogDestination::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIS3BucketLogDestination::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIS3BucketLogDestination::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

QString OAIS3BucketLogDestination::getS3BucketArn() const {
    return m_s3_bucket_arn;
}
void OAIS3BucketLogDestination::setS3BucketArn(const QString &s3_bucket_arn) {
    m_s3_bucket_arn = s3_bucket_arn;
    m_s3_bucket_arn_isSet = true;
}

bool OAIS3BucketLogDestination::is_s3_bucket_arn_Set() const{
    return m_s3_bucket_arn_isSet;
}

bool OAIS3BucketLogDestination::is_s3_bucket_arn_Valid() const{
    return m_s3_bucket_arn_isValid;
}

QString OAIS3BucketLogDestination::getLogPrefix() const {
    return m_log_prefix;
}
void OAIS3BucketLogDestination::setLogPrefix(const QString &log_prefix) {
    m_log_prefix = log_prefix;
    m_log_prefix_isSet = true;
}

bool OAIS3BucketLogDestination::is_log_prefix_Set() const{
    return m_log_prefix_isSet;
}

bool OAIS3BucketLogDestination::is_log_prefix_Valid() const{
    return m_log_prefix_isValid;
}

bool OAIS3BucketLogDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3BucketLogDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_bucket_arn_isValid && m_log_prefix_isValid && true;
}

} // namespace OpenAPI
