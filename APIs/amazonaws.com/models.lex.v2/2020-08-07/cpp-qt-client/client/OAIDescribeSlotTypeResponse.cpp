/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSlotTypeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSlotTypeResponse::OAIDescribeSlotTypeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSlotTypeResponse::OAIDescribeSlotTypeResponse() {
    this->initializeModel();
}

OAIDescribeSlotTypeResponse::~OAIDescribeSlotTypeResponse() {}

void OAIDescribeSlotTypeResponse::initializeModel() {

    m_slot_type_id_isSet = false;
    m_slot_type_id_isValid = false;

    m_slot_type_name_isSet = false;
    m_slot_type_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_slot_type_values_isSet = false;
    m_slot_type_values_isValid = false;

    m_value_selection_setting_isSet = false;
    m_value_selection_setting_isValid = false;

    m_parent_slot_type_signature_isSet = false;
    m_parent_slot_type_signature_isValid = false;

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_locale_id_isSet = false;
    m_locale_id_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_external_source_setting_isSet = false;
    m_external_source_setting_isValid = false;

    m_composite_slot_type_setting_isSet = false;
    m_composite_slot_type_setting_isValid = false;
}

void OAIDescribeSlotTypeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSlotTypeResponse::fromJsonObject(QJsonObject json) {

    m_slot_type_id_isValid = ::OpenAPI::fromJsonValue(m_slot_type_id, json[QString("slotTypeId")]);
    m_slot_type_id_isSet = !json[QString("slotTypeId")].isNull() && m_slot_type_id_isValid;

    m_slot_type_name_isValid = ::OpenAPI::fromJsonValue(m_slot_type_name, json[QString("slotTypeName")]);
    m_slot_type_name_isSet = !json[QString("slotTypeName")].isNull() && m_slot_type_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_slot_type_values_isValid = ::OpenAPI::fromJsonValue(m_slot_type_values, json[QString("slotTypeValues")]);
    m_slot_type_values_isSet = !json[QString("slotTypeValues")].isNull() && m_slot_type_values_isValid;

    m_value_selection_setting_isValid = ::OpenAPI::fromJsonValue(m_value_selection_setting, json[QString("valueSelectionSetting")]);
    m_value_selection_setting_isSet = !json[QString("valueSelectionSetting")].isNull() && m_value_selection_setting_isValid;

    m_parent_slot_type_signature_isValid = ::OpenAPI::fromJsonValue(m_parent_slot_type_signature, json[QString("parentSlotTypeSignature")]);
    m_parent_slot_type_signature_isSet = !json[QString("parentSlotTypeSignature")].isNull() && m_parent_slot_type_signature_isValid;

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("botId")]);
    m_bot_id_isSet = !json[QString("botId")].isNull() && m_bot_id_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_locale_id_isValid = ::OpenAPI::fromJsonValue(m_locale_id, json[QString("localeId")]);
    m_locale_id_isSet = !json[QString("localeId")].isNull() && m_locale_id_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_external_source_setting_isValid = ::OpenAPI::fromJsonValue(m_external_source_setting, json[QString("externalSourceSetting")]);
    m_external_source_setting_isSet = !json[QString("externalSourceSetting")].isNull() && m_external_source_setting_isValid;

    m_composite_slot_type_setting_isValid = ::OpenAPI::fromJsonValue(m_composite_slot_type_setting, json[QString("compositeSlotTypeSetting")]);
    m_composite_slot_type_setting_isSet = !json[QString("compositeSlotTypeSetting")].isNull() && m_composite_slot_type_setting_isValid;
}

QString OAIDescribeSlotTypeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSlotTypeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_slot_type_id_isSet) {
        obj.insert(QString("slotTypeId"), ::OpenAPI::toJsonValue(m_slot_type_id));
    }
    if (m_slot_type_name_isSet) {
        obj.insert(QString("slotTypeName"), ::OpenAPI::toJsonValue(m_slot_type_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_slot_type_values.isSet()) {
        obj.insert(QString("slotTypeValues"), ::OpenAPI::toJsonValue(m_slot_type_values));
    }
    if (m_value_selection_setting.isSet()) {
        obj.insert(QString("valueSelectionSetting"), ::OpenAPI::toJsonValue(m_value_selection_setting));
    }
    if (m_parent_slot_type_signature_isSet) {
        obj.insert(QString("parentSlotTypeSignature"), ::OpenAPI::toJsonValue(m_parent_slot_type_signature));
    }
    if (m_bot_id_isSet) {
        obj.insert(QString("botId"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_locale_id_isSet) {
        obj.insert(QString("localeId"), ::OpenAPI::toJsonValue(m_locale_id));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_external_source_setting.isSet()) {
        obj.insert(QString("externalSourceSetting"), ::OpenAPI::toJsonValue(m_external_source_setting));
    }
    if (m_composite_slot_type_setting.isSet()) {
        obj.insert(QString("compositeSlotTypeSetting"), ::OpenAPI::toJsonValue(m_composite_slot_type_setting));
    }
    return obj;
}

QString OAIDescribeSlotTypeResponse::getSlotTypeId() const {
    return m_slot_type_id;
}
void OAIDescribeSlotTypeResponse::setSlotTypeId(const QString &slot_type_id) {
    m_slot_type_id = slot_type_id;
    m_slot_type_id_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_slot_type_id_Set() const{
    return m_slot_type_id_isSet;
}

bool OAIDescribeSlotTypeResponse::is_slot_type_id_Valid() const{
    return m_slot_type_id_isValid;
}

QString OAIDescribeSlotTypeResponse::getSlotTypeName() const {
    return m_slot_type_name;
}
void OAIDescribeSlotTypeResponse::setSlotTypeName(const QString &slot_type_name) {
    m_slot_type_name = slot_type_name;
    m_slot_type_name_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_slot_type_name_Set() const{
    return m_slot_type_name_isSet;
}

bool OAIDescribeSlotTypeResponse::is_slot_type_name_Valid() const{
    return m_slot_type_name_isValid;
}

QString OAIDescribeSlotTypeResponse::getDescription() const {
    return m_description;
}
void OAIDescribeSlotTypeResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeSlotTypeResponse::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIDescribeSlotTypeResponse::getSlotTypeValues() const {
    return m_slot_type_values;
}
void OAIDescribeSlotTypeResponse::setSlotTypeValues(const QList &slot_type_values) {
    m_slot_type_values = slot_type_values;
    m_slot_type_values_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_slot_type_values_Set() const{
    return m_slot_type_values_isSet;
}

bool OAIDescribeSlotTypeResponse::is_slot_type_values_Valid() const{
    return m_slot_type_values_isValid;
}

OAIDescribeSlotTypeResponse_valueSelectionSetting OAIDescribeSlotTypeResponse::getValueSelectionSetting() const {
    return m_value_selection_setting;
}
void OAIDescribeSlotTypeResponse::setValueSelectionSetting(const OAIDescribeSlotTypeResponse_valueSelectionSetting &value_selection_setting) {
    m_value_selection_setting = value_selection_setting;
    m_value_selection_setting_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_value_selection_setting_Set() const{
    return m_value_selection_setting_isSet;
}

bool OAIDescribeSlotTypeResponse::is_value_selection_setting_Valid() const{
    return m_value_selection_setting_isValid;
}

QString OAIDescribeSlotTypeResponse::getParentSlotTypeSignature() const {
    return m_parent_slot_type_signature;
}
void OAIDescribeSlotTypeResponse::setParentSlotTypeSignature(const QString &parent_slot_type_signature) {
    m_parent_slot_type_signature = parent_slot_type_signature;
    m_parent_slot_type_signature_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_parent_slot_type_signature_Set() const{
    return m_parent_slot_type_signature_isSet;
}

bool OAIDescribeSlotTypeResponse::is_parent_slot_type_signature_Valid() const{
    return m_parent_slot_type_signature_isValid;
}

QString OAIDescribeSlotTypeResponse::getBotId() const {
    return m_bot_id;
}
void OAIDescribeSlotTypeResponse::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAIDescribeSlotTypeResponse::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

QString OAIDescribeSlotTypeResponse::getBotVersion() const {
    return m_bot_version;
}
void OAIDescribeSlotTypeResponse::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAIDescribeSlotTypeResponse::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QString OAIDescribeSlotTypeResponse::getLocaleId() const {
    return m_locale_id;
}
void OAIDescribeSlotTypeResponse::setLocaleId(const QString &locale_id) {
    m_locale_id = locale_id;
    m_locale_id_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_locale_id_Set() const{
    return m_locale_id_isSet;
}

bool OAIDescribeSlotTypeResponse::is_locale_id_Valid() const{
    return m_locale_id_isValid;
}

QDateTime OAIDescribeSlotTypeResponse::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIDescribeSlotTypeResponse::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIDescribeSlotTypeResponse::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

QDateTime OAIDescribeSlotTypeResponse::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIDescribeSlotTypeResponse::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIDescribeSlotTypeResponse::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

OAIExternalSourceSetting OAIDescribeSlotTypeResponse::getExternalSourceSetting() const {
    return m_external_source_setting;
}
void OAIDescribeSlotTypeResponse::setExternalSourceSetting(const OAIExternalSourceSetting &external_source_setting) {
    m_external_source_setting = external_source_setting;
    m_external_source_setting_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_external_source_setting_Set() const{
    return m_external_source_setting_isSet;
}

bool OAIDescribeSlotTypeResponse::is_external_source_setting_Valid() const{
    return m_external_source_setting_isValid;
}

OAICreateSlotTypeResponse_compositeSlotTypeSetting OAIDescribeSlotTypeResponse::getCompositeSlotTypeSetting() const {
    return m_composite_slot_type_setting;
}
void OAIDescribeSlotTypeResponse::setCompositeSlotTypeSetting(const OAICreateSlotTypeResponse_compositeSlotTypeSetting &composite_slot_type_setting) {
    m_composite_slot_type_setting = composite_slot_type_setting;
    m_composite_slot_type_setting_isSet = true;
}

bool OAIDescribeSlotTypeResponse::is_composite_slot_type_setting_Set() const{
    return m_composite_slot_type_setting_isSet;
}

bool OAIDescribeSlotTypeResponse::is_composite_slot_type_setting_Valid() const{
    return m_composite_slot_type_setting_isValid;
}

bool OAIDescribeSlotTypeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_slot_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_type_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_selection_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_slot_type_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_source_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_composite_slot_type_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSlotTypeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
