/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTestExecutionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTestExecutionResponse::OAIDescribeTestExecutionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTestExecutionResponse::OAIDescribeTestExecutionResponse() {
    this->initializeModel();
}

OAIDescribeTestExecutionResponse::~OAIDescribeTestExecutionResponse() {}

void OAIDescribeTestExecutionResponse::initializeModel() {

    m_test_execution_id_isSet = false;
    m_test_execution_id_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_test_execution_status_isSet = false;
    m_test_execution_status_isValid = false;

    m_test_set_id_isSet = false;
    m_test_set_id_isValid = false;

    m_test_set_name_isSet = false;
    m_test_set_name_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_api_mode_isSet = false;
    m_api_mode_isValid = false;

    m_test_execution_modality_isSet = false;
    m_test_execution_modality_isValid = false;

    m_failure_reasons_isSet = false;
    m_failure_reasons_isValid = false;
}

void OAIDescribeTestExecutionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTestExecutionResponse::fromJsonObject(QJsonObject json) {

    m_test_execution_id_isValid = ::OpenAPI::fromJsonValue(m_test_execution_id, json[QString("testExecutionId")]);
    m_test_execution_id_isSet = !json[QString("testExecutionId")].isNull() && m_test_execution_id_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_test_execution_status_isValid = ::OpenAPI::fromJsonValue(m_test_execution_status, json[QString("testExecutionStatus")]);
    m_test_execution_status_isSet = !json[QString("testExecutionStatus")].isNull() && m_test_execution_status_isValid;

    m_test_set_id_isValid = ::OpenAPI::fromJsonValue(m_test_set_id, json[QString("testSetId")]);
    m_test_set_id_isSet = !json[QString("testSetId")].isNull() && m_test_set_id_isValid;

    m_test_set_name_isValid = ::OpenAPI::fromJsonValue(m_test_set_name, json[QString("testSetName")]);
    m_test_set_name_isSet = !json[QString("testSetName")].isNull() && m_test_set_name_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_api_mode_isValid = ::OpenAPI::fromJsonValue(m_api_mode, json[QString("apiMode")]);
    m_api_mode_isSet = !json[QString("apiMode")].isNull() && m_api_mode_isValid;

    m_test_execution_modality_isValid = ::OpenAPI::fromJsonValue(m_test_execution_modality, json[QString("testExecutionModality")]);
    m_test_execution_modality_isSet = !json[QString("testExecutionModality")].isNull() && m_test_execution_modality_isValid;

    m_failure_reasons_isValid = ::OpenAPI::fromJsonValue(m_failure_reasons, json[QString("failureReasons")]);
    m_failure_reasons_isSet = !json[QString("failureReasons")].isNull() && m_failure_reasons_isValid;
}

QString OAIDescribeTestExecutionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTestExecutionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_test_execution_id_isSet) {
        obj.insert(QString("testExecutionId"), ::OpenAPI::toJsonValue(m_test_execution_id));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_test_execution_status.isSet()) {
        obj.insert(QString("testExecutionStatus"), ::OpenAPI::toJsonValue(m_test_execution_status));
    }
    if (m_test_set_id_isSet) {
        obj.insert(QString("testSetId"), ::OpenAPI::toJsonValue(m_test_set_id));
    }
    if (m_test_set_name_isSet) {
        obj.insert(QString("testSetName"), ::OpenAPI::toJsonValue(m_test_set_name));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_api_mode.isSet()) {
        obj.insert(QString("apiMode"), ::OpenAPI::toJsonValue(m_api_mode));
    }
    if (m_test_execution_modality.isSet()) {
        obj.insert(QString("testExecutionModality"), ::OpenAPI::toJsonValue(m_test_execution_modality));
    }
    if (m_failure_reasons.isSet()) {
        obj.insert(QString("failureReasons"), ::OpenAPI::toJsonValue(m_failure_reasons));
    }
    return obj;
}

QString OAIDescribeTestExecutionResponse::getTestExecutionId() const {
    return m_test_execution_id;
}
void OAIDescribeTestExecutionResponse::setTestExecutionId(const QString &test_execution_id) {
    m_test_execution_id = test_execution_id;
    m_test_execution_id_isSet = true;
}

bool OAIDescribeTestExecutionResponse::is_test_execution_id_Set() const{
    return m_test_execution_id_isSet;
}

bool OAIDescribeTestExecutionResponse::is_test_execution_id_Valid() const{
    return m_test_execution_id_isValid;
}

QDateTime OAIDescribeTestExecutionResponse::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIDescribeTestExecutionResponse::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIDescribeTestExecutionResponse::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIDescribeTestExecutionResponse::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

QDateTime OAIDescribeTestExecutionResponse::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIDescribeTestExecutionResponse::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIDescribeTestExecutionResponse::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIDescribeTestExecutionResponse::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

OAITestExecutionStatus OAIDescribeTestExecutionResponse::getTestExecutionStatus() const {
    return m_test_execution_status;
}
void OAIDescribeTestExecutionResponse::setTestExecutionStatus(const OAITestExecutionStatus &test_execution_status) {
    m_test_execution_status = test_execution_status;
    m_test_execution_status_isSet = true;
}

bool OAIDescribeTestExecutionResponse::is_test_execution_status_Set() const{
    return m_test_execution_status_isSet;
}

bool OAIDescribeTestExecutionResponse::is_test_execution_status_Valid() const{
    return m_test_execution_status_isValid;
}

QString OAIDescribeTestExecutionResponse::getTestSetId() const {
    return m_test_set_id;
}
void OAIDescribeTestExecutionResponse::setTestSetId(const QString &test_set_id) {
    m_test_set_id = test_set_id;
    m_test_set_id_isSet = true;
}

bool OAIDescribeTestExecutionResponse::is_test_set_id_Set() const{
    return m_test_set_id_isSet;
}

bool OAIDescribeTestExecutionResponse::is_test_set_id_Valid() const{
    return m_test_set_id_isValid;
}

QString OAIDescribeTestExecutionResponse::getTestSetName() const {
    return m_test_set_name;
}
void OAIDescribeTestExecutionResponse::setTestSetName(const QString &test_set_name) {
    m_test_set_name = test_set_name;
    m_test_set_name_isSet = true;
}

bool OAIDescribeTestExecutionResponse::is_test_set_name_Set() const{
    return m_test_set_name_isSet;
}

bool OAIDescribeTestExecutionResponse::is_test_set_name_Valid() const{
    return m_test_set_name_isValid;
}

OAIDescribeTestExecutionResponse_target OAIDescribeTestExecutionResponse::getTarget() const {
    return m_target;
}
void OAIDescribeTestExecutionResponse::setTarget(const OAIDescribeTestExecutionResponse_target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIDescribeTestExecutionResponse::is_target_Set() const{
    return m_target_isSet;
}

bool OAIDescribeTestExecutionResponse::is_target_Valid() const{
    return m_target_isValid;
}

OAITestExecutionApiMode OAIDescribeTestExecutionResponse::getApiMode() const {
    return m_api_mode;
}
void OAIDescribeTestExecutionResponse::setApiMode(const OAITestExecutionApiMode &api_mode) {
    m_api_mode = api_mode;
    m_api_mode_isSet = true;
}

bool OAIDescribeTestExecutionResponse::is_api_mode_Set() const{
    return m_api_mode_isSet;
}

bool OAIDescribeTestExecutionResponse::is_api_mode_Valid() const{
    return m_api_mode_isValid;
}

OAITestExecutionModality OAIDescribeTestExecutionResponse::getTestExecutionModality() const {
    return m_test_execution_modality;
}
void OAIDescribeTestExecutionResponse::setTestExecutionModality(const OAITestExecutionModality &test_execution_modality) {
    m_test_execution_modality = test_execution_modality;
    m_test_execution_modality_isSet = true;
}

bool OAIDescribeTestExecutionResponse::is_test_execution_modality_Set() const{
    return m_test_execution_modality_isSet;
}

bool OAIDescribeTestExecutionResponse::is_test_execution_modality_Valid() const{
    return m_test_execution_modality_isValid;
}

QList OAIDescribeTestExecutionResponse::getFailureReasons() const {
    return m_failure_reasons;
}
void OAIDescribeTestExecutionResponse::setFailureReasons(const QList &failure_reasons) {
    m_failure_reasons = failure_reasons;
    m_failure_reasons_isSet = true;
}

bool OAIDescribeTestExecutionResponse::is_failure_reasons_Set() const{
    return m_failure_reasons_isSet;
}

bool OAIDescribeTestExecutionResponse::is_failure_reasons_Valid() const{
    return m_failure_reasons_isValid;
}

bool OAIDescribeTestExecutionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_test_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_execution_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_execution_modality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTestExecutionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
