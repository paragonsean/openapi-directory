/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListUtteranceAnalyticsDataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListUtteranceAnalyticsDataResponse::OAIListUtteranceAnalyticsDataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListUtteranceAnalyticsDataResponse::OAIListUtteranceAnalyticsDataResponse() {
    this->initializeModel();
}

OAIListUtteranceAnalyticsDataResponse::~OAIListUtteranceAnalyticsDataResponse() {}

void OAIListUtteranceAnalyticsDataResponse::initializeModel() {

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_utterances_isSet = false;
    m_utterances_isValid = false;
}

void OAIListUtteranceAnalyticsDataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListUtteranceAnalyticsDataResponse::fromJsonObject(QJsonObject json) {

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("botId")]);
    m_bot_id_isSet = !json[QString("botId")].isNull() && m_bot_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_utterances_isValid = ::OpenAPI::fromJsonValue(m_utterances, json[QString("utterances")]);
    m_utterances_isSet = !json[QString("utterances")].isNull() && m_utterances_isValid;
}

QString OAIListUtteranceAnalyticsDataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListUtteranceAnalyticsDataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_id_isSet) {
        obj.insert(QString("botId"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_utterances.isSet()) {
        obj.insert(QString("utterances"), ::OpenAPI::toJsonValue(m_utterances));
    }
    return obj;
}

QString OAIListUtteranceAnalyticsDataResponse::getBotId() const {
    return m_bot_id;
}
void OAIListUtteranceAnalyticsDataResponse::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAIListUtteranceAnalyticsDataResponse::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAIListUtteranceAnalyticsDataResponse::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

QString OAIListUtteranceAnalyticsDataResponse::getNextToken() const {
    return m_next_token;
}
void OAIListUtteranceAnalyticsDataResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListUtteranceAnalyticsDataResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListUtteranceAnalyticsDataResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListUtteranceAnalyticsDataResponse::getUtterances() const {
    return m_utterances;
}
void OAIListUtteranceAnalyticsDataResponse::setUtterances(const QList &utterances) {
    m_utterances = utterances;
    m_utterances_isSet = true;
}

bool OAIListUtteranceAnalyticsDataResponse::is_utterances_Set() const{
    return m_utterances_isSet;
}

bool OAIListUtteranceAnalyticsDataResponse::is_utterances_Valid() const{
    return m_utterances_isValid;
}

bool OAIListUtteranceAnalyticsDataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utterances.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListUtteranceAnalyticsDataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
