/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeImportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeImportResponse::OAIDescribeImportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeImportResponse::OAIDescribeImportResponse() {
    this->initializeModel();
}

OAIDescribeImportResponse::~OAIDescribeImportResponse() {}

void OAIDescribeImportResponse::initializeModel() {

    m_import_id_isSet = false;
    m_import_id_isValid = false;

    m_resource_specification_isSet = false;
    m_resource_specification_isValid = false;

    m_imported_resource_id_isSet = false;
    m_imported_resource_id_isValid = false;

    m_imported_resource_name_isSet = false;
    m_imported_resource_name_isValid = false;

    m_merge_strategy_isSet = false;
    m_merge_strategy_isValid = false;

    m_import_status_isSet = false;
    m_import_status_isValid = false;

    m_failure_reasons_isSet = false;
    m_failure_reasons_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;
}

void OAIDescribeImportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeImportResponse::fromJsonObject(QJsonObject json) {

    m_import_id_isValid = ::OpenAPI::fromJsonValue(m_import_id, json[QString("importId")]);
    m_import_id_isSet = !json[QString("importId")].isNull() && m_import_id_isValid;

    m_resource_specification_isValid = ::OpenAPI::fromJsonValue(m_resource_specification, json[QString("resourceSpecification")]);
    m_resource_specification_isSet = !json[QString("resourceSpecification")].isNull() && m_resource_specification_isValid;

    m_imported_resource_id_isValid = ::OpenAPI::fromJsonValue(m_imported_resource_id, json[QString("importedResourceId")]);
    m_imported_resource_id_isSet = !json[QString("importedResourceId")].isNull() && m_imported_resource_id_isValid;

    m_imported_resource_name_isValid = ::OpenAPI::fromJsonValue(m_imported_resource_name, json[QString("importedResourceName")]);
    m_imported_resource_name_isSet = !json[QString("importedResourceName")].isNull() && m_imported_resource_name_isValid;

    m_merge_strategy_isValid = ::OpenAPI::fromJsonValue(m_merge_strategy, json[QString("mergeStrategy")]);
    m_merge_strategy_isSet = !json[QString("mergeStrategy")].isNull() && m_merge_strategy_isValid;

    m_import_status_isValid = ::OpenAPI::fromJsonValue(m_import_status, json[QString("importStatus")]);
    m_import_status_isSet = !json[QString("importStatus")].isNull() && m_import_status_isValid;

    m_failure_reasons_isValid = ::OpenAPI::fromJsonValue(m_failure_reasons, json[QString("failureReasons")]);
    m_failure_reasons_isSet = !json[QString("failureReasons")].isNull() && m_failure_reasons_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;
}

QString OAIDescribeImportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeImportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_import_id_isSet) {
        obj.insert(QString("importId"), ::OpenAPI::toJsonValue(m_import_id));
    }
    if (m_resource_specification.isSet()) {
        obj.insert(QString("resourceSpecification"), ::OpenAPI::toJsonValue(m_resource_specification));
    }
    if (m_imported_resource_id_isSet) {
        obj.insert(QString("importedResourceId"), ::OpenAPI::toJsonValue(m_imported_resource_id));
    }
    if (m_imported_resource_name_isSet) {
        obj.insert(QString("importedResourceName"), ::OpenAPI::toJsonValue(m_imported_resource_name));
    }
    if (m_merge_strategy.isSet()) {
        obj.insert(QString("mergeStrategy"), ::OpenAPI::toJsonValue(m_merge_strategy));
    }
    if (m_import_status.isSet()) {
        obj.insert(QString("importStatus"), ::OpenAPI::toJsonValue(m_import_status));
    }
    if (m_failure_reasons.isSet()) {
        obj.insert(QString("failureReasons"), ::OpenAPI::toJsonValue(m_failure_reasons));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    return obj;
}

QString OAIDescribeImportResponse::getImportId() const {
    return m_import_id;
}
void OAIDescribeImportResponse::setImportId(const QString &import_id) {
    m_import_id = import_id;
    m_import_id_isSet = true;
}

bool OAIDescribeImportResponse::is_import_id_Set() const{
    return m_import_id_isSet;
}

bool OAIDescribeImportResponse::is_import_id_Valid() const{
    return m_import_id_isValid;
}

OAIDescribeImportResponse_resourceSpecification OAIDescribeImportResponse::getResourceSpecification() const {
    return m_resource_specification;
}
void OAIDescribeImportResponse::setResourceSpecification(const OAIDescribeImportResponse_resourceSpecification &resource_specification) {
    m_resource_specification = resource_specification;
    m_resource_specification_isSet = true;
}

bool OAIDescribeImportResponse::is_resource_specification_Set() const{
    return m_resource_specification_isSet;
}

bool OAIDescribeImportResponse::is_resource_specification_Valid() const{
    return m_resource_specification_isValid;
}

QString OAIDescribeImportResponse::getImportedResourceId() const {
    return m_imported_resource_id;
}
void OAIDescribeImportResponse::setImportedResourceId(const QString &imported_resource_id) {
    m_imported_resource_id = imported_resource_id;
    m_imported_resource_id_isSet = true;
}

bool OAIDescribeImportResponse::is_imported_resource_id_Set() const{
    return m_imported_resource_id_isSet;
}

bool OAIDescribeImportResponse::is_imported_resource_id_Valid() const{
    return m_imported_resource_id_isValid;
}

QString OAIDescribeImportResponse::getImportedResourceName() const {
    return m_imported_resource_name;
}
void OAIDescribeImportResponse::setImportedResourceName(const QString &imported_resource_name) {
    m_imported_resource_name = imported_resource_name;
    m_imported_resource_name_isSet = true;
}

bool OAIDescribeImportResponse::is_imported_resource_name_Set() const{
    return m_imported_resource_name_isSet;
}

bool OAIDescribeImportResponse::is_imported_resource_name_Valid() const{
    return m_imported_resource_name_isValid;
}

OAIMergeStrategy OAIDescribeImportResponse::getMergeStrategy() const {
    return m_merge_strategy;
}
void OAIDescribeImportResponse::setMergeStrategy(const OAIMergeStrategy &merge_strategy) {
    m_merge_strategy = merge_strategy;
    m_merge_strategy_isSet = true;
}

bool OAIDescribeImportResponse::is_merge_strategy_Set() const{
    return m_merge_strategy_isSet;
}

bool OAIDescribeImportResponse::is_merge_strategy_Valid() const{
    return m_merge_strategy_isValid;
}

OAIImportStatus OAIDescribeImportResponse::getImportStatus() const {
    return m_import_status;
}
void OAIDescribeImportResponse::setImportStatus(const OAIImportStatus &import_status) {
    m_import_status = import_status;
    m_import_status_isSet = true;
}

bool OAIDescribeImportResponse::is_import_status_Set() const{
    return m_import_status_isSet;
}

bool OAIDescribeImportResponse::is_import_status_Valid() const{
    return m_import_status_isValid;
}

QList OAIDescribeImportResponse::getFailureReasons() const {
    return m_failure_reasons;
}
void OAIDescribeImportResponse::setFailureReasons(const QList &failure_reasons) {
    m_failure_reasons = failure_reasons;
    m_failure_reasons_isSet = true;
}

bool OAIDescribeImportResponse::is_failure_reasons_Set() const{
    return m_failure_reasons_isSet;
}

bool OAIDescribeImportResponse::is_failure_reasons_Valid() const{
    return m_failure_reasons_isValid;
}

QDateTime OAIDescribeImportResponse::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIDescribeImportResponse::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIDescribeImportResponse::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIDescribeImportResponse::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

QDateTime OAIDescribeImportResponse::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIDescribeImportResponse::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIDescribeImportResponse::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIDescribeImportResponse::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

bool OAIDescribeImportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_import_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeImportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
