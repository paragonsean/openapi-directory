/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTestSetGenerationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTestSetGenerationResponse::OAIDescribeTestSetGenerationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTestSetGenerationResponse::OAIDescribeTestSetGenerationResponse() {
    this->initializeModel();
}

OAIDescribeTestSetGenerationResponse::~OAIDescribeTestSetGenerationResponse() {}

void OAIDescribeTestSetGenerationResponse::initializeModel() {

    m_test_set_generation_id_isSet = false;
    m_test_set_generation_id_isValid = false;

    m_test_set_generation_status_isSet = false;
    m_test_set_generation_status_isValid = false;

    m_failure_reasons_isSet = false;
    m_failure_reasons_isValid = false;

    m_test_set_id_isSet = false;
    m_test_set_id_isValid = false;

    m_test_set_name_isSet = false;
    m_test_set_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_storage_location_isSet = false;
    m_storage_location_isValid = false;

    m_generation_data_source_isSet = false;
    m_generation_data_source_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;
}

void OAIDescribeTestSetGenerationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTestSetGenerationResponse::fromJsonObject(QJsonObject json) {

    m_test_set_generation_id_isValid = ::OpenAPI::fromJsonValue(m_test_set_generation_id, json[QString("testSetGenerationId")]);
    m_test_set_generation_id_isSet = !json[QString("testSetGenerationId")].isNull() && m_test_set_generation_id_isValid;

    m_test_set_generation_status_isValid = ::OpenAPI::fromJsonValue(m_test_set_generation_status, json[QString("testSetGenerationStatus")]);
    m_test_set_generation_status_isSet = !json[QString("testSetGenerationStatus")].isNull() && m_test_set_generation_status_isValid;

    m_failure_reasons_isValid = ::OpenAPI::fromJsonValue(m_failure_reasons, json[QString("failureReasons")]);
    m_failure_reasons_isSet = !json[QString("failureReasons")].isNull() && m_failure_reasons_isValid;

    m_test_set_id_isValid = ::OpenAPI::fromJsonValue(m_test_set_id, json[QString("testSetId")]);
    m_test_set_id_isSet = !json[QString("testSetId")].isNull() && m_test_set_id_isValid;

    m_test_set_name_isValid = ::OpenAPI::fromJsonValue(m_test_set_name, json[QString("testSetName")]);
    m_test_set_name_isSet = !json[QString("testSetName")].isNull() && m_test_set_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_storage_location_isValid = ::OpenAPI::fromJsonValue(m_storage_location, json[QString("storageLocation")]);
    m_storage_location_isSet = !json[QString("storageLocation")].isNull() && m_storage_location_isValid;

    m_generation_data_source_isValid = ::OpenAPI::fromJsonValue(m_generation_data_source, json[QString("generationDataSource")]);
    m_generation_data_source_isSet = !json[QString("generationDataSource")].isNull() && m_generation_data_source_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;
}

QString OAIDescribeTestSetGenerationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTestSetGenerationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_test_set_generation_id_isSet) {
        obj.insert(QString("testSetGenerationId"), ::OpenAPI::toJsonValue(m_test_set_generation_id));
    }
    if (m_test_set_generation_status.isSet()) {
        obj.insert(QString("testSetGenerationStatus"), ::OpenAPI::toJsonValue(m_test_set_generation_status));
    }
    if (m_failure_reasons.isSet()) {
        obj.insert(QString("failureReasons"), ::OpenAPI::toJsonValue(m_failure_reasons));
    }
    if (m_test_set_id_isSet) {
        obj.insert(QString("testSetId"), ::OpenAPI::toJsonValue(m_test_set_id));
    }
    if (m_test_set_name_isSet) {
        obj.insert(QString("testSetName"), ::OpenAPI::toJsonValue(m_test_set_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_storage_location.isSet()) {
        obj.insert(QString("storageLocation"), ::OpenAPI::toJsonValue(m_storage_location));
    }
    if (m_generation_data_source.isSet()) {
        obj.insert(QString("generationDataSource"), ::OpenAPI::toJsonValue(m_generation_data_source));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    return obj;
}

QString OAIDescribeTestSetGenerationResponse::getTestSetGenerationId() const {
    return m_test_set_generation_id;
}
void OAIDescribeTestSetGenerationResponse::setTestSetGenerationId(const QString &test_set_generation_id) {
    m_test_set_generation_id = test_set_generation_id;
    m_test_set_generation_id_isSet = true;
}

bool OAIDescribeTestSetGenerationResponse::is_test_set_generation_id_Set() const{
    return m_test_set_generation_id_isSet;
}

bool OAIDescribeTestSetGenerationResponse::is_test_set_generation_id_Valid() const{
    return m_test_set_generation_id_isValid;
}

OAITestSetGenerationStatus OAIDescribeTestSetGenerationResponse::getTestSetGenerationStatus() const {
    return m_test_set_generation_status;
}
void OAIDescribeTestSetGenerationResponse::setTestSetGenerationStatus(const OAITestSetGenerationStatus &test_set_generation_status) {
    m_test_set_generation_status = test_set_generation_status;
    m_test_set_generation_status_isSet = true;
}

bool OAIDescribeTestSetGenerationResponse::is_test_set_generation_status_Set() const{
    return m_test_set_generation_status_isSet;
}

bool OAIDescribeTestSetGenerationResponse::is_test_set_generation_status_Valid() const{
    return m_test_set_generation_status_isValid;
}

QList OAIDescribeTestSetGenerationResponse::getFailureReasons() const {
    return m_failure_reasons;
}
void OAIDescribeTestSetGenerationResponse::setFailureReasons(const QList &failure_reasons) {
    m_failure_reasons = failure_reasons;
    m_failure_reasons_isSet = true;
}

bool OAIDescribeTestSetGenerationResponse::is_failure_reasons_Set() const{
    return m_failure_reasons_isSet;
}

bool OAIDescribeTestSetGenerationResponse::is_failure_reasons_Valid() const{
    return m_failure_reasons_isValid;
}

QString OAIDescribeTestSetGenerationResponse::getTestSetId() const {
    return m_test_set_id;
}
void OAIDescribeTestSetGenerationResponse::setTestSetId(const QString &test_set_id) {
    m_test_set_id = test_set_id;
    m_test_set_id_isSet = true;
}

bool OAIDescribeTestSetGenerationResponse::is_test_set_id_Set() const{
    return m_test_set_id_isSet;
}

bool OAIDescribeTestSetGenerationResponse::is_test_set_id_Valid() const{
    return m_test_set_id_isValid;
}

QString OAIDescribeTestSetGenerationResponse::getTestSetName() const {
    return m_test_set_name;
}
void OAIDescribeTestSetGenerationResponse::setTestSetName(const QString &test_set_name) {
    m_test_set_name = test_set_name;
    m_test_set_name_isSet = true;
}

bool OAIDescribeTestSetGenerationResponse::is_test_set_name_Set() const{
    return m_test_set_name_isSet;
}

bool OAIDescribeTestSetGenerationResponse::is_test_set_name_Valid() const{
    return m_test_set_name_isValid;
}

QString OAIDescribeTestSetGenerationResponse::getDescription() const {
    return m_description;
}
void OAIDescribeTestSetGenerationResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeTestSetGenerationResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeTestSetGenerationResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIDescribeTestSetGenerationResponse_storageLocation OAIDescribeTestSetGenerationResponse::getStorageLocation() const {
    return m_storage_location;
}
void OAIDescribeTestSetGenerationResponse::setStorageLocation(const OAIDescribeTestSetGenerationResponse_storageLocation &storage_location) {
    m_storage_location = storage_location;
    m_storage_location_isSet = true;
}

bool OAIDescribeTestSetGenerationResponse::is_storage_location_Set() const{
    return m_storage_location_isSet;
}

bool OAIDescribeTestSetGenerationResponse::is_storage_location_Valid() const{
    return m_storage_location_isValid;
}

OAIDescribeTestSetGenerationResponse_generationDataSource OAIDescribeTestSetGenerationResponse::getGenerationDataSource() const {
    return m_generation_data_source;
}
void OAIDescribeTestSetGenerationResponse::setGenerationDataSource(const OAIDescribeTestSetGenerationResponse_generationDataSource &generation_data_source) {
    m_generation_data_source = generation_data_source;
    m_generation_data_source_isSet = true;
}

bool OAIDescribeTestSetGenerationResponse::is_generation_data_source_Set() const{
    return m_generation_data_source_isSet;
}

bool OAIDescribeTestSetGenerationResponse::is_generation_data_source_Valid() const{
    return m_generation_data_source_isValid;
}

QString OAIDescribeTestSetGenerationResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeTestSetGenerationResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeTestSetGenerationResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeTestSetGenerationResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QDateTime OAIDescribeTestSetGenerationResponse::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIDescribeTestSetGenerationResponse::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIDescribeTestSetGenerationResponse::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIDescribeTestSetGenerationResponse::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

QDateTime OAIDescribeTestSetGenerationResponse::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIDescribeTestSetGenerationResponse::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIDescribeTestSetGenerationResponse::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIDescribeTestSetGenerationResponse::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

bool OAIDescribeTestSetGenerationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_test_set_generation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_set_generation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTestSetGenerationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
