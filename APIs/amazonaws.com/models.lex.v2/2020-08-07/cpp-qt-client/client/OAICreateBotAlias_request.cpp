/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBotAlias_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBotAlias_request::OAICreateBotAlias_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBotAlias_request::OAICreateBotAlias_request() {
    this->initializeModel();
}

OAICreateBotAlias_request::~OAICreateBotAlias_request() {}

void OAICreateBotAlias_request::initializeModel() {

    m_bot_alias_name_isSet = false;
    m_bot_alias_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_bot_alias_locale_settings_isSet = false;
    m_bot_alias_locale_settings_isValid = false;

    m_conversation_log_settings_isSet = false;
    m_conversation_log_settings_isValid = false;

    m_sentiment_analysis_settings_isSet = false;
    m_sentiment_analysis_settings_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateBotAlias_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBotAlias_request::fromJsonObject(QJsonObject json) {

    m_bot_alias_name_isValid = ::OpenAPI::fromJsonValue(m_bot_alias_name, json[QString("botAliasName")]);
    m_bot_alias_name_isSet = !json[QString("botAliasName")].isNull() && m_bot_alias_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_bot_alias_locale_settings_isValid = ::OpenAPI::fromJsonValue(m_bot_alias_locale_settings, json[QString("botAliasLocaleSettings")]);
    m_bot_alias_locale_settings_isSet = !json[QString("botAliasLocaleSettings")].isNull() && m_bot_alias_locale_settings_isValid;

    m_conversation_log_settings_isValid = ::OpenAPI::fromJsonValue(m_conversation_log_settings, json[QString("conversationLogSettings")]);
    m_conversation_log_settings_isSet = !json[QString("conversationLogSettings")].isNull() && m_conversation_log_settings_isValid;

    m_sentiment_analysis_settings_isValid = ::OpenAPI::fromJsonValue(m_sentiment_analysis_settings, json[QString("sentimentAnalysisSettings")]);
    m_sentiment_analysis_settings_isSet = !json[QString("sentimentAnalysisSettings")].isNull() && m_sentiment_analysis_settings_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateBotAlias_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBotAlias_request::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_alias_name_isSet) {
        obj.insert(QString("botAliasName"), ::OpenAPI::toJsonValue(m_bot_alias_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_bot_alias_locale_settings.size() > 0) {
        obj.insert(QString("botAliasLocaleSettings"), ::OpenAPI::toJsonValue(m_bot_alias_locale_settings));
    }
    if (m_conversation_log_settings.isSet()) {
        obj.insert(QString("conversationLogSettings"), ::OpenAPI::toJsonValue(m_conversation_log_settings));
    }
    if (m_sentiment_analysis_settings.isSet()) {
        obj.insert(QString("sentimentAnalysisSettings"), ::OpenAPI::toJsonValue(m_sentiment_analysis_settings));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateBotAlias_request::getBotAliasName() const {
    return m_bot_alias_name;
}
void OAICreateBotAlias_request::setBotAliasName(const QString &bot_alias_name) {
    m_bot_alias_name = bot_alias_name;
    m_bot_alias_name_isSet = true;
}

bool OAICreateBotAlias_request::is_bot_alias_name_Set() const{
    return m_bot_alias_name_isSet;
}

bool OAICreateBotAlias_request::is_bot_alias_name_Valid() const{
    return m_bot_alias_name_isValid;
}

QString OAICreateBotAlias_request::getDescription() const {
    return m_description;
}
void OAICreateBotAlias_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateBotAlias_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateBotAlias_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateBotAlias_request::getBotVersion() const {
    return m_bot_version;
}
void OAICreateBotAlias_request::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAICreateBotAlias_request::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAICreateBotAlias_request::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QMap<QString, OAIBotAliasLocaleSettings> OAICreateBotAlias_request::getBotAliasLocaleSettings() const {
    return m_bot_alias_locale_settings;
}
void OAICreateBotAlias_request::setBotAliasLocaleSettings(const QMap<QString, OAIBotAliasLocaleSettings> &bot_alias_locale_settings) {
    m_bot_alias_locale_settings = bot_alias_locale_settings;
    m_bot_alias_locale_settings_isSet = true;
}

bool OAICreateBotAlias_request::is_bot_alias_locale_settings_Set() const{
    return m_bot_alias_locale_settings_isSet;
}

bool OAICreateBotAlias_request::is_bot_alias_locale_settings_Valid() const{
    return m_bot_alias_locale_settings_isValid;
}

OAICreateBotAlias_request_conversationLogSettings OAICreateBotAlias_request::getConversationLogSettings() const {
    return m_conversation_log_settings;
}
void OAICreateBotAlias_request::setConversationLogSettings(const OAICreateBotAlias_request_conversationLogSettings &conversation_log_settings) {
    m_conversation_log_settings = conversation_log_settings;
    m_conversation_log_settings_isSet = true;
}

bool OAICreateBotAlias_request::is_conversation_log_settings_Set() const{
    return m_conversation_log_settings_isSet;
}

bool OAICreateBotAlias_request::is_conversation_log_settings_Valid() const{
    return m_conversation_log_settings_isValid;
}

OAICreateBotAlias_request_sentimentAnalysisSettings OAICreateBotAlias_request::getSentimentAnalysisSettings() const {
    return m_sentiment_analysis_settings;
}
void OAICreateBotAlias_request::setSentimentAnalysisSettings(const OAICreateBotAlias_request_sentimentAnalysisSettings &sentiment_analysis_settings) {
    m_sentiment_analysis_settings = sentiment_analysis_settings;
    m_sentiment_analysis_settings_isSet = true;
}

bool OAICreateBotAlias_request::is_sentiment_analysis_settings_Set() const{
    return m_sentiment_analysis_settings_isSet;
}

bool OAICreateBotAlias_request::is_sentiment_analysis_settings_Valid() const{
    return m_sentiment_analysis_settings_isValid;
}

QMap<QString, QString> OAICreateBotAlias_request::getTags() const {
    return m_tags;
}
void OAICreateBotAlias_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateBotAlias_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateBotAlias_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateBotAlias_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_alias_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_alias_locale_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_log_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_analysis_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBotAlias_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bot_alias_name_isValid && true;
}

} // namespace OpenAPI
