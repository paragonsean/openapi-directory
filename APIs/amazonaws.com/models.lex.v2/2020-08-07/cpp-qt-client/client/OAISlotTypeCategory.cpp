/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlotTypeCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlotTypeCategory::OAISlotTypeCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlotTypeCategory::OAISlotTypeCategory() {
    this->initializeModel();
}

OAISlotTypeCategory::~OAISlotTypeCategory() {}

void OAISlotTypeCategory::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISlotTypeCategory::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISlotTypeCategory::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Custom", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlotTypeCategory::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Extended", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlotTypeCategory::EXTENDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExternalGrammar", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlotTypeCategory::EXTERNALGRAMMAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Composite", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlotTypeCategory::COMPOSITE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISlotTypeCategory::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISlotTypeCategory::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISlotTypeCategory::CUSTOM:
            val = "Custom";
            break;
        case eOAISlotTypeCategory::EXTENDED:
            val = "Extended";
            break;
        case eOAISlotTypeCategory::EXTERNALGRAMMAR:
            val = "ExternalGrammar";
            break;
        case eOAISlotTypeCategory::COMPOSITE:
            val = "Composite";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISlotTypeCategory::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISlotTypeCategory::eOAISlotTypeCategory OAISlotTypeCategory::getValue() const {
    return m_value;
}

void OAISlotTypeCategory::setValue(const OAISlotTypeCategory::eOAISlotTypeCategory& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISlotTypeCategory::isSet() const {
    
    return m_value_isSet;
}

bool OAISlotTypeCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
