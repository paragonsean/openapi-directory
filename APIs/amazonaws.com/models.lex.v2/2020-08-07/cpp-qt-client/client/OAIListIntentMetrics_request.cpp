/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListIntentMetrics_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListIntentMetrics_request::OAIListIntentMetrics_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListIntentMetrics_request::OAIListIntentMetrics_request() {
    this->initializeModel();
}

OAIListIntentMetrics_request::~OAIListIntentMetrics_request() {}

void OAIListIntentMetrics_request::initializeModel() {

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_bin_by_isSet = false;
    m_bin_by_isValid = false;

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListIntentMetrics_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListIntentMetrics_request::fromJsonObject(QJsonObject json) {

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_bin_by_isValid = ::OpenAPI::fromJsonValue(m_bin_by, json[QString("binBy")]);
    m_bin_by_isSet = !json[QString("binBy")].isNull() && m_bin_by_isValid;

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("groupBy")]);
    m_group_by_isSet = !json[QString("groupBy")].isNull() && m_group_by_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListIntentMetrics_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListIntentMetrics_request::asJsonObject() const {
    QJsonObject obj;
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_bin_by.size() > 0) {
        obj.insert(QString("binBy"), ::OpenAPI::toJsonValue(m_bin_by));
    }
    if (m_group_by.size() > 0) {
        obj.insert(QString("groupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QDateTime OAIListIntentMetrics_request::getStartDateTime() const {
    return m_start_date_time;
}
void OAIListIntentMetrics_request::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIListIntentMetrics_request::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIListIntentMetrics_request::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QDateTime OAIListIntentMetrics_request::getEndDateTime() const {
    return m_end_date_time;
}
void OAIListIntentMetrics_request::setEndDateTime(const QDateTime &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIListIntentMetrics_request::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIListIntentMetrics_request::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

QList<OAIAnalyticsIntentMetric> OAIListIntentMetrics_request::getMetrics() const {
    return m_metrics;
}
void OAIListIntentMetrics_request::setMetrics(const QList<OAIAnalyticsIntentMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIListIntentMetrics_request::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIListIntentMetrics_request::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QList<OAIAnalyticsBinBySpecification> OAIListIntentMetrics_request::getBinBy() const {
    return m_bin_by;
}
void OAIListIntentMetrics_request::setBinBy(const QList<OAIAnalyticsBinBySpecification> &bin_by) {
    m_bin_by = bin_by;
    m_bin_by_isSet = true;
}

bool OAIListIntentMetrics_request::is_bin_by_Set() const{
    return m_bin_by_isSet;
}

bool OAIListIntentMetrics_request::is_bin_by_Valid() const{
    return m_bin_by_isValid;
}

QList<OAIAnalyticsIntentGroupBySpecification> OAIListIntentMetrics_request::getGroupBy() const {
    return m_group_by;
}
void OAIListIntentMetrics_request::setGroupBy(const QList<OAIAnalyticsIntentGroupBySpecification> &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAIListIntentMetrics_request::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAIListIntentMetrics_request::is_group_by_Valid() const{
    return m_group_by_isValid;
}

QList<OAIAnalyticsIntentFilter> OAIListIntentMetrics_request::getFilters() const {
    return m_filters;
}
void OAIListIntentMetrics_request::setFilters(const QList<OAIAnalyticsIntentFilter> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIListIntentMetrics_request::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIListIntentMetrics_request::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIListIntentMetrics_request::getMaxResults() const {
    return m_max_results;
}
void OAIListIntentMetrics_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListIntentMetrics_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListIntentMetrics_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListIntentMetrics_request::getNextToken() const {
    return m_next_token;
}
void OAIListIntentMetrics_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListIntentMetrics_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListIntentMetrics_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListIntentMetrics_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListIntentMetrics_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_date_time_isValid && m_end_date_time_isValid && m_metrics_isValid && true;
}

} // namespace OpenAPI
