/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_plain_text_message_isSet = false;
    m_plain_text_message_isValid = false;

    m_custom_payload_isSet = false;
    m_custom_payload_isValid = false;

    m_ssml_message_isSet = false;
    m_ssml_message_isValid = false;

    m_image_response_card_isSet = false;
    m_image_response_card_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_plain_text_message_isValid = ::OpenAPI::fromJsonValue(m_plain_text_message, json[QString("plainTextMessage")]);
    m_plain_text_message_isSet = !json[QString("plainTextMessage")].isNull() && m_plain_text_message_isValid;

    m_custom_payload_isValid = ::OpenAPI::fromJsonValue(m_custom_payload, json[QString("customPayload")]);
    m_custom_payload_isSet = !json[QString("customPayload")].isNull() && m_custom_payload_isValid;

    m_ssml_message_isValid = ::OpenAPI::fromJsonValue(m_ssml_message, json[QString("ssmlMessage")]);
    m_ssml_message_isSet = !json[QString("ssmlMessage")].isNull() && m_ssml_message_isValid;

    m_image_response_card_isValid = ::OpenAPI::fromJsonValue(m_image_response_card, json[QString("imageResponseCard")]);
    m_image_response_card_isSet = !json[QString("imageResponseCard")].isNull() && m_image_response_card_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_plain_text_message.isSet()) {
        obj.insert(QString("plainTextMessage"), ::OpenAPI::toJsonValue(m_plain_text_message));
    }
    if (m_custom_payload.isSet()) {
        obj.insert(QString("customPayload"), ::OpenAPI::toJsonValue(m_custom_payload));
    }
    if (m_ssml_message.isSet()) {
        obj.insert(QString("ssmlMessage"), ::OpenAPI::toJsonValue(m_ssml_message));
    }
    if (m_image_response_card.isSet()) {
        obj.insert(QString("imageResponseCard"), ::OpenAPI::toJsonValue(m_image_response_card));
    }
    return obj;
}

OAIMessage_plainTextMessage OAIMessage::getPlainTextMessage() const {
    return m_plain_text_message;
}
void OAIMessage::setPlainTextMessage(const OAIMessage_plainTextMessage &plain_text_message) {
    m_plain_text_message = plain_text_message;
    m_plain_text_message_isSet = true;
}

bool OAIMessage::is_plain_text_message_Set() const{
    return m_plain_text_message_isSet;
}

bool OAIMessage::is_plain_text_message_Valid() const{
    return m_plain_text_message_isValid;
}

OAIMessage_customPayload OAIMessage::getCustomPayload() const {
    return m_custom_payload;
}
void OAIMessage::setCustomPayload(const OAIMessage_customPayload &custom_payload) {
    m_custom_payload = custom_payload;
    m_custom_payload_isSet = true;
}

bool OAIMessage::is_custom_payload_Set() const{
    return m_custom_payload_isSet;
}

bool OAIMessage::is_custom_payload_Valid() const{
    return m_custom_payload_isValid;
}

OAIMessage_ssmlMessage OAIMessage::getSsmlMessage() const {
    return m_ssml_message;
}
void OAIMessage::setSsmlMessage(const OAIMessage_ssmlMessage &ssml_message) {
    m_ssml_message = ssml_message;
    m_ssml_message_isSet = true;
}

bool OAIMessage::is_ssml_message_Set() const{
    return m_ssml_message_isSet;
}

bool OAIMessage::is_ssml_message_Valid() const{
    return m_ssml_message_isValid;
}

OAIMessage_imageResponseCard OAIMessage::getImageResponseCard() const {
    return m_image_response_card;
}
void OAIMessage::setImageResponseCard(const OAIMessage_imageResponseCard &image_response_card) {
    m_image_response_card = image_response_card;
    m_image_response_card_isSet = true;
}

bool OAIMessage::is_image_response_card_Set() const{
    return m_image_response_card_isSet;
}

bool OAIMessage::is_image_response_card_Valid() const{
    return m_image_response_card_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_plain_text_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssml_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_response_card.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
