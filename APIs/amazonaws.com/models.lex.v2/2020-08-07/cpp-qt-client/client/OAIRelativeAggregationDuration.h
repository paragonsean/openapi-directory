/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRelativeAggregationDuration.h
 *
 * &lt;p&gt;Specifies the time window that utterance statistics are returned for. The time window is always relative to the last time that the that utterances were aggregated. For example, if the &lt;code&gt;ListAggregatedUtterances&lt;/code&gt; operation is called at 1600, the time window is set to 1 hour, and the last refresh time was 1530, only utterances made between 1430 and 1530 are returned.&lt;/p&gt; &lt;p&gt;You can choose the time window that statistics should be returned for.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Hours&lt;/b&gt; - You can request utterance statistics for 1, 3, 6, 12, or 24 hour time windows. Statistics are refreshed every half hour for 1 hour time windows, and hourly for the other time windows.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Days&lt;/b&gt; - You can request utterance statistics for 3 days. Statistics are refreshed every 6 hours.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Weeks&lt;/b&gt; - You can see statistics for one or two weeks. Statistics are refreshed every 12 hours for one week time windows, and once per day for two week time windows.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAIRelativeAggregationDuration_H
#define OAIRelativeAggregationDuration_H

#include <QJsonObject>

#include "OAITimeDimension.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRelativeAggregationDuration : public OAIObject {
public:
    OAIRelativeAggregationDuration();
    OAIRelativeAggregationDuration(QString json);
    ~OAIRelativeAggregationDuration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITimeDimension getTimeDimension() const;
    void setTimeDimension(const OAITimeDimension &time_dimension);
    bool is_time_dimension_Set() const;
    bool is_time_dimension_Valid() const;

    qint32 getTimeValue() const;
    void setTimeValue(const qint32 &time_value);
    bool is_time_value_Set() const;
    bool is_time_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITimeDimension m_time_dimension;
    bool m_time_dimension_isSet;
    bool m_time_dimension_isValid;

    qint32 m_time_value;
    bool m_time_value_isSet;
    bool m_time_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRelativeAggregationDuration)

#endif // OAIRelativeAggregationDuration_H
