/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionSpecification::OAISessionSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionSpecification::OAISessionSpecification() {
    this->initializeModel();
}

OAISessionSpecification::~OAISessionSpecification() {}

void OAISessionSpecification::initializeModel() {

    m_bot_alias_id_isSet = false;
    m_bot_alias_id_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_locale_id_isSet = false;
    m_locale_id_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_conversation_start_time_isSet = false;
    m_conversation_start_time_isValid = false;

    m_conversation_end_time_isSet = false;
    m_conversation_end_time_isValid = false;

    m_conversation_duration_seconds_isSet = false;
    m_conversation_duration_seconds_isValid = false;

    m_conversation_end_state_isSet = false;
    m_conversation_end_state_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_number_of_turns_isSet = false;
    m_number_of_turns_isValid = false;

    m_invoked_intent_samples_isSet = false;
    m_invoked_intent_samples_isValid = false;

    m_originating_request_id_isSet = false;
    m_originating_request_id_isValid = false;
}

void OAISessionSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionSpecification::fromJsonObject(QJsonObject json) {

    m_bot_alias_id_isValid = ::OpenAPI::fromJsonValue(m_bot_alias_id, json[QString("botAliasId")]);
    m_bot_alias_id_isSet = !json[QString("botAliasId")].isNull() && m_bot_alias_id_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_locale_id_isValid = ::OpenAPI::fromJsonValue(m_locale_id, json[QString("localeId")]);
    m_locale_id_isSet = !json[QString("localeId")].isNull() && m_locale_id_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_conversation_start_time_isValid = ::OpenAPI::fromJsonValue(m_conversation_start_time, json[QString("conversationStartTime")]);
    m_conversation_start_time_isSet = !json[QString("conversationStartTime")].isNull() && m_conversation_start_time_isValid;

    m_conversation_end_time_isValid = ::OpenAPI::fromJsonValue(m_conversation_end_time, json[QString("conversationEndTime")]);
    m_conversation_end_time_isSet = !json[QString("conversationEndTime")].isNull() && m_conversation_end_time_isValid;

    m_conversation_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_conversation_duration_seconds, json[QString("conversationDurationSeconds")]);
    m_conversation_duration_seconds_isSet = !json[QString("conversationDurationSeconds")].isNull() && m_conversation_duration_seconds_isValid;

    m_conversation_end_state_isValid = ::OpenAPI::fromJsonValue(m_conversation_end_state, json[QString("conversationEndState")]);
    m_conversation_end_state_isSet = !json[QString("conversationEndState")].isNull() && m_conversation_end_state_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_number_of_turns_isValid = ::OpenAPI::fromJsonValue(m_number_of_turns, json[QString("numberOfTurns")]);
    m_number_of_turns_isSet = !json[QString("numberOfTurns")].isNull() && m_number_of_turns_isValid;

    m_invoked_intent_samples_isValid = ::OpenAPI::fromJsonValue(m_invoked_intent_samples, json[QString("invokedIntentSamples")]);
    m_invoked_intent_samples_isSet = !json[QString("invokedIntentSamples")].isNull() && m_invoked_intent_samples_isValid;

    m_originating_request_id_isValid = ::OpenAPI::fromJsonValue(m_originating_request_id, json[QString("originatingRequestId")]);
    m_originating_request_id_isSet = !json[QString("originatingRequestId")].isNull() && m_originating_request_id_isValid;
}

QString OAISessionSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_alias_id_isSet) {
        obj.insert(QString("botAliasId"), ::OpenAPI::toJsonValue(m_bot_alias_id));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_locale_id_isSet) {
        obj.insert(QString("localeId"), ::OpenAPI::toJsonValue(m_locale_id));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_conversation_start_time_isSet) {
        obj.insert(QString("conversationStartTime"), ::OpenAPI::toJsonValue(m_conversation_start_time));
    }
    if (m_conversation_end_time_isSet) {
        obj.insert(QString("conversationEndTime"), ::OpenAPI::toJsonValue(m_conversation_end_time));
    }
    if (m_conversation_duration_seconds_isSet) {
        obj.insert(QString("conversationDurationSeconds"), ::OpenAPI::toJsonValue(m_conversation_duration_seconds));
    }
    if (m_conversation_end_state.isSet()) {
        obj.insert(QString("conversationEndState"), ::OpenAPI::toJsonValue(m_conversation_end_state));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_number_of_turns_isSet) {
        obj.insert(QString("numberOfTurns"), ::OpenAPI::toJsonValue(m_number_of_turns));
    }
    if (m_invoked_intent_samples.isSet()) {
        obj.insert(QString("invokedIntentSamples"), ::OpenAPI::toJsonValue(m_invoked_intent_samples));
    }
    if (m_originating_request_id_isSet) {
        obj.insert(QString("originatingRequestId"), ::OpenAPI::toJsonValue(m_originating_request_id));
    }
    return obj;
}

QString OAISessionSpecification::getBotAliasId() const {
    return m_bot_alias_id;
}
void OAISessionSpecification::setBotAliasId(const QString &bot_alias_id) {
    m_bot_alias_id = bot_alias_id;
    m_bot_alias_id_isSet = true;
}

bool OAISessionSpecification::is_bot_alias_id_Set() const{
    return m_bot_alias_id_isSet;
}

bool OAISessionSpecification::is_bot_alias_id_Valid() const{
    return m_bot_alias_id_isValid;
}

QString OAISessionSpecification::getBotVersion() const {
    return m_bot_version;
}
void OAISessionSpecification::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAISessionSpecification::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAISessionSpecification::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QString OAISessionSpecification::getLocaleId() const {
    return m_locale_id;
}
void OAISessionSpecification::setLocaleId(const QString &locale_id) {
    m_locale_id = locale_id;
    m_locale_id_isSet = true;
}

bool OAISessionSpecification::is_locale_id_Set() const{
    return m_locale_id_isSet;
}

bool OAISessionSpecification::is_locale_id_Valid() const{
    return m_locale_id_isValid;
}

QString OAISessionSpecification::getChannel() const {
    return m_channel;
}
void OAISessionSpecification::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAISessionSpecification::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAISessionSpecification::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAISessionSpecification::getSessionId() const {
    return m_session_id;
}
void OAISessionSpecification::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAISessionSpecification::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAISessionSpecification::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QDateTime OAISessionSpecification::getConversationStartTime() const {
    return m_conversation_start_time;
}
void OAISessionSpecification::setConversationStartTime(const QDateTime &conversation_start_time) {
    m_conversation_start_time = conversation_start_time;
    m_conversation_start_time_isSet = true;
}

bool OAISessionSpecification::is_conversation_start_time_Set() const{
    return m_conversation_start_time_isSet;
}

bool OAISessionSpecification::is_conversation_start_time_Valid() const{
    return m_conversation_start_time_isValid;
}

QDateTime OAISessionSpecification::getConversationEndTime() const {
    return m_conversation_end_time;
}
void OAISessionSpecification::setConversationEndTime(const QDateTime &conversation_end_time) {
    m_conversation_end_time = conversation_end_time;
    m_conversation_end_time_isSet = true;
}

bool OAISessionSpecification::is_conversation_end_time_Set() const{
    return m_conversation_end_time_isSet;
}

bool OAISessionSpecification::is_conversation_end_time_Valid() const{
    return m_conversation_end_time_isValid;
}

qint32 OAISessionSpecification::getConversationDurationSeconds() const {
    return m_conversation_duration_seconds;
}
void OAISessionSpecification::setConversationDurationSeconds(const qint32 &conversation_duration_seconds) {
    m_conversation_duration_seconds = conversation_duration_seconds;
    m_conversation_duration_seconds_isSet = true;
}

bool OAISessionSpecification::is_conversation_duration_seconds_Set() const{
    return m_conversation_duration_seconds_isSet;
}

bool OAISessionSpecification::is_conversation_duration_seconds_Valid() const{
    return m_conversation_duration_seconds_isValid;
}

OAIConversationEndState OAISessionSpecification::getConversationEndState() const {
    return m_conversation_end_state;
}
void OAISessionSpecification::setConversationEndState(const OAIConversationEndState &conversation_end_state) {
    m_conversation_end_state = conversation_end_state;
    m_conversation_end_state_isSet = true;
}

bool OAISessionSpecification::is_conversation_end_state_Set() const{
    return m_conversation_end_state_isSet;
}

bool OAISessionSpecification::is_conversation_end_state_Valid() const{
    return m_conversation_end_state_isValid;
}

OAIAnalyticsModality OAISessionSpecification::getMode() const {
    return m_mode;
}
void OAISessionSpecification::setMode(const OAIAnalyticsModality &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAISessionSpecification::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAISessionSpecification::is_mode_Valid() const{
    return m_mode_isValid;
}

qint32 OAISessionSpecification::getNumberOfTurns() const {
    return m_number_of_turns;
}
void OAISessionSpecification::setNumberOfTurns(const qint32 &number_of_turns) {
    m_number_of_turns = number_of_turns;
    m_number_of_turns_isSet = true;
}

bool OAISessionSpecification::is_number_of_turns_Set() const{
    return m_number_of_turns_isSet;
}

bool OAISessionSpecification::is_number_of_turns_Valid() const{
    return m_number_of_turns_isValid;
}

QList OAISessionSpecification::getInvokedIntentSamples() const {
    return m_invoked_intent_samples;
}
void OAISessionSpecification::setInvokedIntentSamples(const QList &invoked_intent_samples) {
    m_invoked_intent_samples = invoked_intent_samples;
    m_invoked_intent_samples_isSet = true;
}

bool OAISessionSpecification::is_invoked_intent_samples_Set() const{
    return m_invoked_intent_samples_isSet;
}

bool OAISessionSpecification::is_invoked_intent_samples_Valid() const{
    return m_invoked_intent_samples_isValid;
}

QString OAISessionSpecification::getOriginatingRequestId() const {
    return m_originating_request_id;
}
void OAISessionSpecification::setOriginatingRequestId(const QString &originating_request_id) {
    m_originating_request_id = originating_request_id;
    m_originating_request_id_isSet = true;
}

bool OAISessionSpecification::is_originating_request_id_Set() const{
    return m_originating_request_id_isSet;
}

bool OAISessionSpecification::is_originating_request_id_Valid() const{
    return m_originating_request_id_isValid;
}

bool OAISessionSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_alias_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_end_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_turns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoked_intent_samples.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_originating_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
