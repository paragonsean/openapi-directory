/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateBotRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateBotRequest::OAIUpdateBotRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateBotRequest::OAIUpdateBotRequest() {
    this->initializeModel();
}

OAIUpdateBotRequest::~OAIUpdateBotRequest() {}

void OAIUpdateBotRequest::initializeModel() {

    m_bot_name_isSet = false;
    m_bot_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_data_privacy_isSet = false;
    m_data_privacy_isValid = false;

    m_idle_session_ttlin_seconds_isSet = false;
    m_idle_session_ttlin_seconds_isValid = false;

    m_bot_type_isSet = false;
    m_bot_type_isValid = false;

    m_bot_members_isSet = false;
    m_bot_members_isValid = false;
}

void OAIUpdateBotRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateBotRequest::fromJsonObject(QJsonObject json) {

    m_bot_name_isValid = ::OpenAPI::fromJsonValue(m_bot_name, json[QString("botName")]);
    m_bot_name_isSet = !json[QString("botName")].isNull() && m_bot_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_data_privacy_isValid = ::OpenAPI::fromJsonValue(m_data_privacy, json[QString("dataPrivacy")]);
    m_data_privacy_isSet = !json[QString("dataPrivacy")].isNull() && m_data_privacy_isValid;

    m_idle_session_ttlin_seconds_isValid = ::OpenAPI::fromJsonValue(m_idle_session_ttlin_seconds, json[QString("idleSessionTTLInSeconds")]);
    m_idle_session_ttlin_seconds_isSet = !json[QString("idleSessionTTLInSeconds")].isNull() && m_idle_session_ttlin_seconds_isValid;

    m_bot_type_isValid = ::OpenAPI::fromJsonValue(m_bot_type, json[QString("botType")]);
    m_bot_type_isSet = !json[QString("botType")].isNull() && m_bot_type_isValid;

    m_bot_members_isValid = ::OpenAPI::fromJsonValue(m_bot_members, json[QString("botMembers")]);
    m_bot_members_isSet = !json[QString("botMembers")].isNull() && m_bot_members_isValid;
}

QString OAIUpdateBotRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateBotRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_name_isSet) {
        obj.insert(QString("botName"), ::OpenAPI::toJsonValue(m_bot_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_data_privacy.isSet()) {
        obj.insert(QString("dataPrivacy"), ::OpenAPI::toJsonValue(m_data_privacy));
    }
    if (m_idle_session_ttlin_seconds_isSet) {
        obj.insert(QString("idleSessionTTLInSeconds"), ::OpenAPI::toJsonValue(m_idle_session_ttlin_seconds));
    }
    if (m_bot_type.isSet()) {
        obj.insert(QString("botType"), ::OpenAPI::toJsonValue(m_bot_type));
    }
    if (m_bot_members.isSet()) {
        obj.insert(QString("botMembers"), ::OpenAPI::toJsonValue(m_bot_members));
    }
    return obj;
}

QString OAIUpdateBotRequest::getBotName() const {
    return m_bot_name;
}
void OAIUpdateBotRequest::setBotName(const QString &bot_name) {
    m_bot_name = bot_name;
    m_bot_name_isSet = true;
}

bool OAIUpdateBotRequest::is_bot_name_Set() const{
    return m_bot_name_isSet;
}

bool OAIUpdateBotRequest::is_bot_name_Valid() const{
    return m_bot_name_isValid;
}

QString OAIUpdateBotRequest::getDescription() const {
    return m_description;
}
void OAIUpdateBotRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateBotRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateBotRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateBotRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateBotRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateBotRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateBotRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAICreateBotRequest_dataPrivacy OAIUpdateBotRequest::getDataPrivacy() const {
    return m_data_privacy;
}
void OAIUpdateBotRequest::setDataPrivacy(const OAICreateBotRequest_dataPrivacy &data_privacy) {
    m_data_privacy = data_privacy;
    m_data_privacy_isSet = true;
}

bool OAIUpdateBotRequest::is_data_privacy_Set() const{
    return m_data_privacy_isSet;
}

bool OAIUpdateBotRequest::is_data_privacy_Valid() const{
    return m_data_privacy_isValid;
}

qint32 OAIUpdateBotRequest::getIdleSessionTtlinSeconds() const {
    return m_idle_session_ttlin_seconds;
}
void OAIUpdateBotRequest::setIdleSessionTtlinSeconds(const qint32 &idle_session_ttlin_seconds) {
    m_idle_session_ttlin_seconds = idle_session_ttlin_seconds;
    m_idle_session_ttlin_seconds_isSet = true;
}

bool OAIUpdateBotRequest::is_idle_session_ttlin_seconds_Set() const{
    return m_idle_session_ttlin_seconds_isSet;
}

bool OAIUpdateBotRequest::is_idle_session_ttlin_seconds_Valid() const{
    return m_idle_session_ttlin_seconds_isValid;
}

OAIBotType OAIUpdateBotRequest::getBotType() const {
    return m_bot_type;
}
void OAIUpdateBotRequest::setBotType(const OAIBotType &bot_type) {
    m_bot_type = bot_type;
    m_bot_type_isSet = true;
}

bool OAIUpdateBotRequest::is_bot_type_Set() const{
    return m_bot_type_isSet;
}

bool OAIUpdateBotRequest::is_bot_type_Valid() const{
    return m_bot_type_isValid;
}

QList OAIUpdateBotRequest::getBotMembers() const {
    return m_bot_members;
}
void OAIUpdateBotRequest::setBotMembers(const QList &bot_members) {
    m_bot_members = bot_members;
    m_bot_members_isSet = true;
}

bool OAIUpdateBotRequest::is_bot_members_Set() const{
    return m_bot_members_isSet;
}

bool OAIUpdateBotRequest::is_bot_members_Valid() const{
    return m_bot_members_isValid;
}

bool OAIUpdateBotRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_session_ttlin_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_members.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateBotRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bot_name_isValid && m_role_arn_isValid && m_data_privacy_isValid && m_idle_session_ttlin_seconds_isValid && true;
}

} // namespace OpenAPI
