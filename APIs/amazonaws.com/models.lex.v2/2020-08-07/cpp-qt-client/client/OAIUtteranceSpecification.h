/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUtteranceSpecification.h
 *
 * An object containing information about a specific utterance.
 */

#ifndef OAIUtteranceSpecification_H
#define OAIUtteranceSpecification_H

#include <QJsonObject>

#include "OAIAnalyticsModality.h"
#include "OAIIntentState.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUtteranceSpecification : public OAIObject {
public:
    OAIUtteranceSpecification();
    OAIUtteranceSpecification(QString json);
    ~OAIUtteranceSpecification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBotAliasId() const;
    void setBotAliasId(const QString &bot_alias_id);
    bool is_bot_alias_id_Set() const;
    bool is_bot_alias_id_Valid() const;

    QString getBotVersion() const;
    void setBotVersion(const QString &bot_version);
    bool is_bot_version_Set() const;
    bool is_bot_version_Valid() const;

    QString getLocaleId() const;
    void setLocaleId(const QString &locale_id);
    bool is_locale_id_Set() const;
    bool is_locale_id_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    QString getChannel() const;
    void setChannel(const QString &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    OAIAnalyticsModality getMode() const;
    void setMode(const OAIAnalyticsModality &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    QDateTime getConversationStartTime() const;
    void setConversationStartTime(const QDateTime &conversation_start_time);
    bool is_conversation_start_time_Set() const;
    bool is_conversation_start_time_Valid() const;

    QDateTime getConversationEndTime() const;
    void setConversationEndTime(const QDateTime &conversation_end_time);
    bool is_conversation_end_time_Set() const;
    bool is_conversation_end_time_Valid() const;

    QString getUtterance() const;
    void setUtterance(const QString &utterance);
    bool is_utterance_Set() const;
    bool is_utterance_Valid() const;

    QDateTime getUtteranceTimestamp() const;
    void setUtteranceTimestamp(const QDateTime &utterance_timestamp);
    bool is_utterance_timestamp_Set() const;
    bool is_utterance_timestamp_Valid() const;

    qint32 getAudioVoiceDurationMillis() const;
    void setAudioVoiceDurationMillis(const qint32 &audio_voice_duration_millis);
    bool is_audio_voice_duration_millis_Set() const;
    bool is_audio_voice_duration_millis_Valid() const;

    bool getUtteranceUnderstood() const;
    void setUtteranceUnderstood(const bool &utterance_understood);
    bool is_utterance_understood_Set() const;
    bool is_utterance_understood_Valid() const;

    QString getInputType() const;
    void setInputType(const QString &input_type);
    bool is_input_type_Set() const;
    bool is_input_type_Valid() const;

    QString getOutputType() const;
    void setOutputType(const QString &output_type);
    bool is_output_type_Set() const;
    bool is_output_type_Valid() const;

    QString getAssociatedIntentName() const;
    void setAssociatedIntentName(const QString &associated_intent_name);
    bool is_associated_intent_name_Set() const;
    bool is_associated_intent_name_Valid() const;

    QString getAssociatedSlotName() const;
    void setAssociatedSlotName(const QString &associated_slot_name);
    bool is_associated_slot_name_Set() const;
    bool is_associated_slot_name_Valid() const;

    OAIIntentState getIntentState() const;
    void setIntentState(const OAIIntentState &intent_state);
    bool is_intent_state_Set() const;
    bool is_intent_state_Valid() const;

    QString getDialogActionType() const;
    void setDialogActionType(const QString &dialog_action_type);
    bool is_dialog_action_type_Set() const;
    bool is_dialog_action_type_Valid() const;

    QString getBotResponseAudioVoiceId() const;
    void setBotResponseAudioVoiceId(const QString &bot_response_audio_voice_id);
    bool is_bot_response_audio_voice_id_Set() const;
    bool is_bot_response_audio_voice_id_Valid() const;

    QString getSlotsFilledInSession() const;
    void setSlotsFilledInSession(const QString &slots_filled_in_session);
    bool is_slots_filled_in_session_Set() const;
    bool is_slots_filled_in_session_Valid() const;

    QString getUtteranceRequestId() const;
    void setUtteranceRequestId(const QString &utterance_request_id);
    bool is_utterance_request_id_Set() const;
    bool is_utterance_request_id_Valid() const;

    QList getBotResponses() const;
    void setBotResponses(const QList &bot_responses);
    bool is_bot_responses_Set() const;
    bool is_bot_responses_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bot_alias_id;
    bool m_bot_alias_id_isSet;
    bool m_bot_alias_id_isValid;

    QString m_bot_version;
    bool m_bot_version_isSet;
    bool m_bot_version_isValid;

    QString m_locale_id;
    bool m_locale_id_isSet;
    bool m_locale_id_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;

    QString m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    OAIAnalyticsModality m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    QDateTime m_conversation_start_time;
    bool m_conversation_start_time_isSet;
    bool m_conversation_start_time_isValid;

    QDateTime m_conversation_end_time;
    bool m_conversation_end_time_isSet;
    bool m_conversation_end_time_isValid;

    QString m_utterance;
    bool m_utterance_isSet;
    bool m_utterance_isValid;

    QDateTime m_utterance_timestamp;
    bool m_utterance_timestamp_isSet;
    bool m_utterance_timestamp_isValid;

    qint32 m_audio_voice_duration_millis;
    bool m_audio_voice_duration_millis_isSet;
    bool m_audio_voice_duration_millis_isValid;

    bool m_utterance_understood;
    bool m_utterance_understood_isSet;
    bool m_utterance_understood_isValid;

    QString m_input_type;
    bool m_input_type_isSet;
    bool m_input_type_isValid;

    QString m_output_type;
    bool m_output_type_isSet;
    bool m_output_type_isValid;

    QString m_associated_intent_name;
    bool m_associated_intent_name_isSet;
    bool m_associated_intent_name_isValid;

    QString m_associated_slot_name;
    bool m_associated_slot_name_isSet;
    bool m_associated_slot_name_isValid;

    OAIIntentState m_intent_state;
    bool m_intent_state_isSet;
    bool m_intent_state_isValid;

    QString m_dialog_action_type;
    bool m_dialog_action_type_isSet;
    bool m_dialog_action_type_isValid;

    QString m_bot_response_audio_voice_id;
    bool m_bot_response_audio_voice_id_isSet;
    bool m_bot_response_audio_voice_id_isValid;

    QString m_slots_filled_in_session;
    bool m_slots_filled_in_session_isSet;
    bool m_slots_filled_in_session_isValid;

    QString m_utterance_request_id;
    bool m_utterance_request_id_isSet;
    bool m_utterance_request_id_isValid;

    QList m_bot_responses;
    bool m_bot_responses_isSet;
    bool m_bot_responses_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUtteranceSpecification)

#endif // OAIUtteranceSpecification_H
