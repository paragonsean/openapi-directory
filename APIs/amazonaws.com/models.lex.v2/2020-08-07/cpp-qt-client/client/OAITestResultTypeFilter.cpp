/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestResultTypeFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestResultTypeFilter::OAITestResultTypeFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestResultTypeFilter::OAITestResultTypeFilter() {
    this->initializeModel();
}

OAITestResultTypeFilter::~OAITestResultTypeFilter() {}

void OAITestResultTypeFilter::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITestResultTypeFilter::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITestResultTypeFilter::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OverallTestResults", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestResultTypeFilter::OVERALLTESTRESULTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ConversationLevelTestResults", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestResultTypeFilter::CONVERSATIONLEVELTESTRESULTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IntentClassificationTestResults", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestResultTypeFilter::INTENTCLASSIFICATIONTESTRESULTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SlotResolutionTestResults", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestResultTypeFilter::SLOTRESOLUTIONTESTRESULTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UtteranceLevelResults", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestResultTypeFilter::UTTERANCELEVELRESULTS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITestResultTypeFilter::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITestResultTypeFilter::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITestResultTypeFilter::OVERALLTESTRESULTS:
            val = "OverallTestResults";
            break;
        case eOAITestResultTypeFilter::CONVERSATIONLEVELTESTRESULTS:
            val = "ConversationLevelTestResults";
            break;
        case eOAITestResultTypeFilter::INTENTCLASSIFICATIONTESTRESULTS:
            val = "IntentClassificationTestResults";
            break;
        case eOAITestResultTypeFilter::SLOTRESOLUTIONTESTRESULTS:
            val = "SlotResolutionTestResults";
            break;
        case eOAITestResultTypeFilter::UTTERANCELEVELRESULTS:
            val = "UtteranceLevelResults";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITestResultTypeFilter::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITestResultTypeFilter::eOAITestResultTypeFilter OAITestResultTypeFilter::getValue() const {
    return m_value;
}

void OAITestResultTypeFilter::setValue(const OAITestResultTypeFilter::eOAITestResultTypeFilter& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITestResultTypeFilter::isSet() const {
    
    return m_value_isSet;
}

bool OAITestResultTypeFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
