/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBotLocaleStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBotLocaleStatus::OAIBotLocaleStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBotLocaleStatus::OAIBotLocaleStatus() {
    this->initializeModel();
}

OAIBotLocaleStatus::~OAIBotLocaleStatus() {}

void OAIBotLocaleStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBotLocaleStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBotLocaleStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Creating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotLocaleStatus::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Building", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotLocaleStatus::BUILDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Built", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotLocaleStatus::BUILT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReadyExpressTesting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotLocaleStatus::READYEXPRESSTESTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotLocaleStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotLocaleStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotBuilt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotLocaleStatus::NOTBUILT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Importing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotLocaleStatus::IMPORTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Processing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotLocaleStatus::PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBotLocaleStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBotLocaleStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBotLocaleStatus::CREATING:
            val = "Creating";
            break;
        case eOAIBotLocaleStatus::BUILDING:
            val = "Building";
            break;
        case eOAIBotLocaleStatus::BUILT:
            val = "Built";
            break;
        case eOAIBotLocaleStatus::READYEXPRESSTESTING:
            val = "ReadyExpressTesting";
            break;
        case eOAIBotLocaleStatus::FAILED:
            val = "Failed";
            break;
        case eOAIBotLocaleStatus::DELETING:
            val = "Deleting";
            break;
        case eOAIBotLocaleStatus::NOTBUILT:
            val = "NotBuilt";
            break;
        case eOAIBotLocaleStatus::IMPORTING:
            val = "Importing";
            break;
        case eOAIBotLocaleStatus::PROCESSING:
            val = "Processing";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBotLocaleStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBotLocaleStatus::eOAIBotLocaleStatus OAIBotLocaleStatus::getValue() const {
    return m_value;
}

void OAIBotLocaleStatus::setValue(const OAIBotLocaleStatus::eOAIBotLocaleStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBotLocaleStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIBotLocaleStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
