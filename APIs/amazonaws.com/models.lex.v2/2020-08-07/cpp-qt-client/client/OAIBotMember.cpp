/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBotMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBotMember::OAIBotMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBotMember::OAIBotMember() {
    this->initializeModel();
}

OAIBotMember::~OAIBotMember() {}

void OAIBotMember::initializeModel() {

    m_bot_member_id_isSet = false;
    m_bot_member_id_isValid = false;

    m_bot_member_name_isSet = false;
    m_bot_member_name_isValid = false;

    m_bot_member_alias_id_isSet = false;
    m_bot_member_alias_id_isValid = false;

    m_bot_member_alias_name_isSet = false;
    m_bot_member_alias_name_isValid = false;

    m_bot_member_version_isSet = false;
    m_bot_member_version_isValid = false;
}

void OAIBotMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBotMember::fromJsonObject(QJsonObject json) {

    m_bot_member_id_isValid = ::OpenAPI::fromJsonValue(m_bot_member_id, json[QString("botMemberId")]);
    m_bot_member_id_isSet = !json[QString("botMemberId")].isNull() && m_bot_member_id_isValid;

    m_bot_member_name_isValid = ::OpenAPI::fromJsonValue(m_bot_member_name, json[QString("botMemberName")]);
    m_bot_member_name_isSet = !json[QString("botMemberName")].isNull() && m_bot_member_name_isValid;

    m_bot_member_alias_id_isValid = ::OpenAPI::fromJsonValue(m_bot_member_alias_id, json[QString("botMemberAliasId")]);
    m_bot_member_alias_id_isSet = !json[QString("botMemberAliasId")].isNull() && m_bot_member_alias_id_isValid;

    m_bot_member_alias_name_isValid = ::OpenAPI::fromJsonValue(m_bot_member_alias_name, json[QString("botMemberAliasName")]);
    m_bot_member_alias_name_isSet = !json[QString("botMemberAliasName")].isNull() && m_bot_member_alias_name_isValid;

    m_bot_member_version_isValid = ::OpenAPI::fromJsonValue(m_bot_member_version, json[QString("botMemberVersion")]);
    m_bot_member_version_isSet = !json[QString("botMemberVersion")].isNull() && m_bot_member_version_isValid;
}

QString OAIBotMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBotMember::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_member_id_isSet) {
        obj.insert(QString("botMemberId"), ::OpenAPI::toJsonValue(m_bot_member_id));
    }
    if (m_bot_member_name_isSet) {
        obj.insert(QString("botMemberName"), ::OpenAPI::toJsonValue(m_bot_member_name));
    }
    if (m_bot_member_alias_id_isSet) {
        obj.insert(QString("botMemberAliasId"), ::OpenAPI::toJsonValue(m_bot_member_alias_id));
    }
    if (m_bot_member_alias_name_isSet) {
        obj.insert(QString("botMemberAliasName"), ::OpenAPI::toJsonValue(m_bot_member_alias_name));
    }
    if (m_bot_member_version_isSet) {
        obj.insert(QString("botMemberVersion"), ::OpenAPI::toJsonValue(m_bot_member_version));
    }
    return obj;
}

QString OAIBotMember::getBotMemberId() const {
    return m_bot_member_id;
}
void OAIBotMember::setBotMemberId(const QString &bot_member_id) {
    m_bot_member_id = bot_member_id;
    m_bot_member_id_isSet = true;
}

bool OAIBotMember::is_bot_member_id_Set() const{
    return m_bot_member_id_isSet;
}

bool OAIBotMember::is_bot_member_id_Valid() const{
    return m_bot_member_id_isValid;
}

QString OAIBotMember::getBotMemberName() const {
    return m_bot_member_name;
}
void OAIBotMember::setBotMemberName(const QString &bot_member_name) {
    m_bot_member_name = bot_member_name;
    m_bot_member_name_isSet = true;
}

bool OAIBotMember::is_bot_member_name_Set() const{
    return m_bot_member_name_isSet;
}

bool OAIBotMember::is_bot_member_name_Valid() const{
    return m_bot_member_name_isValid;
}

QString OAIBotMember::getBotMemberAliasId() const {
    return m_bot_member_alias_id;
}
void OAIBotMember::setBotMemberAliasId(const QString &bot_member_alias_id) {
    m_bot_member_alias_id = bot_member_alias_id;
    m_bot_member_alias_id_isSet = true;
}

bool OAIBotMember::is_bot_member_alias_id_Set() const{
    return m_bot_member_alias_id_isSet;
}

bool OAIBotMember::is_bot_member_alias_id_Valid() const{
    return m_bot_member_alias_id_isValid;
}

QString OAIBotMember::getBotMemberAliasName() const {
    return m_bot_member_alias_name;
}
void OAIBotMember::setBotMemberAliasName(const QString &bot_member_alias_name) {
    m_bot_member_alias_name = bot_member_alias_name;
    m_bot_member_alias_name_isSet = true;
}

bool OAIBotMember::is_bot_member_alias_name_Set() const{
    return m_bot_member_alias_name_isSet;
}

bool OAIBotMember::is_bot_member_alias_name_Valid() const{
    return m_bot_member_alias_name_isValid;
}

QString OAIBotMember::getBotMemberVersion() const {
    return m_bot_member_version;
}
void OAIBotMember::setBotMemberVersion(const QString &bot_member_version) {
    m_bot_member_version = bot_member_version;
    m_bot_member_version_isSet = true;
}

bool OAIBotMember::is_bot_member_version_Set() const{
    return m_bot_member_version_isSet;
}

bool OAIBotMember::is_bot_member_version_Valid() const{
    return m_bot_member_version_isValid;
}

bool OAIBotMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_member_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_member_alias_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_member_alias_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_member_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBotMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bot_member_id_isValid && m_bot_member_name_isValid && m_bot_member_alias_id_isValid && m_bot_member_alias_name_isValid && m_bot_member_version_isValid && true;
}

} // namespace OpenAPI
