/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3BucketTranscriptSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3BucketTranscriptSource::OAIS3BucketTranscriptSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3BucketTranscriptSource::OAIS3BucketTranscriptSource() {
    this->initializeModel();
}

OAIS3BucketTranscriptSource::~OAIS3BucketTranscriptSource() {}

void OAIS3BucketTranscriptSource::initializeModel() {

    m_s3_bucket_name_isSet = false;
    m_s3_bucket_name_isValid = false;

    m_path_format_isSet = false;
    m_path_format_isValid = false;

    m_transcript_format_isSet = false;
    m_transcript_format_isValid = false;

    m_transcript_filter_isSet = false;
    m_transcript_filter_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;
}

void OAIS3BucketTranscriptSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3BucketTranscriptSource::fromJsonObject(QJsonObject json) {

    m_s3_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_name, json[QString("s3BucketName")]);
    m_s3_bucket_name_isSet = !json[QString("s3BucketName")].isNull() && m_s3_bucket_name_isValid;

    m_path_format_isValid = ::OpenAPI::fromJsonValue(m_path_format, json[QString("pathFormat")]);
    m_path_format_isSet = !json[QString("pathFormat")].isNull() && m_path_format_isValid;

    m_transcript_format_isValid = ::OpenAPI::fromJsonValue(m_transcript_format, json[QString("transcriptFormat")]);
    m_transcript_format_isSet = !json[QString("transcriptFormat")].isNull() && m_transcript_format_isValid;

    m_transcript_filter_isValid = ::OpenAPI::fromJsonValue(m_transcript_filter, json[QString("transcriptFilter")]);
    m_transcript_filter_isSet = !json[QString("transcriptFilter")].isNull() && m_transcript_filter_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("kmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("kmsKeyArn")].isNull() && m_kms_key_arn_isValid;
}

QString OAIS3BucketTranscriptSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3BucketTranscriptSource::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket_name_isSet) {
        obj.insert(QString("s3BucketName"), ::OpenAPI::toJsonValue(m_s3_bucket_name));
    }
    if (m_path_format.isSet()) {
        obj.insert(QString("pathFormat"), ::OpenAPI::toJsonValue(m_path_format));
    }
    if (m_transcript_format.isSet()) {
        obj.insert(QString("transcriptFormat"), ::OpenAPI::toJsonValue(m_transcript_format));
    }
    if (m_transcript_filter.isSet()) {
        obj.insert(QString("transcriptFilter"), ::OpenAPI::toJsonValue(m_transcript_filter));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("kmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    return obj;
}

QString OAIS3BucketTranscriptSource::getS3BucketName() const {
    return m_s3_bucket_name;
}
void OAIS3BucketTranscriptSource::setS3BucketName(const QString &s3_bucket_name) {
    m_s3_bucket_name = s3_bucket_name;
    m_s3_bucket_name_isSet = true;
}

bool OAIS3BucketTranscriptSource::is_s3_bucket_name_Set() const{
    return m_s3_bucket_name_isSet;
}

bool OAIS3BucketTranscriptSource::is_s3_bucket_name_Valid() const{
    return m_s3_bucket_name_isValid;
}

OAIS3BucketTranscriptSource_pathFormat OAIS3BucketTranscriptSource::getPathFormat() const {
    return m_path_format;
}
void OAIS3BucketTranscriptSource::setPathFormat(const OAIS3BucketTranscriptSource_pathFormat &path_format) {
    m_path_format = path_format;
    m_path_format_isSet = true;
}

bool OAIS3BucketTranscriptSource::is_path_format_Set() const{
    return m_path_format_isSet;
}

bool OAIS3BucketTranscriptSource::is_path_format_Valid() const{
    return m_path_format_isValid;
}

OAITranscriptFormat OAIS3BucketTranscriptSource::getTranscriptFormat() const {
    return m_transcript_format;
}
void OAIS3BucketTranscriptSource::setTranscriptFormat(const OAITranscriptFormat &transcript_format) {
    m_transcript_format = transcript_format;
    m_transcript_format_isSet = true;
}

bool OAIS3BucketTranscriptSource::is_transcript_format_Set() const{
    return m_transcript_format_isSet;
}

bool OAIS3BucketTranscriptSource::is_transcript_format_Valid() const{
    return m_transcript_format_isValid;
}

OAIS3BucketTranscriptSource_transcriptFilter OAIS3BucketTranscriptSource::getTranscriptFilter() const {
    return m_transcript_filter;
}
void OAIS3BucketTranscriptSource::setTranscriptFilter(const OAIS3BucketTranscriptSource_transcriptFilter &transcript_filter) {
    m_transcript_filter = transcript_filter;
    m_transcript_filter_isSet = true;
}

bool OAIS3BucketTranscriptSource::is_transcript_filter_Set() const{
    return m_transcript_filter_isSet;
}

bool OAIS3BucketTranscriptSource::is_transcript_filter_Valid() const{
    return m_transcript_filter_isValid;
}

QString OAIS3BucketTranscriptSource::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIS3BucketTranscriptSource::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIS3BucketTranscriptSource::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIS3BucketTranscriptSource::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

bool OAIS3BucketTranscriptSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3BucketTranscriptSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_bucket_name_isValid && m_transcript_format_isValid && true;
}

} // namespace OpenAPI
