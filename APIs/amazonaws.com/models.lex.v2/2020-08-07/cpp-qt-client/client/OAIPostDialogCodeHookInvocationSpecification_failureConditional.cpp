/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostDialogCodeHookInvocationSpecification_failureConditional.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostDialogCodeHookInvocationSpecification_failureConditional::OAIPostDialogCodeHookInvocationSpecification_failureConditional(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostDialogCodeHookInvocationSpecification_failureConditional::OAIPostDialogCodeHookInvocationSpecification_failureConditional() {
    this->initializeModel();
}

OAIPostDialogCodeHookInvocationSpecification_failureConditional::~OAIPostDialogCodeHookInvocationSpecification_failureConditional() {}

void OAIPostDialogCodeHookInvocationSpecification_failureConditional::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_conditional_branches_isSet = false;
    m_conditional_branches_isValid = false;

    m_default_branch_isSet = false;
    m_default_branch_isValid = false;
}

void OAIPostDialogCodeHookInvocationSpecification_failureConditional::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostDialogCodeHookInvocationSpecification_failureConditional::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_conditional_branches_isValid = ::OpenAPI::fromJsonValue(m_conditional_branches, json[QString("conditionalBranches")]);
    m_conditional_branches_isSet = !json[QString("conditionalBranches")].isNull() && m_conditional_branches_isValid;

    m_default_branch_isValid = ::OpenAPI::fromJsonValue(m_default_branch, json[QString("defaultBranch")]);
    m_default_branch_isSet = !json[QString("defaultBranch")].isNull() && m_default_branch_isValid;
}

QString OAIPostDialogCodeHookInvocationSpecification_failureConditional::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostDialogCodeHookInvocationSpecification_failureConditional::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_conditional_branches.isSet()) {
        obj.insert(QString("conditionalBranches"), ::OpenAPI::toJsonValue(m_conditional_branches));
    }
    if (m_default_branch.isSet()) {
        obj.insert(QString("defaultBranch"), ::OpenAPI::toJsonValue(m_default_branch));
    }
    return obj;
}

bool OAIPostDialogCodeHookInvocationSpecification_failureConditional::getActive() const {
    return m_active;
}
void OAIPostDialogCodeHookInvocationSpecification_failureConditional::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPostDialogCodeHookInvocationSpecification_failureConditional::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPostDialogCodeHookInvocationSpecification_failureConditional::is_active_Valid() const{
    return m_active_isValid;
}

QList OAIPostDialogCodeHookInvocationSpecification_failureConditional::getConditionalBranches() const {
    return m_conditional_branches;
}
void OAIPostDialogCodeHookInvocationSpecification_failureConditional::setConditionalBranches(const QList &conditional_branches) {
    m_conditional_branches = conditional_branches;
    m_conditional_branches_isSet = true;
}

bool OAIPostDialogCodeHookInvocationSpecification_failureConditional::is_conditional_branches_Set() const{
    return m_conditional_branches_isSet;
}

bool OAIPostDialogCodeHookInvocationSpecification_failureConditional::is_conditional_branches_Valid() const{
    return m_conditional_branches_isValid;
}

OAIConditionalSpecification_defaultBranch OAIPostDialogCodeHookInvocationSpecification_failureConditional::getDefaultBranch() const {
    return m_default_branch;
}
void OAIPostDialogCodeHookInvocationSpecification_failureConditional::setDefaultBranch(const OAIConditionalSpecification_defaultBranch &default_branch) {
    m_default_branch = default_branch;
    m_default_branch_isSet = true;
}

bool OAIPostDialogCodeHookInvocationSpecification_failureConditional::is_default_branch_Set() const{
    return m_default_branch_isSet;
}

bool OAIPostDialogCodeHookInvocationSpecification_failureConditional::is_default_branch_Valid() const{
    return m_default_branch_isValid;
}

bool OAIPostDialogCodeHookInvocationSpecification_failureConditional::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_branches.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostDialogCodeHookInvocationSpecification_failureConditional::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_conditional_branches_isValid && m_default_branch_isValid && true;
}

} // namespace OpenAPI
