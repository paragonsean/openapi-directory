/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudWatchLogGroupLogDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudWatchLogGroupLogDestination::OAICloudWatchLogGroupLogDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudWatchLogGroupLogDestination::OAICloudWatchLogGroupLogDestination() {
    this->initializeModel();
}

OAICloudWatchLogGroupLogDestination::~OAICloudWatchLogGroupLogDestination() {}

void OAICloudWatchLogGroupLogDestination::initializeModel() {

    m_cloud_watch_log_group_arn_isSet = false;
    m_cloud_watch_log_group_arn_isValid = false;

    m_log_prefix_isSet = false;
    m_log_prefix_isValid = false;
}

void OAICloudWatchLogGroupLogDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudWatchLogGroupLogDestination::fromJsonObject(QJsonObject json) {

    m_cloud_watch_log_group_arn_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_log_group_arn, json[QString("cloudWatchLogGroupArn")]);
    m_cloud_watch_log_group_arn_isSet = !json[QString("cloudWatchLogGroupArn")].isNull() && m_cloud_watch_log_group_arn_isValid;

    m_log_prefix_isValid = ::OpenAPI::fromJsonValue(m_log_prefix, json[QString("logPrefix")]);
    m_log_prefix_isSet = !json[QString("logPrefix")].isNull() && m_log_prefix_isValid;
}

QString OAICloudWatchLogGroupLogDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudWatchLogGroupLogDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_watch_log_group_arn_isSet) {
        obj.insert(QString("cloudWatchLogGroupArn"), ::OpenAPI::toJsonValue(m_cloud_watch_log_group_arn));
    }
    if (m_log_prefix_isSet) {
        obj.insert(QString("logPrefix"), ::OpenAPI::toJsonValue(m_log_prefix));
    }
    return obj;
}

QString OAICloudWatchLogGroupLogDestination::getCloudWatchLogGroupArn() const {
    return m_cloud_watch_log_group_arn;
}
void OAICloudWatchLogGroupLogDestination::setCloudWatchLogGroupArn(const QString &cloud_watch_log_group_arn) {
    m_cloud_watch_log_group_arn = cloud_watch_log_group_arn;
    m_cloud_watch_log_group_arn_isSet = true;
}

bool OAICloudWatchLogGroupLogDestination::is_cloud_watch_log_group_arn_Set() const{
    return m_cloud_watch_log_group_arn_isSet;
}

bool OAICloudWatchLogGroupLogDestination::is_cloud_watch_log_group_arn_Valid() const{
    return m_cloud_watch_log_group_arn_isValid;
}

QString OAICloudWatchLogGroupLogDestination::getLogPrefix() const {
    return m_log_prefix;
}
void OAICloudWatchLogGroupLogDestination::setLogPrefix(const QString &log_prefix) {
    m_log_prefix = log_prefix;
    m_log_prefix_isSet = true;
}

bool OAICloudWatchLogGroupLogDestination::is_log_prefix_Set() const{
    return m_log_prefix_isSet;
}

bool OAICloudWatchLogGroupLogDestination::is_log_prefix_Valid() const{
    return m_log_prefix_isValid;
}

bool OAICloudWatchLogGroupLogDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_watch_log_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudWatchLogGroupLogDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cloud_watch_log_group_arn_isValid && m_log_prefix_isValid && true;
}

} // namespace OpenAPI
