/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestSetSlotDiscrepancyItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestSetSlotDiscrepancyItem::OAITestSetSlotDiscrepancyItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestSetSlotDiscrepancyItem::OAITestSetSlotDiscrepancyItem() {
    this->initializeModel();
}

OAITestSetSlotDiscrepancyItem::~OAITestSetSlotDiscrepancyItem() {}

void OAITestSetSlotDiscrepancyItem::initializeModel() {

    m_intent_name_isSet = false;
    m_intent_name_isValid = false;

    m_slot_name_isSet = false;
    m_slot_name_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;
}

void OAITestSetSlotDiscrepancyItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestSetSlotDiscrepancyItem::fromJsonObject(QJsonObject json) {

    m_intent_name_isValid = ::OpenAPI::fromJsonValue(m_intent_name, json[QString("intentName")]);
    m_intent_name_isSet = !json[QString("intentName")].isNull() && m_intent_name_isValid;

    m_slot_name_isValid = ::OpenAPI::fromJsonValue(m_slot_name, json[QString("slotName")]);
    m_slot_name_isSet = !json[QString("slotName")].isNull() && m_slot_name_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;
}

QString OAITestSetSlotDiscrepancyItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestSetSlotDiscrepancyItem::asJsonObject() const {
    QJsonObject obj;
    if (m_intent_name_isSet) {
        obj.insert(QString("intentName"), ::OpenAPI::toJsonValue(m_intent_name));
    }
    if (m_slot_name_isSet) {
        obj.insert(QString("slotName"), ::OpenAPI::toJsonValue(m_slot_name));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    return obj;
}

QString OAITestSetSlotDiscrepancyItem::getIntentName() const {
    return m_intent_name;
}
void OAITestSetSlotDiscrepancyItem::setIntentName(const QString &intent_name) {
    m_intent_name = intent_name;
    m_intent_name_isSet = true;
}

bool OAITestSetSlotDiscrepancyItem::is_intent_name_Set() const{
    return m_intent_name_isSet;
}

bool OAITestSetSlotDiscrepancyItem::is_intent_name_Valid() const{
    return m_intent_name_isValid;
}

QString OAITestSetSlotDiscrepancyItem::getSlotName() const {
    return m_slot_name;
}
void OAITestSetSlotDiscrepancyItem::setSlotName(const QString &slot_name) {
    m_slot_name = slot_name;
    m_slot_name_isSet = true;
}

bool OAITestSetSlotDiscrepancyItem::is_slot_name_Set() const{
    return m_slot_name_isSet;
}

bool OAITestSetSlotDiscrepancyItem::is_slot_name_Valid() const{
    return m_slot_name_isValid;
}

QString OAITestSetSlotDiscrepancyItem::getErrorMessage() const {
    return m_error_message;
}
void OAITestSetSlotDiscrepancyItem::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAITestSetSlotDiscrepancyItem::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAITestSetSlotDiscrepancyItem::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAITestSetSlotDiscrepancyItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_intent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestSetSlotDiscrepancyItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_intent_name_isValid && m_slot_name_isValid && m_error_message_isValid && true;
}

} // namespace OpenAPI
