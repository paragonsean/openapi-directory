/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioAndDTMFInputSpecification_audioSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioAndDTMFInputSpecification_audioSpecification::OAIAudioAndDTMFInputSpecification_audioSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioAndDTMFInputSpecification_audioSpecification::OAIAudioAndDTMFInputSpecification_audioSpecification() {
    this->initializeModel();
}

OAIAudioAndDTMFInputSpecification_audioSpecification::~OAIAudioAndDTMFInputSpecification_audioSpecification() {}

void OAIAudioAndDTMFInputSpecification_audioSpecification::initializeModel() {

    m_max_length_ms_isSet = false;
    m_max_length_ms_isValid = false;

    m_end_timeout_ms_isSet = false;
    m_end_timeout_ms_isValid = false;
}

void OAIAudioAndDTMFInputSpecification_audioSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioAndDTMFInputSpecification_audioSpecification::fromJsonObject(QJsonObject json) {

    m_max_length_ms_isValid = ::OpenAPI::fromJsonValue(m_max_length_ms, json[QString("maxLengthMs")]);
    m_max_length_ms_isSet = !json[QString("maxLengthMs")].isNull() && m_max_length_ms_isValid;

    m_end_timeout_ms_isValid = ::OpenAPI::fromJsonValue(m_end_timeout_ms, json[QString("endTimeoutMs")]);
    m_end_timeout_ms_isSet = !json[QString("endTimeoutMs")].isNull() && m_end_timeout_ms_isValid;
}

QString OAIAudioAndDTMFInputSpecification_audioSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioAndDTMFInputSpecification_audioSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_max_length_ms_isSet) {
        obj.insert(QString("maxLengthMs"), ::OpenAPI::toJsonValue(m_max_length_ms));
    }
    if (m_end_timeout_ms_isSet) {
        obj.insert(QString("endTimeoutMs"), ::OpenAPI::toJsonValue(m_end_timeout_ms));
    }
    return obj;
}

qint32 OAIAudioAndDTMFInputSpecification_audioSpecification::getMaxLengthMs() const {
    return m_max_length_ms;
}
void OAIAudioAndDTMFInputSpecification_audioSpecification::setMaxLengthMs(const qint32 &max_length_ms) {
    m_max_length_ms = max_length_ms;
    m_max_length_ms_isSet = true;
}

bool OAIAudioAndDTMFInputSpecification_audioSpecification::is_max_length_ms_Set() const{
    return m_max_length_ms_isSet;
}

bool OAIAudioAndDTMFInputSpecification_audioSpecification::is_max_length_ms_Valid() const{
    return m_max_length_ms_isValid;
}

qint32 OAIAudioAndDTMFInputSpecification_audioSpecification::getEndTimeoutMs() const {
    return m_end_timeout_ms;
}
void OAIAudioAndDTMFInputSpecification_audioSpecification::setEndTimeoutMs(const qint32 &end_timeout_ms) {
    m_end_timeout_ms = end_timeout_ms;
    m_end_timeout_ms_isSet = true;
}

bool OAIAudioAndDTMFInputSpecification_audioSpecification::is_end_timeout_ms_Set() const{
    return m_end_timeout_ms_isSet;
}

bool OAIAudioAndDTMFInputSpecification_audioSpecification::is_end_timeout_ms_Valid() const{
    return m_end_timeout_ms_isValid;
}

bool OAIAudioAndDTMFInputSpecification_audioSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_length_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_timeout_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioAndDTMFInputSpecification_audioSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_length_ms_isValid && m_end_timeout_ms_isValid && true;
}

} // namespace OpenAPI
