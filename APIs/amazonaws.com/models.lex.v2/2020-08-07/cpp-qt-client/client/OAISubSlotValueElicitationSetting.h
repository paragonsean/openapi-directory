/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubSlotValueElicitationSetting.h
 *
 * &lt;p&gt;Subslot elicitation settings.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DefaultValueSpecification&lt;/code&gt; is a list of default values for a constituent sub slot in a composite slot. Default values are used when Amazon Lex hasn&#39;t determined a value for a slot. You can specify default values from context variables, session attributes, and defined values. This is similar to &lt;code&gt;DefaultValueSpecification&lt;/code&gt; for slots.&lt;/p&gt; &lt;p&gt; &lt;code&gt;PromptSpecification&lt;/code&gt; is the prompt that Amazon Lex uses to elicit the sub slot value from the user. This is similar to &lt;code&gt;PromptSpecification&lt;/code&gt; for slots.&lt;/p&gt;
 */

#ifndef OAISubSlotValueElicitationSetting_H
#define OAISubSlotValueElicitationSetting_H

#include <QJsonObject>

#include "OAIPromptSpecification.h"
#include "OAISlotDefaultValueSpecification.h"
#include "OAIWaitAndContinueSpecification.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISlotDefaultValueSpecification;
class OAIPromptSpecification;
class OAIWaitAndContinueSpecification;

class OAISubSlotValueElicitationSetting : public OAIObject {
public:
    OAISubSlotValueElicitationSetting();
    OAISubSlotValueElicitationSetting(QString json);
    ~OAISubSlotValueElicitationSetting() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISlotDefaultValueSpecification getDefaultValueSpecification() const;
    void setDefaultValueSpecification(const OAISlotDefaultValueSpecification &default_value_specification);
    bool is_default_value_specification_Set() const;
    bool is_default_value_specification_Valid() const;

    OAIPromptSpecification getPromptSpecification() const;
    void setPromptSpecification(const OAIPromptSpecification &prompt_specification);
    bool is_prompt_specification_Set() const;
    bool is_prompt_specification_Valid() const;

    QList getSampleUtterances() const;
    void setSampleUtterances(const QList &sample_utterances);
    bool is_sample_utterances_Set() const;
    bool is_sample_utterances_Valid() const;

    OAIWaitAndContinueSpecification getWaitAndContinueSpecification() const;
    void setWaitAndContinueSpecification(const OAIWaitAndContinueSpecification &wait_and_continue_specification);
    bool is_wait_and_continue_specification_Set() const;
    bool is_wait_and_continue_specification_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISlotDefaultValueSpecification m_default_value_specification;
    bool m_default_value_specification_isSet;
    bool m_default_value_specification_isValid;

    OAIPromptSpecification m_prompt_specification;
    bool m_prompt_specification_isSet;
    bool m_prompt_specification_isValid;

    QList m_sample_utterances;
    bool m_sample_utterances_isSet;
    bool m_sample_utterances_isValid;

    OAIWaitAndContinueSpecification m_wait_and_continue_specification;
    bool m_wait_and_continue_specification_isSet;
    bool m_wait_and_continue_specification_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubSlotValueElicitationSetting)

#endif // OAISubSlotValueElicitationSetting_H
