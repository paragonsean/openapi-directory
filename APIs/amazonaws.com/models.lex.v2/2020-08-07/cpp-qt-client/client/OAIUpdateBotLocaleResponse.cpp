/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateBotLocaleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateBotLocaleResponse::OAIUpdateBotLocaleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateBotLocaleResponse::OAIUpdateBotLocaleResponse() {
    this->initializeModel();
}

OAIUpdateBotLocaleResponse::~OAIUpdateBotLocaleResponse() {}

void OAIUpdateBotLocaleResponse::initializeModel() {

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_locale_id_isSet = false;
    m_locale_id_isValid = false;

    m_locale_name_isSet = false;
    m_locale_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_nlu_intent_confidence_threshold_isSet = false;
    m_nlu_intent_confidence_threshold_isValid = false;

    m_voice_settings_isSet = false;
    m_voice_settings_isValid = false;

    m_bot_locale_status_isSet = false;
    m_bot_locale_status_isValid = false;

    m_failure_reasons_isSet = false;
    m_failure_reasons_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_recommended_actions_isSet = false;
    m_recommended_actions_isValid = false;
}

void OAIUpdateBotLocaleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateBotLocaleResponse::fromJsonObject(QJsonObject json) {

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("botId")]);
    m_bot_id_isSet = !json[QString("botId")].isNull() && m_bot_id_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_locale_id_isValid = ::OpenAPI::fromJsonValue(m_locale_id, json[QString("localeId")]);
    m_locale_id_isSet = !json[QString("localeId")].isNull() && m_locale_id_isValid;

    m_locale_name_isValid = ::OpenAPI::fromJsonValue(m_locale_name, json[QString("localeName")]);
    m_locale_name_isSet = !json[QString("localeName")].isNull() && m_locale_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_nlu_intent_confidence_threshold_isValid = ::OpenAPI::fromJsonValue(m_nlu_intent_confidence_threshold, json[QString("nluIntentConfidenceThreshold")]);
    m_nlu_intent_confidence_threshold_isSet = !json[QString("nluIntentConfidenceThreshold")].isNull() && m_nlu_intent_confidence_threshold_isValid;

    m_voice_settings_isValid = ::OpenAPI::fromJsonValue(m_voice_settings, json[QString("voiceSettings")]);
    m_voice_settings_isSet = !json[QString("voiceSettings")].isNull() && m_voice_settings_isValid;

    m_bot_locale_status_isValid = ::OpenAPI::fromJsonValue(m_bot_locale_status, json[QString("botLocaleStatus")]);
    m_bot_locale_status_isSet = !json[QString("botLocaleStatus")].isNull() && m_bot_locale_status_isValid;

    m_failure_reasons_isValid = ::OpenAPI::fromJsonValue(m_failure_reasons, json[QString("failureReasons")]);
    m_failure_reasons_isSet = !json[QString("failureReasons")].isNull() && m_failure_reasons_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_recommended_actions_isValid = ::OpenAPI::fromJsonValue(m_recommended_actions, json[QString("recommendedActions")]);
    m_recommended_actions_isSet = !json[QString("recommendedActions")].isNull() && m_recommended_actions_isValid;
}

QString OAIUpdateBotLocaleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateBotLocaleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_id_isSet) {
        obj.insert(QString("botId"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_locale_id_isSet) {
        obj.insert(QString("localeId"), ::OpenAPI::toJsonValue(m_locale_id));
    }
    if (m_locale_name_isSet) {
        obj.insert(QString("localeName"), ::OpenAPI::toJsonValue(m_locale_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_nlu_intent_confidence_threshold_isSet) {
        obj.insert(QString("nluIntentConfidenceThreshold"), ::OpenAPI::toJsonValue(m_nlu_intent_confidence_threshold));
    }
    if (m_voice_settings.isSet()) {
        obj.insert(QString("voiceSettings"), ::OpenAPI::toJsonValue(m_voice_settings));
    }
    if (m_bot_locale_status.isSet()) {
        obj.insert(QString("botLocaleStatus"), ::OpenAPI::toJsonValue(m_bot_locale_status));
    }
    if (m_failure_reasons.isSet()) {
        obj.insert(QString("failureReasons"), ::OpenAPI::toJsonValue(m_failure_reasons));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_recommended_actions.isSet()) {
        obj.insert(QString("recommendedActions"), ::OpenAPI::toJsonValue(m_recommended_actions));
    }
    return obj;
}

QString OAIUpdateBotLocaleResponse::getBotId() const {
    return m_bot_id;
}
void OAIUpdateBotLocaleResponse::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAIUpdateBotLocaleResponse::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAIUpdateBotLocaleResponse::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

QString OAIUpdateBotLocaleResponse::getBotVersion() const {
    return m_bot_version;
}
void OAIUpdateBotLocaleResponse::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAIUpdateBotLocaleResponse::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAIUpdateBotLocaleResponse::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QString OAIUpdateBotLocaleResponse::getLocaleId() const {
    return m_locale_id;
}
void OAIUpdateBotLocaleResponse::setLocaleId(const QString &locale_id) {
    m_locale_id = locale_id;
    m_locale_id_isSet = true;
}

bool OAIUpdateBotLocaleResponse::is_locale_id_Set() const{
    return m_locale_id_isSet;
}

bool OAIUpdateBotLocaleResponse::is_locale_id_Valid() const{
    return m_locale_id_isValid;
}

QString OAIUpdateBotLocaleResponse::getLocaleName() const {
    return m_locale_name;
}
void OAIUpdateBotLocaleResponse::setLocaleName(const QString &locale_name) {
    m_locale_name = locale_name;
    m_locale_name_isSet = true;
}

bool OAIUpdateBotLocaleResponse::is_locale_name_Set() const{
    return m_locale_name_isSet;
}

bool OAIUpdateBotLocaleResponse::is_locale_name_Valid() const{
    return m_locale_name_isValid;
}

QString OAIUpdateBotLocaleResponse::getDescription() const {
    return m_description;
}
void OAIUpdateBotLocaleResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateBotLocaleResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateBotLocaleResponse::is_description_Valid() const{
    return m_description_isValid;
}

double OAIUpdateBotLocaleResponse::getNluIntentConfidenceThreshold() const {
    return m_nlu_intent_confidence_threshold;
}
void OAIUpdateBotLocaleResponse::setNluIntentConfidenceThreshold(const double &nlu_intent_confidence_threshold) {
    m_nlu_intent_confidence_threshold = nlu_intent_confidence_threshold;
    m_nlu_intent_confidence_threshold_isSet = true;
}

bool OAIUpdateBotLocaleResponse::is_nlu_intent_confidence_threshold_Set() const{
    return m_nlu_intent_confidence_threshold_isSet;
}

bool OAIUpdateBotLocaleResponse::is_nlu_intent_confidence_threshold_Valid() const{
    return m_nlu_intent_confidence_threshold_isValid;
}

OAIUpdateBotLocaleResponse_voiceSettings OAIUpdateBotLocaleResponse::getVoiceSettings() const {
    return m_voice_settings;
}
void OAIUpdateBotLocaleResponse::setVoiceSettings(const OAIUpdateBotLocaleResponse_voiceSettings &voice_settings) {
    m_voice_settings = voice_settings;
    m_voice_settings_isSet = true;
}

bool OAIUpdateBotLocaleResponse::is_voice_settings_Set() const{
    return m_voice_settings_isSet;
}

bool OAIUpdateBotLocaleResponse::is_voice_settings_Valid() const{
    return m_voice_settings_isValid;
}

OAIBotLocaleStatus OAIUpdateBotLocaleResponse::getBotLocaleStatus() const {
    return m_bot_locale_status;
}
void OAIUpdateBotLocaleResponse::setBotLocaleStatus(const OAIBotLocaleStatus &bot_locale_status) {
    m_bot_locale_status = bot_locale_status;
    m_bot_locale_status_isSet = true;
}

bool OAIUpdateBotLocaleResponse::is_bot_locale_status_Set() const{
    return m_bot_locale_status_isSet;
}

bool OAIUpdateBotLocaleResponse::is_bot_locale_status_Valid() const{
    return m_bot_locale_status_isValid;
}

QList OAIUpdateBotLocaleResponse::getFailureReasons() const {
    return m_failure_reasons;
}
void OAIUpdateBotLocaleResponse::setFailureReasons(const QList &failure_reasons) {
    m_failure_reasons = failure_reasons;
    m_failure_reasons_isSet = true;
}

bool OAIUpdateBotLocaleResponse::is_failure_reasons_Set() const{
    return m_failure_reasons_isSet;
}

bool OAIUpdateBotLocaleResponse::is_failure_reasons_Valid() const{
    return m_failure_reasons_isValid;
}

QDateTime OAIUpdateBotLocaleResponse::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIUpdateBotLocaleResponse::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIUpdateBotLocaleResponse::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIUpdateBotLocaleResponse::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

QDateTime OAIUpdateBotLocaleResponse::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIUpdateBotLocaleResponse::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIUpdateBotLocaleResponse::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIUpdateBotLocaleResponse::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QList OAIUpdateBotLocaleResponse::getRecommendedActions() const {
    return m_recommended_actions;
}
void OAIUpdateBotLocaleResponse::setRecommendedActions(const QList &recommended_actions) {
    m_recommended_actions = recommended_actions;
    m_recommended_actions_isSet = true;
}

bool OAIUpdateBotLocaleResponse::is_recommended_actions_Set() const{
    return m_recommended_actions_isSet;
}

bool OAIUpdateBotLocaleResponse::is_recommended_actions_Valid() const{
    return m_recommended_actions_isValid;
}

bool OAIUpdateBotLocaleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nlu_intent_confidence_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_locale_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateBotLocaleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
