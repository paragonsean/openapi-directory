/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDialogAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDialogAction::OAIDialogAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDialogAction::OAIDialogAction() {
    this->initializeModel();
}

OAIDialogAction::~OAIDialogAction() {}

void OAIDialogAction::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_slot_to_elicit_isSet = false;
    m_slot_to_elicit_isValid = false;

    m_suppress_next_message_isSet = false;
    m_suppress_next_message_isValid = false;
}

void OAIDialogAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDialogAction::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_slot_to_elicit_isValid = ::OpenAPI::fromJsonValue(m_slot_to_elicit, json[QString("slotToElicit")]);
    m_slot_to_elicit_isSet = !json[QString("slotToElicit")].isNull() && m_slot_to_elicit_isValid;

    m_suppress_next_message_isValid = ::OpenAPI::fromJsonValue(m_suppress_next_message, json[QString("suppressNextMessage")]);
    m_suppress_next_message_isSet = !json[QString("suppressNextMessage")].isNull() && m_suppress_next_message_isValid;
}

QString OAIDialogAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDialogAction::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_slot_to_elicit_isSet) {
        obj.insert(QString("slotToElicit"), ::OpenAPI::toJsonValue(m_slot_to_elicit));
    }
    if (m_suppress_next_message_isSet) {
        obj.insert(QString("suppressNextMessage"), ::OpenAPI::toJsonValue(m_suppress_next_message));
    }
    return obj;
}

OAIDialogActionType OAIDialogAction::getType() const {
    return m_type;
}
void OAIDialogAction::setType(const OAIDialogActionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDialogAction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDialogAction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDialogAction::getSlotToElicit() const {
    return m_slot_to_elicit;
}
void OAIDialogAction::setSlotToElicit(const QString &slot_to_elicit) {
    m_slot_to_elicit = slot_to_elicit;
    m_slot_to_elicit_isSet = true;
}

bool OAIDialogAction::is_slot_to_elicit_Set() const{
    return m_slot_to_elicit_isSet;
}

bool OAIDialogAction::is_slot_to_elicit_Valid() const{
    return m_slot_to_elicit_isValid;
}

bool OAIDialogAction::getSuppressNextMessage() const {
    return m_suppress_next_message;
}
void OAIDialogAction::setSuppressNextMessage(const bool &suppress_next_message) {
    m_suppress_next_message = suppress_next_message;
    m_suppress_next_message_isSet = true;
}

bool OAIDialogAction::is_suppress_next_message_Set() const{
    return m_suppress_next_message_isSet;
}

bool OAIDialogAction::is_suppress_next_message_Valid() const{
    return m_suppress_next_message_isValid;
}

bool OAIDialogAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_to_elicit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suppress_next_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDialogAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
