/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversationLevelSlotResolutionResultItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversationLevelSlotResolutionResultItem::OAIConversationLevelSlotResolutionResultItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversationLevelSlotResolutionResultItem::OAIConversationLevelSlotResolutionResultItem() {
    this->initializeModel();
}

OAIConversationLevelSlotResolutionResultItem::~OAIConversationLevelSlotResolutionResultItem() {}

void OAIConversationLevelSlotResolutionResultItem::initializeModel() {

    m_intent_name_isSet = false;
    m_intent_name_isValid = false;

    m_slot_name_isSet = false;
    m_slot_name_isValid = false;

    m_match_result_isSet = false;
    m_match_result_isValid = false;
}

void OAIConversationLevelSlotResolutionResultItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversationLevelSlotResolutionResultItem::fromJsonObject(QJsonObject json) {

    m_intent_name_isValid = ::OpenAPI::fromJsonValue(m_intent_name, json[QString("intentName")]);
    m_intent_name_isSet = !json[QString("intentName")].isNull() && m_intent_name_isValid;

    m_slot_name_isValid = ::OpenAPI::fromJsonValue(m_slot_name, json[QString("slotName")]);
    m_slot_name_isSet = !json[QString("slotName")].isNull() && m_slot_name_isValid;

    m_match_result_isValid = ::OpenAPI::fromJsonValue(m_match_result, json[QString("matchResult")]);
    m_match_result_isSet = !json[QString("matchResult")].isNull() && m_match_result_isValid;
}

QString OAIConversationLevelSlotResolutionResultItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversationLevelSlotResolutionResultItem::asJsonObject() const {
    QJsonObject obj;
    if (m_intent_name_isSet) {
        obj.insert(QString("intentName"), ::OpenAPI::toJsonValue(m_intent_name));
    }
    if (m_slot_name_isSet) {
        obj.insert(QString("slotName"), ::OpenAPI::toJsonValue(m_slot_name));
    }
    if (m_match_result.isSet()) {
        obj.insert(QString("matchResult"), ::OpenAPI::toJsonValue(m_match_result));
    }
    return obj;
}

QString OAIConversationLevelSlotResolutionResultItem::getIntentName() const {
    return m_intent_name;
}
void OAIConversationLevelSlotResolutionResultItem::setIntentName(const QString &intent_name) {
    m_intent_name = intent_name;
    m_intent_name_isSet = true;
}

bool OAIConversationLevelSlotResolutionResultItem::is_intent_name_Set() const{
    return m_intent_name_isSet;
}

bool OAIConversationLevelSlotResolutionResultItem::is_intent_name_Valid() const{
    return m_intent_name_isValid;
}

QString OAIConversationLevelSlotResolutionResultItem::getSlotName() const {
    return m_slot_name;
}
void OAIConversationLevelSlotResolutionResultItem::setSlotName(const QString &slot_name) {
    m_slot_name = slot_name;
    m_slot_name_isSet = true;
}

bool OAIConversationLevelSlotResolutionResultItem::is_slot_name_Set() const{
    return m_slot_name_isSet;
}

bool OAIConversationLevelSlotResolutionResultItem::is_slot_name_Valid() const{
    return m_slot_name_isValid;
}

OAITestResultMatchStatus OAIConversationLevelSlotResolutionResultItem::getMatchResult() const {
    return m_match_result;
}
void OAIConversationLevelSlotResolutionResultItem::setMatchResult(const OAITestResultMatchStatus &match_result) {
    m_match_result = match_result;
    m_match_result_isSet = true;
}

bool OAIConversationLevelSlotResolutionResultItem::is_match_result_Set() const{
    return m_match_result_isSet;
}

bool OAIConversationLevelSlotResolutionResultItem::is_match_result_Valid() const{
    return m_match_result_isValid;
}

bool OAIConversationLevelSlotResolutionResultItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_intent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversationLevelSlotResolutionResultItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_intent_name_isValid && m_slot_name_isValid && m_match_result_isValid && true;
}

} // namespace OpenAPI
