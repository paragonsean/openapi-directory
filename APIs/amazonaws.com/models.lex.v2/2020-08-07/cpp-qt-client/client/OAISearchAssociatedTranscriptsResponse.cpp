/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchAssociatedTranscriptsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchAssociatedTranscriptsResponse::OAISearchAssociatedTranscriptsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchAssociatedTranscriptsResponse::OAISearchAssociatedTranscriptsResponse() {
    this->initializeModel();
}

OAISearchAssociatedTranscriptsResponse::~OAISearchAssociatedTranscriptsResponse() {}

void OAISearchAssociatedTranscriptsResponse::initializeModel() {

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_locale_id_isSet = false;
    m_locale_id_isValid = false;

    m_bot_recommendation_id_isSet = false;
    m_bot_recommendation_id_isValid = false;

    m_next_index_isSet = false;
    m_next_index_isValid = false;

    m_associated_transcripts_isSet = false;
    m_associated_transcripts_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;
}

void OAISearchAssociatedTranscriptsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchAssociatedTranscriptsResponse::fromJsonObject(QJsonObject json) {

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("botId")]);
    m_bot_id_isSet = !json[QString("botId")].isNull() && m_bot_id_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_locale_id_isValid = ::OpenAPI::fromJsonValue(m_locale_id, json[QString("localeId")]);
    m_locale_id_isSet = !json[QString("localeId")].isNull() && m_locale_id_isValid;

    m_bot_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_bot_recommendation_id, json[QString("botRecommendationId")]);
    m_bot_recommendation_id_isSet = !json[QString("botRecommendationId")].isNull() && m_bot_recommendation_id_isValid;

    m_next_index_isValid = ::OpenAPI::fromJsonValue(m_next_index, json[QString("nextIndex")]);
    m_next_index_isSet = !json[QString("nextIndex")].isNull() && m_next_index_isValid;

    m_associated_transcripts_isValid = ::OpenAPI::fromJsonValue(m_associated_transcripts, json[QString("associatedTranscripts")]);
    m_associated_transcripts_isSet = !json[QString("associatedTranscripts")].isNull() && m_associated_transcripts_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;
}

QString OAISearchAssociatedTranscriptsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchAssociatedTranscriptsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_id_isSet) {
        obj.insert(QString("botId"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_locale_id_isSet) {
        obj.insert(QString("localeId"), ::OpenAPI::toJsonValue(m_locale_id));
    }
    if (m_bot_recommendation_id_isSet) {
        obj.insert(QString("botRecommendationId"), ::OpenAPI::toJsonValue(m_bot_recommendation_id));
    }
    if (m_next_index_isSet) {
        obj.insert(QString("nextIndex"), ::OpenAPI::toJsonValue(m_next_index));
    }
    if (m_associated_transcripts.isSet()) {
        obj.insert(QString("associatedTranscripts"), ::OpenAPI::toJsonValue(m_associated_transcripts));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    return obj;
}

QString OAISearchAssociatedTranscriptsResponse::getBotId() const {
    return m_bot_id;
}
void OAISearchAssociatedTranscriptsResponse::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAISearchAssociatedTranscriptsResponse::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAISearchAssociatedTranscriptsResponse::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

QString OAISearchAssociatedTranscriptsResponse::getBotVersion() const {
    return m_bot_version;
}
void OAISearchAssociatedTranscriptsResponse::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAISearchAssociatedTranscriptsResponse::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAISearchAssociatedTranscriptsResponse::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QString OAISearchAssociatedTranscriptsResponse::getLocaleId() const {
    return m_locale_id;
}
void OAISearchAssociatedTranscriptsResponse::setLocaleId(const QString &locale_id) {
    m_locale_id = locale_id;
    m_locale_id_isSet = true;
}

bool OAISearchAssociatedTranscriptsResponse::is_locale_id_Set() const{
    return m_locale_id_isSet;
}

bool OAISearchAssociatedTranscriptsResponse::is_locale_id_Valid() const{
    return m_locale_id_isValid;
}

QString OAISearchAssociatedTranscriptsResponse::getBotRecommendationId() const {
    return m_bot_recommendation_id;
}
void OAISearchAssociatedTranscriptsResponse::setBotRecommendationId(const QString &bot_recommendation_id) {
    m_bot_recommendation_id = bot_recommendation_id;
    m_bot_recommendation_id_isSet = true;
}

bool OAISearchAssociatedTranscriptsResponse::is_bot_recommendation_id_Set() const{
    return m_bot_recommendation_id_isSet;
}

bool OAISearchAssociatedTranscriptsResponse::is_bot_recommendation_id_Valid() const{
    return m_bot_recommendation_id_isValid;
}

qint32 OAISearchAssociatedTranscriptsResponse::getNextIndex() const {
    return m_next_index;
}
void OAISearchAssociatedTranscriptsResponse::setNextIndex(const qint32 &next_index) {
    m_next_index = next_index;
    m_next_index_isSet = true;
}

bool OAISearchAssociatedTranscriptsResponse::is_next_index_Set() const{
    return m_next_index_isSet;
}

bool OAISearchAssociatedTranscriptsResponse::is_next_index_Valid() const{
    return m_next_index_isValid;
}

QList OAISearchAssociatedTranscriptsResponse::getAssociatedTranscripts() const {
    return m_associated_transcripts;
}
void OAISearchAssociatedTranscriptsResponse::setAssociatedTranscripts(const QList &associated_transcripts) {
    m_associated_transcripts = associated_transcripts;
    m_associated_transcripts_isSet = true;
}

bool OAISearchAssociatedTranscriptsResponse::is_associated_transcripts_Set() const{
    return m_associated_transcripts_isSet;
}

bool OAISearchAssociatedTranscriptsResponse::is_associated_transcripts_Valid() const{
    return m_associated_transcripts_isValid;
}

qint32 OAISearchAssociatedTranscriptsResponse::getTotalResults() const {
    return m_total_results;
}
void OAISearchAssociatedTranscriptsResponse::setTotalResults(const qint32 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAISearchAssociatedTranscriptsResponse::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAISearchAssociatedTranscriptsResponse::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAISearchAssociatedTranscriptsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_transcripts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchAssociatedTranscriptsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
