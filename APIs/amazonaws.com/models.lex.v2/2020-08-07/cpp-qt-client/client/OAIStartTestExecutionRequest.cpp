/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartTestExecutionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartTestExecutionRequest::OAIStartTestExecutionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartTestExecutionRequest::OAIStartTestExecutionRequest() {
    this->initializeModel();
}

OAIStartTestExecutionRequest::~OAIStartTestExecutionRequest() {}

void OAIStartTestExecutionRequest::initializeModel() {

    m_target_isSet = false;
    m_target_isValid = false;

    m_api_mode_isSet = false;
    m_api_mode_isValid = false;

    m_test_execution_modality_isSet = false;
    m_test_execution_modality_isValid = false;
}

void OAIStartTestExecutionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartTestExecutionRequest::fromJsonObject(QJsonObject json) {

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_api_mode_isValid = ::OpenAPI::fromJsonValue(m_api_mode, json[QString("apiMode")]);
    m_api_mode_isSet = !json[QString("apiMode")].isNull() && m_api_mode_isValid;

    m_test_execution_modality_isValid = ::OpenAPI::fromJsonValue(m_test_execution_modality, json[QString("testExecutionModality")]);
    m_test_execution_modality_isSet = !json[QString("testExecutionModality")].isNull() && m_test_execution_modality_isValid;
}

QString OAIStartTestExecutionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartTestExecutionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_api_mode.isSet()) {
        obj.insert(QString("apiMode"), ::OpenAPI::toJsonValue(m_api_mode));
    }
    if (m_test_execution_modality.isSet()) {
        obj.insert(QString("testExecutionModality"), ::OpenAPI::toJsonValue(m_test_execution_modality));
    }
    return obj;
}

OAIStartTestExecutionResponse_target OAIStartTestExecutionRequest::getTarget() const {
    return m_target;
}
void OAIStartTestExecutionRequest::setTarget(const OAIStartTestExecutionResponse_target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIStartTestExecutionRequest::is_target_Set() const{
    return m_target_isSet;
}

bool OAIStartTestExecutionRequest::is_target_Valid() const{
    return m_target_isValid;
}

OAITestExecutionApiMode OAIStartTestExecutionRequest::getApiMode() const {
    return m_api_mode;
}
void OAIStartTestExecutionRequest::setApiMode(const OAITestExecutionApiMode &api_mode) {
    m_api_mode = api_mode;
    m_api_mode_isSet = true;
}

bool OAIStartTestExecutionRequest::is_api_mode_Set() const{
    return m_api_mode_isSet;
}

bool OAIStartTestExecutionRequest::is_api_mode_Valid() const{
    return m_api_mode_isValid;
}

OAITestExecutionModality OAIStartTestExecutionRequest::getTestExecutionModality() const {
    return m_test_execution_modality;
}
void OAIStartTestExecutionRequest::setTestExecutionModality(const OAITestExecutionModality &test_execution_modality) {
    m_test_execution_modality = test_execution_modality;
    m_test_execution_modality_isSet = true;
}

bool OAIStartTestExecutionRequest::is_test_execution_modality_Set() const{
    return m_test_execution_modality_isSet;
}

bool OAIStartTestExecutionRequest::is_test_execution_modality_Valid() const{
    return m_test_execution_modality_isValid;
}

bool OAIStartTestExecutionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_execution_modality.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartTestExecutionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_isValid && m_api_mode_isValid && true;
}

} // namespace OpenAPI
