/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateResourcePolicyStatementRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateResourcePolicyStatementRequest::OAICreateResourcePolicyStatementRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateResourcePolicyStatementRequest::OAICreateResourcePolicyStatementRequest() {
    this->initializeModel();
}

OAICreateResourcePolicyStatementRequest::~OAICreateResourcePolicyStatementRequest() {}

void OAICreateResourcePolicyStatementRequest::initializeModel() {

    m_statement_id_isSet = false;
    m_statement_id_isValid = false;

    m_effect_isSet = false;
    m_effect_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;
}

void OAICreateResourcePolicyStatementRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateResourcePolicyStatementRequest::fromJsonObject(QJsonObject json) {

    m_statement_id_isValid = ::OpenAPI::fromJsonValue(m_statement_id, json[QString("statementId")]);
    m_statement_id_isSet = !json[QString("statementId")].isNull() && m_statement_id_isValid;

    m_effect_isValid = ::OpenAPI::fromJsonValue(m_effect, json[QString("effect")]);
    m_effect_isSet = !json[QString("effect")].isNull() && m_effect_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("principal")]);
    m_principal_isSet = !json[QString("principal")].isNull() && m_principal_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;
}

QString OAICreateResourcePolicyStatementRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateResourcePolicyStatementRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_statement_id_isSet) {
        obj.insert(QString("statementId"), ::OpenAPI::toJsonValue(m_statement_id));
    }
    if (m_effect.isSet()) {
        obj.insert(QString("effect"), ::OpenAPI::toJsonValue(m_effect));
    }
    if (m_principal.isSet()) {
        obj.insert(QString("principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    return obj;
}

QString OAICreateResourcePolicyStatementRequest::getStatementId() const {
    return m_statement_id;
}
void OAICreateResourcePolicyStatementRequest::setStatementId(const QString &statement_id) {
    m_statement_id = statement_id;
    m_statement_id_isSet = true;
}

bool OAICreateResourcePolicyStatementRequest::is_statement_id_Set() const{
    return m_statement_id_isSet;
}

bool OAICreateResourcePolicyStatementRequest::is_statement_id_Valid() const{
    return m_statement_id_isValid;
}

OAIEffect OAICreateResourcePolicyStatementRequest::getEffect() const {
    return m_effect;
}
void OAICreateResourcePolicyStatementRequest::setEffect(const OAIEffect &effect) {
    m_effect = effect;
    m_effect_isSet = true;
}

bool OAICreateResourcePolicyStatementRequest::is_effect_Set() const{
    return m_effect_isSet;
}

bool OAICreateResourcePolicyStatementRequest::is_effect_Valid() const{
    return m_effect_isValid;
}

QList OAICreateResourcePolicyStatementRequest::getPrincipal() const {
    return m_principal;
}
void OAICreateResourcePolicyStatementRequest::setPrincipal(const QList &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAICreateResourcePolicyStatementRequest::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAICreateResourcePolicyStatementRequest::is_principal_Valid() const{
    return m_principal_isValid;
}

QList OAICreateResourcePolicyStatementRequest::getAction() const {
    return m_action;
}
void OAICreateResourcePolicyStatementRequest::setAction(const QList &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICreateResourcePolicyStatementRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAICreateResourcePolicyStatementRequest::is_action_Valid() const{
    return m_action_isValid;
}

QMap OAICreateResourcePolicyStatementRequest::getCondition() const {
    return m_condition;
}
void OAICreateResourcePolicyStatementRequest::setCondition(const QMap &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAICreateResourcePolicyStatementRequest::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAICreateResourcePolicyStatementRequest::is_condition_Valid() const{
    return m_condition_isValid;
}

bool OAICreateResourcePolicyStatementRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_statement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateResourcePolicyStatementRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_statement_id_isValid && m_effect_isValid && m_principal_isValid && m_action_isValid && true;
}

} // namespace OpenAPI
