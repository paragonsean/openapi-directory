/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyticsIntentNodeSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyticsIntentNodeSummary::OAIAnalyticsIntentNodeSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyticsIntentNodeSummary::OAIAnalyticsIntentNodeSummary() {
    this->initializeModel();
}

OAIAnalyticsIntentNodeSummary::~OAIAnalyticsIntentNodeSummary() {}

void OAIAnalyticsIntentNodeSummary::initializeModel() {

    m_intent_name_isSet = false;
    m_intent_name_isValid = false;

    m_intent_path_isSet = false;
    m_intent_path_isValid = false;

    m_intent_count_isSet = false;
    m_intent_count_isValid = false;

    m_intent_level_isSet = false;
    m_intent_level_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;
}

void OAIAnalyticsIntentNodeSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyticsIntentNodeSummary::fromJsonObject(QJsonObject json) {

    m_intent_name_isValid = ::OpenAPI::fromJsonValue(m_intent_name, json[QString("intentName")]);
    m_intent_name_isSet = !json[QString("intentName")].isNull() && m_intent_name_isValid;

    m_intent_path_isValid = ::OpenAPI::fromJsonValue(m_intent_path, json[QString("intentPath")]);
    m_intent_path_isSet = !json[QString("intentPath")].isNull() && m_intent_path_isValid;

    m_intent_count_isValid = ::OpenAPI::fromJsonValue(m_intent_count, json[QString("intentCount")]);
    m_intent_count_isSet = !json[QString("intentCount")].isNull() && m_intent_count_isValid;

    m_intent_level_isValid = ::OpenAPI::fromJsonValue(m_intent_level, json[QString("intentLevel")]);
    m_intent_level_isSet = !json[QString("intentLevel")].isNull() && m_intent_level_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("nodeType")]);
    m_node_type_isSet = !json[QString("nodeType")].isNull() && m_node_type_isValid;
}

QString OAIAnalyticsIntentNodeSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyticsIntentNodeSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_intent_name_isSet) {
        obj.insert(QString("intentName"), ::OpenAPI::toJsonValue(m_intent_name));
    }
    if (m_intent_path_isSet) {
        obj.insert(QString("intentPath"), ::OpenAPI::toJsonValue(m_intent_path));
    }
    if (m_intent_count_isSet) {
        obj.insert(QString("intentCount"), ::OpenAPI::toJsonValue(m_intent_count));
    }
    if (m_intent_level_isSet) {
        obj.insert(QString("intentLevel"), ::OpenAPI::toJsonValue(m_intent_level));
    }
    if (m_node_type.isSet()) {
        obj.insert(QString("nodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    return obj;
}

QString OAIAnalyticsIntentNodeSummary::getIntentName() const {
    return m_intent_name;
}
void OAIAnalyticsIntentNodeSummary::setIntentName(const QString &intent_name) {
    m_intent_name = intent_name;
    m_intent_name_isSet = true;
}

bool OAIAnalyticsIntentNodeSummary::is_intent_name_Set() const{
    return m_intent_name_isSet;
}

bool OAIAnalyticsIntentNodeSummary::is_intent_name_Valid() const{
    return m_intent_name_isValid;
}

QString OAIAnalyticsIntentNodeSummary::getIntentPath() const {
    return m_intent_path;
}
void OAIAnalyticsIntentNodeSummary::setIntentPath(const QString &intent_path) {
    m_intent_path = intent_path;
    m_intent_path_isSet = true;
}

bool OAIAnalyticsIntentNodeSummary::is_intent_path_Set() const{
    return m_intent_path_isSet;
}

bool OAIAnalyticsIntentNodeSummary::is_intent_path_Valid() const{
    return m_intent_path_isValid;
}

qint32 OAIAnalyticsIntentNodeSummary::getIntentCount() const {
    return m_intent_count;
}
void OAIAnalyticsIntentNodeSummary::setIntentCount(const qint32 &intent_count) {
    m_intent_count = intent_count;
    m_intent_count_isSet = true;
}

bool OAIAnalyticsIntentNodeSummary::is_intent_count_Set() const{
    return m_intent_count_isSet;
}

bool OAIAnalyticsIntentNodeSummary::is_intent_count_Valid() const{
    return m_intent_count_isValid;
}

qint32 OAIAnalyticsIntentNodeSummary::getIntentLevel() const {
    return m_intent_level;
}
void OAIAnalyticsIntentNodeSummary::setIntentLevel(const qint32 &intent_level) {
    m_intent_level = intent_level;
    m_intent_level_isSet = true;
}

bool OAIAnalyticsIntentNodeSummary::is_intent_level_Set() const{
    return m_intent_level_isSet;
}

bool OAIAnalyticsIntentNodeSummary::is_intent_level_Valid() const{
    return m_intent_level_isValid;
}

OAIAnalyticsNodeType OAIAnalyticsIntentNodeSummary::getNodeType() const {
    return m_node_type;
}
void OAIAnalyticsIntentNodeSummary::setNodeType(const OAIAnalyticsNodeType &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIAnalyticsIntentNodeSummary::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIAnalyticsIntentNodeSummary::is_node_type_Valid() const{
    return m_node_type_isValid;
}

bool OAIAnalyticsIntentNodeSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_intent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyticsIntentNodeSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
