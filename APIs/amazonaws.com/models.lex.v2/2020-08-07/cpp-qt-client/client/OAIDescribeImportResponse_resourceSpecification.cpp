/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeImportResponse_resourceSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeImportResponse_resourceSpecification::OAIDescribeImportResponse_resourceSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeImportResponse_resourceSpecification::OAIDescribeImportResponse_resourceSpecification() {
    this->initializeModel();
}

OAIDescribeImportResponse_resourceSpecification::~OAIDescribeImportResponse_resourceSpecification() {}

void OAIDescribeImportResponse_resourceSpecification::initializeModel() {

    m_bot_import_specification_isSet = false;
    m_bot_import_specification_isValid = false;

    m_bot_locale_import_specification_isSet = false;
    m_bot_locale_import_specification_isValid = false;

    m_custom_vocabulary_import_specification_isSet = false;
    m_custom_vocabulary_import_specification_isValid = false;

    m_test_set_import_resource_specification_isSet = false;
    m_test_set_import_resource_specification_isValid = false;
}

void OAIDescribeImportResponse_resourceSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeImportResponse_resourceSpecification::fromJsonObject(QJsonObject json) {

    m_bot_import_specification_isValid = ::OpenAPI::fromJsonValue(m_bot_import_specification, json[QString("botImportSpecification")]);
    m_bot_import_specification_isSet = !json[QString("botImportSpecification")].isNull() && m_bot_import_specification_isValid;

    m_bot_locale_import_specification_isValid = ::OpenAPI::fromJsonValue(m_bot_locale_import_specification, json[QString("botLocaleImportSpecification")]);
    m_bot_locale_import_specification_isSet = !json[QString("botLocaleImportSpecification")].isNull() && m_bot_locale_import_specification_isValid;

    m_custom_vocabulary_import_specification_isValid = ::OpenAPI::fromJsonValue(m_custom_vocabulary_import_specification, json[QString("customVocabularyImportSpecification")]);
    m_custom_vocabulary_import_specification_isSet = !json[QString("customVocabularyImportSpecification")].isNull() && m_custom_vocabulary_import_specification_isValid;

    m_test_set_import_resource_specification_isValid = ::OpenAPI::fromJsonValue(m_test_set_import_resource_specification, json[QString("testSetImportResourceSpecification")]);
    m_test_set_import_resource_specification_isSet = !json[QString("testSetImportResourceSpecification")].isNull() && m_test_set_import_resource_specification_isValid;
}

QString OAIDescribeImportResponse_resourceSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeImportResponse_resourceSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_import_specification.isSet()) {
        obj.insert(QString("botImportSpecification"), ::OpenAPI::toJsonValue(m_bot_import_specification));
    }
    if (m_bot_locale_import_specification.isSet()) {
        obj.insert(QString("botLocaleImportSpecification"), ::OpenAPI::toJsonValue(m_bot_locale_import_specification));
    }
    if (m_custom_vocabulary_import_specification.isSet()) {
        obj.insert(QString("customVocabularyImportSpecification"), ::OpenAPI::toJsonValue(m_custom_vocabulary_import_specification));
    }
    if (m_test_set_import_resource_specification.isSet()) {
        obj.insert(QString("testSetImportResourceSpecification"), ::OpenAPI::toJsonValue(m_test_set_import_resource_specification));
    }
    return obj;
}

OAIStartImport_request_resourceSpecification_botImportSpecification OAIDescribeImportResponse_resourceSpecification::getBotImportSpecification() const {
    return m_bot_import_specification;
}
void OAIDescribeImportResponse_resourceSpecification::setBotImportSpecification(const OAIStartImport_request_resourceSpecification_botImportSpecification &bot_import_specification) {
    m_bot_import_specification = bot_import_specification;
    m_bot_import_specification_isSet = true;
}

bool OAIDescribeImportResponse_resourceSpecification::is_bot_import_specification_Set() const{
    return m_bot_import_specification_isSet;
}

bool OAIDescribeImportResponse_resourceSpecification::is_bot_import_specification_Valid() const{
    return m_bot_import_specification_isValid;
}

OAIStartImport_request_resourceSpecification_botLocaleImportSpecification OAIDescribeImportResponse_resourceSpecification::getBotLocaleImportSpecification() const {
    return m_bot_locale_import_specification;
}
void OAIDescribeImportResponse_resourceSpecification::setBotLocaleImportSpecification(const OAIStartImport_request_resourceSpecification_botLocaleImportSpecification &bot_locale_import_specification) {
    m_bot_locale_import_specification = bot_locale_import_specification;
    m_bot_locale_import_specification_isSet = true;
}

bool OAIDescribeImportResponse_resourceSpecification::is_bot_locale_import_specification_Set() const{
    return m_bot_locale_import_specification_isSet;
}

bool OAIDescribeImportResponse_resourceSpecification::is_bot_locale_import_specification_Valid() const{
    return m_bot_locale_import_specification_isValid;
}

OAICustomVocabularyImportSpecification OAIDescribeImportResponse_resourceSpecification::getCustomVocabularyImportSpecification() const {
    return m_custom_vocabulary_import_specification;
}
void OAIDescribeImportResponse_resourceSpecification::setCustomVocabularyImportSpecification(const OAICustomVocabularyImportSpecification &custom_vocabulary_import_specification) {
    m_custom_vocabulary_import_specification = custom_vocabulary_import_specification;
    m_custom_vocabulary_import_specification_isSet = true;
}

bool OAIDescribeImportResponse_resourceSpecification::is_custom_vocabulary_import_specification_Set() const{
    return m_custom_vocabulary_import_specification_isSet;
}

bool OAIDescribeImportResponse_resourceSpecification::is_custom_vocabulary_import_specification_Valid() const{
    return m_custom_vocabulary_import_specification_isValid;
}

OAIStartImport_request_resourceSpecification_testSetImportResourceSpecification OAIDescribeImportResponse_resourceSpecification::getTestSetImportResourceSpecification() const {
    return m_test_set_import_resource_specification;
}
void OAIDescribeImportResponse_resourceSpecification::setTestSetImportResourceSpecification(const OAIStartImport_request_resourceSpecification_testSetImportResourceSpecification &test_set_import_resource_specification) {
    m_test_set_import_resource_specification = test_set_import_resource_specification;
    m_test_set_import_resource_specification_isSet = true;
}

bool OAIDescribeImportResponse_resourceSpecification::is_test_set_import_resource_specification_Set() const{
    return m_test_set_import_resource_specification_isSet;
}

bool OAIDescribeImportResponse_resourceSpecification::is_test_set_import_resource_specification_Valid() const{
    return m_test_set_import_resource_specification_isValid;
}

bool OAIDescribeImportResponse_resourceSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_import_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_locale_import_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_vocabulary_import_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_set_import_resource_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeImportResponse_resourceSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
