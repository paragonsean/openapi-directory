/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISessionSpecification.h
 *
 * An object containing information about a specific session.
 */

#ifndef OAISessionSpecification_H
#define OAISessionSpecification_H

#include <QJsonObject>

#include "OAIAnalyticsModality.h"
#include "OAIConversationEndState.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISessionSpecification : public OAIObject {
public:
    OAISessionSpecification();
    OAISessionSpecification(QString json);
    ~OAISessionSpecification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBotAliasId() const;
    void setBotAliasId(const QString &bot_alias_id);
    bool is_bot_alias_id_Set() const;
    bool is_bot_alias_id_Valid() const;

    QString getBotVersion() const;
    void setBotVersion(const QString &bot_version);
    bool is_bot_version_Set() const;
    bool is_bot_version_Valid() const;

    QString getLocaleId() const;
    void setLocaleId(const QString &locale_id);
    bool is_locale_id_Set() const;
    bool is_locale_id_Valid() const;

    QString getChannel() const;
    void setChannel(const QString &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    QDateTime getConversationStartTime() const;
    void setConversationStartTime(const QDateTime &conversation_start_time);
    bool is_conversation_start_time_Set() const;
    bool is_conversation_start_time_Valid() const;

    QDateTime getConversationEndTime() const;
    void setConversationEndTime(const QDateTime &conversation_end_time);
    bool is_conversation_end_time_Set() const;
    bool is_conversation_end_time_Valid() const;

    qint32 getConversationDurationSeconds() const;
    void setConversationDurationSeconds(const qint32 &conversation_duration_seconds);
    bool is_conversation_duration_seconds_Set() const;
    bool is_conversation_duration_seconds_Valid() const;

    OAIConversationEndState getConversationEndState() const;
    void setConversationEndState(const OAIConversationEndState &conversation_end_state);
    bool is_conversation_end_state_Set() const;
    bool is_conversation_end_state_Valid() const;

    OAIAnalyticsModality getMode() const;
    void setMode(const OAIAnalyticsModality &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    qint32 getNumberOfTurns() const;
    void setNumberOfTurns(const qint32 &number_of_turns);
    bool is_number_of_turns_Set() const;
    bool is_number_of_turns_Valid() const;

    QList getInvokedIntentSamples() const;
    void setInvokedIntentSamples(const QList &invoked_intent_samples);
    bool is_invoked_intent_samples_Set() const;
    bool is_invoked_intent_samples_Valid() const;

    QString getOriginatingRequestId() const;
    void setOriginatingRequestId(const QString &originating_request_id);
    bool is_originating_request_id_Set() const;
    bool is_originating_request_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bot_alias_id;
    bool m_bot_alias_id_isSet;
    bool m_bot_alias_id_isValid;

    QString m_bot_version;
    bool m_bot_version_isSet;
    bool m_bot_version_isValid;

    QString m_locale_id;
    bool m_locale_id_isSet;
    bool m_locale_id_isValid;

    QString m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;

    QDateTime m_conversation_start_time;
    bool m_conversation_start_time_isSet;
    bool m_conversation_start_time_isValid;

    QDateTime m_conversation_end_time;
    bool m_conversation_end_time_isSet;
    bool m_conversation_end_time_isValid;

    qint32 m_conversation_duration_seconds;
    bool m_conversation_duration_seconds_isSet;
    bool m_conversation_duration_seconds_isValid;

    OAIConversationEndState m_conversation_end_state;
    bool m_conversation_end_state_isSet;
    bool m_conversation_end_state_isValid;

    OAIAnalyticsModality m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    qint32 m_number_of_turns;
    bool m_number_of_turns_isSet;
    bool m_number_of_turns_isValid;

    QList m_invoked_intent_samples;
    bool m_invoked_intent_samples_isSet;
    bool m_invoked_intent_samples_isValid;

    QString m_originating_request_id;
    bool m_originating_request_id_isSet;
    bool m_originating_request_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISessionSpecification)

#endif // OAISessionSpecification_H
