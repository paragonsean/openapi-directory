/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeTestSetDiscrepancyReportResponse.h
 *
 * 
 */

#ifndef OAIDescribeTestSetDiscrepancyReportResponse_H
#define OAIDescribeTestSetDiscrepancyReportResponse_H

#include <QJsonObject>

#include "OAIDescribeTestSetDiscrepancyReportResponse_target.h"
#include "OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors.h"
#include "OAITestSetDiscrepancyReportStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeTestSetDiscrepancyReportResponse_target;
class OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors;

class OAIDescribeTestSetDiscrepancyReportResponse : public OAIObject {
public:
    OAIDescribeTestSetDiscrepancyReportResponse();
    OAIDescribeTestSetDiscrepancyReportResponse(QString json);
    ~OAIDescribeTestSetDiscrepancyReportResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTestSetDiscrepancyReportId() const;
    void setTestSetDiscrepancyReportId(const QString &test_set_discrepancy_report_id);
    bool is_test_set_discrepancy_report_id_Set() const;
    bool is_test_set_discrepancy_report_id_Valid() const;

    QString getTestSetId() const;
    void setTestSetId(const QString &test_set_id);
    bool is_test_set_id_Set() const;
    bool is_test_set_id_Valid() const;

    QDateTime getCreationDateTime() const;
    void setCreationDateTime(const QDateTime &creation_date_time);
    bool is_creation_date_time_Set() const;
    bool is_creation_date_time_Valid() const;

    OAIDescribeTestSetDiscrepancyReportResponse_target getTarget() const;
    void setTarget(const OAIDescribeTestSetDiscrepancyReportResponse_target &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    OAITestSetDiscrepancyReportStatus getTestSetDiscrepancyReportStatus() const;
    void setTestSetDiscrepancyReportStatus(const OAITestSetDiscrepancyReportStatus &test_set_discrepancy_report_status);
    bool is_test_set_discrepancy_report_status_Set() const;
    bool is_test_set_discrepancy_report_status_Valid() const;

    QDateTime getLastUpdatedDataTime() const;
    void setLastUpdatedDataTime(const QDateTime &last_updated_data_time);
    bool is_last_updated_data_time_Set() const;
    bool is_last_updated_data_time_Valid() const;

    OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors getTestSetDiscrepancyTopErrors() const;
    void setTestSetDiscrepancyTopErrors(const OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors &test_set_discrepancy_top_errors);
    bool is_test_set_discrepancy_top_errors_Set() const;
    bool is_test_set_discrepancy_top_errors_Valid() const;

    QString getTestSetDiscrepancyRawOutputUrl() const;
    void setTestSetDiscrepancyRawOutputUrl(const QString &test_set_discrepancy_raw_output_url);
    bool is_test_set_discrepancy_raw_output_url_Set() const;
    bool is_test_set_discrepancy_raw_output_url_Valid() const;

    QList getFailureReasons() const;
    void setFailureReasons(const QList &failure_reasons);
    bool is_failure_reasons_Set() const;
    bool is_failure_reasons_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_test_set_discrepancy_report_id;
    bool m_test_set_discrepancy_report_id_isSet;
    bool m_test_set_discrepancy_report_id_isValid;

    QString m_test_set_id;
    bool m_test_set_id_isSet;
    bool m_test_set_id_isValid;

    QDateTime m_creation_date_time;
    bool m_creation_date_time_isSet;
    bool m_creation_date_time_isValid;

    OAIDescribeTestSetDiscrepancyReportResponse_target m_target;
    bool m_target_isSet;
    bool m_target_isValid;

    OAITestSetDiscrepancyReportStatus m_test_set_discrepancy_report_status;
    bool m_test_set_discrepancy_report_status_isSet;
    bool m_test_set_discrepancy_report_status_isValid;

    QDateTime m_last_updated_data_time;
    bool m_last_updated_data_time_isSet;
    bool m_last_updated_data_time_isValid;

    OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors m_test_set_discrepancy_top_errors;
    bool m_test_set_discrepancy_top_errors_isSet;
    bool m_test_set_discrepancy_top_errors_isValid;

    QString m_test_set_discrepancy_raw_output_url;
    bool m_test_set_discrepancy_raw_output_url_isSet;
    bool m_test_set_discrepancy_raw_output_url_isValid;

    QList m_failure_reasons;
    bool m_failure_reasons_isSet;
    bool m_failure_reasons_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeTestSetDiscrepancyReportResponse)

#endif // OAIDescribeTestSetDiscrepancyReportResponse_H
