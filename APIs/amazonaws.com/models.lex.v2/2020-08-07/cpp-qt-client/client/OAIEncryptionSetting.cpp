/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionSetting::OAIEncryptionSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionSetting::OAIEncryptionSetting() {
    this->initializeModel();
}

OAIEncryptionSetting::~OAIEncryptionSetting() {}

void OAIEncryptionSetting::initializeModel() {

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_bot_locale_export_password_isSet = false;
    m_bot_locale_export_password_isValid = false;

    m_associated_transcripts_password_isSet = false;
    m_associated_transcripts_password_isValid = false;
}

void OAIEncryptionSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionSetting::fromJsonObject(QJsonObject json) {

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("kmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("kmsKeyArn")].isNull() && m_kms_key_arn_isValid;

    m_bot_locale_export_password_isValid = ::OpenAPI::fromJsonValue(m_bot_locale_export_password, json[QString("botLocaleExportPassword")]);
    m_bot_locale_export_password_isSet = !json[QString("botLocaleExportPassword")].isNull() && m_bot_locale_export_password_isValid;

    m_associated_transcripts_password_isValid = ::OpenAPI::fromJsonValue(m_associated_transcripts_password, json[QString("associatedTranscriptsPassword")]);
    m_associated_transcripts_password_isSet = !json[QString("associatedTranscriptsPassword")].isNull() && m_associated_transcripts_password_isValid;
}

QString OAIEncryptionSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("kmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_bot_locale_export_password_isSet) {
        obj.insert(QString("botLocaleExportPassword"), ::OpenAPI::toJsonValue(m_bot_locale_export_password));
    }
    if (m_associated_transcripts_password_isSet) {
        obj.insert(QString("associatedTranscriptsPassword"), ::OpenAPI::toJsonValue(m_associated_transcripts_password));
    }
    return obj;
}

QString OAIEncryptionSetting::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIEncryptionSetting::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIEncryptionSetting::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIEncryptionSetting::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

QString OAIEncryptionSetting::getBotLocaleExportPassword() const {
    return m_bot_locale_export_password;
}
void OAIEncryptionSetting::setBotLocaleExportPassword(const QString &bot_locale_export_password) {
    m_bot_locale_export_password = bot_locale_export_password;
    m_bot_locale_export_password_isSet = true;
}

bool OAIEncryptionSetting::is_bot_locale_export_password_Set() const{
    return m_bot_locale_export_password_isSet;
}

bool OAIEncryptionSetting::is_bot_locale_export_password_Valid() const{
    return m_bot_locale_export_password_isValid;
}

QString OAIEncryptionSetting::getAssociatedTranscriptsPassword() const {
    return m_associated_transcripts_password;
}
void OAIEncryptionSetting::setAssociatedTranscriptsPassword(const QString &associated_transcripts_password) {
    m_associated_transcripts_password = associated_transcripts_password;
    m_associated_transcripts_password_isSet = true;
}

bool OAIEncryptionSetting::is_associated_transcripts_password_Set() const{
    return m_associated_transcripts_password_isSet;
}

bool OAIEncryptionSetting::is_associated_transcripts_password_Valid() const{
    return m_associated_transcripts_password_isValid;
}

bool OAIEncryptionSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_locale_export_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_transcripts_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
