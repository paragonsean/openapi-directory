/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSlotTypeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSlotTypeRequest::OAICreateSlotTypeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSlotTypeRequest::OAICreateSlotTypeRequest() {
    this->initializeModel();
}

OAICreateSlotTypeRequest::~OAICreateSlotTypeRequest() {}

void OAICreateSlotTypeRequest::initializeModel() {

    m_slot_type_name_isSet = false;
    m_slot_type_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_slot_type_values_isSet = false;
    m_slot_type_values_isValid = false;

    m_value_selection_setting_isSet = false;
    m_value_selection_setting_isValid = false;

    m_parent_slot_type_signature_isSet = false;
    m_parent_slot_type_signature_isValid = false;

    m_external_source_setting_isSet = false;
    m_external_source_setting_isValid = false;

    m_composite_slot_type_setting_isSet = false;
    m_composite_slot_type_setting_isValid = false;
}

void OAICreateSlotTypeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSlotTypeRequest::fromJsonObject(QJsonObject json) {

    m_slot_type_name_isValid = ::OpenAPI::fromJsonValue(m_slot_type_name, json[QString("slotTypeName")]);
    m_slot_type_name_isSet = !json[QString("slotTypeName")].isNull() && m_slot_type_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_slot_type_values_isValid = ::OpenAPI::fromJsonValue(m_slot_type_values, json[QString("slotTypeValues")]);
    m_slot_type_values_isSet = !json[QString("slotTypeValues")].isNull() && m_slot_type_values_isValid;

    m_value_selection_setting_isValid = ::OpenAPI::fromJsonValue(m_value_selection_setting, json[QString("valueSelectionSetting")]);
    m_value_selection_setting_isSet = !json[QString("valueSelectionSetting")].isNull() && m_value_selection_setting_isValid;

    m_parent_slot_type_signature_isValid = ::OpenAPI::fromJsonValue(m_parent_slot_type_signature, json[QString("parentSlotTypeSignature")]);
    m_parent_slot_type_signature_isSet = !json[QString("parentSlotTypeSignature")].isNull() && m_parent_slot_type_signature_isValid;

    m_external_source_setting_isValid = ::OpenAPI::fromJsonValue(m_external_source_setting, json[QString("externalSourceSetting")]);
    m_external_source_setting_isSet = !json[QString("externalSourceSetting")].isNull() && m_external_source_setting_isValid;

    m_composite_slot_type_setting_isValid = ::OpenAPI::fromJsonValue(m_composite_slot_type_setting, json[QString("compositeSlotTypeSetting")]);
    m_composite_slot_type_setting_isSet = !json[QString("compositeSlotTypeSetting")].isNull() && m_composite_slot_type_setting_isValid;
}

QString OAICreateSlotTypeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSlotTypeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_slot_type_name_isSet) {
        obj.insert(QString("slotTypeName"), ::OpenAPI::toJsonValue(m_slot_type_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_slot_type_values.isSet()) {
        obj.insert(QString("slotTypeValues"), ::OpenAPI::toJsonValue(m_slot_type_values));
    }
    if (m_value_selection_setting.isSet()) {
        obj.insert(QString("valueSelectionSetting"), ::OpenAPI::toJsonValue(m_value_selection_setting));
    }
    if (m_parent_slot_type_signature_isSet) {
        obj.insert(QString("parentSlotTypeSignature"), ::OpenAPI::toJsonValue(m_parent_slot_type_signature));
    }
    if (m_external_source_setting.isSet()) {
        obj.insert(QString("externalSourceSetting"), ::OpenAPI::toJsonValue(m_external_source_setting));
    }
    if (m_composite_slot_type_setting.isSet()) {
        obj.insert(QString("compositeSlotTypeSetting"), ::OpenAPI::toJsonValue(m_composite_slot_type_setting));
    }
    return obj;
}

QString OAICreateSlotTypeRequest::getSlotTypeName() const {
    return m_slot_type_name;
}
void OAICreateSlotTypeRequest::setSlotTypeName(const QString &slot_type_name) {
    m_slot_type_name = slot_type_name;
    m_slot_type_name_isSet = true;
}

bool OAICreateSlotTypeRequest::is_slot_type_name_Set() const{
    return m_slot_type_name_isSet;
}

bool OAICreateSlotTypeRequest::is_slot_type_name_Valid() const{
    return m_slot_type_name_isValid;
}

QString OAICreateSlotTypeRequest::getDescription() const {
    return m_description;
}
void OAICreateSlotTypeRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSlotTypeRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSlotTypeRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateSlotTypeRequest::getSlotTypeValues() const {
    return m_slot_type_values;
}
void OAICreateSlotTypeRequest::setSlotTypeValues(const QList &slot_type_values) {
    m_slot_type_values = slot_type_values;
    m_slot_type_values_isSet = true;
}

bool OAICreateSlotTypeRequest::is_slot_type_values_Set() const{
    return m_slot_type_values_isSet;
}

bool OAICreateSlotTypeRequest::is_slot_type_values_Valid() const{
    return m_slot_type_values_isValid;
}

OAICreateSlotTypeRequest_valueSelectionSetting OAICreateSlotTypeRequest::getValueSelectionSetting() const {
    return m_value_selection_setting;
}
void OAICreateSlotTypeRequest::setValueSelectionSetting(const OAICreateSlotTypeRequest_valueSelectionSetting &value_selection_setting) {
    m_value_selection_setting = value_selection_setting;
    m_value_selection_setting_isSet = true;
}

bool OAICreateSlotTypeRequest::is_value_selection_setting_Set() const{
    return m_value_selection_setting_isSet;
}

bool OAICreateSlotTypeRequest::is_value_selection_setting_Valid() const{
    return m_value_selection_setting_isValid;
}

QString OAICreateSlotTypeRequest::getParentSlotTypeSignature() const {
    return m_parent_slot_type_signature;
}
void OAICreateSlotTypeRequest::setParentSlotTypeSignature(const QString &parent_slot_type_signature) {
    m_parent_slot_type_signature = parent_slot_type_signature;
    m_parent_slot_type_signature_isSet = true;
}

bool OAICreateSlotTypeRequest::is_parent_slot_type_signature_Set() const{
    return m_parent_slot_type_signature_isSet;
}

bool OAICreateSlotTypeRequest::is_parent_slot_type_signature_Valid() const{
    return m_parent_slot_type_signature_isValid;
}

OAICreateSlotTypeRequest_externalSourceSetting OAICreateSlotTypeRequest::getExternalSourceSetting() const {
    return m_external_source_setting;
}
void OAICreateSlotTypeRequest::setExternalSourceSetting(const OAICreateSlotTypeRequest_externalSourceSetting &external_source_setting) {
    m_external_source_setting = external_source_setting;
    m_external_source_setting_isSet = true;
}

bool OAICreateSlotTypeRequest::is_external_source_setting_Set() const{
    return m_external_source_setting_isSet;
}

bool OAICreateSlotTypeRequest::is_external_source_setting_Valid() const{
    return m_external_source_setting_isValid;
}

OAICreateSlotTypeResponse_compositeSlotTypeSetting OAICreateSlotTypeRequest::getCompositeSlotTypeSetting() const {
    return m_composite_slot_type_setting;
}
void OAICreateSlotTypeRequest::setCompositeSlotTypeSetting(const OAICreateSlotTypeResponse_compositeSlotTypeSetting &composite_slot_type_setting) {
    m_composite_slot_type_setting = composite_slot_type_setting;
    m_composite_slot_type_setting_isSet = true;
}

bool OAICreateSlotTypeRequest::is_composite_slot_type_setting_Set() const{
    return m_composite_slot_type_setting_isSet;
}

bool OAICreateSlotTypeRequest::is_composite_slot_type_setting_Valid() const{
    return m_composite_slot_type_setting_isValid;
}

bool OAICreateSlotTypeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_slot_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_type_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_selection_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_slot_type_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_source_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_composite_slot_type_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSlotTypeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_slot_type_name_isValid && true;
}

} // namespace OpenAPI
