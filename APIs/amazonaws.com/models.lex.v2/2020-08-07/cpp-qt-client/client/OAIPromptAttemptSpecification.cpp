/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromptAttemptSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromptAttemptSpecification::OAIPromptAttemptSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromptAttemptSpecification::OAIPromptAttemptSpecification() {
    this->initializeModel();
}

OAIPromptAttemptSpecification::~OAIPromptAttemptSpecification() {}

void OAIPromptAttemptSpecification::initializeModel() {

    m_allow_interrupt_isSet = false;
    m_allow_interrupt_isValid = false;

    m_allowed_input_types_isSet = false;
    m_allowed_input_types_isValid = false;

    m_audio_and_dtmf_input_specification_isSet = false;
    m_audio_and_dtmf_input_specification_isValid = false;

    m_text_input_specification_isSet = false;
    m_text_input_specification_isValid = false;
}

void OAIPromptAttemptSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPromptAttemptSpecification::fromJsonObject(QJsonObject json) {

    m_allow_interrupt_isValid = ::OpenAPI::fromJsonValue(m_allow_interrupt, json[QString("allowInterrupt")]);
    m_allow_interrupt_isSet = !json[QString("allowInterrupt")].isNull() && m_allow_interrupt_isValid;

    m_allowed_input_types_isValid = ::OpenAPI::fromJsonValue(m_allowed_input_types, json[QString("allowedInputTypes")]);
    m_allowed_input_types_isSet = !json[QString("allowedInputTypes")].isNull() && m_allowed_input_types_isValid;

    m_audio_and_dtmf_input_specification_isValid = ::OpenAPI::fromJsonValue(m_audio_and_dtmf_input_specification, json[QString("audioAndDTMFInputSpecification")]);
    m_audio_and_dtmf_input_specification_isSet = !json[QString("audioAndDTMFInputSpecification")].isNull() && m_audio_and_dtmf_input_specification_isValid;

    m_text_input_specification_isValid = ::OpenAPI::fromJsonValue(m_text_input_specification, json[QString("textInputSpecification")]);
    m_text_input_specification_isSet = !json[QString("textInputSpecification")].isNull() && m_text_input_specification_isValid;
}

QString OAIPromptAttemptSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPromptAttemptSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_interrupt_isSet) {
        obj.insert(QString("allowInterrupt"), ::OpenAPI::toJsonValue(m_allow_interrupt));
    }
    if (m_allowed_input_types.isSet()) {
        obj.insert(QString("allowedInputTypes"), ::OpenAPI::toJsonValue(m_allowed_input_types));
    }
    if (m_audio_and_dtmf_input_specification.isSet()) {
        obj.insert(QString("audioAndDTMFInputSpecification"), ::OpenAPI::toJsonValue(m_audio_and_dtmf_input_specification));
    }
    if (m_text_input_specification.isSet()) {
        obj.insert(QString("textInputSpecification"), ::OpenAPI::toJsonValue(m_text_input_specification));
    }
    return obj;
}

bool OAIPromptAttemptSpecification::getAllowInterrupt() const {
    return m_allow_interrupt;
}
void OAIPromptAttemptSpecification::setAllowInterrupt(const bool &allow_interrupt) {
    m_allow_interrupt = allow_interrupt;
    m_allow_interrupt_isSet = true;
}

bool OAIPromptAttemptSpecification::is_allow_interrupt_Set() const{
    return m_allow_interrupt_isSet;
}

bool OAIPromptAttemptSpecification::is_allow_interrupt_Valid() const{
    return m_allow_interrupt_isValid;
}

OAIPromptAttemptSpecification_allowedInputTypes OAIPromptAttemptSpecification::getAllowedInputTypes() const {
    return m_allowed_input_types;
}
void OAIPromptAttemptSpecification::setAllowedInputTypes(const OAIPromptAttemptSpecification_allowedInputTypes &allowed_input_types) {
    m_allowed_input_types = allowed_input_types;
    m_allowed_input_types_isSet = true;
}

bool OAIPromptAttemptSpecification::is_allowed_input_types_Set() const{
    return m_allowed_input_types_isSet;
}

bool OAIPromptAttemptSpecification::is_allowed_input_types_Valid() const{
    return m_allowed_input_types_isValid;
}

OAIPromptAttemptSpecification_audioAndDTMFInputSpecification OAIPromptAttemptSpecification::getAudioAndDtmfInputSpecification() const {
    return m_audio_and_dtmf_input_specification;
}
void OAIPromptAttemptSpecification::setAudioAndDtmfInputSpecification(const OAIPromptAttemptSpecification_audioAndDTMFInputSpecification &audio_and_dtmf_input_specification) {
    m_audio_and_dtmf_input_specification = audio_and_dtmf_input_specification;
    m_audio_and_dtmf_input_specification_isSet = true;
}

bool OAIPromptAttemptSpecification::is_audio_and_dtmf_input_specification_Set() const{
    return m_audio_and_dtmf_input_specification_isSet;
}

bool OAIPromptAttemptSpecification::is_audio_and_dtmf_input_specification_Valid() const{
    return m_audio_and_dtmf_input_specification_isValid;
}

OAIPromptAttemptSpecification_textInputSpecification OAIPromptAttemptSpecification::getTextInputSpecification() const {
    return m_text_input_specification;
}
void OAIPromptAttemptSpecification::setTextInputSpecification(const OAIPromptAttemptSpecification_textInputSpecification &text_input_specification) {
    m_text_input_specification = text_input_specification;
    m_text_input_specification_isSet = true;
}

bool OAIPromptAttemptSpecification::is_text_input_specification_Set() const{
    return m_text_input_specification_isSet;
}

bool OAIPromptAttemptSpecification::is_text_input_specification_Valid() const{
    return m_text_input_specification_isValid;
}

bool OAIPromptAttemptSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_interrupt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_input_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_and_dtmf_input_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_input_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPromptAttemptSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allowed_input_types_isValid && true;
}

} // namespace OpenAPI
