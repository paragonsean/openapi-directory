/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBotSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBotSummary::OAIBotSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBotSummary::OAIBotSummary() {
    this->initializeModel();
}

OAIBotSummary::~OAIBotSummary() {}

void OAIBotSummary::initializeModel() {

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_bot_name_isSet = false;
    m_bot_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_bot_status_isSet = false;
    m_bot_status_isValid = false;

    m_latest_bot_version_isSet = false;
    m_latest_bot_version_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_bot_type_isSet = false;
    m_bot_type_isValid = false;
}

void OAIBotSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBotSummary::fromJsonObject(QJsonObject json) {

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("botId")]);
    m_bot_id_isSet = !json[QString("botId")].isNull() && m_bot_id_isValid;

    m_bot_name_isValid = ::OpenAPI::fromJsonValue(m_bot_name, json[QString("botName")]);
    m_bot_name_isSet = !json[QString("botName")].isNull() && m_bot_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_bot_status_isValid = ::OpenAPI::fromJsonValue(m_bot_status, json[QString("botStatus")]);
    m_bot_status_isSet = !json[QString("botStatus")].isNull() && m_bot_status_isValid;

    m_latest_bot_version_isValid = ::OpenAPI::fromJsonValue(m_latest_bot_version, json[QString("latestBotVersion")]);
    m_latest_bot_version_isSet = !json[QString("latestBotVersion")].isNull() && m_latest_bot_version_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_bot_type_isValid = ::OpenAPI::fromJsonValue(m_bot_type, json[QString("botType")]);
    m_bot_type_isSet = !json[QString("botType")].isNull() && m_bot_type_isValid;
}

QString OAIBotSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBotSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_id_isSet) {
        obj.insert(QString("botId"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_bot_name_isSet) {
        obj.insert(QString("botName"), ::OpenAPI::toJsonValue(m_bot_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_bot_status.isSet()) {
        obj.insert(QString("botStatus"), ::OpenAPI::toJsonValue(m_bot_status));
    }
    if (m_latest_bot_version_isSet) {
        obj.insert(QString("latestBotVersion"), ::OpenAPI::toJsonValue(m_latest_bot_version));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_bot_type.isSet()) {
        obj.insert(QString("botType"), ::OpenAPI::toJsonValue(m_bot_type));
    }
    return obj;
}

QString OAIBotSummary::getBotId() const {
    return m_bot_id;
}
void OAIBotSummary::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAIBotSummary::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAIBotSummary::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

QString OAIBotSummary::getBotName() const {
    return m_bot_name;
}
void OAIBotSummary::setBotName(const QString &bot_name) {
    m_bot_name = bot_name;
    m_bot_name_isSet = true;
}

bool OAIBotSummary::is_bot_name_Set() const{
    return m_bot_name_isSet;
}

bool OAIBotSummary::is_bot_name_Valid() const{
    return m_bot_name_isValid;
}

QString OAIBotSummary::getDescription() const {
    return m_description;
}
void OAIBotSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBotSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBotSummary::is_description_Valid() const{
    return m_description_isValid;
}

OAIBotStatus OAIBotSummary::getBotStatus() const {
    return m_bot_status;
}
void OAIBotSummary::setBotStatus(const OAIBotStatus &bot_status) {
    m_bot_status = bot_status;
    m_bot_status_isSet = true;
}

bool OAIBotSummary::is_bot_status_Set() const{
    return m_bot_status_isSet;
}

bool OAIBotSummary::is_bot_status_Valid() const{
    return m_bot_status_isValid;
}

QString OAIBotSummary::getLatestBotVersion() const {
    return m_latest_bot_version;
}
void OAIBotSummary::setLatestBotVersion(const QString &latest_bot_version) {
    m_latest_bot_version = latest_bot_version;
    m_latest_bot_version_isSet = true;
}

bool OAIBotSummary::is_latest_bot_version_Set() const{
    return m_latest_bot_version_isSet;
}

bool OAIBotSummary::is_latest_bot_version_Valid() const{
    return m_latest_bot_version_isValid;
}

QDateTime OAIBotSummary::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIBotSummary::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIBotSummary::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIBotSummary::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

OAIBotType OAIBotSummary::getBotType() const {
    return m_bot_type;
}
void OAIBotSummary::setBotType(const OAIBotType &bot_type) {
    m_bot_type = bot_type;
    m_bot_type_isSet = true;
}

bool OAIBotSummary::is_bot_type_Set() const{
    return m_bot_type_isSet;
}

bool OAIBotSummary::is_bot_type_Valid() const{
    return m_bot_type_isValid;
}

bool OAIBotSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBotSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
