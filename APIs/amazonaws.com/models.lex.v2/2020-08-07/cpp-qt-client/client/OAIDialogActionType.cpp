/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDialogActionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDialogActionType::OAIDialogActionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDialogActionType::OAIDialogActionType() {
    this->initializeModel();
}

OAIDialogActionType::~OAIDialogActionType() {}

void OAIDialogActionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDialogActionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDialogActionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ElicitIntent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDialogActionType::ELICITINTENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StartIntent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDialogActionType::STARTINTENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ElicitSlot", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDialogActionType::ELICITSLOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EvaluateConditional", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDialogActionType::EVALUATECONDITIONAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvokeDialogCodeHook", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDialogActionType::INVOKEDIALOGCODEHOOK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ConfirmIntent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDialogActionType::CONFIRMINTENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FulfillIntent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDialogActionType::FULFILLINTENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CloseIntent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDialogActionType::CLOSEINTENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EndConversation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDialogActionType::ENDCONVERSATION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDialogActionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDialogActionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDialogActionType::ELICITINTENT:
            val = "ElicitIntent";
            break;
        case eOAIDialogActionType::STARTINTENT:
            val = "StartIntent";
            break;
        case eOAIDialogActionType::ELICITSLOT:
            val = "ElicitSlot";
            break;
        case eOAIDialogActionType::EVALUATECONDITIONAL:
            val = "EvaluateConditional";
            break;
        case eOAIDialogActionType::INVOKEDIALOGCODEHOOK:
            val = "InvokeDialogCodeHook";
            break;
        case eOAIDialogActionType::CONFIRMINTENT:
            val = "ConfirmIntent";
            break;
        case eOAIDialogActionType::FULFILLINTENT:
            val = "FulfillIntent";
            break;
        case eOAIDialogActionType::CLOSEINTENT:
            val = "CloseIntent";
            break;
        case eOAIDialogActionType::ENDCONVERSATION:
            val = "EndConversation";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDialogActionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDialogActionType::eOAIDialogActionType OAIDialogActionType::getValue() const {
    return m_value;
}

void OAIDialogActionType::setValue(const OAIDialogActionType::eOAIDialogActionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDialogActionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDialogActionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
