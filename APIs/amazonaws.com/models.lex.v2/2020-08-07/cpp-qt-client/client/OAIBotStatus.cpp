/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBotStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBotStatus::OAIBotStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBotStatus::OAIBotStatus() {
    this->initializeModel();
}

OAIBotStatus::~OAIBotStatus() {}

void OAIBotStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBotStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBotStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Creating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotStatus::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Available", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotStatus::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Inactive", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotStatus::INACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Versioning", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotStatus::VERSIONING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Importing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotStatus::IMPORTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Updating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotStatus::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBotStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBotStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBotStatus::CREATING:
            val = "Creating";
            break;
        case eOAIBotStatus::AVAILABLE:
            val = "Available";
            break;
        case eOAIBotStatus::INACTIVE:
            val = "Inactive";
            break;
        case eOAIBotStatus::DELETING:
            val = "Deleting";
            break;
        case eOAIBotStatus::FAILED:
            val = "Failed";
            break;
        case eOAIBotStatus::VERSIONING:
            val = "Versioning";
            break;
        case eOAIBotStatus::IMPORTING:
            val = "Importing";
            break;
        case eOAIBotStatus::UPDATING:
            val = "Updating";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBotStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBotStatus::eOAIBotStatus OAIBotStatus::getValue() const {
    return m_value;
}

void OAIBotStatus::setValue(const OAIBotStatus::eOAIBotStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBotStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIBotStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
