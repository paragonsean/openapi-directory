/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartImport_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartImport_request::OAIStartImport_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartImport_request::OAIStartImport_request() {
    this->initializeModel();
}

OAIStartImport_request::~OAIStartImport_request() {}

void OAIStartImport_request::initializeModel() {

    m_import_id_isSet = false;
    m_import_id_isValid = false;

    m_resource_specification_isSet = false;
    m_resource_specification_isValid = false;

    m_merge_strategy_isSet = false;
    m_merge_strategy_isValid = false;

    m_file_password_isSet = false;
    m_file_password_isValid = false;
}

void OAIStartImport_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartImport_request::fromJsonObject(QJsonObject json) {

    m_import_id_isValid = ::OpenAPI::fromJsonValue(m_import_id, json[QString("importId")]);
    m_import_id_isSet = !json[QString("importId")].isNull() && m_import_id_isValid;

    m_resource_specification_isValid = ::OpenAPI::fromJsonValue(m_resource_specification, json[QString("resourceSpecification")]);
    m_resource_specification_isSet = !json[QString("resourceSpecification")].isNull() && m_resource_specification_isValid;

    m_merge_strategy_isValid = ::OpenAPI::fromJsonValue(m_merge_strategy, json[QString("mergeStrategy")]);
    m_merge_strategy_isSet = !json[QString("mergeStrategy")].isNull() && m_merge_strategy_isValid;

    m_file_password_isValid = ::OpenAPI::fromJsonValue(m_file_password, json[QString("filePassword")]);
    m_file_password_isSet = !json[QString("filePassword")].isNull() && m_file_password_isValid;
}

QString OAIStartImport_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartImport_request::asJsonObject() const {
    QJsonObject obj;
    if (m_import_id_isSet) {
        obj.insert(QString("importId"), ::OpenAPI::toJsonValue(m_import_id));
    }
    if (m_resource_specification.isSet()) {
        obj.insert(QString("resourceSpecification"), ::OpenAPI::toJsonValue(m_resource_specification));
    }
    if (m_merge_strategy_isSet) {
        obj.insert(QString("mergeStrategy"), ::OpenAPI::toJsonValue(m_merge_strategy));
    }
    if (m_file_password_isSet) {
        obj.insert(QString("filePassword"), ::OpenAPI::toJsonValue(m_file_password));
    }
    return obj;
}

QString OAIStartImport_request::getImportId() const {
    return m_import_id;
}
void OAIStartImport_request::setImportId(const QString &import_id) {
    m_import_id = import_id;
    m_import_id_isSet = true;
}

bool OAIStartImport_request::is_import_id_Set() const{
    return m_import_id_isSet;
}

bool OAIStartImport_request::is_import_id_Valid() const{
    return m_import_id_isValid;
}

OAIStartImport_request_resourceSpecification OAIStartImport_request::getResourceSpecification() const {
    return m_resource_specification;
}
void OAIStartImport_request::setResourceSpecification(const OAIStartImport_request_resourceSpecification &resource_specification) {
    m_resource_specification = resource_specification;
    m_resource_specification_isSet = true;
}

bool OAIStartImport_request::is_resource_specification_Set() const{
    return m_resource_specification_isSet;
}

bool OAIStartImport_request::is_resource_specification_Valid() const{
    return m_resource_specification_isValid;
}

QString OAIStartImport_request::getMergeStrategy() const {
    return m_merge_strategy;
}
void OAIStartImport_request::setMergeStrategy(const QString &merge_strategy) {
    m_merge_strategy = merge_strategy;
    m_merge_strategy_isSet = true;
}

bool OAIStartImport_request::is_merge_strategy_Set() const{
    return m_merge_strategy_isSet;
}

bool OAIStartImport_request::is_merge_strategy_Valid() const{
    return m_merge_strategy_isValid;
}

QString OAIStartImport_request::getFilePassword() const {
    return m_file_password;
}
void OAIStartImport_request::setFilePassword(const QString &file_password) {
    m_file_password = file_password;
    m_file_password_isSet = true;
}

bool OAIStartImport_request::is_file_password_Set() const{
    return m_file_password_isSet;
}

bool OAIStartImport_request::is_file_password_Valid() const{
    return m_file_password_isValid;
}

bool OAIStartImport_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_import_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartImport_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_import_id_isValid && m_resource_specification_isValid && m_merge_strategy_isValid && true;
}

} // namespace OpenAPI
