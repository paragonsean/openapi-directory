/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlotTypeSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlotTypeSummary::OAISlotTypeSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlotTypeSummary::OAISlotTypeSummary() {
    this->initializeModel();
}

OAISlotTypeSummary::~OAISlotTypeSummary() {}

void OAISlotTypeSummary::initializeModel() {

    m_slot_type_id_isSet = false;
    m_slot_type_id_isValid = false;

    m_slot_type_name_isSet = false;
    m_slot_type_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_parent_slot_type_signature_isSet = false;
    m_parent_slot_type_signature_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_slot_type_category_isSet = false;
    m_slot_type_category_isValid = false;
}

void OAISlotTypeSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlotTypeSummary::fromJsonObject(QJsonObject json) {

    m_slot_type_id_isValid = ::OpenAPI::fromJsonValue(m_slot_type_id, json[QString("slotTypeId")]);
    m_slot_type_id_isSet = !json[QString("slotTypeId")].isNull() && m_slot_type_id_isValid;

    m_slot_type_name_isValid = ::OpenAPI::fromJsonValue(m_slot_type_name, json[QString("slotTypeName")]);
    m_slot_type_name_isSet = !json[QString("slotTypeName")].isNull() && m_slot_type_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_parent_slot_type_signature_isValid = ::OpenAPI::fromJsonValue(m_parent_slot_type_signature, json[QString("parentSlotTypeSignature")]);
    m_parent_slot_type_signature_isSet = !json[QString("parentSlotTypeSignature")].isNull() && m_parent_slot_type_signature_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_slot_type_category_isValid = ::OpenAPI::fromJsonValue(m_slot_type_category, json[QString("slotTypeCategory")]);
    m_slot_type_category_isSet = !json[QString("slotTypeCategory")].isNull() && m_slot_type_category_isValid;
}

QString OAISlotTypeSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlotTypeSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_slot_type_id_isSet) {
        obj.insert(QString("slotTypeId"), ::OpenAPI::toJsonValue(m_slot_type_id));
    }
    if (m_slot_type_name_isSet) {
        obj.insert(QString("slotTypeName"), ::OpenAPI::toJsonValue(m_slot_type_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_parent_slot_type_signature_isSet) {
        obj.insert(QString("parentSlotTypeSignature"), ::OpenAPI::toJsonValue(m_parent_slot_type_signature));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_slot_type_category.isSet()) {
        obj.insert(QString("slotTypeCategory"), ::OpenAPI::toJsonValue(m_slot_type_category));
    }
    return obj;
}

QString OAISlotTypeSummary::getSlotTypeId() const {
    return m_slot_type_id;
}
void OAISlotTypeSummary::setSlotTypeId(const QString &slot_type_id) {
    m_slot_type_id = slot_type_id;
    m_slot_type_id_isSet = true;
}

bool OAISlotTypeSummary::is_slot_type_id_Set() const{
    return m_slot_type_id_isSet;
}

bool OAISlotTypeSummary::is_slot_type_id_Valid() const{
    return m_slot_type_id_isValid;
}

QString OAISlotTypeSummary::getSlotTypeName() const {
    return m_slot_type_name;
}
void OAISlotTypeSummary::setSlotTypeName(const QString &slot_type_name) {
    m_slot_type_name = slot_type_name;
    m_slot_type_name_isSet = true;
}

bool OAISlotTypeSummary::is_slot_type_name_Set() const{
    return m_slot_type_name_isSet;
}

bool OAISlotTypeSummary::is_slot_type_name_Valid() const{
    return m_slot_type_name_isValid;
}

QString OAISlotTypeSummary::getDescription() const {
    return m_description;
}
void OAISlotTypeSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISlotTypeSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAISlotTypeSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISlotTypeSummary::getParentSlotTypeSignature() const {
    return m_parent_slot_type_signature;
}
void OAISlotTypeSummary::setParentSlotTypeSignature(const QString &parent_slot_type_signature) {
    m_parent_slot_type_signature = parent_slot_type_signature;
    m_parent_slot_type_signature_isSet = true;
}

bool OAISlotTypeSummary::is_parent_slot_type_signature_Set() const{
    return m_parent_slot_type_signature_isSet;
}

bool OAISlotTypeSummary::is_parent_slot_type_signature_Valid() const{
    return m_parent_slot_type_signature_isValid;
}

QDateTime OAISlotTypeSummary::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAISlotTypeSummary::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAISlotTypeSummary::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAISlotTypeSummary::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

OAISlotTypeCategory OAISlotTypeSummary::getSlotTypeCategory() const {
    return m_slot_type_category;
}
void OAISlotTypeSummary::setSlotTypeCategory(const OAISlotTypeCategory &slot_type_category) {
    m_slot_type_category = slot_type_category;
    m_slot_type_category_isSet = true;
}

bool OAISlotTypeSummary::is_slot_type_category_Set() const{
    return m_slot_type_category_isSet;
}

bool OAISlotTypeSummary::is_slot_type_category_Valid() const{
    return m_slot_type_category_isValid;
}

bool OAISlotTypeSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_slot_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_slot_type_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_type_category.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlotTypeSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
