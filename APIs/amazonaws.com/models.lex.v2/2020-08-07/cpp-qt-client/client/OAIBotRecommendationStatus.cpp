/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBotRecommendationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBotRecommendationStatus::OAIBotRecommendationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBotRecommendationStatus::OAIBotRecommendationStatus() {
    this->initializeModel();
}

OAIBotRecommendationStatus::~OAIBotRecommendationStatus() {}

void OAIBotRecommendationStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBotRecommendationStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBotRecommendationStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Processing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotRecommendationStatus::PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotRecommendationStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotRecommendationStatus::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Downloading", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotRecommendationStatus::DOWNLOADING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Updating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotRecommendationStatus::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Available", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotRecommendationStatus::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotRecommendationStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopping", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotRecommendationStatus::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopped", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBotRecommendationStatus::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBotRecommendationStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBotRecommendationStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBotRecommendationStatus::PROCESSING:
            val = "Processing";
            break;
        case eOAIBotRecommendationStatus::DELETING:
            val = "Deleting";
            break;
        case eOAIBotRecommendationStatus::DELETED:
            val = "Deleted";
            break;
        case eOAIBotRecommendationStatus::DOWNLOADING:
            val = "Downloading";
            break;
        case eOAIBotRecommendationStatus::UPDATING:
            val = "Updating";
            break;
        case eOAIBotRecommendationStatus::AVAILABLE:
            val = "Available";
            break;
        case eOAIBotRecommendationStatus::FAILED:
            val = "Failed";
            break;
        case eOAIBotRecommendationStatus::STOPPING:
            val = "Stopping";
            break;
        case eOAIBotRecommendationStatus::STOPPED:
            val = "Stopped";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBotRecommendationStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBotRecommendationStatus::eOAIBotRecommendationStatus OAIBotRecommendationStatus::getValue() const {
    return m_value;
}

void OAIBotRecommendationStatus::setValue(const OAIBotRecommendationStatus::eOAIBotRecommendationStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBotRecommendationStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIBotRecommendationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
