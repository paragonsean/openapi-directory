/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISampleUtterance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISampleUtterance::OAISampleUtterance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISampleUtterance::OAISampleUtterance() {
    this->initializeModel();
}

OAISampleUtterance::~OAISampleUtterance() {}

void OAISampleUtterance::initializeModel() {

    m_utterance_isSet = false;
    m_utterance_isValid = false;
}

void OAISampleUtterance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISampleUtterance::fromJsonObject(QJsonObject json) {

    m_utterance_isValid = ::OpenAPI::fromJsonValue(m_utterance, json[QString("utterance")]);
    m_utterance_isSet = !json[QString("utterance")].isNull() && m_utterance_isValid;
}

QString OAISampleUtterance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISampleUtterance::asJsonObject() const {
    QJsonObject obj;
    if (m_utterance_isSet) {
        obj.insert(QString("utterance"), ::OpenAPI::toJsonValue(m_utterance));
    }
    return obj;
}

QString OAISampleUtterance::getUtterance() const {
    return m_utterance;
}
void OAISampleUtterance::setUtterance(const QString &utterance) {
    m_utterance = utterance;
    m_utterance_isSet = true;
}

bool OAISampleUtterance::is_utterance_Set() const{
    return m_utterance_isSet;
}

bool OAISampleUtterance::is_utterance_Valid() const{
    return m_utterance_isValid;
}

bool OAISampleUtterance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_utterance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISampleUtterance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_utterance_isValid && true;
}

} // namespace OpenAPI
