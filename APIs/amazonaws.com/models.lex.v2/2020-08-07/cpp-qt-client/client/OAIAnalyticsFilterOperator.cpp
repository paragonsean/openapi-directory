/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyticsFilterOperator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyticsFilterOperator::OAIAnalyticsFilterOperator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyticsFilterOperator::OAIAnalyticsFilterOperator() {
    this->initializeModel();
}

OAIAnalyticsFilterOperator::~OAIAnalyticsFilterOperator() {}

void OAIAnalyticsFilterOperator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAnalyticsFilterOperator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAnalyticsFilterOperator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("EQ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsFilterOperator::EQ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsFilterOperator::GT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalyticsFilterOperator::LT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAnalyticsFilterOperator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAnalyticsFilterOperator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAnalyticsFilterOperator::EQ:
            val = "EQ";
            break;
        case eOAIAnalyticsFilterOperator::GT:
            val = "GT";
            break;
        case eOAIAnalyticsFilterOperator::LT:
            val = "LT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAnalyticsFilterOperator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAnalyticsFilterOperator::eOAIAnalyticsFilterOperator OAIAnalyticsFilterOperator::getValue() const {
    return m_value;
}

void OAIAnalyticsFilterOperator::setValue(const OAIAnalyticsFilterOperator::eOAIAnalyticsFilterOperator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAnalyticsFilterOperator::isSet() const {
    
    return m_value_isSet;
}

bool OAIAnalyticsFilterOperator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
