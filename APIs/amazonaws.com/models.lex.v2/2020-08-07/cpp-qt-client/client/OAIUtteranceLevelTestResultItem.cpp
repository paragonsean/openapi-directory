/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUtteranceLevelTestResultItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUtteranceLevelTestResultItem::OAIUtteranceLevelTestResultItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUtteranceLevelTestResultItem::OAIUtteranceLevelTestResultItem() {
    this->initializeModel();
}

OAIUtteranceLevelTestResultItem::~OAIUtteranceLevelTestResultItem() {}

void OAIUtteranceLevelTestResultItem::initializeModel() {

    m_record_number_isSet = false;
    m_record_number_isValid = false;

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_turn_result_isSet = false;
    m_turn_result_isValid = false;
}

void OAIUtteranceLevelTestResultItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUtteranceLevelTestResultItem::fromJsonObject(QJsonObject json) {

    m_record_number_isValid = ::OpenAPI::fromJsonValue(m_record_number, json[QString("recordNumber")]);
    m_record_number_isSet = !json[QString("recordNumber")].isNull() && m_record_number_isValid;

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversationId")]);
    m_conversation_id_isSet = !json[QString("conversationId")].isNull() && m_conversation_id_isValid;

    m_turn_result_isValid = ::OpenAPI::fromJsonValue(m_turn_result, json[QString("turnResult")]);
    m_turn_result_isSet = !json[QString("turnResult")].isNull() && m_turn_result_isValid;
}

QString OAIUtteranceLevelTestResultItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUtteranceLevelTestResultItem::asJsonObject() const {
    QJsonObject obj;
    if (m_record_number_isSet) {
        obj.insert(QString("recordNumber"), ::OpenAPI::toJsonValue(m_record_number));
    }
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversationId"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_turn_result.isSet()) {
        obj.insert(QString("turnResult"), ::OpenAPI::toJsonValue(m_turn_result));
    }
    return obj;
}

qint32 OAIUtteranceLevelTestResultItem::getRecordNumber() const {
    return m_record_number;
}
void OAIUtteranceLevelTestResultItem::setRecordNumber(const qint32 &record_number) {
    m_record_number = record_number;
    m_record_number_isSet = true;
}

bool OAIUtteranceLevelTestResultItem::is_record_number_Set() const{
    return m_record_number_isSet;
}

bool OAIUtteranceLevelTestResultItem::is_record_number_Valid() const{
    return m_record_number_isValid;
}

QString OAIUtteranceLevelTestResultItem::getConversationId() const {
    return m_conversation_id;
}
void OAIUtteranceLevelTestResultItem::setConversationId(const QString &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAIUtteranceLevelTestResultItem::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAIUtteranceLevelTestResultItem::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

OAIUtteranceLevelTestResultItem_turnResult OAIUtteranceLevelTestResultItem::getTurnResult() const {
    return m_turn_result;
}
void OAIUtteranceLevelTestResultItem::setTurnResult(const OAIUtteranceLevelTestResultItem_turnResult &turn_result) {
    m_turn_result = turn_result;
    m_turn_result_isSet = true;
}

bool OAIUtteranceLevelTestResultItem::is_turn_result_Set() const{
    return m_turn_result_isSet;
}

bool OAIUtteranceLevelTestResultItem::is_turn_result_Valid() const{
    return m_turn_result_isValid;
}

bool OAIUtteranceLevelTestResultItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turn_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUtteranceLevelTestResultItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_record_number_isValid && m_turn_result_isValid && true;
}

} // namespace OpenAPI
