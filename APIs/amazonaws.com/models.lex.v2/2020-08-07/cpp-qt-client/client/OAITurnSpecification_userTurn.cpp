/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITurnSpecification_userTurn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITurnSpecification_userTurn::OAITurnSpecification_userTurn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITurnSpecification_userTurn::OAITurnSpecification_userTurn() {
    this->initializeModel();
}

OAITurnSpecification_userTurn::~OAITurnSpecification_userTurn() {}

void OAITurnSpecification_userTurn::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_expected_isSet = false;
    m_expected_isValid = false;
}

void OAITurnSpecification_userTurn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITurnSpecification_userTurn::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_expected_isValid = ::OpenAPI::fromJsonValue(m_expected, json[QString("expected")]);
    m_expected_isSet = !json[QString("expected")].isNull() && m_expected_isValid;
}

QString OAITurnSpecification_userTurn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITurnSpecification_userTurn::asJsonObject() const {
    QJsonObject obj;
    if (m_input.isSet()) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_expected.isSet()) {
        obj.insert(QString("expected"), ::OpenAPI::toJsonValue(m_expected));
    }
    return obj;
}

OAIUserTurnResult_input OAITurnSpecification_userTurn::getInput() const {
    return m_input;
}
void OAITurnSpecification_userTurn::setInput(const OAIUserTurnResult_input &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAITurnSpecification_userTurn::is_input_Set() const{
    return m_input_isSet;
}

bool OAITurnSpecification_userTurn::is_input_Valid() const{
    return m_input_isValid;
}

OAIUserTurnSpecification_expected OAITurnSpecification_userTurn::getExpected() const {
    return m_expected;
}
void OAITurnSpecification_userTurn::setExpected(const OAIUserTurnSpecification_expected &expected) {
    m_expected = expected;
    m_expected_isSet = true;
}

bool OAITurnSpecification_userTurn::is_expected_Set() const{
    return m_expected_isSet;
}

bool OAITurnSpecification_userTurn::is_expected_Valid() const{
    return m_expected_isValid;
}

bool OAITurnSpecification_userTurn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITurnSpecification_userTurn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_expected_isValid && true;
}

} // namespace OpenAPI
