/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTestSetResponse_storageLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTestSetResponse_storageLocation::OAIDescribeTestSetResponse_storageLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTestSetResponse_storageLocation::OAIDescribeTestSetResponse_storageLocation() {
    this->initializeModel();
}

OAIDescribeTestSetResponse_storageLocation::~OAIDescribeTestSetResponse_storageLocation() {}

void OAIDescribeTestSetResponse_storageLocation::initializeModel() {

    m_s3_bucket_name_isSet = false;
    m_s3_bucket_name_isValid = false;

    m_s3_path_isSet = false;
    m_s3_path_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;
}

void OAIDescribeTestSetResponse_storageLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTestSetResponse_storageLocation::fromJsonObject(QJsonObject json) {

    m_s3_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_name, json[QString("s3BucketName")]);
    m_s3_bucket_name_isSet = !json[QString("s3BucketName")].isNull() && m_s3_bucket_name_isValid;

    m_s3_path_isValid = ::OpenAPI::fromJsonValue(m_s3_path, json[QString("s3Path")]);
    m_s3_path_isSet = !json[QString("s3Path")].isNull() && m_s3_path_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("kmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("kmsKeyArn")].isNull() && m_kms_key_arn_isValid;
}

QString OAIDescribeTestSetResponse_storageLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTestSetResponse_storageLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket_name_isSet) {
        obj.insert(QString("s3BucketName"), ::OpenAPI::toJsonValue(m_s3_bucket_name));
    }
    if (m_s3_path_isSet) {
        obj.insert(QString("s3Path"), ::OpenAPI::toJsonValue(m_s3_path));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("kmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    return obj;
}

QString OAIDescribeTestSetResponse_storageLocation::getS3BucketName() const {
    return m_s3_bucket_name;
}
void OAIDescribeTestSetResponse_storageLocation::setS3BucketName(const QString &s3_bucket_name) {
    m_s3_bucket_name = s3_bucket_name;
    m_s3_bucket_name_isSet = true;
}

bool OAIDescribeTestSetResponse_storageLocation::is_s3_bucket_name_Set() const{
    return m_s3_bucket_name_isSet;
}

bool OAIDescribeTestSetResponse_storageLocation::is_s3_bucket_name_Valid() const{
    return m_s3_bucket_name_isValid;
}

QString OAIDescribeTestSetResponse_storageLocation::getS3Path() const {
    return m_s3_path;
}
void OAIDescribeTestSetResponse_storageLocation::setS3Path(const QString &s3_path) {
    m_s3_path = s3_path;
    m_s3_path_isSet = true;
}

bool OAIDescribeTestSetResponse_storageLocation::is_s3_path_Set() const{
    return m_s3_path_isSet;
}

bool OAIDescribeTestSetResponse_storageLocation::is_s3_path_Valid() const{
    return m_s3_path_isValid;
}

QString OAIDescribeTestSetResponse_storageLocation::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIDescribeTestSetResponse_storageLocation::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIDescribeTestSetResponse_storageLocation::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIDescribeTestSetResponse_storageLocation::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

bool OAIDescribeTestSetResponse_storageLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTestSetResponse_storageLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_bucket_name_isValid && m_s3_path_isValid && true;
}

} // namespace OpenAPI
