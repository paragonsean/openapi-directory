/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestExecutionResultItems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestExecutionResultItems::OAITestExecutionResultItems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestExecutionResultItems::OAITestExecutionResultItems() {
    this->initializeModel();
}

OAITestExecutionResultItems::~OAITestExecutionResultItems() {}

void OAITestExecutionResultItems::initializeModel() {

    m_overall_test_results_isSet = false;
    m_overall_test_results_isValid = false;

    m_conversation_level_test_results_isSet = false;
    m_conversation_level_test_results_isValid = false;

    m_intent_classification_test_results_isSet = false;
    m_intent_classification_test_results_isValid = false;

    m_intent_level_slot_resolution_test_results_isSet = false;
    m_intent_level_slot_resolution_test_results_isValid = false;

    m_utterance_level_test_results_isSet = false;
    m_utterance_level_test_results_isValid = false;
}

void OAITestExecutionResultItems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestExecutionResultItems::fromJsonObject(QJsonObject json) {

    m_overall_test_results_isValid = ::OpenAPI::fromJsonValue(m_overall_test_results, json[QString("overallTestResults")]);
    m_overall_test_results_isSet = !json[QString("overallTestResults")].isNull() && m_overall_test_results_isValid;

    m_conversation_level_test_results_isValid = ::OpenAPI::fromJsonValue(m_conversation_level_test_results, json[QString("conversationLevelTestResults")]);
    m_conversation_level_test_results_isSet = !json[QString("conversationLevelTestResults")].isNull() && m_conversation_level_test_results_isValid;

    m_intent_classification_test_results_isValid = ::OpenAPI::fromJsonValue(m_intent_classification_test_results, json[QString("intentClassificationTestResults")]);
    m_intent_classification_test_results_isSet = !json[QString("intentClassificationTestResults")].isNull() && m_intent_classification_test_results_isValid;

    m_intent_level_slot_resolution_test_results_isValid = ::OpenAPI::fromJsonValue(m_intent_level_slot_resolution_test_results, json[QString("intentLevelSlotResolutionTestResults")]);
    m_intent_level_slot_resolution_test_results_isSet = !json[QString("intentLevelSlotResolutionTestResults")].isNull() && m_intent_level_slot_resolution_test_results_isValid;

    m_utterance_level_test_results_isValid = ::OpenAPI::fromJsonValue(m_utterance_level_test_results, json[QString("utteranceLevelTestResults")]);
    m_utterance_level_test_results_isSet = !json[QString("utteranceLevelTestResults")].isNull() && m_utterance_level_test_results_isValid;
}

QString OAITestExecutionResultItems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestExecutionResultItems::asJsonObject() const {
    QJsonObject obj;
    if (m_overall_test_results.isSet()) {
        obj.insert(QString("overallTestResults"), ::OpenAPI::toJsonValue(m_overall_test_results));
    }
    if (m_conversation_level_test_results.isSet()) {
        obj.insert(QString("conversationLevelTestResults"), ::OpenAPI::toJsonValue(m_conversation_level_test_results));
    }
    if (m_intent_classification_test_results.isSet()) {
        obj.insert(QString("intentClassificationTestResults"), ::OpenAPI::toJsonValue(m_intent_classification_test_results));
    }
    if (m_intent_level_slot_resolution_test_results.isSet()) {
        obj.insert(QString("intentLevelSlotResolutionTestResults"), ::OpenAPI::toJsonValue(m_intent_level_slot_resolution_test_results));
    }
    if (m_utterance_level_test_results.isSet()) {
        obj.insert(QString("utteranceLevelTestResults"), ::OpenAPI::toJsonValue(m_utterance_level_test_results));
    }
    return obj;
}

OAITestExecutionResultItems_overallTestResults OAITestExecutionResultItems::getOverallTestResults() const {
    return m_overall_test_results;
}
void OAITestExecutionResultItems::setOverallTestResults(const OAITestExecutionResultItems_overallTestResults &overall_test_results) {
    m_overall_test_results = overall_test_results;
    m_overall_test_results_isSet = true;
}

bool OAITestExecutionResultItems::is_overall_test_results_Set() const{
    return m_overall_test_results_isSet;
}

bool OAITestExecutionResultItems::is_overall_test_results_Valid() const{
    return m_overall_test_results_isValid;
}

OAITestExecutionResultItems_conversationLevelTestResults OAITestExecutionResultItems::getConversationLevelTestResults() const {
    return m_conversation_level_test_results;
}
void OAITestExecutionResultItems::setConversationLevelTestResults(const OAITestExecutionResultItems_conversationLevelTestResults &conversation_level_test_results) {
    m_conversation_level_test_results = conversation_level_test_results;
    m_conversation_level_test_results_isSet = true;
}

bool OAITestExecutionResultItems::is_conversation_level_test_results_Set() const{
    return m_conversation_level_test_results_isSet;
}

bool OAITestExecutionResultItems::is_conversation_level_test_results_Valid() const{
    return m_conversation_level_test_results_isValid;
}

OAITestExecutionResultItems_intentClassificationTestResults OAITestExecutionResultItems::getIntentClassificationTestResults() const {
    return m_intent_classification_test_results;
}
void OAITestExecutionResultItems::setIntentClassificationTestResults(const OAITestExecutionResultItems_intentClassificationTestResults &intent_classification_test_results) {
    m_intent_classification_test_results = intent_classification_test_results;
    m_intent_classification_test_results_isSet = true;
}

bool OAITestExecutionResultItems::is_intent_classification_test_results_Set() const{
    return m_intent_classification_test_results_isSet;
}

bool OAITestExecutionResultItems::is_intent_classification_test_results_Valid() const{
    return m_intent_classification_test_results_isValid;
}

OAITestExecutionResultItems_intentLevelSlotResolutionTestResults OAITestExecutionResultItems::getIntentLevelSlotResolutionTestResults() const {
    return m_intent_level_slot_resolution_test_results;
}
void OAITestExecutionResultItems::setIntentLevelSlotResolutionTestResults(const OAITestExecutionResultItems_intentLevelSlotResolutionTestResults &intent_level_slot_resolution_test_results) {
    m_intent_level_slot_resolution_test_results = intent_level_slot_resolution_test_results;
    m_intent_level_slot_resolution_test_results_isSet = true;
}

bool OAITestExecutionResultItems::is_intent_level_slot_resolution_test_results_Set() const{
    return m_intent_level_slot_resolution_test_results_isSet;
}

bool OAITestExecutionResultItems::is_intent_level_slot_resolution_test_results_Valid() const{
    return m_intent_level_slot_resolution_test_results_isValid;
}

OAITestExecutionResultItems_utteranceLevelTestResults OAITestExecutionResultItems::getUtteranceLevelTestResults() const {
    return m_utterance_level_test_results;
}
void OAITestExecutionResultItems::setUtteranceLevelTestResults(const OAITestExecutionResultItems_utteranceLevelTestResults &utterance_level_test_results) {
    m_utterance_level_test_results = utterance_level_test_results;
    m_utterance_level_test_results_isSet = true;
}

bool OAITestExecutionResultItems::is_utterance_level_test_results_Set() const{
    return m_utterance_level_test_results_isSet;
}

bool OAITestExecutionResultItems::is_utterance_level_test_results_Valid() const{
    return m_utterance_level_test_results_isValid;
}

bool OAITestExecutionResultItems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_overall_test_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_level_test_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_classification_test_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_level_slot_resolution_test_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_utterance_level_test_results.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestExecutionResultItems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
