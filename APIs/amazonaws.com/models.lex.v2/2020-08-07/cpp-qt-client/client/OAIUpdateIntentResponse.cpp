/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateIntentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateIntentResponse::OAIUpdateIntentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateIntentResponse::OAIUpdateIntentResponse() {
    this->initializeModel();
}

OAIUpdateIntentResponse::~OAIUpdateIntentResponse() {}

void OAIUpdateIntentResponse::initializeModel() {

    m_intent_id_isSet = false;
    m_intent_id_isValid = false;

    m_intent_name_isSet = false;
    m_intent_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_parent_intent_signature_isSet = false;
    m_parent_intent_signature_isValid = false;

    m_sample_utterances_isSet = false;
    m_sample_utterances_isValid = false;

    m_dialog_code_hook_isSet = false;
    m_dialog_code_hook_isValid = false;

    m_fulfillment_code_hook_isSet = false;
    m_fulfillment_code_hook_isValid = false;

    m_slot_priorities_isSet = false;
    m_slot_priorities_isValid = false;

    m_intent_confirmation_setting_isSet = false;
    m_intent_confirmation_setting_isValid = false;

    m_intent_closing_setting_isSet = false;
    m_intent_closing_setting_isValid = false;

    m_input_contexts_isSet = false;
    m_input_contexts_isValid = false;

    m_output_contexts_isSet = false;
    m_output_contexts_isValid = false;

    m_kendra_configuration_isSet = false;
    m_kendra_configuration_isValid = false;

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_locale_id_isSet = false;
    m_locale_id_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_initial_response_setting_isSet = false;
    m_initial_response_setting_isValid = false;
}

void OAIUpdateIntentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateIntentResponse::fromJsonObject(QJsonObject json) {

    m_intent_id_isValid = ::OpenAPI::fromJsonValue(m_intent_id, json[QString("intentId")]);
    m_intent_id_isSet = !json[QString("intentId")].isNull() && m_intent_id_isValid;

    m_intent_name_isValid = ::OpenAPI::fromJsonValue(m_intent_name, json[QString("intentName")]);
    m_intent_name_isSet = !json[QString("intentName")].isNull() && m_intent_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_parent_intent_signature_isValid = ::OpenAPI::fromJsonValue(m_parent_intent_signature, json[QString("parentIntentSignature")]);
    m_parent_intent_signature_isSet = !json[QString("parentIntentSignature")].isNull() && m_parent_intent_signature_isValid;

    m_sample_utterances_isValid = ::OpenAPI::fromJsonValue(m_sample_utterances, json[QString("sampleUtterances")]);
    m_sample_utterances_isSet = !json[QString("sampleUtterances")].isNull() && m_sample_utterances_isValid;

    m_dialog_code_hook_isValid = ::OpenAPI::fromJsonValue(m_dialog_code_hook, json[QString("dialogCodeHook")]);
    m_dialog_code_hook_isSet = !json[QString("dialogCodeHook")].isNull() && m_dialog_code_hook_isValid;

    m_fulfillment_code_hook_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_code_hook, json[QString("fulfillmentCodeHook")]);
    m_fulfillment_code_hook_isSet = !json[QString("fulfillmentCodeHook")].isNull() && m_fulfillment_code_hook_isValid;

    m_slot_priorities_isValid = ::OpenAPI::fromJsonValue(m_slot_priorities, json[QString("slotPriorities")]);
    m_slot_priorities_isSet = !json[QString("slotPriorities")].isNull() && m_slot_priorities_isValid;

    m_intent_confirmation_setting_isValid = ::OpenAPI::fromJsonValue(m_intent_confirmation_setting, json[QString("intentConfirmationSetting")]);
    m_intent_confirmation_setting_isSet = !json[QString("intentConfirmationSetting")].isNull() && m_intent_confirmation_setting_isValid;

    m_intent_closing_setting_isValid = ::OpenAPI::fromJsonValue(m_intent_closing_setting, json[QString("intentClosingSetting")]);
    m_intent_closing_setting_isSet = !json[QString("intentClosingSetting")].isNull() && m_intent_closing_setting_isValid;

    m_input_contexts_isValid = ::OpenAPI::fromJsonValue(m_input_contexts, json[QString("inputContexts")]);
    m_input_contexts_isSet = !json[QString("inputContexts")].isNull() && m_input_contexts_isValid;

    m_output_contexts_isValid = ::OpenAPI::fromJsonValue(m_output_contexts, json[QString("outputContexts")]);
    m_output_contexts_isSet = !json[QString("outputContexts")].isNull() && m_output_contexts_isValid;

    m_kendra_configuration_isValid = ::OpenAPI::fromJsonValue(m_kendra_configuration, json[QString("kendraConfiguration")]);
    m_kendra_configuration_isSet = !json[QString("kendraConfiguration")].isNull() && m_kendra_configuration_isValid;

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("botId")]);
    m_bot_id_isSet = !json[QString("botId")].isNull() && m_bot_id_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_locale_id_isValid = ::OpenAPI::fromJsonValue(m_locale_id, json[QString("localeId")]);
    m_locale_id_isSet = !json[QString("localeId")].isNull() && m_locale_id_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_initial_response_setting_isValid = ::OpenAPI::fromJsonValue(m_initial_response_setting, json[QString("initialResponseSetting")]);
    m_initial_response_setting_isSet = !json[QString("initialResponseSetting")].isNull() && m_initial_response_setting_isValid;
}

QString OAIUpdateIntentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateIntentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_intent_id_isSet) {
        obj.insert(QString("intentId"), ::OpenAPI::toJsonValue(m_intent_id));
    }
    if (m_intent_name_isSet) {
        obj.insert(QString("intentName"), ::OpenAPI::toJsonValue(m_intent_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_parent_intent_signature_isSet) {
        obj.insert(QString("parentIntentSignature"), ::OpenAPI::toJsonValue(m_parent_intent_signature));
    }
    if (m_sample_utterances.isSet()) {
        obj.insert(QString("sampleUtterances"), ::OpenAPI::toJsonValue(m_sample_utterances));
    }
    if (m_dialog_code_hook.isSet()) {
        obj.insert(QString("dialogCodeHook"), ::OpenAPI::toJsonValue(m_dialog_code_hook));
    }
    if (m_fulfillment_code_hook.isSet()) {
        obj.insert(QString("fulfillmentCodeHook"), ::OpenAPI::toJsonValue(m_fulfillment_code_hook));
    }
    if (m_slot_priorities.isSet()) {
        obj.insert(QString("slotPriorities"), ::OpenAPI::toJsonValue(m_slot_priorities));
    }
    if (m_intent_confirmation_setting.isSet()) {
        obj.insert(QString("intentConfirmationSetting"), ::OpenAPI::toJsonValue(m_intent_confirmation_setting));
    }
    if (m_intent_closing_setting.isSet()) {
        obj.insert(QString("intentClosingSetting"), ::OpenAPI::toJsonValue(m_intent_closing_setting));
    }
    if (m_input_contexts.isSet()) {
        obj.insert(QString("inputContexts"), ::OpenAPI::toJsonValue(m_input_contexts));
    }
    if (m_output_contexts.isSet()) {
        obj.insert(QString("outputContexts"), ::OpenAPI::toJsonValue(m_output_contexts));
    }
    if (m_kendra_configuration.isSet()) {
        obj.insert(QString("kendraConfiguration"), ::OpenAPI::toJsonValue(m_kendra_configuration));
    }
    if (m_bot_id_isSet) {
        obj.insert(QString("botId"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_locale_id_isSet) {
        obj.insert(QString("localeId"), ::OpenAPI::toJsonValue(m_locale_id));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_initial_response_setting.isSet()) {
        obj.insert(QString("initialResponseSetting"), ::OpenAPI::toJsonValue(m_initial_response_setting));
    }
    return obj;
}

QString OAIUpdateIntentResponse::getIntentId() const {
    return m_intent_id;
}
void OAIUpdateIntentResponse::setIntentId(const QString &intent_id) {
    m_intent_id = intent_id;
    m_intent_id_isSet = true;
}

bool OAIUpdateIntentResponse::is_intent_id_Set() const{
    return m_intent_id_isSet;
}

bool OAIUpdateIntentResponse::is_intent_id_Valid() const{
    return m_intent_id_isValid;
}

QString OAIUpdateIntentResponse::getIntentName() const {
    return m_intent_name;
}
void OAIUpdateIntentResponse::setIntentName(const QString &intent_name) {
    m_intent_name = intent_name;
    m_intent_name_isSet = true;
}

bool OAIUpdateIntentResponse::is_intent_name_Set() const{
    return m_intent_name_isSet;
}

bool OAIUpdateIntentResponse::is_intent_name_Valid() const{
    return m_intent_name_isValid;
}

QString OAIUpdateIntentResponse::getDescription() const {
    return m_description;
}
void OAIUpdateIntentResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateIntentResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateIntentResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateIntentResponse::getParentIntentSignature() const {
    return m_parent_intent_signature;
}
void OAIUpdateIntentResponse::setParentIntentSignature(const QString &parent_intent_signature) {
    m_parent_intent_signature = parent_intent_signature;
    m_parent_intent_signature_isSet = true;
}

bool OAIUpdateIntentResponse::is_parent_intent_signature_Set() const{
    return m_parent_intent_signature_isSet;
}

bool OAIUpdateIntentResponse::is_parent_intent_signature_Valid() const{
    return m_parent_intent_signature_isValid;
}

QList OAIUpdateIntentResponse::getSampleUtterances() const {
    return m_sample_utterances;
}
void OAIUpdateIntentResponse::setSampleUtterances(const QList &sample_utterances) {
    m_sample_utterances = sample_utterances;
    m_sample_utterances_isSet = true;
}

bool OAIUpdateIntentResponse::is_sample_utterances_Set() const{
    return m_sample_utterances_isSet;
}

bool OAIUpdateIntentResponse::is_sample_utterances_Valid() const{
    return m_sample_utterances_isValid;
}

OAIUpdateIntentResponse_dialogCodeHook OAIUpdateIntentResponse::getDialogCodeHook() const {
    return m_dialog_code_hook;
}
void OAIUpdateIntentResponse::setDialogCodeHook(const OAIUpdateIntentResponse_dialogCodeHook &dialog_code_hook) {
    m_dialog_code_hook = dialog_code_hook;
    m_dialog_code_hook_isSet = true;
}

bool OAIUpdateIntentResponse::is_dialog_code_hook_Set() const{
    return m_dialog_code_hook_isSet;
}

bool OAIUpdateIntentResponse::is_dialog_code_hook_Valid() const{
    return m_dialog_code_hook_isValid;
}

OAIUpdateIntentResponse_fulfillmentCodeHook OAIUpdateIntentResponse::getFulfillmentCodeHook() const {
    return m_fulfillment_code_hook;
}
void OAIUpdateIntentResponse::setFulfillmentCodeHook(const OAIUpdateIntentResponse_fulfillmentCodeHook &fulfillment_code_hook) {
    m_fulfillment_code_hook = fulfillment_code_hook;
    m_fulfillment_code_hook_isSet = true;
}

bool OAIUpdateIntentResponse::is_fulfillment_code_hook_Set() const{
    return m_fulfillment_code_hook_isSet;
}

bool OAIUpdateIntentResponse::is_fulfillment_code_hook_Valid() const{
    return m_fulfillment_code_hook_isValid;
}

QList OAIUpdateIntentResponse::getSlotPriorities() const {
    return m_slot_priorities;
}
void OAIUpdateIntentResponse::setSlotPriorities(const QList &slot_priorities) {
    m_slot_priorities = slot_priorities;
    m_slot_priorities_isSet = true;
}

bool OAIUpdateIntentResponse::is_slot_priorities_Set() const{
    return m_slot_priorities_isSet;
}

bool OAIUpdateIntentResponse::is_slot_priorities_Valid() const{
    return m_slot_priorities_isValid;
}

OAIUpdateIntentResponse_intentConfirmationSetting OAIUpdateIntentResponse::getIntentConfirmationSetting() const {
    return m_intent_confirmation_setting;
}
void OAIUpdateIntentResponse::setIntentConfirmationSetting(const OAIUpdateIntentResponse_intentConfirmationSetting &intent_confirmation_setting) {
    m_intent_confirmation_setting = intent_confirmation_setting;
    m_intent_confirmation_setting_isSet = true;
}

bool OAIUpdateIntentResponse::is_intent_confirmation_setting_Set() const{
    return m_intent_confirmation_setting_isSet;
}

bool OAIUpdateIntentResponse::is_intent_confirmation_setting_Valid() const{
    return m_intent_confirmation_setting_isValid;
}

OAIUpdateIntentResponse_intentClosingSetting OAIUpdateIntentResponse::getIntentClosingSetting() const {
    return m_intent_closing_setting;
}
void OAIUpdateIntentResponse::setIntentClosingSetting(const OAIUpdateIntentResponse_intentClosingSetting &intent_closing_setting) {
    m_intent_closing_setting = intent_closing_setting;
    m_intent_closing_setting_isSet = true;
}

bool OAIUpdateIntentResponse::is_intent_closing_setting_Set() const{
    return m_intent_closing_setting_isSet;
}

bool OAIUpdateIntentResponse::is_intent_closing_setting_Valid() const{
    return m_intent_closing_setting_isValid;
}

QList OAIUpdateIntentResponse::getInputContexts() const {
    return m_input_contexts;
}
void OAIUpdateIntentResponse::setInputContexts(const QList &input_contexts) {
    m_input_contexts = input_contexts;
    m_input_contexts_isSet = true;
}

bool OAIUpdateIntentResponse::is_input_contexts_Set() const{
    return m_input_contexts_isSet;
}

bool OAIUpdateIntentResponse::is_input_contexts_Valid() const{
    return m_input_contexts_isValid;
}

QList OAIUpdateIntentResponse::getOutputContexts() const {
    return m_output_contexts;
}
void OAIUpdateIntentResponse::setOutputContexts(const QList &output_contexts) {
    m_output_contexts = output_contexts;
    m_output_contexts_isSet = true;
}

bool OAIUpdateIntentResponse::is_output_contexts_Set() const{
    return m_output_contexts_isSet;
}

bool OAIUpdateIntentResponse::is_output_contexts_Valid() const{
    return m_output_contexts_isValid;
}

OAIUpdateIntentResponse_kendraConfiguration OAIUpdateIntentResponse::getKendraConfiguration() const {
    return m_kendra_configuration;
}
void OAIUpdateIntentResponse::setKendraConfiguration(const OAIUpdateIntentResponse_kendraConfiguration &kendra_configuration) {
    m_kendra_configuration = kendra_configuration;
    m_kendra_configuration_isSet = true;
}

bool OAIUpdateIntentResponse::is_kendra_configuration_Set() const{
    return m_kendra_configuration_isSet;
}

bool OAIUpdateIntentResponse::is_kendra_configuration_Valid() const{
    return m_kendra_configuration_isValid;
}

QString OAIUpdateIntentResponse::getBotId() const {
    return m_bot_id;
}
void OAIUpdateIntentResponse::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAIUpdateIntentResponse::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAIUpdateIntentResponse::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

QString OAIUpdateIntentResponse::getBotVersion() const {
    return m_bot_version;
}
void OAIUpdateIntentResponse::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAIUpdateIntentResponse::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAIUpdateIntentResponse::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QString OAIUpdateIntentResponse::getLocaleId() const {
    return m_locale_id;
}
void OAIUpdateIntentResponse::setLocaleId(const QString &locale_id) {
    m_locale_id = locale_id;
    m_locale_id_isSet = true;
}

bool OAIUpdateIntentResponse::is_locale_id_Set() const{
    return m_locale_id_isSet;
}

bool OAIUpdateIntentResponse::is_locale_id_Valid() const{
    return m_locale_id_isValid;
}

QDateTime OAIUpdateIntentResponse::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIUpdateIntentResponse::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIUpdateIntentResponse::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIUpdateIntentResponse::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

QDateTime OAIUpdateIntentResponse::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIUpdateIntentResponse::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIUpdateIntentResponse::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIUpdateIntentResponse::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

OAIUpdateIntentResponse_initialResponseSetting OAIUpdateIntentResponse::getInitialResponseSetting() const {
    return m_initial_response_setting;
}
void OAIUpdateIntentResponse::setInitialResponseSetting(const OAIUpdateIntentResponse_initialResponseSetting &initial_response_setting) {
    m_initial_response_setting = initial_response_setting;
    m_initial_response_setting_isSet = true;
}

bool OAIUpdateIntentResponse::is_initial_response_setting_Set() const{
    return m_initial_response_setting_isSet;
}

bool OAIUpdateIntentResponse::is_initial_response_setting_Valid() const{
    return m_initial_response_setting_isValid;
}

bool OAIUpdateIntentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_intent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_intent_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_utterances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialog_code_hook.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_code_hook.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_priorities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_confirmation_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_closing_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_contexts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_contexts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kendra_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_response_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateIntentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
