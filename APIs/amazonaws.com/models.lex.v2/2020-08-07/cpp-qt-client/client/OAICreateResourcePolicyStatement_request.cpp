/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateResourcePolicyStatement_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateResourcePolicyStatement_request::OAICreateResourcePolicyStatement_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateResourcePolicyStatement_request::OAICreateResourcePolicyStatement_request() {
    this->initializeModel();
}

OAICreateResourcePolicyStatement_request::~OAICreateResourcePolicyStatement_request() {}

void OAICreateResourcePolicyStatement_request::initializeModel() {

    m_statement_id_isSet = false;
    m_statement_id_isValid = false;

    m_effect_isSet = false;
    m_effect_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;
}

void OAICreateResourcePolicyStatement_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateResourcePolicyStatement_request::fromJsonObject(QJsonObject json) {

    m_statement_id_isValid = ::OpenAPI::fromJsonValue(m_statement_id, json[QString("statementId")]);
    m_statement_id_isSet = !json[QString("statementId")].isNull() && m_statement_id_isValid;

    m_effect_isValid = ::OpenAPI::fromJsonValue(m_effect, json[QString("effect")]);
    m_effect_isSet = !json[QString("effect")].isNull() && m_effect_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("principal")]);
    m_principal_isSet = !json[QString("principal")].isNull() && m_principal_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    if(json["condition"].isObject()){
        auto varmap = json["condition"].toObject().toVariantMap();
        m_condition_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_condition_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_condition_isSet &= !jval.isNull() && m_condition_isValid;
                m_condition.insert(m_condition.end(), val, item);
            }
        }
    }
}

QString OAICreateResourcePolicyStatement_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateResourcePolicyStatement_request::asJsonObject() const {
    QJsonObject obj;
    if (m_statement_id_isSet) {
        obj.insert(QString("statementId"), ::OpenAPI::toJsonValue(m_statement_id));
    }
    if (m_effect_isSet) {
        obj.insert(QString("effect"), ::OpenAPI::toJsonValue(m_effect));
    }
    if (m_principal.size() > 0) {
        obj.insert(QString("principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_action.size() > 0) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_condition.size() > 0) {
        
        obj.insert(QString("condition"), toJsonValue(m_condition));
    }
    return obj;
}

QString OAICreateResourcePolicyStatement_request::getStatementId() const {
    return m_statement_id;
}
void OAICreateResourcePolicyStatement_request::setStatementId(const QString &statement_id) {
    m_statement_id = statement_id;
    m_statement_id_isSet = true;
}

bool OAICreateResourcePolicyStatement_request::is_statement_id_Set() const{
    return m_statement_id_isSet;
}

bool OAICreateResourcePolicyStatement_request::is_statement_id_Valid() const{
    return m_statement_id_isValid;
}

QString OAICreateResourcePolicyStatement_request::getEffect() const {
    return m_effect;
}
void OAICreateResourcePolicyStatement_request::setEffect(const QString &effect) {
    m_effect = effect;
    m_effect_isSet = true;
}

bool OAICreateResourcePolicyStatement_request::is_effect_Set() const{
    return m_effect_isSet;
}

bool OAICreateResourcePolicyStatement_request::is_effect_Valid() const{
    return m_effect_isValid;
}

QList<OAIPrincipal> OAICreateResourcePolicyStatement_request::getPrincipal() const {
    return m_principal;
}
void OAICreateResourcePolicyStatement_request::setPrincipal(const QList<OAIPrincipal> &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAICreateResourcePolicyStatement_request::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAICreateResourcePolicyStatement_request::is_principal_Valid() const{
    return m_principal_isValid;
}

QList<QString> OAICreateResourcePolicyStatement_request::getAction() const {
    return m_action;
}
void OAICreateResourcePolicyStatement_request::setAction(const QList<QString> &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICreateResourcePolicyStatement_request::is_action_Set() const{
    return m_action_isSet;
}

bool OAICreateResourcePolicyStatement_request::is_action_Valid() const{
    return m_action_isValid;
}

QMap<QString, QMap> OAICreateResourcePolicyStatement_request::getCondition() const {
    return m_condition;
}
void OAICreateResourcePolicyStatement_request::setCondition(const QMap<QString, QMap> &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAICreateResourcePolicyStatement_request::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAICreateResourcePolicyStatement_request::is_condition_Valid() const{
    return m_condition_isValid;
}

bool OAICreateResourcePolicyStatement_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_statement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateResourcePolicyStatement_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_statement_id_isValid && m_effect_isValid && m_principal_isValid && m_action_isValid && true;
}

} // namespace OpenAPI
