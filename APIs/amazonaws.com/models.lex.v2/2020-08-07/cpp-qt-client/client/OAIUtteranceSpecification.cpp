/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUtteranceSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUtteranceSpecification::OAIUtteranceSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUtteranceSpecification::OAIUtteranceSpecification() {
    this->initializeModel();
}

OAIUtteranceSpecification::~OAIUtteranceSpecification() {}

void OAIUtteranceSpecification::initializeModel() {

    m_bot_alias_id_isSet = false;
    m_bot_alias_id_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_locale_id_isSet = false;
    m_locale_id_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_conversation_start_time_isSet = false;
    m_conversation_start_time_isValid = false;

    m_conversation_end_time_isSet = false;
    m_conversation_end_time_isValid = false;

    m_utterance_isSet = false;
    m_utterance_isValid = false;

    m_utterance_timestamp_isSet = false;
    m_utterance_timestamp_isValid = false;

    m_audio_voice_duration_millis_isSet = false;
    m_audio_voice_duration_millis_isValid = false;

    m_utterance_understood_isSet = false;
    m_utterance_understood_isValid = false;

    m_input_type_isSet = false;
    m_input_type_isValid = false;

    m_output_type_isSet = false;
    m_output_type_isValid = false;

    m_associated_intent_name_isSet = false;
    m_associated_intent_name_isValid = false;

    m_associated_slot_name_isSet = false;
    m_associated_slot_name_isValid = false;

    m_intent_state_isSet = false;
    m_intent_state_isValid = false;

    m_dialog_action_type_isSet = false;
    m_dialog_action_type_isValid = false;

    m_bot_response_audio_voice_id_isSet = false;
    m_bot_response_audio_voice_id_isValid = false;

    m_slots_filled_in_session_isSet = false;
    m_slots_filled_in_session_isValid = false;

    m_utterance_request_id_isSet = false;
    m_utterance_request_id_isValid = false;

    m_bot_responses_isSet = false;
    m_bot_responses_isValid = false;
}

void OAIUtteranceSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUtteranceSpecification::fromJsonObject(QJsonObject json) {

    m_bot_alias_id_isValid = ::OpenAPI::fromJsonValue(m_bot_alias_id, json[QString("botAliasId")]);
    m_bot_alias_id_isSet = !json[QString("botAliasId")].isNull() && m_bot_alias_id_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_locale_id_isValid = ::OpenAPI::fromJsonValue(m_locale_id, json[QString("localeId")]);
    m_locale_id_isSet = !json[QString("localeId")].isNull() && m_locale_id_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_conversation_start_time_isValid = ::OpenAPI::fromJsonValue(m_conversation_start_time, json[QString("conversationStartTime")]);
    m_conversation_start_time_isSet = !json[QString("conversationStartTime")].isNull() && m_conversation_start_time_isValid;

    m_conversation_end_time_isValid = ::OpenAPI::fromJsonValue(m_conversation_end_time, json[QString("conversationEndTime")]);
    m_conversation_end_time_isSet = !json[QString("conversationEndTime")].isNull() && m_conversation_end_time_isValid;

    m_utterance_isValid = ::OpenAPI::fromJsonValue(m_utterance, json[QString("utterance")]);
    m_utterance_isSet = !json[QString("utterance")].isNull() && m_utterance_isValid;

    m_utterance_timestamp_isValid = ::OpenAPI::fromJsonValue(m_utterance_timestamp, json[QString("utteranceTimestamp")]);
    m_utterance_timestamp_isSet = !json[QString("utteranceTimestamp")].isNull() && m_utterance_timestamp_isValid;

    m_audio_voice_duration_millis_isValid = ::OpenAPI::fromJsonValue(m_audio_voice_duration_millis, json[QString("audioVoiceDurationMillis")]);
    m_audio_voice_duration_millis_isSet = !json[QString("audioVoiceDurationMillis")].isNull() && m_audio_voice_duration_millis_isValid;

    m_utterance_understood_isValid = ::OpenAPI::fromJsonValue(m_utterance_understood, json[QString("utteranceUnderstood")]);
    m_utterance_understood_isSet = !json[QString("utteranceUnderstood")].isNull() && m_utterance_understood_isValid;

    m_input_type_isValid = ::OpenAPI::fromJsonValue(m_input_type, json[QString("inputType")]);
    m_input_type_isSet = !json[QString("inputType")].isNull() && m_input_type_isValid;

    m_output_type_isValid = ::OpenAPI::fromJsonValue(m_output_type, json[QString("outputType")]);
    m_output_type_isSet = !json[QString("outputType")].isNull() && m_output_type_isValid;

    m_associated_intent_name_isValid = ::OpenAPI::fromJsonValue(m_associated_intent_name, json[QString("associatedIntentName")]);
    m_associated_intent_name_isSet = !json[QString("associatedIntentName")].isNull() && m_associated_intent_name_isValid;

    m_associated_slot_name_isValid = ::OpenAPI::fromJsonValue(m_associated_slot_name, json[QString("associatedSlotName")]);
    m_associated_slot_name_isSet = !json[QString("associatedSlotName")].isNull() && m_associated_slot_name_isValid;

    m_intent_state_isValid = ::OpenAPI::fromJsonValue(m_intent_state, json[QString("intentState")]);
    m_intent_state_isSet = !json[QString("intentState")].isNull() && m_intent_state_isValid;

    m_dialog_action_type_isValid = ::OpenAPI::fromJsonValue(m_dialog_action_type, json[QString("dialogActionType")]);
    m_dialog_action_type_isSet = !json[QString("dialogActionType")].isNull() && m_dialog_action_type_isValid;

    m_bot_response_audio_voice_id_isValid = ::OpenAPI::fromJsonValue(m_bot_response_audio_voice_id, json[QString("botResponseAudioVoiceId")]);
    m_bot_response_audio_voice_id_isSet = !json[QString("botResponseAudioVoiceId")].isNull() && m_bot_response_audio_voice_id_isValid;

    m_slots_filled_in_session_isValid = ::OpenAPI::fromJsonValue(m_slots_filled_in_session, json[QString("slotsFilledInSession")]);
    m_slots_filled_in_session_isSet = !json[QString("slotsFilledInSession")].isNull() && m_slots_filled_in_session_isValid;

    m_utterance_request_id_isValid = ::OpenAPI::fromJsonValue(m_utterance_request_id, json[QString("utteranceRequestId")]);
    m_utterance_request_id_isSet = !json[QString("utteranceRequestId")].isNull() && m_utterance_request_id_isValid;

    m_bot_responses_isValid = ::OpenAPI::fromJsonValue(m_bot_responses, json[QString("botResponses")]);
    m_bot_responses_isSet = !json[QString("botResponses")].isNull() && m_bot_responses_isValid;
}

QString OAIUtteranceSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUtteranceSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_alias_id_isSet) {
        obj.insert(QString("botAliasId"), ::OpenAPI::toJsonValue(m_bot_alias_id));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_locale_id_isSet) {
        obj.insert(QString("localeId"), ::OpenAPI::toJsonValue(m_locale_id));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_conversation_start_time_isSet) {
        obj.insert(QString("conversationStartTime"), ::OpenAPI::toJsonValue(m_conversation_start_time));
    }
    if (m_conversation_end_time_isSet) {
        obj.insert(QString("conversationEndTime"), ::OpenAPI::toJsonValue(m_conversation_end_time));
    }
    if (m_utterance_isSet) {
        obj.insert(QString("utterance"), ::OpenAPI::toJsonValue(m_utterance));
    }
    if (m_utterance_timestamp_isSet) {
        obj.insert(QString("utteranceTimestamp"), ::OpenAPI::toJsonValue(m_utterance_timestamp));
    }
    if (m_audio_voice_duration_millis_isSet) {
        obj.insert(QString("audioVoiceDurationMillis"), ::OpenAPI::toJsonValue(m_audio_voice_duration_millis));
    }
    if (m_utterance_understood_isSet) {
        obj.insert(QString("utteranceUnderstood"), ::OpenAPI::toJsonValue(m_utterance_understood));
    }
    if (m_input_type_isSet) {
        obj.insert(QString("inputType"), ::OpenAPI::toJsonValue(m_input_type));
    }
    if (m_output_type_isSet) {
        obj.insert(QString("outputType"), ::OpenAPI::toJsonValue(m_output_type));
    }
    if (m_associated_intent_name_isSet) {
        obj.insert(QString("associatedIntentName"), ::OpenAPI::toJsonValue(m_associated_intent_name));
    }
    if (m_associated_slot_name_isSet) {
        obj.insert(QString("associatedSlotName"), ::OpenAPI::toJsonValue(m_associated_slot_name));
    }
    if (m_intent_state.isSet()) {
        obj.insert(QString("intentState"), ::OpenAPI::toJsonValue(m_intent_state));
    }
    if (m_dialog_action_type_isSet) {
        obj.insert(QString("dialogActionType"), ::OpenAPI::toJsonValue(m_dialog_action_type));
    }
    if (m_bot_response_audio_voice_id_isSet) {
        obj.insert(QString("botResponseAudioVoiceId"), ::OpenAPI::toJsonValue(m_bot_response_audio_voice_id));
    }
    if (m_slots_filled_in_session_isSet) {
        obj.insert(QString("slotsFilledInSession"), ::OpenAPI::toJsonValue(m_slots_filled_in_session));
    }
    if (m_utterance_request_id_isSet) {
        obj.insert(QString("utteranceRequestId"), ::OpenAPI::toJsonValue(m_utterance_request_id));
    }
    if (m_bot_responses.isSet()) {
        obj.insert(QString("botResponses"), ::OpenAPI::toJsonValue(m_bot_responses));
    }
    return obj;
}

QString OAIUtteranceSpecification::getBotAliasId() const {
    return m_bot_alias_id;
}
void OAIUtteranceSpecification::setBotAliasId(const QString &bot_alias_id) {
    m_bot_alias_id = bot_alias_id;
    m_bot_alias_id_isSet = true;
}

bool OAIUtteranceSpecification::is_bot_alias_id_Set() const{
    return m_bot_alias_id_isSet;
}

bool OAIUtteranceSpecification::is_bot_alias_id_Valid() const{
    return m_bot_alias_id_isValid;
}

QString OAIUtteranceSpecification::getBotVersion() const {
    return m_bot_version;
}
void OAIUtteranceSpecification::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAIUtteranceSpecification::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAIUtteranceSpecification::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QString OAIUtteranceSpecification::getLocaleId() const {
    return m_locale_id;
}
void OAIUtteranceSpecification::setLocaleId(const QString &locale_id) {
    m_locale_id = locale_id;
    m_locale_id_isSet = true;
}

bool OAIUtteranceSpecification::is_locale_id_Set() const{
    return m_locale_id_isSet;
}

bool OAIUtteranceSpecification::is_locale_id_Valid() const{
    return m_locale_id_isValid;
}

QString OAIUtteranceSpecification::getSessionId() const {
    return m_session_id;
}
void OAIUtteranceSpecification::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIUtteranceSpecification::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIUtteranceSpecification::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIUtteranceSpecification::getChannel() const {
    return m_channel;
}
void OAIUtteranceSpecification::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIUtteranceSpecification::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIUtteranceSpecification::is_channel_Valid() const{
    return m_channel_isValid;
}

OAIAnalyticsModality OAIUtteranceSpecification::getMode() const {
    return m_mode;
}
void OAIUtteranceSpecification::setMode(const OAIAnalyticsModality &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIUtteranceSpecification::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIUtteranceSpecification::is_mode_Valid() const{
    return m_mode_isValid;
}

QDateTime OAIUtteranceSpecification::getConversationStartTime() const {
    return m_conversation_start_time;
}
void OAIUtteranceSpecification::setConversationStartTime(const QDateTime &conversation_start_time) {
    m_conversation_start_time = conversation_start_time;
    m_conversation_start_time_isSet = true;
}

bool OAIUtteranceSpecification::is_conversation_start_time_Set() const{
    return m_conversation_start_time_isSet;
}

bool OAIUtteranceSpecification::is_conversation_start_time_Valid() const{
    return m_conversation_start_time_isValid;
}

QDateTime OAIUtteranceSpecification::getConversationEndTime() const {
    return m_conversation_end_time;
}
void OAIUtteranceSpecification::setConversationEndTime(const QDateTime &conversation_end_time) {
    m_conversation_end_time = conversation_end_time;
    m_conversation_end_time_isSet = true;
}

bool OAIUtteranceSpecification::is_conversation_end_time_Set() const{
    return m_conversation_end_time_isSet;
}

bool OAIUtteranceSpecification::is_conversation_end_time_Valid() const{
    return m_conversation_end_time_isValid;
}

QString OAIUtteranceSpecification::getUtterance() const {
    return m_utterance;
}
void OAIUtteranceSpecification::setUtterance(const QString &utterance) {
    m_utterance = utterance;
    m_utterance_isSet = true;
}

bool OAIUtteranceSpecification::is_utterance_Set() const{
    return m_utterance_isSet;
}

bool OAIUtteranceSpecification::is_utterance_Valid() const{
    return m_utterance_isValid;
}

QDateTime OAIUtteranceSpecification::getUtteranceTimestamp() const {
    return m_utterance_timestamp;
}
void OAIUtteranceSpecification::setUtteranceTimestamp(const QDateTime &utterance_timestamp) {
    m_utterance_timestamp = utterance_timestamp;
    m_utterance_timestamp_isSet = true;
}

bool OAIUtteranceSpecification::is_utterance_timestamp_Set() const{
    return m_utterance_timestamp_isSet;
}

bool OAIUtteranceSpecification::is_utterance_timestamp_Valid() const{
    return m_utterance_timestamp_isValid;
}

qint32 OAIUtteranceSpecification::getAudioVoiceDurationMillis() const {
    return m_audio_voice_duration_millis;
}
void OAIUtteranceSpecification::setAudioVoiceDurationMillis(const qint32 &audio_voice_duration_millis) {
    m_audio_voice_duration_millis = audio_voice_duration_millis;
    m_audio_voice_duration_millis_isSet = true;
}

bool OAIUtteranceSpecification::is_audio_voice_duration_millis_Set() const{
    return m_audio_voice_duration_millis_isSet;
}

bool OAIUtteranceSpecification::is_audio_voice_duration_millis_Valid() const{
    return m_audio_voice_duration_millis_isValid;
}

bool OAIUtteranceSpecification::getUtteranceUnderstood() const {
    return m_utterance_understood;
}
void OAIUtteranceSpecification::setUtteranceUnderstood(const bool &utterance_understood) {
    m_utterance_understood = utterance_understood;
    m_utterance_understood_isSet = true;
}

bool OAIUtteranceSpecification::is_utterance_understood_Set() const{
    return m_utterance_understood_isSet;
}

bool OAIUtteranceSpecification::is_utterance_understood_Valid() const{
    return m_utterance_understood_isValid;
}

QString OAIUtteranceSpecification::getInputType() const {
    return m_input_type;
}
void OAIUtteranceSpecification::setInputType(const QString &input_type) {
    m_input_type = input_type;
    m_input_type_isSet = true;
}

bool OAIUtteranceSpecification::is_input_type_Set() const{
    return m_input_type_isSet;
}

bool OAIUtteranceSpecification::is_input_type_Valid() const{
    return m_input_type_isValid;
}

QString OAIUtteranceSpecification::getOutputType() const {
    return m_output_type;
}
void OAIUtteranceSpecification::setOutputType(const QString &output_type) {
    m_output_type = output_type;
    m_output_type_isSet = true;
}

bool OAIUtteranceSpecification::is_output_type_Set() const{
    return m_output_type_isSet;
}

bool OAIUtteranceSpecification::is_output_type_Valid() const{
    return m_output_type_isValid;
}

QString OAIUtteranceSpecification::getAssociatedIntentName() const {
    return m_associated_intent_name;
}
void OAIUtteranceSpecification::setAssociatedIntentName(const QString &associated_intent_name) {
    m_associated_intent_name = associated_intent_name;
    m_associated_intent_name_isSet = true;
}

bool OAIUtteranceSpecification::is_associated_intent_name_Set() const{
    return m_associated_intent_name_isSet;
}

bool OAIUtteranceSpecification::is_associated_intent_name_Valid() const{
    return m_associated_intent_name_isValid;
}

QString OAIUtteranceSpecification::getAssociatedSlotName() const {
    return m_associated_slot_name;
}
void OAIUtteranceSpecification::setAssociatedSlotName(const QString &associated_slot_name) {
    m_associated_slot_name = associated_slot_name;
    m_associated_slot_name_isSet = true;
}

bool OAIUtteranceSpecification::is_associated_slot_name_Set() const{
    return m_associated_slot_name_isSet;
}

bool OAIUtteranceSpecification::is_associated_slot_name_Valid() const{
    return m_associated_slot_name_isValid;
}

OAIIntentState OAIUtteranceSpecification::getIntentState() const {
    return m_intent_state;
}
void OAIUtteranceSpecification::setIntentState(const OAIIntentState &intent_state) {
    m_intent_state = intent_state;
    m_intent_state_isSet = true;
}

bool OAIUtteranceSpecification::is_intent_state_Set() const{
    return m_intent_state_isSet;
}

bool OAIUtteranceSpecification::is_intent_state_Valid() const{
    return m_intent_state_isValid;
}

QString OAIUtteranceSpecification::getDialogActionType() const {
    return m_dialog_action_type;
}
void OAIUtteranceSpecification::setDialogActionType(const QString &dialog_action_type) {
    m_dialog_action_type = dialog_action_type;
    m_dialog_action_type_isSet = true;
}

bool OAIUtteranceSpecification::is_dialog_action_type_Set() const{
    return m_dialog_action_type_isSet;
}

bool OAIUtteranceSpecification::is_dialog_action_type_Valid() const{
    return m_dialog_action_type_isValid;
}

QString OAIUtteranceSpecification::getBotResponseAudioVoiceId() const {
    return m_bot_response_audio_voice_id;
}
void OAIUtteranceSpecification::setBotResponseAudioVoiceId(const QString &bot_response_audio_voice_id) {
    m_bot_response_audio_voice_id = bot_response_audio_voice_id;
    m_bot_response_audio_voice_id_isSet = true;
}

bool OAIUtteranceSpecification::is_bot_response_audio_voice_id_Set() const{
    return m_bot_response_audio_voice_id_isSet;
}

bool OAIUtteranceSpecification::is_bot_response_audio_voice_id_Valid() const{
    return m_bot_response_audio_voice_id_isValid;
}

QString OAIUtteranceSpecification::getSlotsFilledInSession() const {
    return m_slots_filled_in_session;
}
void OAIUtteranceSpecification::setSlotsFilledInSession(const QString &slots_filled_in_session) {
    m_slots_filled_in_session = slots_filled_in_session;
    m_slots_filled_in_session_isSet = true;
}

bool OAIUtteranceSpecification::is_slots_filled_in_session_Set() const{
    return m_slots_filled_in_session_isSet;
}

bool OAIUtteranceSpecification::is_slots_filled_in_session_Valid() const{
    return m_slots_filled_in_session_isValid;
}

QString OAIUtteranceSpecification::getUtteranceRequestId() const {
    return m_utterance_request_id;
}
void OAIUtteranceSpecification::setUtteranceRequestId(const QString &utterance_request_id) {
    m_utterance_request_id = utterance_request_id;
    m_utterance_request_id_isSet = true;
}

bool OAIUtteranceSpecification::is_utterance_request_id_Set() const{
    return m_utterance_request_id_isSet;
}

bool OAIUtteranceSpecification::is_utterance_request_id_Valid() const{
    return m_utterance_request_id_isValid;
}

QList OAIUtteranceSpecification::getBotResponses() const {
    return m_bot_responses;
}
void OAIUtteranceSpecification::setBotResponses(const QList &bot_responses) {
    m_bot_responses = bot_responses;
    m_bot_responses_isSet = true;
}

bool OAIUtteranceSpecification::is_bot_responses_Set() const{
    return m_bot_responses_isSet;
}

bool OAIUtteranceSpecification::is_bot_responses_Valid() const{
    return m_bot_responses_isValid;
}

bool OAIUtteranceSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_alias_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utterance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utterance_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_voice_duration_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utterance_understood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_intent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_slot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialog_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_response_audio_voice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slots_filled_in_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utterance_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_responses.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUtteranceSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
