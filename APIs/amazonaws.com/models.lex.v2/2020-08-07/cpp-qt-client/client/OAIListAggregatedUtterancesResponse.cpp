/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAggregatedUtterancesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAggregatedUtterancesResponse::OAIListAggregatedUtterancesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAggregatedUtterancesResponse::OAIListAggregatedUtterancesResponse() {
    this->initializeModel();
}

OAIListAggregatedUtterancesResponse::~OAIListAggregatedUtterancesResponse() {}

void OAIListAggregatedUtterancesResponse::initializeModel() {

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_bot_alias_id_isSet = false;
    m_bot_alias_id_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_locale_id_isSet = false;
    m_locale_id_isValid = false;

    m_aggregation_duration_isSet = false;
    m_aggregation_duration_isValid = false;

    m_aggregation_window_start_time_isSet = false;
    m_aggregation_window_start_time_isValid = false;

    m_aggregation_window_end_time_isSet = false;
    m_aggregation_window_end_time_isValid = false;

    m_aggregation_last_refreshed_date_time_isSet = false;
    m_aggregation_last_refreshed_date_time_isValid = false;

    m_aggregated_utterances_summaries_isSet = false;
    m_aggregated_utterances_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAggregatedUtterancesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAggregatedUtterancesResponse::fromJsonObject(QJsonObject json) {

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("botId")]);
    m_bot_id_isSet = !json[QString("botId")].isNull() && m_bot_id_isValid;

    m_bot_alias_id_isValid = ::OpenAPI::fromJsonValue(m_bot_alias_id, json[QString("botAliasId")]);
    m_bot_alias_id_isSet = !json[QString("botAliasId")].isNull() && m_bot_alias_id_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_locale_id_isValid = ::OpenAPI::fromJsonValue(m_locale_id, json[QString("localeId")]);
    m_locale_id_isSet = !json[QString("localeId")].isNull() && m_locale_id_isValid;

    m_aggregation_duration_isValid = ::OpenAPI::fromJsonValue(m_aggregation_duration, json[QString("aggregationDuration")]);
    m_aggregation_duration_isSet = !json[QString("aggregationDuration")].isNull() && m_aggregation_duration_isValid;

    m_aggregation_window_start_time_isValid = ::OpenAPI::fromJsonValue(m_aggregation_window_start_time, json[QString("aggregationWindowStartTime")]);
    m_aggregation_window_start_time_isSet = !json[QString("aggregationWindowStartTime")].isNull() && m_aggregation_window_start_time_isValid;

    m_aggregation_window_end_time_isValid = ::OpenAPI::fromJsonValue(m_aggregation_window_end_time, json[QString("aggregationWindowEndTime")]);
    m_aggregation_window_end_time_isSet = !json[QString("aggregationWindowEndTime")].isNull() && m_aggregation_window_end_time_isValid;

    m_aggregation_last_refreshed_date_time_isValid = ::OpenAPI::fromJsonValue(m_aggregation_last_refreshed_date_time, json[QString("aggregationLastRefreshedDateTime")]);
    m_aggregation_last_refreshed_date_time_isSet = !json[QString("aggregationLastRefreshedDateTime")].isNull() && m_aggregation_last_refreshed_date_time_isValid;

    m_aggregated_utterances_summaries_isValid = ::OpenAPI::fromJsonValue(m_aggregated_utterances_summaries, json[QString("aggregatedUtterancesSummaries")]);
    m_aggregated_utterances_summaries_isSet = !json[QString("aggregatedUtterancesSummaries")].isNull() && m_aggregated_utterances_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAggregatedUtterancesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAggregatedUtterancesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_id_isSet) {
        obj.insert(QString("botId"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_bot_alias_id_isSet) {
        obj.insert(QString("botAliasId"), ::OpenAPI::toJsonValue(m_bot_alias_id));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_locale_id_isSet) {
        obj.insert(QString("localeId"), ::OpenAPI::toJsonValue(m_locale_id));
    }
    if (m_aggregation_duration.isSet()) {
        obj.insert(QString("aggregationDuration"), ::OpenAPI::toJsonValue(m_aggregation_duration));
    }
    if (m_aggregation_window_start_time_isSet) {
        obj.insert(QString("aggregationWindowStartTime"), ::OpenAPI::toJsonValue(m_aggregation_window_start_time));
    }
    if (m_aggregation_window_end_time_isSet) {
        obj.insert(QString("aggregationWindowEndTime"), ::OpenAPI::toJsonValue(m_aggregation_window_end_time));
    }
    if (m_aggregation_last_refreshed_date_time_isSet) {
        obj.insert(QString("aggregationLastRefreshedDateTime"), ::OpenAPI::toJsonValue(m_aggregation_last_refreshed_date_time));
    }
    if (m_aggregated_utterances_summaries.isSet()) {
        obj.insert(QString("aggregatedUtterancesSummaries"), ::OpenAPI::toJsonValue(m_aggregated_utterances_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIListAggregatedUtterancesResponse::getBotId() const {
    return m_bot_id;
}
void OAIListAggregatedUtterancesResponse::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAIListAggregatedUtterancesResponse::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAIListAggregatedUtterancesResponse::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

QString OAIListAggregatedUtterancesResponse::getBotAliasId() const {
    return m_bot_alias_id;
}
void OAIListAggregatedUtterancesResponse::setBotAliasId(const QString &bot_alias_id) {
    m_bot_alias_id = bot_alias_id;
    m_bot_alias_id_isSet = true;
}

bool OAIListAggregatedUtterancesResponse::is_bot_alias_id_Set() const{
    return m_bot_alias_id_isSet;
}

bool OAIListAggregatedUtterancesResponse::is_bot_alias_id_Valid() const{
    return m_bot_alias_id_isValid;
}

QString OAIListAggregatedUtterancesResponse::getBotVersion() const {
    return m_bot_version;
}
void OAIListAggregatedUtterancesResponse::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAIListAggregatedUtterancesResponse::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAIListAggregatedUtterancesResponse::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QString OAIListAggregatedUtterancesResponse::getLocaleId() const {
    return m_locale_id;
}
void OAIListAggregatedUtterancesResponse::setLocaleId(const QString &locale_id) {
    m_locale_id = locale_id;
    m_locale_id_isSet = true;
}

bool OAIListAggregatedUtterancesResponse::is_locale_id_Set() const{
    return m_locale_id_isSet;
}

bool OAIListAggregatedUtterancesResponse::is_locale_id_Valid() const{
    return m_locale_id_isValid;
}

OAIListAggregatedUtterancesResponse_aggregationDuration OAIListAggregatedUtterancesResponse::getAggregationDuration() const {
    return m_aggregation_duration;
}
void OAIListAggregatedUtterancesResponse::setAggregationDuration(const OAIListAggregatedUtterancesResponse_aggregationDuration &aggregation_duration) {
    m_aggregation_duration = aggregation_duration;
    m_aggregation_duration_isSet = true;
}

bool OAIListAggregatedUtterancesResponse::is_aggregation_duration_Set() const{
    return m_aggregation_duration_isSet;
}

bool OAIListAggregatedUtterancesResponse::is_aggregation_duration_Valid() const{
    return m_aggregation_duration_isValid;
}

QDateTime OAIListAggregatedUtterancesResponse::getAggregationWindowStartTime() const {
    return m_aggregation_window_start_time;
}
void OAIListAggregatedUtterancesResponse::setAggregationWindowStartTime(const QDateTime &aggregation_window_start_time) {
    m_aggregation_window_start_time = aggregation_window_start_time;
    m_aggregation_window_start_time_isSet = true;
}

bool OAIListAggregatedUtterancesResponse::is_aggregation_window_start_time_Set() const{
    return m_aggregation_window_start_time_isSet;
}

bool OAIListAggregatedUtterancesResponse::is_aggregation_window_start_time_Valid() const{
    return m_aggregation_window_start_time_isValid;
}

QDateTime OAIListAggregatedUtterancesResponse::getAggregationWindowEndTime() const {
    return m_aggregation_window_end_time;
}
void OAIListAggregatedUtterancesResponse::setAggregationWindowEndTime(const QDateTime &aggregation_window_end_time) {
    m_aggregation_window_end_time = aggregation_window_end_time;
    m_aggregation_window_end_time_isSet = true;
}

bool OAIListAggregatedUtterancesResponse::is_aggregation_window_end_time_Set() const{
    return m_aggregation_window_end_time_isSet;
}

bool OAIListAggregatedUtterancesResponse::is_aggregation_window_end_time_Valid() const{
    return m_aggregation_window_end_time_isValid;
}

QDateTime OAIListAggregatedUtterancesResponse::getAggregationLastRefreshedDateTime() const {
    return m_aggregation_last_refreshed_date_time;
}
void OAIListAggregatedUtterancesResponse::setAggregationLastRefreshedDateTime(const QDateTime &aggregation_last_refreshed_date_time) {
    m_aggregation_last_refreshed_date_time = aggregation_last_refreshed_date_time;
    m_aggregation_last_refreshed_date_time_isSet = true;
}

bool OAIListAggregatedUtterancesResponse::is_aggregation_last_refreshed_date_time_Set() const{
    return m_aggregation_last_refreshed_date_time_isSet;
}

bool OAIListAggregatedUtterancesResponse::is_aggregation_last_refreshed_date_time_Valid() const{
    return m_aggregation_last_refreshed_date_time_isValid;
}

QList OAIListAggregatedUtterancesResponse::getAggregatedUtterancesSummaries() const {
    return m_aggregated_utterances_summaries;
}
void OAIListAggregatedUtterancesResponse::setAggregatedUtterancesSummaries(const QList &aggregated_utterances_summaries) {
    m_aggregated_utterances_summaries = aggregated_utterances_summaries;
    m_aggregated_utterances_summaries_isSet = true;
}

bool OAIListAggregatedUtterancesResponse::is_aggregated_utterances_summaries_Set() const{
    return m_aggregated_utterances_summaries_isSet;
}

bool OAIListAggregatedUtterancesResponse::is_aggregated_utterances_summaries_Valid() const{
    return m_aggregated_utterances_summaries_isValid;
}

QString OAIListAggregatedUtterancesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAggregatedUtterancesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAggregatedUtterancesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAggregatedUtterancesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAggregatedUtterancesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_alias_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_window_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_window_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_last_refreshed_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregated_utterances_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAggregatedUtterancesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
