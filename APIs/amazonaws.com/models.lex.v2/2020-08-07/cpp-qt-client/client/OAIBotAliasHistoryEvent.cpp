/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBotAliasHistoryEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBotAliasHistoryEvent::OAIBotAliasHistoryEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBotAliasHistoryEvent::OAIBotAliasHistoryEvent() {
    this->initializeModel();
}

OAIBotAliasHistoryEvent::~OAIBotAliasHistoryEvent() {}

void OAIBotAliasHistoryEvent::initializeModel() {

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;
}

void OAIBotAliasHistoryEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBotAliasHistoryEvent::fromJsonObject(QJsonObject json) {

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;
}

QString OAIBotAliasHistoryEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBotAliasHistoryEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    return obj;
}

QString OAIBotAliasHistoryEvent::getBotVersion() const {
    return m_bot_version;
}
void OAIBotAliasHistoryEvent::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAIBotAliasHistoryEvent::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAIBotAliasHistoryEvent::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QDateTime OAIBotAliasHistoryEvent::getStartDate() const {
    return m_start_date;
}
void OAIBotAliasHistoryEvent::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIBotAliasHistoryEvent::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIBotAliasHistoryEvent::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QDateTime OAIBotAliasHistoryEvent::getEndDate() const {
    return m_end_date;
}
void OAIBotAliasHistoryEvent::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIBotAliasHistoryEvent::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIBotAliasHistoryEvent::is_end_date_Valid() const{
    return m_end_date_isValid;
}

bool OAIBotAliasHistoryEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBotAliasHistoryEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
