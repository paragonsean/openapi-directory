/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalBranch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalBranch::OAIConditionalBranch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalBranch::OAIConditionalBranch() {
    this->initializeModel();
}

OAIConditionalBranch::~OAIConditionalBranch() {}

void OAIConditionalBranch::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_next_step_isSet = false;
    m_next_step_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;
}

void OAIConditionalBranch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalBranch::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_next_step_isValid = ::OpenAPI::fromJsonValue(m_next_step, json[QString("nextStep")]);
    m_next_step_isSet = !json[QString("nextStep")].isNull() && m_next_step_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;
}

QString OAIConditionalBranch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalBranch::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_next_step.isSet()) {
        obj.insert(QString("nextStep"), ::OpenAPI::toJsonValue(m_next_step));
    }
    if (m_response.isSet()) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    return obj;
}

QString OAIConditionalBranch::getName() const {
    return m_name;
}
void OAIConditionalBranch::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConditionalBranch::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConditionalBranch::is_name_Valid() const{
    return m_name_isValid;
}

OAIConditionalBranch_condition OAIConditionalBranch::getCondition() const {
    return m_condition;
}
void OAIConditionalBranch::setCondition(const OAIConditionalBranch_condition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIConditionalBranch::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIConditionalBranch::is_condition_Valid() const{
    return m_condition_isValid;
}

OAICreateIntent_request_initialResponseSetting_nextStep OAIConditionalBranch::getNextStep() const {
    return m_next_step;
}
void OAIConditionalBranch::setNextStep(const OAICreateIntent_request_initialResponseSetting_nextStep &next_step) {
    m_next_step = next_step;
    m_next_step_isSet = true;
}

bool OAIConditionalBranch::is_next_step_Set() const{
    return m_next_step_isSet;
}

bool OAIConditionalBranch::is_next_step_Valid() const{
    return m_next_step_isValid;
}

OAIResponseSpecification OAIConditionalBranch::getResponse() const {
    return m_response;
}
void OAIConditionalBranch::setResponse(const OAIResponseSpecification &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIConditionalBranch::is_response_Set() const{
    return m_response_isSet;
}

bool OAIConditionalBranch::is_response_Valid() const{
    return m_response_isValid;
}

bool OAIConditionalBranch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalBranch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_condition_isValid && m_next_step_isValid && true;
}

} // namespace OpenAPI
