/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversationLevelTestResultItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversationLevelTestResultItem::OAIConversationLevelTestResultItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversationLevelTestResultItem::OAIConversationLevelTestResultItem() {
    this->initializeModel();
}

OAIConversationLevelTestResultItem::~OAIConversationLevelTestResultItem() {}

void OAIConversationLevelTestResultItem::initializeModel() {

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_end_to_end_result_isSet = false;
    m_end_to_end_result_isValid = false;

    m_speech_transcription_result_isSet = false;
    m_speech_transcription_result_isValid = false;

    m_intent_classification_results_isSet = false;
    m_intent_classification_results_isValid = false;

    m_slot_resolution_results_isSet = false;
    m_slot_resolution_results_isValid = false;
}

void OAIConversationLevelTestResultItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversationLevelTestResultItem::fromJsonObject(QJsonObject json) {

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversationId")]);
    m_conversation_id_isSet = !json[QString("conversationId")].isNull() && m_conversation_id_isValid;

    m_end_to_end_result_isValid = ::OpenAPI::fromJsonValue(m_end_to_end_result, json[QString("endToEndResult")]);
    m_end_to_end_result_isSet = !json[QString("endToEndResult")].isNull() && m_end_to_end_result_isValid;

    m_speech_transcription_result_isValid = ::OpenAPI::fromJsonValue(m_speech_transcription_result, json[QString("speechTranscriptionResult")]);
    m_speech_transcription_result_isSet = !json[QString("speechTranscriptionResult")].isNull() && m_speech_transcription_result_isValid;

    m_intent_classification_results_isValid = ::OpenAPI::fromJsonValue(m_intent_classification_results, json[QString("intentClassificationResults")]);
    m_intent_classification_results_isSet = !json[QString("intentClassificationResults")].isNull() && m_intent_classification_results_isValid;

    m_slot_resolution_results_isValid = ::OpenAPI::fromJsonValue(m_slot_resolution_results, json[QString("slotResolutionResults")]);
    m_slot_resolution_results_isSet = !json[QString("slotResolutionResults")].isNull() && m_slot_resolution_results_isValid;
}

QString OAIConversationLevelTestResultItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversationLevelTestResultItem::asJsonObject() const {
    QJsonObject obj;
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversationId"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_end_to_end_result.isSet()) {
        obj.insert(QString("endToEndResult"), ::OpenAPI::toJsonValue(m_end_to_end_result));
    }
    if (m_speech_transcription_result.isSet()) {
        obj.insert(QString("speechTranscriptionResult"), ::OpenAPI::toJsonValue(m_speech_transcription_result));
    }
    if (m_intent_classification_results.isSet()) {
        obj.insert(QString("intentClassificationResults"), ::OpenAPI::toJsonValue(m_intent_classification_results));
    }
    if (m_slot_resolution_results.isSet()) {
        obj.insert(QString("slotResolutionResults"), ::OpenAPI::toJsonValue(m_slot_resolution_results));
    }
    return obj;
}

QString OAIConversationLevelTestResultItem::getConversationId() const {
    return m_conversation_id;
}
void OAIConversationLevelTestResultItem::setConversationId(const QString &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAIConversationLevelTestResultItem::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAIConversationLevelTestResultItem::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

OAITestResultMatchStatus OAIConversationLevelTestResultItem::getEndToEndResult() const {
    return m_end_to_end_result;
}
void OAIConversationLevelTestResultItem::setEndToEndResult(const OAITestResultMatchStatus &end_to_end_result) {
    m_end_to_end_result = end_to_end_result;
    m_end_to_end_result_isSet = true;
}

bool OAIConversationLevelTestResultItem::is_end_to_end_result_Set() const{
    return m_end_to_end_result_isSet;
}

bool OAIConversationLevelTestResultItem::is_end_to_end_result_Valid() const{
    return m_end_to_end_result_isValid;
}

OAITestResultMatchStatus OAIConversationLevelTestResultItem::getSpeechTranscriptionResult() const {
    return m_speech_transcription_result;
}
void OAIConversationLevelTestResultItem::setSpeechTranscriptionResult(const OAITestResultMatchStatus &speech_transcription_result) {
    m_speech_transcription_result = speech_transcription_result;
    m_speech_transcription_result_isSet = true;
}

bool OAIConversationLevelTestResultItem::is_speech_transcription_result_Set() const{
    return m_speech_transcription_result_isSet;
}

bool OAIConversationLevelTestResultItem::is_speech_transcription_result_Valid() const{
    return m_speech_transcription_result_isValid;
}

QList OAIConversationLevelTestResultItem::getIntentClassificationResults() const {
    return m_intent_classification_results;
}
void OAIConversationLevelTestResultItem::setIntentClassificationResults(const QList &intent_classification_results) {
    m_intent_classification_results = intent_classification_results;
    m_intent_classification_results_isSet = true;
}

bool OAIConversationLevelTestResultItem::is_intent_classification_results_Set() const{
    return m_intent_classification_results_isSet;
}

bool OAIConversationLevelTestResultItem::is_intent_classification_results_Valid() const{
    return m_intent_classification_results_isValid;
}

QList OAIConversationLevelTestResultItem::getSlotResolutionResults() const {
    return m_slot_resolution_results;
}
void OAIConversationLevelTestResultItem::setSlotResolutionResults(const QList &slot_resolution_results) {
    m_slot_resolution_results = slot_resolution_results;
    m_slot_resolution_results_isSet = true;
}

bool OAIConversationLevelTestResultItem::is_slot_resolution_results_Set() const{
    return m_slot_resolution_results_isSet;
}

bool OAIConversationLevelTestResultItem::is_slot_resolution_results_Valid() const{
    return m_slot_resolution_results_isValid;
}

bool OAIConversationLevelTestResultItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_to_end_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_transcription_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_classification_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_resolution_results.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversationLevelTestResultItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_conversation_id_isValid && m_end_to_end_result_isValid && m_intent_classification_results_isValid && m_slot_resolution_results_isValid && true;
}

} // namespace OpenAPI
