/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeBotRecommendationResponse_botRecommendationResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeBotRecommendationResponse_botRecommendationResults::OAIDescribeBotRecommendationResponse_botRecommendationResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeBotRecommendationResponse_botRecommendationResults::OAIDescribeBotRecommendationResponse_botRecommendationResults() {
    this->initializeModel();
}

OAIDescribeBotRecommendationResponse_botRecommendationResults::~OAIDescribeBotRecommendationResponse_botRecommendationResults() {}

void OAIDescribeBotRecommendationResponse_botRecommendationResults::initializeModel() {

    m_bot_locale_export_url_isSet = false;
    m_bot_locale_export_url_isValid = false;

    m_associated_transcripts_url_isSet = false;
    m_associated_transcripts_url_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;
}

void OAIDescribeBotRecommendationResponse_botRecommendationResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeBotRecommendationResponse_botRecommendationResults::fromJsonObject(QJsonObject json) {

    m_bot_locale_export_url_isValid = ::OpenAPI::fromJsonValue(m_bot_locale_export_url, json[QString("botLocaleExportUrl")]);
    m_bot_locale_export_url_isSet = !json[QString("botLocaleExportUrl")].isNull() && m_bot_locale_export_url_isValid;

    m_associated_transcripts_url_isValid = ::OpenAPI::fromJsonValue(m_associated_transcripts_url, json[QString("associatedTranscriptsUrl")]);
    m_associated_transcripts_url_isSet = !json[QString("associatedTranscriptsUrl")].isNull() && m_associated_transcripts_url_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;
}

QString OAIDescribeBotRecommendationResponse_botRecommendationResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeBotRecommendationResponse_botRecommendationResults::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_locale_export_url_isSet) {
        obj.insert(QString("botLocaleExportUrl"), ::OpenAPI::toJsonValue(m_bot_locale_export_url));
    }
    if (m_associated_transcripts_url_isSet) {
        obj.insert(QString("associatedTranscriptsUrl"), ::OpenAPI::toJsonValue(m_associated_transcripts_url));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    return obj;
}

QString OAIDescribeBotRecommendationResponse_botRecommendationResults::getBotLocaleExportUrl() const {
    return m_bot_locale_export_url;
}
void OAIDescribeBotRecommendationResponse_botRecommendationResults::setBotLocaleExportUrl(const QString &bot_locale_export_url) {
    m_bot_locale_export_url = bot_locale_export_url;
    m_bot_locale_export_url_isSet = true;
}

bool OAIDescribeBotRecommendationResponse_botRecommendationResults::is_bot_locale_export_url_Set() const{
    return m_bot_locale_export_url_isSet;
}

bool OAIDescribeBotRecommendationResponse_botRecommendationResults::is_bot_locale_export_url_Valid() const{
    return m_bot_locale_export_url_isValid;
}

QString OAIDescribeBotRecommendationResponse_botRecommendationResults::getAssociatedTranscriptsUrl() const {
    return m_associated_transcripts_url;
}
void OAIDescribeBotRecommendationResponse_botRecommendationResults::setAssociatedTranscriptsUrl(const QString &associated_transcripts_url) {
    m_associated_transcripts_url = associated_transcripts_url;
    m_associated_transcripts_url_isSet = true;
}

bool OAIDescribeBotRecommendationResponse_botRecommendationResults::is_associated_transcripts_url_Set() const{
    return m_associated_transcripts_url_isSet;
}

bool OAIDescribeBotRecommendationResponse_botRecommendationResults::is_associated_transcripts_url_Valid() const{
    return m_associated_transcripts_url_isValid;
}

OAIBotRecommendationResults_statistics OAIDescribeBotRecommendationResponse_botRecommendationResults::getStatistics() const {
    return m_statistics;
}
void OAIDescribeBotRecommendationResponse_botRecommendationResults::setStatistics(const OAIBotRecommendationResults_statistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIDescribeBotRecommendationResponse_botRecommendationResults::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIDescribeBotRecommendationResponse_botRecommendationResults::is_statistics_Valid() const{
    return m_statistics_isValid;
}

bool OAIDescribeBotRecommendationResponse_botRecommendationResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_locale_export_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_transcripts_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeBotRecommendationResponse_botRecommendationResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
