/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSlotResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSlotResponse::OAICreateSlotResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSlotResponse::OAICreateSlotResponse() {
    this->initializeModel();
}

OAICreateSlotResponse::~OAICreateSlotResponse() {}

void OAICreateSlotResponse::initializeModel() {

    m_slot_id_isSet = false;
    m_slot_id_isValid = false;

    m_slot_name_isSet = false;
    m_slot_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_slot_type_id_isSet = false;
    m_slot_type_id_isValid = false;

    m_value_elicitation_setting_isSet = false;
    m_value_elicitation_setting_isValid = false;

    m_obfuscation_setting_isSet = false;
    m_obfuscation_setting_isValid = false;

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_locale_id_isSet = false;
    m_locale_id_isValid = false;

    m_intent_id_isSet = false;
    m_intent_id_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_multiple_values_setting_isSet = false;
    m_multiple_values_setting_isValid = false;

    m_sub_slot_setting_isSet = false;
    m_sub_slot_setting_isValid = false;
}

void OAICreateSlotResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSlotResponse::fromJsonObject(QJsonObject json) {

    m_slot_id_isValid = ::OpenAPI::fromJsonValue(m_slot_id, json[QString("slotId")]);
    m_slot_id_isSet = !json[QString("slotId")].isNull() && m_slot_id_isValid;

    m_slot_name_isValid = ::OpenAPI::fromJsonValue(m_slot_name, json[QString("slotName")]);
    m_slot_name_isSet = !json[QString("slotName")].isNull() && m_slot_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_slot_type_id_isValid = ::OpenAPI::fromJsonValue(m_slot_type_id, json[QString("slotTypeId")]);
    m_slot_type_id_isSet = !json[QString("slotTypeId")].isNull() && m_slot_type_id_isValid;

    m_value_elicitation_setting_isValid = ::OpenAPI::fromJsonValue(m_value_elicitation_setting, json[QString("valueElicitationSetting")]);
    m_value_elicitation_setting_isSet = !json[QString("valueElicitationSetting")].isNull() && m_value_elicitation_setting_isValid;

    m_obfuscation_setting_isValid = ::OpenAPI::fromJsonValue(m_obfuscation_setting, json[QString("obfuscationSetting")]);
    m_obfuscation_setting_isSet = !json[QString("obfuscationSetting")].isNull() && m_obfuscation_setting_isValid;

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("botId")]);
    m_bot_id_isSet = !json[QString("botId")].isNull() && m_bot_id_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_locale_id_isValid = ::OpenAPI::fromJsonValue(m_locale_id, json[QString("localeId")]);
    m_locale_id_isSet = !json[QString("localeId")].isNull() && m_locale_id_isValid;

    m_intent_id_isValid = ::OpenAPI::fromJsonValue(m_intent_id, json[QString("intentId")]);
    m_intent_id_isSet = !json[QString("intentId")].isNull() && m_intent_id_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_multiple_values_setting_isValid = ::OpenAPI::fromJsonValue(m_multiple_values_setting, json[QString("multipleValuesSetting")]);
    m_multiple_values_setting_isSet = !json[QString("multipleValuesSetting")].isNull() && m_multiple_values_setting_isValid;

    m_sub_slot_setting_isValid = ::OpenAPI::fromJsonValue(m_sub_slot_setting, json[QString("subSlotSetting")]);
    m_sub_slot_setting_isSet = !json[QString("subSlotSetting")].isNull() && m_sub_slot_setting_isValid;
}

QString OAICreateSlotResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSlotResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_slot_id_isSet) {
        obj.insert(QString("slotId"), ::OpenAPI::toJsonValue(m_slot_id));
    }
    if (m_slot_name_isSet) {
        obj.insert(QString("slotName"), ::OpenAPI::toJsonValue(m_slot_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_slot_type_id_isSet) {
        obj.insert(QString("slotTypeId"), ::OpenAPI::toJsonValue(m_slot_type_id));
    }
    if (m_value_elicitation_setting.isSet()) {
        obj.insert(QString("valueElicitationSetting"), ::OpenAPI::toJsonValue(m_value_elicitation_setting));
    }
    if (m_obfuscation_setting.isSet()) {
        obj.insert(QString("obfuscationSetting"), ::OpenAPI::toJsonValue(m_obfuscation_setting));
    }
    if (m_bot_id_isSet) {
        obj.insert(QString("botId"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_locale_id_isSet) {
        obj.insert(QString("localeId"), ::OpenAPI::toJsonValue(m_locale_id));
    }
    if (m_intent_id_isSet) {
        obj.insert(QString("intentId"), ::OpenAPI::toJsonValue(m_intent_id));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_multiple_values_setting.isSet()) {
        obj.insert(QString("multipleValuesSetting"), ::OpenAPI::toJsonValue(m_multiple_values_setting));
    }
    if (m_sub_slot_setting.isSet()) {
        obj.insert(QString("subSlotSetting"), ::OpenAPI::toJsonValue(m_sub_slot_setting));
    }
    return obj;
}

QString OAICreateSlotResponse::getSlotId() const {
    return m_slot_id;
}
void OAICreateSlotResponse::setSlotId(const QString &slot_id) {
    m_slot_id = slot_id;
    m_slot_id_isSet = true;
}

bool OAICreateSlotResponse::is_slot_id_Set() const{
    return m_slot_id_isSet;
}

bool OAICreateSlotResponse::is_slot_id_Valid() const{
    return m_slot_id_isValid;
}

QString OAICreateSlotResponse::getSlotName() const {
    return m_slot_name;
}
void OAICreateSlotResponse::setSlotName(const QString &slot_name) {
    m_slot_name = slot_name;
    m_slot_name_isSet = true;
}

bool OAICreateSlotResponse::is_slot_name_Set() const{
    return m_slot_name_isSet;
}

bool OAICreateSlotResponse::is_slot_name_Valid() const{
    return m_slot_name_isValid;
}

QString OAICreateSlotResponse::getDescription() const {
    return m_description;
}
void OAICreateSlotResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSlotResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSlotResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateSlotResponse::getSlotTypeId() const {
    return m_slot_type_id;
}
void OAICreateSlotResponse::setSlotTypeId(const QString &slot_type_id) {
    m_slot_type_id = slot_type_id;
    m_slot_type_id_isSet = true;
}

bool OAICreateSlotResponse::is_slot_type_id_Set() const{
    return m_slot_type_id_isSet;
}

bool OAICreateSlotResponse::is_slot_type_id_Valid() const{
    return m_slot_type_id_isValid;
}

OAICreateSlotResponse_valueElicitationSetting OAICreateSlotResponse::getValueElicitationSetting() const {
    return m_value_elicitation_setting;
}
void OAICreateSlotResponse::setValueElicitationSetting(const OAICreateSlotResponse_valueElicitationSetting &value_elicitation_setting) {
    m_value_elicitation_setting = value_elicitation_setting;
    m_value_elicitation_setting_isSet = true;
}

bool OAICreateSlotResponse::is_value_elicitation_setting_Set() const{
    return m_value_elicitation_setting_isSet;
}

bool OAICreateSlotResponse::is_value_elicitation_setting_Valid() const{
    return m_value_elicitation_setting_isValid;
}

OAICreateSlotResponse_obfuscationSetting OAICreateSlotResponse::getObfuscationSetting() const {
    return m_obfuscation_setting;
}
void OAICreateSlotResponse::setObfuscationSetting(const OAICreateSlotResponse_obfuscationSetting &obfuscation_setting) {
    m_obfuscation_setting = obfuscation_setting;
    m_obfuscation_setting_isSet = true;
}

bool OAICreateSlotResponse::is_obfuscation_setting_Set() const{
    return m_obfuscation_setting_isSet;
}

bool OAICreateSlotResponse::is_obfuscation_setting_Valid() const{
    return m_obfuscation_setting_isValid;
}

QString OAICreateSlotResponse::getBotId() const {
    return m_bot_id;
}
void OAICreateSlotResponse::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAICreateSlotResponse::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAICreateSlotResponse::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

QString OAICreateSlotResponse::getBotVersion() const {
    return m_bot_version;
}
void OAICreateSlotResponse::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAICreateSlotResponse::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAICreateSlotResponse::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QString OAICreateSlotResponse::getLocaleId() const {
    return m_locale_id;
}
void OAICreateSlotResponse::setLocaleId(const QString &locale_id) {
    m_locale_id = locale_id;
    m_locale_id_isSet = true;
}

bool OAICreateSlotResponse::is_locale_id_Set() const{
    return m_locale_id_isSet;
}

bool OAICreateSlotResponse::is_locale_id_Valid() const{
    return m_locale_id_isValid;
}

QString OAICreateSlotResponse::getIntentId() const {
    return m_intent_id;
}
void OAICreateSlotResponse::setIntentId(const QString &intent_id) {
    m_intent_id = intent_id;
    m_intent_id_isSet = true;
}

bool OAICreateSlotResponse::is_intent_id_Set() const{
    return m_intent_id_isSet;
}

bool OAICreateSlotResponse::is_intent_id_Valid() const{
    return m_intent_id_isValid;
}

QDateTime OAICreateSlotResponse::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAICreateSlotResponse::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAICreateSlotResponse::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAICreateSlotResponse::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

OAICreateSlotResponse_multipleValuesSetting OAICreateSlotResponse::getMultipleValuesSetting() const {
    return m_multiple_values_setting;
}
void OAICreateSlotResponse::setMultipleValuesSetting(const OAICreateSlotResponse_multipleValuesSetting &multiple_values_setting) {
    m_multiple_values_setting = multiple_values_setting;
    m_multiple_values_setting_isSet = true;
}

bool OAICreateSlotResponse::is_multiple_values_setting_Set() const{
    return m_multiple_values_setting_isSet;
}

bool OAICreateSlotResponse::is_multiple_values_setting_Valid() const{
    return m_multiple_values_setting_isValid;
}

OAICreateSlotResponse_subSlotSetting OAICreateSlotResponse::getSubSlotSetting() const {
    return m_sub_slot_setting;
}
void OAICreateSlotResponse::setSubSlotSetting(const OAICreateSlotResponse_subSlotSetting &sub_slot_setting) {
    m_sub_slot_setting = sub_slot_setting;
    m_sub_slot_setting_isSet = true;
}

bool OAICreateSlotResponse::is_sub_slot_setting_Set() const{
    return m_sub_slot_setting_isSet;
}

bool OAICreateSlotResponse::is_sub_slot_setting_Valid() const{
    return m_sub_slot_setting_isValid;
}

bool OAICreateSlotResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_slot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_elicitation_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_obfuscation_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_values_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_slot_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSlotResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
