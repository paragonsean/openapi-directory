/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlotResolutionTestResultItemCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlotResolutionTestResultItemCounts::OAISlotResolutionTestResultItemCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlotResolutionTestResultItemCounts::OAISlotResolutionTestResultItemCounts() {
    this->initializeModel();
}

OAISlotResolutionTestResultItemCounts::~OAISlotResolutionTestResultItemCounts() {}

void OAISlotResolutionTestResultItemCounts::initializeModel() {

    m_total_result_count_isSet = false;
    m_total_result_count_isValid = false;

    m_speech_transcription_result_counts_isSet = false;
    m_speech_transcription_result_counts_isValid = false;

    m_slot_match_result_counts_isSet = false;
    m_slot_match_result_counts_isValid = false;
}

void OAISlotResolutionTestResultItemCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlotResolutionTestResultItemCounts::fromJsonObject(QJsonObject json) {

    m_total_result_count_isValid = ::OpenAPI::fromJsonValue(m_total_result_count, json[QString("totalResultCount")]);
    m_total_result_count_isSet = !json[QString("totalResultCount")].isNull() && m_total_result_count_isValid;

    m_speech_transcription_result_counts_isValid = ::OpenAPI::fromJsonValue(m_speech_transcription_result_counts, json[QString("speechTranscriptionResultCounts")]);
    m_speech_transcription_result_counts_isSet = !json[QString("speechTranscriptionResultCounts")].isNull() && m_speech_transcription_result_counts_isValid;

    m_slot_match_result_counts_isValid = ::OpenAPI::fromJsonValue(m_slot_match_result_counts, json[QString("slotMatchResultCounts")]);
    m_slot_match_result_counts_isSet = !json[QString("slotMatchResultCounts")].isNull() && m_slot_match_result_counts_isValid;
}

QString OAISlotResolutionTestResultItemCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlotResolutionTestResultItemCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_total_result_count_isSet) {
        obj.insert(QString("totalResultCount"), ::OpenAPI::toJsonValue(m_total_result_count));
    }
    if (m_speech_transcription_result_counts.isSet()) {
        obj.insert(QString("speechTranscriptionResultCounts"), ::OpenAPI::toJsonValue(m_speech_transcription_result_counts));
    }
    if (m_slot_match_result_counts.isSet()) {
        obj.insert(QString("slotMatchResultCounts"), ::OpenAPI::toJsonValue(m_slot_match_result_counts));
    }
    return obj;
}

qint32 OAISlotResolutionTestResultItemCounts::getTotalResultCount() const {
    return m_total_result_count;
}
void OAISlotResolutionTestResultItemCounts::setTotalResultCount(const qint32 &total_result_count) {
    m_total_result_count = total_result_count;
    m_total_result_count_isSet = true;
}

bool OAISlotResolutionTestResultItemCounts::is_total_result_count_Set() const{
    return m_total_result_count_isSet;
}

bool OAISlotResolutionTestResultItemCounts::is_total_result_count_Valid() const{
    return m_total_result_count_isValid;
}

QMap OAISlotResolutionTestResultItemCounts::getSpeechTranscriptionResultCounts() const {
    return m_speech_transcription_result_counts;
}
void OAISlotResolutionTestResultItemCounts::setSpeechTranscriptionResultCounts(const QMap &speech_transcription_result_counts) {
    m_speech_transcription_result_counts = speech_transcription_result_counts;
    m_speech_transcription_result_counts_isSet = true;
}

bool OAISlotResolutionTestResultItemCounts::is_speech_transcription_result_counts_Set() const{
    return m_speech_transcription_result_counts_isSet;
}

bool OAISlotResolutionTestResultItemCounts::is_speech_transcription_result_counts_Valid() const{
    return m_speech_transcription_result_counts_isValid;
}

QMap OAISlotResolutionTestResultItemCounts::getSlotMatchResultCounts() const {
    return m_slot_match_result_counts;
}
void OAISlotResolutionTestResultItemCounts::setSlotMatchResultCounts(const QMap &slot_match_result_counts) {
    m_slot_match_result_counts = slot_match_result_counts;
    m_slot_match_result_counts_isSet = true;
}

bool OAISlotResolutionTestResultItemCounts::is_slot_match_result_counts_Set() const{
    return m_slot_match_result_counts_isSet;
}

bool OAISlotResolutionTestResultItemCounts::is_slot_match_result_counts_Valid() const{
    return m_slot_match_result_counts_isValid;
}

bool OAISlotResolutionTestResultItemCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_result_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_transcription_result_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_match_result_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlotResolutionTestResultItemCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_total_result_count_isValid && m_slot_match_result_counts_isValid && true;
}

} // namespace OpenAPI
