/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBotImportSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBotImportSpecification::OAIBotImportSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBotImportSpecification::OAIBotImportSpecification() {
    this->initializeModel();
}

OAIBotImportSpecification::~OAIBotImportSpecification() {}

void OAIBotImportSpecification::initializeModel() {

    m_bot_name_isSet = false;
    m_bot_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_data_privacy_isSet = false;
    m_data_privacy_isValid = false;

    m_idle_session_ttlin_seconds_isSet = false;
    m_idle_session_ttlin_seconds_isValid = false;

    m_bot_tags_isSet = false;
    m_bot_tags_isValid = false;

    m_test_bot_alias_tags_isSet = false;
    m_test_bot_alias_tags_isValid = false;
}

void OAIBotImportSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBotImportSpecification::fromJsonObject(QJsonObject json) {

    m_bot_name_isValid = ::OpenAPI::fromJsonValue(m_bot_name, json[QString("botName")]);
    m_bot_name_isSet = !json[QString("botName")].isNull() && m_bot_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_data_privacy_isValid = ::OpenAPI::fromJsonValue(m_data_privacy, json[QString("dataPrivacy")]);
    m_data_privacy_isSet = !json[QString("dataPrivacy")].isNull() && m_data_privacy_isValid;

    m_idle_session_ttlin_seconds_isValid = ::OpenAPI::fromJsonValue(m_idle_session_ttlin_seconds, json[QString("idleSessionTTLInSeconds")]);
    m_idle_session_ttlin_seconds_isSet = !json[QString("idleSessionTTLInSeconds")].isNull() && m_idle_session_ttlin_seconds_isValid;

    m_bot_tags_isValid = ::OpenAPI::fromJsonValue(m_bot_tags, json[QString("botTags")]);
    m_bot_tags_isSet = !json[QString("botTags")].isNull() && m_bot_tags_isValid;

    m_test_bot_alias_tags_isValid = ::OpenAPI::fromJsonValue(m_test_bot_alias_tags, json[QString("testBotAliasTags")]);
    m_test_bot_alias_tags_isSet = !json[QString("testBotAliasTags")].isNull() && m_test_bot_alias_tags_isValid;
}

QString OAIBotImportSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBotImportSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_name_isSet) {
        obj.insert(QString("botName"), ::OpenAPI::toJsonValue(m_bot_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_data_privacy.isSet()) {
        obj.insert(QString("dataPrivacy"), ::OpenAPI::toJsonValue(m_data_privacy));
    }
    if (m_idle_session_ttlin_seconds_isSet) {
        obj.insert(QString("idleSessionTTLInSeconds"), ::OpenAPI::toJsonValue(m_idle_session_ttlin_seconds));
    }
    if (m_bot_tags.isSet()) {
        obj.insert(QString("botTags"), ::OpenAPI::toJsonValue(m_bot_tags));
    }
    if (m_test_bot_alias_tags.isSet()) {
        obj.insert(QString("testBotAliasTags"), ::OpenAPI::toJsonValue(m_test_bot_alias_tags));
    }
    return obj;
}

QString OAIBotImportSpecification::getBotName() const {
    return m_bot_name;
}
void OAIBotImportSpecification::setBotName(const QString &bot_name) {
    m_bot_name = bot_name;
    m_bot_name_isSet = true;
}

bool OAIBotImportSpecification::is_bot_name_Set() const{
    return m_bot_name_isSet;
}

bool OAIBotImportSpecification::is_bot_name_Valid() const{
    return m_bot_name_isValid;
}

QString OAIBotImportSpecification::getRoleArn() const {
    return m_role_arn;
}
void OAIBotImportSpecification::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIBotImportSpecification::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIBotImportSpecification::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIDataPrivacy OAIBotImportSpecification::getDataPrivacy() const {
    return m_data_privacy;
}
void OAIBotImportSpecification::setDataPrivacy(const OAIDataPrivacy &data_privacy) {
    m_data_privacy = data_privacy;
    m_data_privacy_isSet = true;
}

bool OAIBotImportSpecification::is_data_privacy_Set() const{
    return m_data_privacy_isSet;
}

bool OAIBotImportSpecification::is_data_privacy_Valid() const{
    return m_data_privacy_isValid;
}

qint32 OAIBotImportSpecification::getIdleSessionTtlinSeconds() const {
    return m_idle_session_ttlin_seconds;
}
void OAIBotImportSpecification::setIdleSessionTtlinSeconds(const qint32 &idle_session_ttlin_seconds) {
    m_idle_session_ttlin_seconds = idle_session_ttlin_seconds;
    m_idle_session_ttlin_seconds_isSet = true;
}

bool OAIBotImportSpecification::is_idle_session_ttlin_seconds_Set() const{
    return m_idle_session_ttlin_seconds_isSet;
}

bool OAIBotImportSpecification::is_idle_session_ttlin_seconds_Valid() const{
    return m_idle_session_ttlin_seconds_isValid;
}

QMap OAIBotImportSpecification::getBotTags() const {
    return m_bot_tags;
}
void OAIBotImportSpecification::setBotTags(const QMap &bot_tags) {
    m_bot_tags = bot_tags;
    m_bot_tags_isSet = true;
}

bool OAIBotImportSpecification::is_bot_tags_Set() const{
    return m_bot_tags_isSet;
}

bool OAIBotImportSpecification::is_bot_tags_Valid() const{
    return m_bot_tags_isValid;
}

QMap OAIBotImportSpecification::getTestBotAliasTags() const {
    return m_test_bot_alias_tags;
}
void OAIBotImportSpecification::setTestBotAliasTags(const QMap &test_bot_alias_tags) {
    m_test_bot_alias_tags = test_bot_alias_tags;
    m_test_bot_alias_tags_isSet = true;
}

bool OAIBotImportSpecification::is_test_bot_alias_tags_Set() const{
    return m_test_bot_alias_tags_isSet;
}

bool OAIBotImportSpecification::is_test_bot_alias_tags_Valid() const{
    return m_test_bot_alias_tags_isValid;
}

bool OAIBotImportSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_session_ttlin_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_bot_alias_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBotImportSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bot_name_isValid && m_role_arn_isValid && m_data_privacy_isValid && true;
}

} // namespace OpenAPI
