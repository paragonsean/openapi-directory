/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestSetTurnResult_agent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestSetTurnResult_agent::OAITestSetTurnResult_agent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestSetTurnResult_agent::OAITestSetTurnResult_agent() {
    this->initializeModel();
}

OAITestSetTurnResult_agent::~OAITestSetTurnResult_agent() {}

void OAITestSetTurnResult_agent::initializeModel() {

    m_expected_agent_prompt_isSet = false;
    m_expected_agent_prompt_isValid = false;

    m_actual_agent_prompt_isSet = false;
    m_actual_agent_prompt_isValid = false;

    m_error_details_isSet = false;
    m_error_details_isValid = false;

    m_actual_elicited_slot_isSet = false;
    m_actual_elicited_slot_isValid = false;

    m_actual_intent_isSet = false;
    m_actual_intent_isValid = false;
}

void OAITestSetTurnResult_agent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestSetTurnResult_agent::fromJsonObject(QJsonObject json) {

    m_expected_agent_prompt_isValid = ::OpenAPI::fromJsonValue(m_expected_agent_prompt, json[QString("expectedAgentPrompt")]);
    m_expected_agent_prompt_isSet = !json[QString("expectedAgentPrompt")].isNull() && m_expected_agent_prompt_isValid;

    m_actual_agent_prompt_isValid = ::OpenAPI::fromJsonValue(m_actual_agent_prompt, json[QString("actualAgentPrompt")]);
    m_actual_agent_prompt_isSet = !json[QString("actualAgentPrompt")].isNull() && m_actual_agent_prompt_isValid;

    m_error_details_isValid = ::OpenAPI::fromJsonValue(m_error_details, json[QString("errorDetails")]);
    m_error_details_isSet = !json[QString("errorDetails")].isNull() && m_error_details_isValid;

    m_actual_elicited_slot_isValid = ::OpenAPI::fromJsonValue(m_actual_elicited_slot, json[QString("actualElicitedSlot")]);
    m_actual_elicited_slot_isSet = !json[QString("actualElicitedSlot")].isNull() && m_actual_elicited_slot_isValid;

    m_actual_intent_isValid = ::OpenAPI::fromJsonValue(m_actual_intent, json[QString("actualIntent")]);
    m_actual_intent_isSet = !json[QString("actualIntent")].isNull() && m_actual_intent_isValid;
}

QString OAITestSetTurnResult_agent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestSetTurnResult_agent::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_agent_prompt_isSet) {
        obj.insert(QString("expectedAgentPrompt"), ::OpenAPI::toJsonValue(m_expected_agent_prompt));
    }
    if (m_actual_agent_prompt_isSet) {
        obj.insert(QString("actualAgentPrompt"), ::OpenAPI::toJsonValue(m_actual_agent_prompt));
    }
    if (m_error_details.isSet()) {
        obj.insert(QString("errorDetails"), ::OpenAPI::toJsonValue(m_error_details));
    }
    if (m_actual_elicited_slot_isSet) {
        obj.insert(QString("actualElicitedSlot"), ::OpenAPI::toJsonValue(m_actual_elicited_slot));
    }
    if (m_actual_intent_isSet) {
        obj.insert(QString("actualIntent"), ::OpenAPI::toJsonValue(m_actual_intent));
    }
    return obj;
}

QString OAITestSetTurnResult_agent::getExpectedAgentPrompt() const {
    return m_expected_agent_prompt;
}
void OAITestSetTurnResult_agent::setExpectedAgentPrompt(const QString &expected_agent_prompt) {
    m_expected_agent_prompt = expected_agent_prompt;
    m_expected_agent_prompt_isSet = true;
}

bool OAITestSetTurnResult_agent::is_expected_agent_prompt_Set() const{
    return m_expected_agent_prompt_isSet;
}

bool OAITestSetTurnResult_agent::is_expected_agent_prompt_Valid() const{
    return m_expected_agent_prompt_isValid;
}

QString OAITestSetTurnResult_agent::getActualAgentPrompt() const {
    return m_actual_agent_prompt;
}
void OAITestSetTurnResult_agent::setActualAgentPrompt(const QString &actual_agent_prompt) {
    m_actual_agent_prompt = actual_agent_prompt;
    m_actual_agent_prompt_isSet = true;
}

bool OAITestSetTurnResult_agent::is_actual_agent_prompt_Set() const{
    return m_actual_agent_prompt_isSet;
}

bool OAITestSetTurnResult_agent::is_actual_agent_prompt_Valid() const{
    return m_actual_agent_prompt_isValid;
}

OAIExecutionErrorDetails OAITestSetTurnResult_agent::getErrorDetails() const {
    return m_error_details;
}
void OAITestSetTurnResult_agent::setErrorDetails(const OAIExecutionErrorDetails &error_details) {
    m_error_details = error_details;
    m_error_details_isSet = true;
}

bool OAITestSetTurnResult_agent::is_error_details_Set() const{
    return m_error_details_isSet;
}

bool OAITestSetTurnResult_agent::is_error_details_Valid() const{
    return m_error_details_isValid;
}

QString OAITestSetTurnResult_agent::getActualElicitedSlot() const {
    return m_actual_elicited_slot;
}
void OAITestSetTurnResult_agent::setActualElicitedSlot(const QString &actual_elicited_slot) {
    m_actual_elicited_slot = actual_elicited_slot;
    m_actual_elicited_slot_isSet = true;
}

bool OAITestSetTurnResult_agent::is_actual_elicited_slot_Set() const{
    return m_actual_elicited_slot_isSet;
}

bool OAITestSetTurnResult_agent::is_actual_elicited_slot_Valid() const{
    return m_actual_elicited_slot_isValid;
}

QString OAITestSetTurnResult_agent::getActualIntent() const {
    return m_actual_intent;
}
void OAITestSetTurnResult_agent::setActualIntent(const QString &actual_intent) {
    m_actual_intent = actual_intent;
    m_actual_intent_isSet = true;
}

bool OAITestSetTurnResult_agent::is_actual_intent_Set() const{
    return m_actual_intent_isSet;
}

bool OAITestSetTurnResult_agent::is_actual_intent_Valid() const{
    return m_actual_intent_isValid;
}

bool OAITestSetTurnResult_agent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_agent_prompt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_agent_prompt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_elicited_slot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_intent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestSetTurnResult_agent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expected_agent_prompt_isValid && true;
}

} // namespace OpenAPI
