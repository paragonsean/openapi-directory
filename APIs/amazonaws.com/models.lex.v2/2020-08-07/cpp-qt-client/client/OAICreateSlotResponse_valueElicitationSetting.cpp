/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSlotResponse_valueElicitationSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSlotResponse_valueElicitationSetting::OAICreateSlotResponse_valueElicitationSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSlotResponse_valueElicitationSetting::OAICreateSlotResponse_valueElicitationSetting() {
    this->initializeModel();
}

OAICreateSlotResponse_valueElicitationSetting::~OAICreateSlotResponse_valueElicitationSetting() {}

void OAICreateSlotResponse_valueElicitationSetting::initializeModel() {

    m_default_value_specification_isSet = false;
    m_default_value_specification_isValid = false;

    m_slot_constraint_isSet = false;
    m_slot_constraint_isValid = false;

    m_prompt_specification_isSet = false;
    m_prompt_specification_isValid = false;

    m_sample_utterances_isSet = false;
    m_sample_utterances_isValid = false;

    m_wait_and_continue_specification_isSet = false;
    m_wait_and_continue_specification_isValid = false;

    m_slot_capture_setting_isSet = false;
    m_slot_capture_setting_isValid = false;
}

void OAICreateSlotResponse_valueElicitationSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSlotResponse_valueElicitationSetting::fromJsonObject(QJsonObject json) {

    m_default_value_specification_isValid = ::OpenAPI::fromJsonValue(m_default_value_specification, json[QString("defaultValueSpecification")]);
    m_default_value_specification_isSet = !json[QString("defaultValueSpecification")].isNull() && m_default_value_specification_isValid;

    m_slot_constraint_isValid = ::OpenAPI::fromJsonValue(m_slot_constraint, json[QString("slotConstraint")]);
    m_slot_constraint_isSet = !json[QString("slotConstraint")].isNull() && m_slot_constraint_isValid;

    m_prompt_specification_isValid = ::OpenAPI::fromJsonValue(m_prompt_specification, json[QString("promptSpecification")]);
    m_prompt_specification_isSet = !json[QString("promptSpecification")].isNull() && m_prompt_specification_isValid;

    m_sample_utterances_isValid = ::OpenAPI::fromJsonValue(m_sample_utterances, json[QString("sampleUtterances")]);
    m_sample_utterances_isSet = !json[QString("sampleUtterances")].isNull() && m_sample_utterances_isValid;

    m_wait_and_continue_specification_isValid = ::OpenAPI::fromJsonValue(m_wait_and_continue_specification, json[QString("waitAndContinueSpecification")]);
    m_wait_and_continue_specification_isSet = !json[QString("waitAndContinueSpecification")].isNull() && m_wait_and_continue_specification_isValid;

    m_slot_capture_setting_isValid = ::OpenAPI::fromJsonValue(m_slot_capture_setting, json[QString("slotCaptureSetting")]);
    m_slot_capture_setting_isSet = !json[QString("slotCaptureSetting")].isNull() && m_slot_capture_setting_isValid;
}

QString OAICreateSlotResponse_valueElicitationSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSlotResponse_valueElicitationSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_default_value_specification.isSet()) {
        obj.insert(QString("defaultValueSpecification"), ::OpenAPI::toJsonValue(m_default_value_specification));
    }
    if (m_slot_constraint.isSet()) {
        obj.insert(QString("slotConstraint"), ::OpenAPI::toJsonValue(m_slot_constraint));
    }
    if (m_prompt_specification.isSet()) {
        obj.insert(QString("promptSpecification"), ::OpenAPI::toJsonValue(m_prompt_specification));
    }
    if (m_sample_utterances.isSet()) {
        obj.insert(QString("sampleUtterances"), ::OpenAPI::toJsonValue(m_sample_utterances));
    }
    if (m_wait_and_continue_specification.isSet()) {
        obj.insert(QString("waitAndContinueSpecification"), ::OpenAPI::toJsonValue(m_wait_and_continue_specification));
    }
    if (m_slot_capture_setting.isSet()) {
        obj.insert(QString("slotCaptureSetting"), ::OpenAPI::toJsonValue(m_slot_capture_setting));
    }
    return obj;
}

OAICreateSlot_request_valueElicitationSetting_defaultValueSpecification OAICreateSlotResponse_valueElicitationSetting::getDefaultValueSpecification() const {
    return m_default_value_specification;
}
void OAICreateSlotResponse_valueElicitationSetting::setDefaultValueSpecification(const OAICreateSlot_request_valueElicitationSetting_defaultValueSpecification &default_value_specification) {
    m_default_value_specification = default_value_specification;
    m_default_value_specification_isSet = true;
}

bool OAICreateSlotResponse_valueElicitationSetting::is_default_value_specification_Set() const{
    return m_default_value_specification_isSet;
}

bool OAICreateSlotResponse_valueElicitationSetting::is_default_value_specification_Valid() const{
    return m_default_value_specification_isValid;
}

OAISlotConstraint OAICreateSlotResponse_valueElicitationSetting::getSlotConstraint() const {
    return m_slot_constraint;
}
void OAICreateSlotResponse_valueElicitationSetting::setSlotConstraint(const OAISlotConstraint &slot_constraint) {
    m_slot_constraint = slot_constraint;
    m_slot_constraint_isSet = true;
}

bool OAICreateSlotResponse_valueElicitationSetting::is_slot_constraint_Set() const{
    return m_slot_constraint_isSet;
}

bool OAICreateSlotResponse_valueElicitationSetting::is_slot_constraint_Valid() const{
    return m_slot_constraint_isValid;
}

OAICreateSlot_request_valueElicitationSetting_promptSpecification OAICreateSlotResponse_valueElicitationSetting::getPromptSpecification() const {
    return m_prompt_specification;
}
void OAICreateSlotResponse_valueElicitationSetting::setPromptSpecification(const OAICreateSlot_request_valueElicitationSetting_promptSpecification &prompt_specification) {
    m_prompt_specification = prompt_specification;
    m_prompt_specification_isSet = true;
}

bool OAICreateSlotResponse_valueElicitationSetting::is_prompt_specification_Set() const{
    return m_prompt_specification_isSet;
}

bool OAICreateSlotResponse_valueElicitationSetting::is_prompt_specification_Valid() const{
    return m_prompt_specification_isValid;
}

QList OAICreateSlotResponse_valueElicitationSetting::getSampleUtterances() const {
    return m_sample_utterances;
}
void OAICreateSlotResponse_valueElicitationSetting::setSampleUtterances(const QList &sample_utterances) {
    m_sample_utterances = sample_utterances;
    m_sample_utterances_isSet = true;
}

bool OAICreateSlotResponse_valueElicitationSetting::is_sample_utterances_Set() const{
    return m_sample_utterances_isSet;
}

bool OAICreateSlotResponse_valueElicitationSetting::is_sample_utterances_Valid() const{
    return m_sample_utterances_isValid;
}

OAIWaitAndContinueSpecification OAICreateSlotResponse_valueElicitationSetting::getWaitAndContinueSpecification() const {
    return m_wait_and_continue_specification;
}
void OAICreateSlotResponse_valueElicitationSetting::setWaitAndContinueSpecification(const OAIWaitAndContinueSpecification &wait_and_continue_specification) {
    m_wait_and_continue_specification = wait_and_continue_specification;
    m_wait_and_continue_specification_isSet = true;
}

bool OAICreateSlotResponse_valueElicitationSetting::is_wait_and_continue_specification_Set() const{
    return m_wait_and_continue_specification_isSet;
}

bool OAICreateSlotResponse_valueElicitationSetting::is_wait_and_continue_specification_Valid() const{
    return m_wait_and_continue_specification_isValid;
}

OAICreateSlot_request_valueElicitationSetting_slotCaptureSetting OAICreateSlotResponse_valueElicitationSetting::getSlotCaptureSetting() const {
    return m_slot_capture_setting;
}
void OAICreateSlotResponse_valueElicitationSetting::setSlotCaptureSetting(const OAICreateSlot_request_valueElicitationSetting_slotCaptureSetting &slot_capture_setting) {
    m_slot_capture_setting = slot_capture_setting;
    m_slot_capture_setting_isSet = true;
}

bool OAICreateSlotResponse_valueElicitationSetting::is_slot_capture_setting_Set() const{
    return m_slot_capture_setting_isSet;
}

bool OAICreateSlotResponse_valueElicitationSetting::is_slot_capture_setting_Valid() const{
    return m_slot_capture_setting_isValid;
}

bool OAICreateSlotResponse_valueElicitationSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_value_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompt_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_utterances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_and_continue_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_capture_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSlotResponse_valueElicitationSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_slot_constraint_isValid && true;
}

} // namespace OpenAPI
