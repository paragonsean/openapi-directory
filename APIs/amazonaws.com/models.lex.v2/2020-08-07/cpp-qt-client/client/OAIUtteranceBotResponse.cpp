/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUtteranceBotResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUtteranceBotResponse::OAIUtteranceBotResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUtteranceBotResponse::OAIUtteranceBotResponse() {
    this->initializeModel();
}

OAIUtteranceBotResponse::~OAIUtteranceBotResponse() {}

void OAIUtteranceBotResponse::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_image_response_card_isSet = false;
    m_image_response_card_isValid = false;
}

void OAIUtteranceBotResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUtteranceBotResponse::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_image_response_card_isValid = ::OpenAPI::fromJsonValue(m_image_response_card, json[QString("imageResponseCard")]);
    m_image_response_card_isSet = !json[QString("imageResponseCard")].isNull() && m_image_response_card_isValid;
}

QString OAIUtteranceBotResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUtteranceBotResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_type.isSet()) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_image_response_card.isSet()) {
        obj.insert(QString("imageResponseCard"), ::OpenAPI::toJsonValue(m_image_response_card));
    }
    return obj;
}

QString OAIUtteranceBotResponse::getContent() const {
    return m_content;
}
void OAIUtteranceBotResponse::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIUtteranceBotResponse::is_content_Set() const{
    return m_content_isSet;
}

bool OAIUtteranceBotResponse::is_content_Valid() const{
    return m_content_isValid;
}

OAIUtteranceContentType OAIUtteranceBotResponse::getContentType() const {
    return m_content_type;
}
void OAIUtteranceBotResponse::setContentType(const OAIUtteranceContentType &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIUtteranceBotResponse::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIUtteranceBotResponse::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAIImageResponseCard OAIUtteranceBotResponse::getImageResponseCard() const {
    return m_image_response_card;
}
void OAIUtteranceBotResponse::setImageResponseCard(const OAIImageResponseCard &image_response_card) {
    m_image_response_card = image_response_card;
    m_image_response_card_isSet = true;
}

bool OAIUtteranceBotResponse::is_image_response_card_Set() const{
    return m_image_response_card_isSet;
}

bool OAIUtteranceBotResponse::is_image_response_card_Valid() const{
    return m_image_response_card_isValid;
}

bool OAIUtteranceBotResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_response_card.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUtteranceBotResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
