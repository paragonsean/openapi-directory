/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStillWaitingResponseSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStillWaitingResponseSpecification::OAIStillWaitingResponseSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStillWaitingResponseSpecification::OAIStillWaitingResponseSpecification() {
    this->initializeModel();
}

OAIStillWaitingResponseSpecification::~OAIStillWaitingResponseSpecification() {}

void OAIStillWaitingResponseSpecification::initializeModel() {

    m_message_groups_isSet = false;
    m_message_groups_isValid = false;

    m_frequency_in_seconds_isSet = false;
    m_frequency_in_seconds_isValid = false;

    m_timeout_in_seconds_isSet = false;
    m_timeout_in_seconds_isValid = false;

    m_allow_interrupt_isSet = false;
    m_allow_interrupt_isValid = false;
}

void OAIStillWaitingResponseSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStillWaitingResponseSpecification::fromJsonObject(QJsonObject json) {

    m_message_groups_isValid = ::OpenAPI::fromJsonValue(m_message_groups, json[QString("messageGroups")]);
    m_message_groups_isSet = !json[QString("messageGroups")].isNull() && m_message_groups_isValid;

    m_frequency_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_frequency_in_seconds, json[QString("frequencyInSeconds")]);
    m_frequency_in_seconds_isSet = !json[QString("frequencyInSeconds")].isNull() && m_frequency_in_seconds_isValid;

    m_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_seconds, json[QString("timeoutInSeconds")]);
    m_timeout_in_seconds_isSet = !json[QString("timeoutInSeconds")].isNull() && m_timeout_in_seconds_isValid;

    m_allow_interrupt_isValid = ::OpenAPI::fromJsonValue(m_allow_interrupt, json[QString("allowInterrupt")]);
    m_allow_interrupt_isSet = !json[QString("allowInterrupt")].isNull() && m_allow_interrupt_isValid;
}

QString OAIStillWaitingResponseSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStillWaitingResponseSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_message_groups.isSet()) {
        obj.insert(QString("messageGroups"), ::OpenAPI::toJsonValue(m_message_groups));
    }
    if (m_frequency_in_seconds_isSet) {
        obj.insert(QString("frequencyInSeconds"), ::OpenAPI::toJsonValue(m_frequency_in_seconds));
    }
    if (m_timeout_in_seconds_isSet) {
        obj.insert(QString("timeoutInSeconds"), ::OpenAPI::toJsonValue(m_timeout_in_seconds));
    }
    if (m_allow_interrupt_isSet) {
        obj.insert(QString("allowInterrupt"), ::OpenAPI::toJsonValue(m_allow_interrupt));
    }
    return obj;
}

QList OAIStillWaitingResponseSpecification::getMessageGroups() const {
    return m_message_groups;
}
void OAIStillWaitingResponseSpecification::setMessageGroups(const QList &message_groups) {
    m_message_groups = message_groups;
    m_message_groups_isSet = true;
}

bool OAIStillWaitingResponseSpecification::is_message_groups_Set() const{
    return m_message_groups_isSet;
}

bool OAIStillWaitingResponseSpecification::is_message_groups_Valid() const{
    return m_message_groups_isValid;
}

qint32 OAIStillWaitingResponseSpecification::getFrequencyInSeconds() const {
    return m_frequency_in_seconds;
}
void OAIStillWaitingResponseSpecification::setFrequencyInSeconds(const qint32 &frequency_in_seconds) {
    m_frequency_in_seconds = frequency_in_seconds;
    m_frequency_in_seconds_isSet = true;
}

bool OAIStillWaitingResponseSpecification::is_frequency_in_seconds_Set() const{
    return m_frequency_in_seconds_isSet;
}

bool OAIStillWaitingResponseSpecification::is_frequency_in_seconds_Valid() const{
    return m_frequency_in_seconds_isValid;
}

qint32 OAIStillWaitingResponseSpecification::getTimeoutInSeconds() const {
    return m_timeout_in_seconds;
}
void OAIStillWaitingResponseSpecification::setTimeoutInSeconds(const qint32 &timeout_in_seconds) {
    m_timeout_in_seconds = timeout_in_seconds;
    m_timeout_in_seconds_isSet = true;
}

bool OAIStillWaitingResponseSpecification::is_timeout_in_seconds_Set() const{
    return m_timeout_in_seconds_isSet;
}

bool OAIStillWaitingResponseSpecification::is_timeout_in_seconds_Valid() const{
    return m_timeout_in_seconds_isValid;
}

bool OAIStillWaitingResponseSpecification::getAllowInterrupt() const {
    return m_allow_interrupt;
}
void OAIStillWaitingResponseSpecification::setAllowInterrupt(const bool &allow_interrupt) {
    m_allow_interrupt = allow_interrupt;
    m_allow_interrupt_isSet = true;
}

bool OAIStillWaitingResponseSpecification::is_allow_interrupt_Set() const{
    return m_allow_interrupt_isSet;
}

bool OAIStillWaitingResponseSpecification::is_allow_interrupt_Valid() const{
    return m_allow_interrupt_isValid;
}

bool OAIStillWaitingResponseSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_interrupt_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStillWaitingResponseSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_groups_isValid && m_frequency_in_seconds_isValid && m_timeout_in_seconds_isValid && true;
}

} // namespace OpenAPI
