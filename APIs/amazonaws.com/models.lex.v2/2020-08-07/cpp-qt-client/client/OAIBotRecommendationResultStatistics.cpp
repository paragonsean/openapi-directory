/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBotRecommendationResultStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBotRecommendationResultStatistics::OAIBotRecommendationResultStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBotRecommendationResultStatistics::OAIBotRecommendationResultStatistics() {
    this->initializeModel();
}

OAIBotRecommendationResultStatistics::~OAIBotRecommendationResultStatistics() {}

void OAIBotRecommendationResultStatistics::initializeModel() {

    m_intents_isSet = false;
    m_intents_isValid = false;

    m_slot_types_isSet = false;
    m_slot_types_isValid = false;
}

void OAIBotRecommendationResultStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBotRecommendationResultStatistics::fromJsonObject(QJsonObject json) {

    m_intents_isValid = ::OpenAPI::fromJsonValue(m_intents, json[QString("intents")]);
    m_intents_isSet = !json[QString("intents")].isNull() && m_intents_isValid;

    m_slot_types_isValid = ::OpenAPI::fromJsonValue(m_slot_types, json[QString("slotTypes")]);
    m_slot_types_isSet = !json[QString("slotTypes")].isNull() && m_slot_types_isValid;
}

QString OAIBotRecommendationResultStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBotRecommendationResultStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_intents.isSet()) {
        obj.insert(QString("intents"), ::OpenAPI::toJsonValue(m_intents));
    }
    if (m_slot_types.isSet()) {
        obj.insert(QString("slotTypes"), ::OpenAPI::toJsonValue(m_slot_types));
    }
    return obj;
}

OAIBotRecommendationResultStatistics_intents OAIBotRecommendationResultStatistics::getIntents() const {
    return m_intents;
}
void OAIBotRecommendationResultStatistics::setIntents(const OAIBotRecommendationResultStatistics_intents &intents) {
    m_intents = intents;
    m_intents_isSet = true;
}

bool OAIBotRecommendationResultStatistics::is_intents_Set() const{
    return m_intents_isSet;
}

bool OAIBotRecommendationResultStatistics::is_intents_Valid() const{
    return m_intents_isValid;
}

OAIBotRecommendationResultStatistics_slotTypes OAIBotRecommendationResultStatistics::getSlotTypes() const {
    return m_slot_types;
}
void OAIBotRecommendationResultStatistics::setSlotTypes(const OAIBotRecommendationResultStatistics_slotTypes &slot_types) {
    m_slot_types = slot_types;
    m_slot_types_isSet = true;
}

bool OAIBotRecommendationResultStatistics::is_slot_types_Set() const{
    return m_slot_types_isSet;
}

bool OAIBotRecommendationResultStatistics::is_slot_types_Valid() const{
    return m_slot_types_isValid;
}

bool OAIBotRecommendationResultStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_intents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBotRecommendationResultStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
