/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors() {
    this->initializeModel();
}

OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::~OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors() {}

void OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::initializeModel() {

    m_intent_discrepancies_isSet = false;
    m_intent_discrepancies_isValid = false;

    m_slot_discrepancies_isSet = false;
    m_slot_discrepancies_isValid = false;
}

void OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::fromJsonObject(QJsonObject json) {

    m_intent_discrepancies_isValid = ::OpenAPI::fromJsonValue(m_intent_discrepancies, json[QString("intentDiscrepancies")]);
    m_intent_discrepancies_isSet = !json[QString("intentDiscrepancies")].isNull() && m_intent_discrepancies_isValid;

    m_slot_discrepancies_isValid = ::OpenAPI::fromJsonValue(m_slot_discrepancies, json[QString("slotDiscrepancies")]);
    m_slot_discrepancies_isSet = !json[QString("slotDiscrepancies")].isNull() && m_slot_discrepancies_isValid;
}

QString OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::asJsonObject() const {
    QJsonObject obj;
    if (m_intent_discrepancies.isSet()) {
        obj.insert(QString("intentDiscrepancies"), ::OpenAPI::toJsonValue(m_intent_discrepancies));
    }
    if (m_slot_discrepancies.isSet()) {
        obj.insert(QString("slotDiscrepancies"), ::OpenAPI::toJsonValue(m_slot_discrepancies));
    }
    return obj;
}

QList OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::getIntentDiscrepancies() const {
    return m_intent_discrepancies;
}
void OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::setIntentDiscrepancies(const QList &intent_discrepancies) {
    m_intent_discrepancies = intent_discrepancies;
    m_intent_discrepancies_isSet = true;
}

bool OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::is_intent_discrepancies_Set() const{
    return m_intent_discrepancies_isSet;
}

bool OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::is_intent_discrepancies_Valid() const{
    return m_intent_discrepancies_isValid;
}

QList OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::getSlotDiscrepancies() const {
    return m_slot_discrepancies;
}
void OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::setSlotDiscrepancies(const QList &slot_discrepancies) {
    m_slot_discrepancies = slot_discrepancies;
    m_slot_discrepancies_isSet = true;
}

bool OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::is_slot_discrepancies_Set() const{
    return m_slot_discrepancies_isSet;
}

bool OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::is_slot_discrepancies_Valid() const{
    return m_slot_discrepancies_isValid;
}

bool OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_intent_discrepancies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_discrepancies.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_intent_discrepancies_isValid && m_slot_discrepancies_isValid && true;
}

} // namespace OpenAPI
