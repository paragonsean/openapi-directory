/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartBotRecommendation_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartBotRecommendation_request::OAIStartBotRecommendation_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartBotRecommendation_request::OAIStartBotRecommendation_request() {
    this->initializeModel();
}

OAIStartBotRecommendation_request::~OAIStartBotRecommendation_request() {}

void OAIStartBotRecommendation_request::initializeModel() {

    m_transcript_source_setting_isSet = false;
    m_transcript_source_setting_isValid = false;

    m_encryption_setting_isSet = false;
    m_encryption_setting_isValid = false;
}

void OAIStartBotRecommendation_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartBotRecommendation_request::fromJsonObject(QJsonObject json) {

    m_transcript_source_setting_isValid = ::OpenAPI::fromJsonValue(m_transcript_source_setting, json[QString("transcriptSourceSetting")]);
    m_transcript_source_setting_isSet = !json[QString("transcriptSourceSetting")].isNull() && m_transcript_source_setting_isValid;

    m_encryption_setting_isValid = ::OpenAPI::fromJsonValue(m_encryption_setting, json[QString("encryptionSetting")]);
    m_encryption_setting_isSet = !json[QString("encryptionSetting")].isNull() && m_encryption_setting_isValid;
}

QString OAIStartBotRecommendation_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartBotRecommendation_request::asJsonObject() const {
    QJsonObject obj;
    if (m_transcript_source_setting.isSet()) {
        obj.insert(QString("transcriptSourceSetting"), ::OpenAPI::toJsonValue(m_transcript_source_setting));
    }
    if (m_encryption_setting.isSet()) {
        obj.insert(QString("encryptionSetting"), ::OpenAPI::toJsonValue(m_encryption_setting));
    }
    return obj;
}

OAIStartBotRecommendation_request_transcriptSourceSetting OAIStartBotRecommendation_request::getTranscriptSourceSetting() const {
    return m_transcript_source_setting;
}
void OAIStartBotRecommendation_request::setTranscriptSourceSetting(const OAIStartBotRecommendation_request_transcriptSourceSetting &transcript_source_setting) {
    m_transcript_source_setting = transcript_source_setting;
    m_transcript_source_setting_isSet = true;
}

bool OAIStartBotRecommendation_request::is_transcript_source_setting_Set() const{
    return m_transcript_source_setting_isSet;
}

bool OAIStartBotRecommendation_request::is_transcript_source_setting_Valid() const{
    return m_transcript_source_setting_isValid;
}

OAIUpdateBotRecommendation_request_encryptionSetting OAIStartBotRecommendation_request::getEncryptionSetting() const {
    return m_encryption_setting;
}
void OAIStartBotRecommendation_request::setEncryptionSetting(const OAIUpdateBotRecommendation_request_encryptionSetting &encryption_setting) {
    m_encryption_setting = encryption_setting;
    m_encryption_setting_isSet = true;
}

bool OAIStartBotRecommendation_request::is_encryption_setting_Set() const{
    return m_encryption_setting_isSet;
}

bool OAIStartBotRecommendation_request::is_encryption_setting_Valid() const{
    return m_encryption_setting_isValid;
}

bool OAIStartBotRecommendation_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transcript_source_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartBotRecommendation_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transcript_source_setting_isValid && true;
}

} // namespace OpenAPI
