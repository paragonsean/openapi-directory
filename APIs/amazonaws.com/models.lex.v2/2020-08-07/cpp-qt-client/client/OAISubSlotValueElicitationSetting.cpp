/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubSlotValueElicitationSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubSlotValueElicitationSetting::OAISubSlotValueElicitationSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubSlotValueElicitationSetting::OAISubSlotValueElicitationSetting() {
    this->initializeModel();
}

OAISubSlotValueElicitationSetting::~OAISubSlotValueElicitationSetting() {}

void OAISubSlotValueElicitationSetting::initializeModel() {

    m_default_value_specification_isSet = false;
    m_default_value_specification_isValid = false;

    m_prompt_specification_isSet = false;
    m_prompt_specification_isValid = false;

    m_sample_utterances_isSet = false;
    m_sample_utterances_isValid = false;

    m_wait_and_continue_specification_isSet = false;
    m_wait_and_continue_specification_isValid = false;
}

void OAISubSlotValueElicitationSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubSlotValueElicitationSetting::fromJsonObject(QJsonObject json) {

    m_default_value_specification_isValid = ::OpenAPI::fromJsonValue(m_default_value_specification, json[QString("defaultValueSpecification")]);
    m_default_value_specification_isSet = !json[QString("defaultValueSpecification")].isNull() && m_default_value_specification_isValid;

    m_prompt_specification_isValid = ::OpenAPI::fromJsonValue(m_prompt_specification, json[QString("promptSpecification")]);
    m_prompt_specification_isSet = !json[QString("promptSpecification")].isNull() && m_prompt_specification_isValid;

    m_sample_utterances_isValid = ::OpenAPI::fromJsonValue(m_sample_utterances, json[QString("sampleUtterances")]);
    m_sample_utterances_isSet = !json[QString("sampleUtterances")].isNull() && m_sample_utterances_isValid;

    m_wait_and_continue_specification_isValid = ::OpenAPI::fromJsonValue(m_wait_and_continue_specification, json[QString("waitAndContinueSpecification")]);
    m_wait_and_continue_specification_isSet = !json[QString("waitAndContinueSpecification")].isNull() && m_wait_and_continue_specification_isValid;
}

QString OAISubSlotValueElicitationSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubSlotValueElicitationSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_default_value_specification.isSet()) {
        obj.insert(QString("defaultValueSpecification"), ::OpenAPI::toJsonValue(m_default_value_specification));
    }
    if (m_prompt_specification.isSet()) {
        obj.insert(QString("promptSpecification"), ::OpenAPI::toJsonValue(m_prompt_specification));
    }
    if (m_sample_utterances.isSet()) {
        obj.insert(QString("sampleUtterances"), ::OpenAPI::toJsonValue(m_sample_utterances));
    }
    if (m_wait_and_continue_specification.isSet()) {
        obj.insert(QString("waitAndContinueSpecification"), ::OpenAPI::toJsonValue(m_wait_and_continue_specification));
    }
    return obj;
}

OAISlotDefaultValueSpecification OAISubSlotValueElicitationSetting::getDefaultValueSpecification() const {
    return m_default_value_specification;
}
void OAISubSlotValueElicitationSetting::setDefaultValueSpecification(const OAISlotDefaultValueSpecification &default_value_specification) {
    m_default_value_specification = default_value_specification;
    m_default_value_specification_isSet = true;
}

bool OAISubSlotValueElicitationSetting::is_default_value_specification_Set() const{
    return m_default_value_specification_isSet;
}

bool OAISubSlotValueElicitationSetting::is_default_value_specification_Valid() const{
    return m_default_value_specification_isValid;
}

OAIPromptSpecification OAISubSlotValueElicitationSetting::getPromptSpecification() const {
    return m_prompt_specification;
}
void OAISubSlotValueElicitationSetting::setPromptSpecification(const OAIPromptSpecification &prompt_specification) {
    m_prompt_specification = prompt_specification;
    m_prompt_specification_isSet = true;
}

bool OAISubSlotValueElicitationSetting::is_prompt_specification_Set() const{
    return m_prompt_specification_isSet;
}

bool OAISubSlotValueElicitationSetting::is_prompt_specification_Valid() const{
    return m_prompt_specification_isValid;
}

QList OAISubSlotValueElicitationSetting::getSampleUtterances() const {
    return m_sample_utterances;
}
void OAISubSlotValueElicitationSetting::setSampleUtterances(const QList &sample_utterances) {
    m_sample_utterances = sample_utterances;
    m_sample_utterances_isSet = true;
}

bool OAISubSlotValueElicitationSetting::is_sample_utterances_Set() const{
    return m_sample_utterances_isSet;
}

bool OAISubSlotValueElicitationSetting::is_sample_utterances_Valid() const{
    return m_sample_utterances_isValid;
}

OAIWaitAndContinueSpecification OAISubSlotValueElicitationSetting::getWaitAndContinueSpecification() const {
    return m_wait_and_continue_specification;
}
void OAISubSlotValueElicitationSetting::setWaitAndContinueSpecification(const OAIWaitAndContinueSpecification &wait_and_continue_specification) {
    m_wait_and_continue_specification = wait_and_continue_specification;
    m_wait_and_continue_specification_isSet = true;
}

bool OAISubSlotValueElicitationSetting::is_wait_and_continue_specification_Set() const{
    return m_wait_and_continue_specification_isSet;
}

bool OAISubSlotValueElicitationSetting::is_wait_and_continue_specification_Valid() const{
    return m_wait_and_continue_specification_isValid;
}

bool OAISubSlotValueElicitationSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_value_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompt_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_utterances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_and_continue_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubSlotValueElicitationSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_prompt_specification_isValid && true;
}

} // namespace OpenAPI
