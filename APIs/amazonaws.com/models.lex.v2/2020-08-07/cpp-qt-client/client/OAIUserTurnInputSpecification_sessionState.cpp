/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserTurnInputSpecification_sessionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserTurnInputSpecification_sessionState::OAIUserTurnInputSpecification_sessionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserTurnInputSpecification_sessionState::OAIUserTurnInputSpecification_sessionState() {
    this->initializeModel();
}

OAIUserTurnInputSpecification_sessionState::~OAIUserTurnInputSpecification_sessionState() {}

void OAIUserTurnInputSpecification_sessionState::initializeModel() {

    m_session_attributes_isSet = false;
    m_session_attributes_isValid = false;

    m_active_contexts_isSet = false;
    m_active_contexts_isValid = false;

    m_runtime_hints_isSet = false;
    m_runtime_hints_isValid = false;
}

void OAIUserTurnInputSpecification_sessionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserTurnInputSpecification_sessionState::fromJsonObject(QJsonObject json) {

    m_session_attributes_isValid = ::OpenAPI::fromJsonValue(m_session_attributes, json[QString("sessionAttributes")]);
    m_session_attributes_isSet = !json[QString("sessionAttributes")].isNull() && m_session_attributes_isValid;

    m_active_contexts_isValid = ::OpenAPI::fromJsonValue(m_active_contexts, json[QString("activeContexts")]);
    m_active_contexts_isSet = !json[QString("activeContexts")].isNull() && m_active_contexts_isValid;

    m_runtime_hints_isValid = ::OpenAPI::fromJsonValue(m_runtime_hints, json[QString("runtimeHints")]);
    m_runtime_hints_isSet = !json[QString("runtimeHints")].isNull() && m_runtime_hints_isValid;
}

QString OAIUserTurnInputSpecification_sessionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserTurnInputSpecification_sessionState::asJsonObject() const {
    QJsonObject obj;
    if (m_session_attributes.isSet()) {
        obj.insert(QString("sessionAttributes"), ::OpenAPI::toJsonValue(m_session_attributes));
    }
    if (m_active_contexts.isSet()) {
        obj.insert(QString("activeContexts"), ::OpenAPI::toJsonValue(m_active_contexts));
    }
    if (m_runtime_hints.isSet()) {
        obj.insert(QString("runtimeHints"), ::OpenAPI::toJsonValue(m_runtime_hints));
    }
    return obj;
}

QMap OAIUserTurnInputSpecification_sessionState::getSessionAttributes() const {
    return m_session_attributes;
}
void OAIUserTurnInputSpecification_sessionState::setSessionAttributes(const QMap &session_attributes) {
    m_session_attributes = session_attributes;
    m_session_attributes_isSet = true;
}

bool OAIUserTurnInputSpecification_sessionState::is_session_attributes_Set() const{
    return m_session_attributes_isSet;
}

bool OAIUserTurnInputSpecification_sessionState::is_session_attributes_Valid() const{
    return m_session_attributes_isValid;
}

QList OAIUserTurnInputSpecification_sessionState::getActiveContexts() const {
    return m_active_contexts;
}
void OAIUserTurnInputSpecification_sessionState::setActiveContexts(const QList &active_contexts) {
    m_active_contexts = active_contexts;
    m_active_contexts_isSet = true;
}

bool OAIUserTurnInputSpecification_sessionState::is_active_contexts_Set() const{
    return m_active_contexts_isSet;
}

bool OAIUserTurnInputSpecification_sessionState::is_active_contexts_Valid() const{
    return m_active_contexts_isValid;
}

OAIInputSessionStateSpecification_runtimeHints OAIUserTurnInputSpecification_sessionState::getRuntimeHints() const {
    return m_runtime_hints;
}
void OAIUserTurnInputSpecification_sessionState::setRuntimeHints(const OAIInputSessionStateSpecification_runtimeHints &runtime_hints) {
    m_runtime_hints = runtime_hints;
    m_runtime_hints_isSet = true;
}

bool OAIUserTurnInputSpecification_sessionState::is_runtime_hints_Set() const{
    return m_runtime_hints_isSet;
}

bool OAIUserTurnInputSpecification_sessionState::is_runtime_hints_Valid() const{
    return m_runtime_hints_isValid;
}

bool OAIUserTurnInputSpecification_sessionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_contexts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_hints.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserTurnInputSpecification_sessionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
