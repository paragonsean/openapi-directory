/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBotVersionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBotVersionSummary::OAIBotVersionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBotVersionSummary::OAIBotVersionSummary() {
    this->initializeModel();
}

OAIBotVersionSummary::~OAIBotVersionSummary() {}

void OAIBotVersionSummary::initializeModel() {

    m_bot_name_isSet = false;
    m_bot_name_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_bot_status_isSet = false;
    m_bot_status_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;
}

void OAIBotVersionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBotVersionSummary::fromJsonObject(QJsonObject json) {

    m_bot_name_isValid = ::OpenAPI::fromJsonValue(m_bot_name, json[QString("botName")]);
    m_bot_name_isSet = !json[QString("botName")].isNull() && m_bot_name_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_bot_status_isValid = ::OpenAPI::fromJsonValue(m_bot_status, json[QString("botStatus")]);
    m_bot_status_isSet = !json[QString("botStatus")].isNull() && m_bot_status_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;
}

QString OAIBotVersionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBotVersionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_name_isSet) {
        obj.insert(QString("botName"), ::OpenAPI::toJsonValue(m_bot_name));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_bot_status.isSet()) {
        obj.insert(QString("botStatus"), ::OpenAPI::toJsonValue(m_bot_status));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    return obj;
}

QString OAIBotVersionSummary::getBotName() const {
    return m_bot_name;
}
void OAIBotVersionSummary::setBotName(const QString &bot_name) {
    m_bot_name = bot_name;
    m_bot_name_isSet = true;
}

bool OAIBotVersionSummary::is_bot_name_Set() const{
    return m_bot_name_isSet;
}

bool OAIBotVersionSummary::is_bot_name_Valid() const{
    return m_bot_name_isValid;
}

QString OAIBotVersionSummary::getBotVersion() const {
    return m_bot_version;
}
void OAIBotVersionSummary::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAIBotVersionSummary::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAIBotVersionSummary::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QString OAIBotVersionSummary::getDescription() const {
    return m_description;
}
void OAIBotVersionSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBotVersionSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBotVersionSummary::is_description_Valid() const{
    return m_description_isValid;
}

OAIBotStatus OAIBotVersionSummary::getBotStatus() const {
    return m_bot_status;
}
void OAIBotVersionSummary::setBotStatus(const OAIBotStatus &bot_status) {
    m_bot_status = bot_status;
    m_bot_status_isSet = true;
}

bool OAIBotVersionSummary::is_bot_status_Set() const{
    return m_bot_status_isSet;
}

bool OAIBotVersionSummary::is_bot_status_Valid() const{
    return m_bot_status_isValid;
}

QDateTime OAIBotVersionSummary::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIBotVersionSummary::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIBotVersionSummary::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIBotVersionSummary::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

bool OAIBotVersionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBotVersionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
