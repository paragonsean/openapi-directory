/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlotSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlotSummary::OAISlotSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlotSummary::OAISlotSummary() {
    this->initializeModel();
}

OAISlotSummary::~OAISlotSummary() {}

void OAISlotSummary::initializeModel() {

    m_slot_id_isSet = false;
    m_slot_id_isValid = false;

    m_slot_name_isSet = false;
    m_slot_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_slot_constraint_isSet = false;
    m_slot_constraint_isValid = false;

    m_slot_type_id_isSet = false;
    m_slot_type_id_isValid = false;

    m_value_elicitation_prompt_specification_isSet = false;
    m_value_elicitation_prompt_specification_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;
}

void OAISlotSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlotSummary::fromJsonObject(QJsonObject json) {

    m_slot_id_isValid = ::OpenAPI::fromJsonValue(m_slot_id, json[QString("slotId")]);
    m_slot_id_isSet = !json[QString("slotId")].isNull() && m_slot_id_isValid;

    m_slot_name_isValid = ::OpenAPI::fromJsonValue(m_slot_name, json[QString("slotName")]);
    m_slot_name_isSet = !json[QString("slotName")].isNull() && m_slot_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_slot_constraint_isValid = ::OpenAPI::fromJsonValue(m_slot_constraint, json[QString("slotConstraint")]);
    m_slot_constraint_isSet = !json[QString("slotConstraint")].isNull() && m_slot_constraint_isValid;

    m_slot_type_id_isValid = ::OpenAPI::fromJsonValue(m_slot_type_id, json[QString("slotTypeId")]);
    m_slot_type_id_isSet = !json[QString("slotTypeId")].isNull() && m_slot_type_id_isValid;

    m_value_elicitation_prompt_specification_isValid = ::OpenAPI::fromJsonValue(m_value_elicitation_prompt_specification, json[QString("valueElicitationPromptSpecification")]);
    m_value_elicitation_prompt_specification_isSet = !json[QString("valueElicitationPromptSpecification")].isNull() && m_value_elicitation_prompt_specification_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;
}

QString OAISlotSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlotSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_slot_id_isSet) {
        obj.insert(QString("slotId"), ::OpenAPI::toJsonValue(m_slot_id));
    }
    if (m_slot_name_isSet) {
        obj.insert(QString("slotName"), ::OpenAPI::toJsonValue(m_slot_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_slot_constraint.isSet()) {
        obj.insert(QString("slotConstraint"), ::OpenAPI::toJsonValue(m_slot_constraint));
    }
    if (m_slot_type_id_isSet) {
        obj.insert(QString("slotTypeId"), ::OpenAPI::toJsonValue(m_slot_type_id));
    }
    if (m_value_elicitation_prompt_specification.isSet()) {
        obj.insert(QString("valueElicitationPromptSpecification"), ::OpenAPI::toJsonValue(m_value_elicitation_prompt_specification));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    return obj;
}

QString OAISlotSummary::getSlotId() const {
    return m_slot_id;
}
void OAISlotSummary::setSlotId(const QString &slot_id) {
    m_slot_id = slot_id;
    m_slot_id_isSet = true;
}

bool OAISlotSummary::is_slot_id_Set() const{
    return m_slot_id_isSet;
}

bool OAISlotSummary::is_slot_id_Valid() const{
    return m_slot_id_isValid;
}

QString OAISlotSummary::getSlotName() const {
    return m_slot_name;
}
void OAISlotSummary::setSlotName(const QString &slot_name) {
    m_slot_name = slot_name;
    m_slot_name_isSet = true;
}

bool OAISlotSummary::is_slot_name_Set() const{
    return m_slot_name_isSet;
}

bool OAISlotSummary::is_slot_name_Valid() const{
    return m_slot_name_isValid;
}

QString OAISlotSummary::getDescription() const {
    return m_description;
}
void OAISlotSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISlotSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAISlotSummary::is_description_Valid() const{
    return m_description_isValid;
}

OAISlotConstraint OAISlotSummary::getSlotConstraint() const {
    return m_slot_constraint;
}
void OAISlotSummary::setSlotConstraint(const OAISlotConstraint &slot_constraint) {
    m_slot_constraint = slot_constraint;
    m_slot_constraint_isSet = true;
}

bool OAISlotSummary::is_slot_constraint_Set() const{
    return m_slot_constraint_isSet;
}

bool OAISlotSummary::is_slot_constraint_Valid() const{
    return m_slot_constraint_isValid;
}

QString OAISlotSummary::getSlotTypeId() const {
    return m_slot_type_id;
}
void OAISlotSummary::setSlotTypeId(const QString &slot_type_id) {
    m_slot_type_id = slot_type_id;
    m_slot_type_id_isSet = true;
}

bool OAISlotSummary::is_slot_type_id_Set() const{
    return m_slot_type_id_isSet;
}

bool OAISlotSummary::is_slot_type_id_Valid() const{
    return m_slot_type_id_isValid;
}

OAISlotSummary_valueElicitationPromptSpecification OAISlotSummary::getValueElicitationPromptSpecification() const {
    return m_value_elicitation_prompt_specification;
}
void OAISlotSummary::setValueElicitationPromptSpecification(const OAISlotSummary_valueElicitationPromptSpecification &value_elicitation_prompt_specification) {
    m_value_elicitation_prompt_specification = value_elicitation_prompt_specification;
    m_value_elicitation_prompt_specification_isSet = true;
}

bool OAISlotSummary::is_value_elicitation_prompt_specification_Set() const{
    return m_value_elicitation_prompt_specification_isSet;
}

bool OAISlotSummary::is_value_elicitation_prompt_specification_Valid() const{
    return m_value_elicitation_prompt_specification_isValid;
}

QDateTime OAISlotSummary::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAISlotSummary::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAISlotSummary::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAISlotSummary::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

bool OAISlotSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_slot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_elicitation_prompt_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlotSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
