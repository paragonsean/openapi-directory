/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBotAliasSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBotAliasSummary::OAIBotAliasSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBotAliasSummary::OAIBotAliasSummary() {
    this->initializeModel();
}

OAIBotAliasSummary::~OAIBotAliasSummary() {}

void OAIBotAliasSummary::initializeModel() {

    m_bot_alias_id_isSet = false;
    m_bot_alias_id_isValid = false;

    m_bot_alias_name_isSet = false;
    m_bot_alias_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_bot_alias_status_isSet = false;
    m_bot_alias_status_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;
}

void OAIBotAliasSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBotAliasSummary::fromJsonObject(QJsonObject json) {

    m_bot_alias_id_isValid = ::OpenAPI::fromJsonValue(m_bot_alias_id, json[QString("botAliasId")]);
    m_bot_alias_id_isSet = !json[QString("botAliasId")].isNull() && m_bot_alias_id_isValid;

    m_bot_alias_name_isValid = ::OpenAPI::fromJsonValue(m_bot_alias_name, json[QString("botAliasName")]);
    m_bot_alias_name_isSet = !json[QString("botAliasName")].isNull() && m_bot_alias_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_bot_alias_status_isValid = ::OpenAPI::fromJsonValue(m_bot_alias_status, json[QString("botAliasStatus")]);
    m_bot_alias_status_isSet = !json[QString("botAliasStatus")].isNull() && m_bot_alias_status_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;
}

QString OAIBotAliasSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBotAliasSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_alias_id_isSet) {
        obj.insert(QString("botAliasId"), ::OpenAPI::toJsonValue(m_bot_alias_id));
    }
    if (m_bot_alias_name_isSet) {
        obj.insert(QString("botAliasName"), ::OpenAPI::toJsonValue(m_bot_alias_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_bot_alias_status.isSet()) {
        obj.insert(QString("botAliasStatus"), ::OpenAPI::toJsonValue(m_bot_alias_status));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    return obj;
}

QString OAIBotAliasSummary::getBotAliasId() const {
    return m_bot_alias_id;
}
void OAIBotAliasSummary::setBotAliasId(const QString &bot_alias_id) {
    m_bot_alias_id = bot_alias_id;
    m_bot_alias_id_isSet = true;
}

bool OAIBotAliasSummary::is_bot_alias_id_Set() const{
    return m_bot_alias_id_isSet;
}

bool OAIBotAliasSummary::is_bot_alias_id_Valid() const{
    return m_bot_alias_id_isValid;
}

QString OAIBotAliasSummary::getBotAliasName() const {
    return m_bot_alias_name;
}
void OAIBotAliasSummary::setBotAliasName(const QString &bot_alias_name) {
    m_bot_alias_name = bot_alias_name;
    m_bot_alias_name_isSet = true;
}

bool OAIBotAliasSummary::is_bot_alias_name_Set() const{
    return m_bot_alias_name_isSet;
}

bool OAIBotAliasSummary::is_bot_alias_name_Valid() const{
    return m_bot_alias_name_isValid;
}

QString OAIBotAliasSummary::getDescription() const {
    return m_description;
}
void OAIBotAliasSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBotAliasSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBotAliasSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBotAliasSummary::getBotVersion() const {
    return m_bot_version;
}
void OAIBotAliasSummary::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAIBotAliasSummary::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAIBotAliasSummary::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

OAIBotAliasStatus OAIBotAliasSummary::getBotAliasStatus() const {
    return m_bot_alias_status;
}
void OAIBotAliasSummary::setBotAliasStatus(const OAIBotAliasStatus &bot_alias_status) {
    m_bot_alias_status = bot_alias_status;
    m_bot_alias_status_isSet = true;
}

bool OAIBotAliasSummary::is_bot_alias_status_Set() const{
    return m_bot_alias_status_isSet;
}

bool OAIBotAliasSummary::is_bot_alias_status_Valid() const{
    return m_bot_alias_status_isValid;
}

QDateTime OAIBotAliasSummary::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIBotAliasSummary::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIBotAliasSummary::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIBotAliasSummary::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

QDateTime OAIBotAliasSummary::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIBotAliasSummary::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIBotAliasSummary::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIBotAliasSummary::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

bool OAIBotAliasSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_alias_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_alias_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_alias_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBotAliasSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
