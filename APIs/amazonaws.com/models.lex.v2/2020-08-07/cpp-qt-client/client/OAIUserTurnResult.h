/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserTurnResult.h
 *
 * Contains the results for the user turn by the test execution.
 */

#ifndef OAIUserTurnResult_H
#define OAIUserTurnResult_H

#include <QJsonObject>

#include "OAIExecutionErrorDetails.h"
#include "OAITestResultMatchStatus.h"
#include "OAIUserTurnResult_actualOutput.h"
#include "OAIUserTurnResult_conversationLevelResult.h"
#include "OAIUserTurnResult_expectedOutput.h"
#include "OAIUserTurnResult_input.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUserTurnResult_input;
class OAIUserTurnResult_expectedOutput;
class OAIUserTurnResult_actualOutput;
class OAIExecutionErrorDetails;
class OAIUserTurnResult_conversationLevelResult;

class OAIUserTurnResult : public OAIObject {
public:
    OAIUserTurnResult();
    OAIUserTurnResult(QString json);
    ~OAIUserTurnResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIUserTurnResult_input getInput() const;
    void setInput(const OAIUserTurnResult_input &input);
    bool is_input_Set() const;
    bool is_input_Valid() const;

    OAIUserTurnResult_expectedOutput getExpectedOutput() const;
    void setExpectedOutput(const OAIUserTurnResult_expectedOutput &expected_output);
    bool is_expected_output_Set() const;
    bool is_expected_output_Valid() const;

    OAIUserTurnResult_actualOutput getActualOutput() const;
    void setActualOutput(const OAIUserTurnResult_actualOutput &actual_output);
    bool is_actual_output_Set() const;
    bool is_actual_output_Valid() const;

    OAIExecutionErrorDetails getErrorDetails() const;
    void setErrorDetails(const OAIExecutionErrorDetails &error_details);
    bool is_error_details_Set() const;
    bool is_error_details_Valid() const;

    OAITestResultMatchStatus getEndToEndResult() const;
    void setEndToEndResult(const OAITestResultMatchStatus &end_to_end_result);
    bool is_end_to_end_result_Set() const;
    bool is_end_to_end_result_Valid() const;

    OAITestResultMatchStatus getIntentMatchResult() const;
    void setIntentMatchResult(const OAITestResultMatchStatus &intent_match_result);
    bool is_intent_match_result_Set() const;
    bool is_intent_match_result_Valid() const;

    OAITestResultMatchStatus getSlotMatchResult() const;
    void setSlotMatchResult(const OAITestResultMatchStatus &slot_match_result);
    bool is_slot_match_result_Set() const;
    bool is_slot_match_result_Valid() const;

    OAITestResultMatchStatus getSpeechTranscriptionResult() const;
    void setSpeechTranscriptionResult(const OAITestResultMatchStatus &speech_transcription_result);
    bool is_speech_transcription_result_Set() const;
    bool is_speech_transcription_result_Valid() const;

    OAIUserTurnResult_conversationLevelResult getConversationLevelResult() const;
    void setConversationLevelResult(const OAIUserTurnResult_conversationLevelResult &conversation_level_result);
    bool is_conversation_level_result_Set() const;
    bool is_conversation_level_result_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIUserTurnResult_input m_input;
    bool m_input_isSet;
    bool m_input_isValid;

    OAIUserTurnResult_expectedOutput m_expected_output;
    bool m_expected_output_isSet;
    bool m_expected_output_isValid;

    OAIUserTurnResult_actualOutput m_actual_output;
    bool m_actual_output_isSet;
    bool m_actual_output_isValid;

    OAIExecutionErrorDetails m_error_details;
    bool m_error_details_isSet;
    bool m_error_details_isValid;

    OAITestResultMatchStatus m_end_to_end_result;
    bool m_end_to_end_result_isSet;
    bool m_end_to_end_result_isValid;

    OAITestResultMatchStatus m_intent_match_result;
    bool m_intent_match_result_isSet;
    bool m_intent_match_result_isValid;

    OAITestResultMatchStatus m_slot_match_result;
    bool m_slot_match_result_isSet;
    bool m_slot_match_result_isValid;

    OAITestResultMatchStatus m_speech_transcription_result;
    bool m_speech_transcription_result_isSet;
    bool m_speech_transcription_result_isValid;

    OAIUserTurnResult_conversationLevelResult m_conversation_level_result;
    bool m_conversation_level_result_isSet;
    bool m_conversation_level_result_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserTurnResult)

#endif // OAIUserTurnResult_H
