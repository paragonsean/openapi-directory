/**
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSlotTypeRequest_valueSelectionSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSlotTypeRequest_valueSelectionSetting::OAICreateSlotTypeRequest_valueSelectionSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSlotTypeRequest_valueSelectionSetting::OAICreateSlotTypeRequest_valueSelectionSetting() {
    this->initializeModel();
}

OAICreateSlotTypeRequest_valueSelectionSetting::~OAICreateSlotTypeRequest_valueSelectionSetting() {}

void OAICreateSlotTypeRequest_valueSelectionSetting::initializeModel() {

    m_resolution_strategy_isSet = false;
    m_resolution_strategy_isValid = false;

    m_regex_filter_isSet = false;
    m_regex_filter_isValid = false;

    m_advanced_recognition_setting_isSet = false;
    m_advanced_recognition_setting_isValid = false;
}

void OAICreateSlotTypeRequest_valueSelectionSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSlotTypeRequest_valueSelectionSetting::fromJsonObject(QJsonObject json) {

    m_resolution_strategy_isValid = ::OpenAPI::fromJsonValue(m_resolution_strategy, json[QString("resolutionStrategy")]);
    m_resolution_strategy_isSet = !json[QString("resolutionStrategy")].isNull() && m_resolution_strategy_isValid;

    m_regex_filter_isValid = ::OpenAPI::fromJsonValue(m_regex_filter, json[QString("regexFilter")]);
    m_regex_filter_isSet = !json[QString("regexFilter")].isNull() && m_regex_filter_isValid;

    m_advanced_recognition_setting_isValid = ::OpenAPI::fromJsonValue(m_advanced_recognition_setting, json[QString("advancedRecognitionSetting")]);
    m_advanced_recognition_setting_isSet = !json[QString("advancedRecognitionSetting")].isNull() && m_advanced_recognition_setting_isValid;
}

QString OAICreateSlotTypeRequest_valueSelectionSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSlotTypeRequest_valueSelectionSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_resolution_strategy.isSet()) {
        obj.insert(QString("resolutionStrategy"), ::OpenAPI::toJsonValue(m_resolution_strategy));
    }
    if (m_regex_filter.isSet()) {
        obj.insert(QString("regexFilter"), ::OpenAPI::toJsonValue(m_regex_filter));
    }
    if (m_advanced_recognition_setting.isSet()) {
        obj.insert(QString("advancedRecognitionSetting"), ::OpenAPI::toJsonValue(m_advanced_recognition_setting));
    }
    return obj;
}

OAISlotValueResolutionStrategy OAICreateSlotTypeRequest_valueSelectionSetting::getResolutionStrategy() const {
    return m_resolution_strategy;
}
void OAICreateSlotTypeRequest_valueSelectionSetting::setResolutionStrategy(const OAISlotValueResolutionStrategy &resolution_strategy) {
    m_resolution_strategy = resolution_strategy;
    m_resolution_strategy_isSet = true;
}

bool OAICreateSlotTypeRequest_valueSelectionSetting::is_resolution_strategy_Set() const{
    return m_resolution_strategy_isSet;
}

bool OAICreateSlotTypeRequest_valueSelectionSetting::is_resolution_strategy_Valid() const{
    return m_resolution_strategy_isValid;
}

OAICreateSlotType_request_valueSelectionSetting_regexFilter OAICreateSlotTypeRequest_valueSelectionSetting::getRegexFilter() const {
    return m_regex_filter;
}
void OAICreateSlotTypeRequest_valueSelectionSetting::setRegexFilter(const OAICreateSlotType_request_valueSelectionSetting_regexFilter &regex_filter) {
    m_regex_filter = regex_filter;
    m_regex_filter_isSet = true;
}

bool OAICreateSlotTypeRequest_valueSelectionSetting::is_regex_filter_Set() const{
    return m_regex_filter_isSet;
}

bool OAICreateSlotTypeRequest_valueSelectionSetting::is_regex_filter_Valid() const{
    return m_regex_filter_isValid;
}

OAICreateSlotType_request_valueSelectionSetting_advancedRecognitionSetting OAICreateSlotTypeRequest_valueSelectionSetting::getAdvancedRecognitionSetting() const {
    return m_advanced_recognition_setting;
}
void OAICreateSlotTypeRequest_valueSelectionSetting::setAdvancedRecognitionSetting(const OAICreateSlotType_request_valueSelectionSetting_advancedRecognitionSetting &advanced_recognition_setting) {
    m_advanced_recognition_setting = advanced_recognition_setting;
    m_advanced_recognition_setting_isSet = true;
}

bool OAICreateSlotTypeRequest_valueSelectionSetting::is_advanced_recognition_setting_Set() const{
    return m_advanced_recognition_setting_isSet;
}

bool OAICreateSlotTypeRequest_valueSelectionSetting::is_advanced_recognition_setting_Valid() const{
    return m_advanced_recognition_setting_isValid;
}

bool OAICreateSlotTypeRequest_valueSelectionSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resolution_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_recognition_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSlotTypeRequest_valueSelectionSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resolution_strategy_isValid && true;
}

} // namespace OpenAPI
