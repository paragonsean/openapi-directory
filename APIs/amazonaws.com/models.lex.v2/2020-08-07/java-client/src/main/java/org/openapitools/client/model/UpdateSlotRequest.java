/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateSlotRequestMultipleValuesSetting;
import org.openapitools.client.model.CreateSlotRequestObfuscationSetting;
import org.openapitools.client.model.CreateSlotRequestSubSlotSetting;
import org.openapitools.client.model.CreateSlotRequestValueElicitationSetting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSlotRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSlotRequest {
  public static final String SERIALIZED_NAME_SLOT_NAME = "slotName";
  @SerializedName(SERIALIZED_NAME_SLOT_NAME)
  private String slotName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SLOT_TYPE_ID = "slotTypeId";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_ID)
  private String slotTypeId;

  public static final String SERIALIZED_NAME_VALUE_ELICITATION_SETTING = "valueElicitationSetting";
  @SerializedName(SERIALIZED_NAME_VALUE_ELICITATION_SETTING)
  private CreateSlotRequestValueElicitationSetting valueElicitationSetting;

  public static final String SERIALIZED_NAME_OBFUSCATION_SETTING = "obfuscationSetting";
  @SerializedName(SERIALIZED_NAME_OBFUSCATION_SETTING)
  private CreateSlotRequestObfuscationSetting obfuscationSetting;

  public static final String SERIALIZED_NAME_MULTIPLE_VALUES_SETTING = "multipleValuesSetting";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_VALUES_SETTING)
  private CreateSlotRequestMultipleValuesSetting multipleValuesSetting;

  public static final String SERIALIZED_NAME_SUB_SLOT_SETTING = "subSlotSetting";
  @SerializedName(SERIALIZED_NAME_SUB_SLOT_SETTING)
  private CreateSlotRequestSubSlotSetting subSlotSetting;

  public UpdateSlotRequest() {
  }

  public UpdateSlotRequest slotName(String slotName) {
    this.slotName = slotName;
    return this;
  }

  /**
   * The new name for the slot.
   * @return slotName
   */
  @javax.annotation.Nonnull
  public String getSlotName() {
    return slotName;
  }

  public void setSlotName(String slotName) {
    this.slotName = slotName;
  }


  public UpdateSlotRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The new description for the slot.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateSlotRequest slotTypeId(String slotTypeId) {
    this.slotTypeId = slotTypeId;
    return this;
  }

  /**
   * The unique identifier of the new slot type to associate with this slot. 
   * @return slotTypeId
   */
  @javax.annotation.Nullable
  public String getSlotTypeId() {
    return slotTypeId;
  }

  public void setSlotTypeId(String slotTypeId) {
    this.slotTypeId = slotTypeId;
  }


  public UpdateSlotRequest valueElicitationSetting(CreateSlotRequestValueElicitationSetting valueElicitationSetting) {
    this.valueElicitationSetting = valueElicitationSetting;
    return this;
  }

  /**
   * Get valueElicitationSetting
   * @return valueElicitationSetting
   */
  @javax.annotation.Nonnull
  public CreateSlotRequestValueElicitationSetting getValueElicitationSetting() {
    return valueElicitationSetting;
  }

  public void setValueElicitationSetting(CreateSlotRequestValueElicitationSetting valueElicitationSetting) {
    this.valueElicitationSetting = valueElicitationSetting;
  }


  public UpdateSlotRequest obfuscationSetting(CreateSlotRequestObfuscationSetting obfuscationSetting) {
    this.obfuscationSetting = obfuscationSetting;
    return this;
  }

  /**
   * Get obfuscationSetting
   * @return obfuscationSetting
   */
  @javax.annotation.Nullable
  public CreateSlotRequestObfuscationSetting getObfuscationSetting() {
    return obfuscationSetting;
  }

  public void setObfuscationSetting(CreateSlotRequestObfuscationSetting obfuscationSetting) {
    this.obfuscationSetting = obfuscationSetting;
  }


  public UpdateSlotRequest multipleValuesSetting(CreateSlotRequestMultipleValuesSetting multipleValuesSetting) {
    this.multipleValuesSetting = multipleValuesSetting;
    return this;
  }

  /**
   * Get multipleValuesSetting
   * @return multipleValuesSetting
   */
  @javax.annotation.Nullable
  public CreateSlotRequestMultipleValuesSetting getMultipleValuesSetting() {
    return multipleValuesSetting;
  }

  public void setMultipleValuesSetting(CreateSlotRequestMultipleValuesSetting multipleValuesSetting) {
    this.multipleValuesSetting = multipleValuesSetting;
  }


  public UpdateSlotRequest subSlotSetting(CreateSlotRequestSubSlotSetting subSlotSetting) {
    this.subSlotSetting = subSlotSetting;
    return this;
  }

  /**
   * Get subSlotSetting
   * @return subSlotSetting
   */
  @javax.annotation.Nullable
  public CreateSlotRequestSubSlotSetting getSubSlotSetting() {
    return subSlotSetting;
  }

  public void setSubSlotSetting(CreateSlotRequestSubSlotSetting subSlotSetting) {
    this.subSlotSetting = subSlotSetting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSlotRequest updateSlotRequest = (UpdateSlotRequest) o;
    return Objects.equals(this.slotName, updateSlotRequest.slotName) &&
        Objects.equals(this.description, updateSlotRequest.description) &&
        Objects.equals(this.slotTypeId, updateSlotRequest.slotTypeId) &&
        Objects.equals(this.valueElicitationSetting, updateSlotRequest.valueElicitationSetting) &&
        Objects.equals(this.obfuscationSetting, updateSlotRequest.obfuscationSetting) &&
        Objects.equals(this.multipleValuesSetting, updateSlotRequest.multipleValuesSetting) &&
        Objects.equals(this.subSlotSetting, updateSlotRequest.subSlotSetting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(slotName, description, slotTypeId, valueElicitationSetting, obfuscationSetting, multipleValuesSetting, subSlotSetting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSlotRequest {\n");
    sb.append("    slotName: ").append(toIndentedString(slotName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    slotTypeId: ").append(toIndentedString(slotTypeId)).append("\n");
    sb.append("    valueElicitationSetting: ").append(toIndentedString(valueElicitationSetting)).append("\n");
    sb.append("    obfuscationSetting: ").append(toIndentedString(obfuscationSetting)).append("\n");
    sb.append("    multipleValuesSetting: ").append(toIndentedString(multipleValuesSetting)).append("\n");
    sb.append("    subSlotSetting: ").append(toIndentedString(subSlotSetting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("slotName");
    openapiFields.add("description");
    openapiFields.add("slotTypeId");
    openapiFields.add("valueElicitationSetting");
    openapiFields.add("obfuscationSetting");
    openapiFields.add("multipleValuesSetting");
    openapiFields.add("subSlotSetting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("slotName");
    openapiRequiredFields.add("valueElicitationSetting");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSlotRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSlotRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSlotRequest is not found in the empty JSON string", UpdateSlotRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSlotRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSlotRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSlotRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("slotName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slotName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slotName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("slotTypeId") != null && !jsonObj.get("slotTypeId").isJsonNull()) && !jsonObj.get("slotTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slotTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slotTypeId").toString()));
      }
      // validate the required field `valueElicitationSetting`
      CreateSlotRequestValueElicitationSetting.validateJsonElement(jsonObj.get("valueElicitationSetting"));
      // validate the optional field `obfuscationSetting`
      if (jsonObj.get("obfuscationSetting") != null && !jsonObj.get("obfuscationSetting").isJsonNull()) {
        CreateSlotRequestObfuscationSetting.validateJsonElement(jsonObj.get("obfuscationSetting"));
      }
      // validate the optional field `multipleValuesSetting`
      if (jsonObj.get("multipleValuesSetting") != null && !jsonObj.get("multipleValuesSetting").isJsonNull()) {
        CreateSlotRequestMultipleValuesSetting.validateJsonElement(jsonObj.get("multipleValuesSetting"));
      }
      // validate the optional field `subSlotSetting`
      if (jsonObj.get("subSlotSetting") != null && !jsonObj.get("subSlotSetting").isJsonNull()) {
        CreateSlotRequestSubSlotSetting.validateJsonElement(jsonObj.get("subSlotSetting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSlotRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSlotRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSlotRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSlotRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSlotRequest>() {
           @Override
           public void write(JsonWriter out, UpdateSlotRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSlotRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSlotRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSlotRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateSlotRequest
   */
  public static UpdateSlotRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSlotRequest.class);
  }

  /**
   * Convert an instance of UpdateSlotRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

