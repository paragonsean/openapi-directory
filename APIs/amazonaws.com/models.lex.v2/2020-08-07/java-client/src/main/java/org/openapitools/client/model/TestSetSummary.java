/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TestSetModality;
import org.openapitools.client.model.TestSetStatus;
import org.openapitools.client.model.TestSetSummaryStorageLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains summary information about the test set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestSetSummary {
  public static final String SERIALIZED_NAME_TEST_SET_ID = "testSetId";
  @SerializedName(SERIALIZED_NAME_TEST_SET_ID)
  private String testSetId;

  public static final String SERIALIZED_NAME_TEST_SET_NAME = "testSetName";
  @SerializedName(SERIALIZED_NAME_TEST_SET_NAME)
  private String testSetName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MODALITY = "modality";
  @SerializedName(SERIALIZED_NAME_MODALITY)
  private TestSetModality modality;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TestSetStatus status;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_NUM_TURNS = "numTurns";
  @SerializedName(SERIALIZED_NAME_NUM_TURNS)
  private Integer numTurns;

  public static final String SERIALIZED_NAME_STORAGE_LOCATION = "storageLocation";
  @SerializedName(SERIALIZED_NAME_STORAGE_LOCATION)
  private TestSetSummaryStorageLocation storageLocation;

  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  private OffsetDateTime creationDateTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public TestSetSummary() {
  }

  public TestSetSummary testSetId(String testSetId) {
    this.testSetId = testSetId;
    return this;
  }

  /**
   * Get testSetId
   * @return testSetId
   */
  @javax.annotation.Nullable
  public String getTestSetId() {
    return testSetId;
  }

  public void setTestSetId(String testSetId) {
    this.testSetId = testSetId;
  }


  public TestSetSummary testSetName(String testSetName) {
    this.testSetName = testSetName;
    return this;
  }

  /**
   * Get testSetName
   * @return testSetName
   */
  @javax.annotation.Nullable
  public String getTestSetName() {
    return testSetName;
  }

  public void setTestSetName(String testSetName) {
    this.testSetName = testSetName;
  }


  public TestSetSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TestSetSummary modality(TestSetModality modality) {
    this.modality = modality;
    return this;
  }

  /**
   * Get modality
   * @return modality
   */
  @javax.annotation.Nullable
  public TestSetModality getModality() {
    return modality;
  }

  public void setModality(TestSetModality modality) {
    this.modality = modality;
  }


  public TestSetSummary status(TestSetStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TestSetStatus getStatus() {
    return status;
  }

  public void setStatus(TestSetStatus status) {
    this.status = status;
  }


  public TestSetSummary roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public TestSetSummary numTurns(Integer numTurns) {
    this.numTurns = numTurns;
    return this;
  }

  /**
   * Get numTurns
   * @return numTurns
   */
  @javax.annotation.Nullable
  public Integer getNumTurns() {
    return numTurns;
  }

  public void setNumTurns(Integer numTurns) {
    this.numTurns = numTurns;
  }


  public TestSetSummary storageLocation(TestSetSummaryStorageLocation storageLocation) {
    this.storageLocation = storageLocation;
    return this;
  }

  /**
   * Get storageLocation
   * @return storageLocation
   */
  @javax.annotation.Nullable
  public TestSetSummaryStorageLocation getStorageLocation() {
    return storageLocation;
  }

  public void setStorageLocation(TestSetSummaryStorageLocation storageLocation) {
    this.storageLocation = storageLocation;
  }


  public TestSetSummary creationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * Get creationDateTime
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public TestSetSummary lastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
    return this;
  }

  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }

  public void setLastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestSetSummary testSetSummary = (TestSetSummary) o;
    return Objects.equals(this.testSetId, testSetSummary.testSetId) &&
        Objects.equals(this.testSetName, testSetSummary.testSetName) &&
        Objects.equals(this.description, testSetSummary.description) &&
        Objects.equals(this.modality, testSetSummary.modality) &&
        Objects.equals(this.status, testSetSummary.status) &&
        Objects.equals(this.roleArn, testSetSummary.roleArn) &&
        Objects.equals(this.numTurns, testSetSummary.numTurns) &&
        Objects.equals(this.storageLocation, testSetSummary.storageLocation) &&
        Objects.equals(this.creationDateTime, testSetSummary.creationDateTime) &&
        Objects.equals(this.lastUpdatedDateTime, testSetSummary.lastUpdatedDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testSetId, testSetName, description, modality, status, roleArn, numTurns, storageLocation, creationDateTime, lastUpdatedDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestSetSummary {\n");
    sb.append("    testSetId: ").append(toIndentedString(testSetId)).append("\n");
    sb.append("    testSetName: ").append(toIndentedString(testSetName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    modality: ").append(toIndentedString(modality)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    numTurns: ").append(toIndentedString(numTurns)).append("\n");
    sb.append("    storageLocation: ").append(toIndentedString(storageLocation)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testSetId");
    openapiFields.add("testSetName");
    openapiFields.add("description");
    openapiFields.add("modality");
    openapiFields.add("status");
    openapiFields.add("roleArn");
    openapiFields.add("numTurns");
    openapiFields.add("storageLocation");
    openapiFields.add("creationDateTime");
    openapiFields.add("lastUpdatedDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestSetSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestSetSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestSetSummary is not found in the empty JSON string", TestSetSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestSetSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestSetSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `testSetId`
      if (jsonObj.get("testSetId") != null && !jsonObj.get("testSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testSetId"));
      }
      // validate the optional field `testSetName`
      if (jsonObj.get("testSetName") != null && !jsonObj.get("testSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testSetName"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `modality`
      if (jsonObj.get("modality") != null && !jsonObj.get("modality").isJsonNull()) {
        TestSetModality.validateJsonElement(jsonObj.get("modality"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TestSetStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `roleArn`
      if (jsonObj.get("roleArn") != null && !jsonObj.get("roleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("roleArn"));
      }
      // validate the optional field `numTurns`
      if (jsonObj.get("numTurns") != null && !jsonObj.get("numTurns").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("numTurns"));
      }
      // validate the optional field `storageLocation`
      if (jsonObj.get("storageLocation") != null && !jsonObj.get("storageLocation").isJsonNull()) {
        TestSetSummaryStorageLocation.validateJsonElement(jsonObj.get("storageLocation"));
      }
      // validate the optional field `creationDateTime`
      if (jsonObj.get("creationDateTime") != null && !jsonObj.get("creationDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationDateTime"));
      }
      // validate the optional field `lastUpdatedDateTime`
      if (jsonObj.get("lastUpdatedDateTime") != null && !jsonObj.get("lastUpdatedDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedDateTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestSetSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestSetSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestSetSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestSetSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TestSetSummary>() {
           @Override
           public void write(JsonWriter out, TestSetSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestSetSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestSetSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestSetSummary
   * @throws IOException if the JSON string is invalid with respect to TestSetSummary
   */
  public static TestSetSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestSetSummary.class);
  }

  /**
   * Convert an instance of TestSetSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

