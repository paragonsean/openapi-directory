/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Principal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateResourcePolicyStatementRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateResourcePolicyStatementRequest {
  public static final String SERIALIZED_NAME_STATEMENT_ID = "statementId";
  @SerializedName(SERIALIZED_NAME_STATEMENT_ID)
  private String statementId;

  /**
   * Determines whether the statement allows or denies access to the resource.
   */
  @JsonAdapter(EffectEnum.Adapter.class)
  public enum EffectEnum {
    ALLOW("Allow"),
    
    DENY("Deny");

    private String value;

    EffectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EffectEnum fromValue(String value) {
      for (EffectEnum b : EffectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EffectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EffectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EffectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EffectEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EffectEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EFFECT = "effect";
  @SerializedName(SERIALIZED_NAME_EFFECT)
  private EffectEnum effect;

  public static final String SERIALIZED_NAME_PRINCIPAL = "principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private List<Principal> principal = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private List<String> action = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private Map<String, Map<String, String>> condition = new HashMap<>();

  public CreateResourcePolicyStatementRequest() {
  }

  public CreateResourcePolicyStatementRequest statementId(String statementId) {
    this.statementId = statementId;
    return this;
  }

  /**
   * The name of the statement. The ID is the same as the &lt;code&gt;Sid&lt;/code&gt; IAM property. The statement name must be unique within the policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html\&quot;&gt;IAM JSON policy elements: Sid&lt;/a&gt;. 
   * @return statementId
   */
  @javax.annotation.Nonnull
  public String getStatementId() {
    return statementId;
  }

  public void setStatementId(String statementId) {
    this.statementId = statementId;
  }


  public CreateResourcePolicyStatementRequest effect(EffectEnum effect) {
    this.effect = effect;
    return this;
  }

  /**
   * Determines whether the statement allows or denies access to the resource.
   * @return effect
   */
  @javax.annotation.Nonnull
  public EffectEnum getEffect() {
    return effect;
  }

  public void setEffect(EffectEnum effect) {
    this.effect = effect;
  }


  public CreateResourcePolicyStatementRequest principal(List<Principal> principal) {
    this.principal = principal;
    return this;
  }

  public CreateResourcePolicyStatementRequest addPrincipalItem(Principal principalItem) {
    if (this.principal == null) {
      this.principal = new ArrayList<>();
    }
    this.principal.add(principalItem);
    return this;
  }

  /**
   * An IAM principal, such as an IAM user, IAM role, or Amazon Web Services services that is allowed or denied access to a resource. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\&quot;&gt;Amazon Web Services JSON policy elements: Principal&lt;/a&gt;.
   * @return principal
   */
  @javax.annotation.Nonnull
  public List<Principal> getPrincipal() {
    return principal;
  }

  public void setPrincipal(List<Principal> principal) {
    this.principal = principal;
  }


  public CreateResourcePolicyStatementRequest action(List<String> action) {
    this.action = action;
    return this;
  }

  public CreateResourcePolicyStatementRequest addActionItem(String actionItem) {
    if (this.action == null) {
      this.action = new ArrayList<>();
    }
    this.action.add(actionItem);
    return this;
  }

  /**
   * The Amazon Lex action that this policy either allows or denies. The action must apply to the resource type of the specified ARN. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html\&quot;&gt; Actions, resources, and condition keys for Amazon Lex V2&lt;/a&gt;.
   * @return action
   */
  @javax.annotation.Nonnull
  public List<String> getAction() {
    return action;
  }

  public void setAction(List<String> action) {
    this.action = action;
  }


  public CreateResourcePolicyStatementRequest condition(Map<String, Map<String, String>> condition) {
    this.condition = condition;
    return this;
  }

  public CreateResourcePolicyStatementRequest putConditionItem(String key, Map<String, String> conditionItem) {
    if (this.condition == null) {
      this.condition = new HashMap<>();
    }
    this.condition.put(key, conditionItem);
    return this;
  }

  /**
   * &lt;p&gt;Specifies a condition when the policy is in effect. If the principal of the policy is a service principal, you must provide two condition blocks, one with a SourceAccount global condition key and one with a SourceArn global condition key.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html\&quot;&gt;IAM JSON policy elements: Condition &lt;/a&gt;.&lt;/p&gt;
   * @return condition
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, String>> getCondition() {
    return condition;
  }

  public void setCondition(Map<String, Map<String, String>> condition) {
    this.condition = condition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateResourcePolicyStatementRequest createResourcePolicyStatementRequest = (CreateResourcePolicyStatementRequest) o;
    return Objects.equals(this.statementId, createResourcePolicyStatementRequest.statementId) &&
        Objects.equals(this.effect, createResourcePolicyStatementRequest.effect) &&
        Objects.equals(this.principal, createResourcePolicyStatementRequest.principal) &&
        Objects.equals(this.action, createResourcePolicyStatementRequest.action) &&
        Objects.equals(this.condition, createResourcePolicyStatementRequest.condition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statementId, effect, principal, action, condition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateResourcePolicyStatementRequest {\n");
    sb.append("    statementId: ").append(toIndentedString(statementId)).append("\n");
    sb.append("    effect: ").append(toIndentedString(effect)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("statementId");
    openapiFields.add("effect");
    openapiFields.add("principal");
    openapiFields.add("action");
    openapiFields.add("condition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("statementId");
    openapiRequiredFields.add("effect");
    openapiRequiredFields.add("principal");
    openapiRequiredFields.add("action");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateResourcePolicyStatementRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateResourcePolicyStatementRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateResourcePolicyStatementRequest is not found in the empty JSON string", CreateResourcePolicyStatementRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateResourcePolicyStatementRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateResourcePolicyStatementRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateResourcePolicyStatementRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("statementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statementId").toString()));
      }
      if (!jsonObj.get("effect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effect").toString()));
      }
      // validate the required field `effect`
      EffectEnum.validateJsonElement(jsonObj.get("effect"));
      // ensure the json data is an array
      if (!jsonObj.get("principal").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `principal` to be an array in the JSON string but got `%s`", jsonObj.get("principal").toString()));
      }

      JsonArray jsonArrayprincipal = jsonObj.getAsJsonArray("principal");
      // validate the required field `principal` (array)
      for (int i = 0; i < jsonArrayprincipal.size(); i++) {
        Principal.validateJsonElement(jsonArrayprincipal.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("action") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("action").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be an array in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateResourcePolicyStatementRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateResourcePolicyStatementRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateResourcePolicyStatementRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateResourcePolicyStatementRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateResourcePolicyStatementRequest>() {
           @Override
           public void write(JsonWriter out, CreateResourcePolicyStatementRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateResourcePolicyStatementRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateResourcePolicyStatementRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateResourcePolicyStatementRequest
   * @throws IOException if the JSON string is invalid with respect to CreateResourcePolicyStatementRequest
   */
  public static CreateResourcePolicyStatementRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateResourcePolicyStatementRequest.class);
  }

  /**
   * Convert an instance of CreateResourcePolicyStatementRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

