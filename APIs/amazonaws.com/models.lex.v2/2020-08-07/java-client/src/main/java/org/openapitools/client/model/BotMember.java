/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A bot that is a member of a network of bots.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BotMember {
  public static final String SERIALIZED_NAME_BOT_MEMBER_ID = "botMemberId";
  @SerializedName(SERIALIZED_NAME_BOT_MEMBER_ID)
  private String botMemberId;

  public static final String SERIALIZED_NAME_BOT_MEMBER_NAME = "botMemberName";
  @SerializedName(SERIALIZED_NAME_BOT_MEMBER_NAME)
  private String botMemberName;

  public static final String SERIALIZED_NAME_BOT_MEMBER_ALIAS_ID = "botMemberAliasId";
  @SerializedName(SERIALIZED_NAME_BOT_MEMBER_ALIAS_ID)
  private String botMemberAliasId;

  public static final String SERIALIZED_NAME_BOT_MEMBER_ALIAS_NAME = "botMemberAliasName";
  @SerializedName(SERIALIZED_NAME_BOT_MEMBER_ALIAS_NAME)
  private String botMemberAliasName;

  public static final String SERIALIZED_NAME_BOT_MEMBER_VERSION = "botMemberVersion";
  @SerializedName(SERIALIZED_NAME_BOT_MEMBER_VERSION)
  private String botMemberVersion;

  public BotMember() {
  }

  public BotMember botMemberId(String botMemberId) {
    this.botMemberId = botMemberId;
    return this;
  }

  /**
   * Get botMemberId
   * @return botMemberId
   */
  @javax.annotation.Nonnull
  public String getBotMemberId() {
    return botMemberId;
  }

  public void setBotMemberId(String botMemberId) {
    this.botMemberId = botMemberId;
  }


  public BotMember botMemberName(String botMemberName) {
    this.botMemberName = botMemberName;
    return this;
  }

  /**
   * Get botMemberName
   * @return botMemberName
   */
  @javax.annotation.Nonnull
  public String getBotMemberName() {
    return botMemberName;
  }

  public void setBotMemberName(String botMemberName) {
    this.botMemberName = botMemberName;
  }


  public BotMember botMemberAliasId(String botMemberAliasId) {
    this.botMemberAliasId = botMemberAliasId;
    return this;
  }

  /**
   * Get botMemberAliasId
   * @return botMemberAliasId
   */
  @javax.annotation.Nonnull
  public String getBotMemberAliasId() {
    return botMemberAliasId;
  }

  public void setBotMemberAliasId(String botMemberAliasId) {
    this.botMemberAliasId = botMemberAliasId;
  }


  public BotMember botMemberAliasName(String botMemberAliasName) {
    this.botMemberAliasName = botMemberAliasName;
    return this;
  }

  /**
   * Get botMemberAliasName
   * @return botMemberAliasName
   */
  @javax.annotation.Nonnull
  public String getBotMemberAliasName() {
    return botMemberAliasName;
  }

  public void setBotMemberAliasName(String botMemberAliasName) {
    this.botMemberAliasName = botMemberAliasName;
  }


  public BotMember botMemberVersion(String botMemberVersion) {
    this.botMemberVersion = botMemberVersion;
    return this;
  }

  /**
   * Get botMemberVersion
   * @return botMemberVersion
   */
  @javax.annotation.Nonnull
  public String getBotMemberVersion() {
    return botMemberVersion;
  }

  public void setBotMemberVersion(String botMemberVersion) {
    this.botMemberVersion = botMemberVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BotMember botMember = (BotMember) o;
    return Objects.equals(this.botMemberId, botMember.botMemberId) &&
        Objects.equals(this.botMemberName, botMember.botMemberName) &&
        Objects.equals(this.botMemberAliasId, botMember.botMemberAliasId) &&
        Objects.equals(this.botMemberAliasName, botMember.botMemberAliasName) &&
        Objects.equals(this.botMemberVersion, botMember.botMemberVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(botMemberId, botMemberName, botMemberAliasId, botMemberAliasName, botMemberVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BotMember {\n");
    sb.append("    botMemberId: ").append(toIndentedString(botMemberId)).append("\n");
    sb.append("    botMemberName: ").append(toIndentedString(botMemberName)).append("\n");
    sb.append("    botMemberAliasId: ").append(toIndentedString(botMemberAliasId)).append("\n");
    sb.append("    botMemberAliasName: ").append(toIndentedString(botMemberAliasName)).append("\n");
    sb.append("    botMemberVersion: ").append(toIndentedString(botMemberVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("botMemberId");
    openapiFields.add("botMemberName");
    openapiFields.add("botMemberAliasId");
    openapiFields.add("botMemberAliasName");
    openapiFields.add("botMemberVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("botMemberId");
    openapiRequiredFields.add("botMemberName");
    openapiRequiredFields.add("botMemberAliasId");
    openapiRequiredFields.add("botMemberAliasName");
    openapiRequiredFields.add("botMemberVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BotMember
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BotMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BotMember is not found in the empty JSON string", BotMember.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BotMember.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BotMember` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BotMember.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `botMemberId`
      String.validateJsonElement(jsonObj.get("botMemberId"));
      // validate the required field `botMemberName`
      String.validateJsonElement(jsonObj.get("botMemberName"));
      // validate the required field `botMemberAliasId`
      String.validateJsonElement(jsonObj.get("botMemberAliasId"));
      // validate the required field `botMemberAliasName`
      String.validateJsonElement(jsonObj.get("botMemberAliasName"));
      // validate the required field `botMemberVersion`
      String.validateJsonElement(jsonObj.get("botMemberVersion"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BotMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BotMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BotMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BotMember.class));

       return (TypeAdapter<T>) new TypeAdapter<BotMember>() {
           @Override
           public void write(JsonWriter out, BotMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BotMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BotMember given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BotMember
   * @throws IOException if the JSON string is invalid with respect to BotMember
   */
  public static BotMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BotMember.class);
  }

  /**
   * Convert an instance of BotMember to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

