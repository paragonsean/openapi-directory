/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribeImportResponseResourceSpecification;
import org.openapitools.client.model.ImportStatus;
import org.openapitools.client.model.MergeStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeImportResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeImportResponse {
  public static final String SERIALIZED_NAME_IMPORT_ID = "importId";
  @SerializedName(SERIALIZED_NAME_IMPORT_ID)
  private String importId;

  public static final String SERIALIZED_NAME_RESOURCE_SPECIFICATION = "resourceSpecification";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SPECIFICATION)
  private DescribeImportResponseResourceSpecification resourceSpecification;

  public static final String SERIALIZED_NAME_IMPORTED_RESOURCE_ID = "importedResourceId";
  @SerializedName(SERIALIZED_NAME_IMPORTED_RESOURCE_ID)
  private String importedResourceId;

  public static final String SERIALIZED_NAME_IMPORTED_RESOURCE_NAME = "importedResourceName";
  @SerializedName(SERIALIZED_NAME_IMPORTED_RESOURCE_NAME)
  private String importedResourceName;

  public static final String SERIALIZED_NAME_MERGE_STRATEGY = "mergeStrategy";
  @SerializedName(SERIALIZED_NAME_MERGE_STRATEGY)
  private MergeStrategy mergeStrategy;

  public static final String SERIALIZED_NAME_IMPORT_STATUS = "importStatus";
  @SerializedName(SERIALIZED_NAME_IMPORT_STATUS)
  private ImportStatus importStatus;

  public static final String SERIALIZED_NAME_FAILURE_REASONS = "failureReasons";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASONS)
  private List failureReasons;

  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  private OffsetDateTime creationDateTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public DescribeImportResponse() {
  }

  public DescribeImportResponse importId(String importId) {
    this.importId = importId;
    return this;
  }

  /**
   * Get importId
   * @return importId
   */
  @javax.annotation.Nullable
  public String getImportId() {
    return importId;
  }

  public void setImportId(String importId) {
    this.importId = importId;
  }


  public DescribeImportResponse resourceSpecification(DescribeImportResponseResourceSpecification resourceSpecification) {
    this.resourceSpecification = resourceSpecification;
    return this;
  }

  /**
   * Get resourceSpecification
   * @return resourceSpecification
   */
  @javax.annotation.Nullable
  public DescribeImportResponseResourceSpecification getResourceSpecification() {
    return resourceSpecification;
  }

  public void setResourceSpecification(DescribeImportResponseResourceSpecification resourceSpecification) {
    this.resourceSpecification = resourceSpecification;
  }


  public DescribeImportResponse importedResourceId(String importedResourceId) {
    this.importedResourceId = importedResourceId;
    return this;
  }

  /**
   * Get importedResourceId
   * @return importedResourceId
   */
  @javax.annotation.Nullable
  public String getImportedResourceId() {
    return importedResourceId;
  }

  public void setImportedResourceId(String importedResourceId) {
    this.importedResourceId = importedResourceId;
  }


  public DescribeImportResponse importedResourceName(String importedResourceName) {
    this.importedResourceName = importedResourceName;
    return this;
  }

  /**
   * Get importedResourceName
   * @return importedResourceName
   */
  @javax.annotation.Nullable
  public String getImportedResourceName() {
    return importedResourceName;
  }

  public void setImportedResourceName(String importedResourceName) {
    this.importedResourceName = importedResourceName;
  }


  public DescribeImportResponse mergeStrategy(MergeStrategy mergeStrategy) {
    this.mergeStrategy = mergeStrategy;
    return this;
  }

  /**
   * Get mergeStrategy
   * @return mergeStrategy
   */
  @javax.annotation.Nullable
  public MergeStrategy getMergeStrategy() {
    return mergeStrategy;
  }

  public void setMergeStrategy(MergeStrategy mergeStrategy) {
    this.mergeStrategy = mergeStrategy;
  }


  public DescribeImportResponse importStatus(ImportStatus importStatus) {
    this.importStatus = importStatus;
    return this;
  }

  /**
   * Get importStatus
   * @return importStatus
   */
  @javax.annotation.Nullable
  public ImportStatus getImportStatus() {
    return importStatus;
  }

  public void setImportStatus(ImportStatus importStatus) {
    this.importStatus = importStatus;
  }


  public DescribeImportResponse failureReasons(List failureReasons) {
    this.failureReasons = failureReasons;
    return this;
  }

  /**
   * Get failureReasons
   * @return failureReasons
   */
  @javax.annotation.Nullable
  public List getFailureReasons() {
    return failureReasons;
  }

  public void setFailureReasons(List failureReasons) {
    this.failureReasons = failureReasons;
  }


  public DescribeImportResponse creationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * Get creationDateTime
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public DescribeImportResponse lastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
    return this;
  }

  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }

  public void setLastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeImportResponse describeImportResponse = (DescribeImportResponse) o;
    return Objects.equals(this.importId, describeImportResponse.importId) &&
        Objects.equals(this.resourceSpecification, describeImportResponse.resourceSpecification) &&
        Objects.equals(this.importedResourceId, describeImportResponse.importedResourceId) &&
        Objects.equals(this.importedResourceName, describeImportResponse.importedResourceName) &&
        Objects.equals(this.mergeStrategy, describeImportResponse.mergeStrategy) &&
        Objects.equals(this.importStatus, describeImportResponse.importStatus) &&
        Objects.equals(this.failureReasons, describeImportResponse.failureReasons) &&
        Objects.equals(this.creationDateTime, describeImportResponse.creationDateTime) &&
        Objects.equals(this.lastUpdatedDateTime, describeImportResponse.lastUpdatedDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(importId, resourceSpecification, importedResourceId, importedResourceName, mergeStrategy, importStatus, failureReasons, creationDateTime, lastUpdatedDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeImportResponse {\n");
    sb.append("    importId: ").append(toIndentedString(importId)).append("\n");
    sb.append("    resourceSpecification: ").append(toIndentedString(resourceSpecification)).append("\n");
    sb.append("    importedResourceId: ").append(toIndentedString(importedResourceId)).append("\n");
    sb.append("    importedResourceName: ").append(toIndentedString(importedResourceName)).append("\n");
    sb.append("    mergeStrategy: ").append(toIndentedString(mergeStrategy)).append("\n");
    sb.append("    importStatus: ").append(toIndentedString(importStatus)).append("\n");
    sb.append("    failureReasons: ").append(toIndentedString(failureReasons)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("importId");
    openapiFields.add("resourceSpecification");
    openapiFields.add("importedResourceId");
    openapiFields.add("importedResourceName");
    openapiFields.add("mergeStrategy");
    openapiFields.add("importStatus");
    openapiFields.add("failureReasons");
    openapiFields.add("creationDateTime");
    openapiFields.add("lastUpdatedDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeImportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeImportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeImportResponse is not found in the empty JSON string", DescribeImportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeImportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeImportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `importId`
      if (jsonObj.get("importId") != null && !jsonObj.get("importId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("importId"));
      }
      // validate the optional field `resourceSpecification`
      if (jsonObj.get("resourceSpecification") != null && !jsonObj.get("resourceSpecification").isJsonNull()) {
        DescribeImportResponseResourceSpecification.validateJsonElement(jsonObj.get("resourceSpecification"));
      }
      // validate the optional field `importedResourceId`
      if (jsonObj.get("importedResourceId") != null && !jsonObj.get("importedResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("importedResourceId"));
      }
      // validate the optional field `importedResourceName`
      if (jsonObj.get("importedResourceName") != null && !jsonObj.get("importedResourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("importedResourceName"));
      }
      // validate the optional field `mergeStrategy`
      if (jsonObj.get("mergeStrategy") != null && !jsonObj.get("mergeStrategy").isJsonNull()) {
        MergeStrategy.validateJsonElement(jsonObj.get("mergeStrategy"));
      }
      // validate the optional field `importStatus`
      if (jsonObj.get("importStatus") != null && !jsonObj.get("importStatus").isJsonNull()) {
        ImportStatus.validateJsonElement(jsonObj.get("importStatus"));
      }
      // validate the optional field `failureReasons`
      if (jsonObj.get("failureReasons") != null && !jsonObj.get("failureReasons").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("failureReasons"));
      }
      // validate the optional field `creationDateTime`
      if (jsonObj.get("creationDateTime") != null && !jsonObj.get("creationDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationDateTime"));
      }
      // validate the optional field `lastUpdatedDateTime`
      if (jsonObj.get("lastUpdatedDateTime") != null && !jsonObj.get("lastUpdatedDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedDateTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeImportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeImportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeImportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeImportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeImportResponse>() {
           @Override
           public void write(JsonWriter out, DescribeImportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeImportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeImportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeImportResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeImportResponse
   */
  public static DescribeImportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeImportResponse.class);
  }

  /**
   * Convert an instance of DescribeImportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

