/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExecutionErrorDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestSetTurnResultAgent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestSetTurnResultAgent {
  public static final String SERIALIZED_NAME_EXPECTED_AGENT_PROMPT = "expectedAgentPrompt";
  @SerializedName(SERIALIZED_NAME_EXPECTED_AGENT_PROMPT)
  private String expectedAgentPrompt;

  public static final String SERIALIZED_NAME_ACTUAL_AGENT_PROMPT = "actualAgentPrompt";
  @SerializedName(SERIALIZED_NAME_ACTUAL_AGENT_PROMPT)
  private String actualAgentPrompt;

  public static final String SERIALIZED_NAME_ERROR_DETAILS = "errorDetails";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAILS)
  private ExecutionErrorDetails errorDetails;

  public static final String SERIALIZED_NAME_ACTUAL_ELICITED_SLOT = "actualElicitedSlot";
  @SerializedName(SERIALIZED_NAME_ACTUAL_ELICITED_SLOT)
  private String actualElicitedSlot;

  public static final String SERIALIZED_NAME_ACTUAL_INTENT = "actualIntent";
  @SerializedName(SERIALIZED_NAME_ACTUAL_INTENT)
  private String actualIntent;

  public TestSetTurnResultAgent() {
  }

  public TestSetTurnResultAgent expectedAgentPrompt(String expectedAgentPrompt) {
    this.expectedAgentPrompt = expectedAgentPrompt;
    return this;
  }

  /**
   * Get expectedAgentPrompt
   * @return expectedAgentPrompt
   */
  @javax.annotation.Nonnull
  public String getExpectedAgentPrompt() {
    return expectedAgentPrompt;
  }

  public void setExpectedAgentPrompt(String expectedAgentPrompt) {
    this.expectedAgentPrompt = expectedAgentPrompt;
  }


  public TestSetTurnResultAgent actualAgentPrompt(String actualAgentPrompt) {
    this.actualAgentPrompt = actualAgentPrompt;
    return this;
  }

  /**
   * Get actualAgentPrompt
   * @return actualAgentPrompt
   */
  @javax.annotation.Nullable
  public String getActualAgentPrompt() {
    return actualAgentPrompt;
  }

  public void setActualAgentPrompt(String actualAgentPrompt) {
    this.actualAgentPrompt = actualAgentPrompt;
  }


  public TestSetTurnResultAgent errorDetails(ExecutionErrorDetails errorDetails) {
    this.errorDetails = errorDetails;
    return this;
  }

  /**
   * Get errorDetails
   * @return errorDetails
   */
  @javax.annotation.Nullable
  public ExecutionErrorDetails getErrorDetails() {
    return errorDetails;
  }

  public void setErrorDetails(ExecutionErrorDetails errorDetails) {
    this.errorDetails = errorDetails;
  }


  public TestSetTurnResultAgent actualElicitedSlot(String actualElicitedSlot) {
    this.actualElicitedSlot = actualElicitedSlot;
    return this;
  }

  /**
   * Get actualElicitedSlot
   * @return actualElicitedSlot
   */
  @javax.annotation.Nullable
  public String getActualElicitedSlot() {
    return actualElicitedSlot;
  }

  public void setActualElicitedSlot(String actualElicitedSlot) {
    this.actualElicitedSlot = actualElicitedSlot;
  }


  public TestSetTurnResultAgent actualIntent(String actualIntent) {
    this.actualIntent = actualIntent;
    return this;
  }

  /**
   * Get actualIntent
   * @return actualIntent
   */
  @javax.annotation.Nullable
  public String getActualIntent() {
    return actualIntent;
  }

  public void setActualIntent(String actualIntent) {
    this.actualIntent = actualIntent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestSetTurnResultAgent testSetTurnResultAgent = (TestSetTurnResultAgent) o;
    return Objects.equals(this.expectedAgentPrompt, testSetTurnResultAgent.expectedAgentPrompt) &&
        Objects.equals(this.actualAgentPrompt, testSetTurnResultAgent.actualAgentPrompt) &&
        Objects.equals(this.errorDetails, testSetTurnResultAgent.errorDetails) &&
        Objects.equals(this.actualElicitedSlot, testSetTurnResultAgent.actualElicitedSlot) &&
        Objects.equals(this.actualIntent, testSetTurnResultAgent.actualIntent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectedAgentPrompt, actualAgentPrompt, errorDetails, actualElicitedSlot, actualIntent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestSetTurnResultAgent {\n");
    sb.append("    expectedAgentPrompt: ").append(toIndentedString(expectedAgentPrompt)).append("\n");
    sb.append("    actualAgentPrompt: ").append(toIndentedString(actualAgentPrompt)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("    actualElicitedSlot: ").append(toIndentedString(actualElicitedSlot)).append("\n");
    sb.append("    actualIntent: ").append(toIndentedString(actualIntent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expectedAgentPrompt");
    openapiFields.add("actualAgentPrompt");
    openapiFields.add("errorDetails");
    openapiFields.add("actualElicitedSlot");
    openapiFields.add("actualIntent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("expectedAgentPrompt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestSetTurnResultAgent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestSetTurnResultAgent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestSetTurnResultAgent is not found in the empty JSON string", TestSetTurnResultAgent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestSetTurnResultAgent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestSetTurnResultAgent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestSetTurnResultAgent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `expectedAgentPrompt`
      String.validateJsonElement(jsonObj.get("expectedAgentPrompt"));
      // validate the optional field `actualAgentPrompt`
      if (jsonObj.get("actualAgentPrompt") != null && !jsonObj.get("actualAgentPrompt").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("actualAgentPrompt"));
      }
      // validate the optional field `errorDetails`
      if (jsonObj.get("errorDetails") != null && !jsonObj.get("errorDetails").isJsonNull()) {
        ExecutionErrorDetails.validateJsonElement(jsonObj.get("errorDetails"));
      }
      // validate the optional field `actualElicitedSlot`
      if (jsonObj.get("actualElicitedSlot") != null && !jsonObj.get("actualElicitedSlot").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("actualElicitedSlot"));
      }
      // validate the optional field `actualIntent`
      if (jsonObj.get("actualIntent") != null && !jsonObj.get("actualIntent").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("actualIntent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestSetTurnResultAgent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestSetTurnResultAgent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestSetTurnResultAgent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestSetTurnResultAgent.class));

       return (TypeAdapter<T>) new TypeAdapter<TestSetTurnResultAgent>() {
           @Override
           public void write(JsonWriter out, TestSetTurnResultAgent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestSetTurnResultAgent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestSetTurnResultAgent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestSetTurnResultAgent
   * @throws IOException if the JSON string is invalid with respect to TestSetTurnResultAgent
   */
  public static TestSetTurnResultAgent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestSetTurnResultAgent.class);
  }

  /**
   * Convert an instance of TestSetTurnResultAgent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

