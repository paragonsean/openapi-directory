/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.SlotTypeCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides summary information about a slot type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlotTypeSummary {
  public static final String SERIALIZED_NAME_SLOT_TYPE_ID = "slotTypeId";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_ID)
  private String slotTypeId;

  public static final String SERIALIZED_NAME_SLOT_TYPE_NAME = "slotTypeName";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_NAME)
  private String slotTypeName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PARENT_SLOT_TYPE_SIGNATURE = "parentSlotTypeSignature";
  @SerializedName(SERIALIZED_NAME_PARENT_SLOT_TYPE_SIGNATURE)
  private String parentSlotTypeSignature;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_SLOT_TYPE_CATEGORY = "slotTypeCategory";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_CATEGORY)
  private SlotTypeCategory slotTypeCategory;

  public SlotTypeSummary() {
  }

  public SlotTypeSummary slotTypeId(String slotTypeId) {
    this.slotTypeId = slotTypeId;
    return this;
  }

  /**
   * Get slotTypeId
   * @return slotTypeId
   */
  @javax.annotation.Nullable
  public String getSlotTypeId() {
    return slotTypeId;
  }

  public void setSlotTypeId(String slotTypeId) {
    this.slotTypeId = slotTypeId;
  }


  public SlotTypeSummary slotTypeName(String slotTypeName) {
    this.slotTypeName = slotTypeName;
    return this;
  }

  /**
   * Get slotTypeName
   * @return slotTypeName
   */
  @javax.annotation.Nullable
  public String getSlotTypeName() {
    return slotTypeName;
  }

  public void setSlotTypeName(String slotTypeName) {
    this.slotTypeName = slotTypeName;
  }


  public SlotTypeSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SlotTypeSummary parentSlotTypeSignature(String parentSlotTypeSignature) {
    this.parentSlotTypeSignature = parentSlotTypeSignature;
    return this;
  }

  /**
   * Get parentSlotTypeSignature
   * @return parentSlotTypeSignature
   */
  @javax.annotation.Nullable
  public String getParentSlotTypeSignature() {
    return parentSlotTypeSignature;
  }

  public void setParentSlotTypeSignature(String parentSlotTypeSignature) {
    this.parentSlotTypeSignature = parentSlotTypeSignature;
  }


  public SlotTypeSummary lastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
    return this;
  }

  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }

  public void setLastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }


  public SlotTypeSummary slotTypeCategory(SlotTypeCategory slotTypeCategory) {
    this.slotTypeCategory = slotTypeCategory;
    return this;
  }

  /**
   * Get slotTypeCategory
   * @return slotTypeCategory
   */
  @javax.annotation.Nullable
  public SlotTypeCategory getSlotTypeCategory() {
    return slotTypeCategory;
  }

  public void setSlotTypeCategory(SlotTypeCategory slotTypeCategory) {
    this.slotTypeCategory = slotTypeCategory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlotTypeSummary slotTypeSummary = (SlotTypeSummary) o;
    return Objects.equals(this.slotTypeId, slotTypeSummary.slotTypeId) &&
        Objects.equals(this.slotTypeName, slotTypeSummary.slotTypeName) &&
        Objects.equals(this.description, slotTypeSummary.description) &&
        Objects.equals(this.parentSlotTypeSignature, slotTypeSummary.parentSlotTypeSignature) &&
        Objects.equals(this.lastUpdatedDateTime, slotTypeSummary.lastUpdatedDateTime) &&
        Objects.equals(this.slotTypeCategory, slotTypeSummary.slotTypeCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(slotTypeId, slotTypeName, description, parentSlotTypeSignature, lastUpdatedDateTime, slotTypeCategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlotTypeSummary {\n");
    sb.append("    slotTypeId: ").append(toIndentedString(slotTypeId)).append("\n");
    sb.append("    slotTypeName: ").append(toIndentedString(slotTypeName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    parentSlotTypeSignature: ").append(toIndentedString(parentSlotTypeSignature)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    slotTypeCategory: ").append(toIndentedString(slotTypeCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("slotTypeId");
    openapiFields.add("slotTypeName");
    openapiFields.add("description");
    openapiFields.add("parentSlotTypeSignature");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("slotTypeCategory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlotTypeSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlotTypeSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlotTypeSummary is not found in the empty JSON string", SlotTypeSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlotTypeSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlotTypeSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `slotTypeId`
      if (jsonObj.get("slotTypeId") != null && !jsonObj.get("slotTypeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotTypeId"));
      }
      // validate the optional field `slotTypeName`
      if (jsonObj.get("slotTypeName") != null && !jsonObj.get("slotTypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotTypeName"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `parentSlotTypeSignature`
      if (jsonObj.get("parentSlotTypeSignature") != null && !jsonObj.get("parentSlotTypeSignature").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("parentSlotTypeSignature"));
      }
      // validate the optional field `lastUpdatedDateTime`
      if (jsonObj.get("lastUpdatedDateTime") != null && !jsonObj.get("lastUpdatedDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedDateTime"));
      }
      // validate the optional field `slotTypeCategory`
      if (jsonObj.get("slotTypeCategory") != null && !jsonObj.get("slotTypeCategory").isJsonNull()) {
        SlotTypeCategory.validateJsonElement(jsonObj.get("slotTypeCategory"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlotTypeSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlotTypeSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlotTypeSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlotTypeSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<SlotTypeSummary>() {
           @Override
           public void write(JsonWriter out, SlotTypeSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlotTypeSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlotTypeSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlotTypeSummary
   * @throws IOException if the JSON string is invalid with respect to SlotTypeSummary
   */
  public static SlotTypeSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlotTypeSummary.class);
  }

  /**
   * Convert an instance of SlotTypeSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

