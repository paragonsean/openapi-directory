/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TestExecutionResultItemsConversationLevelTestResults;
import org.openapitools.client.model.TestExecutionResultItemsIntentClassificationTestResults;
import org.openapitools.client.model.TestExecutionResultItemsIntentLevelSlotResolutionTestResults;
import org.openapitools.client.model.TestExecutionResultItemsOverallTestResults;
import org.openapitools.client.model.TestExecutionResultItemsUtteranceLevelTestResults;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the results of the test execution, grouped by type of results. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/dg/test-results-details-test-set.html\&quot;&gt;Test result details\&quot;&amp;gt;Test results details&lt;/a&gt; for details about different types of results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestExecutionResultItems {
  public static final String SERIALIZED_NAME_OVERALL_TEST_RESULTS = "overallTestResults";
  @SerializedName(SERIALIZED_NAME_OVERALL_TEST_RESULTS)
  private TestExecutionResultItemsOverallTestResults overallTestResults;

  public static final String SERIALIZED_NAME_CONVERSATION_LEVEL_TEST_RESULTS = "conversationLevelTestResults";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_LEVEL_TEST_RESULTS)
  private TestExecutionResultItemsConversationLevelTestResults conversationLevelTestResults;

  public static final String SERIALIZED_NAME_INTENT_CLASSIFICATION_TEST_RESULTS = "intentClassificationTestResults";
  @SerializedName(SERIALIZED_NAME_INTENT_CLASSIFICATION_TEST_RESULTS)
  private TestExecutionResultItemsIntentClassificationTestResults intentClassificationTestResults;

  public static final String SERIALIZED_NAME_INTENT_LEVEL_SLOT_RESOLUTION_TEST_RESULTS = "intentLevelSlotResolutionTestResults";
  @SerializedName(SERIALIZED_NAME_INTENT_LEVEL_SLOT_RESOLUTION_TEST_RESULTS)
  private TestExecutionResultItemsIntentLevelSlotResolutionTestResults intentLevelSlotResolutionTestResults;

  public static final String SERIALIZED_NAME_UTTERANCE_LEVEL_TEST_RESULTS = "utteranceLevelTestResults";
  @SerializedName(SERIALIZED_NAME_UTTERANCE_LEVEL_TEST_RESULTS)
  private TestExecutionResultItemsUtteranceLevelTestResults utteranceLevelTestResults;

  public TestExecutionResultItems() {
  }

  public TestExecutionResultItems overallTestResults(TestExecutionResultItemsOverallTestResults overallTestResults) {
    this.overallTestResults = overallTestResults;
    return this;
  }

  /**
   * Get overallTestResults
   * @return overallTestResults
   */
  @javax.annotation.Nullable
  public TestExecutionResultItemsOverallTestResults getOverallTestResults() {
    return overallTestResults;
  }

  public void setOverallTestResults(TestExecutionResultItemsOverallTestResults overallTestResults) {
    this.overallTestResults = overallTestResults;
  }


  public TestExecutionResultItems conversationLevelTestResults(TestExecutionResultItemsConversationLevelTestResults conversationLevelTestResults) {
    this.conversationLevelTestResults = conversationLevelTestResults;
    return this;
  }

  /**
   * Get conversationLevelTestResults
   * @return conversationLevelTestResults
   */
  @javax.annotation.Nullable
  public TestExecutionResultItemsConversationLevelTestResults getConversationLevelTestResults() {
    return conversationLevelTestResults;
  }

  public void setConversationLevelTestResults(TestExecutionResultItemsConversationLevelTestResults conversationLevelTestResults) {
    this.conversationLevelTestResults = conversationLevelTestResults;
  }


  public TestExecutionResultItems intentClassificationTestResults(TestExecutionResultItemsIntentClassificationTestResults intentClassificationTestResults) {
    this.intentClassificationTestResults = intentClassificationTestResults;
    return this;
  }

  /**
   * Get intentClassificationTestResults
   * @return intentClassificationTestResults
   */
  @javax.annotation.Nullable
  public TestExecutionResultItemsIntentClassificationTestResults getIntentClassificationTestResults() {
    return intentClassificationTestResults;
  }

  public void setIntentClassificationTestResults(TestExecutionResultItemsIntentClassificationTestResults intentClassificationTestResults) {
    this.intentClassificationTestResults = intentClassificationTestResults;
  }


  public TestExecutionResultItems intentLevelSlotResolutionTestResults(TestExecutionResultItemsIntentLevelSlotResolutionTestResults intentLevelSlotResolutionTestResults) {
    this.intentLevelSlotResolutionTestResults = intentLevelSlotResolutionTestResults;
    return this;
  }

  /**
   * Get intentLevelSlotResolutionTestResults
   * @return intentLevelSlotResolutionTestResults
   */
  @javax.annotation.Nullable
  public TestExecutionResultItemsIntentLevelSlotResolutionTestResults getIntentLevelSlotResolutionTestResults() {
    return intentLevelSlotResolutionTestResults;
  }

  public void setIntentLevelSlotResolutionTestResults(TestExecutionResultItemsIntentLevelSlotResolutionTestResults intentLevelSlotResolutionTestResults) {
    this.intentLevelSlotResolutionTestResults = intentLevelSlotResolutionTestResults;
  }


  public TestExecutionResultItems utteranceLevelTestResults(TestExecutionResultItemsUtteranceLevelTestResults utteranceLevelTestResults) {
    this.utteranceLevelTestResults = utteranceLevelTestResults;
    return this;
  }

  /**
   * Get utteranceLevelTestResults
   * @return utteranceLevelTestResults
   */
  @javax.annotation.Nullable
  public TestExecutionResultItemsUtteranceLevelTestResults getUtteranceLevelTestResults() {
    return utteranceLevelTestResults;
  }

  public void setUtteranceLevelTestResults(TestExecutionResultItemsUtteranceLevelTestResults utteranceLevelTestResults) {
    this.utteranceLevelTestResults = utteranceLevelTestResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestExecutionResultItems testExecutionResultItems = (TestExecutionResultItems) o;
    return Objects.equals(this.overallTestResults, testExecutionResultItems.overallTestResults) &&
        Objects.equals(this.conversationLevelTestResults, testExecutionResultItems.conversationLevelTestResults) &&
        Objects.equals(this.intentClassificationTestResults, testExecutionResultItems.intentClassificationTestResults) &&
        Objects.equals(this.intentLevelSlotResolutionTestResults, testExecutionResultItems.intentLevelSlotResolutionTestResults) &&
        Objects.equals(this.utteranceLevelTestResults, testExecutionResultItems.utteranceLevelTestResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(overallTestResults, conversationLevelTestResults, intentClassificationTestResults, intentLevelSlotResolutionTestResults, utteranceLevelTestResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestExecutionResultItems {\n");
    sb.append("    overallTestResults: ").append(toIndentedString(overallTestResults)).append("\n");
    sb.append("    conversationLevelTestResults: ").append(toIndentedString(conversationLevelTestResults)).append("\n");
    sb.append("    intentClassificationTestResults: ").append(toIndentedString(intentClassificationTestResults)).append("\n");
    sb.append("    intentLevelSlotResolutionTestResults: ").append(toIndentedString(intentLevelSlotResolutionTestResults)).append("\n");
    sb.append("    utteranceLevelTestResults: ").append(toIndentedString(utteranceLevelTestResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("overallTestResults");
    openapiFields.add("conversationLevelTestResults");
    openapiFields.add("intentClassificationTestResults");
    openapiFields.add("intentLevelSlotResolutionTestResults");
    openapiFields.add("utteranceLevelTestResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestExecutionResultItems
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestExecutionResultItems.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestExecutionResultItems is not found in the empty JSON string", TestExecutionResultItems.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestExecutionResultItems.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestExecutionResultItems` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `overallTestResults`
      if (jsonObj.get("overallTestResults") != null && !jsonObj.get("overallTestResults").isJsonNull()) {
        TestExecutionResultItemsOverallTestResults.validateJsonElement(jsonObj.get("overallTestResults"));
      }
      // validate the optional field `conversationLevelTestResults`
      if (jsonObj.get("conversationLevelTestResults") != null && !jsonObj.get("conversationLevelTestResults").isJsonNull()) {
        TestExecutionResultItemsConversationLevelTestResults.validateJsonElement(jsonObj.get("conversationLevelTestResults"));
      }
      // validate the optional field `intentClassificationTestResults`
      if (jsonObj.get("intentClassificationTestResults") != null && !jsonObj.get("intentClassificationTestResults").isJsonNull()) {
        TestExecutionResultItemsIntentClassificationTestResults.validateJsonElement(jsonObj.get("intentClassificationTestResults"));
      }
      // validate the optional field `intentLevelSlotResolutionTestResults`
      if (jsonObj.get("intentLevelSlotResolutionTestResults") != null && !jsonObj.get("intentLevelSlotResolutionTestResults").isJsonNull()) {
        TestExecutionResultItemsIntentLevelSlotResolutionTestResults.validateJsonElement(jsonObj.get("intentLevelSlotResolutionTestResults"));
      }
      // validate the optional field `utteranceLevelTestResults`
      if (jsonObj.get("utteranceLevelTestResults") != null && !jsonObj.get("utteranceLevelTestResults").isJsonNull()) {
        TestExecutionResultItemsUtteranceLevelTestResults.validateJsonElement(jsonObj.get("utteranceLevelTestResults"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestExecutionResultItems.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestExecutionResultItems' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestExecutionResultItems> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestExecutionResultItems.class));

       return (TypeAdapter<T>) new TypeAdapter<TestExecutionResultItems>() {
           @Override
           public void write(JsonWriter out, TestExecutionResultItems value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestExecutionResultItems read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestExecutionResultItems given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestExecutionResultItems
   * @throws IOException if the JSON string is invalid with respect to TestExecutionResultItems
   */
  public static TestExecutionResultItems fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestExecutionResultItems.class);
  }

  /**
   * Convert an instance of TestExecutionResultItems to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

