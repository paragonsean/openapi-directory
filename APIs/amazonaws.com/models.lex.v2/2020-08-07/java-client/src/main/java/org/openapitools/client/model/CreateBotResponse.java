/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BotStatus;
import org.openapitools.client.model.BotType;
import org.openapitools.client.model.CreateBotResponseDataPrivacy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBotResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBotResponse {
  public static final String SERIALIZED_NAME_BOT_ID = "botId";
  @SerializedName(SERIALIZED_NAME_BOT_ID)
  private String botId;

  public static final String SERIALIZED_NAME_BOT_NAME = "botName";
  @SerializedName(SERIALIZED_NAME_BOT_NAME)
  private String botName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_DATA_PRIVACY = "dataPrivacy";
  @SerializedName(SERIALIZED_NAME_DATA_PRIVACY)
  private CreateBotResponseDataPrivacy dataPrivacy;

  public static final String SERIALIZED_NAME_IDLE_SESSION_T_T_L_IN_SECONDS = "idleSessionTTLInSeconds";
  @SerializedName(SERIALIZED_NAME_IDLE_SESSION_T_T_L_IN_SECONDS)
  private Integer idleSessionTTLInSeconds;

  public static final String SERIALIZED_NAME_BOT_STATUS = "botStatus";
  @SerializedName(SERIALIZED_NAME_BOT_STATUS)
  private BotStatus botStatus;

  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  private OffsetDateTime creationDateTime;

  public static final String SERIALIZED_NAME_BOT_TAGS = "botTags";
  @SerializedName(SERIALIZED_NAME_BOT_TAGS)
  private Map botTags;

  public static final String SERIALIZED_NAME_TEST_BOT_ALIAS_TAGS = "testBotAliasTags";
  @SerializedName(SERIALIZED_NAME_TEST_BOT_ALIAS_TAGS)
  private Map testBotAliasTags;

  public static final String SERIALIZED_NAME_BOT_TYPE = "botType";
  @SerializedName(SERIALIZED_NAME_BOT_TYPE)
  private BotType botType;

  public static final String SERIALIZED_NAME_BOT_MEMBERS = "botMembers";
  @SerializedName(SERIALIZED_NAME_BOT_MEMBERS)
  private List botMembers;

  public CreateBotResponse() {
  }

  public CreateBotResponse botId(String botId) {
    this.botId = botId;
    return this;
  }

  /**
   * Get botId
   * @return botId
   */
  @javax.annotation.Nullable
  public String getBotId() {
    return botId;
  }

  public void setBotId(String botId) {
    this.botId = botId;
  }


  public CreateBotResponse botName(String botName) {
    this.botName = botName;
    return this;
  }

  /**
   * Get botName
   * @return botName
   */
  @javax.annotation.Nullable
  public String getBotName() {
    return botName;
  }

  public void setBotName(String botName) {
    this.botName = botName;
  }


  public CreateBotResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateBotResponse roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateBotResponse dataPrivacy(CreateBotResponseDataPrivacy dataPrivacy) {
    this.dataPrivacy = dataPrivacy;
    return this;
  }

  /**
   * Get dataPrivacy
   * @return dataPrivacy
   */
  @javax.annotation.Nullable
  public CreateBotResponseDataPrivacy getDataPrivacy() {
    return dataPrivacy;
  }

  public void setDataPrivacy(CreateBotResponseDataPrivacy dataPrivacy) {
    this.dataPrivacy = dataPrivacy;
  }


  public CreateBotResponse idleSessionTTLInSeconds(Integer idleSessionTTLInSeconds) {
    this.idleSessionTTLInSeconds = idleSessionTTLInSeconds;
    return this;
  }

  /**
   * Get idleSessionTTLInSeconds
   * @return idleSessionTTLInSeconds
   */
  @javax.annotation.Nullable
  public Integer getIdleSessionTTLInSeconds() {
    return idleSessionTTLInSeconds;
  }

  public void setIdleSessionTTLInSeconds(Integer idleSessionTTLInSeconds) {
    this.idleSessionTTLInSeconds = idleSessionTTLInSeconds;
  }


  public CreateBotResponse botStatus(BotStatus botStatus) {
    this.botStatus = botStatus;
    return this;
  }

  /**
   * Get botStatus
   * @return botStatus
   */
  @javax.annotation.Nullable
  public BotStatus getBotStatus() {
    return botStatus;
  }

  public void setBotStatus(BotStatus botStatus) {
    this.botStatus = botStatus;
  }


  public CreateBotResponse creationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * Get creationDateTime
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public CreateBotResponse botTags(Map botTags) {
    this.botTags = botTags;
    return this;
  }

  /**
   * Get botTags
   * @return botTags
   */
  @javax.annotation.Nullable
  public Map getBotTags() {
    return botTags;
  }

  public void setBotTags(Map botTags) {
    this.botTags = botTags;
  }


  public CreateBotResponse testBotAliasTags(Map testBotAliasTags) {
    this.testBotAliasTags = testBotAliasTags;
    return this;
  }

  /**
   * Get testBotAliasTags
   * @return testBotAliasTags
   */
  @javax.annotation.Nullable
  public Map getTestBotAliasTags() {
    return testBotAliasTags;
  }

  public void setTestBotAliasTags(Map testBotAliasTags) {
    this.testBotAliasTags = testBotAliasTags;
  }


  public CreateBotResponse botType(BotType botType) {
    this.botType = botType;
    return this;
  }

  /**
   * Get botType
   * @return botType
   */
  @javax.annotation.Nullable
  public BotType getBotType() {
    return botType;
  }

  public void setBotType(BotType botType) {
    this.botType = botType;
  }


  public CreateBotResponse botMembers(List botMembers) {
    this.botMembers = botMembers;
    return this;
  }

  /**
   * Get botMembers
   * @return botMembers
   */
  @javax.annotation.Nullable
  public List getBotMembers() {
    return botMembers;
  }

  public void setBotMembers(List botMembers) {
    this.botMembers = botMembers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBotResponse createBotResponse = (CreateBotResponse) o;
    return Objects.equals(this.botId, createBotResponse.botId) &&
        Objects.equals(this.botName, createBotResponse.botName) &&
        Objects.equals(this.description, createBotResponse.description) &&
        Objects.equals(this.roleArn, createBotResponse.roleArn) &&
        Objects.equals(this.dataPrivacy, createBotResponse.dataPrivacy) &&
        Objects.equals(this.idleSessionTTLInSeconds, createBotResponse.idleSessionTTLInSeconds) &&
        Objects.equals(this.botStatus, createBotResponse.botStatus) &&
        Objects.equals(this.creationDateTime, createBotResponse.creationDateTime) &&
        Objects.equals(this.botTags, createBotResponse.botTags) &&
        Objects.equals(this.testBotAliasTags, createBotResponse.testBotAliasTags) &&
        Objects.equals(this.botType, createBotResponse.botType) &&
        Objects.equals(this.botMembers, createBotResponse.botMembers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(botId, botName, description, roleArn, dataPrivacy, idleSessionTTLInSeconds, botStatus, creationDateTime, botTags, testBotAliasTags, botType, botMembers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBotResponse {\n");
    sb.append("    botId: ").append(toIndentedString(botId)).append("\n");
    sb.append("    botName: ").append(toIndentedString(botName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    dataPrivacy: ").append(toIndentedString(dataPrivacy)).append("\n");
    sb.append("    idleSessionTTLInSeconds: ").append(toIndentedString(idleSessionTTLInSeconds)).append("\n");
    sb.append("    botStatus: ").append(toIndentedString(botStatus)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    botTags: ").append(toIndentedString(botTags)).append("\n");
    sb.append("    testBotAliasTags: ").append(toIndentedString(testBotAliasTags)).append("\n");
    sb.append("    botType: ").append(toIndentedString(botType)).append("\n");
    sb.append("    botMembers: ").append(toIndentedString(botMembers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("botId");
    openapiFields.add("botName");
    openapiFields.add("description");
    openapiFields.add("roleArn");
    openapiFields.add("dataPrivacy");
    openapiFields.add("idleSessionTTLInSeconds");
    openapiFields.add("botStatus");
    openapiFields.add("creationDateTime");
    openapiFields.add("botTags");
    openapiFields.add("testBotAliasTags");
    openapiFields.add("botType");
    openapiFields.add("botMembers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBotResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBotResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBotResponse is not found in the empty JSON string", CreateBotResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBotResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBotResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `botId`
      if (jsonObj.get("botId") != null && !jsonObj.get("botId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("botId"));
      }
      // validate the optional field `botName`
      if (jsonObj.get("botName") != null && !jsonObj.get("botName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("botName"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `roleArn`
      if (jsonObj.get("roleArn") != null && !jsonObj.get("roleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("roleArn"));
      }
      // validate the optional field `dataPrivacy`
      if (jsonObj.get("dataPrivacy") != null && !jsonObj.get("dataPrivacy").isJsonNull()) {
        CreateBotResponseDataPrivacy.validateJsonElement(jsonObj.get("dataPrivacy"));
      }
      // validate the optional field `idleSessionTTLInSeconds`
      if (jsonObj.get("idleSessionTTLInSeconds") != null && !jsonObj.get("idleSessionTTLInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("idleSessionTTLInSeconds"));
      }
      // validate the optional field `botStatus`
      if (jsonObj.get("botStatus") != null && !jsonObj.get("botStatus").isJsonNull()) {
        BotStatus.validateJsonElement(jsonObj.get("botStatus"));
      }
      // validate the optional field `creationDateTime`
      if (jsonObj.get("creationDateTime") != null && !jsonObj.get("creationDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationDateTime"));
      }
      // validate the optional field `botTags`
      if (jsonObj.get("botTags") != null && !jsonObj.get("botTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("botTags"));
      }
      // validate the optional field `testBotAliasTags`
      if (jsonObj.get("testBotAliasTags") != null && !jsonObj.get("testBotAliasTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("testBotAliasTags"));
      }
      // validate the optional field `botType`
      if (jsonObj.get("botType") != null && !jsonObj.get("botType").isJsonNull()) {
        BotType.validateJsonElement(jsonObj.get("botType"));
      }
      // validate the optional field `botMembers`
      if (jsonObj.get("botMembers") != null && !jsonObj.get("botMembers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("botMembers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBotResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBotResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBotResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBotResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBotResponse>() {
           @Override
           public void write(JsonWriter out, CreateBotResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBotResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBotResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBotResponse
   * @throws IOException if the JSON string is invalid with respect to CreateBotResponse
   */
  public static CreateBotResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBotResponse.class);
  }

  /**
   * Convert an instance of CreateBotResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

