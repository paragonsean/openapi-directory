/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateSlotTypeRequestValueSelectionSettingAdvancedRecognitionSetting;
import org.openapitools.client.model.CreateSlotTypeRequestValueSelectionSettingRegexFilter;
import org.openapitools.client.model.SlotValueResolutionStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSlotTypeRequestValueSelectionSetting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSlotTypeRequestValueSelectionSetting {
  public static final String SERIALIZED_NAME_RESOLUTION_STRATEGY = "resolutionStrategy";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_STRATEGY)
  private SlotValueResolutionStrategy resolutionStrategy;

  public static final String SERIALIZED_NAME_REGEX_FILTER = "regexFilter";
  @SerializedName(SERIALIZED_NAME_REGEX_FILTER)
  private CreateSlotTypeRequestValueSelectionSettingRegexFilter regexFilter;

  public static final String SERIALIZED_NAME_ADVANCED_RECOGNITION_SETTING = "advancedRecognitionSetting";
  @SerializedName(SERIALIZED_NAME_ADVANCED_RECOGNITION_SETTING)
  private CreateSlotTypeRequestValueSelectionSettingAdvancedRecognitionSetting advancedRecognitionSetting;

  public CreateSlotTypeRequestValueSelectionSetting() {
  }

  public CreateSlotTypeRequestValueSelectionSetting resolutionStrategy(SlotValueResolutionStrategy resolutionStrategy) {
    this.resolutionStrategy = resolutionStrategy;
    return this;
  }

  /**
   * Get resolutionStrategy
   * @return resolutionStrategy
   */
  @javax.annotation.Nonnull
  public SlotValueResolutionStrategy getResolutionStrategy() {
    return resolutionStrategy;
  }

  public void setResolutionStrategy(SlotValueResolutionStrategy resolutionStrategy) {
    this.resolutionStrategy = resolutionStrategy;
  }


  public CreateSlotTypeRequestValueSelectionSetting regexFilter(CreateSlotTypeRequestValueSelectionSettingRegexFilter regexFilter) {
    this.regexFilter = regexFilter;
    return this;
  }

  /**
   * Get regexFilter
   * @return regexFilter
   */
  @javax.annotation.Nullable
  public CreateSlotTypeRequestValueSelectionSettingRegexFilter getRegexFilter() {
    return regexFilter;
  }

  public void setRegexFilter(CreateSlotTypeRequestValueSelectionSettingRegexFilter regexFilter) {
    this.regexFilter = regexFilter;
  }


  public CreateSlotTypeRequestValueSelectionSetting advancedRecognitionSetting(CreateSlotTypeRequestValueSelectionSettingAdvancedRecognitionSetting advancedRecognitionSetting) {
    this.advancedRecognitionSetting = advancedRecognitionSetting;
    return this;
  }

  /**
   * Get advancedRecognitionSetting
   * @return advancedRecognitionSetting
   */
  @javax.annotation.Nullable
  public CreateSlotTypeRequestValueSelectionSettingAdvancedRecognitionSetting getAdvancedRecognitionSetting() {
    return advancedRecognitionSetting;
  }

  public void setAdvancedRecognitionSetting(CreateSlotTypeRequestValueSelectionSettingAdvancedRecognitionSetting advancedRecognitionSetting) {
    this.advancedRecognitionSetting = advancedRecognitionSetting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSlotTypeRequestValueSelectionSetting createSlotTypeRequestValueSelectionSetting = (CreateSlotTypeRequestValueSelectionSetting) o;
    return Objects.equals(this.resolutionStrategy, createSlotTypeRequestValueSelectionSetting.resolutionStrategy) &&
        Objects.equals(this.regexFilter, createSlotTypeRequestValueSelectionSetting.regexFilter) &&
        Objects.equals(this.advancedRecognitionSetting, createSlotTypeRequestValueSelectionSetting.advancedRecognitionSetting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resolutionStrategy, regexFilter, advancedRecognitionSetting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSlotTypeRequestValueSelectionSetting {\n");
    sb.append("    resolutionStrategy: ").append(toIndentedString(resolutionStrategy)).append("\n");
    sb.append("    regexFilter: ").append(toIndentedString(regexFilter)).append("\n");
    sb.append("    advancedRecognitionSetting: ").append(toIndentedString(advancedRecognitionSetting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resolutionStrategy");
    openapiFields.add("regexFilter");
    openapiFields.add("advancedRecognitionSetting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("resolutionStrategy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSlotTypeRequestValueSelectionSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSlotTypeRequestValueSelectionSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSlotTypeRequestValueSelectionSetting is not found in the empty JSON string", CreateSlotTypeRequestValueSelectionSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSlotTypeRequestValueSelectionSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSlotTypeRequestValueSelectionSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSlotTypeRequestValueSelectionSetting.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `resolutionStrategy`
      SlotValueResolutionStrategy.validateJsonElement(jsonObj.get("resolutionStrategy"));
      // validate the optional field `regexFilter`
      if (jsonObj.get("regexFilter") != null && !jsonObj.get("regexFilter").isJsonNull()) {
        CreateSlotTypeRequestValueSelectionSettingRegexFilter.validateJsonElement(jsonObj.get("regexFilter"));
      }
      // validate the optional field `advancedRecognitionSetting`
      if (jsonObj.get("advancedRecognitionSetting") != null && !jsonObj.get("advancedRecognitionSetting").isJsonNull()) {
        CreateSlotTypeRequestValueSelectionSettingAdvancedRecognitionSetting.validateJsonElement(jsonObj.get("advancedRecognitionSetting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSlotTypeRequestValueSelectionSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSlotTypeRequestValueSelectionSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSlotTypeRequestValueSelectionSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSlotTypeRequestValueSelectionSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSlotTypeRequestValueSelectionSetting>() {
           @Override
           public void write(JsonWriter out, CreateSlotTypeRequestValueSelectionSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSlotTypeRequestValueSelectionSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSlotTypeRequestValueSelectionSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSlotTypeRequestValueSelectionSetting
   * @throws IOException if the JSON string is invalid with respect to CreateSlotTypeRequestValueSelectionSetting
   */
  public static CreateSlotTypeRequestValueSelectionSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSlotTypeRequestValueSelectionSetting.class);
  }

  /**
   * Convert an instance of CreateSlotTypeRequestValueSelectionSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

