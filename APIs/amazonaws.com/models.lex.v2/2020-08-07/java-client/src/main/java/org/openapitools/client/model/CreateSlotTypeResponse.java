/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateSlotTypeResponseCompositeSlotTypeSetting;
import org.openapitools.client.model.CreateSlotTypeResponseExternalSourceSetting;
import org.openapitools.client.model.CreateSlotTypeResponseValueSelectionSetting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSlotTypeResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSlotTypeResponse {
  public static final String SERIALIZED_NAME_SLOT_TYPE_ID = "slotTypeId";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_ID)
  private String slotTypeId;

  public static final String SERIALIZED_NAME_SLOT_TYPE_NAME = "slotTypeName";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_NAME)
  private String slotTypeName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SLOT_TYPE_VALUES = "slotTypeValues";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_VALUES)
  private List slotTypeValues;

  public static final String SERIALIZED_NAME_VALUE_SELECTION_SETTING = "valueSelectionSetting";
  @SerializedName(SERIALIZED_NAME_VALUE_SELECTION_SETTING)
  private CreateSlotTypeResponseValueSelectionSetting valueSelectionSetting;

  public static final String SERIALIZED_NAME_PARENT_SLOT_TYPE_SIGNATURE = "parentSlotTypeSignature";
  @SerializedName(SERIALIZED_NAME_PARENT_SLOT_TYPE_SIGNATURE)
  private String parentSlotTypeSignature;

  public static final String SERIALIZED_NAME_BOT_ID = "botId";
  @SerializedName(SERIALIZED_NAME_BOT_ID)
  private String botId;

  public static final String SERIALIZED_NAME_BOT_VERSION = "botVersion";
  @SerializedName(SERIALIZED_NAME_BOT_VERSION)
  private String botVersion;

  public static final String SERIALIZED_NAME_LOCALE_ID = "localeId";
  @SerializedName(SERIALIZED_NAME_LOCALE_ID)
  private String localeId;

  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  private OffsetDateTime creationDateTime;

  public static final String SERIALIZED_NAME_EXTERNAL_SOURCE_SETTING = "externalSourceSetting";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SOURCE_SETTING)
  private CreateSlotTypeResponseExternalSourceSetting externalSourceSetting;

  public static final String SERIALIZED_NAME_COMPOSITE_SLOT_TYPE_SETTING = "compositeSlotTypeSetting";
  @SerializedName(SERIALIZED_NAME_COMPOSITE_SLOT_TYPE_SETTING)
  private CreateSlotTypeResponseCompositeSlotTypeSetting compositeSlotTypeSetting;

  public CreateSlotTypeResponse() {
  }

  public CreateSlotTypeResponse slotTypeId(String slotTypeId) {
    this.slotTypeId = slotTypeId;
    return this;
  }

  /**
   * Get slotTypeId
   * @return slotTypeId
   */
  @javax.annotation.Nullable
  public String getSlotTypeId() {
    return slotTypeId;
  }

  public void setSlotTypeId(String slotTypeId) {
    this.slotTypeId = slotTypeId;
  }


  public CreateSlotTypeResponse slotTypeName(String slotTypeName) {
    this.slotTypeName = slotTypeName;
    return this;
  }

  /**
   * Get slotTypeName
   * @return slotTypeName
   */
  @javax.annotation.Nullable
  public String getSlotTypeName() {
    return slotTypeName;
  }

  public void setSlotTypeName(String slotTypeName) {
    this.slotTypeName = slotTypeName;
  }


  public CreateSlotTypeResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateSlotTypeResponse slotTypeValues(List slotTypeValues) {
    this.slotTypeValues = slotTypeValues;
    return this;
  }

  /**
   * Get slotTypeValues
   * @return slotTypeValues
   */
  @javax.annotation.Nullable
  public List getSlotTypeValues() {
    return slotTypeValues;
  }

  public void setSlotTypeValues(List slotTypeValues) {
    this.slotTypeValues = slotTypeValues;
  }


  public CreateSlotTypeResponse valueSelectionSetting(CreateSlotTypeResponseValueSelectionSetting valueSelectionSetting) {
    this.valueSelectionSetting = valueSelectionSetting;
    return this;
  }

  /**
   * Get valueSelectionSetting
   * @return valueSelectionSetting
   */
  @javax.annotation.Nullable
  public CreateSlotTypeResponseValueSelectionSetting getValueSelectionSetting() {
    return valueSelectionSetting;
  }

  public void setValueSelectionSetting(CreateSlotTypeResponseValueSelectionSetting valueSelectionSetting) {
    this.valueSelectionSetting = valueSelectionSetting;
  }


  public CreateSlotTypeResponse parentSlotTypeSignature(String parentSlotTypeSignature) {
    this.parentSlotTypeSignature = parentSlotTypeSignature;
    return this;
  }

  /**
   * Get parentSlotTypeSignature
   * @return parentSlotTypeSignature
   */
  @javax.annotation.Nullable
  public String getParentSlotTypeSignature() {
    return parentSlotTypeSignature;
  }

  public void setParentSlotTypeSignature(String parentSlotTypeSignature) {
    this.parentSlotTypeSignature = parentSlotTypeSignature;
  }


  public CreateSlotTypeResponse botId(String botId) {
    this.botId = botId;
    return this;
  }

  /**
   * Get botId
   * @return botId
   */
  @javax.annotation.Nullable
  public String getBotId() {
    return botId;
  }

  public void setBotId(String botId) {
    this.botId = botId;
  }


  public CreateSlotTypeResponse botVersion(String botVersion) {
    this.botVersion = botVersion;
    return this;
  }

  /**
   * Get botVersion
   * @return botVersion
   */
  @javax.annotation.Nullable
  public String getBotVersion() {
    return botVersion;
  }

  public void setBotVersion(String botVersion) {
    this.botVersion = botVersion;
  }


  public CreateSlotTypeResponse localeId(String localeId) {
    this.localeId = localeId;
    return this;
  }

  /**
   * Get localeId
   * @return localeId
   */
  @javax.annotation.Nullable
  public String getLocaleId() {
    return localeId;
  }

  public void setLocaleId(String localeId) {
    this.localeId = localeId;
  }


  public CreateSlotTypeResponse creationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * Get creationDateTime
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public CreateSlotTypeResponse externalSourceSetting(CreateSlotTypeResponseExternalSourceSetting externalSourceSetting) {
    this.externalSourceSetting = externalSourceSetting;
    return this;
  }

  /**
   * Get externalSourceSetting
   * @return externalSourceSetting
   */
  @javax.annotation.Nullable
  public CreateSlotTypeResponseExternalSourceSetting getExternalSourceSetting() {
    return externalSourceSetting;
  }

  public void setExternalSourceSetting(CreateSlotTypeResponseExternalSourceSetting externalSourceSetting) {
    this.externalSourceSetting = externalSourceSetting;
  }


  public CreateSlotTypeResponse compositeSlotTypeSetting(CreateSlotTypeResponseCompositeSlotTypeSetting compositeSlotTypeSetting) {
    this.compositeSlotTypeSetting = compositeSlotTypeSetting;
    return this;
  }

  /**
   * Get compositeSlotTypeSetting
   * @return compositeSlotTypeSetting
   */
  @javax.annotation.Nullable
  public CreateSlotTypeResponseCompositeSlotTypeSetting getCompositeSlotTypeSetting() {
    return compositeSlotTypeSetting;
  }

  public void setCompositeSlotTypeSetting(CreateSlotTypeResponseCompositeSlotTypeSetting compositeSlotTypeSetting) {
    this.compositeSlotTypeSetting = compositeSlotTypeSetting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSlotTypeResponse createSlotTypeResponse = (CreateSlotTypeResponse) o;
    return Objects.equals(this.slotTypeId, createSlotTypeResponse.slotTypeId) &&
        Objects.equals(this.slotTypeName, createSlotTypeResponse.slotTypeName) &&
        Objects.equals(this.description, createSlotTypeResponse.description) &&
        Objects.equals(this.slotTypeValues, createSlotTypeResponse.slotTypeValues) &&
        Objects.equals(this.valueSelectionSetting, createSlotTypeResponse.valueSelectionSetting) &&
        Objects.equals(this.parentSlotTypeSignature, createSlotTypeResponse.parentSlotTypeSignature) &&
        Objects.equals(this.botId, createSlotTypeResponse.botId) &&
        Objects.equals(this.botVersion, createSlotTypeResponse.botVersion) &&
        Objects.equals(this.localeId, createSlotTypeResponse.localeId) &&
        Objects.equals(this.creationDateTime, createSlotTypeResponse.creationDateTime) &&
        Objects.equals(this.externalSourceSetting, createSlotTypeResponse.externalSourceSetting) &&
        Objects.equals(this.compositeSlotTypeSetting, createSlotTypeResponse.compositeSlotTypeSetting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(slotTypeId, slotTypeName, description, slotTypeValues, valueSelectionSetting, parentSlotTypeSignature, botId, botVersion, localeId, creationDateTime, externalSourceSetting, compositeSlotTypeSetting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSlotTypeResponse {\n");
    sb.append("    slotTypeId: ").append(toIndentedString(slotTypeId)).append("\n");
    sb.append("    slotTypeName: ").append(toIndentedString(slotTypeName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    slotTypeValues: ").append(toIndentedString(slotTypeValues)).append("\n");
    sb.append("    valueSelectionSetting: ").append(toIndentedString(valueSelectionSetting)).append("\n");
    sb.append("    parentSlotTypeSignature: ").append(toIndentedString(parentSlotTypeSignature)).append("\n");
    sb.append("    botId: ").append(toIndentedString(botId)).append("\n");
    sb.append("    botVersion: ").append(toIndentedString(botVersion)).append("\n");
    sb.append("    localeId: ").append(toIndentedString(localeId)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    externalSourceSetting: ").append(toIndentedString(externalSourceSetting)).append("\n");
    sb.append("    compositeSlotTypeSetting: ").append(toIndentedString(compositeSlotTypeSetting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("slotTypeId");
    openapiFields.add("slotTypeName");
    openapiFields.add("description");
    openapiFields.add("slotTypeValues");
    openapiFields.add("valueSelectionSetting");
    openapiFields.add("parentSlotTypeSignature");
    openapiFields.add("botId");
    openapiFields.add("botVersion");
    openapiFields.add("localeId");
    openapiFields.add("creationDateTime");
    openapiFields.add("externalSourceSetting");
    openapiFields.add("compositeSlotTypeSetting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSlotTypeResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSlotTypeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSlotTypeResponse is not found in the empty JSON string", CreateSlotTypeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSlotTypeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSlotTypeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `slotTypeId`
      if (jsonObj.get("slotTypeId") != null && !jsonObj.get("slotTypeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotTypeId"));
      }
      // validate the optional field `slotTypeName`
      if (jsonObj.get("slotTypeName") != null && !jsonObj.get("slotTypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotTypeName"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `slotTypeValues`
      if (jsonObj.get("slotTypeValues") != null && !jsonObj.get("slotTypeValues").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("slotTypeValues"));
      }
      // validate the optional field `valueSelectionSetting`
      if (jsonObj.get("valueSelectionSetting") != null && !jsonObj.get("valueSelectionSetting").isJsonNull()) {
        CreateSlotTypeResponseValueSelectionSetting.validateJsonElement(jsonObj.get("valueSelectionSetting"));
      }
      // validate the optional field `parentSlotTypeSignature`
      if (jsonObj.get("parentSlotTypeSignature") != null && !jsonObj.get("parentSlotTypeSignature").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("parentSlotTypeSignature"));
      }
      // validate the optional field `botId`
      if (jsonObj.get("botId") != null && !jsonObj.get("botId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("botId"));
      }
      // validate the optional field `botVersion`
      if (jsonObj.get("botVersion") != null && !jsonObj.get("botVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("botVersion"));
      }
      // validate the optional field `localeId`
      if (jsonObj.get("localeId") != null && !jsonObj.get("localeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("localeId"));
      }
      // validate the optional field `creationDateTime`
      if (jsonObj.get("creationDateTime") != null && !jsonObj.get("creationDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationDateTime"));
      }
      // validate the optional field `externalSourceSetting`
      if (jsonObj.get("externalSourceSetting") != null && !jsonObj.get("externalSourceSetting").isJsonNull()) {
        CreateSlotTypeResponseExternalSourceSetting.validateJsonElement(jsonObj.get("externalSourceSetting"));
      }
      // validate the optional field `compositeSlotTypeSetting`
      if (jsonObj.get("compositeSlotTypeSetting") != null && !jsonObj.get("compositeSlotTypeSetting").isJsonNull()) {
        CreateSlotTypeResponseCompositeSlotTypeSetting.validateJsonElement(jsonObj.get("compositeSlotTypeSetting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSlotTypeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSlotTypeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSlotTypeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSlotTypeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSlotTypeResponse>() {
           @Override
           public void write(JsonWriter out, CreateSlotTypeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSlotTypeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSlotTypeResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSlotTypeResponse
   * @throws IOException if the JSON string is invalid with respect to CreateSlotTypeResponse
   */
  public static CreateSlotTypeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSlotTypeResponse.class);
  }

  /**
   * Convert an instance of CreateSlotTypeResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

