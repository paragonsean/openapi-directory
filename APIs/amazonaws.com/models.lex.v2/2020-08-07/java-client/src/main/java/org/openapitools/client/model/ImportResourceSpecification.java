/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CustomVocabularyImportSpecification;
import org.openapitools.client.model.StartImportRequestResourceSpecificationBotImportSpecification;
import org.openapitools.client.model.StartImportRequestResourceSpecificationBotLocaleImportSpecification;
import org.openapitools.client.model.StartImportRequestResourceSpecificationTestSetImportResourceSpecification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the bot or bot locale that you want to import. You can specify the &lt;code&gt;botImportSpecification&lt;/code&gt; or the &lt;code&gt;botLocaleImportSpecification&lt;/code&gt;, but not both.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportResourceSpecification {
  public static final String SERIALIZED_NAME_BOT_IMPORT_SPECIFICATION = "botImportSpecification";
  @SerializedName(SERIALIZED_NAME_BOT_IMPORT_SPECIFICATION)
  private StartImportRequestResourceSpecificationBotImportSpecification botImportSpecification;

  public static final String SERIALIZED_NAME_BOT_LOCALE_IMPORT_SPECIFICATION = "botLocaleImportSpecification";
  @SerializedName(SERIALIZED_NAME_BOT_LOCALE_IMPORT_SPECIFICATION)
  private StartImportRequestResourceSpecificationBotLocaleImportSpecification botLocaleImportSpecification;

  public static final String SERIALIZED_NAME_CUSTOM_VOCABULARY_IMPORT_SPECIFICATION = "customVocabularyImportSpecification";
  @SerializedName(SERIALIZED_NAME_CUSTOM_VOCABULARY_IMPORT_SPECIFICATION)
  private CustomVocabularyImportSpecification customVocabularyImportSpecification;

  public static final String SERIALIZED_NAME_TEST_SET_IMPORT_RESOURCE_SPECIFICATION = "testSetImportResourceSpecification";
  @SerializedName(SERIALIZED_NAME_TEST_SET_IMPORT_RESOURCE_SPECIFICATION)
  private StartImportRequestResourceSpecificationTestSetImportResourceSpecification testSetImportResourceSpecification;

  public ImportResourceSpecification() {
  }

  public ImportResourceSpecification botImportSpecification(StartImportRequestResourceSpecificationBotImportSpecification botImportSpecification) {
    this.botImportSpecification = botImportSpecification;
    return this;
  }

  /**
   * Get botImportSpecification
   * @return botImportSpecification
   */
  @javax.annotation.Nullable
  public StartImportRequestResourceSpecificationBotImportSpecification getBotImportSpecification() {
    return botImportSpecification;
  }

  public void setBotImportSpecification(StartImportRequestResourceSpecificationBotImportSpecification botImportSpecification) {
    this.botImportSpecification = botImportSpecification;
  }


  public ImportResourceSpecification botLocaleImportSpecification(StartImportRequestResourceSpecificationBotLocaleImportSpecification botLocaleImportSpecification) {
    this.botLocaleImportSpecification = botLocaleImportSpecification;
    return this;
  }

  /**
   * Get botLocaleImportSpecification
   * @return botLocaleImportSpecification
   */
  @javax.annotation.Nullable
  public StartImportRequestResourceSpecificationBotLocaleImportSpecification getBotLocaleImportSpecification() {
    return botLocaleImportSpecification;
  }

  public void setBotLocaleImportSpecification(StartImportRequestResourceSpecificationBotLocaleImportSpecification botLocaleImportSpecification) {
    this.botLocaleImportSpecification = botLocaleImportSpecification;
  }


  public ImportResourceSpecification customVocabularyImportSpecification(CustomVocabularyImportSpecification customVocabularyImportSpecification) {
    this.customVocabularyImportSpecification = customVocabularyImportSpecification;
    return this;
  }

  /**
   * Get customVocabularyImportSpecification
   * @return customVocabularyImportSpecification
   */
  @javax.annotation.Nullable
  public CustomVocabularyImportSpecification getCustomVocabularyImportSpecification() {
    return customVocabularyImportSpecification;
  }

  public void setCustomVocabularyImportSpecification(CustomVocabularyImportSpecification customVocabularyImportSpecification) {
    this.customVocabularyImportSpecification = customVocabularyImportSpecification;
  }


  public ImportResourceSpecification testSetImportResourceSpecification(StartImportRequestResourceSpecificationTestSetImportResourceSpecification testSetImportResourceSpecification) {
    this.testSetImportResourceSpecification = testSetImportResourceSpecification;
    return this;
  }

  /**
   * Get testSetImportResourceSpecification
   * @return testSetImportResourceSpecification
   */
  @javax.annotation.Nullable
  public StartImportRequestResourceSpecificationTestSetImportResourceSpecification getTestSetImportResourceSpecification() {
    return testSetImportResourceSpecification;
  }

  public void setTestSetImportResourceSpecification(StartImportRequestResourceSpecificationTestSetImportResourceSpecification testSetImportResourceSpecification) {
    this.testSetImportResourceSpecification = testSetImportResourceSpecification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportResourceSpecification importResourceSpecification = (ImportResourceSpecification) o;
    return Objects.equals(this.botImportSpecification, importResourceSpecification.botImportSpecification) &&
        Objects.equals(this.botLocaleImportSpecification, importResourceSpecification.botLocaleImportSpecification) &&
        Objects.equals(this.customVocabularyImportSpecification, importResourceSpecification.customVocabularyImportSpecification) &&
        Objects.equals(this.testSetImportResourceSpecification, importResourceSpecification.testSetImportResourceSpecification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(botImportSpecification, botLocaleImportSpecification, customVocabularyImportSpecification, testSetImportResourceSpecification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportResourceSpecification {\n");
    sb.append("    botImportSpecification: ").append(toIndentedString(botImportSpecification)).append("\n");
    sb.append("    botLocaleImportSpecification: ").append(toIndentedString(botLocaleImportSpecification)).append("\n");
    sb.append("    customVocabularyImportSpecification: ").append(toIndentedString(customVocabularyImportSpecification)).append("\n");
    sb.append("    testSetImportResourceSpecification: ").append(toIndentedString(testSetImportResourceSpecification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("botImportSpecification");
    openapiFields.add("botLocaleImportSpecification");
    openapiFields.add("customVocabularyImportSpecification");
    openapiFields.add("testSetImportResourceSpecification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportResourceSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportResourceSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportResourceSpecification is not found in the empty JSON string", ImportResourceSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportResourceSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportResourceSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `botImportSpecification`
      if (jsonObj.get("botImportSpecification") != null && !jsonObj.get("botImportSpecification").isJsonNull()) {
        StartImportRequestResourceSpecificationBotImportSpecification.validateJsonElement(jsonObj.get("botImportSpecification"));
      }
      // validate the optional field `botLocaleImportSpecification`
      if (jsonObj.get("botLocaleImportSpecification") != null && !jsonObj.get("botLocaleImportSpecification").isJsonNull()) {
        StartImportRequestResourceSpecificationBotLocaleImportSpecification.validateJsonElement(jsonObj.get("botLocaleImportSpecification"));
      }
      // validate the optional field `customVocabularyImportSpecification`
      if (jsonObj.get("customVocabularyImportSpecification") != null && !jsonObj.get("customVocabularyImportSpecification").isJsonNull()) {
        CustomVocabularyImportSpecification.validateJsonElement(jsonObj.get("customVocabularyImportSpecification"));
      }
      // validate the optional field `testSetImportResourceSpecification`
      if (jsonObj.get("testSetImportResourceSpecification") != null && !jsonObj.get("testSetImportResourceSpecification").isJsonNull()) {
        StartImportRequestResourceSpecificationTestSetImportResourceSpecification.validateJsonElement(jsonObj.get("testSetImportResourceSpecification"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportResourceSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportResourceSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportResourceSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportResourceSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportResourceSpecification>() {
           @Override
           public void write(JsonWriter out, ImportResourceSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportResourceSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportResourceSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportResourceSpecification
   * @throws IOException if the JSON string is invalid with respect to ImportResourceSpecification
   */
  public static ImportResourceSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportResourceSpecification.class);
  }

  /**
   * Convert an instance of ImportResourceSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

