/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssociatedTranscriptFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchAssociatedTranscriptsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchAssociatedTranscriptsRequest {
  /**
   * How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.
   */
  @JsonAdapter(SearchOrderEnum.Adapter.class)
  public enum SearchOrderEnum {
    ASCENDING("Ascending"),
    
    DESCENDING("Descending");

    private String value;

    SearchOrderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchOrderEnum fromValue(String value) {
      for (SearchOrderEnum b : SearchOrderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SearchOrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchOrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchOrderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SearchOrderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SearchOrderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEARCH_ORDER = "searchOrder";
  @SerializedName(SERIALIZED_NAME_SEARCH_ORDER)
  private SearchOrderEnum searchOrder;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<AssociatedTranscriptFilter> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_INDEX = "nextIndex";
  @SerializedName(SERIALIZED_NAME_NEXT_INDEX)
  private Integer nextIndex;

  public SearchAssociatedTranscriptsRequest() {
  }

  public SearchAssociatedTranscriptsRequest searchOrder(SearchOrderEnum searchOrder) {
    this.searchOrder = searchOrder;
    return this;
  }

  /**
   * How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.
   * @return searchOrder
   */
  @javax.annotation.Nullable
  public SearchOrderEnum getSearchOrder() {
    return searchOrder;
  }

  public void setSearchOrder(SearchOrderEnum searchOrder) {
    this.searchOrder = searchOrder;
  }


  public SearchAssociatedTranscriptsRequest filters(List<AssociatedTranscriptFilter> filters) {
    this.filters = filters;
    return this;
  }

  public SearchAssociatedTranscriptsRequest addFiltersItem(AssociatedTranscriptFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * A list of filter objects.
   * @return filters
   */
  @javax.annotation.Nonnull
  public List<AssociatedTranscriptFilter> getFilters() {
    return filters;
  }

  public void setFilters(List<AssociatedTranscriptFilter> filters) {
    this.filters = filters;
  }


  public SearchAssociatedTranscriptsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
   * minimum: 1
   * maximum: 1000
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public SearchAssociatedTranscriptsRequest nextIndex(Integer nextIndex) {
    this.nextIndex = nextIndex;
    return this;
  }

  /**
   * If the response from the SearchAssociatedTranscriptsRequest operation contains more results than specified in the maxResults parameter, an index is returned in the response. Use that index in the nextIndex parameter to return the next page of results.
   * minimum: 0
   * maximum: 10000000
   * @return nextIndex
   */
  @javax.annotation.Nullable
  public Integer getNextIndex() {
    return nextIndex;
  }

  public void setNextIndex(Integer nextIndex) {
    this.nextIndex = nextIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchAssociatedTranscriptsRequest searchAssociatedTranscriptsRequest = (SearchAssociatedTranscriptsRequest) o;
    return Objects.equals(this.searchOrder, searchAssociatedTranscriptsRequest.searchOrder) &&
        Objects.equals(this.filters, searchAssociatedTranscriptsRequest.filters) &&
        Objects.equals(this.maxResults, searchAssociatedTranscriptsRequest.maxResults) &&
        Objects.equals(this.nextIndex, searchAssociatedTranscriptsRequest.nextIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(searchOrder, filters, maxResults, nextIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchAssociatedTranscriptsRequest {\n");
    sb.append("    searchOrder: ").append(toIndentedString(searchOrder)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextIndex: ").append(toIndentedString(nextIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("searchOrder");
    openapiFields.add("filters");
    openapiFields.add("maxResults");
    openapiFields.add("nextIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("filters");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchAssociatedTranscriptsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchAssociatedTranscriptsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchAssociatedTranscriptsRequest is not found in the empty JSON string", SearchAssociatedTranscriptsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchAssociatedTranscriptsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchAssociatedTranscriptsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchAssociatedTranscriptsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("searchOrder") != null && !jsonObj.get("searchOrder").isJsonNull()) && !jsonObj.get("searchOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchOrder").toString()));
      }
      // validate the optional field `searchOrder`
      if (jsonObj.get("searchOrder") != null && !jsonObj.get("searchOrder").isJsonNull()) {
        SearchOrderEnum.validateJsonElement(jsonObj.get("searchOrder"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("filters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
      }

      JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
      // validate the required field `filters` (array)
      for (int i = 0; i < jsonArrayfilters.size(); i++) {
        AssociatedTranscriptFilter.validateJsonElement(jsonArrayfilters.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchAssociatedTranscriptsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchAssociatedTranscriptsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchAssociatedTranscriptsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchAssociatedTranscriptsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchAssociatedTranscriptsRequest>() {
           @Override
           public void write(JsonWriter out, SearchAssociatedTranscriptsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchAssociatedTranscriptsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchAssociatedTranscriptsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchAssociatedTranscriptsRequest
   * @throws IOException if the JSON string is invalid with respect to SearchAssociatedTranscriptsRequest
   */
  public static SearchAssociatedTranscriptsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchAssociatedTranscriptsRequest.class);
  }

  /**
   * Convert an instance of SearchAssociatedTranscriptsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

