/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExecutionErrorDetails;
import org.openapitools.client.model.TestResultMatchStatus;
import org.openapitools.client.model.UserTurnResultActualOutput;
import org.openapitools.client.model.UserTurnResultConversationLevelResult;
import org.openapitools.client.model.UserTurnResultExpectedOutput;
import org.openapitools.client.model.UserTurnResultInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestSetTurnResultUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestSetTurnResultUser {
  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private UserTurnResultInput input;

  public static final String SERIALIZED_NAME_EXPECTED_OUTPUT = "expectedOutput";
  @SerializedName(SERIALIZED_NAME_EXPECTED_OUTPUT)
  private UserTurnResultExpectedOutput expectedOutput;

  public static final String SERIALIZED_NAME_ACTUAL_OUTPUT = "actualOutput";
  @SerializedName(SERIALIZED_NAME_ACTUAL_OUTPUT)
  private UserTurnResultActualOutput actualOutput;

  public static final String SERIALIZED_NAME_ERROR_DETAILS = "errorDetails";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAILS)
  private ExecutionErrorDetails errorDetails;

  public static final String SERIALIZED_NAME_END_TO_END_RESULT = "endToEndResult";
  @SerializedName(SERIALIZED_NAME_END_TO_END_RESULT)
  private TestResultMatchStatus endToEndResult;

  public static final String SERIALIZED_NAME_INTENT_MATCH_RESULT = "intentMatchResult";
  @SerializedName(SERIALIZED_NAME_INTENT_MATCH_RESULT)
  private TestResultMatchStatus intentMatchResult;

  public static final String SERIALIZED_NAME_SLOT_MATCH_RESULT = "slotMatchResult";
  @SerializedName(SERIALIZED_NAME_SLOT_MATCH_RESULT)
  private TestResultMatchStatus slotMatchResult;

  public static final String SERIALIZED_NAME_SPEECH_TRANSCRIPTION_RESULT = "speechTranscriptionResult";
  @SerializedName(SERIALIZED_NAME_SPEECH_TRANSCRIPTION_RESULT)
  private TestResultMatchStatus speechTranscriptionResult;

  public static final String SERIALIZED_NAME_CONVERSATION_LEVEL_RESULT = "conversationLevelResult";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_LEVEL_RESULT)
  private UserTurnResultConversationLevelResult conversationLevelResult;

  public TestSetTurnResultUser() {
  }

  public TestSetTurnResultUser input(UserTurnResultInput input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nonnull
  public UserTurnResultInput getInput() {
    return input;
  }

  public void setInput(UserTurnResultInput input) {
    this.input = input;
  }


  public TestSetTurnResultUser expectedOutput(UserTurnResultExpectedOutput expectedOutput) {
    this.expectedOutput = expectedOutput;
    return this;
  }

  /**
   * Get expectedOutput
   * @return expectedOutput
   */
  @javax.annotation.Nonnull
  public UserTurnResultExpectedOutput getExpectedOutput() {
    return expectedOutput;
  }

  public void setExpectedOutput(UserTurnResultExpectedOutput expectedOutput) {
    this.expectedOutput = expectedOutput;
  }


  public TestSetTurnResultUser actualOutput(UserTurnResultActualOutput actualOutput) {
    this.actualOutput = actualOutput;
    return this;
  }

  /**
   * Get actualOutput
   * @return actualOutput
   */
  @javax.annotation.Nullable
  public UserTurnResultActualOutput getActualOutput() {
    return actualOutput;
  }

  public void setActualOutput(UserTurnResultActualOutput actualOutput) {
    this.actualOutput = actualOutput;
  }


  public TestSetTurnResultUser errorDetails(ExecutionErrorDetails errorDetails) {
    this.errorDetails = errorDetails;
    return this;
  }

  /**
   * Get errorDetails
   * @return errorDetails
   */
  @javax.annotation.Nullable
  public ExecutionErrorDetails getErrorDetails() {
    return errorDetails;
  }

  public void setErrorDetails(ExecutionErrorDetails errorDetails) {
    this.errorDetails = errorDetails;
  }


  public TestSetTurnResultUser endToEndResult(TestResultMatchStatus endToEndResult) {
    this.endToEndResult = endToEndResult;
    return this;
  }

  /**
   * Get endToEndResult
   * @return endToEndResult
   */
  @javax.annotation.Nullable
  public TestResultMatchStatus getEndToEndResult() {
    return endToEndResult;
  }

  public void setEndToEndResult(TestResultMatchStatus endToEndResult) {
    this.endToEndResult = endToEndResult;
  }


  public TestSetTurnResultUser intentMatchResult(TestResultMatchStatus intentMatchResult) {
    this.intentMatchResult = intentMatchResult;
    return this;
  }

  /**
   * Get intentMatchResult
   * @return intentMatchResult
   */
  @javax.annotation.Nullable
  public TestResultMatchStatus getIntentMatchResult() {
    return intentMatchResult;
  }

  public void setIntentMatchResult(TestResultMatchStatus intentMatchResult) {
    this.intentMatchResult = intentMatchResult;
  }


  public TestSetTurnResultUser slotMatchResult(TestResultMatchStatus slotMatchResult) {
    this.slotMatchResult = slotMatchResult;
    return this;
  }

  /**
   * Get slotMatchResult
   * @return slotMatchResult
   */
  @javax.annotation.Nullable
  public TestResultMatchStatus getSlotMatchResult() {
    return slotMatchResult;
  }

  public void setSlotMatchResult(TestResultMatchStatus slotMatchResult) {
    this.slotMatchResult = slotMatchResult;
  }


  public TestSetTurnResultUser speechTranscriptionResult(TestResultMatchStatus speechTranscriptionResult) {
    this.speechTranscriptionResult = speechTranscriptionResult;
    return this;
  }

  /**
   * Get speechTranscriptionResult
   * @return speechTranscriptionResult
   */
  @javax.annotation.Nullable
  public TestResultMatchStatus getSpeechTranscriptionResult() {
    return speechTranscriptionResult;
  }

  public void setSpeechTranscriptionResult(TestResultMatchStatus speechTranscriptionResult) {
    this.speechTranscriptionResult = speechTranscriptionResult;
  }


  public TestSetTurnResultUser conversationLevelResult(UserTurnResultConversationLevelResult conversationLevelResult) {
    this.conversationLevelResult = conversationLevelResult;
    return this;
  }

  /**
   * Get conversationLevelResult
   * @return conversationLevelResult
   */
  @javax.annotation.Nullable
  public UserTurnResultConversationLevelResult getConversationLevelResult() {
    return conversationLevelResult;
  }

  public void setConversationLevelResult(UserTurnResultConversationLevelResult conversationLevelResult) {
    this.conversationLevelResult = conversationLevelResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestSetTurnResultUser testSetTurnResultUser = (TestSetTurnResultUser) o;
    return Objects.equals(this.input, testSetTurnResultUser.input) &&
        Objects.equals(this.expectedOutput, testSetTurnResultUser.expectedOutput) &&
        Objects.equals(this.actualOutput, testSetTurnResultUser.actualOutput) &&
        Objects.equals(this.errorDetails, testSetTurnResultUser.errorDetails) &&
        Objects.equals(this.endToEndResult, testSetTurnResultUser.endToEndResult) &&
        Objects.equals(this.intentMatchResult, testSetTurnResultUser.intentMatchResult) &&
        Objects.equals(this.slotMatchResult, testSetTurnResultUser.slotMatchResult) &&
        Objects.equals(this.speechTranscriptionResult, testSetTurnResultUser.speechTranscriptionResult) &&
        Objects.equals(this.conversationLevelResult, testSetTurnResultUser.conversationLevelResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(input, expectedOutput, actualOutput, errorDetails, endToEndResult, intentMatchResult, slotMatchResult, speechTranscriptionResult, conversationLevelResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestSetTurnResultUser {\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    expectedOutput: ").append(toIndentedString(expectedOutput)).append("\n");
    sb.append("    actualOutput: ").append(toIndentedString(actualOutput)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("    endToEndResult: ").append(toIndentedString(endToEndResult)).append("\n");
    sb.append("    intentMatchResult: ").append(toIndentedString(intentMatchResult)).append("\n");
    sb.append("    slotMatchResult: ").append(toIndentedString(slotMatchResult)).append("\n");
    sb.append("    speechTranscriptionResult: ").append(toIndentedString(speechTranscriptionResult)).append("\n");
    sb.append("    conversationLevelResult: ").append(toIndentedString(conversationLevelResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("input");
    openapiFields.add("expectedOutput");
    openapiFields.add("actualOutput");
    openapiFields.add("errorDetails");
    openapiFields.add("endToEndResult");
    openapiFields.add("intentMatchResult");
    openapiFields.add("slotMatchResult");
    openapiFields.add("speechTranscriptionResult");
    openapiFields.add("conversationLevelResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("input");
    openapiRequiredFields.add("expectedOutput");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestSetTurnResultUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestSetTurnResultUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestSetTurnResultUser is not found in the empty JSON string", TestSetTurnResultUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestSetTurnResultUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestSetTurnResultUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestSetTurnResultUser.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `input`
      UserTurnResultInput.validateJsonElement(jsonObj.get("input"));
      // validate the required field `expectedOutput`
      UserTurnResultExpectedOutput.validateJsonElement(jsonObj.get("expectedOutput"));
      // validate the optional field `actualOutput`
      if (jsonObj.get("actualOutput") != null && !jsonObj.get("actualOutput").isJsonNull()) {
        UserTurnResultActualOutput.validateJsonElement(jsonObj.get("actualOutput"));
      }
      // validate the optional field `errorDetails`
      if (jsonObj.get("errorDetails") != null && !jsonObj.get("errorDetails").isJsonNull()) {
        ExecutionErrorDetails.validateJsonElement(jsonObj.get("errorDetails"));
      }
      // validate the optional field `endToEndResult`
      if (jsonObj.get("endToEndResult") != null && !jsonObj.get("endToEndResult").isJsonNull()) {
        TestResultMatchStatus.validateJsonElement(jsonObj.get("endToEndResult"));
      }
      // validate the optional field `intentMatchResult`
      if (jsonObj.get("intentMatchResult") != null && !jsonObj.get("intentMatchResult").isJsonNull()) {
        TestResultMatchStatus.validateJsonElement(jsonObj.get("intentMatchResult"));
      }
      // validate the optional field `slotMatchResult`
      if (jsonObj.get("slotMatchResult") != null && !jsonObj.get("slotMatchResult").isJsonNull()) {
        TestResultMatchStatus.validateJsonElement(jsonObj.get("slotMatchResult"));
      }
      // validate the optional field `speechTranscriptionResult`
      if (jsonObj.get("speechTranscriptionResult") != null && !jsonObj.get("speechTranscriptionResult").isJsonNull()) {
        TestResultMatchStatus.validateJsonElement(jsonObj.get("speechTranscriptionResult"));
      }
      // validate the optional field `conversationLevelResult`
      if (jsonObj.get("conversationLevelResult") != null && !jsonObj.get("conversationLevelResult").isJsonNull()) {
        UserTurnResultConversationLevelResult.validateJsonElement(jsonObj.get("conversationLevelResult"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestSetTurnResultUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestSetTurnResultUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestSetTurnResultUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestSetTurnResultUser.class));

       return (TypeAdapter<T>) new TypeAdapter<TestSetTurnResultUser>() {
           @Override
           public void write(JsonWriter out, TestSetTurnResultUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestSetTurnResultUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestSetTurnResultUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestSetTurnResultUser
   * @throws IOException if the JSON string is invalid with respect to TestSetTurnResultUser
   */
  public static TestSetTurnResultUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestSetTurnResultUser.class);
  }

  /**
   * Convert an instance of TestSetTurnResultUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

