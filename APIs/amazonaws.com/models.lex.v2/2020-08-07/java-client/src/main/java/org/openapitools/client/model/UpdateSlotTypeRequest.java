/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateSlotTypeRequestCompositeSlotTypeSetting;
import org.openapitools.client.model.CreateSlotTypeRequestExternalSourceSetting;
import org.openapitools.client.model.CreateSlotTypeRequestValueSelectionSetting;
import org.openapitools.client.model.SlotTypeValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSlotTypeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSlotTypeRequest {
  public static final String SERIALIZED_NAME_SLOT_TYPE_NAME = "slotTypeName";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_NAME)
  private String slotTypeName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SLOT_TYPE_VALUES = "slotTypeValues";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_VALUES)
  private List<SlotTypeValue> slotTypeValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE_SELECTION_SETTING = "valueSelectionSetting";
  @SerializedName(SERIALIZED_NAME_VALUE_SELECTION_SETTING)
  private CreateSlotTypeRequestValueSelectionSetting valueSelectionSetting;

  public static final String SERIALIZED_NAME_PARENT_SLOT_TYPE_SIGNATURE = "parentSlotTypeSignature";
  @SerializedName(SERIALIZED_NAME_PARENT_SLOT_TYPE_SIGNATURE)
  private String parentSlotTypeSignature;

  public static final String SERIALIZED_NAME_EXTERNAL_SOURCE_SETTING = "externalSourceSetting";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SOURCE_SETTING)
  private CreateSlotTypeRequestExternalSourceSetting externalSourceSetting;

  public static final String SERIALIZED_NAME_COMPOSITE_SLOT_TYPE_SETTING = "compositeSlotTypeSetting";
  @SerializedName(SERIALIZED_NAME_COMPOSITE_SLOT_TYPE_SETTING)
  private CreateSlotTypeRequestCompositeSlotTypeSetting compositeSlotTypeSetting;

  public UpdateSlotTypeRequest() {
  }

  public UpdateSlotTypeRequest slotTypeName(String slotTypeName) {
    this.slotTypeName = slotTypeName;
    return this;
  }

  /**
   * The new name of the slot type.
   * @return slotTypeName
   */
  @javax.annotation.Nonnull
  public String getSlotTypeName() {
    return slotTypeName;
  }

  public void setSlotTypeName(String slotTypeName) {
    this.slotTypeName = slotTypeName;
  }


  public UpdateSlotTypeRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The new description of the slot type.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateSlotTypeRequest slotTypeValues(List<SlotTypeValue> slotTypeValues) {
    this.slotTypeValues = slotTypeValues;
    return this;
  }

  public UpdateSlotTypeRequest addSlotTypeValuesItem(SlotTypeValue slotTypeValuesItem) {
    if (this.slotTypeValues == null) {
      this.slotTypeValues = new ArrayList<>();
    }
    this.slotTypeValues.add(slotTypeValuesItem);
    return this;
  }

  /**
   * A new list of values and their optional synonyms that define the values that the slot type can take.
   * @return slotTypeValues
   */
  @javax.annotation.Nullable
  public List<SlotTypeValue> getSlotTypeValues() {
    return slotTypeValues;
  }

  public void setSlotTypeValues(List<SlotTypeValue> slotTypeValues) {
    this.slotTypeValues = slotTypeValues;
  }


  public UpdateSlotTypeRequest valueSelectionSetting(CreateSlotTypeRequestValueSelectionSetting valueSelectionSetting) {
    this.valueSelectionSetting = valueSelectionSetting;
    return this;
  }

  /**
   * Get valueSelectionSetting
   * @return valueSelectionSetting
   */
  @javax.annotation.Nullable
  public CreateSlotTypeRequestValueSelectionSetting getValueSelectionSetting() {
    return valueSelectionSetting;
  }

  public void setValueSelectionSetting(CreateSlotTypeRequestValueSelectionSetting valueSelectionSetting) {
    this.valueSelectionSetting = valueSelectionSetting;
  }


  public UpdateSlotTypeRequest parentSlotTypeSignature(String parentSlotTypeSignature) {
    this.parentSlotTypeSignature = parentSlotTypeSignature;
    return this;
  }

  /**
   * The new built-in slot type that should be used as the parent of this slot type.
   * @return parentSlotTypeSignature
   */
  @javax.annotation.Nullable
  public String getParentSlotTypeSignature() {
    return parentSlotTypeSignature;
  }

  public void setParentSlotTypeSignature(String parentSlotTypeSignature) {
    this.parentSlotTypeSignature = parentSlotTypeSignature;
  }


  public UpdateSlotTypeRequest externalSourceSetting(CreateSlotTypeRequestExternalSourceSetting externalSourceSetting) {
    this.externalSourceSetting = externalSourceSetting;
    return this;
  }

  /**
   * Get externalSourceSetting
   * @return externalSourceSetting
   */
  @javax.annotation.Nullable
  public CreateSlotTypeRequestExternalSourceSetting getExternalSourceSetting() {
    return externalSourceSetting;
  }

  public void setExternalSourceSetting(CreateSlotTypeRequestExternalSourceSetting externalSourceSetting) {
    this.externalSourceSetting = externalSourceSetting;
  }


  public UpdateSlotTypeRequest compositeSlotTypeSetting(CreateSlotTypeRequestCompositeSlotTypeSetting compositeSlotTypeSetting) {
    this.compositeSlotTypeSetting = compositeSlotTypeSetting;
    return this;
  }

  /**
   * Get compositeSlotTypeSetting
   * @return compositeSlotTypeSetting
   */
  @javax.annotation.Nullable
  public CreateSlotTypeRequestCompositeSlotTypeSetting getCompositeSlotTypeSetting() {
    return compositeSlotTypeSetting;
  }

  public void setCompositeSlotTypeSetting(CreateSlotTypeRequestCompositeSlotTypeSetting compositeSlotTypeSetting) {
    this.compositeSlotTypeSetting = compositeSlotTypeSetting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSlotTypeRequest updateSlotTypeRequest = (UpdateSlotTypeRequest) o;
    return Objects.equals(this.slotTypeName, updateSlotTypeRequest.slotTypeName) &&
        Objects.equals(this.description, updateSlotTypeRequest.description) &&
        Objects.equals(this.slotTypeValues, updateSlotTypeRequest.slotTypeValues) &&
        Objects.equals(this.valueSelectionSetting, updateSlotTypeRequest.valueSelectionSetting) &&
        Objects.equals(this.parentSlotTypeSignature, updateSlotTypeRequest.parentSlotTypeSignature) &&
        Objects.equals(this.externalSourceSetting, updateSlotTypeRequest.externalSourceSetting) &&
        Objects.equals(this.compositeSlotTypeSetting, updateSlotTypeRequest.compositeSlotTypeSetting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(slotTypeName, description, slotTypeValues, valueSelectionSetting, parentSlotTypeSignature, externalSourceSetting, compositeSlotTypeSetting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSlotTypeRequest {\n");
    sb.append("    slotTypeName: ").append(toIndentedString(slotTypeName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    slotTypeValues: ").append(toIndentedString(slotTypeValues)).append("\n");
    sb.append("    valueSelectionSetting: ").append(toIndentedString(valueSelectionSetting)).append("\n");
    sb.append("    parentSlotTypeSignature: ").append(toIndentedString(parentSlotTypeSignature)).append("\n");
    sb.append("    externalSourceSetting: ").append(toIndentedString(externalSourceSetting)).append("\n");
    sb.append("    compositeSlotTypeSetting: ").append(toIndentedString(compositeSlotTypeSetting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("slotTypeName");
    openapiFields.add("description");
    openapiFields.add("slotTypeValues");
    openapiFields.add("valueSelectionSetting");
    openapiFields.add("parentSlotTypeSignature");
    openapiFields.add("externalSourceSetting");
    openapiFields.add("compositeSlotTypeSetting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("slotTypeName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSlotTypeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSlotTypeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSlotTypeRequest is not found in the empty JSON string", UpdateSlotTypeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSlotTypeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSlotTypeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSlotTypeRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("slotTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slotTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slotTypeName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("slotTypeValues") != null && !jsonObj.get("slotTypeValues").isJsonNull()) {
        JsonArray jsonArrayslotTypeValues = jsonObj.getAsJsonArray("slotTypeValues");
        if (jsonArrayslotTypeValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("slotTypeValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `slotTypeValues` to be an array in the JSON string but got `%s`", jsonObj.get("slotTypeValues").toString()));
          }

          // validate the optional field `slotTypeValues` (array)
          for (int i = 0; i < jsonArrayslotTypeValues.size(); i++) {
            SlotTypeValue.validateJsonElement(jsonArrayslotTypeValues.get(i));
          };
        }
      }
      // validate the optional field `valueSelectionSetting`
      if (jsonObj.get("valueSelectionSetting") != null && !jsonObj.get("valueSelectionSetting").isJsonNull()) {
        CreateSlotTypeRequestValueSelectionSetting.validateJsonElement(jsonObj.get("valueSelectionSetting"));
      }
      if ((jsonObj.get("parentSlotTypeSignature") != null && !jsonObj.get("parentSlotTypeSignature").isJsonNull()) && !jsonObj.get("parentSlotTypeSignature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentSlotTypeSignature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentSlotTypeSignature").toString()));
      }
      // validate the optional field `externalSourceSetting`
      if (jsonObj.get("externalSourceSetting") != null && !jsonObj.get("externalSourceSetting").isJsonNull()) {
        CreateSlotTypeRequestExternalSourceSetting.validateJsonElement(jsonObj.get("externalSourceSetting"));
      }
      // validate the optional field `compositeSlotTypeSetting`
      if (jsonObj.get("compositeSlotTypeSetting") != null && !jsonObj.get("compositeSlotTypeSetting").isJsonNull()) {
        CreateSlotTypeRequestCompositeSlotTypeSetting.validateJsonElement(jsonObj.get("compositeSlotTypeSetting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSlotTypeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSlotTypeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSlotTypeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSlotTypeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSlotTypeRequest>() {
           @Override
           public void write(JsonWriter out, UpdateSlotTypeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSlotTypeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSlotTypeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSlotTypeRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateSlotTypeRequest
   */
  public static UpdateSlotTypeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSlotTypeRequest.class);
  }

  /**
   * Convert an instance of UpdateSlotTypeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

