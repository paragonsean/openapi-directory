/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BotMember;
import org.openapitools.client.model.CreateBotRequestDataPrivacy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBotRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBotRequest {
  public static final String SERIALIZED_NAME_BOT_NAME = "botName";
  @SerializedName(SERIALIZED_NAME_BOT_NAME)
  private String botName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_DATA_PRIVACY = "dataPrivacy";
  @SerializedName(SERIALIZED_NAME_DATA_PRIVACY)
  private CreateBotRequestDataPrivacy dataPrivacy;

  public static final String SERIALIZED_NAME_IDLE_SESSION_T_T_L_IN_SECONDS = "idleSessionTTLInSeconds";
  @SerializedName(SERIALIZED_NAME_IDLE_SESSION_T_T_L_IN_SECONDS)
  private Integer idleSessionTTLInSeconds;

  public static final String SERIALIZED_NAME_BOT_TAGS = "botTags";
  @SerializedName(SERIALIZED_NAME_BOT_TAGS)
  private Map<String, String> botTags = new HashMap<>();

  public static final String SERIALIZED_NAME_TEST_BOT_ALIAS_TAGS = "testBotAliasTags";
  @SerializedName(SERIALIZED_NAME_TEST_BOT_ALIAS_TAGS)
  private Map<String, String> testBotAliasTags = new HashMap<>();

  /**
   * The type of a bot to create.
   */
  @JsonAdapter(BotTypeEnum.Adapter.class)
  public enum BotTypeEnum {
    BOT("Bot"),
    
    BOT_NETWORK("BotNetwork");

    private String value;

    BotTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BotTypeEnum fromValue(String value) {
      for (BotTypeEnum b : BotTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BotTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BotTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BotTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BotTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BotTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BOT_TYPE = "botType";
  @SerializedName(SERIALIZED_NAME_BOT_TYPE)
  private BotTypeEnum botType;

  public static final String SERIALIZED_NAME_BOT_MEMBERS = "botMembers";
  @SerializedName(SERIALIZED_NAME_BOT_MEMBERS)
  private List<BotMember> botMembers = new ArrayList<>();

  public CreateBotRequest() {
  }

  public CreateBotRequest botName(String botName) {
    this.botName = botName;
    return this;
  }

  /**
   * The name of the bot. The bot name must be unique in the account that creates the bot.
   * @return botName
   */
  @javax.annotation.Nonnull
  public String getBotName() {
    return botName;
  }

  public void setBotName(String botName) {
    this.botName = botName;
  }


  public CreateBotRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the bot. It appears in lists to help you identify a particular bot.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateBotRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateBotRequest dataPrivacy(CreateBotRequestDataPrivacy dataPrivacy) {
    this.dataPrivacy = dataPrivacy;
    return this;
  }

  /**
   * Get dataPrivacy
   * @return dataPrivacy
   */
  @javax.annotation.Nonnull
  public CreateBotRequestDataPrivacy getDataPrivacy() {
    return dataPrivacy;
  }

  public void setDataPrivacy(CreateBotRequestDataPrivacy dataPrivacy) {
    this.dataPrivacy = dataPrivacy;
  }


  public CreateBotRequest idleSessionTTLInSeconds(Integer idleSessionTTLInSeconds) {
    this.idleSessionTTLInSeconds = idleSessionTTLInSeconds;
    return this;
  }

  /**
   * &lt;p&gt;The time, in seconds, that Amazon Lex should keep information about a user&#39;s conversation with the bot. &lt;/p&gt; &lt;p&gt;A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.&lt;/p&gt; &lt;p&gt;You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.&lt;/p&gt;
   * minimum: 60
   * maximum: 86400
   * @return idleSessionTTLInSeconds
   */
  @javax.annotation.Nonnull
  public Integer getIdleSessionTTLInSeconds() {
    return idleSessionTTLInSeconds;
  }

  public void setIdleSessionTTLInSeconds(Integer idleSessionTTLInSeconds) {
    this.idleSessionTTLInSeconds = idleSessionTTLInSeconds;
  }


  public CreateBotRequest botTags(Map<String, String> botTags) {
    this.botTags = botTags;
    return this;
  }

  public CreateBotRequest putBotTagsItem(String key, String botTagsItem) {
    if (this.botTags == null) {
      this.botTags = new HashMap<>();
    }
    this.botTags.put(key, botTagsItem);
    return this;
  }

  /**
   * A list of tags to add to the bot. You can only add tags when you create a bot. You can&#39;t use the &lt;code&gt;UpdateBot&lt;/code&gt; operation to update tags. To update tags, use the &lt;code&gt;TagResource&lt;/code&gt; operation.
   * @return botTags
   */
  @javax.annotation.Nullable
  public Map<String, String> getBotTags() {
    return botTags;
  }

  public void setBotTags(Map<String, String> botTags) {
    this.botTags = botTags;
  }


  public CreateBotRequest testBotAliasTags(Map<String, String> testBotAliasTags) {
    this.testBotAliasTags = testBotAliasTags;
    return this;
  }

  public CreateBotRequest putTestBotAliasTagsItem(String key, String testBotAliasTagsItem) {
    if (this.testBotAliasTags == null) {
      this.testBotAliasTags = new HashMap<>();
    }
    this.testBotAliasTags.put(key, testBotAliasTagsItem);
    return this;
  }

  /**
   * A list of tags to add to the test alias for a bot. You can only add tags when you create a bot. You can&#39;t use the &lt;code&gt;UpdateAlias&lt;/code&gt; operation to update tags. To update tags on the test alias, use the &lt;code&gt;TagResource&lt;/code&gt; operation.
   * @return testBotAliasTags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTestBotAliasTags() {
    return testBotAliasTags;
  }

  public void setTestBotAliasTags(Map<String, String> testBotAliasTags) {
    this.testBotAliasTags = testBotAliasTags;
  }


  public CreateBotRequest botType(BotTypeEnum botType) {
    this.botType = botType;
    return this;
  }

  /**
   * The type of a bot to create.
   * @return botType
   */
  @javax.annotation.Nullable
  public BotTypeEnum getBotType() {
    return botType;
  }

  public void setBotType(BotTypeEnum botType) {
    this.botType = botType;
  }


  public CreateBotRequest botMembers(List<BotMember> botMembers) {
    this.botMembers = botMembers;
    return this;
  }

  public CreateBotRequest addBotMembersItem(BotMember botMembersItem) {
    if (this.botMembers == null) {
      this.botMembers = new ArrayList<>();
    }
    this.botMembers.add(botMembersItem);
    return this;
  }

  /**
   * The list of bot members in a network to be created.
   * @return botMembers
   */
  @javax.annotation.Nullable
  public List<BotMember> getBotMembers() {
    return botMembers;
  }

  public void setBotMembers(List<BotMember> botMembers) {
    this.botMembers = botMembers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBotRequest createBotRequest = (CreateBotRequest) o;
    return Objects.equals(this.botName, createBotRequest.botName) &&
        Objects.equals(this.description, createBotRequest.description) &&
        Objects.equals(this.roleArn, createBotRequest.roleArn) &&
        Objects.equals(this.dataPrivacy, createBotRequest.dataPrivacy) &&
        Objects.equals(this.idleSessionTTLInSeconds, createBotRequest.idleSessionTTLInSeconds) &&
        Objects.equals(this.botTags, createBotRequest.botTags) &&
        Objects.equals(this.testBotAliasTags, createBotRequest.testBotAliasTags) &&
        Objects.equals(this.botType, createBotRequest.botType) &&
        Objects.equals(this.botMembers, createBotRequest.botMembers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(botName, description, roleArn, dataPrivacy, idleSessionTTLInSeconds, botTags, testBotAliasTags, botType, botMembers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBotRequest {\n");
    sb.append("    botName: ").append(toIndentedString(botName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    dataPrivacy: ").append(toIndentedString(dataPrivacy)).append("\n");
    sb.append("    idleSessionTTLInSeconds: ").append(toIndentedString(idleSessionTTLInSeconds)).append("\n");
    sb.append("    botTags: ").append(toIndentedString(botTags)).append("\n");
    sb.append("    testBotAliasTags: ").append(toIndentedString(testBotAliasTags)).append("\n");
    sb.append("    botType: ").append(toIndentedString(botType)).append("\n");
    sb.append("    botMembers: ").append(toIndentedString(botMembers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("botName");
    openapiFields.add("description");
    openapiFields.add("roleArn");
    openapiFields.add("dataPrivacy");
    openapiFields.add("idleSessionTTLInSeconds");
    openapiFields.add("botTags");
    openapiFields.add("testBotAliasTags");
    openapiFields.add("botType");
    openapiFields.add("botMembers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("botName");
    openapiRequiredFields.add("roleArn");
    openapiRequiredFields.add("dataPrivacy");
    openapiRequiredFields.add("idleSessionTTLInSeconds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBotRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBotRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBotRequest is not found in the empty JSON string", CreateBotRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBotRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBotRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateBotRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("botName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `botName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("botName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("roleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArn").toString()));
      }
      // validate the required field `dataPrivacy`
      CreateBotRequestDataPrivacy.validateJsonElement(jsonObj.get("dataPrivacy"));
      if ((jsonObj.get("botType") != null && !jsonObj.get("botType").isJsonNull()) && !jsonObj.get("botType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `botType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("botType").toString()));
      }
      // validate the optional field `botType`
      if (jsonObj.get("botType") != null && !jsonObj.get("botType").isJsonNull()) {
        BotTypeEnum.validateJsonElement(jsonObj.get("botType"));
      }
      if (jsonObj.get("botMembers") != null && !jsonObj.get("botMembers").isJsonNull()) {
        JsonArray jsonArraybotMembers = jsonObj.getAsJsonArray("botMembers");
        if (jsonArraybotMembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("botMembers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `botMembers` to be an array in the JSON string but got `%s`", jsonObj.get("botMembers").toString()));
          }

          // validate the optional field `botMembers` (array)
          for (int i = 0; i < jsonArraybotMembers.size(); i++) {
            BotMember.validateJsonElement(jsonArraybotMembers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBotRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBotRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBotRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBotRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBotRequest>() {
           @Override
           public void write(JsonWriter out, CreateBotRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBotRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBotRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBotRequest
   * @throws IOException if the JSON string is invalid with respect to CreateBotRequest
   */
  public static CreateBotRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBotRequest.class);
  }

  /**
   * Convert an instance of CreateBotRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

