/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.BotAliasLocaleSettings;
import org.openapitools.client.model.CreateBotAliasRequestConversationLogSettings;
import org.openapitools.client.model.CreateBotAliasRequestSentimentAnalysisSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateBotAliasRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateBotAliasRequest {
  public static final String SERIALIZED_NAME_BOT_ALIAS_NAME = "botAliasName";
  @SerializedName(SERIALIZED_NAME_BOT_ALIAS_NAME)
  private String botAliasName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_BOT_VERSION = "botVersion";
  @SerializedName(SERIALIZED_NAME_BOT_VERSION)
  private String botVersion;

  public static final String SERIALIZED_NAME_BOT_ALIAS_LOCALE_SETTINGS = "botAliasLocaleSettings";
  @SerializedName(SERIALIZED_NAME_BOT_ALIAS_LOCALE_SETTINGS)
  private Map<String, BotAliasLocaleSettings> botAliasLocaleSettings = new HashMap<>();

  public static final String SERIALIZED_NAME_CONVERSATION_LOG_SETTINGS = "conversationLogSettings";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_LOG_SETTINGS)
  private CreateBotAliasRequestConversationLogSettings conversationLogSettings;

  public static final String SERIALIZED_NAME_SENTIMENT_ANALYSIS_SETTINGS = "sentimentAnalysisSettings";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_ANALYSIS_SETTINGS)
  private CreateBotAliasRequestSentimentAnalysisSettings sentimentAnalysisSettings;

  public UpdateBotAliasRequest() {
  }

  public UpdateBotAliasRequest botAliasName(String botAliasName) {
    this.botAliasName = botAliasName;
    return this;
  }

  /**
   * The new name to assign to the bot alias.
   * @return botAliasName
   */
  @javax.annotation.Nonnull
  public String getBotAliasName() {
    return botAliasName;
  }

  public void setBotAliasName(String botAliasName) {
    this.botAliasName = botAliasName;
  }


  public UpdateBotAliasRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The new description to assign to the bot alias.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateBotAliasRequest botVersion(String botVersion) {
    this.botVersion = botVersion;
    return this;
  }

  /**
   * The new bot version to assign to the bot alias.
   * @return botVersion
   */
  @javax.annotation.Nullable
  public String getBotVersion() {
    return botVersion;
  }

  public void setBotVersion(String botVersion) {
    this.botVersion = botVersion;
  }


  public UpdateBotAliasRequest botAliasLocaleSettings(Map<String, BotAliasLocaleSettings> botAliasLocaleSettings) {
    this.botAliasLocaleSettings = botAliasLocaleSettings;
    return this;
  }

  public UpdateBotAliasRequest putBotAliasLocaleSettingsItem(String key, BotAliasLocaleSettings botAliasLocaleSettingsItem) {
    if (this.botAliasLocaleSettings == null) {
      this.botAliasLocaleSettings = new HashMap<>();
    }
    this.botAliasLocaleSettings.put(key, botAliasLocaleSettingsItem);
    return this;
  }

  /**
   * The new Lambda functions to use in each locale for the bot alias.
   * @return botAliasLocaleSettings
   */
  @javax.annotation.Nullable
  public Map<String, BotAliasLocaleSettings> getBotAliasLocaleSettings() {
    return botAliasLocaleSettings;
  }

  public void setBotAliasLocaleSettings(Map<String, BotAliasLocaleSettings> botAliasLocaleSettings) {
    this.botAliasLocaleSettings = botAliasLocaleSettings;
  }


  public UpdateBotAliasRequest conversationLogSettings(CreateBotAliasRequestConversationLogSettings conversationLogSettings) {
    this.conversationLogSettings = conversationLogSettings;
    return this;
  }

  /**
   * Get conversationLogSettings
   * @return conversationLogSettings
   */
  @javax.annotation.Nullable
  public CreateBotAliasRequestConversationLogSettings getConversationLogSettings() {
    return conversationLogSettings;
  }

  public void setConversationLogSettings(CreateBotAliasRequestConversationLogSettings conversationLogSettings) {
    this.conversationLogSettings = conversationLogSettings;
  }


  public UpdateBotAliasRequest sentimentAnalysisSettings(CreateBotAliasRequestSentimentAnalysisSettings sentimentAnalysisSettings) {
    this.sentimentAnalysisSettings = sentimentAnalysisSettings;
    return this;
  }

  /**
   * Get sentimentAnalysisSettings
   * @return sentimentAnalysisSettings
   */
  @javax.annotation.Nullable
  public CreateBotAliasRequestSentimentAnalysisSettings getSentimentAnalysisSettings() {
    return sentimentAnalysisSettings;
  }

  public void setSentimentAnalysisSettings(CreateBotAliasRequestSentimentAnalysisSettings sentimentAnalysisSettings) {
    this.sentimentAnalysisSettings = sentimentAnalysisSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateBotAliasRequest updateBotAliasRequest = (UpdateBotAliasRequest) o;
    return Objects.equals(this.botAliasName, updateBotAliasRequest.botAliasName) &&
        Objects.equals(this.description, updateBotAliasRequest.description) &&
        Objects.equals(this.botVersion, updateBotAliasRequest.botVersion) &&
        Objects.equals(this.botAliasLocaleSettings, updateBotAliasRequest.botAliasLocaleSettings) &&
        Objects.equals(this.conversationLogSettings, updateBotAliasRequest.conversationLogSettings) &&
        Objects.equals(this.sentimentAnalysisSettings, updateBotAliasRequest.sentimentAnalysisSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(botAliasName, description, botVersion, botAliasLocaleSettings, conversationLogSettings, sentimentAnalysisSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateBotAliasRequest {\n");
    sb.append("    botAliasName: ").append(toIndentedString(botAliasName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    botVersion: ").append(toIndentedString(botVersion)).append("\n");
    sb.append("    botAliasLocaleSettings: ").append(toIndentedString(botAliasLocaleSettings)).append("\n");
    sb.append("    conversationLogSettings: ").append(toIndentedString(conversationLogSettings)).append("\n");
    sb.append("    sentimentAnalysisSettings: ").append(toIndentedString(sentimentAnalysisSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("botAliasName");
    openapiFields.add("description");
    openapiFields.add("botVersion");
    openapiFields.add("botAliasLocaleSettings");
    openapiFields.add("conversationLogSettings");
    openapiFields.add("sentimentAnalysisSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("botAliasName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateBotAliasRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateBotAliasRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateBotAliasRequest is not found in the empty JSON string", UpdateBotAliasRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateBotAliasRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateBotAliasRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateBotAliasRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("botAliasName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `botAliasName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("botAliasName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("botVersion") != null && !jsonObj.get("botVersion").isJsonNull()) && !jsonObj.get("botVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `botVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("botVersion").toString()));
      }
      // validate the optional field `conversationLogSettings`
      if (jsonObj.get("conversationLogSettings") != null && !jsonObj.get("conversationLogSettings").isJsonNull()) {
        CreateBotAliasRequestConversationLogSettings.validateJsonElement(jsonObj.get("conversationLogSettings"));
      }
      // validate the optional field `sentimentAnalysisSettings`
      if (jsonObj.get("sentimentAnalysisSettings") != null && !jsonObj.get("sentimentAnalysisSettings").isJsonNull()) {
        CreateBotAliasRequestSentimentAnalysisSettings.validateJsonElement(jsonObj.get("sentimentAnalysisSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateBotAliasRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateBotAliasRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateBotAliasRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateBotAliasRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateBotAliasRequest>() {
           @Override
           public void write(JsonWriter out, UpdateBotAliasRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateBotAliasRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateBotAliasRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateBotAliasRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateBotAliasRequest
   */
  public static UpdateBotAliasRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateBotAliasRequest.class);
  }

  /**
   * Convert an instance of UpdateBotAliasRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

