/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CreateExportResponseResourceSpecification;
import org.openapitools.client.model.ExportStatus;
import org.openapitools.client.model.ImportExportFileFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateExportResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateExportResponse {
  public static final String SERIALIZED_NAME_EXPORT_ID = "exportId";
  @SerializedName(SERIALIZED_NAME_EXPORT_ID)
  private String exportId;

  public static final String SERIALIZED_NAME_RESOURCE_SPECIFICATION = "resourceSpecification";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SPECIFICATION)
  private CreateExportResponseResourceSpecification resourceSpecification;

  public static final String SERIALIZED_NAME_FILE_FORMAT = "fileFormat";
  @SerializedName(SERIALIZED_NAME_FILE_FORMAT)
  private ImportExportFileFormat fileFormat;

  public static final String SERIALIZED_NAME_EXPORT_STATUS = "exportStatus";
  @SerializedName(SERIALIZED_NAME_EXPORT_STATUS)
  private ExportStatus exportStatus;

  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  private OffsetDateTime creationDateTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public UpdateExportResponse() {
  }

  public UpdateExportResponse exportId(String exportId) {
    this.exportId = exportId;
    return this;
  }

  /**
   * Get exportId
   * @return exportId
   */
  @javax.annotation.Nullable
  public String getExportId() {
    return exportId;
  }

  public void setExportId(String exportId) {
    this.exportId = exportId;
  }


  public UpdateExportResponse resourceSpecification(CreateExportResponseResourceSpecification resourceSpecification) {
    this.resourceSpecification = resourceSpecification;
    return this;
  }

  /**
   * Get resourceSpecification
   * @return resourceSpecification
   */
  @javax.annotation.Nullable
  public CreateExportResponseResourceSpecification getResourceSpecification() {
    return resourceSpecification;
  }

  public void setResourceSpecification(CreateExportResponseResourceSpecification resourceSpecification) {
    this.resourceSpecification = resourceSpecification;
  }


  public UpdateExportResponse fileFormat(ImportExportFileFormat fileFormat) {
    this.fileFormat = fileFormat;
    return this;
  }

  /**
   * Get fileFormat
   * @return fileFormat
   */
  @javax.annotation.Nullable
  public ImportExportFileFormat getFileFormat() {
    return fileFormat;
  }

  public void setFileFormat(ImportExportFileFormat fileFormat) {
    this.fileFormat = fileFormat;
  }


  public UpdateExportResponse exportStatus(ExportStatus exportStatus) {
    this.exportStatus = exportStatus;
    return this;
  }

  /**
   * Get exportStatus
   * @return exportStatus
   */
  @javax.annotation.Nullable
  public ExportStatus getExportStatus() {
    return exportStatus;
  }

  public void setExportStatus(ExportStatus exportStatus) {
    this.exportStatus = exportStatus;
  }


  public UpdateExportResponse creationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * Get creationDateTime
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public UpdateExportResponse lastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
    return this;
  }

  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }

  public void setLastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateExportResponse updateExportResponse = (UpdateExportResponse) o;
    return Objects.equals(this.exportId, updateExportResponse.exportId) &&
        Objects.equals(this.resourceSpecification, updateExportResponse.resourceSpecification) &&
        Objects.equals(this.fileFormat, updateExportResponse.fileFormat) &&
        Objects.equals(this.exportStatus, updateExportResponse.exportStatus) &&
        Objects.equals(this.creationDateTime, updateExportResponse.creationDateTime) &&
        Objects.equals(this.lastUpdatedDateTime, updateExportResponse.lastUpdatedDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportId, resourceSpecification, fileFormat, exportStatus, creationDateTime, lastUpdatedDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateExportResponse {\n");
    sb.append("    exportId: ").append(toIndentedString(exportId)).append("\n");
    sb.append("    resourceSpecification: ").append(toIndentedString(resourceSpecification)).append("\n");
    sb.append("    fileFormat: ").append(toIndentedString(fileFormat)).append("\n");
    sb.append("    exportStatus: ").append(toIndentedString(exportStatus)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exportId");
    openapiFields.add("resourceSpecification");
    openapiFields.add("fileFormat");
    openapiFields.add("exportStatus");
    openapiFields.add("creationDateTime");
    openapiFields.add("lastUpdatedDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateExportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateExportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateExportResponse is not found in the empty JSON string", UpdateExportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateExportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateExportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `exportId`
      if (jsonObj.get("exportId") != null && !jsonObj.get("exportId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("exportId"));
      }
      // validate the optional field `resourceSpecification`
      if (jsonObj.get("resourceSpecification") != null && !jsonObj.get("resourceSpecification").isJsonNull()) {
        CreateExportResponseResourceSpecification.validateJsonElement(jsonObj.get("resourceSpecification"));
      }
      // validate the optional field `fileFormat`
      if (jsonObj.get("fileFormat") != null && !jsonObj.get("fileFormat").isJsonNull()) {
        ImportExportFileFormat.validateJsonElement(jsonObj.get("fileFormat"));
      }
      // validate the optional field `exportStatus`
      if (jsonObj.get("exportStatus") != null && !jsonObj.get("exportStatus").isJsonNull()) {
        ExportStatus.validateJsonElement(jsonObj.get("exportStatus"));
      }
      // validate the optional field `creationDateTime`
      if (jsonObj.get("creationDateTime") != null && !jsonObj.get("creationDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationDateTime"));
      }
      // validate the optional field `lastUpdatedDateTime`
      if (jsonObj.get("lastUpdatedDateTime") != null && !jsonObj.get("lastUpdatedDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedDateTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateExportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateExportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateExportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateExportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateExportResponse>() {
           @Override
           public void write(JsonWriter out, UpdateExportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateExportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateExportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateExportResponse
   * @throws IOException if the JSON string is invalid with respect to UpdateExportResponse
   */
  public static UpdateExportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateExportResponse.class);
  }

  /**
   * Convert an instance of UpdateExportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

