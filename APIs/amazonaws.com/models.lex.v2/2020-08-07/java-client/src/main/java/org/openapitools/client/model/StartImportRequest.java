/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StartImportRequestResourceSpecification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartImportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartImportRequest {
  public static final String SERIALIZED_NAME_IMPORT_ID = "importId";
  @SerializedName(SERIALIZED_NAME_IMPORT_ID)
  private String importId;

  public static final String SERIALIZED_NAME_RESOURCE_SPECIFICATION = "resourceSpecification";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SPECIFICATION)
  private StartImportRequestResourceSpecification resourceSpecification;

  /**
   * The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is &lt;code&gt;FailOnConflict&lt;/code&gt; existing resources are not overwritten and the import fails.
   */
  @JsonAdapter(MergeStrategyEnum.Adapter.class)
  public enum MergeStrategyEnum {
    OVERWRITE("Overwrite"),
    
    FAIL_ON_CONFLICT("FailOnConflict"),
    
    APPEND("Append");

    private String value;

    MergeStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeStrategyEnum fromValue(String value) {
      for (MergeStrategyEnum b : MergeStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MergeStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MERGE_STRATEGY = "mergeStrategy";
  @SerializedName(SERIALIZED_NAME_MERGE_STRATEGY)
  private MergeStrategyEnum mergeStrategy;

  public static final String SERIALIZED_NAME_FILE_PASSWORD = "filePassword";
  @SerializedName(SERIALIZED_NAME_FILE_PASSWORD)
  private String filePassword;

  public StartImportRequest() {
  }

  public StartImportRequest importId(String importId) {
    this.importId = importId;
    return this;
  }

  /**
   * The unique identifier for the import. It is included in the response from the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateUploadUrl.html\&quot;&gt;CreateUploadUrl&lt;/a&gt; operation.
   * @return importId
   */
  @javax.annotation.Nonnull
  public String getImportId() {
    return importId;
  }

  public void setImportId(String importId) {
    this.importId = importId;
  }


  public StartImportRequest resourceSpecification(StartImportRequestResourceSpecification resourceSpecification) {
    this.resourceSpecification = resourceSpecification;
    return this;
  }

  /**
   * Get resourceSpecification
   * @return resourceSpecification
   */
  @javax.annotation.Nonnull
  public StartImportRequestResourceSpecification getResourceSpecification() {
    return resourceSpecification;
  }

  public void setResourceSpecification(StartImportRequestResourceSpecification resourceSpecification) {
    this.resourceSpecification = resourceSpecification;
  }


  public StartImportRequest mergeStrategy(MergeStrategyEnum mergeStrategy) {
    this.mergeStrategy = mergeStrategy;
    return this;
  }

  /**
   * The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is &lt;code&gt;FailOnConflict&lt;/code&gt; existing resources are not overwritten and the import fails.
   * @return mergeStrategy
   */
  @javax.annotation.Nonnull
  public MergeStrategyEnum getMergeStrategy() {
    return mergeStrategy;
  }

  public void setMergeStrategy(MergeStrategyEnum mergeStrategy) {
    this.mergeStrategy = mergeStrategy;
  }


  public StartImportRequest filePassword(String filePassword) {
    this.filePassword = filePassword;
    return this;
  }

  /**
   * The password used to encrypt the zip archive that contains the resource definition. You should always encrypt the zip archive to protect it during transit between your site and Amazon Lex.
   * @return filePassword
   */
  @javax.annotation.Nullable
  public String getFilePassword() {
    return filePassword;
  }

  public void setFilePassword(String filePassword) {
    this.filePassword = filePassword;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartImportRequest startImportRequest = (StartImportRequest) o;
    return Objects.equals(this.importId, startImportRequest.importId) &&
        Objects.equals(this.resourceSpecification, startImportRequest.resourceSpecification) &&
        Objects.equals(this.mergeStrategy, startImportRequest.mergeStrategy) &&
        Objects.equals(this.filePassword, startImportRequest.filePassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(importId, resourceSpecification, mergeStrategy, filePassword);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartImportRequest {\n");
    sb.append("    importId: ").append(toIndentedString(importId)).append("\n");
    sb.append("    resourceSpecification: ").append(toIndentedString(resourceSpecification)).append("\n");
    sb.append("    mergeStrategy: ").append(toIndentedString(mergeStrategy)).append("\n");
    sb.append("    filePassword: ").append("*").append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("importId");
    openapiFields.add("resourceSpecification");
    openapiFields.add("mergeStrategy");
    openapiFields.add("filePassword");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("importId");
    openapiRequiredFields.add("resourceSpecification");
    openapiRequiredFields.add("mergeStrategy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartImportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartImportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartImportRequest is not found in the empty JSON string", StartImportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartImportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartImportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartImportRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("importId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importId").toString()));
      }
      // validate the required field `resourceSpecification`
      StartImportRequestResourceSpecification.validateJsonElement(jsonObj.get("resourceSpecification"));
      if (!jsonObj.get("mergeStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergeStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergeStrategy").toString()));
      }
      // validate the required field `mergeStrategy`
      MergeStrategyEnum.validateJsonElement(jsonObj.get("mergeStrategy"));
      if ((jsonObj.get("filePassword") != null && !jsonObj.get("filePassword").isJsonNull()) && !jsonObj.get("filePassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filePassword").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartImportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartImportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartImportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartImportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartImportRequest>() {
           @Override
           public void write(JsonWriter out, StartImportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartImportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartImportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartImportRequest
   * @throws IOException if the JSON string is invalid with respect to StartImportRequest
   */
  public static StartImportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartImportRequest.class);
  }

  /**
   * Convert an instance of StartImportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

