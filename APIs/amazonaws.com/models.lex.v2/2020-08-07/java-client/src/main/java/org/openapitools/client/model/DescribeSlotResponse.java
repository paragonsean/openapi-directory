/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CreateSlotResponseSubSlotSetting;
import org.openapitools.client.model.DescribeSlotResponseMultipleValuesSetting;
import org.openapitools.client.model.DescribeSlotResponseObfuscationSetting;
import org.openapitools.client.model.DescribeSlotResponseValueElicitationSetting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeSlotResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeSlotResponse {
  public static final String SERIALIZED_NAME_SLOT_ID = "slotId";
  @SerializedName(SERIALIZED_NAME_SLOT_ID)
  private String slotId;

  public static final String SERIALIZED_NAME_SLOT_NAME = "slotName";
  @SerializedName(SERIALIZED_NAME_SLOT_NAME)
  private String slotName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SLOT_TYPE_ID = "slotTypeId";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_ID)
  private String slotTypeId;

  public static final String SERIALIZED_NAME_VALUE_ELICITATION_SETTING = "valueElicitationSetting";
  @SerializedName(SERIALIZED_NAME_VALUE_ELICITATION_SETTING)
  private DescribeSlotResponseValueElicitationSetting valueElicitationSetting;

  public static final String SERIALIZED_NAME_OBFUSCATION_SETTING = "obfuscationSetting";
  @SerializedName(SERIALIZED_NAME_OBFUSCATION_SETTING)
  private DescribeSlotResponseObfuscationSetting obfuscationSetting;

  public static final String SERIALIZED_NAME_BOT_ID = "botId";
  @SerializedName(SERIALIZED_NAME_BOT_ID)
  private String botId;

  public static final String SERIALIZED_NAME_BOT_VERSION = "botVersion";
  @SerializedName(SERIALIZED_NAME_BOT_VERSION)
  private String botVersion;

  public static final String SERIALIZED_NAME_LOCALE_ID = "localeId";
  @SerializedName(SERIALIZED_NAME_LOCALE_ID)
  private String localeId;

  public static final String SERIALIZED_NAME_INTENT_ID = "intentId";
  @SerializedName(SERIALIZED_NAME_INTENT_ID)
  private String intentId;

  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  private OffsetDateTime creationDateTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_MULTIPLE_VALUES_SETTING = "multipleValuesSetting";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_VALUES_SETTING)
  private DescribeSlotResponseMultipleValuesSetting multipleValuesSetting;

  public static final String SERIALIZED_NAME_SUB_SLOT_SETTING = "subSlotSetting";
  @SerializedName(SERIALIZED_NAME_SUB_SLOT_SETTING)
  private CreateSlotResponseSubSlotSetting subSlotSetting;

  public DescribeSlotResponse() {
  }

  public DescribeSlotResponse slotId(String slotId) {
    this.slotId = slotId;
    return this;
  }

  /**
   * Get slotId
   * @return slotId
   */
  @javax.annotation.Nullable
  public String getSlotId() {
    return slotId;
  }

  public void setSlotId(String slotId) {
    this.slotId = slotId;
  }


  public DescribeSlotResponse slotName(String slotName) {
    this.slotName = slotName;
    return this;
  }

  /**
   * Get slotName
   * @return slotName
   */
  @javax.annotation.Nullable
  public String getSlotName() {
    return slotName;
  }

  public void setSlotName(String slotName) {
    this.slotName = slotName;
  }


  public DescribeSlotResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeSlotResponse slotTypeId(String slotTypeId) {
    this.slotTypeId = slotTypeId;
    return this;
  }

  /**
   * Get slotTypeId
   * @return slotTypeId
   */
  @javax.annotation.Nullable
  public String getSlotTypeId() {
    return slotTypeId;
  }

  public void setSlotTypeId(String slotTypeId) {
    this.slotTypeId = slotTypeId;
  }


  public DescribeSlotResponse valueElicitationSetting(DescribeSlotResponseValueElicitationSetting valueElicitationSetting) {
    this.valueElicitationSetting = valueElicitationSetting;
    return this;
  }

  /**
   * Get valueElicitationSetting
   * @return valueElicitationSetting
   */
  @javax.annotation.Nullable
  public DescribeSlotResponseValueElicitationSetting getValueElicitationSetting() {
    return valueElicitationSetting;
  }

  public void setValueElicitationSetting(DescribeSlotResponseValueElicitationSetting valueElicitationSetting) {
    this.valueElicitationSetting = valueElicitationSetting;
  }


  public DescribeSlotResponse obfuscationSetting(DescribeSlotResponseObfuscationSetting obfuscationSetting) {
    this.obfuscationSetting = obfuscationSetting;
    return this;
  }

  /**
   * Get obfuscationSetting
   * @return obfuscationSetting
   */
  @javax.annotation.Nullable
  public DescribeSlotResponseObfuscationSetting getObfuscationSetting() {
    return obfuscationSetting;
  }

  public void setObfuscationSetting(DescribeSlotResponseObfuscationSetting obfuscationSetting) {
    this.obfuscationSetting = obfuscationSetting;
  }


  public DescribeSlotResponse botId(String botId) {
    this.botId = botId;
    return this;
  }

  /**
   * Get botId
   * @return botId
   */
  @javax.annotation.Nullable
  public String getBotId() {
    return botId;
  }

  public void setBotId(String botId) {
    this.botId = botId;
  }


  public DescribeSlotResponse botVersion(String botVersion) {
    this.botVersion = botVersion;
    return this;
  }

  /**
   * Get botVersion
   * @return botVersion
   */
  @javax.annotation.Nullable
  public String getBotVersion() {
    return botVersion;
  }

  public void setBotVersion(String botVersion) {
    this.botVersion = botVersion;
  }


  public DescribeSlotResponse localeId(String localeId) {
    this.localeId = localeId;
    return this;
  }

  /**
   * Get localeId
   * @return localeId
   */
  @javax.annotation.Nullable
  public String getLocaleId() {
    return localeId;
  }

  public void setLocaleId(String localeId) {
    this.localeId = localeId;
  }


  public DescribeSlotResponse intentId(String intentId) {
    this.intentId = intentId;
    return this;
  }

  /**
   * Get intentId
   * @return intentId
   */
  @javax.annotation.Nullable
  public String getIntentId() {
    return intentId;
  }

  public void setIntentId(String intentId) {
    this.intentId = intentId;
  }


  public DescribeSlotResponse creationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * Get creationDateTime
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public DescribeSlotResponse lastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
    return this;
  }

  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }

  public void setLastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }


  public DescribeSlotResponse multipleValuesSetting(DescribeSlotResponseMultipleValuesSetting multipleValuesSetting) {
    this.multipleValuesSetting = multipleValuesSetting;
    return this;
  }

  /**
   * Get multipleValuesSetting
   * @return multipleValuesSetting
   */
  @javax.annotation.Nullable
  public DescribeSlotResponseMultipleValuesSetting getMultipleValuesSetting() {
    return multipleValuesSetting;
  }

  public void setMultipleValuesSetting(DescribeSlotResponseMultipleValuesSetting multipleValuesSetting) {
    this.multipleValuesSetting = multipleValuesSetting;
  }


  public DescribeSlotResponse subSlotSetting(CreateSlotResponseSubSlotSetting subSlotSetting) {
    this.subSlotSetting = subSlotSetting;
    return this;
  }

  /**
   * Get subSlotSetting
   * @return subSlotSetting
   */
  @javax.annotation.Nullable
  public CreateSlotResponseSubSlotSetting getSubSlotSetting() {
    return subSlotSetting;
  }

  public void setSubSlotSetting(CreateSlotResponseSubSlotSetting subSlotSetting) {
    this.subSlotSetting = subSlotSetting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeSlotResponse describeSlotResponse = (DescribeSlotResponse) o;
    return Objects.equals(this.slotId, describeSlotResponse.slotId) &&
        Objects.equals(this.slotName, describeSlotResponse.slotName) &&
        Objects.equals(this.description, describeSlotResponse.description) &&
        Objects.equals(this.slotTypeId, describeSlotResponse.slotTypeId) &&
        Objects.equals(this.valueElicitationSetting, describeSlotResponse.valueElicitationSetting) &&
        Objects.equals(this.obfuscationSetting, describeSlotResponse.obfuscationSetting) &&
        Objects.equals(this.botId, describeSlotResponse.botId) &&
        Objects.equals(this.botVersion, describeSlotResponse.botVersion) &&
        Objects.equals(this.localeId, describeSlotResponse.localeId) &&
        Objects.equals(this.intentId, describeSlotResponse.intentId) &&
        Objects.equals(this.creationDateTime, describeSlotResponse.creationDateTime) &&
        Objects.equals(this.lastUpdatedDateTime, describeSlotResponse.lastUpdatedDateTime) &&
        Objects.equals(this.multipleValuesSetting, describeSlotResponse.multipleValuesSetting) &&
        Objects.equals(this.subSlotSetting, describeSlotResponse.subSlotSetting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(slotId, slotName, description, slotTypeId, valueElicitationSetting, obfuscationSetting, botId, botVersion, localeId, intentId, creationDateTime, lastUpdatedDateTime, multipleValuesSetting, subSlotSetting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeSlotResponse {\n");
    sb.append("    slotId: ").append(toIndentedString(slotId)).append("\n");
    sb.append("    slotName: ").append(toIndentedString(slotName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    slotTypeId: ").append(toIndentedString(slotTypeId)).append("\n");
    sb.append("    valueElicitationSetting: ").append(toIndentedString(valueElicitationSetting)).append("\n");
    sb.append("    obfuscationSetting: ").append(toIndentedString(obfuscationSetting)).append("\n");
    sb.append("    botId: ").append(toIndentedString(botId)).append("\n");
    sb.append("    botVersion: ").append(toIndentedString(botVersion)).append("\n");
    sb.append("    localeId: ").append(toIndentedString(localeId)).append("\n");
    sb.append("    intentId: ").append(toIndentedString(intentId)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    multipleValuesSetting: ").append(toIndentedString(multipleValuesSetting)).append("\n");
    sb.append("    subSlotSetting: ").append(toIndentedString(subSlotSetting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("slotId");
    openapiFields.add("slotName");
    openapiFields.add("description");
    openapiFields.add("slotTypeId");
    openapiFields.add("valueElicitationSetting");
    openapiFields.add("obfuscationSetting");
    openapiFields.add("botId");
    openapiFields.add("botVersion");
    openapiFields.add("localeId");
    openapiFields.add("intentId");
    openapiFields.add("creationDateTime");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("multipleValuesSetting");
    openapiFields.add("subSlotSetting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeSlotResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeSlotResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeSlotResponse is not found in the empty JSON string", DescribeSlotResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeSlotResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeSlotResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `slotId`
      if (jsonObj.get("slotId") != null && !jsonObj.get("slotId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotId"));
      }
      // validate the optional field `slotName`
      if (jsonObj.get("slotName") != null && !jsonObj.get("slotName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotName"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `slotTypeId`
      if (jsonObj.get("slotTypeId") != null && !jsonObj.get("slotTypeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotTypeId"));
      }
      // validate the optional field `valueElicitationSetting`
      if (jsonObj.get("valueElicitationSetting") != null && !jsonObj.get("valueElicitationSetting").isJsonNull()) {
        DescribeSlotResponseValueElicitationSetting.validateJsonElement(jsonObj.get("valueElicitationSetting"));
      }
      // validate the optional field `obfuscationSetting`
      if (jsonObj.get("obfuscationSetting") != null && !jsonObj.get("obfuscationSetting").isJsonNull()) {
        DescribeSlotResponseObfuscationSetting.validateJsonElement(jsonObj.get("obfuscationSetting"));
      }
      // validate the optional field `botId`
      if (jsonObj.get("botId") != null && !jsonObj.get("botId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("botId"));
      }
      // validate the optional field `botVersion`
      if (jsonObj.get("botVersion") != null && !jsonObj.get("botVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("botVersion"));
      }
      // validate the optional field `localeId`
      if (jsonObj.get("localeId") != null && !jsonObj.get("localeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("localeId"));
      }
      // validate the optional field `intentId`
      if (jsonObj.get("intentId") != null && !jsonObj.get("intentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("intentId"));
      }
      // validate the optional field `creationDateTime`
      if (jsonObj.get("creationDateTime") != null && !jsonObj.get("creationDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationDateTime"));
      }
      // validate the optional field `lastUpdatedDateTime`
      if (jsonObj.get("lastUpdatedDateTime") != null && !jsonObj.get("lastUpdatedDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedDateTime"));
      }
      // validate the optional field `multipleValuesSetting`
      if (jsonObj.get("multipleValuesSetting") != null && !jsonObj.get("multipleValuesSetting").isJsonNull()) {
        DescribeSlotResponseMultipleValuesSetting.validateJsonElement(jsonObj.get("multipleValuesSetting"));
      }
      // validate the optional field `subSlotSetting`
      if (jsonObj.get("subSlotSetting") != null && !jsonObj.get("subSlotSetting").isJsonNull()) {
        CreateSlotResponseSubSlotSetting.validateJsonElement(jsonObj.get("subSlotSetting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeSlotResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeSlotResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeSlotResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeSlotResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeSlotResponse>() {
           @Override
           public void write(JsonWriter out, DescribeSlotResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeSlotResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeSlotResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeSlotResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeSlotResponse
   */
  public static DescribeSlotResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeSlotResponse.class);
  }

  /**
   * Convert an instance of DescribeSlotResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

