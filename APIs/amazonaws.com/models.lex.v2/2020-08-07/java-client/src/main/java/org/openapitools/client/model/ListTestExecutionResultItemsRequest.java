/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ListTestExecutionResultItemsRequestResultFilterBy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListTestExecutionResultItemsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListTestExecutionResultItemsRequest {
  public static final String SERIALIZED_NAME_RESULT_FILTER_BY = "resultFilterBy";
  @SerializedName(SERIALIZED_NAME_RESULT_FILTER_BY)
  private ListTestExecutionResultItemsRequestResultFilterBy resultFilterBy;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public ListTestExecutionResultItemsRequest() {
  }

  public ListTestExecutionResultItemsRequest resultFilterBy(ListTestExecutionResultItemsRequestResultFilterBy resultFilterBy) {
    this.resultFilterBy = resultFilterBy;
    return this;
  }

  /**
   * Get resultFilterBy
   * @return resultFilterBy
   */
  @javax.annotation.Nonnull
  public ListTestExecutionResultItemsRequestResultFilterBy getResultFilterBy() {
    return resultFilterBy;
  }

  public void setResultFilterBy(ListTestExecutionResultItemsRequestResultFilterBy resultFilterBy) {
    this.resultFilterBy = resultFilterBy;
  }


  public ListTestExecutionResultItemsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.
   * minimum: 1
   * maximum: 1000
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListTestExecutionResultItemsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * If the response from the &lt;code&gt;ListTestExecutionResultItems&lt;/code&gt; operation contains more results than specified in the &lt;code&gt;maxResults&lt;/code&gt; parameter, a token is returned in the response. Use that token in the &lt;code&gt;nextToken&lt;/code&gt; parameter to return the next page of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTestExecutionResultItemsRequest listTestExecutionResultItemsRequest = (ListTestExecutionResultItemsRequest) o;
    return Objects.equals(this.resultFilterBy, listTestExecutionResultItemsRequest.resultFilterBy) &&
        Objects.equals(this.maxResults, listTestExecutionResultItemsRequest.maxResults) &&
        Objects.equals(this.nextToken, listTestExecutionResultItemsRequest.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resultFilterBy, maxResults, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTestExecutionResultItemsRequest {\n");
    sb.append("    resultFilterBy: ").append(toIndentedString(resultFilterBy)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resultFilterBy");
    openapiFields.add("maxResults");
    openapiFields.add("nextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("resultFilterBy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListTestExecutionResultItemsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListTestExecutionResultItemsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListTestExecutionResultItemsRequest is not found in the empty JSON string", ListTestExecutionResultItemsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListTestExecutionResultItemsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListTestExecutionResultItemsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListTestExecutionResultItemsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `resultFilterBy`
      ListTestExecutionResultItemsRequestResultFilterBy.validateJsonElement(jsonObj.get("resultFilterBy"));
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListTestExecutionResultItemsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListTestExecutionResultItemsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListTestExecutionResultItemsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListTestExecutionResultItemsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListTestExecutionResultItemsRequest>() {
           @Override
           public void write(JsonWriter out, ListTestExecutionResultItemsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListTestExecutionResultItemsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListTestExecutionResultItemsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListTestExecutionResultItemsRequest
   * @throws IOException if the JSON string is invalid with respect to ListTestExecutionResultItemsRequest
   */
  public static ListTestExecutionResultItemsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTestExecutionResultItemsRequest.class);
  }

  /**
   * Convert an instance of ListTestExecutionResultItemsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

