/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateIntentRequestDialogCodeHook;
import org.openapitools.client.model.CreateIntentRequestFulfillmentCodeHook;
import org.openapitools.client.model.CreateIntentRequestInitialResponseSetting;
import org.openapitools.client.model.CreateIntentRequestIntentClosingSetting;
import org.openapitools.client.model.CreateIntentRequestIntentConfirmationSetting;
import org.openapitools.client.model.CreateIntentRequestKendraConfiguration;
import org.openapitools.client.model.InputContext;
import org.openapitools.client.model.OutputContext;
import org.openapitools.client.model.SampleUtterance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateIntentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateIntentRequest {
  public static final String SERIALIZED_NAME_INTENT_NAME = "intentName";
  @SerializedName(SERIALIZED_NAME_INTENT_NAME)
  private String intentName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PARENT_INTENT_SIGNATURE = "parentIntentSignature";
  @SerializedName(SERIALIZED_NAME_PARENT_INTENT_SIGNATURE)
  private String parentIntentSignature;

  public static final String SERIALIZED_NAME_SAMPLE_UTTERANCES = "sampleUtterances";
  @SerializedName(SERIALIZED_NAME_SAMPLE_UTTERANCES)
  private List<SampleUtterance> sampleUtterances = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIALOG_CODE_HOOK = "dialogCodeHook";
  @SerializedName(SERIALIZED_NAME_DIALOG_CODE_HOOK)
  private CreateIntentRequestDialogCodeHook dialogCodeHook;

  public static final String SERIALIZED_NAME_FULFILLMENT_CODE_HOOK = "fulfillmentCodeHook";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_CODE_HOOK)
  private CreateIntentRequestFulfillmentCodeHook fulfillmentCodeHook;

  public static final String SERIALIZED_NAME_INTENT_CONFIRMATION_SETTING = "intentConfirmationSetting";
  @SerializedName(SERIALIZED_NAME_INTENT_CONFIRMATION_SETTING)
  private CreateIntentRequestIntentConfirmationSetting intentConfirmationSetting;

  public static final String SERIALIZED_NAME_INTENT_CLOSING_SETTING = "intentClosingSetting";
  @SerializedName(SERIALIZED_NAME_INTENT_CLOSING_SETTING)
  private CreateIntentRequestIntentClosingSetting intentClosingSetting;

  public static final String SERIALIZED_NAME_INPUT_CONTEXTS = "inputContexts";
  @SerializedName(SERIALIZED_NAME_INPUT_CONTEXTS)
  private List<InputContext> inputContexts = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_CONTEXTS = "outputContexts";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CONTEXTS)
  private List<OutputContext> outputContexts = new ArrayList<>();

  public static final String SERIALIZED_NAME_KENDRA_CONFIGURATION = "kendraConfiguration";
  @SerializedName(SERIALIZED_NAME_KENDRA_CONFIGURATION)
  private CreateIntentRequestKendraConfiguration kendraConfiguration;

  public static final String SERIALIZED_NAME_INITIAL_RESPONSE_SETTING = "initialResponseSetting";
  @SerializedName(SERIALIZED_NAME_INITIAL_RESPONSE_SETTING)
  private CreateIntentRequestInitialResponseSetting initialResponseSetting;

  public CreateIntentRequest() {
  }

  public CreateIntentRequest intentName(String intentName) {
    this.intentName = intentName;
    return this;
  }

  /**
   * The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
   * @return intentName
   */
  @javax.annotation.Nonnull
  public String getIntentName() {
    return intentName;
  }

  public void setIntentName(String intentName) {
    this.intentName = intentName;
  }


  public CreateIntentRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the intent. Use the description to help identify the intent in lists.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateIntentRequest parentIntentSignature(String parentIntentSignature) {
    this.parentIntentSignature = parentIntentSignature;
    return this;
  }

  /**
   * A unique identifier for the built-in intent to base this intent on.
   * @return parentIntentSignature
   */
  @javax.annotation.Nullable
  public String getParentIntentSignature() {
    return parentIntentSignature;
  }

  public void setParentIntentSignature(String parentIntentSignature) {
    this.parentIntentSignature = parentIntentSignature;
  }


  public CreateIntentRequest sampleUtterances(List<SampleUtterance> sampleUtterances) {
    this.sampleUtterances = sampleUtterances;
    return this;
  }

  public CreateIntentRequest addSampleUtterancesItem(SampleUtterance sampleUtterancesItem) {
    if (this.sampleUtterances == null) {
      this.sampleUtterances = new ArrayList<>();
    }
    this.sampleUtterances.add(sampleUtterancesItem);
    return this;
  }

  /**
   * &lt;p&gt;An array of strings that a user might say to signal the intent. For example, \&quot;I want a pizza\&quot;, or \&quot;I want a {PizzaSize} pizza\&quot;. &lt;/p&gt; &lt;p&gt;In an utterance, slot names are enclosed in curly braces (\&quot;{\&quot;, \&quot;}\&quot;) to indicate where they should be displayed in the utterance shown to the user.. &lt;/p&gt;
   * @return sampleUtterances
   */
  @javax.annotation.Nullable
  public List<SampleUtterance> getSampleUtterances() {
    return sampleUtterances;
  }

  public void setSampleUtterances(List<SampleUtterance> sampleUtterances) {
    this.sampleUtterances = sampleUtterances;
  }


  public CreateIntentRequest dialogCodeHook(CreateIntentRequestDialogCodeHook dialogCodeHook) {
    this.dialogCodeHook = dialogCodeHook;
    return this;
  }

  /**
   * Get dialogCodeHook
   * @return dialogCodeHook
   */
  @javax.annotation.Nullable
  public CreateIntentRequestDialogCodeHook getDialogCodeHook() {
    return dialogCodeHook;
  }

  public void setDialogCodeHook(CreateIntentRequestDialogCodeHook dialogCodeHook) {
    this.dialogCodeHook = dialogCodeHook;
  }


  public CreateIntentRequest fulfillmentCodeHook(CreateIntentRequestFulfillmentCodeHook fulfillmentCodeHook) {
    this.fulfillmentCodeHook = fulfillmentCodeHook;
    return this;
  }

  /**
   * Get fulfillmentCodeHook
   * @return fulfillmentCodeHook
   */
  @javax.annotation.Nullable
  public CreateIntentRequestFulfillmentCodeHook getFulfillmentCodeHook() {
    return fulfillmentCodeHook;
  }

  public void setFulfillmentCodeHook(CreateIntentRequestFulfillmentCodeHook fulfillmentCodeHook) {
    this.fulfillmentCodeHook = fulfillmentCodeHook;
  }


  public CreateIntentRequest intentConfirmationSetting(CreateIntentRequestIntentConfirmationSetting intentConfirmationSetting) {
    this.intentConfirmationSetting = intentConfirmationSetting;
    return this;
  }

  /**
   * Get intentConfirmationSetting
   * @return intentConfirmationSetting
   */
  @javax.annotation.Nullable
  public CreateIntentRequestIntentConfirmationSetting getIntentConfirmationSetting() {
    return intentConfirmationSetting;
  }

  public void setIntentConfirmationSetting(CreateIntentRequestIntentConfirmationSetting intentConfirmationSetting) {
    this.intentConfirmationSetting = intentConfirmationSetting;
  }


  public CreateIntentRequest intentClosingSetting(CreateIntentRequestIntentClosingSetting intentClosingSetting) {
    this.intentClosingSetting = intentClosingSetting;
    return this;
  }

  /**
   * Get intentClosingSetting
   * @return intentClosingSetting
   */
  @javax.annotation.Nullable
  public CreateIntentRequestIntentClosingSetting getIntentClosingSetting() {
    return intentClosingSetting;
  }

  public void setIntentClosingSetting(CreateIntentRequestIntentClosingSetting intentClosingSetting) {
    this.intentClosingSetting = intentClosingSetting;
  }


  public CreateIntentRequest inputContexts(List<InputContext> inputContexts) {
    this.inputContexts = inputContexts;
    return this;
  }

  public CreateIntentRequest addInputContextsItem(InputContext inputContextsItem) {
    if (this.inputContexts == null) {
      this.inputContexts = new ArrayList<>();
    }
    this.inputContexts.add(inputContextsItem);
    return this;
  }

  /**
   * &lt;p&gt;A list of contexts that must be active for this intent to be considered by Amazon Lex.&lt;/p&gt; &lt;p&gt;When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent.&lt;/p&gt; &lt;p&gt;A context can be automatically activated using the &lt;code&gt;outputContexts&lt;/code&gt; property or it can be set at runtime.&lt;/p&gt; &lt;p&gt; For example, if there are two intents with different input contexts that respond to the same utterances, only the intent with the active context will respond.&lt;/p&gt; &lt;p&gt;An intent may have up to 5 input contexts. If an intent has multiple input contexts, all of the contexts must be active to consider the intent.&lt;/p&gt;
   * @return inputContexts
   */
  @javax.annotation.Nullable
  public List<InputContext> getInputContexts() {
    return inputContexts;
  }

  public void setInputContexts(List<InputContext> inputContexts) {
    this.inputContexts = inputContexts;
  }


  public CreateIntentRequest outputContexts(List<OutputContext> outputContexts) {
    this.outputContexts = outputContexts;
    return this;
  }

  public CreateIntentRequest addOutputContextsItem(OutputContext outputContextsItem) {
    if (this.outputContexts == null) {
      this.outputContexts = new ArrayList<>();
    }
    this.outputContexts.add(outputContextsItem);
    return this;
  }

  /**
   * &lt;p&gt;A lists of contexts that the intent activates when it is fulfilled.&lt;/p&gt; &lt;p&gt;You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. &lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;outputContextsList&lt;/code&gt; property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active.&lt;/p&gt;
   * @return outputContexts
   */
  @javax.annotation.Nullable
  public List<OutputContext> getOutputContexts() {
    return outputContexts;
  }

  public void setOutputContexts(List<OutputContext> outputContexts) {
    this.outputContexts = outputContexts;
  }


  public CreateIntentRequest kendraConfiguration(CreateIntentRequestKendraConfiguration kendraConfiguration) {
    this.kendraConfiguration = kendraConfiguration;
    return this;
  }

  /**
   * Get kendraConfiguration
   * @return kendraConfiguration
   */
  @javax.annotation.Nullable
  public CreateIntentRequestKendraConfiguration getKendraConfiguration() {
    return kendraConfiguration;
  }

  public void setKendraConfiguration(CreateIntentRequestKendraConfiguration kendraConfiguration) {
    this.kendraConfiguration = kendraConfiguration;
  }


  public CreateIntentRequest initialResponseSetting(CreateIntentRequestInitialResponseSetting initialResponseSetting) {
    this.initialResponseSetting = initialResponseSetting;
    return this;
  }

  /**
   * Get initialResponseSetting
   * @return initialResponseSetting
   */
  @javax.annotation.Nullable
  public CreateIntentRequestInitialResponseSetting getInitialResponseSetting() {
    return initialResponseSetting;
  }

  public void setInitialResponseSetting(CreateIntentRequestInitialResponseSetting initialResponseSetting) {
    this.initialResponseSetting = initialResponseSetting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateIntentRequest createIntentRequest = (CreateIntentRequest) o;
    return Objects.equals(this.intentName, createIntentRequest.intentName) &&
        Objects.equals(this.description, createIntentRequest.description) &&
        Objects.equals(this.parentIntentSignature, createIntentRequest.parentIntentSignature) &&
        Objects.equals(this.sampleUtterances, createIntentRequest.sampleUtterances) &&
        Objects.equals(this.dialogCodeHook, createIntentRequest.dialogCodeHook) &&
        Objects.equals(this.fulfillmentCodeHook, createIntentRequest.fulfillmentCodeHook) &&
        Objects.equals(this.intentConfirmationSetting, createIntentRequest.intentConfirmationSetting) &&
        Objects.equals(this.intentClosingSetting, createIntentRequest.intentClosingSetting) &&
        Objects.equals(this.inputContexts, createIntentRequest.inputContexts) &&
        Objects.equals(this.outputContexts, createIntentRequest.outputContexts) &&
        Objects.equals(this.kendraConfiguration, createIntentRequest.kendraConfiguration) &&
        Objects.equals(this.initialResponseSetting, createIntentRequest.initialResponseSetting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intentName, description, parentIntentSignature, sampleUtterances, dialogCodeHook, fulfillmentCodeHook, intentConfirmationSetting, intentClosingSetting, inputContexts, outputContexts, kendraConfiguration, initialResponseSetting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateIntentRequest {\n");
    sb.append("    intentName: ").append(toIndentedString(intentName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    parentIntentSignature: ").append(toIndentedString(parentIntentSignature)).append("\n");
    sb.append("    sampleUtterances: ").append(toIndentedString(sampleUtterances)).append("\n");
    sb.append("    dialogCodeHook: ").append(toIndentedString(dialogCodeHook)).append("\n");
    sb.append("    fulfillmentCodeHook: ").append(toIndentedString(fulfillmentCodeHook)).append("\n");
    sb.append("    intentConfirmationSetting: ").append(toIndentedString(intentConfirmationSetting)).append("\n");
    sb.append("    intentClosingSetting: ").append(toIndentedString(intentClosingSetting)).append("\n");
    sb.append("    inputContexts: ").append(toIndentedString(inputContexts)).append("\n");
    sb.append("    outputContexts: ").append(toIndentedString(outputContexts)).append("\n");
    sb.append("    kendraConfiguration: ").append(toIndentedString(kendraConfiguration)).append("\n");
    sb.append("    initialResponseSetting: ").append(toIndentedString(initialResponseSetting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intentName");
    openapiFields.add("description");
    openapiFields.add("parentIntentSignature");
    openapiFields.add("sampleUtterances");
    openapiFields.add("dialogCodeHook");
    openapiFields.add("fulfillmentCodeHook");
    openapiFields.add("intentConfirmationSetting");
    openapiFields.add("intentClosingSetting");
    openapiFields.add("inputContexts");
    openapiFields.add("outputContexts");
    openapiFields.add("kendraConfiguration");
    openapiFields.add("initialResponseSetting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("intentName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateIntentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateIntentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateIntentRequest is not found in the empty JSON string", CreateIntentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateIntentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateIntentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateIntentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("intentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intentName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("parentIntentSignature") != null && !jsonObj.get("parentIntentSignature").isJsonNull()) && !jsonObj.get("parentIntentSignature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentIntentSignature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentIntentSignature").toString()));
      }
      if (jsonObj.get("sampleUtterances") != null && !jsonObj.get("sampleUtterances").isJsonNull()) {
        JsonArray jsonArraysampleUtterances = jsonObj.getAsJsonArray("sampleUtterances");
        if (jsonArraysampleUtterances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sampleUtterances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sampleUtterances` to be an array in the JSON string but got `%s`", jsonObj.get("sampleUtterances").toString()));
          }

          // validate the optional field `sampleUtterances` (array)
          for (int i = 0; i < jsonArraysampleUtterances.size(); i++) {
            SampleUtterance.validateJsonElement(jsonArraysampleUtterances.get(i));
          };
        }
      }
      // validate the optional field `dialogCodeHook`
      if (jsonObj.get("dialogCodeHook") != null && !jsonObj.get("dialogCodeHook").isJsonNull()) {
        CreateIntentRequestDialogCodeHook.validateJsonElement(jsonObj.get("dialogCodeHook"));
      }
      // validate the optional field `fulfillmentCodeHook`
      if (jsonObj.get("fulfillmentCodeHook") != null && !jsonObj.get("fulfillmentCodeHook").isJsonNull()) {
        CreateIntentRequestFulfillmentCodeHook.validateJsonElement(jsonObj.get("fulfillmentCodeHook"));
      }
      // validate the optional field `intentConfirmationSetting`
      if (jsonObj.get("intentConfirmationSetting") != null && !jsonObj.get("intentConfirmationSetting").isJsonNull()) {
        CreateIntentRequestIntentConfirmationSetting.validateJsonElement(jsonObj.get("intentConfirmationSetting"));
      }
      // validate the optional field `intentClosingSetting`
      if (jsonObj.get("intentClosingSetting") != null && !jsonObj.get("intentClosingSetting").isJsonNull()) {
        CreateIntentRequestIntentClosingSetting.validateJsonElement(jsonObj.get("intentClosingSetting"));
      }
      if (jsonObj.get("inputContexts") != null && !jsonObj.get("inputContexts").isJsonNull()) {
        JsonArray jsonArrayinputContexts = jsonObj.getAsJsonArray("inputContexts");
        if (jsonArrayinputContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputContexts` to be an array in the JSON string but got `%s`", jsonObj.get("inputContexts").toString()));
          }

          // validate the optional field `inputContexts` (array)
          for (int i = 0; i < jsonArrayinputContexts.size(); i++) {
            InputContext.validateJsonElement(jsonArrayinputContexts.get(i));
          };
        }
      }
      if (jsonObj.get("outputContexts") != null && !jsonObj.get("outputContexts").isJsonNull()) {
        JsonArray jsonArrayoutputContexts = jsonObj.getAsJsonArray("outputContexts");
        if (jsonArrayoutputContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputContexts` to be an array in the JSON string but got `%s`", jsonObj.get("outputContexts").toString()));
          }

          // validate the optional field `outputContexts` (array)
          for (int i = 0; i < jsonArrayoutputContexts.size(); i++) {
            OutputContext.validateJsonElement(jsonArrayoutputContexts.get(i));
          };
        }
      }
      // validate the optional field `kendraConfiguration`
      if (jsonObj.get("kendraConfiguration") != null && !jsonObj.get("kendraConfiguration").isJsonNull()) {
        CreateIntentRequestKendraConfiguration.validateJsonElement(jsonObj.get("kendraConfiguration"));
      }
      // validate the optional field `initialResponseSetting`
      if (jsonObj.get("initialResponseSetting") != null && !jsonObj.get("initialResponseSetting").isJsonNull()) {
        CreateIntentRequestInitialResponseSetting.validateJsonElement(jsonObj.get("initialResponseSetting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateIntentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateIntentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateIntentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateIntentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateIntentRequest>() {
           @Override
           public void write(JsonWriter out, CreateIntentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateIntentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateIntentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateIntentRequest
   * @throws IOException if the JSON string is invalid with respect to CreateIntentRequest
   */
  public static CreateIntentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateIntentRequest.class);
  }

  /**
   * Convert an instance of CreateIntentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

