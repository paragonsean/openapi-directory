/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.S3BucketTranscriptSourcePathFormat;
import org.openapitools.client.model.S3BucketTranscriptSourceTranscriptFilter;
import org.openapitools.client.model.TranscriptFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource {
  public static final String SERIALIZED_NAME_S3_BUCKET_NAME = "s3BucketName";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_NAME)
  private String s3BucketName;

  public static final String SERIALIZED_NAME_PATH_FORMAT = "pathFormat";
  @SerializedName(SERIALIZED_NAME_PATH_FORMAT)
  private S3BucketTranscriptSourcePathFormat pathFormat;

  public static final String SERIALIZED_NAME_TRANSCRIPT_FORMAT = "transcriptFormat";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_FORMAT)
  private TranscriptFormat transcriptFormat;

  public static final String SERIALIZED_NAME_TRANSCRIPT_FILTER = "transcriptFilter";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_FILTER)
  private S3BucketTranscriptSourceTranscriptFilter transcriptFilter;

  public static final String SERIALIZED_NAME_KMS_KEY_ARN = "kmsKeyArn";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ARN)
  private String kmsKeyArn;

  public StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource() {
  }

  public StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource s3BucketName(String s3BucketName) {
    this.s3BucketName = s3BucketName;
    return this;
  }

  /**
   * Get s3BucketName
   * @return s3BucketName
   */
  @javax.annotation.Nonnull
  public String getS3BucketName() {
    return s3BucketName;
  }

  public void setS3BucketName(String s3BucketName) {
    this.s3BucketName = s3BucketName;
  }


  public StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource pathFormat(S3BucketTranscriptSourcePathFormat pathFormat) {
    this.pathFormat = pathFormat;
    return this;
  }

  /**
   * Get pathFormat
   * @return pathFormat
   */
  @javax.annotation.Nullable
  public S3BucketTranscriptSourcePathFormat getPathFormat() {
    return pathFormat;
  }

  public void setPathFormat(S3BucketTranscriptSourcePathFormat pathFormat) {
    this.pathFormat = pathFormat;
  }


  public StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource transcriptFormat(TranscriptFormat transcriptFormat) {
    this.transcriptFormat = transcriptFormat;
    return this;
  }

  /**
   * Get transcriptFormat
   * @return transcriptFormat
   */
  @javax.annotation.Nonnull
  public TranscriptFormat getTranscriptFormat() {
    return transcriptFormat;
  }

  public void setTranscriptFormat(TranscriptFormat transcriptFormat) {
    this.transcriptFormat = transcriptFormat;
  }


  public StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource transcriptFilter(S3BucketTranscriptSourceTranscriptFilter transcriptFilter) {
    this.transcriptFilter = transcriptFilter;
    return this;
  }

  /**
   * Get transcriptFilter
   * @return transcriptFilter
   */
  @javax.annotation.Nullable
  public S3BucketTranscriptSourceTranscriptFilter getTranscriptFilter() {
    return transcriptFilter;
  }

  public void setTranscriptFilter(S3BucketTranscriptSourceTranscriptFilter transcriptFilter) {
    this.transcriptFilter = transcriptFilter;
  }


  public StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource kmsKeyArn(String kmsKeyArn) {
    this.kmsKeyArn = kmsKeyArn;
    return this;
  }

  /**
   * Get kmsKeyArn
   * @return kmsKeyArn
   */
  @javax.annotation.Nullable
  public String getKmsKeyArn() {
    return kmsKeyArn;
  }

  public void setKmsKeyArn(String kmsKeyArn) {
    this.kmsKeyArn = kmsKeyArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource startBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource = (StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource) o;
    return Objects.equals(this.s3BucketName, startBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.s3BucketName) &&
        Objects.equals(this.pathFormat, startBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.pathFormat) &&
        Objects.equals(this.transcriptFormat, startBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.transcriptFormat) &&
        Objects.equals(this.transcriptFilter, startBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.transcriptFilter) &&
        Objects.equals(this.kmsKeyArn, startBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.kmsKeyArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3BucketName, pathFormat, transcriptFormat, transcriptFilter, kmsKeyArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource {\n");
    sb.append("    s3BucketName: ").append(toIndentedString(s3BucketName)).append("\n");
    sb.append("    pathFormat: ").append(toIndentedString(pathFormat)).append("\n");
    sb.append("    transcriptFormat: ").append(toIndentedString(transcriptFormat)).append("\n");
    sb.append("    transcriptFilter: ").append(toIndentedString(transcriptFilter)).append("\n");
    sb.append("    kmsKeyArn: ").append(toIndentedString(kmsKeyArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("s3BucketName");
    openapiFields.add("pathFormat");
    openapiFields.add("transcriptFormat");
    openapiFields.add("transcriptFilter");
    openapiFields.add("kmsKeyArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("s3BucketName");
    openapiRequiredFields.add("transcriptFormat");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource is not found in the empty JSON string", StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `s3BucketName`
      String.validateJsonElement(jsonObj.get("s3BucketName"));
      // validate the optional field `pathFormat`
      if (jsonObj.get("pathFormat") != null && !jsonObj.get("pathFormat").isJsonNull()) {
        S3BucketTranscriptSourcePathFormat.validateJsonElement(jsonObj.get("pathFormat"));
      }
      // validate the required field `transcriptFormat`
      TranscriptFormat.validateJsonElement(jsonObj.get("transcriptFormat"));
      // validate the optional field `transcriptFilter`
      if (jsonObj.get("transcriptFilter") != null && !jsonObj.get("transcriptFilter").isJsonNull()) {
        S3BucketTranscriptSourceTranscriptFilter.validateJsonElement(jsonObj.get("transcriptFilter"));
      }
      // validate the optional field `kmsKeyArn`
      if (jsonObj.get("kmsKeyArn") != null && !jsonObj.get("kmsKeyArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("kmsKeyArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.class));

       return (TypeAdapter<T>) new TypeAdapter<StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource>() {
           @Override
           public void write(JsonWriter out, StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource
   * @throws IOException if the JSON string is invalid with respect to StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource
   */
  public static StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource.class);
  }

  /**
   * Convert an instance of StartBotRecommendationRequestTranscriptSourceSettingS3BucketTranscriptSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

