/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StartTestExecutionResponseTarget;
import org.openapitools.client.model.TestExecutionApiMode;
import org.openapitools.client.model.TestExecutionModality;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartTestExecutionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartTestExecutionResponse {
  public static final String SERIALIZED_NAME_TEST_EXECUTION_ID = "testExecutionId";
  @SerializedName(SERIALIZED_NAME_TEST_EXECUTION_ID)
  private String testExecutionId;

  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  private OffsetDateTime creationDateTime;

  public static final String SERIALIZED_NAME_TEST_SET_ID = "testSetId";
  @SerializedName(SERIALIZED_NAME_TEST_SET_ID)
  private String testSetId;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private StartTestExecutionResponseTarget target;

  public static final String SERIALIZED_NAME_API_MODE = "apiMode";
  @SerializedName(SERIALIZED_NAME_API_MODE)
  private TestExecutionApiMode apiMode;

  public static final String SERIALIZED_NAME_TEST_EXECUTION_MODALITY = "testExecutionModality";
  @SerializedName(SERIALIZED_NAME_TEST_EXECUTION_MODALITY)
  private TestExecutionModality testExecutionModality;

  public StartTestExecutionResponse() {
  }

  public StartTestExecutionResponse testExecutionId(String testExecutionId) {
    this.testExecutionId = testExecutionId;
    return this;
  }

  /**
   * Get testExecutionId
   * @return testExecutionId
   */
  @javax.annotation.Nullable
  public String getTestExecutionId() {
    return testExecutionId;
  }

  public void setTestExecutionId(String testExecutionId) {
    this.testExecutionId = testExecutionId;
  }


  public StartTestExecutionResponse creationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * Get creationDateTime
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public StartTestExecutionResponse testSetId(String testSetId) {
    this.testSetId = testSetId;
    return this;
  }

  /**
   * Get testSetId
   * @return testSetId
   */
  @javax.annotation.Nullable
  public String getTestSetId() {
    return testSetId;
  }

  public void setTestSetId(String testSetId) {
    this.testSetId = testSetId;
  }


  public StartTestExecutionResponse target(StartTestExecutionResponseTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public StartTestExecutionResponseTarget getTarget() {
    return target;
  }

  public void setTarget(StartTestExecutionResponseTarget target) {
    this.target = target;
  }


  public StartTestExecutionResponse apiMode(TestExecutionApiMode apiMode) {
    this.apiMode = apiMode;
    return this;
  }

  /**
   * Get apiMode
   * @return apiMode
   */
  @javax.annotation.Nullable
  public TestExecutionApiMode getApiMode() {
    return apiMode;
  }

  public void setApiMode(TestExecutionApiMode apiMode) {
    this.apiMode = apiMode;
  }


  public StartTestExecutionResponse testExecutionModality(TestExecutionModality testExecutionModality) {
    this.testExecutionModality = testExecutionModality;
    return this;
  }

  /**
   * Get testExecutionModality
   * @return testExecutionModality
   */
  @javax.annotation.Nullable
  public TestExecutionModality getTestExecutionModality() {
    return testExecutionModality;
  }

  public void setTestExecutionModality(TestExecutionModality testExecutionModality) {
    this.testExecutionModality = testExecutionModality;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartTestExecutionResponse startTestExecutionResponse = (StartTestExecutionResponse) o;
    return Objects.equals(this.testExecutionId, startTestExecutionResponse.testExecutionId) &&
        Objects.equals(this.creationDateTime, startTestExecutionResponse.creationDateTime) &&
        Objects.equals(this.testSetId, startTestExecutionResponse.testSetId) &&
        Objects.equals(this.target, startTestExecutionResponse.target) &&
        Objects.equals(this.apiMode, startTestExecutionResponse.apiMode) &&
        Objects.equals(this.testExecutionModality, startTestExecutionResponse.testExecutionModality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testExecutionId, creationDateTime, testSetId, target, apiMode, testExecutionModality);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartTestExecutionResponse {\n");
    sb.append("    testExecutionId: ").append(toIndentedString(testExecutionId)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    testSetId: ").append(toIndentedString(testSetId)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    apiMode: ").append(toIndentedString(apiMode)).append("\n");
    sb.append("    testExecutionModality: ").append(toIndentedString(testExecutionModality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testExecutionId");
    openapiFields.add("creationDateTime");
    openapiFields.add("testSetId");
    openapiFields.add("target");
    openapiFields.add("apiMode");
    openapiFields.add("testExecutionModality");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartTestExecutionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartTestExecutionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartTestExecutionResponse is not found in the empty JSON string", StartTestExecutionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartTestExecutionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartTestExecutionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `testExecutionId`
      if (jsonObj.get("testExecutionId") != null && !jsonObj.get("testExecutionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testExecutionId"));
      }
      // validate the optional field `creationDateTime`
      if (jsonObj.get("creationDateTime") != null && !jsonObj.get("creationDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationDateTime"));
      }
      // validate the optional field `testSetId`
      if (jsonObj.get("testSetId") != null && !jsonObj.get("testSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testSetId"));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        StartTestExecutionResponseTarget.validateJsonElement(jsonObj.get("target"));
      }
      // validate the optional field `apiMode`
      if (jsonObj.get("apiMode") != null && !jsonObj.get("apiMode").isJsonNull()) {
        TestExecutionApiMode.validateJsonElement(jsonObj.get("apiMode"));
      }
      // validate the optional field `testExecutionModality`
      if (jsonObj.get("testExecutionModality") != null && !jsonObj.get("testExecutionModality").isJsonNull()) {
        TestExecutionModality.validateJsonElement(jsonObj.get("testExecutionModality"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartTestExecutionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartTestExecutionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartTestExecutionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartTestExecutionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<StartTestExecutionResponse>() {
           @Override
           public void write(JsonWriter out, StartTestExecutionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartTestExecutionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartTestExecutionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartTestExecutionResponse
   * @throws IOException if the JSON string is invalid with respect to StartTestExecutionResponse
   */
  public static StartTestExecutionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartTestExecutionResponse.class);
  }

  /**
   * Convert an instance of StartTestExecutionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

