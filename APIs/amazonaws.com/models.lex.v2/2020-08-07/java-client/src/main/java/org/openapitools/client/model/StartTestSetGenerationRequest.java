/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.StartTestSetGenerationRequestGenerationDataSource;
import org.openapitools.client.model.StartTestSetGenerationRequestStorageLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartTestSetGenerationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartTestSetGenerationRequest {
  public static final String SERIALIZED_NAME_TEST_SET_NAME = "testSetName";
  @SerializedName(SERIALIZED_NAME_TEST_SET_NAME)
  private String testSetName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STORAGE_LOCATION = "storageLocation";
  @SerializedName(SERIALIZED_NAME_STORAGE_LOCATION)
  private StartTestSetGenerationRequestStorageLocation storageLocation;

  public static final String SERIALIZED_NAME_GENERATION_DATA_SOURCE = "generationDataSource";
  @SerializedName(SERIALIZED_NAME_GENERATION_DATA_SOURCE)
  private StartTestSetGenerationRequestGenerationDataSource generationDataSource;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_TEST_SET_TAGS = "testSetTags";
  @SerializedName(SERIALIZED_NAME_TEST_SET_TAGS)
  private Map<String, String> testSetTags = new HashMap<>();

  public StartTestSetGenerationRequest() {
  }

  public StartTestSetGenerationRequest testSetName(String testSetName) {
    this.testSetName = testSetName;
    return this;
  }

  /**
   * The test set name for the test set generation request.
   * @return testSetName
   */
  @javax.annotation.Nonnull
  public String getTestSetName() {
    return testSetName;
  }

  public void setTestSetName(String testSetName) {
    this.testSetName = testSetName;
  }


  public StartTestSetGenerationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The test set description for the test set generation request.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public StartTestSetGenerationRequest storageLocation(StartTestSetGenerationRequestStorageLocation storageLocation) {
    this.storageLocation = storageLocation;
    return this;
  }

  /**
   * Get storageLocation
   * @return storageLocation
   */
  @javax.annotation.Nonnull
  public StartTestSetGenerationRequestStorageLocation getStorageLocation() {
    return storageLocation;
  }

  public void setStorageLocation(StartTestSetGenerationRequestStorageLocation storageLocation) {
    this.storageLocation = storageLocation;
  }


  public StartTestSetGenerationRequest generationDataSource(StartTestSetGenerationRequestGenerationDataSource generationDataSource) {
    this.generationDataSource = generationDataSource;
    return this;
  }

  /**
   * Get generationDataSource
   * @return generationDataSource
   */
  @javax.annotation.Nonnull
  public StartTestSetGenerationRequestGenerationDataSource getGenerationDataSource() {
    return generationDataSource;
  }

  public void setGenerationDataSource(StartTestSetGenerationRequestGenerationDataSource generationDataSource) {
    this.generationDataSource = generationDataSource;
  }


  public StartTestSetGenerationRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public StartTestSetGenerationRequest testSetTags(Map<String, String> testSetTags) {
    this.testSetTags = testSetTags;
    return this;
  }

  public StartTestSetGenerationRequest putTestSetTagsItem(String key, String testSetTagsItem) {
    if (this.testSetTags == null) {
      this.testSetTags = new HashMap<>();
    }
    this.testSetTags.put(key, testSetTagsItem);
    return this;
  }

  /**
   * A list of tags to add to the test set. You can only add tags when you import/generate a new test set. You can&#39;t use the &lt;code&gt;UpdateTestSet&lt;/code&gt; operation to update tags. To update tags, use the &lt;code&gt;TagResource&lt;/code&gt; operation.
   * @return testSetTags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTestSetTags() {
    return testSetTags;
  }

  public void setTestSetTags(Map<String, String> testSetTags) {
    this.testSetTags = testSetTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartTestSetGenerationRequest startTestSetGenerationRequest = (StartTestSetGenerationRequest) o;
    return Objects.equals(this.testSetName, startTestSetGenerationRequest.testSetName) &&
        Objects.equals(this.description, startTestSetGenerationRequest.description) &&
        Objects.equals(this.storageLocation, startTestSetGenerationRequest.storageLocation) &&
        Objects.equals(this.generationDataSource, startTestSetGenerationRequest.generationDataSource) &&
        Objects.equals(this.roleArn, startTestSetGenerationRequest.roleArn) &&
        Objects.equals(this.testSetTags, startTestSetGenerationRequest.testSetTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testSetName, description, storageLocation, generationDataSource, roleArn, testSetTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartTestSetGenerationRequest {\n");
    sb.append("    testSetName: ").append(toIndentedString(testSetName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    storageLocation: ").append(toIndentedString(storageLocation)).append("\n");
    sb.append("    generationDataSource: ").append(toIndentedString(generationDataSource)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    testSetTags: ").append(toIndentedString(testSetTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testSetName");
    openapiFields.add("description");
    openapiFields.add("storageLocation");
    openapiFields.add("generationDataSource");
    openapiFields.add("roleArn");
    openapiFields.add("testSetTags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("testSetName");
    openapiRequiredFields.add("storageLocation");
    openapiRequiredFields.add("generationDataSource");
    openapiRequiredFields.add("roleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartTestSetGenerationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartTestSetGenerationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartTestSetGenerationRequest is not found in the empty JSON string", StartTestSetGenerationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartTestSetGenerationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartTestSetGenerationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartTestSetGenerationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("testSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testSetName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `storageLocation`
      StartTestSetGenerationRequestStorageLocation.validateJsonElement(jsonObj.get("storageLocation"));
      // validate the required field `generationDataSource`
      StartTestSetGenerationRequestGenerationDataSource.validateJsonElement(jsonObj.get("generationDataSource"));
      if (!jsonObj.get("roleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartTestSetGenerationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartTestSetGenerationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartTestSetGenerationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartTestSetGenerationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartTestSetGenerationRequest>() {
           @Override
           public void write(JsonWriter out, StartTestSetGenerationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartTestSetGenerationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartTestSetGenerationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartTestSetGenerationRequest
   * @throws IOException if the JSON string is invalid with respect to StartTestSetGenerationRequest
   */
  public static StartTestSetGenerationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartTestSetGenerationRequest.class);
  }

  /**
   * Convert an instance of StartTestSetGenerationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

