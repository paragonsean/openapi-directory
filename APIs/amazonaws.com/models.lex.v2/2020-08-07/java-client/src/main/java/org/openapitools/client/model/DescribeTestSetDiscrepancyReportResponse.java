/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribeTestSetDiscrepancyReportResponseTarget;
import org.openapitools.client.model.DescribeTestSetDiscrepancyReportResponseTestSetDiscrepancyTopErrors;
import org.openapitools.client.model.TestSetDiscrepancyReportStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeTestSetDiscrepancyReportResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeTestSetDiscrepancyReportResponse {
  public static final String SERIALIZED_NAME_TEST_SET_DISCREPANCY_REPORT_ID = "testSetDiscrepancyReportId";
  @SerializedName(SERIALIZED_NAME_TEST_SET_DISCREPANCY_REPORT_ID)
  private String testSetDiscrepancyReportId;

  public static final String SERIALIZED_NAME_TEST_SET_ID = "testSetId";
  @SerializedName(SERIALIZED_NAME_TEST_SET_ID)
  private String testSetId;

  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  private OffsetDateTime creationDateTime;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private DescribeTestSetDiscrepancyReportResponseTarget target;

  public static final String SERIALIZED_NAME_TEST_SET_DISCREPANCY_REPORT_STATUS = "testSetDiscrepancyReportStatus";
  @SerializedName(SERIALIZED_NAME_TEST_SET_DISCREPANCY_REPORT_STATUS)
  private TestSetDiscrepancyReportStatus testSetDiscrepancyReportStatus;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATA_TIME = "lastUpdatedDataTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATA_TIME)
  private OffsetDateTime lastUpdatedDataTime;

  public static final String SERIALIZED_NAME_TEST_SET_DISCREPANCY_TOP_ERRORS = "testSetDiscrepancyTopErrors";
  @SerializedName(SERIALIZED_NAME_TEST_SET_DISCREPANCY_TOP_ERRORS)
  private DescribeTestSetDiscrepancyReportResponseTestSetDiscrepancyTopErrors testSetDiscrepancyTopErrors;

  public static final String SERIALIZED_NAME_TEST_SET_DISCREPANCY_RAW_OUTPUT_URL = "testSetDiscrepancyRawOutputUrl";
  @SerializedName(SERIALIZED_NAME_TEST_SET_DISCREPANCY_RAW_OUTPUT_URL)
  private String testSetDiscrepancyRawOutputUrl;

  public static final String SERIALIZED_NAME_FAILURE_REASONS = "failureReasons";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASONS)
  private List failureReasons;

  public DescribeTestSetDiscrepancyReportResponse() {
  }

  public DescribeTestSetDiscrepancyReportResponse testSetDiscrepancyReportId(String testSetDiscrepancyReportId) {
    this.testSetDiscrepancyReportId = testSetDiscrepancyReportId;
    return this;
  }

  /**
   * Get testSetDiscrepancyReportId
   * @return testSetDiscrepancyReportId
   */
  @javax.annotation.Nullable
  public String getTestSetDiscrepancyReportId() {
    return testSetDiscrepancyReportId;
  }

  public void setTestSetDiscrepancyReportId(String testSetDiscrepancyReportId) {
    this.testSetDiscrepancyReportId = testSetDiscrepancyReportId;
  }


  public DescribeTestSetDiscrepancyReportResponse testSetId(String testSetId) {
    this.testSetId = testSetId;
    return this;
  }

  /**
   * Get testSetId
   * @return testSetId
   */
  @javax.annotation.Nullable
  public String getTestSetId() {
    return testSetId;
  }

  public void setTestSetId(String testSetId) {
    this.testSetId = testSetId;
  }


  public DescribeTestSetDiscrepancyReportResponse creationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * Get creationDateTime
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public DescribeTestSetDiscrepancyReportResponse target(DescribeTestSetDiscrepancyReportResponseTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public DescribeTestSetDiscrepancyReportResponseTarget getTarget() {
    return target;
  }

  public void setTarget(DescribeTestSetDiscrepancyReportResponseTarget target) {
    this.target = target;
  }


  public DescribeTestSetDiscrepancyReportResponse testSetDiscrepancyReportStatus(TestSetDiscrepancyReportStatus testSetDiscrepancyReportStatus) {
    this.testSetDiscrepancyReportStatus = testSetDiscrepancyReportStatus;
    return this;
  }

  /**
   * Get testSetDiscrepancyReportStatus
   * @return testSetDiscrepancyReportStatus
   */
  @javax.annotation.Nullable
  public TestSetDiscrepancyReportStatus getTestSetDiscrepancyReportStatus() {
    return testSetDiscrepancyReportStatus;
  }

  public void setTestSetDiscrepancyReportStatus(TestSetDiscrepancyReportStatus testSetDiscrepancyReportStatus) {
    this.testSetDiscrepancyReportStatus = testSetDiscrepancyReportStatus;
  }


  public DescribeTestSetDiscrepancyReportResponse lastUpdatedDataTime(OffsetDateTime lastUpdatedDataTime) {
    this.lastUpdatedDataTime = lastUpdatedDataTime;
    return this;
  }

  /**
   * Get lastUpdatedDataTime
   * @return lastUpdatedDataTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDataTime() {
    return lastUpdatedDataTime;
  }

  public void setLastUpdatedDataTime(OffsetDateTime lastUpdatedDataTime) {
    this.lastUpdatedDataTime = lastUpdatedDataTime;
  }


  public DescribeTestSetDiscrepancyReportResponse testSetDiscrepancyTopErrors(DescribeTestSetDiscrepancyReportResponseTestSetDiscrepancyTopErrors testSetDiscrepancyTopErrors) {
    this.testSetDiscrepancyTopErrors = testSetDiscrepancyTopErrors;
    return this;
  }

  /**
   * Get testSetDiscrepancyTopErrors
   * @return testSetDiscrepancyTopErrors
   */
  @javax.annotation.Nullable
  public DescribeTestSetDiscrepancyReportResponseTestSetDiscrepancyTopErrors getTestSetDiscrepancyTopErrors() {
    return testSetDiscrepancyTopErrors;
  }

  public void setTestSetDiscrepancyTopErrors(DescribeTestSetDiscrepancyReportResponseTestSetDiscrepancyTopErrors testSetDiscrepancyTopErrors) {
    this.testSetDiscrepancyTopErrors = testSetDiscrepancyTopErrors;
  }


  public DescribeTestSetDiscrepancyReportResponse testSetDiscrepancyRawOutputUrl(String testSetDiscrepancyRawOutputUrl) {
    this.testSetDiscrepancyRawOutputUrl = testSetDiscrepancyRawOutputUrl;
    return this;
  }

  /**
   * Get testSetDiscrepancyRawOutputUrl
   * @return testSetDiscrepancyRawOutputUrl
   */
  @javax.annotation.Nullable
  public String getTestSetDiscrepancyRawOutputUrl() {
    return testSetDiscrepancyRawOutputUrl;
  }

  public void setTestSetDiscrepancyRawOutputUrl(String testSetDiscrepancyRawOutputUrl) {
    this.testSetDiscrepancyRawOutputUrl = testSetDiscrepancyRawOutputUrl;
  }


  public DescribeTestSetDiscrepancyReportResponse failureReasons(List failureReasons) {
    this.failureReasons = failureReasons;
    return this;
  }

  /**
   * Get failureReasons
   * @return failureReasons
   */
  @javax.annotation.Nullable
  public List getFailureReasons() {
    return failureReasons;
  }

  public void setFailureReasons(List failureReasons) {
    this.failureReasons = failureReasons;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeTestSetDiscrepancyReportResponse describeTestSetDiscrepancyReportResponse = (DescribeTestSetDiscrepancyReportResponse) o;
    return Objects.equals(this.testSetDiscrepancyReportId, describeTestSetDiscrepancyReportResponse.testSetDiscrepancyReportId) &&
        Objects.equals(this.testSetId, describeTestSetDiscrepancyReportResponse.testSetId) &&
        Objects.equals(this.creationDateTime, describeTestSetDiscrepancyReportResponse.creationDateTime) &&
        Objects.equals(this.target, describeTestSetDiscrepancyReportResponse.target) &&
        Objects.equals(this.testSetDiscrepancyReportStatus, describeTestSetDiscrepancyReportResponse.testSetDiscrepancyReportStatus) &&
        Objects.equals(this.lastUpdatedDataTime, describeTestSetDiscrepancyReportResponse.lastUpdatedDataTime) &&
        Objects.equals(this.testSetDiscrepancyTopErrors, describeTestSetDiscrepancyReportResponse.testSetDiscrepancyTopErrors) &&
        Objects.equals(this.testSetDiscrepancyRawOutputUrl, describeTestSetDiscrepancyReportResponse.testSetDiscrepancyRawOutputUrl) &&
        Objects.equals(this.failureReasons, describeTestSetDiscrepancyReportResponse.failureReasons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testSetDiscrepancyReportId, testSetId, creationDateTime, target, testSetDiscrepancyReportStatus, lastUpdatedDataTime, testSetDiscrepancyTopErrors, testSetDiscrepancyRawOutputUrl, failureReasons);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeTestSetDiscrepancyReportResponse {\n");
    sb.append("    testSetDiscrepancyReportId: ").append(toIndentedString(testSetDiscrepancyReportId)).append("\n");
    sb.append("    testSetId: ").append(toIndentedString(testSetId)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    testSetDiscrepancyReportStatus: ").append(toIndentedString(testSetDiscrepancyReportStatus)).append("\n");
    sb.append("    lastUpdatedDataTime: ").append(toIndentedString(lastUpdatedDataTime)).append("\n");
    sb.append("    testSetDiscrepancyTopErrors: ").append(toIndentedString(testSetDiscrepancyTopErrors)).append("\n");
    sb.append("    testSetDiscrepancyRawOutputUrl: ").append(toIndentedString(testSetDiscrepancyRawOutputUrl)).append("\n");
    sb.append("    failureReasons: ").append(toIndentedString(failureReasons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testSetDiscrepancyReportId");
    openapiFields.add("testSetId");
    openapiFields.add("creationDateTime");
    openapiFields.add("target");
    openapiFields.add("testSetDiscrepancyReportStatus");
    openapiFields.add("lastUpdatedDataTime");
    openapiFields.add("testSetDiscrepancyTopErrors");
    openapiFields.add("testSetDiscrepancyRawOutputUrl");
    openapiFields.add("failureReasons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeTestSetDiscrepancyReportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeTestSetDiscrepancyReportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeTestSetDiscrepancyReportResponse is not found in the empty JSON string", DescribeTestSetDiscrepancyReportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeTestSetDiscrepancyReportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeTestSetDiscrepancyReportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `testSetDiscrepancyReportId`
      if (jsonObj.get("testSetDiscrepancyReportId") != null && !jsonObj.get("testSetDiscrepancyReportId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testSetDiscrepancyReportId"));
      }
      // validate the optional field `testSetId`
      if (jsonObj.get("testSetId") != null && !jsonObj.get("testSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testSetId"));
      }
      // validate the optional field `creationDateTime`
      if (jsonObj.get("creationDateTime") != null && !jsonObj.get("creationDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationDateTime"));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        DescribeTestSetDiscrepancyReportResponseTarget.validateJsonElement(jsonObj.get("target"));
      }
      // validate the optional field `testSetDiscrepancyReportStatus`
      if (jsonObj.get("testSetDiscrepancyReportStatus") != null && !jsonObj.get("testSetDiscrepancyReportStatus").isJsonNull()) {
        TestSetDiscrepancyReportStatus.validateJsonElement(jsonObj.get("testSetDiscrepancyReportStatus"));
      }
      // validate the optional field `lastUpdatedDataTime`
      if (jsonObj.get("lastUpdatedDataTime") != null && !jsonObj.get("lastUpdatedDataTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedDataTime"));
      }
      // validate the optional field `testSetDiscrepancyTopErrors`
      if (jsonObj.get("testSetDiscrepancyTopErrors") != null && !jsonObj.get("testSetDiscrepancyTopErrors").isJsonNull()) {
        DescribeTestSetDiscrepancyReportResponseTestSetDiscrepancyTopErrors.validateJsonElement(jsonObj.get("testSetDiscrepancyTopErrors"));
      }
      // validate the optional field `testSetDiscrepancyRawOutputUrl`
      if (jsonObj.get("testSetDiscrepancyRawOutputUrl") != null && !jsonObj.get("testSetDiscrepancyRawOutputUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testSetDiscrepancyRawOutputUrl"));
      }
      // validate the optional field `failureReasons`
      if (jsonObj.get("failureReasons") != null && !jsonObj.get("failureReasons").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("failureReasons"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeTestSetDiscrepancyReportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeTestSetDiscrepancyReportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeTestSetDiscrepancyReportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeTestSetDiscrepancyReportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeTestSetDiscrepancyReportResponse>() {
           @Override
           public void write(JsonWriter out, DescribeTestSetDiscrepancyReportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeTestSetDiscrepancyReportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeTestSetDiscrepancyReportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeTestSetDiscrepancyReportResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeTestSetDiscrepancyReportResponse
   */
  public static DescribeTestSetDiscrepancyReportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeTestSetDiscrepancyReportResponse.class);
  }

  /**
   * Convert an instance of DescribeTestSetDiscrepancyReportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

