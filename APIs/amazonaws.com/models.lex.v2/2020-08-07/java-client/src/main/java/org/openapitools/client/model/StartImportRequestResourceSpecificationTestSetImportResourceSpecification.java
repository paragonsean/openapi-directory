/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.TestSetImportResourceSpecificationImportInputLocation;
import org.openapitools.client.model.TestSetImportResourceSpecificationStorageLocation;
import org.openapitools.client.model.TestSetModality;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartImportRequestResourceSpecificationTestSetImportResourceSpecification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartImportRequestResourceSpecificationTestSetImportResourceSpecification {
  public static final String SERIALIZED_NAME_TEST_SET_NAME = "testSetName";
  @SerializedName(SERIALIZED_NAME_TEST_SET_NAME)
  private String testSetName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_STORAGE_LOCATION = "storageLocation";
  @SerializedName(SERIALIZED_NAME_STORAGE_LOCATION)
  private TestSetImportResourceSpecificationStorageLocation storageLocation;

  public static final String SERIALIZED_NAME_IMPORT_INPUT_LOCATION = "importInputLocation";
  @SerializedName(SERIALIZED_NAME_IMPORT_INPUT_LOCATION)
  private TestSetImportResourceSpecificationImportInputLocation importInputLocation;

  public static final String SERIALIZED_NAME_MODALITY = "modality";
  @SerializedName(SERIALIZED_NAME_MODALITY)
  private TestSetModality modality;

  public static final String SERIALIZED_NAME_TEST_SET_TAGS = "testSetTags";
  @SerializedName(SERIALIZED_NAME_TEST_SET_TAGS)
  private Map testSetTags;

  public StartImportRequestResourceSpecificationTestSetImportResourceSpecification() {
  }

  public StartImportRequestResourceSpecificationTestSetImportResourceSpecification testSetName(String testSetName) {
    this.testSetName = testSetName;
    return this;
  }

  /**
   * Get testSetName
   * @return testSetName
   */
  @javax.annotation.Nonnull
  public String getTestSetName() {
    return testSetName;
  }

  public void setTestSetName(String testSetName) {
    this.testSetName = testSetName;
  }


  public StartImportRequestResourceSpecificationTestSetImportResourceSpecification description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public StartImportRequestResourceSpecificationTestSetImportResourceSpecification roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public StartImportRequestResourceSpecificationTestSetImportResourceSpecification storageLocation(TestSetImportResourceSpecificationStorageLocation storageLocation) {
    this.storageLocation = storageLocation;
    return this;
  }

  /**
   * Get storageLocation
   * @return storageLocation
   */
  @javax.annotation.Nonnull
  public TestSetImportResourceSpecificationStorageLocation getStorageLocation() {
    return storageLocation;
  }

  public void setStorageLocation(TestSetImportResourceSpecificationStorageLocation storageLocation) {
    this.storageLocation = storageLocation;
  }


  public StartImportRequestResourceSpecificationTestSetImportResourceSpecification importInputLocation(TestSetImportResourceSpecificationImportInputLocation importInputLocation) {
    this.importInputLocation = importInputLocation;
    return this;
  }

  /**
   * Get importInputLocation
   * @return importInputLocation
   */
  @javax.annotation.Nonnull
  public TestSetImportResourceSpecificationImportInputLocation getImportInputLocation() {
    return importInputLocation;
  }

  public void setImportInputLocation(TestSetImportResourceSpecificationImportInputLocation importInputLocation) {
    this.importInputLocation = importInputLocation;
  }


  public StartImportRequestResourceSpecificationTestSetImportResourceSpecification modality(TestSetModality modality) {
    this.modality = modality;
    return this;
  }

  /**
   * Get modality
   * @return modality
   */
  @javax.annotation.Nonnull
  public TestSetModality getModality() {
    return modality;
  }

  public void setModality(TestSetModality modality) {
    this.modality = modality;
  }


  public StartImportRequestResourceSpecificationTestSetImportResourceSpecification testSetTags(Map testSetTags) {
    this.testSetTags = testSetTags;
    return this;
  }

  /**
   * Get testSetTags
   * @return testSetTags
   */
  @javax.annotation.Nullable
  public Map getTestSetTags() {
    return testSetTags;
  }

  public void setTestSetTags(Map testSetTags) {
    this.testSetTags = testSetTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartImportRequestResourceSpecificationTestSetImportResourceSpecification startImportRequestResourceSpecificationTestSetImportResourceSpecification = (StartImportRequestResourceSpecificationTestSetImportResourceSpecification) o;
    return Objects.equals(this.testSetName, startImportRequestResourceSpecificationTestSetImportResourceSpecification.testSetName) &&
        Objects.equals(this.description, startImportRequestResourceSpecificationTestSetImportResourceSpecification.description) &&
        Objects.equals(this.roleArn, startImportRequestResourceSpecificationTestSetImportResourceSpecification.roleArn) &&
        Objects.equals(this.storageLocation, startImportRequestResourceSpecificationTestSetImportResourceSpecification.storageLocation) &&
        Objects.equals(this.importInputLocation, startImportRequestResourceSpecificationTestSetImportResourceSpecification.importInputLocation) &&
        Objects.equals(this.modality, startImportRequestResourceSpecificationTestSetImportResourceSpecification.modality) &&
        Objects.equals(this.testSetTags, startImportRequestResourceSpecificationTestSetImportResourceSpecification.testSetTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testSetName, description, roleArn, storageLocation, importInputLocation, modality, testSetTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartImportRequestResourceSpecificationTestSetImportResourceSpecification {\n");
    sb.append("    testSetName: ").append(toIndentedString(testSetName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    storageLocation: ").append(toIndentedString(storageLocation)).append("\n");
    sb.append("    importInputLocation: ").append(toIndentedString(importInputLocation)).append("\n");
    sb.append("    modality: ").append(toIndentedString(modality)).append("\n");
    sb.append("    testSetTags: ").append(toIndentedString(testSetTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testSetName");
    openapiFields.add("description");
    openapiFields.add("roleArn");
    openapiFields.add("storageLocation");
    openapiFields.add("importInputLocation");
    openapiFields.add("modality");
    openapiFields.add("testSetTags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("testSetName");
    openapiRequiredFields.add("roleArn");
    openapiRequiredFields.add("storageLocation");
    openapiRequiredFields.add("importInputLocation");
    openapiRequiredFields.add("modality");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartImportRequestResourceSpecificationTestSetImportResourceSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartImportRequestResourceSpecificationTestSetImportResourceSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartImportRequestResourceSpecificationTestSetImportResourceSpecification is not found in the empty JSON string", StartImportRequestResourceSpecificationTestSetImportResourceSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartImportRequestResourceSpecificationTestSetImportResourceSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartImportRequestResourceSpecificationTestSetImportResourceSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartImportRequestResourceSpecificationTestSetImportResourceSpecification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `testSetName`
      String.validateJsonElement(jsonObj.get("testSetName"));
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the required field `roleArn`
      String.validateJsonElement(jsonObj.get("roleArn"));
      // validate the required field `storageLocation`
      TestSetImportResourceSpecificationStorageLocation.validateJsonElement(jsonObj.get("storageLocation"));
      // validate the required field `importInputLocation`
      TestSetImportResourceSpecificationImportInputLocation.validateJsonElement(jsonObj.get("importInputLocation"));
      // validate the required field `modality`
      TestSetModality.validateJsonElement(jsonObj.get("modality"));
      // validate the optional field `testSetTags`
      if (jsonObj.get("testSetTags") != null && !jsonObj.get("testSetTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("testSetTags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartImportRequestResourceSpecificationTestSetImportResourceSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartImportRequestResourceSpecificationTestSetImportResourceSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartImportRequestResourceSpecificationTestSetImportResourceSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartImportRequestResourceSpecificationTestSetImportResourceSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<StartImportRequestResourceSpecificationTestSetImportResourceSpecification>() {
           @Override
           public void write(JsonWriter out, StartImportRequestResourceSpecificationTestSetImportResourceSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartImportRequestResourceSpecificationTestSetImportResourceSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartImportRequestResourceSpecificationTestSetImportResourceSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartImportRequestResourceSpecificationTestSetImportResourceSpecification
   * @throws IOException if the JSON string is invalid with respect to StartImportRequestResourceSpecificationTestSetImportResourceSpecification
   */
  public static StartImportRequestResourceSpecificationTestSetImportResourceSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartImportRequestResourceSpecificationTestSetImportResourceSpecification.class);
  }

  /**
   * Convert an instance of StartImportRequestResourceSpecificationTestSetImportResourceSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

