/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PromptAttemptSpecificationAllowedInputTypes;
import org.openapitools.client.model.PromptAttemptSpecificationAudioAndDTMFInputSpecification;
import org.openapitools.client.model.PromptAttemptSpecificationTextInputSpecification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the settings on a prompt attempt.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PromptAttemptSpecification {
  public static final String SERIALIZED_NAME_ALLOW_INTERRUPT = "allowInterrupt";
  @SerializedName(SERIALIZED_NAME_ALLOW_INTERRUPT)
  private Boolean allowInterrupt;

  public static final String SERIALIZED_NAME_ALLOWED_INPUT_TYPES = "allowedInputTypes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_INPUT_TYPES)
  private PromptAttemptSpecificationAllowedInputTypes allowedInputTypes;

  public static final String SERIALIZED_NAME_AUDIO_AND_D_T_M_F_INPUT_SPECIFICATION = "audioAndDTMFInputSpecification";
  @SerializedName(SERIALIZED_NAME_AUDIO_AND_D_T_M_F_INPUT_SPECIFICATION)
  private PromptAttemptSpecificationAudioAndDTMFInputSpecification audioAndDTMFInputSpecification;

  public static final String SERIALIZED_NAME_TEXT_INPUT_SPECIFICATION = "textInputSpecification";
  @SerializedName(SERIALIZED_NAME_TEXT_INPUT_SPECIFICATION)
  private PromptAttemptSpecificationTextInputSpecification textInputSpecification;

  public PromptAttemptSpecification() {
  }

  public PromptAttemptSpecification allowInterrupt(Boolean allowInterrupt) {
    this.allowInterrupt = allowInterrupt;
    return this;
  }

  /**
   * Get allowInterrupt
   * @return allowInterrupt
   */
  @javax.annotation.Nullable
  public Boolean getAllowInterrupt() {
    return allowInterrupt;
  }

  public void setAllowInterrupt(Boolean allowInterrupt) {
    this.allowInterrupt = allowInterrupt;
  }


  public PromptAttemptSpecification allowedInputTypes(PromptAttemptSpecificationAllowedInputTypes allowedInputTypes) {
    this.allowedInputTypes = allowedInputTypes;
    return this;
  }

  /**
   * Get allowedInputTypes
   * @return allowedInputTypes
   */
  @javax.annotation.Nonnull
  public PromptAttemptSpecificationAllowedInputTypes getAllowedInputTypes() {
    return allowedInputTypes;
  }

  public void setAllowedInputTypes(PromptAttemptSpecificationAllowedInputTypes allowedInputTypes) {
    this.allowedInputTypes = allowedInputTypes;
  }


  public PromptAttemptSpecification audioAndDTMFInputSpecification(PromptAttemptSpecificationAudioAndDTMFInputSpecification audioAndDTMFInputSpecification) {
    this.audioAndDTMFInputSpecification = audioAndDTMFInputSpecification;
    return this;
  }

  /**
   * Get audioAndDTMFInputSpecification
   * @return audioAndDTMFInputSpecification
   */
  @javax.annotation.Nullable
  public PromptAttemptSpecificationAudioAndDTMFInputSpecification getAudioAndDTMFInputSpecification() {
    return audioAndDTMFInputSpecification;
  }

  public void setAudioAndDTMFInputSpecification(PromptAttemptSpecificationAudioAndDTMFInputSpecification audioAndDTMFInputSpecification) {
    this.audioAndDTMFInputSpecification = audioAndDTMFInputSpecification;
  }


  public PromptAttemptSpecification textInputSpecification(PromptAttemptSpecificationTextInputSpecification textInputSpecification) {
    this.textInputSpecification = textInputSpecification;
    return this;
  }

  /**
   * Get textInputSpecification
   * @return textInputSpecification
   */
  @javax.annotation.Nullable
  public PromptAttemptSpecificationTextInputSpecification getTextInputSpecification() {
    return textInputSpecification;
  }

  public void setTextInputSpecification(PromptAttemptSpecificationTextInputSpecification textInputSpecification) {
    this.textInputSpecification = textInputSpecification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PromptAttemptSpecification promptAttemptSpecification = (PromptAttemptSpecification) o;
    return Objects.equals(this.allowInterrupt, promptAttemptSpecification.allowInterrupt) &&
        Objects.equals(this.allowedInputTypes, promptAttemptSpecification.allowedInputTypes) &&
        Objects.equals(this.audioAndDTMFInputSpecification, promptAttemptSpecification.audioAndDTMFInputSpecification) &&
        Objects.equals(this.textInputSpecification, promptAttemptSpecification.textInputSpecification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowInterrupt, allowedInputTypes, audioAndDTMFInputSpecification, textInputSpecification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PromptAttemptSpecification {\n");
    sb.append("    allowInterrupt: ").append(toIndentedString(allowInterrupt)).append("\n");
    sb.append("    allowedInputTypes: ").append(toIndentedString(allowedInputTypes)).append("\n");
    sb.append("    audioAndDTMFInputSpecification: ").append(toIndentedString(audioAndDTMFInputSpecification)).append("\n");
    sb.append("    textInputSpecification: ").append(toIndentedString(textInputSpecification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowInterrupt");
    openapiFields.add("allowedInputTypes");
    openapiFields.add("audioAndDTMFInputSpecification");
    openapiFields.add("textInputSpecification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowedInputTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PromptAttemptSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PromptAttemptSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PromptAttemptSpecification is not found in the empty JSON string", PromptAttemptSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PromptAttemptSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PromptAttemptSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PromptAttemptSpecification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allowInterrupt`
      if (jsonObj.get("allowInterrupt") != null && !jsonObj.get("allowInterrupt").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("allowInterrupt"));
      }
      // validate the required field `allowedInputTypes`
      PromptAttemptSpecificationAllowedInputTypes.validateJsonElement(jsonObj.get("allowedInputTypes"));
      // validate the optional field `audioAndDTMFInputSpecification`
      if (jsonObj.get("audioAndDTMFInputSpecification") != null && !jsonObj.get("audioAndDTMFInputSpecification").isJsonNull()) {
        PromptAttemptSpecificationAudioAndDTMFInputSpecification.validateJsonElement(jsonObj.get("audioAndDTMFInputSpecification"));
      }
      // validate the optional field `textInputSpecification`
      if (jsonObj.get("textInputSpecification") != null && !jsonObj.get("textInputSpecification").isJsonNull()) {
        PromptAttemptSpecificationTextInputSpecification.validateJsonElement(jsonObj.get("textInputSpecification"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PromptAttemptSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PromptAttemptSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PromptAttemptSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PromptAttemptSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<PromptAttemptSpecification>() {
           @Override
           public void write(JsonWriter out, PromptAttemptSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PromptAttemptSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PromptAttemptSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PromptAttemptSpecification
   * @throws IOException if the JSON string is invalid with respect to PromptAttemptSpecification
   */
  public static PromptAttemptSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PromptAttemptSpecification.class);
  }

  /**
   * Convert an instance of PromptAttemptSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

