/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UserTurnOutputSpecificationIntent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserTurnSpecificationExpected
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserTurnSpecificationExpected {
  public static final String SERIALIZED_NAME_INTENT = "intent";
  @SerializedName(SERIALIZED_NAME_INTENT)
  private UserTurnOutputSpecificationIntent intent;

  public static final String SERIALIZED_NAME_ACTIVE_CONTEXTS = "activeContexts";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CONTEXTS)
  private List activeContexts;

  public static final String SERIALIZED_NAME_TRANSCRIPT = "transcript";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT)
  private String transcript;

  public UserTurnSpecificationExpected() {
  }

  public UserTurnSpecificationExpected intent(UserTurnOutputSpecificationIntent intent) {
    this.intent = intent;
    return this;
  }

  /**
   * Get intent
   * @return intent
   */
  @javax.annotation.Nonnull
  public UserTurnOutputSpecificationIntent getIntent() {
    return intent;
  }

  public void setIntent(UserTurnOutputSpecificationIntent intent) {
    this.intent = intent;
  }


  public UserTurnSpecificationExpected activeContexts(List activeContexts) {
    this.activeContexts = activeContexts;
    return this;
  }

  /**
   * Get activeContexts
   * @return activeContexts
   */
  @javax.annotation.Nullable
  public List getActiveContexts() {
    return activeContexts;
  }

  public void setActiveContexts(List activeContexts) {
    this.activeContexts = activeContexts;
  }


  public UserTurnSpecificationExpected transcript(String transcript) {
    this.transcript = transcript;
    return this;
  }

  /**
   * Get transcript
   * @return transcript
   */
  @javax.annotation.Nullable
  public String getTranscript() {
    return transcript;
  }

  public void setTranscript(String transcript) {
    this.transcript = transcript;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserTurnSpecificationExpected userTurnSpecificationExpected = (UserTurnSpecificationExpected) o;
    return Objects.equals(this.intent, userTurnSpecificationExpected.intent) &&
        Objects.equals(this.activeContexts, userTurnSpecificationExpected.activeContexts) &&
        Objects.equals(this.transcript, userTurnSpecificationExpected.transcript);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intent, activeContexts, transcript);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserTurnSpecificationExpected {\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    activeContexts: ").append(toIndentedString(activeContexts)).append("\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intent");
    openapiFields.add("activeContexts");
    openapiFields.add("transcript");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("intent");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserTurnSpecificationExpected
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserTurnSpecificationExpected.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserTurnSpecificationExpected is not found in the empty JSON string", UserTurnSpecificationExpected.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserTurnSpecificationExpected.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserTurnSpecificationExpected` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserTurnSpecificationExpected.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `intent`
      UserTurnOutputSpecificationIntent.validateJsonElement(jsonObj.get("intent"));
      // validate the optional field `activeContexts`
      if (jsonObj.get("activeContexts") != null && !jsonObj.get("activeContexts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("activeContexts"));
      }
      // validate the optional field `transcript`
      if (jsonObj.get("transcript") != null && !jsonObj.get("transcript").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("transcript"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserTurnSpecificationExpected.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserTurnSpecificationExpected' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserTurnSpecificationExpected> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserTurnSpecificationExpected.class));

       return (TypeAdapter<T>) new TypeAdapter<UserTurnSpecificationExpected>() {
           @Override
           public void write(JsonWriter out, UserTurnSpecificationExpected value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserTurnSpecificationExpected read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserTurnSpecificationExpected given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserTurnSpecificationExpected
   * @throws IOException if the JSON string is invalid with respect to UserTurnSpecificationExpected
   */
  public static UserTurnSpecificationExpected fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserTurnSpecificationExpected.class);
  }

  /**
   * Convert an instance of UserTurnSpecificationExpected to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

