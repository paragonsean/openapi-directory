/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TestResultMatchStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The test result evaluation item at the conversation level.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversationLevelTestResultItem {
  public static final String SERIALIZED_NAME_CONVERSATION_ID = "conversationId";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ID)
  private String conversationId;

  public static final String SERIALIZED_NAME_END_TO_END_RESULT = "endToEndResult";
  @SerializedName(SERIALIZED_NAME_END_TO_END_RESULT)
  private TestResultMatchStatus endToEndResult;

  public static final String SERIALIZED_NAME_SPEECH_TRANSCRIPTION_RESULT = "speechTranscriptionResult";
  @SerializedName(SERIALIZED_NAME_SPEECH_TRANSCRIPTION_RESULT)
  private TestResultMatchStatus speechTranscriptionResult;

  public static final String SERIALIZED_NAME_INTENT_CLASSIFICATION_RESULTS = "intentClassificationResults";
  @SerializedName(SERIALIZED_NAME_INTENT_CLASSIFICATION_RESULTS)
  private List intentClassificationResults;

  public static final String SERIALIZED_NAME_SLOT_RESOLUTION_RESULTS = "slotResolutionResults";
  @SerializedName(SERIALIZED_NAME_SLOT_RESOLUTION_RESULTS)
  private List slotResolutionResults;

  public ConversationLevelTestResultItem() {
  }

  public ConversationLevelTestResultItem conversationId(String conversationId) {
    this.conversationId = conversationId;
    return this;
  }

  /**
   * Get conversationId
   * @return conversationId
   */
  @javax.annotation.Nonnull
  public String getConversationId() {
    return conversationId;
  }

  public void setConversationId(String conversationId) {
    this.conversationId = conversationId;
  }


  public ConversationLevelTestResultItem endToEndResult(TestResultMatchStatus endToEndResult) {
    this.endToEndResult = endToEndResult;
    return this;
  }

  /**
   * Get endToEndResult
   * @return endToEndResult
   */
  @javax.annotation.Nonnull
  public TestResultMatchStatus getEndToEndResult() {
    return endToEndResult;
  }

  public void setEndToEndResult(TestResultMatchStatus endToEndResult) {
    this.endToEndResult = endToEndResult;
  }


  public ConversationLevelTestResultItem speechTranscriptionResult(TestResultMatchStatus speechTranscriptionResult) {
    this.speechTranscriptionResult = speechTranscriptionResult;
    return this;
  }

  /**
   * Get speechTranscriptionResult
   * @return speechTranscriptionResult
   */
  @javax.annotation.Nullable
  public TestResultMatchStatus getSpeechTranscriptionResult() {
    return speechTranscriptionResult;
  }

  public void setSpeechTranscriptionResult(TestResultMatchStatus speechTranscriptionResult) {
    this.speechTranscriptionResult = speechTranscriptionResult;
  }


  public ConversationLevelTestResultItem intentClassificationResults(List intentClassificationResults) {
    this.intentClassificationResults = intentClassificationResults;
    return this;
  }

  /**
   * Get intentClassificationResults
   * @return intentClassificationResults
   */
  @javax.annotation.Nonnull
  public List getIntentClassificationResults() {
    return intentClassificationResults;
  }

  public void setIntentClassificationResults(List intentClassificationResults) {
    this.intentClassificationResults = intentClassificationResults;
  }


  public ConversationLevelTestResultItem slotResolutionResults(List slotResolutionResults) {
    this.slotResolutionResults = slotResolutionResults;
    return this;
  }

  /**
   * Get slotResolutionResults
   * @return slotResolutionResults
   */
  @javax.annotation.Nonnull
  public List getSlotResolutionResults() {
    return slotResolutionResults;
  }

  public void setSlotResolutionResults(List slotResolutionResults) {
    this.slotResolutionResults = slotResolutionResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationLevelTestResultItem conversationLevelTestResultItem = (ConversationLevelTestResultItem) o;
    return Objects.equals(this.conversationId, conversationLevelTestResultItem.conversationId) &&
        Objects.equals(this.endToEndResult, conversationLevelTestResultItem.endToEndResult) &&
        Objects.equals(this.speechTranscriptionResult, conversationLevelTestResultItem.speechTranscriptionResult) &&
        Objects.equals(this.intentClassificationResults, conversationLevelTestResultItem.intentClassificationResults) &&
        Objects.equals(this.slotResolutionResults, conversationLevelTestResultItem.slotResolutionResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversationId, endToEndResult, speechTranscriptionResult, intentClassificationResults, slotResolutionResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationLevelTestResultItem {\n");
    sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
    sb.append("    endToEndResult: ").append(toIndentedString(endToEndResult)).append("\n");
    sb.append("    speechTranscriptionResult: ").append(toIndentedString(speechTranscriptionResult)).append("\n");
    sb.append("    intentClassificationResults: ").append(toIndentedString(intentClassificationResults)).append("\n");
    sb.append("    slotResolutionResults: ").append(toIndentedString(slotResolutionResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conversationId");
    openapiFields.add("endToEndResult");
    openapiFields.add("speechTranscriptionResult");
    openapiFields.add("intentClassificationResults");
    openapiFields.add("slotResolutionResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("conversationId");
    openapiRequiredFields.add("endToEndResult");
    openapiRequiredFields.add("intentClassificationResults");
    openapiRequiredFields.add("slotResolutionResults");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversationLevelTestResultItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationLevelTestResultItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationLevelTestResultItem is not found in the empty JSON string", ConversationLevelTestResultItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationLevelTestResultItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationLevelTestResultItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConversationLevelTestResultItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `conversationId`
      String.validateJsonElement(jsonObj.get("conversationId"));
      // validate the required field `endToEndResult`
      TestResultMatchStatus.validateJsonElement(jsonObj.get("endToEndResult"));
      // validate the optional field `speechTranscriptionResult`
      if (jsonObj.get("speechTranscriptionResult") != null && !jsonObj.get("speechTranscriptionResult").isJsonNull()) {
        TestResultMatchStatus.validateJsonElement(jsonObj.get("speechTranscriptionResult"));
      }
      // validate the required field `intentClassificationResults`
      List.validateJsonElement(jsonObj.get("intentClassificationResults"));
      // validate the required field `slotResolutionResults`
      List.validateJsonElement(jsonObj.get("slotResolutionResults"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationLevelTestResultItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationLevelTestResultItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationLevelTestResultItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationLevelTestResultItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationLevelTestResultItem>() {
           @Override
           public void write(JsonWriter out, ConversationLevelTestResultItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationLevelTestResultItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversationLevelTestResultItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversationLevelTestResultItem
   * @throws IOException if the JSON string is invalid with respect to ConversationLevelTestResultItem
   */
  public static ConversationLevelTestResultItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationLevelTestResultItem.class);
  }

  /**
   * Convert an instance of ConversationLevelTestResultItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

