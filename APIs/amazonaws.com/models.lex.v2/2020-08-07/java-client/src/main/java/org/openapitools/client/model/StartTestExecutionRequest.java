/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StartTestExecutionRequestTarget;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartTestExecutionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:23.943104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartTestExecutionRequest {
  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private StartTestExecutionRequestTarget target;

  /**
   * Indicates whether we use streaming or non-streaming APIs for the test set execution. For streaming, StartConversation Runtime API is used. Whereas, for non-streaming, RecognizeUtterance and RecognizeText Amazon Lex Runtime API are used.
   */
  @JsonAdapter(ApiModeEnum.Adapter.class)
  public enum ApiModeEnum {
    STREAMING("Streaming"),
    
    NON_STREAMING("NonStreaming");

    private String value;

    ApiModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiModeEnum fromValue(String value) {
      for (ApiModeEnum b : ApiModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_MODE = "apiMode";
  @SerializedName(SERIALIZED_NAME_API_MODE)
  private ApiModeEnum apiMode;

  /**
   * Indicates whether audio or text is used.
   */
  @JsonAdapter(TestExecutionModalityEnum.Adapter.class)
  public enum TestExecutionModalityEnum {
    TEXT("Text"),
    
    AUDIO("Audio");

    private String value;

    TestExecutionModalityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TestExecutionModalityEnum fromValue(String value) {
      for (TestExecutionModalityEnum b : TestExecutionModalityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TestExecutionModalityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TestExecutionModalityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TestExecutionModalityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TestExecutionModalityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TestExecutionModalityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEST_EXECUTION_MODALITY = "testExecutionModality";
  @SerializedName(SERIALIZED_NAME_TEST_EXECUTION_MODALITY)
  private TestExecutionModalityEnum testExecutionModality;

  public StartTestExecutionRequest() {
  }

  public StartTestExecutionRequest target(StartTestExecutionRequestTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nonnull
  public StartTestExecutionRequestTarget getTarget() {
    return target;
  }

  public void setTarget(StartTestExecutionRequestTarget target) {
    this.target = target;
  }


  public StartTestExecutionRequest apiMode(ApiModeEnum apiMode) {
    this.apiMode = apiMode;
    return this;
  }

  /**
   * Indicates whether we use streaming or non-streaming APIs for the test set execution. For streaming, StartConversation Runtime API is used. Whereas, for non-streaming, RecognizeUtterance and RecognizeText Amazon Lex Runtime API are used.
   * @return apiMode
   */
  @javax.annotation.Nonnull
  public ApiModeEnum getApiMode() {
    return apiMode;
  }

  public void setApiMode(ApiModeEnum apiMode) {
    this.apiMode = apiMode;
  }


  public StartTestExecutionRequest testExecutionModality(TestExecutionModalityEnum testExecutionModality) {
    this.testExecutionModality = testExecutionModality;
    return this;
  }

  /**
   * Indicates whether audio or text is used.
   * @return testExecutionModality
   */
  @javax.annotation.Nullable
  public TestExecutionModalityEnum getTestExecutionModality() {
    return testExecutionModality;
  }

  public void setTestExecutionModality(TestExecutionModalityEnum testExecutionModality) {
    this.testExecutionModality = testExecutionModality;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartTestExecutionRequest startTestExecutionRequest = (StartTestExecutionRequest) o;
    return Objects.equals(this.target, startTestExecutionRequest.target) &&
        Objects.equals(this.apiMode, startTestExecutionRequest.apiMode) &&
        Objects.equals(this.testExecutionModality, startTestExecutionRequest.testExecutionModality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(target, apiMode, testExecutionModality);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartTestExecutionRequest {\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    apiMode: ").append(toIndentedString(apiMode)).append("\n");
    sb.append("    testExecutionModality: ").append(toIndentedString(testExecutionModality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("target");
    openapiFields.add("apiMode");
    openapiFields.add("testExecutionModality");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("target");
    openapiRequiredFields.add("apiMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartTestExecutionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartTestExecutionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartTestExecutionRequest is not found in the empty JSON string", StartTestExecutionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartTestExecutionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartTestExecutionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartTestExecutionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `target`
      StartTestExecutionRequestTarget.validateJsonElement(jsonObj.get("target"));
      if (!jsonObj.get("apiMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiMode").toString()));
      }
      // validate the required field `apiMode`
      ApiModeEnum.validateJsonElement(jsonObj.get("apiMode"));
      if ((jsonObj.get("testExecutionModality") != null && !jsonObj.get("testExecutionModality").isJsonNull()) && !jsonObj.get("testExecutionModality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testExecutionModality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testExecutionModality").toString()));
      }
      // validate the optional field `testExecutionModality`
      if (jsonObj.get("testExecutionModality") != null && !jsonObj.get("testExecutionModality").isJsonNull()) {
        TestExecutionModalityEnum.validateJsonElement(jsonObj.get("testExecutionModality"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartTestExecutionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartTestExecutionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartTestExecutionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartTestExecutionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartTestExecutionRequest>() {
           @Override
           public void write(JsonWriter out, StartTestExecutionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartTestExecutionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartTestExecutionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartTestExecutionRequest
   * @throws IOException if the JSON string is invalid with respect to StartTestExecutionRequest
   */
  public static StartTestExecutionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartTestExecutionRequest.class);
  }

  /**
   * Convert an instance of StartTestExecutionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

