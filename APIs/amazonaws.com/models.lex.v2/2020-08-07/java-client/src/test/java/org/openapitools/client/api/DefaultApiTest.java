/*
 * Amazon Lex Model Building V2
 * <p/>
 *
 * The version of the OpenAPI document: 2020-08-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchCreateCustomVocabularyItemRequest;
import org.openapitools.client.model.BatchCreateCustomVocabularyItemResponse;
import org.openapitools.client.model.BatchDeleteCustomVocabularyItemRequest;
import org.openapitools.client.model.BatchDeleteCustomVocabularyItemResponse;
import org.openapitools.client.model.BatchUpdateCustomVocabularyItemRequest;
import org.openapitools.client.model.BatchUpdateCustomVocabularyItemResponse;
import org.openapitools.client.model.BuildBotLocaleResponse;
import org.openapitools.client.model.CreateBotAliasRequest;
import org.openapitools.client.model.CreateBotAliasResponse;
import org.openapitools.client.model.CreateBotLocaleRequest;
import org.openapitools.client.model.CreateBotLocaleResponse;
import org.openapitools.client.model.CreateBotRequest;
import org.openapitools.client.model.CreateBotResponse;
import org.openapitools.client.model.CreateBotVersionRequest;
import org.openapitools.client.model.CreateBotVersionResponse;
import org.openapitools.client.model.CreateExportRequest;
import org.openapitools.client.model.CreateExportResponse;
import org.openapitools.client.model.CreateIntentRequest;
import org.openapitools.client.model.CreateIntentResponse;
import org.openapitools.client.model.CreateResourcePolicyResponse;
import org.openapitools.client.model.CreateResourcePolicyStatementRequest;
import org.openapitools.client.model.CreateResourcePolicyStatementResponse;
import org.openapitools.client.model.CreateSlotRequest;
import org.openapitools.client.model.CreateSlotResponse;
import org.openapitools.client.model.CreateSlotTypeRequest;
import org.openapitools.client.model.CreateSlotTypeResponse;
import org.openapitools.client.model.CreateTestSetDiscrepancyReportRequest;
import org.openapitools.client.model.CreateTestSetDiscrepancyReportResponse;
import org.openapitools.client.model.CreateUploadUrlResponse;
import org.openapitools.client.model.DeleteBotAliasResponse;
import org.openapitools.client.model.DeleteBotLocaleResponse;
import org.openapitools.client.model.DeleteBotResponse;
import org.openapitools.client.model.DeleteBotVersionResponse;
import org.openapitools.client.model.DeleteCustomVocabularyResponse;
import org.openapitools.client.model.DeleteExportResponse;
import org.openapitools.client.model.DeleteImportResponse;
import org.openapitools.client.model.DeleteResourcePolicyResponse;
import org.openapitools.client.model.DeleteResourcePolicyStatementResponse;
import org.openapitools.client.model.DescribeBotAliasResponse;
import org.openapitools.client.model.DescribeBotLocaleResponse;
import org.openapitools.client.model.DescribeBotRecommendationResponse;
import org.openapitools.client.model.DescribeBotResponse;
import org.openapitools.client.model.DescribeBotVersionResponse;
import org.openapitools.client.model.DescribeCustomVocabularyMetadataResponse;
import org.openapitools.client.model.DescribeExportResponse;
import org.openapitools.client.model.DescribeImportResponse;
import org.openapitools.client.model.DescribeIntentResponse;
import org.openapitools.client.model.DescribeResourcePolicyResponse;
import org.openapitools.client.model.DescribeSlotResponse;
import org.openapitools.client.model.DescribeSlotTypeResponse;
import org.openapitools.client.model.DescribeTestExecutionResponse;
import org.openapitools.client.model.DescribeTestSetDiscrepancyReportResponse;
import org.openapitools.client.model.DescribeTestSetGenerationResponse;
import org.openapitools.client.model.DescribeTestSetResponse;
import org.openapitools.client.model.GetTestExecutionArtifactsUrlResponse;
import org.openapitools.client.model.ListAggregatedUtterancesRequest;
import org.openapitools.client.model.ListAggregatedUtterancesResponse;
import org.openapitools.client.model.ListBotAliasesRequest;
import org.openapitools.client.model.ListBotAliasesResponse;
import org.openapitools.client.model.ListBotLocalesRequest;
import org.openapitools.client.model.ListBotLocalesResponse;
import org.openapitools.client.model.ListBotRecommendationsRequest;
import org.openapitools.client.model.ListBotRecommendationsResponse;
import org.openapitools.client.model.ListBotVersionsRequest;
import org.openapitools.client.model.ListBotVersionsResponse;
import org.openapitools.client.model.ListBotsRequest;
import org.openapitools.client.model.ListBotsResponse;
import org.openapitools.client.model.ListBuiltInIntentsRequest;
import org.openapitools.client.model.ListBuiltInIntentsResponse;
import org.openapitools.client.model.ListBuiltInSlotTypesRequest;
import org.openapitools.client.model.ListBuiltInSlotTypesResponse;
import org.openapitools.client.model.ListCustomVocabularyItemsRequest;
import org.openapitools.client.model.ListCustomVocabularyItemsResponse;
import org.openapitools.client.model.ListExportsRequest;
import org.openapitools.client.model.ListExportsResponse;
import org.openapitools.client.model.ListImportsRequest;
import org.openapitools.client.model.ListImportsResponse;
import org.openapitools.client.model.ListIntentMetricsRequest;
import org.openapitools.client.model.ListIntentMetricsResponse;
import org.openapitools.client.model.ListIntentPathsRequest;
import org.openapitools.client.model.ListIntentPathsResponse;
import org.openapitools.client.model.ListIntentStageMetricsRequest;
import org.openapitools.client.model.ListIntentStageMetricsResponse;
import org.openapitools.client.model.ListIntentsRequest;
import org.openapitools.client.model.ListIntentsResponse;
import org.openapitools.client.model.ListRecommendedIntentsRequest;
import org.openapitools.client.model.ListRecommendedIntentsResponse;
import org.openapitools.client.model.ListSessionAnalyticsDataRequest;
import org.openapitools.client.model.ListSessionAnalyticsDataResponse;
import org.openapitools.client.model.ListSessionMetricsRequest;
import org.openapitools.client.model.ListSessionMetricsResponse;
import org.openapitools.client.model.ListSlotTypesRequest;
import org.openapitools.client.model.ListSlotTypesResponse;
import org.openapitools.client.model.ListSlotsRequest;
import org.openapitools.client.model.ListSlotsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTestExecutionResultItemsRequest;
import org.openapitools.client.model.ListTestExecutionResultItemsResponse;
import org.openapitools.client.model.ListTestExecutionsRequest;
import org.openapitools.client.model.ListTestExecutionsResponse;
import org.openapitools.client.model.ListTestSetRecordsRequest;
import org.openapitools.client.model.ListTestSetRecordsResponse;
import org.openapitools.client.model.ListTestSetsRequest;
import org.openapitools.client.model.ListTestSetsResponse;
import org.openapitools.client.model.ListUtteranceAnalyticsDataRequest;
import org.openapitools.client.model.ListUtteranceAnalyticsDataResponse;
import org.openapitools.client.model.ListUtteranceMetricsRequest;
import org.openapitools.client.model.ListUtteranceMetricsResponse;
import org.openapitools.client.model.SearchAssociatedTranscriptsRequest;
import org.openapitools.client.model.SearchAssociatedTranscriptsResponse;
import org.openapitools.client.model.StartBotRecommendationRequest;
import org.openapitools.client.model.StartBotRecommendationResponse;
import org.openapitools.client.model.StartImportRequest;
import org.openapitools.client.model.StartImportResponse;
import org.openapitools.client.model.StartTestExecutionRequest;
import org.openapitools.client.model.StartTestExecutionResponse;
import org.openapitools.client.model.StartTestSetGenerationRequest;
import org.openapitools.client.model.StartTestSetGenerationResponse;
import org.openapitools.client.model.StopBotRecommendationResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateBotAliasRequest;
import org.openapitools.client.model.UpdateBotAliasResponse;
import org.openapitools.client.model.UpdateBotLocaleRequest;
import org.openapitools.client.model.UpdateBotLocaleResponse;
import org.openapitools.client.model.UpdateBotRecommendationRequest;
import org.openapitools.client.model.UpdateBotRecommendationResponse;
import org.openapitools.client.model.UpdateBotRequest;
import org.openapitools.client.model.UpdateBotResponse;
import org.openapitools.client.model.UpdateExportRequest;
import org.openapitools.client.model.UpdateExportResponse;
import org.openapitools.client.model.UpdateIntentRequest;
import org.openapitools.client.model.UpdateIntentResponse;
import org.openapitools.client.model.UpdateResourcePolicyRequest;
import org.openapitools.client.model.UpdateResourcePolicyResponse;
import org.openapitools.client.model.UpdateSlotRequest;
import org.openapitools.client.model.UpdateSlotResponse;
import org.openapitools.client.model.UpdateSlotTypeRequest;
import org.openapitools.client.model.UpdateSlotTypeResponse;
import org.openapitools.client.model.UpdateTestSetRequest;
import org.openapitools.client.model.UpdateTestSetResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create a batch of custom vocabulary items for a given bot locale&#39;s custom vocabulary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchCreateCustomVocabularyItemTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        BatchCreateCustomVocabularyItemRequest batchCreateCustomVocabularyItemRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchCreateCustomVocabularyItemResponse response = api.batchCreateCustomVocabularyItem(botId, botVersion, localeId, batchCreateCustomVocabularyItemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete a batch of custom vocabulary items for a given bot locale&#39;s custom vocabulary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteCustomVocabularyItemTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        BatchDeleteCustomVocabularyItemRequest batchDeleteCustomVocabularyItemRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteCustomVocabularyItemResponse response = api.batchDeleteCustomVocabularyItem(botId, botVersion, localeId, batchDeleteCustomVocabularyItemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update a batch of custom vocabulary items for a given bot locale&#39;s custom vocabulary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUpdateCustomVocabularyItemTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        BatchUpdateCustomVocabularyItemRequest batchUpdateCustomVocabularyItemRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchUpdateCustomVocabularyItemResponse response = api.batchUpdateCustomVocabularyItem(botId, botVersion, localeId, batchUpdateCustomVocabularyItemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Builds a bot, its intents, and its slot types into a specific locale. A bot can be built into multiple locales. At runtime the locale is used to choose a specific build of the bot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildBotLocaleTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BuildBotLocaleResponse response = api.buildBotLocale(botId, botVersion, localeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an Amazon Lex conversational bot. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBotTest() throws ApiException {
        CreateBotRequest createBotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBotResponse response = api.createBot(createBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an alias for the specified version of a bot. Use an alias to enable you to change the version of a bot without updating applications that use the bot.&lt;/p&gt; &lt;p&gt;For example, you can create an alias called \&quot;PROD\&quot; that your applications use to call the Amazon Lex bot. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBotAliasTest() throws ApiException {
        String botId = null;
        CreateBotAliasRequest createBotAliasRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBotAliasResponse response = api.createBotAlias(botId, createBotAliasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a locale in the bot. The locale contains the intents and slot types that the bot uses in conversations with users in the specified language and locale. You must add a locale to a bot before you can add intents and slot types to the bot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBotLocaleTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        CreateBotLocaleRequest createBotLocaleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBotLocaleResponse response = api.createBotLocale(botId, botVersion, createBotLocaleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new version of the bot based on the &lt;code&gt;DRAFT&lt;/code&gt; version. If the &lt;code&gt;DRAFT&lt;/code&gt; version of this resource hasn&#39;t changed since you created the last version, Amazon Lex doesn&#39;t create a new version, it returns the last created version.&lt;/p&gt; &lt;p&gt;When you create the first version of a bot, Amazon Lex sets the version to 1. Subsequent versions increment by 1.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBotVersionTest() throws ApiException {
        String botId = null;
        CreateBotVersionRequest createBotVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBotVersionResponse response = api.createBotVersion(botId, createBotVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a zip archive containing the contents of a bot or a bot locale. The archive contains a directory structure that contains JSON files that define the bot.&lt;/p&gt; &lt;p&gt;You can create an archive that contains the complete definition of a bot, or you can specify that the archive contain only the definition of a single bot locale.&lt;/p&gt; &lt;p&gt;For more information about exporting bots, and about the structure of the export archive, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/dg/importing-exporting.html\&quot;&gt; Importing and exporting bots &lt;/a&gt; &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExportTest() throws ApiException {
        CreateExportRequest createExportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateExportResponse response = api.createExport(createExportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an intent.&lt;/p&gt; &lt;p&gt;To define the interaction between the user and your bot, you define one or more intents. For example, for a pizza ordering bot you would create an &lt;code&gt;OrderPizza&lt;/code&gt; intent.&lt;/p&gt; &lt;p&gt;When you create an intent, you must provide a name. You can optionally provide the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Sample utterances. For example, \&quot;I want to order a pizza\&quot; and \&quot;Can I order a pizza.\&quot; You can&#39;t provide utterances for built-in intents.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Information to be gathered. You specify slots for the information that you bot requests from the user. You can specify standard slot types, such as date and time, or custom slot types for your application.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;How the intent is fulfilled. You can provide a Lambda function or configure the intent to return the intent information to your client application. If you use a Lambda function, Amazon Lex invokes the function when all of the intent information is available.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A confirmation prompt to send to the user to confirm an intent. For example, \&quot;Shall I order your pizza?\&quot;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A conclusion statement to send to the user after the intent is fulfilled. For example, \&quot;I ordered your pizza.\&quot;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A follow-up prompt that asks the user for additional activity. For example, \&quot;Do you want a drink with your pizza?\&quot;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIntentTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        CreateIntentRequest createIntentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateIntentResponse response = api.createIntent(botId, botVersion, localeId, createIntentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new resource policy with the specified policy statements.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResourcePolicyTest() throws ApiException {
        String resourceArn = null;
        UpdateResourcePolicyRequest updateResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateResourcePolicyResponse response = api.createResourcePolicy(resourceArn, updateResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds a new resource policy statement to a bot or bot alias. If a resource policy exists, the statement is added to the current resource policy. If a policy doesn&#39;t exist, a new policy is created.&lt;/p&gt; &lt;p&gt;You can&#39;t create a resource policy statement that allows cross-account access.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResourcePolicyStatementTest() throws ApiException {
        String resourceArn = null;
        CreateResourcePolicyStatementRequest createResourcePolicyStatementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String expectedRevisionId = null;
        CreateResourcePolicyStatementResponse response = api.createResourcePolicyStatement(resourceArn, createResourcePolicyStatementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, expectedRevisionId);
        // TODO: test validations
    }

    /**
     * Creates a slot in an intent. A slot is a variable needed to fulfill an intent. For example, an &lt;code&gt;OrderPizza&lt;/code&gt; intent might need slots for size, crust, and number of pizzas. For each slot, you define one or more utterances that Amazon Lex uses to elicit a response from the user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSlotTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String intentId = null;
        CreateSlotRequest createSlotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSlotResponse response = api.createSlot(botId, botVersion, localeId, intentId, createSlotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a custom slot type&lt;/p&gt; &lt;p&gt; To create a custom slot type, specify a name for the slot type and a set of enumeration values, the values that a slot of this type can assume. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSlotTypeTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        CreateSlotTypeRequest createSlotTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSlotTypeResponse response = api.createSlotType(botId, botVersion, localeId, createSlotTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a report that describes the differences between the bot and the test set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTestSetDiscrepancyReportTest() throws ApiException {
        String testSetId = null;
        CreateTestSetDiscrepancyReportRequest createTestSetDiscrepancyReportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTestSetDiscrepancyReportResponse response = api.createTestSetDiscrepancyReport(testSetId, createTestSetDiscrepancyReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a pre-signed S3 write URL that you use to upload the zip archive when importing a bot or a bot locale. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUploadUrlTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUploadUrlResponse response = api.createUploadUrl(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes all versions of a bot, including the &lt;code&gt;Draft&lt;/code&gt; version. To delete a specific version, use the &lt;code&gt;DeleteBotVersion&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;When you delete a bot, all of the resources contained in the bot are also deleted. Deleting a bot removes all locales, intents, slot, and slot types defined for the bot.&lt;/p&gt; &lt;p&gt;If a bot has an alias, the &lt;code&gt;DeleteBot&lt;/code&gt; operation returns a &lt;code&gt;ResourceInUseException&lt;/code&gt; exception. If you want to delete the bot and the alias, set the &lt;code&gt;skipResourceInUseCheck&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBotTest() throws ApiException {
        String botId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean skipResourceInUseCheck = null;
        DeleteBotResponse response = api.deleteBot(botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipResourceInUseCheck);
        // TODO: test validations
    }

    /**
     * Deletes the specified bot alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBotAliasTest() throws ApiException {
        String botAliasId = null;
        String botId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean skipResourceInUseCheck = null;
        DeleteBotAliasResponse response = api.deleteBotAlias(botAliasId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipResourceInUseCheck);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes a locale from a bot.&lt;/p&gt; &lt;p&gt;When you delete a locale, all intents, slots, and slot types defined for the locale are also deleted.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBotLocaleTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBotLocaleResponse response = api.deleteBotLocale(botId, botVersion, localeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specific version of a bot. To delete all versions of a bot, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DeleteBot.html\&quot;&gt;DeleteBot&lt;/a&gt; operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBotVersionTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean skipResourceInUseCheck = null;
        DeleteBotVersionResponse response = api.deleteBotVersion(botId, botVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipResourceInUseCheck);
        // TODO: test validations
    }

    /**
     * Removes a custom vocabulary from the specified locale in the specified bot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomVocabularyTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteCustomVocabularyResponse response = api.deleteCustomVocabulary(botId, botVersion, localeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a previous export and the associated files stored in an S3 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExportTest() throws ApiException {
        String exportId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteExportResponse response = api.deleteExport(exportId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a previous import and the associated file stored in an S3 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImportTest() throws ApiException {
        String importId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteImportResponse response = api.deleteImport(importId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes the specified intent.&lt;/p&gt; &lt;p&gt;Deleting an intent also deletes the slots associated with the intent.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIntentTest() throws ApiException {
        String intentId = null;
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteIntent(intentId, botId, botVersion, localeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes an existing policy from a bot or bot alias. If the resource doesn&#39;t have a policy attached, Amazon Lex returns an exception.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcePolicyTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String expectedRevisionId = null;
        DeleteResourcePolicyResponse response = api.deleteResourcePolicy(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, expectedRevisionId);
        // TODO: test validations
    }

    /**
     * Deletes a policy statement from a resource policy. If you delete the last statement from a policy, the policy is deleted. If you specify a statement ID that doesn&#39;t exist in the policy, or if the bot or bot alias doesn&#39;t have a policy attached, Amazon Lex returns an exception.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcePolicyStatementTest() throws ApiException {
        String resourceArn = null;
        String statementId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String expectedRevisionId = null;
        DeleteResourcePolicyStatementResponse response = api.deleteResourcePolicyStatement(resourceArn, statementId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, expectedRevisionId);
        // TODO: test validations
    }

    /**
     * Deletes the specified slot from an intent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSlotTest() throws ApiException {
        String slotId = null;
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String intentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteSlot(slotId, botId, botVersion, localeId, intentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a slot type from a bot locale.&lt;/p&gt; &lt;p&gt;If a slot is using the slot type, Amazon Lex throws a &lt;code&gt;ResourceInUseException&lt;/code&gt; exception. To avoid the exception, set the &lt;code&gt;skipResourceInUseCheck&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSlotTypeTest() throws ApiException {
        String slotTypeId = null;
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean skipResourceInUseCheck = null;
        api.deleteSlotType(slotTypeId, botId, botVersion, localeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipResourceInUseCheck);
        // TODO: test validations
    }

    /**
     * The action to delete the selected test set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTestSetTest() throws ApiException {
        String testSetId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteTestSet(testSetId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes stored utterances.&lt;/p&gt; &lt;p&gt;Amazon Lex stores the utterances that users send to your bot. Utterances are stored for 15 days for use with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html\&quot;&gt;ListAggregatedUtterances&lt;/a&gt; operation, and then stored indefinitely for use in improving the ability of your bot to respond to user input..&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;DeleteUtterances&lt;/code&gt; operation to manually delete utterances for a specific session. When you use the &lt;code&gt;DeleteUtterances&lt;/code&gt; operation, utterances stored for improving your bot&#39;s ability to respond to user input are deleted immediately. Utterances stored for use with the &lt;code&gt;ListAggregatedUtterances&lt;/code&gt; operation are deleted after 15 days.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUtterancesTest() throws ApiException {
        String botId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String localeId = null;
        String sessionId = null;
        Object response = api.deleteUtterances(botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, localeId, sessionId);
        // TODO: test validations
    }

    /**
     * Provides metadata information about a bot. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBotTest() throws ApiException {
        String botId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeBotResponse response = api.describeBot(botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get information about a specific bot alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBotAliasTest() throws ApiException {
        String botAliasId = null;
        String botId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeBotAliasResponse response = api.describeBotAlias(botAliasId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the settings that a bot has for a specific locale. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBotLocaleTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeBotLocaleResponse response = api.describeBotLocale(botId, botVersion, localeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides metadata information about a bot recommendation. This information will enable you to get a description on the request inputs, to download associated transcripts after processing is complete, and to download intents and slot-types generated by the bot recommendation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBotRecommendationTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String botRecommendationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeBotRecommendationResponse response = api.describeBotRecommendation(botId, botVersion, localeId, botRecommendationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides metadata about a version of a bot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBotVersionTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeBotVersionResponse response = api.describeBotVersion(botId, botVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides metadata information about a custom vocabulary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCustomVocabularyMetadataTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeCustomVocabularyMetadataResponse response = api.describeCustomVocabularyMetadata(botId, botVersion, localeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specific export.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeExportTest() throws ApiException {
        String exportId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeExportResponse response = api.describeExport(exportId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specific import.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImportTest() throws ApiException {
        String importId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeImportResponse response = api.describeImport(importId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns metadata about an intent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeIntentTest() throws ApiException {
        String intentId = null;
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeIntentResponse response = api.describeIntent(intentId, botId, botVersion, localeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the resource policy and policy revision for a bot or bot alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeResourcePolicyTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeResourcePolicyResponse response = api.describeResourcePolicy(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets metadata information about a slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSlotTest() throws ApiException {
        String slotId = null;
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String intentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSlotResponse response = api.describeSlot(slotId, botId, botVersion, localeId, intentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets metadata information about a slot type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSlotTypeTest() throws ApiException {
        String slotTypeId = null;
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSlotTypeResponse response = api.describeSlotType(slotTypeId, botId, botVersion, localeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets metadata information about the test execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTestExecutionTest() throws ApiException {
        String testExecutionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTestExecutionResponse response = api.describeTestExecution(testExecutionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets metadata information about the test set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTestSetTest() throws ApiException {
        String testSetId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTestSetResponse response = api.describeTestSet(testSetId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets metadata information about the test set discrepancy report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTestSetDiscrepancyReportTest() throws ApiException {
        String testSetDiscrepancyReportId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTestSetDiscrepancyReportResponse response = api.describeTestSetDiscrepancyReport(testSetDiscrepancyReportId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets metadata information about the test set generation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTestSetGenerationTest() throws ApiException {
        String testSetGenerationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTestSetGenerationResponse response = api.describeTestSetGeneration(testSetGenerationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The pre-signed Amazon S3 URL to download the test execution result artifacts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestExecutionArtifactsUrlTest() throws ApiException {
        String testExecutionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTestExecutionArtifactsUrlResponse response = api.getTestExecutionArtifactsUrl(testExecutionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides a list of utterances that users have sent to the bot.&lt;/p&gt; &lt;p&gt;Utterances are aggregated by the text of the utterance. For example, all instances where customers used the phrase \&quot;I want to order pizza\&quot; are aggregated into the same line in the response.&lt;/p&gt; &lt;p&gt;You can see both detected utterances and missed utterances. A detected utterance is where the bot properly recognized the utterance and activated the associated intent. A missed utterance was not recognized by the bot and didn&#39;t activate an intent.&lt;/p&gt; &lt;p&gt;Utterances can be aggregated for a bot alias or for a bot version, but not both at the same time.&lt;/p&gt; &lt;p&gt;Utterances statistics are not generated under the following conditions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;childDirected&lt;/code&gt; field was set to true when the bot was created.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You are using slot obfuscation with one or more slots.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You opted out of participating in improving Amazon Lex.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAggregatedUtterancesTest() throws ApiException {
        String botId = null;
        ListAggregatedUtterancesRequest listAggregatedUtterancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAggregatedUtterancesResponse response = api.listAggregatedUtterances(botId, listAggregatedUtterancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of aliases for the specified bot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBotAliasesTest() throws ApiException {
        String botId = null;
        ListBotAliasesRequest listBotAliasesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListBotAliasesResponse response = api.listBotAliases(botId, listBotAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of locales for the specified bot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBotLocalesTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        ListBotLocalesRequest listBotLocalesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListBotLocalesResponse response = api.listBotLocales(botId, botVersion, listBotLocalesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Get a list of bot recommendations that meet the specified criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBotRecommendationsTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        ListBotRecommendationsRequest listBotRecommendationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListBotRecommendationsResponse response = api.listBotRecommendations(botId, botVersion, localeId, listBotRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about all of the versions of a bot.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ListBotVersions&lt;/code&gt; operation returns a summary of each version of a bot. For example, if a bot has three numbered versions, the &lt;code&gt;ListBotVersions&lt;/code&gt; operation returns for summaries, one for each numbered version and one for the &lt;code&gt;DRAFT&lt;/code&gt; version.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ListBotVersions&lt;/code&gt; operation always returns at least one version, the &lt;code&gt;DRAFT&lt;/code&gt; version.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBotVersionsTest() throws ApiException {
        String botId = null;
        ListBotVersionsRequest listBotVersionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListBotVersionsResponse response = api.listBotVersions(botId, listBotVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of available bots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBotsTest() throws ApiException {
        ListBotsRequest listBotsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListBotsResponse response = api.listBots(listBotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of built-in intents provided by Amazon Lex that you can use in your bot. &lt;/p&gt; &lt;p&gt;To use a built-in intent as a the base for your own intent, include the built-in intent signature in the &lt;code&gt;parentIntentSignature&lt;/code&gt; parameter when you call the &lt;code&gt;CreateIntent&lt;/code&gt; operation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateIntent.html\&quot;&gt;CreateIntent&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBuiltInIntentsTest() throws ApiException {
        String localeId = null;
        ListBuiltInIntentsRequest listBuiltInIntentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListBuiltInIntentsResponse response = api.listBuiltInIntents(localeId, listBuiltInIntentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of built-in slot types that meet the specified criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBuiltInSlotTypesTest() throws ApiException {
        String localeId = null;
        ListBuiltInSlotTypesRequest listBuiltInSlotTypesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListBuiltInSlotTypesResponse response = api.listBuiltInSlotTypes(localeId, listBuiltInSlotTypesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Paginated list of custom vocabulary items for a given bot locale&#39;s custom vocabulary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCustomVocabularyItemsTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        ListCustomVocabularyItemsRequest listCustomVocabularyItemsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCustomVocabularyItemsResponse response = api.listCustomVocabularyItems(botId, botVersion, localeId, listCustomVocabularyItemsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the exports for a bot, bot locale, or custom vocabulary. Exports are kept in the list for 7 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExportsTest() throws ApiException {
        ListExportsRequest listExportsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListExportsResponse response = api.listExports(listExportsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the imports for a bot, bot locale, or custom vocabulary. Imports are kept in the list for 7 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImportsTest() throws ApiException {
        ListImportsRequest listImportsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListImportsResponse response = api.listImports(listImportsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves summary metrics for the intents in your bot. The following fields are required:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;metrics&lt;/code&gt; – A list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsIntentMetric.html\&quot;&gt;AnalyticsIntentMetric&lt;/a&gt; objects. In each object, use the &lt;code&gt;name&lt;/code&gt; field to specify the metric to calculate, the &lt;code&gt;statistic&lt;/code&gt; field to specify whether to calculate the &lt;code&gt;Sum&lt;/code&gt;, &lt;code&gt;Average&lt;/code&gt;, or &lt;code&gt;Max&lt;/code&gt; number, and the &lt;code&gt;order&lt;/code&gt; field to specify whether to sort the results in &lt;code&gt;Ascending&lt;/code&gt; or &lt;code&gt;Descending&lt;/code&gt; order.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;startDateTime&lt;/code&gt; and &lt;code&gt;endDateTime&lt;/code&gt; – Define a time range for which you want to retrieve results.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Of the optional fields, you can organize the results in the following ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;filters&lt;/code&gt; field to filter the results, the &lt;code&gt;groupBy&lt;/code&gt; field to specify categories by which to group the results, and the &lt;code&gt;binBy&lt;/code&gt; field to specify time intervals by which to group the results.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;maxResults&lt;/code&gt; field to limit the number of results to return in a single response and the &lt;code&gt;nextToken&lt;/code&gt; field to return the next batch of results if the response does not return the full set of results.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Note that an &lt;code&gt;order&lt;/code&gt; field exists in both &lt;code&gt;binBy&lt;/code&gt; and &lt;code&gt;metrics&lt;/code&gt;. You can specify only one &lt;code&gt;order&lt;/code&gt; in a given request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIntentMetricsTest() throws ApiException {
        String botId = null;
        ListIntentMetricsRequest listIntentMetricsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListIntentMetricsResponse response = api.listIntentMetrics(botId, listIntentMetricsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves summary statistics for a path of intents that users take over sessions with your bot. The following fields are required:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;startDateTime&lt;/code&gt; and &lt;code&gt;endDateTime&lt;/code&gt; – Define a time range for which you want to retrieve results.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;intentPath&lt;/code&gt; – Define an order of intents for which you want to retrieve metrics. Separate intents in the path with a forward slash. For example, populate the &lt;code&gt;intentPath&lt;/code&gt; field with &lt;code&gt;/BookCar/BookHotel&lt;/code&gt; to see details about how many times users invoked the &lt;code&gt;BookCar&lt;/code&gt; and &lt;code&gt;BookHotel&lt;/code&gt; intents in that order.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Use the optional &lt;code&gt;filters&lt;/code&gt; field to filter the results.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIntentPathsTest() throws ApiException {
        String botId = null;
        ListIntentPathsRequest listIntentPathsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListIntentPathsResponse response = api.listIntentPaths(botId, listIntentPathsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves summary metrics for the stages within intents in your bot. The following fields are required:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;metrics&lt;/code&gt; – A list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsIntentStageMetric.html\&quot;&gt;AnalyticsIntentStageMetric&lt;/a&gt; objects. In each object, use the &lt;code&gt;name&lt;/code&gt; field to specify the metric to calculate, the &lt;code&gt;statistic&lt;/code&gt; field to specify whether to calculate the &lt;code&gt;Sum&lt;/code&gt;, &lt;code&gt;Average&lt;/code&gt;, or &lt;code&gt;Max&lt;/code&gt; number, and the &lt;code&gt;order&lt;/code&gt; field to specify whether to sort the results in &lt;code&gt;Ascending&lt;/code&gt; or &lt;code&gt;Descending&lt;/code&gt; order.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;startDateTime&lt;/code&gt; and &lt;code&gt;endDateTime&lt;/code&gt; – Define a time range for which you want to retrieve results.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Of the optional fields, you can organize the results in the following ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;filters&lt;/code&gt; field to filter the results, the &lt;code&gt;groupBy&lt;/code&gt; field to specify categories by which to group the results, and the &lt;code&gt;binBy&lt;/code&gt; field to specify time intervals by which to group the results.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;maxResults&lt;/code&gt; field to limit the number of results to return in a single response and the &lt;code&gt;nextToken&lt;/code&gt; field to return the next batch of results if the response does not return the full set of results.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Note that an &lt;code&gt;order&lt;/code&gt; field exists in both &lt;code&gt;binBy&lt;/code&gt; and &lt;code&gt;metrics&lt;/code&gt;. You can only specify one &lt;code&gt;order&lt;/code&gt; in a given request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIntentStageMetricsTest() throws ApiException {
        String botId = null;
        ListIntentStageMetricsRequest listIntentStageMetricsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListIntentStageMetricsResponse response = api.listIntentStageMetrics(botId, listIntentStageMetricsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Get a list of intents that meet the specified criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIntentsTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        ListIntentsRequest listIntentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListIntentsResponse response = api.listIntents(botId, botVersion, localeId, listIntentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of recommended intents provided by the bot recommendation that you can use in your bot. Intents in the response are ordered by relevance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecommendedIntentsTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String botRecommendationId = null;
        ListRecommendedIntentsRequest listRecommendedIntentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListRecommendedIntentsResponse response = api.listRecommendedIntents(botId, botVersion, localeId, botRecommendationId, listRecommendedIntentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a list of metadata for individual user sessions with your bot. The &lt;code&gt;startDateTime&lt;/code&gt; and &lt;code&gt;endDateTime&lt;/code&gt; fields are required. These fields define a time range for which you want to retrieve results. Of the optional fields, you can organize the results in the following ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;filters&lt;/code&gt; field to filter the results and the &lt;code&gt;sortBy&lt;/code&gt; field to specify the values by which to sort the results.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;maxResults&lt;/code&gt; field to limit the number of results to return in a single response and the &lt;code&gt;nextToken&lt;/code&gt; field to return the next batch of results if the response does not return the full set of results.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSessionAnalyticsDataTest() throws ApiException {
        String botId = null;
        ListSessionAnalyticsDataRequest listSessionAnalyticsDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSessionAnalyticsDataResponse response = api.listSessionAnalyticsData(botId, listSessionAnalyticsDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves summary metrics for the user sessions with your bot. The following fields are required:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;metrics&lt;/code&gt; – A list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsSessionMetric.html\&quot;&gt;AnalyticsSessionMetric&lt;/a&gt; objects. In each object, use the &lt;code&gt;name&lt;/code&gt; field to specify the metric to calculate, the &lt;code&gt;statistic&lt;/code&gt; field to specify whether to calculate the &lt;code&gt;Sum&lt;/code&gt;, &lt;code&gt;Average&lt;/code&gt;, or &lt;code&gt;Max&lt;/code&gt; number, and the &lt;code&gt;order&lt;/code&gt; field to specify whether to sort the results in &lt;code&gt;Ascending&lt;/code&gt; or &lt;code&gt;Descending&lt;/code&gt; order.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;startDateTime&lt;/code&gt; and &lt;code&gt;endDateTime&lt;/code&gt; – Define a time range for which you want to retrieve results.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Of the optional fields, you can organize the results in the following ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;filters&lt;/code&gt; field to filter the results, the &lt;code&gt;groupBy&lt;/code&gt; field to specify categories by which to group the results, and the &lt;code&gt;binBy&lt;/code&gt; field to specify time intervals by which to group the results.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;maxResults&lt;/code&gt; field to limit the number of results to return in a single response and the &lt;code&gt;nextToken&lt;/code&gt; field to return the next batch of results if the response does not return the full set of results.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Note that an &lt;code&gt;order&lt;/code&gt; field exists in both &lt;code&gt;binBy&lt;/code&gt; and &lt;code&gt;metrics&lt;/code&gt;. Currently, you can specify it in either field, but not in both.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSessionMetricsTest() throws ApiException {
        String botId = null;
        ListSessionMetricsRequest listSessionMetricsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSessionMetricsResponse response = api.listSessionMetrics(botId, listSessionMetricsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of slot types that match the specified criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSlotTypesTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        ListSlotTypesRequest listSlotTypesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSlotTypesResponse response = api.listSlotTypes(botId, botVersion, localeId, listSlotTypesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of slots that match the specified criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSlotsTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String intentId = null;
        ListSlotsRequest listSlotsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSlotsResponse response = api.listSlots(botId, botVersion, localeId, intentId, listSlotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of tags associated with a resource. Only bots, bot aliases, and bot channels can have tags associated with them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceARN = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceARN, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a list of test execution result items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTestExecutionResultItemsTest() throws ApiException {
        String testExecutionId = null;
        ListTestExecutionResultItemsRequest listTestExecutionResultItemsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTestExecutionResultItemsResponse response = api.listTestExecutionResultItems(testExecutionId, listTestExecutionResultItemsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * The list of test set executions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTestExecutionsTest() throws ApiException {
        ListTestExecutionsRequest listTestExecutionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTestExecutionsResponse response = api.listTestExecutions(listTestExecutionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * The list of test set records.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTestSetRecordsTest() throws ApiException {
        String testSetId = null;
        ListTestSetRecordsRequest listTestSetRecordsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTestSetRecordsResponse response = api.listTestSetRecords(testSetId, listTestSetRecordsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * The list of the test sets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTestSetsTest() throws ApiException {
        ListTestSetsRequest listTestSetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTestSetsResponse response = api.listTestSets(listTestSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;To use this API operation, your IAM role must have permissions to perform the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html\&quot;&gt;ListAggregatedUtterances&lt;/a&gt; operation, which provides access to utterance-related analytics. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/dg/monitoring-utterances.html\&quot;&gt;Viewing utterance statistics&lt;/a&gt; for the IAM policy to apply to the IAM role.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Retrieves a list of metadata for individual user utterances to your bot. The following fields are required:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;startDateTime&lt;/code&gt; and &lt;code&gt;endDateTime&lt;/code&gt; – Define a time range for which you want to retrieve results.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Of the optional fields, you can organize the results in the following ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;filters&lt;/code&gt; field to filter the results and the &lt;code&gt;sortBy&lt;/code&gt; field to specify the values by which to sort the results.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;maxResults&lt;/code&gt; field to limit the number of results to return in a single response and the &lt;code&gt;nextToken&lt;/code&gt; field to return the next batch of results if the response does not return the full set of results.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUtteranceAnalyticsDataTest() throws ApiException {
        String botId = null;
        ListUtteranceAnalyticsDataRequest listUtteranceAnalyticsDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListUtteranceAnalyticsDataResponse response = api.listUtteranceAnalyticsData(botId, listUtteranceAnalyticsDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;To use this API operation, your IAM role must have permissions to perform the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html\&quot;&gt;ListAggregatedUtterances&lt;/a&gt; operation, which provides access to utterance-related analytics. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/dg/monitoring-utterances.html\&quot;&gt;Viewing utterance statistics&lt;/a&gt; for the IAM policy to apply to the IAM role.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Retrieves summary metrics for the utterances in your bot. The following fields are required:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;metrics&lt;/code&gt; – A list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsUtteranceMetric.html\&quot;&gt;AnalyticsUtteranceMetric&lt;/a&gt; objects. In each object, use the &lt;code&gt;name&lt;/code&gt; field to specify the metric to calculate, the &lt;code&gt;statistic&lt;/code&gt; field to specify whether to calculate the &lt;code&gt;Sum&lt;/code&gt;, &lt;code&gt;Average&lt;/code&gt;, or &lt;code&gt;Max&lt;/code&gt; number, and the &lt;code&gt;order&lt;/code&gt; field to specify whether to sort the results in &lt;code&gt;Ascending&lt;/code&gt; or &lt;code&gt;Descending&lt;/code&gt; order.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;startDateTime&lt;/code&gt; and &lt;code&gt;endDateTime&lt;/code&gt; – Define a time range for which you want to retrieve results.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Of the optional fields, you can organize the results in the following ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;filters&lt;/code&gt; field to filter the results, the &lt;code&gt;groupBy&lt;/code&gt; field to specify categories by which to group the results, and the &lt;code&gt;binBy&lt;/code&gt; field to specify time intervals by which to group the results.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;maxResults&lt;/code&gt; field to limit the number of results to return in a single response and the &lt;code&gt;nextToken&lt;/code&gt; field to return the next batch of results if the response does not return the full set of results.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Note that an &lt;code&gt;order&lt;/code&gt; field exists in both &lt;code&gt;binBy&lt;/code&gt; and &lt;code&gt;metrics&lt;/code&gt;. Currently, you can specify it in either field, but not in both.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUtteranceMetricsTest() throws ApiException {
        String botId = null;
        ListUtteranceMetricsRequest listUtteranceMetricsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListUtteranceMetricsResponse response = api.listUtteranceMetrics(botId, listUtteranceMetricsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Search for associated transcripts that meet the specified criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAssociatedTranscriptsTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String botRecommendationId = null;
        SearchAssociatedTranscriptsRequest searchAssociatedTranscriptsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SearchAssociatedTranscriptsResponse response = api.searchAssociatedTranscripts(botId, botVersion, localeId, botRecommendationId, searchAssociatedTranscriptsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Use this to provide your transcript data, and to start the bot recommendation process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startBotRecommendationTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        StartBotRecommendationRequest startBotRecommendationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartBotRecommendationResponse response = api.startBotRecommendation(botId, botVersion, localeId, startBotRecommendationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts importing a bot, bot locale, or custom vocabulary from a zip archive that you uploaded to an S3 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startImportTest() throws ApiException {
        StartImportRequest startImportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartImportResponse response = api.startImport(startImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The action to start test set execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTestExecutionTest() throws ApiException {
        String testSetId = null;
        StartTestExecutionRequest startTestExecutionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartTestExecutionResponse response = api.startTestExecution(testSetId, startTestExecutionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The action to start the generation of test set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTestSetGenerationTest() throws ApiException {
        StartTestSetGenerationRequest startTestSetGenerationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartTestSetGenerationResponse response = api.startTestSetGeneration(startTestSetGenerationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stop an already running Bot Recommendation request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopBotRecommendationTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String botRecommendationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopBotRecommendationResponse response = api.stopBotRecommendation(botId, botVersion, localeId, botRecommendationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds the specified tags to the specified resource. If a tag key already exists, the existing value is replaced with the new value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceARN = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceARN, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from a bot, bot alias, or bot channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceARN = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceARN, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration of an existing bot. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBotTest() throws ApiException {
        String botId = null;
        UpdateBotRequest updateBotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBotResponse response = api.updateBot(botId, updateBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration of an existing bot alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBotAliasTest() throws ApiException {
        String botAliasId = null;
        String botId = null;
        UpdateBotAliasRequest updateBotAliasRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBotAliasResponse response = api.updateBotAlias(botAliasId, botId, updateBotAliasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the settings that a bot has for a specific locale.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBotLocaleTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        UpdateBotLocaleRequest updateBotLocaleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBotLocaleResponse response = api.updateBotLocale(botId, botVersion, localeId, updateBotLocaleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing bot recommendation request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBotRecommendationTest() throws ApiException {
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String botRecommendationId = null;
        UpdateBotRecommendationRequest updateBotRecommendationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBotRecommendationResponse response = api.updateBotRecommendation(botId, botVersion, localeId, botRecommendationId, updateBotRecommendationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the password used to protect an export zip archive.&lt;/p&gt; &lt;p&gt;The password is not required. If you don&#39;t supply a password, Amazon Lex generates a zip file that is not protected by a password. This is the archive that is available at the pre-signed S3 URL provided by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeExport.html\&quot;&gt;DescribeExport&lt;/a&gt; operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExportTest() throws ApiException {
        String exportId = null;
        UpdateExportRequest updateExportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateExportResponse response = api.updateExport(exportId, updateExportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the settings for an intent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIntentTest() throws ApiException {
        String intentId = null;
        String botId = null;
        String botVersion = null;
        String localeId = null;
        UpdateIntentRequest updateIntentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateIntentResponse response = api.updateIntent(intentId, botId, botVersion, localeId, updateIntentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Replaces the existing resource policy for a bot or bot alias with a new one. If the policy doesn&#39;t exist, Amazon Lex returns an exception.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourcePolicyTest() throws ApiException {
        String resourceArn = null;
        UpdateResourcePolicyRequest updateResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String expectedRevisionId = null;
        UpdateResourcePolicyResponse response = api.updateResourcePolicy(resourceArn, updateResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, expectedRevisionId);
        // TODO: test validations
    }

    /**
     * Updates the settings for a slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSlotTest() throws ApiException {
        String slotId = null;
        String botId = null;
        String botVersion = null;
        String localeId = null;
        String intentId = null;
        UpdateSlotRequest updateSlotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSlotResponse response = api.updateSlot(slotId, botId, botVersion, localeId, intentId, updateSlotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration of an existing slot type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSlotTypeTest() throws ApiException {
        String slotTypeId = null;
        String botId = null;
        String botVersion = null;
        String localeId = null;
        UpdateSlotTypeRequest updateSlotTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSlotTypeResponse response = api.updateSlotType(slotTypeId, botId, botVersion, localeId, updateSlotTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The action to update the test set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTestSetTest() throws ApiException {
        String testSetId = null;
        UpdateTestSetRequest updateTestSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTestSetResponse response = api.updateTestSet(testSetId, updateTestSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
