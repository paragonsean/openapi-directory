openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: <p/>
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Lex Model Building V2
  version: 2020-08-07
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: models.lex.v2
  x-aws-signingName: lex
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/models.lex.v2-2020-08-07.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/models-v2-lex/
servers:
- description: The Lex Models V2 multi-region endpoint
  url: "http://models-v2-lex.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Lex Models V2 multi-region endpoint
  url: "https://models-v2-lex.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Lex Models V2 endpoint for China (Beijing) and China (Ningxia)
  url: "http://models-v2-lex.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Lex Models V2 endpoint for China (Beijing) and China (Ningxia)
  url: "https://models-v2-lex.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchcreate:
    put:
      description: Create a batch of custom vocabulary items for a given bot locale's
        custom vocabulary.
      operationId: BatchCreateCustomVocabularyItem
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot associated with this custom vocabulary.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The identifier of the version of the bot associated with this
          custom vocabulary.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: "The identifier of the language and locale where this custom\
          \ vocabulary is used. The string must match one of the supported locales.\
          \ For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          > Supported Languages </a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateCustomVocabularyItem_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateCustomVocabularyItemResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchdelete:
    post:
      description: Delete a batch of custom vocabulary items for a given bot locale's
        custom vocabulary.
      operationId: BatchDeleteCustomVocabularyItem
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot associated with this custom vocabulary.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The identifier of the version of the bot associated with this
          custom vocabulary.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: "The identifier of the language and locale where this custom\
          \ vocabulary is used. The string must match one of the supported locales.\
          \ For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          > Supported Languages </a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeleteCustomVocabularyItem_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeleteCustomVocabularyItemResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchupdate:
    put:
      description: Update a batch of custom vocabulary items for a given bot locale's
        custom vocabulary.
      operationId: BatchUpdateCustomVocabularyItem
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot associated with this custom vocabulary
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The identifier of the version of the bot associated with this
          custom vocabulary.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: "The identifier of the language and locale where this custom\
          \ vocabulary is used. The string must match one of the supported locales.\
          \ For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          > Supported Languages </a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdateCustomVocabularyItem_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpdateCustomVocabularyItemResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/:
    delete:
      description: "<p>Removes a locale from a bot.</p> <p>When you delete a locale,\
        \ all intents, slots, and slot types defined for the locale are also deleted.</p>"
      operationId: DeleteBotLocale
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot that contains the locale.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: 'The version of the bot that contains the locale. '
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale that will be deleted.\
          \ The string must match one of the supported locales. For more information,\
          \ see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBotLocaleResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: 'Describes the settings that a bot has for a specific locale. '
      operationId: DescribeBotLocale
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot associated with the locale.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot associated with the locale.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: "The unique identifier of the locale to describe. The string\
          \ must match one of the supported locales. For more information, see <a\
          \ href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>. "
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBotLocaleResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    post:
      description: "Builds a bot, its intents, and its slot types into a specific\
        \ locale. A bot can be built into multiple locales. At runtime the locale\
        \ is used to choose a specific build of the bot."
      operationId: BuildBotLocale
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot to build. The identifier is returned
          in the response from the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html">CreateBot</a>
          operation.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot to build. This can only be the draft version
          of the bot.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale that the bot will\
          \ be used in. The string must match one of the supported locales. All of\
          \ the intents, slot types, and slots used in the bot must have the same\
          \ locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildBotLocaleResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    put:
      description: Updates the settings that a bot has for a specific locale.
      operationId: UpdateBotLocale
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot that contains the locale.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot that contains the locale to be updated.
          The version can only be the <code>DRAFT</code> version.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale to update. The string\
          \ must match one of the supported locales. For more information, see <a\
          \ href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBotLocale_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBotLocaleResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/:
    post:
      description: Gets a list of available bots.
      operationId: ListBots
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListBots_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBotsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: 'Creates an Amazon Lex conversational bot. '
      operationId: CreateBot
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBot_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBotResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botaliases/:
    post:
      description: Gets a list of aliases for the specified bot.
      operationId: ListBotAliases
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot to list aliases for.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListBotAliases_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBotAliasesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: "<p>Creates an alias for the specified version of a bot. Use an\
        \ alias to enable you to change the version of a bot without updating applications\
        \ that use the bot.</p> <p>For example, you can create an alias called \"\
        PROD\" that your applications use to call the Amazon Lex bot. </p>"
      operationId: CreateBotAlias
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot that the alias applies to.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBotAlias_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBotAliasResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/:
    post:
      description: Gets a list of locales for the specified bot.
      operationId: ListBotLocales
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot to list locales for.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot to list locales for.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListBotLocales_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBotLocalesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: Creates a locale in the bot. The locale contains the intents and
        slot types that the bot uses in conversations with users in the specified
        language and locale. You must add a locale to a bot before you can add intents
        and slot types to the bot.
      operationId: CreateBotLocale
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot to create the locale for.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot to create the locale for. This can only
          be the draft version of the bot.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBotLocale_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBotLocaleResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/:
    post:
      description: "<p>Gets information about all of the versions of a bot.</p> <p>The\
        \ <code>ListBotVersions</code> operation returns a summary of each version\
        \ of a bot. For example, if a bot has three numbered versions, the <code>ListBotVersions</code>\
        \ operation returns for summaries, one for each numbered version and one for\
        \ the <code>DRAFT</code> version.</p> <p>The <code>ListBotVersions</code>\
        \ operation always returns at least one version, the <code>DRAFT</code> version.</p>"
      operationId: ListBotVersions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot to list versions for.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListBotVersions_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBotVersionsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: "<p>Creates a new version of the bot based on the <code>DRAFT</code>\
        \ version. If the <code>DRAFT</code> version of this resource hasn't changed\
        \ since you created the last version, Amazon Lex doesn't create a new version,\
        \ it returns the last created version.</p> <p>When you create the first version\
        \ of a bot, Amazon Lex sets the version to 1. Subsequent versions increment\
        \ by 1.</p>"
      operationId: CreateBotVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot to create the version for.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBotVersion_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBotVersionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /exports/:
    post:
      description: "Lists the exports for a bot, bot locale, or custom vocabulary.\
        \ Exports are kept in the list for 7 days."
      operationId: ListExports
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListExports_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListExportsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: "<p>Creates a zip archive containing the contents of a bot or a\
        \ bot locale. The archive contains a directory structure that contains JSON\
        \ files that define the bot.</p> <p>You can create an archive that contains\
        \ the complete definition of a bot, or you can specify that the archive contain\
        \ only the definition of a single bot locale.</p> <p>For more information\
        \ about exporting bots, and about the structure of the export archive, see\
        \ <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/importing-exporting.html\"\
        > Importing and exporting bots </a> </p>"
      operationId: CreateExport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExport_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateExportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/:
    post:
      description: Get a list of intents that meet the specified criteria.
      operationId: ListIntents
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot that contains the intent.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot that contains the intent.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: "The identifier of the language and locale of the intents to\
          \ list. The string must match one of the supported locales. For more information,\
          \ see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListIntents_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntentsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: "<p>Creates an intent.</p> <p>To define the interaction between\
        \ the user and your bot, you define one or more intents. For example, for\
        \ a pizza ordering bot you would create an <code>OrderPizza</code> intent.</p>\
        \ <p>When you create an intent, you must provide a name. You can optionally\
        \ provide the following:</p> <ul> <li> <p>Sample utterances. For example,\
        \ \"I want to order a pizza\" and \"Can I order a pizza.\" You can't provide\
        \ utterances for built-in intents.</p> </li> <li> <p>Information to be gathered.\
        \ You specify slots for the information that you bot requests from the user.\
        \ You can specify standard slot types, such as date and time, or custom slot\
        \ types for your application.</p> </li> <li> <p>How the intent is fulfilled.\
        \ You can provide a Lambda function or configure the intent to return the\
        \ intent information to your client application. If you use a Lambda function,\
        \ Amazon Lex invokes the function when all of the intent information is available.</p>\
        \ </li> <li> <p>A confirmation prompt to send to the user to confirm an intent.\
        \ For example, \"Shall I order your pizza?\"</p> </li> <li> <p>A conclusion\
        \ statement to send to the user after the intent is fulfilled. For example,\
        \ \"I ordered your pizza.\"</p> </li> <li> <p>A follow-up prompt that asks\
        \ the user for additional activity. For example, \"Do you want a drink with\
        \ your pizza?\"</p> </li> </ul>"
      operationId: CreateIntent
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot associated with this intent.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot associated with this intent.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale where this intent\
          \ is used. All of the bots, slot types, and slots used by the intent must\
          \ have the same locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIntent_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIntentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /policy/{resourceArn}/:
    delete:
      description: "Removes an existing policy from a bot or bot alias. If the resource\
        \ doesn't have a policy attached, Amazon Lex returns an exception."
      operationId: DeleteResourcePolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the bot or bot alias that has
          the resource policy attached.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      - description: "<p>The identifier of the revision to edit. If this ID doesn't\
          \ match the current revision number, Amazon Lex returns an exception</p>\
          \ <p>If you don't specify a revision ID, Amazon Lex will delete the current\
          \ policy.</p>"
        explode: true
        in: query
        name: expectedRevisionId
        required: false
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
        style: form
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResourcePolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
    get:
      description: Gets the resource policy and policy revision for a bot or bot alias.
      operationId: DescribeResourcePolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the bot or bot alias that the
          resource policy is attached to.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeResourcePolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
    post:
      description: Creates a new resource policy with the specified policy statements.
      operationId: CreateResourcePolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the bot or bot alias that the
          resource policy is attached to.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourcePolicy_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourcePolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: "Replaces the existing resource policy for a bot or bot alias with\
        \ a new one. If the policy doesn't exist, Amazon Lex returns an exception."
      operationId: UpdateResourcePolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the bot or bot alias that the
          resource policy is attached to.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      - description: "<p>The identifier of the revision of the policy to update. If\
          \ this revision ID doesn't match the current revision ID, Amazon Lex throws\
          \ an exception.</p> <p>If you don't specify a revision, Amazon Lex overwrites\
          \ the contents of the policy with the new values.</p>"
        explode: true
        in: query
        name: expectedRevisionId
        required: false
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourcePolicy_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResourcePolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-content-type: application/json
      x-accepts:
      - application/json
  /policy/{resourceArn}/statements/:
    post:
      description: "<p>Adds a new resource policy statement to a bot or bot alias.\
        \ If a resource policy exists, the statement is added to the current resource\
        \ policy. If a policy doesn't exist, a new policy is created.</p> <p>You can't\
        \ create a resource policy statement that allows cross-account access.</p>"
      operationId: CreateResourcePolicyStatement
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the bot or bot alias that the
          resource policy is attached to.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      - description: "<p>The identifier of the revision of the policy to edit. If\
          \ this revision ID doesn't match the current revision ID, Amazon Lex throws\
          \ an exception.</p> <p>If you don't specify a revision, Amazon Lex overwrites\
          \ the contents of the policy with the new values.</p>"
        explode: true
        in: query
        name: expectedRevisionId
        required: false
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourcePolicyStatement_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourcePolicyStatementResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/:
    post:
      description: Gets a list of slots that match the specified criteria.
      operationId: ListSlots
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot that contains the slot.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot that contains the slot.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: "The identifier of the language and locale of the slots to list.\
          \ The string must match one of the supported locales. For more information,\
          \ see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the intent that contains the slot.
        explode: false
        in: path
        name: intentId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSlots_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSlotsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: "Creates a slot in an intent. A slot is a variable needed to fulfill\
        \ an intent. For example, an <code>OrderPizza</code> intent might need slots\
        \ for size, crust, and number of pizzas. For each slot, you define one or\
        \ more utterances that Amazon Lex uses to elicit a response from the user. "
      operationId: CreateSlot
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot associated with the slot.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot associated with the slot.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale that the slot will\
          \ be used in. The string must match one of the supported locales. All of\
          \ the bots, intents, slot types used by the slot must have the same locale.\
          \ For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the intent that contains the slot.
        explode: false
        in: path
        name: intentId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSlot_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSlotResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/:
    post:
      description: Gets a list of slot types that match the specified criteria.
      operationId: ListSlotTypes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot that contains the slot types.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot that contains the slot type.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: "The identifier of the language and locale of the slot types\
          \ to list. The string must match one of the supported locales. For more\
          \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSlotTypes_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSlotTypesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: "<p>Creates a custom slot type</p> <p> To create a custom slot\
        \ type, specify a name for the slot type and a set of enumeration values,\
        \ the values that a slot of this type can assume. </p>"
      operationId: CreateSlotType
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot associated with this slot type.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The identifier of the bot version associated with this slot type.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale that the slot type\
          \ will be used in. The string must match one of the supported locales. All\
          \ of the bots, intents, and slots used by the slot type must have the same\
          \ locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSlotType_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSlotTypeResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /testsets/{testSetId}/testsetdiscrepancy:
    post:
      description: Create a report that describes the differences between the bot
        and the test set.
      operationId: CreateTestSetDiscrepancyReport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The test set Id for the test set discrepancy report.
        explode: false
        in: path
        name: testSetId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestSetDiscrepancyReport_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTestSetDiscrepancyReportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-content-type: application/json
      x-accepts:
      - application/json
  /createuploadurl/:
    post:
      description: 'Gets a pre-signed S3 write URL that you use to upload the zip
        archive when importing a bot or a bot locale. '
      operationId: CreateUploadUrl
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUploadUrlResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /bots/{botId}/:
    delete:
      description: "<p>Deletes all versions of a bot, including the <code>Draft</code>\
        \ version. To delete a specific version, use the <code>DeleteBotVersion</code>\
        \ operation.</p> <p>When you delete a bot, all of the resources contained\
        \ in the bot are also deleted. Deleting a bot removes all locales, intents,\
        \ slot, and slot types defined for the bot.</p> <p>If a bot has an alias,\
        \ the <code>DeleteBot</code> operation returns a <code>ResourceInUseException</code>\
        \ exception. If you want to delete the bot and the alias, set the <code>skipResourceInUseCheck</code>\
        \ parameter to <code>true</code>.</p>"
      operationId: DeleteBot
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The identifier of the bot to delete. '
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: "By default, Amazon Lex checks if any other resource, such as\
          \ an alias or bot network, is using the bot version before it is deleted\
          \ and throws a <code>ResourceInUseException</code> exception if the bot\
          \ is being used by another resource. Set this parameter to <code>true</code>\
          \ to skip this check and remove the bot even if it is being used by another\
          \ resource."
        explode: true
        in: query
        name: skipResourceInUseCheck
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBotResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: 'Provides metadata information about a bot. '
      operationId: DescribeBot
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot to describe.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBotResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    put:
      description: 'Updates the configuration of an existing bot. '
      operationId: UpdateBot
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot to update. This identifier is
          returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html">CreateBot</a>
          operation.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBot_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBotResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botaliases/{botAliasId}/:
    delete:
      description: Deletes the specified bot alias.
      operationId: DeleteBotAlias
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot alias to delete.
        explode: false
        in: path
        name: botAliasId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^(\\bTSTALIASID\\b|[0-9a-zA-Z]+)$"
          type: string
        style: simple
      - description: The unique identifier of the bot associated with the alias to
          delete.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: "By default, Amazon Lex checks if any other resource, such as\
          \ a bot network, is using the bot alias before it is deleted and throws\
          \ a <code>ResourceInUseException</code> exception if the alias is being\
          \ used by another resource. Set this parameter to <code>true</code> to skip\
          \ this check and remove the alias even if it is being used by another resource."
        explode: true
        in: query
        name: skipResourceInUseCheck
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBotAliasResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: Get information about a specific bot alias.
      operationId: DescribeBotAlias
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot alias to describe.
        explode: false
        in: path
        name: botAliasId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^(\\bTSTALIASID\\b|[0-9a-zA-Z]+)$"
          type: string
        style: simple
      - description: The identifier of the bot associated with the bot alias to describe.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBotAliasResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    put:
      description: Updates the configuration of an existing bot alias.
      operationId: UpdateBotAlias
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot alias.
        explode: false
        in: path
        name: botAliasId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^(\\bTSTALIASID\\b|[0-9a-zA-Z]+)$"
          type: string
        style: simple
      - description: The identifier of the bot with the updated alias.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBotAlias_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBotAliasResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/:
    delete:
      description: "Deletes a specific version of a bot. To delete all versions of\
        \ a bot, use the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DeleteBot.html\"\
        >DeleteBot</a> operation."
      operationId: DeleteBotVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot that contains the version.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot to delete.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
        style: simple
      - description: "By default, Amazon Lex checks if any other resource, such as\
          \ an alias or bot network, is using the bot version before it is deleted\
          \ and throws a <code>ResourceInUseException</code> exception if the version\
          \ is being used by another resource. Set this parameter to <code>true</code>\
          \ to skip this check and remove the version even if it is being used by\
          \ another resource."
        explode: true
        in: query
        name: skipResourceInUseCheck
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBotVersionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: Provides metadata about a version of a bot.
      operationId: DescribeBotVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the bot containing the version to return metadata
          for.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot to return metadata for.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBotVersionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary:
    delete:
      description: Removes a custom vocabulary from the specified locale in the specified
        bot.
      operationId: DeleteCustomVocabulary
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot to remove the custom vocabulary
          from.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot to remove the custom vocabulary from.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: The locale identifier for the locale that contains the custom
          vocabulary to remove.
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCustomVocabularyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /exports/{exportId}/:
    delete:
      description: Removes a previous export and the associated files stored in an
        S3 bucket.
      operationId: DeleteExport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the export to delete.
        explode: false
        in: path
        name: exportId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteExportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: Gets information about a specific export.
      operationId: DescribeExport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the export to describe.
        explode: false
        in: path
        name: exportId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeExportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    put:
      description: "<p>Updates the password used to protect an export zip archive.</p>\
        \ <p>The password is not required. If you don't supply a password, Amazon\
        \ Lex generates a zip file that is not protected by a password. This is the\
        \ archive that is available at the pre-signed S3 URL provided by the <a href=\"\
        https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeExport.html\"\
        >DescribeExport</a> operation.</p>"
      operationId: UpdateExport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier Amazon Lex assigned to the export.
        explode: false
        in: path
        name: exportId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExport_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateExportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /imports/{importId}/:
    delete:
      description: Removes a previous import and the associated file stored in an
        S3 bucket.
      operationId: DeleteImport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the import to delete.
        explode: false
        in: path
        name: importId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteImportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: Gets information about a specific import.
      operationId: DescribeImport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the import to describe.
        explode: false
        in: path
        name: importId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeImportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/:
    delete:
      description: <p>Removes the specified intent.</p> <p>Deleting an intent also
        deletes the slots associated with the intent.</p>
      operationId: DeleteIntent
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the intent to delete.
        explode: false
        in: path
        name: intentId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The identifier of the bot associated with the intent.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot associated with the intent.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale where the bot will\
          \ be deleted. The string must match one of the supported locales. For more\
          \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: Returns metadata about an intent.
      operationId: DescribeIntent
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the intent to describe.
        explode: false
        in: path
        name: intentId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The identifier of the bot associated with the intent.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot associated with the intent.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: "The identifier of the language and locale of the intent to describe.\
          \ The string must match one of the supported locales. For more information,\
          \ see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeIntentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    put:
      description: Updates the settings for an intent.
      operationId: UpdateIntent
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the intent to update.
        explode: false
        in: path
        name: intentId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The identifier of the bot that contains the intent.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot that contains the intent. Must be <code>DRAFT</code>.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale where this intent\
          \ is used. The string must match one of the supported locales. For more\
          \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIntent_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIntentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /policy/{resourceArn}/statements/{statementId}/:
    delete:
      description: "Deletes a policy statement from a resource policy. If you delete\
        \ the last statement from a policy, the policy is deleted. If you specify\
        \ a statement ID that doesn't exist in the policy, or if the bot or bot alias\
        \ doesn't have a policy attached, Amazon Lex returns an exception."
      operationId: DeleteResourcePolicyStatement
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the bot or bot alias that the
          resource policy is attached to.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      - description: The name of the statement (SID) to delete from the policy.
        explode: false
        in: path
        name: statementId
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        style: simple
      - description: "<p>The identifier of the revision of the policy to delete the\
          \ statement from. If this revision ID doesn't match the current revision\
          \ ID, Amazon Lex throws an exception.</p> <p>If you don't specify a revision,\
          \ Amazon Lex removes the current contents of the statement. </p>"
        explode: true
        in: query
        name: expectedRevisionId
        required: false
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
        style: form
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResourcePolicyStatementResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/:
    delete:
      description: Deletes the specified slot from an intent.
      operationId: DeleteSlot
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The identifier of the slot to delete. '
        explode: false
        in: path
        name: slotId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The identifier of the bot associated with the slot to delete.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot associated with the slot to delete.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale that the slot will\
          \ be deleted from. The string must match one of the supported locales. For\
          \ more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the intent associated with the slot.
        explode: false
        in: path
        name: intentId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: Gets metadata information about a slot.
      operationId: DescribeSlot
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for the slot.
        explode: false
        in: path
        name: slotId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The identifier of the bot associated with the slot.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot associated with the slot.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: "The identifier of the language and locale of the slot to describe.\
          \ The string must match one of the supported locales. For more information,\
          \ see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the intent that contains the slot.
        explode: false
        in: path
        name: intentId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeSlotResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    put:
      description: Updates the settings for a slot.
      operationId: UpdateSlot
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for the slot to update.
        explode: false
        in: path
        name: slotId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The unique identifier of the bot that contains the slot.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot that contains the slot. Must always be
          <code>DRAFT</code>.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale that contains the\
          \ slot. The string must match one of the supported locales. For more information,\
          \ see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the intent that contains the slot.
        explode: false
        in: path
        name: intentId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSlot_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSlotResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/:
    delete:
      description: "<p>Deletes a slot type from a bot locale.</p> <p>If a slot is\
        \ using the slot type, Amazon Lex throws a <code>ResourceInUseException</code>\
        \ exception. To avoid the exception, set the <code>skipResourceInUseCheck</code>\
        \ parameter to <code>true</code>.</p>"
      operationId: DeleteSlotType
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the slot type to delete.
        explode: false
        in: path
        name: slotTypeId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The identifier of the bot associated with the slot type.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot associated with the slot type.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale that the slot type\
          \ will be deleted from. The string must match one of the supported locales.\
          \ For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: "By default, the <code>DeleteSlotType</code> operations throws\
          \ a <code>ResourceInUseException</code> exception if you try to delete a\
          \ slot type used by a slot. Set the <code>skipResourceInUseCheck</code>\
          \ parameter to <code>true</code> to skip this check and remove the slot\
          \ type even if a slot uses it."
        explode: true
        in: query
        name: skipResourceInUseCheck
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: Gets metadata information about a slot type.
      operationId: DescribeSlotType
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the slot type.
        explode: false
        in: path
        name: slotTypeId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The identifier of the bot associated with the slot type.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot associated with the slot type.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: "The identifier of the language and locale of the slot type to\
          \ describe. The string must match one of the supported locales. For more\
          \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeSlotTypeResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    put:
      description: Updates the configuration of an existing slot type.
      operationId: UpdateSlotType
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the slot type to update.
        explode: false
        in: path
        name: slotTypeId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The identifier of the bot that contains the slot type.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot that contains the slot type. Must be <code>DRAFT</code>.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale that contains the\
          \ slot type. The string must match one of the supported locales. For more\
          \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSlotType_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSlotTypeResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /testsets/{testSetId}:
    delete:
      description: The action to delete the selected test set.
      operationId: DeleteTestSet
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The test set Id of the test set to be deleted.
        explode: false
        in: path
        name: testSetId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: Gets metadata information about the test set.
      operationId: DescribeTestSet
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The test set Id for the test set request.
        explode: false
        in: path
        name: testSetId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeTestSetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    put:
      description: The action to update the test set.
      operationId: UpdateTestSet
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The test set Id for which update test operation to be performed.
        explode: false
        in: path
        name: testSetId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTestSet_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTestSetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/utterances/:
    delete:
      description: "<p>Deletes stored utterances.</p> <p>Amazon Lex stores the utterances\
        \ that users send to your bot. Utterances are stored for 15 days for use with\
        \ the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html\"\
        >ListAggregatedUtterances</a> operation, and then stored indefinitely for\
        \ use in improving the ability of your bot to respond to user input..</p>\
        \ <p>Use the <code>DeleteUtterances</code> operation to manually delete utterances\
        \ for a specific session. When you use the <code>DeleteUtterances</code> operation,\
        \ utterances stored for improving your bot's ability to respond to user input\
        \ are deleted immediately. Utterances stored for use with the <code>ListAggregatedUtterances</code>\
        \ operation are deleted after 15 days.</p>"
      operationId: DeleteUtterances
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot that contains the utterances.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: "The identifier of the language and locale where the utterances\
          \ were collected. The string must match one of the supported locales. For\
          \ more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: true
        in: query
        name: localeId
        required: false
        schema:
          type: string
        style: form
      - description: The unique identifier of the session with the user. The ID is
          returned in the response from the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_RecognizeText.html">RecognizeText</a>
          and <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_RecognizeUtterance.html">RecognizeUtterance</a>
          operations.
        explode: true
        in: query
        name: sessionId
        required: false
        schema:
          maxLength: 100
          minLength: 2
          pattern: "[0-9a-zA-Z._:-]+"
          type: string
        style: form
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUtterancesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/:
    get:
      description: "Provides metadata information about a bot recommendation. This\
        \ information will enable you to get a description on the request inputs,\
        \ to download associated transcripts after processing is complete, and to\
        \ download intents and slot-types generated by the bot recommendation."
      operationId: DescribeBotRecommendation
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot associated with the bot recommendation.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot associated with the bot recommendation.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale of the bot recommendation\
          \ to describe. The string must match one of the supported locales. For more\
          \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the bot recommendation to describe.
        explode: false
        in: path
        name: botRecommendationId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBotRecommendationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    put:
      description: Updates an existing bot recommendation request.
      operationId: UpdateBotRecommendation
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot containing the bot recommendation
          to be updated.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot containing the bot recommendation to be
          updated.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale of the bot recommendation\
          \ to update. The string must match one of the supported locales. For more\
          \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a> "
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot recommendation to be updated.
        explode: false
        in: path
        name: botRecommendationId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBotRecommendation_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBotRecommendationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/metadata:
    get:
      description: Provides metadata information about a custom vocabulary.
      operationId: DescribeCustomVocabularyMetadata
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot that contains the custom vocabulary.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The bot version of the bot to return metadata for.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: The locale to return the custom vocabulary information for. The
          locale must be <code>en_GB</code>.
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeCustomVocabularyMetadataResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /testexecutions/{testExecutionId}:
    get:
      description: Gets metadata information about the test execution.
      operationId: DescribeTestExecution
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The execution Id of the test set execution.
        explode: false
        in: path
        name: testExecutionId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeTestExecutionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /testsetdiscrepancy/{testSetDiscrepancyReportId}:
    get:
      description: Gets metadata information about the test set discrepancy report.
      operationId: DescribeTestSetDiscrepancyReport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the test set discrepancy report.
        explode: false
        in: path
        name: testSetDiscrepancyReportId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeTestSetDiscrepancyReportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /testsetgenerations/{testSetGenerationId}:
    get:
      description: Gets metadata information about the test set generation.
      operationId: DescribeTestSetGeneration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the test set generation.
        explode: false
        in: path
        name: testSetGenerationId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeTestSetGenerationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /testexecutions/{testExecutionId}/artifacturl:
    get:
      description: The pre-signed Amazon S3 URL to download the test execution result
        artifacts.
      operationId: GetTestExecutionArtifactsUrl
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the completed test execution.
        explode: false
        in: path
        name: testExecutionId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTestExecutionArtifactsUrlResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /bots/{botId}/aggregatedutterances/:
    post:
      description: "<p>Provides a list of utterances that users have sent to the bot.</p>\
        \ <p>Utterances are aggregated by the text of the utterance. For example,\
        \ all instances where customers used the phrase \"I want to order pizza\"\
        \ are aggregated into the same line in the response.</p> <p>You can see both\
        \ detected utterances and missed utterances. A detected utterance is where\
        \ the bot properly recognized the utterance and activated the associated intent.\
        \ A missed utterance was not recognized by the bot and didn't activate an\
        \ intent.</p> <p>Utterances can be aggregated for a bot alias or for a bot\
        \ version, but not both at the same time.</p> <p>Utterances statistics are\
        \ not generated under the following conditions:</p> <ul> <li> <p>The <code>childDirected</code>\
        \ field was set to true when the bot was created.</p> </li> <li> <p>You are\
        \ using slot obfuscation with one or more slots.</p> </li> <li> <p>You opted\
        \ out of participating in improving Amazon Lex.</p> </li> </ul>"
      operationId: ListAggregatedUtterances
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot associated with this request.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAggregatedUtterances_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAggregatedUtterancesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/:
    post:
      description: Get a list of bot recommendations that meet the specified criteria.
      operationId: ListBotRecommendations
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot that contains the bot recommendation
          list.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot that contains the bot recommendation list.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: The identifier of the language and locale of the bot recommendation
          list.
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListBotRecommendations_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBotRecommendationsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: "Use this to provide your transcript data, and to start the bot\
        \ recommendation process."
      operationId: StartBotRecommendation
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot containing the bot recommendation.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot containing the bot recommendation.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale of the bot recommendation\
          \ to start. The string must match one of the supported locales. For more\
          \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a> "
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartBotRecommendation_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartBotRecommendationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /builtins/locales/{localeId}/intents/:
    post:
      description: "<p>Gets a list of built-in intents provided by Amazon Lex that\
        \ you can use in your bot. </p> <p>To use a built-in intent as a the base\
        \ for your own intent, include the built-in intent signature in the <code>parentIntentSignature</code>\
        \ parameter when you call the <code>CreateIntent</code> operation. For more\
        \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateIntent.html\"\
        >CreateIntent</a>.</p>"
      operationId: ListBuiltInIntents
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The identifier of the language and locale of the intents to\
          \ list. The string must match one of the supported locales. For more information,\
          \ see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListBuiltInIntents_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuiltInIntentsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /builtins/locales/{localeId}/slottypes/:
    post:
      description: Gets a list of built-in slot types that meet the specified criteria.
      operationId: ListBuiltInSlotTypes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The identifier of the language and locale of the slot types\
          \ to list. The string must match one of the supported locales. For more\
          \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a>."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListBuiltInSlotTypes_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuiltInSlotTypesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/list:
    post:
      description: Paginated list of custom vocabulary items for a given bot locale's
        custom vocabulary.
      operationId: ListCustomVocabularyItems
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the version of the bot associated with this
          custom vocabulary.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The bot version of the bot to the list custom vocabulary request.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: "The identifier of the language and locale where this custom\
          \ vocabulary is used. The string must match one of the supported locales.\
          \ For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)."
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCustomVocabularyItems_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCustomVocabularyItemsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /imports/:
    post:
      description: "Lists the imports for a bot, bot locale, or custom vocabulary.\
        \ Imports are kept in the list for 7 days."
      operationId: ListImports
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListImports_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListImportsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: "Starts importing a bot, bot locale, or custom vocabulary from\
        \ a zip archive that you uploaded to an S3 bucket."
      operationId: StartImport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartImport_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartImportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/analytics/intentmetrics:
    post:
      description: "<p>Retrieves summary metrics for the intents in your bot. The\
        \ following fields are required:</p> <ul> <li> <p> <code>metrics</code> –\
        \ A list of <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsIntentMetric.html\"\
        >AnalyticsIntentMetric</a> objects. In each object, use the <code>name</code>\
        \ field to specify the metric to calculate, the <code>statistic</code> field\
        \ to specify whether to calculate the <code>Sum</code>, <code>Average</code>,\
        \ or <code>Max</code> number, and the <code>order</code> field to specify\
        \ whether to sort the results in <code>Ascending</code> or <code>Descending</code>\
        \ order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code>\
        \ – Define a time range for which you want to retrieve results.</p> </li>\
        \ </ul> <p>Of the optional fields, you can organize the results in the following\
        \ ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the\
        \ results, the <code>groupBy</code> field to specify categories by which to\
        \ group the results, and the <code>binBy</code> field to specify time intervals\
        \ by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code>\
        \ field to limit the number of results to return in a single response and\
        \ the <code>nextToken</code> field to return the next batch of results if\
        \ the response does not return the full set of results.</p> </li> </ul> <p>Note\
        \ that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>.\
        \ You can specify only one <code>order</code> in a given request.</p>"
      operationId: ListIntentMetrics
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier for the bot for which you want to retrieve intent
          metrics.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListIntentMetrics_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntentMetricsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/analytics/intentpaths:
    post:
      description: "<p>Retrieves summary statistics for a path of intents that users\
        \ take over sessions with your bot. The following fields are required:</p>\
        \ <ul> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> –\
        \ Define a time range for which you want to retrieve results.</p> </li> <li>\
        \ <p> <code>intentPath</code> – Define an order of intents for which you want\
        \ to retrieve metrics. Separate intents in the path with a forward slash.\
        \ For example, populate the <code>intentPath</code> field with <code>/BookCar/BookHotel</code>\
        \ to see details about how many times users invoked the <code>BookCar</code>\
        \ and <code>BookHotel</code> intents in that order.</p> </li> </ul> <p>Use\
        \ the optional <code>filters</code> field to filter the results.</p>"
      operationId: ListIntentPaths
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier for the bot for which you want to retrieve intent
          path metrics.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListIntentPaths_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntentPathsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/analytics/intentstagemetrics:
    post:
      description: "<p>Retrieves summary metrics for the stages within intents in\
        \ your bot. The following fields are required:</p> <ul> <li> <p> <code>metrics</code>\
        \ – A list of <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsIntentStageMetric.html\"\
        >AnalyticsIntentStageMetric</a> objects. In each object, use the <code>name</code>\
        \ field to specify the metric to calculate, the <code>statistic</code> field\
        \ to specify whether to calculate the <code>Sum</code>, <code>Average</code>,\
        \ or <code>Max</code> number, and the <code>order</code> field to specify\
        \ whether to sort the results in <code>Ascending</code> or <code>Descending</code>\
        \ order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code>\
        \ – Define a time range for which you want to retrieve results.</p> </li>\
        \ </ul> <p>Of the optional fields, you can organize the results in the following\
        \ ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the\
        \ results, the <code>groupBy</code> field to specify categories by which to\
        \ group the results, and the <code>binBy</code> field to specify time intervals\
        \ by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code>\
        \ field to limit the number of results to return in a single response and\
        \ the <code>nextToken</code> field to return the next batch of results if\
        \ the response does not return the full set of results.</p> </li> </ul> <p>Note\
        \ that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>.\
        \ You can only specify one <code>order</code> in a given request.</p>"
      operationId: ListIntentStageMetrics
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier for the bot for which you want to retrieve intent
          stage metrics.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListIntentStageMetrics_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntentStageMetricsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/intents:
    post:
      description: Gets a list of recommended intents provided by the bot recommendation
        that you can use in your bot. Intents in the response are ordered by relevance.
      operationId: ListRecommendedIntents
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot associated with the recommended
          intents.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot that contains the recommended intents.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: The identifier of the language and locale of the recommended
          intents.
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the bot recommendation that contains the recommended
          intents.
        explode: false
        in: path
        name: botRecommendationId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRecommendedIntents_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRecommendedIntentsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/analytics/sessions:
    post:
      description: "<p>Retrieves a list of metadata for individual user sessions with\
        \ your bot. The <code>startDateTime</code> and <code>endDateTime</code> fields\
        \ are required. These fields define a time range for which you want to retrieve\
        \ results. Of the optional fields, you can organize the results in the following\
        \ ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the\
        \ results and the <code>sortBy</code> field to specify the values by which\
        \ to sort the results.</p> </li> <li> <p>Use the <code>maxResults</code> field\
        \ to limit the number of results to return in a single response and the <code>nextToken</code>\
        \ field to return the next batch of results if the response does not return\
        \ the full set of results.</p> </li> </ul>"
      operationId: ListSessionAnalyticsData
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier for the bot for which you want to retrieve session
          analytics.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSessionAnalyticsData_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSessionAnalyticsDataResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/analytics/sessionmetrics:
    post:
      description: "<p>Retrieves summary metrics for the user sessions with your bot.\
        \ The following fields are required:</p> <ul> <li> <p> <code>metrics</code>\
        \ – A list of <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsSessionMetric.html\"\
        >AnalyticsSessionMetric</a> objects. In each object, use the <code>name</code>\
        \ field to specify the metric to calculate, the <code>statistic</code> field\
        \ to specify whether to calculate the <code>Sum</code>, <code>Average</code>,\
        \ or <code>Max</code> number, and the <code>order</code> field to specify\
        \ whether to sort the results in <code>Ascending</code> or <code>Descending</code>\
        \ order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code>\
        \ – Define a time range for which you want to retrieve results.</p> </li>\
        \ </ul> <p>Of the optional fields, you can organize the results in the following\
        \ ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the\
        \ results, the <code>groupBy</code> field to specify categories by which to\
        \ group the results, and the <code>binBy</code> field to specify time intervals\
        \ by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code>\
        \ field to limit the number of results to return in a single response and\
        \ the <code>nextToken</code> field to return the next batch of results if\
        \ the response does not return the full set of results.</p> </li> </ul> <p>Note\
        \ that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>.\
        \ Currently, you can specify it in either field, but not in both.</p>"
      operationId: ListSessionMetrics
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier for the bot for which you want to retrieve session
          metrics.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSessionMetrics_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSessionMetricsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /tags/{resourceARN}:
    get:
      description: "Gets a list of tags associated with a resource. Only bots, bot\
        \ aliases, and bot channels can have tags associated with them."
      operationId: ListTagsForResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the resource to get a list
          of tags for.
        explode: false
        in: path
        name: resourceARN
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-accepts:
      - application/json
    post:
      description: "Adds the specified tags to the specified resource. If a tag key\
        \ already exists, the existing value is replaced with the new value."
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The Amazon Resource Name (ARN) of the bot, bot alias, or bot\
          \ channel to tag."
        explode: false
        in: path
        name: resourceARN
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /testexecutions/{testExecutionId}/results:
    post:
      description: Gets a list of test execution result items.
      operationId: ListTestExecutionResultItems
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the test execution to list the result
          items.
        explode: false
        in: path
        name: testExecutionId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTestExecutionResultItems_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTestExecutionResultItemsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /testexecutions:
    post:
      description: The list of test set executions.
      operationId: ListTestExecutions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTestExecutions_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTestExecutionsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /testsets/{testSetId}/records:
    post:
      description: The list of test set records.
      operationId: ListTestSetRecords
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the test set to list its test set records.
        explode: false
        in: path
        name: testSetId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTestSetRecords_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTestSetRecordsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /testsets:
    post:
      description: The list of the test sets
      operationId: ListTestSets
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTestSets_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTestSetsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/analytics/utterances:
    post:
      description: "<note> <p>To use this API operation, your IAM role must have permissions\
        \ to perform the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html\"\
        >ListAggregatedUtterances</a> operation, which provides access to utterance-related\
        \ analytics. See <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/monitoring-utterances.html\"\
        >Viewing utterance statistics</a> for the IAM policy to apply to the IAM role.</p>\
        \ </note> <p>Retrieves a list of metadata for individual user utterances to\
        \ your bot. The following fields are required:</p> <ul> <li> <p> <code>startDateTime</code>\
        \ and <code>endDateTime</code> – Define a time range for which you want to\
        \ retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize\
        \ the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code>\
        \ field to filter the results and the <code>sortBy</code> field to specify\
        \ the values by which to sort the results.</p> </li> <li> <p>Use the <code>maxResults</code>\
        \ field to limit the number of results to return in a single response and\
        \ the <code>nextToken</code> field to return the next batch of results if\
        \ the response does not return the full set of results.</p> </li> </ul>"
      operationId: ListUtteranceAnalyticsData
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier for the bot for which you want to retrieve utterance
          analytics.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUtteranceAnalyticsData_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUtteranceAnalyticsDataResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/analytics/utterancemetrics:
    post:
      description: "<note> <p>To use this API operation, your IAM role must have permissions\
        \ to perform the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html\"\
        >ListAggregatedUtterances</a> operation, which provides access to utterance-related\
        \ analytics. See <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/monitoring-utterances.html\"\
        >Viewing utterance statistics</a> for the IAM policy to apply to the IAM role.</p>\
        \ </note> <p>Retrieves summary metrics for the utterances in your bot. The\
        \ following fields are required:</p> <ul> <li> <p> <code>metrics</code> –\
        \ A list of <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsUtteranceMetric.html\"\
        >AnalyticsUtteranceMetric</a> objects. In each object, use the <code>name</code>\
        \ field to specify the metric to calculate, the <code>statistic</code> field\
        \ to specify whether to calculate the <code>Sum</code>, <code>Average</code>,\
        \ or <code>Max</code> number, and the <code>order</code> field to specify\
        \ whether to sort the results in <code>Ascending</code> or <code>Descending</code>\
        \ order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code>\
        \ – Define a time range for which you want to retrieve results.</p> </li>\
        \ </ul> <p>Of the optional fields, you can organize the results in the following\
        \ ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the\
        \ results, the <code>groupBy</code> field to specify categories by which to\
        \ group the results, and the <code>binBy</code> field to specify time intervals\
        \ by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code>\
        \ field to limit the number of results to return in a single response and\
        \ the <code>nextToken</code> field to return the next batch of results if\
        \ the response does not return the full set of results.</p> </li> </ul> <p>Note\
        \ that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>.\
        \ Currently, you can specify it in either field, but not in both.</p>"
      operationId: ListUtteranceMetrics
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier for the bot for which you want to retrieve utterance
          metrics.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUtteranceMetrics_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUtteranceMetricsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/associatedtranscripts:
    post:
      description: Search for associated transcripts that meet the specified criteria.
      operationId: SearchAssociatedTranscripts
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot associated with the transcripts
          that you are searching.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot containing the transcripts that you are
          searching.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        style: simple
      - description: "The identifier of the language and locale of the transcripts\
          \ to search. The string must match one of the supported locales. For more\
          \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a> "
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot recommendation associated with
          the transcripts to search.
        explode: false
        in: path
        name: botRecommendationId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchAssociatedTranscripts_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchAssociatedTranscriptsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-content-type: application/json
      x-accepts:
      - application/json
  /testsets/{testSetId}/testexecutions:
    post:
      description: The action to start test set execution.
      operationId: StartTestExecution
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The test set Id for the test set execution.
        explode: false
        in: path
        name: testSetId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartTestExecution_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartTestExecutionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /testsetgenerations:
    put:
      description: The action to start the generation of test set.
      operationId: StartTestSetGeneration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartTestSetGeneration_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartTestSetGenerationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/stopbotrecommendation:
    put:
      description: Stop an already running Bot Recommendation request.
      operationId: StopBotRecommendation
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot containing the bot recommendation
          to be stopped.
        explode: false
        in: path
        name: botId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      - description: The version of the bot containing the bot recommendation.
        explode: false
        in: path
        name: botVersion
        required: true
        schema:
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        style: simple
      - description: "The identifier of the language and locale of the bot recommendation\
          \ to stop. The string must match one of the supported locales. For more\
          \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
          >Supported languages</a> "
        explode: false
        in: path
        name: localeId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the bot recommendation to be stopped.
        explode: false
        in: path
        name: botRecommendationId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopBotRecommendationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /tags/{resourceARN}#tagKeys:
    delete:
      description: "Removes tags from a bot, bot alias, or bot channel."
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the resource to remove the
          tags from.
        explode: false
        in: path
        name: resourceARN
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      - description: "A list of tag keys to remove from the resource. If a tag key\
          \ does not exist on the resource, it is ignored."
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/TagKey'
          maxItems: 200
          minItems: 0
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    BatchCreateCustomVocabularyItemResponse:
      example:
        resources: ""
        botId: ""
        botVersion: ""
        localeId: ""
        errors: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot associated with this custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The identifier of the version of the bot associated with
              this custom vocabulary.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "The identifier of the language and locale where this custom\
              \ vocabulary is used. The string must match one of the supported locales.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
              > Supported Languages </a>."
        errors:
          allOf:
          - $ref: '#/components/schemas/FailedCustomVocabularyItems'
          - description: A list of custom vocabulary items that failed to create during
              the operation. The reason for the error is contained within each error
              object.
        resources:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyItems'
          - description: A list of custom vocabulary items that were successfully
              created during the operation.
      type: object
    NewCustomVocabularyItem:
      description: The new custom vocabulary item from the custom vocabulary list.
      properties:
        phrase:
          allOf:
          - $ref: '#/components/schemas/Phrase'
          - description: The unique phrase for the new custom vocabulary item from
              the custom vocabulary list.
        weight:
          allOf:
          - $ref: '#/components/schemas/Weight'
          - description: The weight assigned to the new custom vocabulary item from
              the custom vocabulary list.
        displayAs:
          allOf:
          - $ref: '#/components/schemas/Phrase'
          - description: The display as value assigned to the new custom vocabulary
              item from the custom vocabulary list.
      required:
      - phrase
      type: object
    ThrottlingException: {}
    ServiceQuotaExceededException: {}
    ValidationException: {}
    ResourceNotFoundException: {}
    InternalServerException: {}
    BatchDeleteCustomVocabularyItemResponse:
      example:
        resources: ""
        botId: ""
        botVersion: ""
        localeId: ""
        errors: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot associated with this custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The identifier of the version of the bot associated with
              this custom vocabulary.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "The identifier of the language and locale where this custom\
              \ vocabulary is used. The string must match one of the supported locales.\
              \ For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)."
        errors:
          allOf:
          - $ref: '#/components/schemas/FailedCustomVocabularyItems'
          - description: A list of custom vocabulary items that failed to delete during
              the operation. The reason for the error is contained within each error
              object.
        resources:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyItems'
          - description: A list of custom vocabulary items that were successfully
              deleted during the operation.
      type: object
    CustomVocabularyEntryId:
      description: The unique entry identifier for the custom vocabulary items.
      properties:
        itemId:
          allOf:
          - $ref: '#/components/schemas/ItemId'
          - description: The unique item identifier for the custom vocabulary items.
      required:
      - itemId
      type: object
    BatchUpdateCustomVocabularyItemResponse:
      example:
        resources: ""
        botId: ""
        botVersion: ""
        localeId: ""
        errors: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot associated with this custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The identifier of the version of the bot associated with
              this custom vocabulary.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "The identifier of the language and locale where this custom\
              \ vocabulary is used. The string must match one of the supported locales.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
              > Supported Languages </a>."
        errors:
          allOf:
          - $ref: '#/components/schemas/FailedCustomVocabularyItems'
          - description: A list of custom vocabulary items that failed to update during
              the operation. The reason for the error is contained within each error
              object.
        resources:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyItems'
          - description: A list of custom vocabulary items that were successfully
              updated during the operation.
      type: object
    CustomVocabularyItem:
      description: The unique custom vocabulary item from the custom vocabulary list.
      properties:
        itemId:
          allOf:
          - $ref: '#/components/schemas/ItemId'
          - description: The unique item identifer for the custom vocabulary item
              from the custom vocabulary list.
        phrase:
          allOf:
          - $ref: '#/components/schemas/Phrase'
          - description: The unique phrase for the custom vocabulary item from the
              custom vocabulary list.
        weight:
          allOf:
          - $ref: '#/components/schemas/Weight'
          - description: The weight assigned for the custom vocabulary item from the
              custom vocabulary list.
        displayAs:
          allOf:
          - $ref: '#/components/schemas/Phrase'
          - description: The DisplayAs value for the custom vocabulary item from the
              custom vocabulary list.
      required:
      - itemId
      - phrase
      type: object
    BuildBotLocaleResponse:
      example:
        lastBuildSubmittedDateTime: ""
        botLocaleStatus: ""
        botId: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the specified bot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot that was built. This is only the draft
              version of the bot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and locale specified of where the bot can be
              used.
        botLocaleStatus:
          allOf:
          - $ref: '#/components/schemas/BotLocaleStatus'
          - description: "The bot's build status. When the status is <code>ReadyExpressTesting</code>\
              \ you can test the bot using the utterances defined for the intents\
              \ and slot types. When the status is <code>Built</code>, the bot is\
              \ ready for use and can be tested using any utterance."
        lastBuildSubmittedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp indicating the date and time that the bot was
              last built for this locale.
      type: object
    PreconditionFailedException: {}
    ConflictException: {}
    CreateBotResponse:
      example:
        botStatus: ""
        testBotAliasTags: ""
        botName: ""
        roleArn: ""
        botTags: ""
        botType: ""
        description: ""
        dataPrivacy:
          childDirected: ""
        idleSessionTTLInSeconds: ""
        botId: ""
        botMembers: ""
        creationDateTime: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: A unique identifier for a particular bot. You use this to
              identify the bot when you call other Amazon Lex API operations.
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name specified for the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description specified for the bot.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The IAM role specified for the bot.
        dataPrivacy:
          $ref: '#/components/schemas/CreateBotResponse_dataPrivacy'
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          - description: The session idle time specified for the bot.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          - description: "Shows the current status of the bot. The bot is first in\
              \ the <code>Creating</code> status. Once the bot is read for use, it\
              \ changes to the <code>Available</code> status. After the bot is created,\
              \ you can use the <code>DRAFT</code> version of the bot."
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp indicating the date and time that the bot was
              created.
        botTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: A list of tags associated with the bot.
        testBotAliasTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: A list of tags associated with the test alias for the bot.
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          - description: The type of a bot that was created.
        botMembers:
          allOf:
          - $ref: '#/components/schemas/BotMembers'
          - description: The list of bots in a network that was created.
      type: object
    ChildDirected:
      type: boolean
    TagValue:
      maxLength: 256
      minLength: 0
      type: string
    BotMember:
      description: A bot that is a member of a network of bots.
      properties:
        botMemberId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique ID of a bot that is a member of this network of
              bots.
        botMemberName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The unique name of a bot that is a member of this network
              of bots.
        botMemberAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: The alias ID of a bot that is a member of this network of
              bots.
        botMemberAliasName:
          allOf:
          - $ref: '#/components/schemas/BotAliasName'
          - description: The alias name of a bot that is a member of this network
              of bots.
        botMemberVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of a bot that is a member of this network of
              bots.
      required:
      - botMemberAliasId
      - botMemberAliasName
      - botMemberId
      - botMemberName
      - botMemberVersion
      type: object
    CreateBotAliasResponse:
      example:
        botAliasLocaleSettings: ""
        sentimentAnalysisSettings:
          detectSentiment: ""
        botAliasId: ""
        description: ""
        botAliasName: ""
        botId: ""
        botVersion: ""
        botAliasStatus: ""
        conversationLogSettings:
          textLogSettings: ""
          audioLogSettings: ""
        creationDateTime: ""
        tags: ""
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: The unique identifier of the bot alias.
        botAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name specified for the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description specified for the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          - description: The version of the bot associated with this alias.
        botAliasLocaleSettings:
          allOf:
          - $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          - description: Configuration information for a specific locale.
        conversationLogSettings:
          $ref: '#/components/schemas/CreateBotAliasResponse_conversationLogSettings'
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        botAliasStatus:
          allOf:
          - $ref: '#/components/schemas/BotAliasStatus'
          - description: "The current status of the alias. The alias is first put\
              \ into the <code>Creating</code> state. When the alias is ready to be\
              \ used, it is put into the <code>Available</code> state. You can use\
              \ the <code>DescribeBotAlias</code> operation to get the current state\
              \ of an alias."
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot that this alias applies
              to.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A Unix timestamp indicating the date and time that the bot
              alias was created.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: A list of tags associated with the bot alias.
      type: object
    BotAliasLocaleSettings:
      description: "Specifies settings that are unique to a locale. For example, you\
        \ can use different Lambda function depending on the bot's locale."
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Determines whether the locale is enabled for the bot. If\
              \ the value is <code>false</code>, the locale isn't available for use."
        codeHookSpecification:
          $ref: '#/components/schemas/BotAliasLocaleSettings_codeHookSpecification'
      required:
      - enabled
      type: object
    TextLogSettingsList:
      items:
        $ref: '#/components/schemas/TextLogSetting'
      maxItems: 1
      minItems: 1
      type: array
    AudioLogSettingsList:
      items:
        $ref: '#/components/schemas/AudioLogSetting'
      maxItems: 1
      minItems: 1
      type: array
    Boolean:
      type: boolean
    CreateBotLocaleResponse:
      example:
        nluIntentConfidenceThreshold: ""
        description: ""
        voiceSettings:
          voiceId: ""
          engine: ""
        botLocaleStatus: ""
        botId: ""
        localeName: ""
        botVersion: ""
        localeId: ""
        creationDateTime: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The specified bot identifier.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The specified bot version.
        localeName:
          allOf:
          - $ref: '#/components/schemas/LocaleName'
          - description: The specified locale name.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The specified locale identifier.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The specified description of the bot locale.
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          - description: The specified confidence threshold for inserting the <code>AMAZON.FallbackIntent</code>
              and <code>AMAZON.KendraSearchIntent</code> intents.
        voiceSettings:
          $ref: '#/components/schemas/CreateBotLocaleResponse_voiceSettings'
        botLocaleStatus:
          allOf:
          - $ref: '#/components/schemas/BotLocaleStatus'
          - description: "<p>The status of the bot.</p> <p>When the status is <code>Creating</code>\
              \ the bot locale is being configured. When the status is <code>Building</code>\
              \ Amazon Lex is building the bot for testing and use.</p> <p>If the\
              \ status of the bot is <code>ReadyExpressTesting</code>, you can test\
              \ the bot using the exact utterances specified in the bots' intents.\
              \ When the bot is ready for full testing or to run, the status is <code>Built</code>.</p>\
              \ <p>If there was a problem with building the bot, the status is <code>Failed</code>.\
              \ If the bot was saved but not built, the status is <code>NotBuilt</code>.</p>"
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp specifying the date and time that the bot locale
              was created.
      type: object
    VoiceId:
      type: string
    VoiceEngine:
      enum:
      - standard
      - neural
      type: string
    CreateBotVersionResponse:
      example:
        botVersionLocaleSpecification: ""
        botStatus: ""
        description: ""
        botId: ""
        botVersion: ""
        creationDateTime: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The bot identifier specified in the request.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the version specified in the request.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          - description: The version number assigned to the version.
        botVersionLocaleSpecification:
          allOf:
          - $ref: '#/components/schemas/BotVersionLocaleSpecification'
          - description: The source versions used for each locale in the new version.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          - description: "When you send a request to create or update a bot, Amazon\
              \ Lex sets the status response element to <code>Creating</code>. After\
              \ Amazon Lex builds the bot, it sets status to <code>Available</code>.\
              \ If Amazon Lex can't build the bot, it sets status to <code>Failed</code>."
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the version was created.
      type: object
    BotVersionLocaleDetails:
      description: The version of a bot used for a bot locale.
      properties:
        sourceBotVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of a bot used for a bot locale.
      required:
      - sourceBotVersion
      type: object
    CreateExportResponse:
      example:
        exportStatus: ""
        resourceSpecification:
          testSetExportSpecification:
            testSetId: ""
          customVocabularyExportSpecification:
            botId: ""
            botVersion: ""
            localeId: ""
          botExportSpecification:
            botId: ""
            botVersion: ""
          botLocaleExportSpecification:
            botId: ""
            botVersion: ""
            localeId: ""
        exportId: ""
        fileFormat: ""
        creationDateTime: ""
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: An identifier for a specific request to create an export.
        resourceSpecification:
          $ref: '#/components/schemas/CreateExportResponse_resourceSpecification'
        fileFormat:
          allOf:
          - $ref: '#/components/schemas/ImportExportFileFormat'
          - description: The file format used for the bot or bot locale definition
              files.
        exportStatus:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          - description: "The status of the export. When the status is <code>Completed</code>,\
              \ you can use the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeExport.html\"\
              >DescribeExport</a> operation to get the pre-signed S3 URL link to your\
              \ exported bot or bot locale."
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the request to export a bot was created.
      type: object
    BotExportSpecification:
      description: Provides the identity of a the bot that was exported.
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot assigned by Amazon Lex.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot that was exported. This will be either
              <code>DRAFT</code> or the version number.
      required:
      - botId
      - botVersion
      type: object
    BotLocaleExportSpecification:
      description: Provides the bot locale parameters required for exporting a bot
        locale.
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot to create the locale for.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot to export.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The identifier of the language and locale to export. The
              string must match one of the locales in the bot.
      required:
      - botId
      - botVersion
      - localeId
      type: object
    CustomVocabularyExportSpecification:
      description: Provides the parameters required for exporting a custom vocabulary.
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that contains the custom vocabulary
              to export.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot that contains the custom vocabulary
              to export.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The locale of the bot that contains the custom vocabulary
              to export.
      required:
      - botId
      - botVersion
      - localeId
      type: object
    TestSetExportSpecification:
      description: Contains information about the test set that is exported.
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the test set.
      required:
      - testSetId
      type: object
    CreateIntentResponse:
      example:
        sampleUtterances: ""
        parentIntentSignature: ""
        intentConfirmationSetting:
          declinationResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          active: ""
          confirmationNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
          declinationNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          promptSpecification:
            messageGroups: ""
            maxRetries: ""
            allowInterrupt: ""
            promptAttemptsSpecification: ""
            messageSelectionStrategy: ""
          confirmationConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          confirmationResponse:
            messageGroups: ""
            allowInterrupt: ""
          elicitationCodeHook:
            enableCodeHookInvocation: ""
            invocationLabel: ""
          declinationConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
        intentName: ""
        intentId: ""
        description: ""
        intentClosingSetting:
          conditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          closingResponse:
            messageGroups: ""
            allowInterrupt: ""
          active: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        botVersion: ""
        initialResponseSetting:
          conditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          initialResponse:
            messageGroups: ""
            allowInterrupt: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
        inputContexts: ""
        outputContexts: ""
        kendraConfiguration:
          kendraIndex: ""
          queryFilterStringEnabled: ""
          queryFilterString: ""
        fulfillmentCodeHook:
          active: ""
          postFulfillmentStatusSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          fulfillmentUpdatesSpecification:
            active: ""
            startResponse:
              messageGroups: ""
              allowInterrupt: ""
              delayInSeconds: ""
            updateResponse:
              messageGroups: ""
              allowInterrupt: ""
              frequencyInSeconds: ""
            timeoutInSeconds: ""
          enabled: ""
        botId: ""
        dialogCodeHook:
          enabled: ""
        localeId: ""
        creationDateTime: ""
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: A unique identifier for the intent.
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name specified for the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description specified for the intent.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          - description: The signature of the parent intent specified for the intent.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          - description: The sample utterances specified for the intent.
        dialogCodeHook:
          $ref: '#/components/schemas/CreateIntentResponse_dialogCodeHook'
        fulfillmentCodeHook:
          $ref: '#/components/schemas/CreateIntentResponse_fulfillmentCodeHook'
        intentConfirmationSetting:
          $ref: '#/components/schemas/CreateIntentResponse_intentConfirmationSetting'
        intentClosingSetting:
          $ref: '#/components/schemas/CreateIntentResponse_intentClosingSetting'
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextsList'
          - description: The list of input contexts specified for the intent.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextsList'
          - description: The list of output contexts specified for the intent.
        kendraConfiguration:
          $ref: '#/components/schemas/CreateIntentResponse_kendraConfiguration'
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot associated with the intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot associated with the intent.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The locale that the intent is specified to use.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the intent was created.
        initialResponseSetting:
          $ref: '#/components/schemas/CreateIntentResponse_initialResponseSetting'
      type: object
    SampleUtterance:
      description: A sample utterance that invokes an intent or respond to a slot
        elicitation prompt.
      properties:
        utterance:
          allOf:
          - $ref: '#/components/schemas/Utterance'
          - description: The sample utterance that Amazon Lex uses to build its machine-learning
              model to recognize intents.
      required:
      - utterance
      type: object
    PostFulfillmentStatusSpecification:
      description: "Provides a setting that determines whether the post-fulfillment\
        \ response is sent to the user. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/streaming-progress.html#progress-complete\"\
        >https://docs.aws.amazon.com/lexv2/latest/dg/streaming-progress.html#progress-complete</a> "
      properties:
        successResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        failureResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        timeoutResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        successNextStep:
          $ref: '#/components/schemas/PostFulfillmentStatusSpecification_successNextStep'
        successConditional:
          $ref: '#/components/schemas/PostFulfillmentStatusSpecification_successConditional'
        failureNextStep:
          $ref: '#/components/schemas/PostFulfillmentStatusSpecification_failureNextStep'
        failureConditional:
          $ref: '#/components/schemas/PostFulfillmentStatusSpecification_failureConditional'
        timeoutNextStep:
          $ref: '#/components/schemas/PostFulfillmentStatusSpecification_timeoutNextStep'
        timeoutConditional:
          $ref: '#/components/schemas/PostFulfillmentStatusSpecification_timeoutConditional'
      type: object
    FulfillmentUpdatesSpecification:
      description: Provides information for updating the user on the progress of fulfilling
        an intent.
      properties:
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: "<p>Determines whether fulfillment updates are sent to the\
              \ user. When this field is true, updates are sent.</p> <p>If the <code>active</code>\
              \ field is set to true, the <code>startResponse</code>, <code>updateResponse</code>,\
              \ and <code>timeoutInSeconds</code> fields are required.</p>"
        startResponse:
          $ref: '#/components/schemas/FulfillmentUpdatesSpecification_startResponse'
        updateResponse:
          $ref: '#/components/schemas/FulfillmentUpdatesSpecification_updateResponse'
        timeoutInSeconds:
          allOf:
          - $ref: '#/components/schemas/FulfillmentTimeout'
          - description: The length of time that the fulfillment Lambda function should
              run before it times out.
      required:
      - active
      type: object
    BoxedBoolean:
      type: boolean
    PromptSpecification:
      description: Specifies a list of message groups that Amazon Lex sends to a user
        to elicit a response.
      properties:
        messageGroups:
          allOf:
          - $ref: '#/components/schemas/MessageGroupsList'
          - description: A collection of messages that Amazon Lex can send to the
              user. Amazon Lex chooses the actual message to send at runtime.
        maxRetries:
          allOf:
          - $ref: '#/components/schemas/PromptMaxRetries'
          - description: The maximum number of times the bot tries to elicit a response
              from the user using this prompt.
        allowInterrupt:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: Indicates whether the user can interrupt a speech prompt
              from the bot.
        messageSelectionStrategy:
          allOf:
          - $ref: '#/components/schemas/MessageSelectionStrategy'
          - description: Indicates how a message is selected from a message group
              among retries.
        promptAttemptsSpecification:
          allOf:
          - $ref: '#/components/schemas/PromptAttemptsSpecificationMap'
          - description: Specifies the advanced settings on each attempt of the prompt.
      required:
      - maxRetries
      - messageGroups
      type: object
    ResponseSpecification:
      description: Specifies a list of message groups that Amazon Lex uses to respond
        the user input.
      example:
        messageGroups: ""
        allowInterrupt: ""
      properties:
        messageGroups:
          allOf:
          - $ref: '#/components/schemas/MessageGroupsList'
          - description: A collection of responses that Amazon Lex can send to the
              user. Amazon Lex chooses the actual response to send at runtime.
        allowInterrupt:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: Indicates whether the user can interrupt a speech response
              from Amazon Lex.
      required:
      - messageGroups
      type: object
    DialogState:
      description: The current state of the conversation with the user.
      properties:
        dialogAction:
          $ref: '#/components/schemas/DialogAction'
        intent:
          $ref: '#/components/schemas/IntentOverride'
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: Map of key/value pairs representing session-specific context
              information. It contains application information passed between Amazon
              Lex and a client application.
      type: object
    ConditionalSpecification:
      description: Provides a list of conditional branches. Branches are evaluated
        in the order that they are entered in the list. The first branch with a condition
        that evaluates to true is executed. The last branch in the list is the default
        branch. The default branch should not have any condition expression. The default
        branch is executed if no other branch has a matching condition.
      example:
        defaultBranch:
          response:
            messageGroups: ""
            allowInterrupt: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        active: ""
        conditionalBranches: ""
      properties:
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: "Determines whether a conditional branch is active. When\
              \ <code>active</code> is false, the conditions are not evaluated."
        conditionalBranches:
          allOf:
          - $ref: '#/components/schemas/ConditionalBranches'
          - description: "A list of conditional branches. A conditional branch is\
              \ made up of a condition, a response and a next step. The response and\
              \ next step are executed when the condition is true."
        defaultBranch:
          $ref: '#/components/schemas/ConditionalSpecification_defaultBranch'
      required:
      - active
      - conditionalBranches
      - defaultBranch
      type: object
    DialogCodeHookInvocationSetting:
      description: 'Settings that specify the dialog code hook that is called by Amazon
        Lex at a step of the conversation. '
      example:
        postCodeHookSpecification:
          successResponse:
            messageGroups: ""
            allowInterrupt: ""
          successConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          successNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          timeoutConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
        active: ""
        enableCodeHookInvocation: ""
        invocationLabel: ""
      properties:
        enableCodeHookInvocation:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: Indicates whether a Lambda function should be invoked for
              the dialog.
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: Determines whether a dialog code hook is used when the intent
              is activated.
        invocationLabel:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: A label that indicates the dialog step from which the dialog
              code hook is happening.
        postCodeHookSpecification:
          $ref: '#/components/schemas/DialogCodeHookInvocationSetting_postCodeHookSpecification'
      required:
      - active
      - enableCodeHookInvocation
      - postCodeHookSpecification
      type: object
    ElicitationCodeHookInvocationSetting:
      description: Settings that specify the dialog code hook that is called by Amazon
        Lex between eliciting slot values.
      properties:
        enableCodeHookInvocation:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: Indicates whether a Lambda function should be invoked for
              the dialog.
        invocationLabel:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: A label that indicates the dialog step from which the dialog
              code hook is happening.
      required:
      - enableCodeHookInvocation
      type: object
    InputContext:
      description: A context that must be active for an intent to be selected by Amazon
        Lex.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the context.
      required:
      - name
      type: object
    OutputContext:
      description: Describes a session context that is activated when an intent is
        fulfilled.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the output context.
        timeToLiveInSeconds:
          allOf:
          - $ref: '#/components/schemas/ContextTimeToLiveInSeconds'
          - description: "The amount of time, in seconds, that the output context\
              \ should remain active. The time is figured from the first time the\
              \ context is sent to the user."
        turnsToLive:
          allOf:
          - $ref: '#/components/schemas/ContextTurnsToLive'
          - description: The number of conversation turns that the output context
              should remain active. The number of turns is counted from the first
              time that the context is sent to the user.
      required:
      - name
      - timeToLiveInSeconds
      - turnsToLive
      type: object
    KendraIndexArn:
      maxLength: 2048
      minLength: 32
      pattern: "^arn:aws:kendra:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:index\\/[a-zA-Z0-9][a-zA-Z0-9_-]*$"
      type: string
    QueryFilterString:
      maxLength: 5000
      minLength: 1
      type: string
    CreateResourcePolicyResponse:
      example:
        revisionId: ""
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          - description: The Amazon Resource Name (ARN) of the bot or bot alias that
              the resource policy was attached to.
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: "The current revision of the resource policy. Use the revision\
              \ ID to make sure that you are updating the most current version of\
              \ a resource policy when you add a policy statement to a resource, delete\
              \ a resource, or update a resource."
      type: object
    CreateResourcePolicyStatementResponse:
      example:
        revisionId: ""
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          - description: The Amazon Resource Name (ARN) of the bot or bot alias that
              the resource policy is attached to.
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: "The current revision of the resource policy. Use the revision\
              \ ID to make sure that you are updating the most current version of\
              \ a resource policy when you add a policy statement to a resource, delete\
              \ a resource, or update a resource."
      type: object
    Principal:
      description: "The IAM principal that you allowing or denying access to an Amazon\
        \ Lex action. You must provide a <code>service</code> or an <code>arn</code>,\
        \ but not both in the same statement. For more information, see <a href=\"\
        https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\"\
        > AWS JSON policy elements: Principal </a>."
      properties:
        service:
          allOf:
          - $ref: '#/components/schemas/ServicePrincipal'
          - description: The name of the Amazon Web Services service that should allowed
              or denied access to an Amazon Lex action.
        arn:
          allOf:
          - $ref: '#/components/schemas/PrincipalArn'
          - description: The Amazon Resource Name (ARN) of the principal.
      type: object
    Operation:
      maxLength: 50
      minLength: 5
      pattern: "lex:[a-zA-Z*]+$"
      type: string
    ConditionKeyValueMap:
      additionalProperties:
        $ref: '#/components/schemas/ConditionValue'
      maxProperties: 10
      minProperties: 0
      type: object
    CreateSlotResponse:
      example:
        subSlotSetting:
          expression: ""
          slotSpecifications: ""
        description: ""
        intentId: ""
        valueElicitationSetting:
          sampleUtterances: ""
          slotConstraint: ""
          waitAndContinueSpecification:
            continueResponse:
              messageGroups: ""
              allowInterrupt: ""
            waitingResponse:
              messageGroups: ""
              allowInterrupt: ""
            active: ""
            stillWaitingResponse:
              messageGroups: ""
              allowInterrupt: ""
              frequencyInSeconds: ""
              timeoutInSeconds: ""
          defaultValueSpecification:
            defaultValueList: ""
          promptSpecification:
            messageGroups: ""
            maxRetries: ""
            allowInterrupt: ""
            promptAttemptsSpecification: ""
            messageSelectionStrategy: ""
          slotCaptureSetting:
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            captureResponse:
              messageGroups: ""
              allowInterrupt: ""
            elicitationCodeHook:
              enableCodeHookInvocation: ""
              invocationLabel: ""
            captureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            captureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            codeHook:
              postCodeHookSpecification:
                successResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                successConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
                successNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                timeoutNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                timeoutResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                failureNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                failureConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
                failureResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                timeoutConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
              active: ""
              enableCodeHookInvocation: ""
              invocationLabel: ""
        botVersion: ""
        slotName: ""
        slotTypeId: ""
        slotId: ""
        botId: ""
        obfuscationSetting:
          obfuscationSettingType: ""
        localeId: ""
        multipleValuesSetting:
          allowMultipleValues: ""
        creationDateTime: ""
      properties:
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier associated with the slot. Use this
              to identify the slot when you update or delete it.
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name specified for the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description associated with the slot.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          - description: The unique identifier of the slot type associated with this
              slot.
        valueElicitationSetting:
          $ref: '#/components/schemas/CreateSlotResponse_valueElicitationSetting'
        obfuscationSetting:
          $ref: '#/components/schemas/CreateSlotResponse_obfuscationSetting'
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot associated with the slot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot associated with the slot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and local specified for the slot.
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the intent associated with the slot.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp of the date and time that the slot was created.
        multipleValuesSetting:
          $ref: '#/components/schemas/CreateSlotResponse_multipleValuesSetting'
        subSlotSetting:
          $ref: '#/components/schemas/CreateSlotResponse_subSlotSetting'
      type: object
    SlotDefaultValueSpecification:
      description: Defines a list of values that Amazon Lex should use as the default
        value for a slot.
      properties:
        defaultValueList:
          allOf:
          - $ref: '#/components/schemas/SlotDefaultValueList'
          - description: A list of default values. Amazon Lex chooses the default
              value to use in the order that they are presented in the list.
      required:
      - defaultValueList
      type: object
    SlotConstraint:
      enum:
      - Required
      - Optional
      type: string
    SampleUtterancesList:
      items:
        $ref: '#/components/schemas/SampleUtterance'
      type: array
    WaitAndContinueSpecification:
      description: 'Specifies the prompts that Amazon Lex uses while a bot is waiting
        for customer input. '
      example:
        continueResponse:
          messageGroups: ""
          allowInterrupt: ""
        waitingResponse:
          messageGroups: ""
          allowInterrupt: ""
        active: ""
        stillWaitingResponse:
          messageGroups: ""
          allowInterrupt: ""
          frequencyInSeconds: ""
          timeoutInSeconds: ""
      properties:
        waitingResponse:
          $ref: '#/components/schemas/WaitAndContinueSpecification_waitingResponse'
        continueResponse:
          $ref: '#/components/schemas/WaitAndContinueSpecification_continueResponse'
        stillWaitingResponse:
          $ref: '#/components/schemas/WaitAndContinueSpecification_stillWaitingResponse'
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: "Specifies whether the bot will wait for a user to respond.\
              \ When this field is false, wait and continue responses for a slot aren't\
              \ used. If the <code>active</code> field isn't specified, the default\
              \ is true."
      required:
      - continueResponse
      - waitingResponse
      type: object
    SlotCaptureSetting:
      description: Settings used when Amazon Lex successfully captures a slot value
        from a user.
      properties:
        captureResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        captureNextStep:
          $ref: '#/components/schemas/SlotCaptureSetting_captureNextStep'
        captureConditional:
          $ref: '#/components/schemas/SlotCaptureSetting_captureConditional'
        failureResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        failureNextStep:
          $ref: '#/components/schemas/SlotCaptureSetting_failureNextStep'
        failureConditional:
          $ref: '#/components/schemas/SlotCaptureSetting_failureConditional'
        codeHook:
          $ref: '#/components/schemas/SlotCaptureSetting_codeHook'
        elicitationCodeHook:
          $ref: '#/components/schemas/SlotCaptureSetting_elicitationCodeHook'
      type: object
    ObfuscationSettingType:
      enum:
      - None
      - DefaultObfuscation
      type: string
    SubSlotExpression:
      maxLength: 640
      minLength: 0
      pattern: "[0-9A-Za-z_\\-\\s\\(\\)]+"
      type: string
    SubSlotSpecificationMap:
      additionalProperties:
        $ref: '#/components/schemas/Specifications'
      maxProperties: 6
      minProperties: 0
      type: object
    CreateSlotTypeResponse:
      example:
        slotTypeId: ""
        externalSourceSetting:
          grammarSlotTypeSetting:
            source:
              s3ObjectKey: ""
              kmsKeyArn: ""
              s3BucketName: ""
        parentSlotTypeSignature: ""
        slotTypeName: ""
        description: ""
        valueSelectionSetting:
          resolutionStrategy: ""
          regexFilter:
            pattern: ""
          advancedRecognitionSetting:
            audioRecognitionStrategy: ""
        compositeSlotTypeSetting:
          subSlots: ""
        botId: ""
        botVersion: ""
        localeId: ""
        slotTypeValues: ""
        creationDateTime: ""
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier assigned to the slot type. Use this
              to identify the slot type in the <code>UpdateSlotType</code> and <code>DeleteSlotType</code>
              operations.
        slotTypeName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name specified for the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description specified for the slot type.
        slotTypeValues:
          allOf:
          - $ref: '#/components/schemas/SlotTypeValues'
          - description: The list of values that the slot type can assume.
        valueSelectionSetting:
          $ref: '#/components/schemas/CreateSlotTypeResponse_valueSelectionSetting'
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          - description: The signature of the base slot type specified for the slot
              type.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier for the bot associated with the slot type.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot associated with the slot type.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The specified language and local specified for the slot type.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the slot type was created.
        externalSourceSetting:
          $ref: '#/components/schemas/CreateSlotTypeResponse_externalSourceSetting'
        compositeSlotTypeSetting:
          $ref: '#/components/schemas/CreateSlotTypeResponse_compositeSlotTypeSetting'
      type: object
    SlotTypeValue:
      description: Each slot type can have a set of values. Each <code>SlotTypeValue</code>
        represents a value that the slot type can take.
      properties:
        sampleValue:
          $ref: '#/components/schemas/SlotTypeValue_sampleValue'
        synonyms:
          allOf:
          - $ref: '#/components/schemas/SynonymList'
          - description: Additional values related to the slot type entry.
      type: object
    SlotValueResolutionStrategy:
      enum:
      - OriginalValue
      - TopResolution
      - Concatenation
      type: string
    SlotValueRegexFilter:
      description: Provides a regular expression used to validate the value of a slot.
      properties:
        pattern:
          allOf:
          - $ref: '#/components/schemas/RegexPattern'
          - description: "<p>A regular expression used to validate the value of a\
              \ slot.</p> <p> Use a standard regular expression. Amazon Lex supports\
              \ the following characters in the regular expression: </p> <ul> <li>\
              \ <p>A-Z, a-z</p> </li> <li> <p>0-9</p> </li> <li> <p>Unicode characters\
              \ (\"\\⁠u&lt;Unicode&gt;\")</p> </li> </ul> <p> Represent Unicode characters\
              \ with four digits, for example \"\\⁠u0041\" or \"\\⁠u005A\". </p> <p>\
              \ The following regular expression operators are not supported: </p>\
              \ <ul> <li> <p>Infinite repeaters: *, +, or {x,} with no upper bound.</p>\
              \ </li> <li> <p>Wild card (.)</p> </li> </ul>"
      required:
      - pattern
      type: object
    AdvancedRecognitionSetting:
      description: Provides settings that enable advanced recognition settings for
        slot values.
      properties:
        audioRecognitionStrategy:
          allOf:
          - $ref: '#/components/schemas/AudioRecognitionStrategy'
          - description: Enables using the slot values as a custom vocabulary for
              recognizing user utterances.
      type: object
    GrammarSlotTypeSetting:
      description: Settings requried for a slot type based on a grammar that you provide.
      properties:
        source:
          $ref: '#/components/schemas/GrammarSlotTypeSetting_source'
      type: object
    SubSlotTypeList:
      items:
        $ref: '#/components/schemas/SubSlotTypeComposition'
      maxItems: 6
      minItems: 0
      type: array
    CreateTestSetDiscrepancyReportResponse:
      example:
        testSetId: ""
        testSetDiscrepancyReportId: ""
        creationDateTime: ""
        target:
          botAliasTarget:
            botAliasId: ""
            botId: ""
            localeId: ""
      properties:
        testSetDiscrepancyReportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the test set discrepancy report
              to describe.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The creation date and time for the test set discrepancy report.
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The test set Id for the test set discrepancy report.
        target:
          $ref: '#/components/schemas/CreateTestSetDiscrepancyReportResponse_target'
      type: object
    TestSetDiscrepancyReportBotAliasTarget:
      description: Contains information about the bot alias used for the test set
        discrepancy report.
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the bot alias.
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: The unique identifier for the bot associated with the bot
              alias.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The unique identifier of the locale associated with the bot
              alias.
      required:
      - botAliasId
      - botId
      - localeId
      type: object
    CreateUploadUrlResponse:
      example:
        importId: ""
        uploadUrl: ""
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: An identifier for a unique import job. Use it when you call
              the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_StartImport.html">StartImport</a>
              operation.
        uploadUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          - description: A pre-signed S3 write URL. Upload the zip archive file that
              contains the definition of your bot or bot locale.
      type: object
    DeleteBotResponse:
      example:
        botStatus: ""
        botId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot that Amazon Lex is deleting.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          - description: The current status of the bot. The status is <code>Deleting</code>
              while the bot and its associated resources are being deleted.
      type: object
    DeleteBotAliasResponse:
      example:
        botAliasId: ""
        botId: ""
        botAliasStatus: ""
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: The unique identifier of the bot alias to delete.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot that contains the alias
              to delete.
        botAliasStatus:
          allOf:
          - $ref: '#/components/schemas/BotAliasStatus'
          - description: "The current status of the alias. The status is <code>Deleting</code>\
              \ while the alias is in the process of being deleted. Once the alias\
              \ is deleted, it will no longer appear in the list of aliases returned\
              \ by the <code>ListBotAliases</code> operation."
      type: object
    DeleteBotLocaleResponse:
      example:
        botLocaleStatus: ""
        botId: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that contained the deleted locale.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot that contained the deleted locale.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and locale of the deleted locale.
        botLocaleStatus:
          allOf:
          - $ref: '#/components/schemas/BotLocaleStatus'
          - description: The status of deleting the bot locale. The locale first enters
              the <code>Deleting</code> status. Once the locale is deleted it no longer
              appears in the list of locales for the bot.
      type: object
    DeleteBotVersionResponse:
      example:
        botStatus: ""
        botId: ""
        botVersion: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that is being deleted.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          - description: The version of the bot that is being deleted.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          - description: 'The current status of the bot. '
      type: object
    DeleteCustomVocabularyResponse:
      example:
        botId: ""
        customVocabularyStatus: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that the custom vocabulary was
              removed from.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot that the custom vocabulary was removed
              from.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The locale identifier for the locale that the custom vocabulary
              was removed from.
        customVocabularyStatus:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyStatus'
          - description: The status of removing the custom vocabulary.
      type: object
    DeleteExportResponse:
      example:
        exportStatus: ""
        exportId: ""
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the deleted export.
        exportStatus:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          - description: "The current status of the deletion. When the deletion is\
              \ complete, the export will no longer be returned by the <a href=\"\
              https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListExports.html\"\
              >ListExports</a> operation and calls to the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeExport.html\"\
              > DescribeExport</a> operation with the export identifier will fail."
      type: object
    DeleteImportResponse:
      example:
        importStatus: ""
        importId: ""
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the deleted import.
        importStatus:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          - description: "The current status of the deletion. When the deletion is\
              \ complete, the import will no longer be returned by the <a href=\"\
              https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListImports.html\"\
              >ListImports</a> operation and calls to the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeImport.html\"\
              >DescribeImport</a> operation with the import identifier will fail."
      type: object
    DeleteResourcePolicyResponse:
      example:
        revisionId: ""
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          - description: The Amazon Resource Name (ARN) of the bot or bot alias that
              the resource policy was deleted from.
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: "The current revision of the resource policy. Use the revision\
              \ ID to make sure that you are updating the most current version of\
              \ a resource policy when you add a policy statement to a resource, delete\
              \ a resource, or update a resource."
      type: object
    DeleteResourcePolicyStatementResponse:
      example:
        revisionId: ""
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          - description: The Amazon Resource Name (ARN) of the bot or bot alias that
              the resource policy statement was removed from.
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: "The current revision of the resource policy. Use the revision\
              \ ID to make sure that you are updating the most current version of\
              \ a resource policy when you add a policy statement to a resource, delete\
              \ a resource, or update a resource."
      type: object
    DeleteUtterancesResponse:
      properties: {}
      type: object
    DescribeBotResponse:
      example:
        botStatus: ""
        botName: ""
        roleArn: ""
        botType: ""
        failureReasons: ""
        description: ""
        dataPrivacy:
          childDirected: ""
        idleSessionTTLInSeconds: ""
        botId: ""
        lastUpdatedDateTime: ""
        botMembers: ""
        creationDateTime: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot.
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: 'The description of the bot. '
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The Amazon Resource Name (ARN) of an IAM role that has permission
              to access the bot.
        dataPrivacy:
          $ref: '#/components/schemas/DescribeBotResponse_dataPrivacy'
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          - description: The maximum time in seconds that Amazon Lex retains the data
              gathered in a conversation.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          - description: The current status of the bot. When the status is <code>Available</code>
              the bot is ready to be used in conversations with users.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot was last updated.
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          - description: The type of the bot that was described.
        botMembers:
          allOf:
          - $ref: '#/components/schemas/BotMembers'
          - description: The list of bots in the network that was described.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          - description: "If the <code>botStatus</code> is <code>Failed</code>, this\
              \ contains a list of reasons that the bot couldn't be built."
      type: object
    DescribeBotAliasResponse:
      example:
        botAliasLocaleSettings: ""
        sentimentAnalysisSettings:
          detectSentiment: ""
        botAliasHistoryEvents: ""
        botAliasId: ""
        description: ""
        botAliasName: ""
        botVersion: ""
        parentBotNetworks: ""
        conversationLogSettings:
          textLogSettings: ""
          audioLogSettings: ""
        botId: ""
        lastUpdatedDateTime: ""
        botAliasStatus: ""
        creationDateTime: ""
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: The identifier of the bot alias.
        botAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot associated with the bot alias.
        botAliasLocaleSettings:
          allOf:
          - $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          - description: The locale settings that are unique to the alias.
        conversationLogSettings:
          $ref: '#/components/schemas/DescribeBotAliasResponse_conversationLogSettings'
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        botAliasHistoryEvents:
          allOf:
          - $ref: '#/components/schemas/BotAliasHistoryEventsList'
          - description: "A list of events that affect a bot alias. For example, an\
              \ event is recorded when the version that the alias points to changes."
        botAliasStatus:
          allOf:
          - $ref: '#/components/schemas/BotAliasStatus'
          - description: "The current status of the alias. When the alias is <code>Available</code>,\
              \ the alias is ready for use with your bot."
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot associated with the bot alias.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the alias was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the alias was last
              updated.
        parentBotNetworks:
          allOf:
          - $ref: '#/components/schemas/ParentBotNetworks'
          - description: A list of the networks to which the bot alias you described
              belongs.
      type: object
    DescribeBotLocaleResponse:
      example:
        nluIntentConfidenceThreshold: ""
        lastBuildSubmittedDateTime: ""
        intentsCount: ""
        failureReasons: ""
        slotTypesCount: ""
        description: ""
        voiceSettings:
          voiceId: ""
          engine: ""
        botLocaleHistoryEvents: ""
        botVersion: ""
        botLocaleStatus: ""
        botId: ""
        lastUpdatedDateTime: ""
        recommendedActions: ""
        localeName: ""
        localeId: ""
        creationDateTime: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot associated with the locale.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot associated with the locale.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The unique identifier of the described locale.
        localeName:
          allOf:
          - $ref: '#/components/schemas/LocaleName'
          - description: The name of the locale.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the locale.
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          - description: The confidence threshold where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code>
              and <code>AMAZON.KendraSearchIntent</code> intents in the list of possible
              intents for an utterance.
        voiceSettings:
          $ref: '#/components/schemas/DescribeBotLocaleResponse_voiceSettings'
        intentsCount:
          allOf:
          - $ref: '#/components/schemas/ResourceCount'
          - description: The number of intents defined for the locale.
        slotTypesCount:
          allOf:
          - $ref: '#/components/schemas/ResourceCount'
          - description: The number of slot types defined for the locale.
        botLocaleStatus:
          allOf:
          - $ref: '#/components/schemas/BotLocaleStatus'
          - description: "The status of the bot. If the status is <code>Failed</code>,\
              \ the reasons for the failure are listed in the <code>failureReasons</code>\
              \ field."
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          - description: "if <code>botLocaleStatus</code> is <code>Failed</code>,\
              \ Amazon Lex explains why it failed to build the bot."
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the locale was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the locale was last updated.
        lastBuildSubmittedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the locale was last submitted for
              building.
        botLocaleHistoryEvents:
          allOf:
          - $ref: '#/components/schemas/BotLocaleHistoryEventsList'
          - description: "History of changes, such as when a locale is used in an\
              \ alias, that have taken place for the locale."
        recommendedActions:
          allOf:
          - $ref: '#/components/schemas/RecommendedActions'
          - description: Recommended actions to take to resolve an error in the <code>failureReasons</code>
              field.
      type: object
    DescribeBotRecommendationResponse:
      example:
        encryptionSetting:
          associatedTranscriptsPassword: ""
          botLocaleExportPassword: ""
          kmsKeyArn: ""
        botRecommendationStatus: ""
        failureReasons: ""
        botRecommendationResults:
          associatedTranscriptsUrl: ""
          botLocaleExportUrl: ""
          statistics:
            slotTypes:
              discoveredSlotTypeCount: ""
            intents:
              discoveredIntentCount: ""
        botId: ""
        lastUpdatedDateTime: ""
        botRecommendationId: ""
        botVersion: ""
        localeId: ""
        transcriptSourceSetting:
          s3BucketTranscriptSource:
            transcriptFilter:
              lexTranscriptFilter:
                dateRangeFilter:
                  startDateTime: ""
                  endDateTime: ""
            kmsKeyArn: ""
            s3BucketName: ""
            pathFormat:
              objectPrefixes: ""
            transcriptFormat: ""
        creationDateTime: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot associated with the bot recommendation.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot associated with the bot recommendation.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The identifier of the language and locale of the bot recommendation
              to describe.
        botRecommendationStatus:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationStatus'
          - description: "The status of the bot recommendation. If the status is Failed,\
              \ then the reasons for the failure are listed in the failureReasons\
              \ field. "
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot recommendation being described.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          - description: "If botRecommendationStatus is Failed, Amazon Lex explains\
              \ why."
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the bot recommendation was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the bot recommendation was last updated.
        transcriptSourceSetting:
          $ref: '#/components/schemas/DescribeBotRecommendationResponse_transcriptSourceSetting'
        encryptionSetting:
          $ref: '#/components/schemas/DescribeBotRecommendationResponse_encryptionSetting'
        botRecommendationResults:
          $ref: '#/components/schemas/DescribeBotRecommendationResponse_botRecommendationResults'
      type: object
    DescribeBotVersionResponse:
      example:
        botStatus: ""
        botName: ""
        failureReasons: ""
        description: ""
        dataPrivacy:
          childDirected: ""
        idleSessionTTLInSeconds: ""
        botMembers: ""
        botVersion: ""
        parentBotNetworks: ""
        roleArn: ""
        botType: ""
        botId: ""
        creationDateTime: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that contains the version.
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the bot that contains the version.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          - description: The version of the bot that was described.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description specified for the bot.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The Amazon Resource Name (ARN) of an IAM role that has permission
              to access the bot version.
        dataPrivacy:
          $ref: '#/components/schemas/DescribeBotVersionResponse_dataPrivacy'
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          - description: The number of seconds that a session with the bot remains
              active before it is discarded by Amazon Lex.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          - description: "The current status of the bot. When the status is <code>Available</code>,\
              \ the bot version is ready for use."
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          - description: "If the <code>botStatus</code> is <code>Failed</code>, this\
              \ contains a list of reasons that the version couldn't be built."
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot version was
              created.
        parentBotNetworks:
          allOf:
          - $ref: '#/components/schemas/ParentBotNetworks'
          - description: A list of the networks to which the bot version you described
              belongs.
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          - description: The type of the bot in the version that was described.
        botMembers:
          allOf:
          - $ref: '#/components/schemas/BotMembers'
          - description: The members of bot network in the version that was described.
      type: object
    DescribeCustomVocabularyMetadataResponse:
      example:
        botId: ""
        lastUpdatedDateTime: ""
        customVocabularyStatus: ""
        botVersion: ""
        localeId: ""
        creationDateTime: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that contains the custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot that contains the custom vocabulary
              to describe.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The locale that contains the custom vocabulary to describe.
        customVocabularyStatus:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyStatus'
          - description: The status of the custom vocabulary. If the status is <code>Ready</code>
              the custom vocabulary is ready to use.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the custom vocabulary was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the custom vocabulary was last updated.
      type: object
    DescribeExportResponse:
      example:
        exportStatus: ""
        failureReasons: ""
        resourceSpecification:
          testSetExportSpecification:
            testSetId: ""
          customVocabularyExportSpecification:
            botId: ""
            botVersion: ""
            localeId: ""
          botExportSpecification:
            botId: ""
            botVersion: ""
          botLocaleExportSpecification:
            botId: ""
            botVersion: ""
            localeId: ""
        downloadUrl: ""
        lastUpdatedDateTime: ""
        exportId: ""
        fileFormat: ""
        creationDateTime: ""
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the described export.
        resourceSpecification:
          $ref: '#/components/schemas/DescribeExportResponse_resourceSpecification'
        fileFormat:
          allOf:
          - $ref: '#/components/schemas/ImportExportFileFormat'
          - description: 'The file format used in the files that describe the resource. '
        exportStatus:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          - description: The status of the export. When the status is <code>Complete</code>
              the export archive file is available for download.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          - description: "If the <code>exportStatus</code> is failed, contains one\
              \ or more reasons why the export could not be completed."
        downloadUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          - description: A pre-signed S3 URL that points to the bot or bot locale
              archive. The URL is only available for 5 minutes after calling the <code>DescribeExport</code>
              operation.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the export was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The last date and time that the export was updated.
      type: object
    DescribeImportResponse:
      example:
        importStatus: ""
        importId: ""
        importedResourceId: ""
        mergeStrategy: ""
        failureReasons: ""
        resourceSpecification:
          customVocabularyImportSpecification:
            botId: ""
            botVersion: ""
            localeId: ""
          testSetImportResourceSpecification:
            testSetTags: ""
            modality: ""
            roleArn: ""
            description: ""
            storageLocation:
              s3Path: ""
              kmsKeyArn: ""
              s3BucketName: ""
            importInputLocation:
              s3Path: ""
              s3BucketName: ""
            testSetName: ""
          botLocaleImportSpecification:
            nluIntentConfidenceThreshold: ""
            voiceSettings:
              voiceId: ""
              engine: ""
            botId: ""
            botVersion: ""
            localeId: ""
          botImportSpecification:
            testBotAliasTags: ""
            botName: ""
            roleArn: ""
            botTags: ""
            dataPrivacy:
              childDirected: ""
            idleSessionTTLInSeconds: ""
        importedResourceName: ""
        lastUpdatedDateTime: ""
        creationDateTime: ""
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the described import.
        resourceSpecification:
          $ref: '#/components/schemas/DescribeImportResponse_resourceSpecification'
        importedResourceId:
          allOf:
          - $ref: '#/components/schemas/ImportedResourceId'
          - description: The unique identifier that Amazon Lex assigned to the resource
              created by the import.
        importedResourceName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the imported resource.
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          - description: The strategy used when there was a name conflict between
              the imported resource and an existing resource. When the merge strategy
              is <code>FailOnConflict</code> existing resources are not overwritten
              and the import fails.
        importStatus:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          - description: The status of the import process. When the status is <code>Completed</code>
              the resource is imported and ready for use.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          - description: "If the <code>importStatus</code> field is <code>Failed</code>,\
              \ this provides one or more reasons for the failure."
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the import was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the import was last updated.
      type: object
    DescribeIntentResponse:
      example:
        sampleUtterances: ""
        parentIntentSignature: ""
        intentConfirmationSetting:
          declinationResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          active: ""
          confirmationNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
          declinationNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          promptSpecification:
            messageGroups: ""
            maxRetries: ""
            allowInterrupt: ""
            promptAttemptsSpecification: ""
            messageSelectionStrategy: ""
          confirmationConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          confirmationResponse:
            messageGroups: ""
            allowInterrupt: ""
          elicitationCodeHook:
            enableCodeHookInvocation: ""
            invocationLabel: ""
          declinationConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
        intentName: ""
        intentId: ""
        description: ""
        intentClosingSetting:
          conditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          closingResponse:
            messageGroups: ""
            allowInterrupt: ""
          active: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        botVersion: ""
        initialResponseSetting:
          conditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          initialResponse:
            messageGroups: ""
            allowInterrupt: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
        slotPriorities: ""
        inputContexts: ""
        outputContexts: ""
        kendraConfiguration:
          kendraIndex: ""
          queryFilterStringEnabled: ""
          queryFilterString: ""
        fulfillmentCodeHook:
          active: ""
          postFulfillmentStatusSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          fulfillmentUpdatesSpecification:
            active: ""
            startResponse:
              messageGroups: ""
              allowInterrupt: ""
              delayInSeconds: ""
            updateResponse:
              messageGroups: ""
              allowInterrupt: ""
              frequencyInSeconds: ""
            timeoutInSeconds: ""
          enabled: ""
        botId: ""
        lastUpdatedDateTime: ""
        dialogCodeHook:
          enabled: ""
        localeId: ""
        creationDateTime: ""
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier assigned to the intent when it was
              created.
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name specified for the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the intent.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          - description: "The identifier of the built-in intent that this intent is\
              \ derived from, if any."
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          - description: User utterances that trigger this intent.
        dialogCodeHook:
          $ref: '#/components/schemas/DescribeIntentResponse_dialogCodeHook'
        fulfillmentCodeHook:
          $ref: '#/components/schemas/DescribeIntentResponse_fulfillmentCodeHook'
        slotPriorities:
          allOf:
          - $ref: '#/components/schemas/SlotPrioritiesList'
          - description: The list that determines the priority that slots should be
              elicited from the user.
        intentConfirmationSetting:
          $ref: '#/components/schemas/DescribeIntentResponse_intentConfirmationSetting'
        intentClosingSetting:
          $ref: '#/components/schemas/DescribeIntentResponse_intentClosingSetting'
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextsList'
          - description: A list of contexts that must be active for the intent to
              be considered for sending to the user.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextsList'
          - description: A list of contexts that are activated when the intent is
              fulfilled.
        kendraConfiguration:
          $ref: '#/components/schemas/DescribeIntentResponse_kendraConfiguration'
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot associated with the intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot associated with the intent.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and locale specified for the intent.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the intent was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the intent was last
              updated.
        initialResponseSetting:
          $ref: '#/components/schemas/DescribeIntentResponse_initialResponseSetting'
      type: object
    DescribeResourcePolicyResponse:
      example:
        revisionId: ""
        resourceArn: ""
        policy: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          - description: The Amazon Resource Name (ARN) of the bot or bot alias that
              the resource policy is attached to.
        policy:
          allOf:
          - $ref: '#/components/schemas/Policy'
          - description: "The JSON structure that contains the resource policy. For\
              \ more information about the contents of a JSON policy document, see\
              \ <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html\"\
              > IAM JSON policy reference </a>."
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: "The current revision of the resource policy. Use the revision\
              \ ID to make sure that you are updating the most current version of\
              \ a resource policy when you add a policy statement to a resource, delete\
              \ a resource, or update a resource."
      type: object
    DescribeSlotResponse:
      example:
        subSlotSetting:
          expression: ""
          slotSpecifications: ""
        description: ""
        intentId: ""
        valueElicitationSetting:
          sampleUtterances: ""
          slotConstraint: ""
          waitAndContinueSpecification:
            continueResponse:
              messageGroups: ""
              allowInterrupt: ""
            waitingResponse:
              messageGroups: ""
              allowInterrupt: ""
            active: ""
            stillWaitingResponse:
              messageGroups: ""
              allowInterrupt: ""
              frequencyInSeconds: ""
              timeoutInSeconds: ""
          defaultValueSpecification:
            defaultValueList: ""
          promptSpecification:
            messageGroups: ""
            maxRetries: ""
            allowInterrupt: ""
            promptAttemptsSpecification: ""
            messageSelectionStrategy: ""
          slotCaptureSetting:
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            captureResponse:
              messageGroups: ""
              allowInterrupt: ""
            elicitationCodeHook:
              enableCodeHookInvocation: ""
              invocationLabel: ""
            captureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            captureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            codeHook:
              postCodeHookSpecification:
                successResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                successConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
                successNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                timeoutNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                timeoutResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                failureNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                failureConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
                failureResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                timeoutConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
              active: ""
              enableCodeHookInvocation: ""
              invocationLabel: ""
        botVersion: ""
        slotName: ""
        slotTypeId: ""
        slotId: ""
        botId: ""
        lastUpdatedDateTime: ""
        obfuscationSetting:
          obfuscationSettingType: ""
        localeId: ""
        multipleValuesSetting:
          allowMultipleValues: ""
        creationDateTime: ""
      properties:
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier generated for the slot.
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name specified for the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description specified for the slot.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          - description: The identifier of the slot type that determines the values
              entered into the slot.
        valueElicitationSetting:
          $ref: '#/components/schemas/DescribeSlotResponse_valueElicitationSetting'
        obfuscationSetting:
          $ref: '#/components/schemas/DescribeSlotResponse_obfuscationSetting'
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot associated with the slot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot associated with the slot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and locale specified for the slot.
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the intent associated with the slot.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the slot was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the slot was last updated.
        multipleValuesSetting:
          $ref: '#/components/schemas/DescribeSlotResponse_multipleValuesSetting'
        subSlotSetting:
          $ref: '#/components/schemas/CreateSlotResponse_subSlotSetting'
      type: object
    DescribeSlotTypeResponse:
      example:
        parentSlotTypeSignature: ""
        slotTypeName: ""
        description: ""
        valueSelectionSetting:
          resolutionStrategy: ""
          regexFilter:
            pattern: ""
          advancedRecognitionSetting:
            audioRecognitionStrategy: ""
        botVersion: ""
        slotTypeId: ""
        externalSourceSetting:
          grammarSlotTypeSetting:
            source:
              s3ObjectKey: ""
              kmsKeyArn: ""
              s3BucketName: ""
        compositeSlotTypeSetting:
          subSlots: ""
        botId: ""
        lastUpdatedDateTime: ""
        localeId: ""
        slotTypeValues: ""
        creationDateTime: ""
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the slot type.
        slotTypeName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name specified for the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description specified for the slot type.
        slotTypeValues:
          allOf:
          - $ref: '#/components/schemas/SlotTypeValues'
          - description: The values that the slot type can take. Includes any synonyms
              for the slot type values.
        valueSelectionSetting:
          $ref: '#/components/schemas/DescribeSlotTypeResponse_valueSelectionSetting'
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          - description: The built in slot type used as a parent to this slot type.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot associated with the slot type.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot associated with the slot type.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and locale specified for the slot type.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the slot type was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the slot type was last
              updated.
        externalSourceSetting:
          $ref: '#/components/schemas/ExternalSourceSetting'
        compositeSlotTypeSetting:
          $ref: '#/components/schemas/CreateSlotTypeResponse_compositeSlotTypeSetting'
      type: object
    DescribeTestExecutionResponse:
      example:
        testExecutionStatus: ""
        testExecutionModality: ""
        testExecutionId: ""
        testSetId: ""
        failureReasons: ""
        apiMode: ""
        lastUpdatedDateTime: ""
        testSetName: ""
        creationDateTime: ""
        target:
          botAliasTarget:
            botAliasId: ""
            botId: ""
            localeId: ""
      properties:
        testExecutionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The execution Id for the test set execution.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The execution creation date and time for the test set execution.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time of the last update for the execution.
        testExecutionStatus:
          allOf:
          - $ref: '#/components/schemas/TestExecutionStatus'
          - description: The test execution status for the test execution.
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The test set Id for the test set execution.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The test set name of the test set execution.
        target:
          $ref: '#/components/schemas/DescribeTestExecutionResponse_target'
        apiMode:
          allOf:
          - $ref: '#/components/schemas/TestExecutionApiMode'
          - description: "Indicates whether we use streaming or non-streaming APIs\
              \ are used for the test set execution. For streaming, <code>StartConversation</code>\
              \ Amazon Lex Runtime API is used. Whereas for non-streaming, <code>RecognizeUtterance</code>\
              \ and <code>RecognizeText</code> Amazon Lex Runtime API is used."
        testExecutionModality:
          allOf:
          - $ref: '#/components/schemas/TestExecutionModality'
          - description: Indicates whether test set is audio or text.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          - description: Reasons for the failure of the test set execution.
      type: object
    DescribeTestSetResponse:
      example:
        numTurns: ""
        testSetId: ""
        modality: ""
        roleArn: ""
        description: ""
        storageLocation:
          s3Path: ""
          kmsKeyArn: ""
          s3BucketName: ""
        lastUpdatedDateTime: ""
        testSetName: ""
        status: ""
        creationDateTime: ""
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The test set Id for the test set response.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The test set name of the test set.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the test set.
        modality:
          allOf:
          - $ref: '#/components/schemas/TestSetModality'
          - description: Indicates whether the test set is audio or text data.
        status:
          allOf:
          - $ref: '#/components/schemas/TestSetStatus'
          - description: The status of the test set.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The roleARN used for any operation in the test set to access
              resources in the Amazon Web Services account.
        numTurns:
          allOf:
          - $ref: '#/components/schemas/Count'
          - description: The total number of agent and user turn in the test set.
        storageLocation:
          $ref: '#/components/schemas/DescribeTestSetResponse_storageLocation'
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The creation date and time for the test set data.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time for the last update of the test set data.
      type: object
    DescribeTestSetDiscrepancyReportResponse:
      example:
        testSetDiscrepancyRawOutputUrl: ""
        testSetId: ""
        failureReasons: ""
        testSetDiscrepancyReportStatus: ""
        testSetDiscrepancyReportId: ""
        creationDateTime: ""
        target:
          botAliasTarget:
            botAliasId: ""
            botId: ""
            localeId: ""
        lastUpdatedDataTime: ""
        testSetDiscrepancyTopErrors:
          intentDiscrepancies: ""
          slotDiscrepancies: ""
      properties:
        testSetDiscrepancyReportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the test set discrepancy report
              to describe.
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The test set Id for the test set discrepancy report.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The time and date of creation for the test set discrepancy
              report.
        target:
          $ref: '#/components/schemas/DescribeTestSetDiscrepancyReportResponse_target'
        testSetDiscrepancyReportStatus:
          allOf:
          - $ref: '#/components/schemas/TestSetDiscrepancyReportStatus'
          - description: The status for the test set discrepancy report.
        lastUpdatedDataTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time of the last update for the test set discrepancy
              report.
        testSetDiscrepancyTopErrors:
          $ref: '#/components/schemas/DescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors'
        testSetDiscrepancyRawOutputUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          - description: Pre-signed Amazon S3 URL to download the test set discrepancy
              report.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          - description: The failure report for the test set discrepancy report generation
              action.
      type: object
    DescribeTestSetGenerationResponse:
      example:
        testSetId: ""
        testSetGenerationStatus: ""
        roleArn: ""
        failureReasons: ""
        testSetGenerationId: ""
        description: ""
        storageLocation:
          s3Path: ""
          kmsKeyArn: ""
          s3BucketName: ""
        generationDataSource:
          conversationLogsDataSource:
            filter:
              inputMode: ""
              startTime: ""
              endTime: ""
            botAliasId: ""
            botId: ""
            localeId: ""
        lastUpdatedDateTime: ""
        testSetName: ""
        creationDateTime: ""
      properties:
        testSetGenerationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the test set generation.
        testSetGenerationStatus:
          allOf:
          - $ref: '#/components/schemas/TestSetGenerationStatus'
          - description: The status for the test set generation.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          - description: The reasons the test set generation failed.
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the test set created for the generated
              test set.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The test set name for the generated test set.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The test set description for the test set generation.
        storageLocation:
          $ref: '#/components/schemas/DescribeTestSetGenerationResponse_storageLocation'
        generationDataSource:
          $ref: '#/components/schemas/DescribeTestSetGenerationResponse_generationDataSource'
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: ' The roleARN of the test set used for the test set generation.'
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The creation date and time for the test set generation.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time of the last update for the test set generation.
      type: object
    GetTestExecutionArtifactsUrlResponse:
      example:
        testExecutionId: ""
        downloadArtifactsUrl: ""
      properties:
        testExecutionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the completed test execution.
        downloadArtifactsUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          - description: The pre-signed Amazon S3 URL to download completed test execution.
      type: object
    ListAggregatedUtterancesResponse:
      example:
        aggregatedUtterancesSummaries: ""
        botAliasId: ""
        aggregationWindowStartTime: ""
        nextToken: ""
        aggregationWindowEndTime: ""
        botId: ""
        aggregationLastRefreshedDateTime: ""
        aggregationDuration:
          relativeAggregationDuration:
            timeDimension: ""
            timeValue: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that contains the utterances.
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: "The identifier of the bot alias that contains the utterances.\
              \ If you specified the bot version, the bot alias ID isn't returned."
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: "The identifier of the bot version that contains the utterances.\
              \ If you specified the bot alias, the bot version isn't returned."
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The identifier of the language and locale that the utterances
              are in.
        aggregationDuration:
          $ref: '#/components/schemas/ListAggregatedUtterancesResponse_aggregationDuration'
        aggregationWindowStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the aggregation window begins. Only
              data collected after this time is returned in the results.
        aggregationWindowEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: 'The date and time that the aggregation window ends. Only
              data collected between the start time and the end time are returned
              in the results. '
        aggregationLastRefreshedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "<p>The last date and time that the aggregated data was collected.\
              \ The time period depends on the length of the aggregation window.</p>\
              \ <ul> <li> <p> <b>Hours</b> - for 1 hour time window, every half hour;\
              \ otherwise every hour.</p> </li> <li> <p> <b>Days</b> - every 6 hours</p>\
              \ </li> <li> <p> <b>Weeks</b> - for a one week time window, every 12\
              \ hours; otherwise, every day</p> </li> </ul>"
        aggregatedUtterancesSummaries:
          allOf:
          - $ref: '#/components/schemas/AggregatedUtterancesSummaryList'
          - description: "Summaries of the aggregated utterance data. Each response\
              \ contains information about the number of times that the utterance\
              \ was seen during the time period, whether it was detected or missed,\
              \ and when it was seen during the time period."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListAggregatedUtterances</code>\
              \ operation. If the <code>nextToken</code> field is present, you send\
              \ the contents as the <code>nextToken</code> parameter of a <code>ListAggregatedUtterances</code>\
              \ operation request to get the next page of results."
      type: object
    RelativeAggregationDuration:
      description: "<p>Specifies the time window that utterance statistics are returned\
        \ for. The time window is always relative to the last time that the that utterances\
        \ were aggregated. For example, if the <code>ListAggregatedUtterances</code>\
        \ operation is called at 1600, the time window is set to 1 hour, and the last\
        \ refresh time was 1530, only utterances made between 1430 and 1530 are returned.</p>\
        \ <p>You can choose the time window that statistics should be returned for.</p>\
        \ <ul> <li> <p> <b>Hours</b> - You can request utterance statistics for 1,\
        \ 3, 6, 12, or 24 hour time windows. Statistics are refreshed every half hour\
        \ for 1 hour time windows, and hourly for the other time windows.</p> </li>\
        \ <li> <p> <b>Days</b> - You can request utterance statistics for 3 days.\
        \ Statistics are refreshed every 6 hours.</p> </li> <li> <p> <b>Weeks</b>\
        \ - You can see statistics for one or two weeks. Statistics are refreshed\
        \ every 12 hours for one week time windows, and once per day for two week\
        \ time windows.</p> </li> </ul>"
      properties:
        timeDimension:
          allOf:
          - $ref: '#/components/schemas/TimeDimension'
          - description: 'The type of time period that the <code>timeValue</code>
              field represents. '
        timeValue:
          allOf:
          - $ref: '#/components/schemas/TimeValue'
          - description: <p>The period of the time window to gather statistics for.
              The valid value depends on the setting of the <code>timeDimension</code>
              field.</p> <ul> <li> <p> <code>Hours</code> - 1/3/6/12/24</p> </li>
              <li> <p> <code>Days</code> - 3</p> </li> <li> <p> <code>Weeks</code>
              - 1/2</p> </li> </ul>
      required:
      - timeDimension
      - timeValue
      type: object
    AggregatedUtterancesSortAttribute:
      enum:
      - HitCount
      - MissedCount
      type: string
    SortOrder:
      enum:
      - Ascending
      - Descending
      type: string
    AggregatedUtterancesFilter:
      description: Filters responses returned by the <code>ListAggregatedUtterances</code>
        operation.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AggregatedUtterancesFilterName'
          - description: The name of the field to filter the utterance list.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          - description: The value to use for filtering the list of bots.
        operator:
          allOf:
          - $ref: '#/components/schemas/AggregatedUtterancesFilterOperator'
          - description: The operator to use for the filter. Specify <code>EQ</code>
              when the <code>ListAggregatedUtterances</code> operation should return
              only utterances that equal the specified value. Specify <code>CO</code>
              when the <code>ListAggregatedUtterances</code> operation should return
              utterances that contain the specified value.
      required:
      - name
      - operator
      - values
      type: object
    ListBotAliasesResponse:
      example:
        botAliasSummaries: ""
        nextToken: ""
        botId: ""
      properties:
        botAliasSummaries:
          allOf:
          - $ref: '#/components/schemas/BotAliasSummaryList'
          - description: "Summary information for the bot aliases that meet the filter\
              \ criteria specified in the request. The length of the list is specified\
              \ in the <code>maxResults</code> parameter of the request. If there\
              \ are more aliases available, the <code>nextToken</code> field contains\
              \ a token to get the next page of results."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListBotAliases</code> operation.\
              \ If the <code>nextToken</code> field is present, you send the contents\
              \ as the <code>nextToken</code> parameter of a <code>ListBotAliases</code>\
              \ operation request to get the next page of results."
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot associated with the aliases.
      type: object
    ListBotLocalesResponse:
      example:
        botLocaleSummaries: ""
        nextToken: ""
        botId: ""
        botVersion: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot to list locales for.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListBotLocales</code> operation.\
              \ If the <code>nextToken</code> field is present, you send the contents\
              \ as the <code>nextToken</code> parameter of a <code>ListBotLocales</code>\
              \ operation request to get the next page of results."
        botLocaleSummaries:
          allOf:
          - $ref: '#/components/schemas/BotLocaleSummaryList'
          - description: "Summary information for the locales that meet the filter\
              \ criteria specified in the request. The length of the list is specified\
              \ in the <code>maxResults</code> parameter of the request. If there\
              \ are more locales available, the <code>nextToken</code> field contains\
              \ a token to get the next page of results."
      type: object
    BotLocaleSortAttribute:
      enum:
      - BotLocaleName
      type: string
    BotLocaleFilter:
      description: Filters responses returned by the <code>ListBotLocales</code> operation.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotLocaleFilterName'
          - description: The name of the field to filter the list of bots.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          - description: The value to use for filtering the list of bots.
        operator:
          allOf:
          - $ref: '#/components/schemas/BotLocaleFilterOperator'
          - description: The operator to use for the filter. Specify <code>EQ</code>
              when the <code>ListBotLocales</code> operation should return only aliases
              that equal the specified value. Specify <code>CO</code> when the <code>ListBotLocales</code>
              operation should return aliases that contain the specified value.
      required:
      - name
      - operator
      - values
      type: object
    ListBotRecommendationsResponse:
      example:
        nextToken: ""
        botId: ""
        botVersion: ""
        localeId: ""
        botRecommendationSummaries: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot that contains the bot recommendation
              list.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot that contains the bot recommendation
              list.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The identifier of the language and locale of the bot recommendation
              list.
        botRecommendationSummaries:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationSummaryList'
          - description: "Summary information for the bot recommendations that meet\
              \ the filter specified in this request. The length of the list is specified\
              \ in the maxResults parameter of the request. If there are more bot\
              \ recommendations available, the nextToken field contains a token to\
              \ get the next page of results."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the ListBotRecommendations operation. If the\
              \ nextToken field is present, you send the contents as the nextToken\
              \ parameter of a ListBotRecommendations operation request to get the\
              \ next page of results. "
      type: object
    ListBotVersionsResponse:
      example:
        botVersionSummaries: ""
        nextToken: ""
        botId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot to list versions for.
        botVersionSummaries:
          allOf:
          - $ref: '#/components/schemas/BotVersionSummaryList'
          - description: "Summary information for the bot versions that meet the filter\
              \ criteria specified in the request. The length of the list is specified\
              \ in the <code>maxResults</code> parameter of the request. If there\
              \ are more versions available, the <code>nextToken</code> field contains\
              \ a token to get the next page of results."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListBotVersions</code> operation.\
              \ If the <code>nextToken</code> field is present, you send the contents\
              \ as the <code>nextToken</code> parameter of a <code>ListBotAliases</code>\
              \ operation request to get the next page of results."
      type: object
    BotVersionSortAttribute:
      enum:
      - BotVersion
      type: string
    ListBotsResponse:
      example:
        botSummaries: ""
        nextToken: ""
      properties:
        botSummaries:
          allOf:
          - $ref: '#/components/schemas/BotSummaryList'
          - description: "Summary information for the bots that meet the filter criteria\
              \ specified in the request. The length of the list is specified in the\
              \ <code>maxResults</code> parameter of the request. If there are more\
              \ bots available, the <code>nextToken</code> field contains a token\
              \ to the next page of results."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListBots</code> operation. If the\
              \ <code>nextToken</code> field is present, you send the contents as\
              \ the <code>nextToken</code> parameter of a <code>ListBots</code> operation\
              \ request to get the next page of results."
      type: object
    BotSortAttribute:
      enum:
      - BotName
      type: string
    BotFilter:
      description: Filters the responses returned by the <code>ListBots</code> operation.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotFilterName'
          - description: The name of the field to filter the list of bots.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          - description: The value to use for filtering the list of bots.
        operator:
          allOf:
          - $ref: '#/components/schemas/BotFilterOperator'
          - description: The operator to use for the filter. Specify <code>EQ</code>
              when the <code>ListBots</code> operation should return only aliases
              that equal the specified value. Specify <code>CO</code> when the <code>ListBots</code>
              operation should return aliases that contain the specified value.
      required:
      - name
      - operator
      - values
      type: object
    ListBuiltInIntentsResponse:
      example:
        builtInIntentSummaries: ""
        nextToken: ""
        localeId: ""
      properties:
        builtInIntentSummaries:
          allOf:
          - $ref: '#/components/schemas/BuiltInIntentSummaryList'
          - description: "Summary information for the built-in intents that meet the\
              \ filter criteria specified in the request. The length of the list is\
              \ specified in the <code>maxResults</code> parameter of the request.\
              \ If there are more intents available, the <code>nextToken</code> field\
              \ contains a token to get the next page of results."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListBuiltInIntents</code> operation.\
              \ If the <code>nextToken</code> field is present, you send the contents\
              \ as the <code>nextToken</code> parameter of a <code>ListBotAliases</code>\
              \ operation request to get the next page of results."
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and locale of the intents in the list.
      type: object
    BuiltInIntentSortAttribute:
      enum:
      - IntentSignature
      type: string
    ListBuiltInSlotTypesResponse:
      example:
        builtInSlotTypeSummaries: ""
        nextToken: ""
        localeId: ""
      properties:
        builtInSlotTypeSummaries:
          allOf:
          - $ref: '#/components/schemas/BuiltInSlotTypeSummaryList'
          - description: "Summary information for the built-in slot types that meet\
              \ the filter criteria specified in the request. The length of the list\
              \ is specified in the <code>maxResults</code> parameter of the request.\
              \ If there are more slot types available, the <code>nextToken</code>\
              \ field contains a token to get the next page of results."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListBuiltInSlotTypes</code> operation.\
              \ If the <code>nextToken</code> field is present, you send the contents\
              \ as the <code>nextToken</code> parameter of a <code>LIstBuiltInSlotTypes</code>\
              \ operation request to get the next page of results."
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and locale of the slot types in the list.
      type: object
    BuiltInSlotTypeSortAttribute:
      enum:
      - SlotTypeSignature
      type: string
    ListCustomVocabularyItemsResponse:
      example:
        customVocabularyItems: ""
        nextToken: ""
        botId: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot associated with this custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The identifier of the version of the bot associated with
              this custom vocabulary.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "The identifier of the language and locale where this custom\
              \ vocabulary is used. The string must match one of the supported locales.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
              > Supported Languages </a>."
        customVocabularyItems:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyItems'
          - description: The custom vocabulary items from the list custom vocabulary
              response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The nextToken identifier to the list custom vocabulary response.
      type: object
    ListExportsResponse:
      example:
        nextToken: ""
        botId: ""
        exportSummaries: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier assigned to the bot by Amazon Lex.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot that was exported.
        exportSummaries:
          allOf:
          - $ref: '#/components/schemas/ExportSummaryList'
          - description: "Summary information for the exports that meet the filter\
              \ criteria specified in the request. The length of the list is specified\
              \ in the <code>maxResults</code> parameter. If there are more exports\
              \ available, the <code>nextToken</code> field contains a token to get\
              \ the next page of results."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListExports</code> operation. If\
              \ the <code>nextToken</code> field is present, you send the contents\
              \ as the <code>nextToken</code> parameter of a <code>ListExports</code>\
              \ operation request to get the next page of results."
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The locale specified in the request.
      type: object
    ExportSortAttribute:
      enum:
      - LastUpdatedDateTime
      type: string
    ExportFilter:
      description: Filters the response form the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListExports.html">ListExports</a>
        operation
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ExportFilterName'
          - description: The name of the field to use for filtering.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          - description: "The values to use to filter the response. The values must\
              \ be <code>Bot</code>, <code>BotLocale</code>, or <code>CustomVocabulary</code>."
        operator:
          allOf:
          - $ref: '#/components/schemas/ExportFilterOperator'
          - description: The operator to use for the filter. Specify EQ when the <code>ListExports</code>
              operation should return only resource types that equal the specified
              value. Specify CO when the <code>ListExports</code> operation should
              return resource types that contain the specified value.
      required:
      - name
      - operator
      - values
      type: object
    ListImportsResponse:
      example:
        nextToken: ""
        botId: ""
        importSummaries: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier assigned by Amazon Lex to the bot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot that was imported. It will always
              be <code>DRAFT</code>.
        importSummaries:
          allOf:
          - $ref: '#/components/schemas/ImportSummaryList'
          - description: "Summary information for the imports that meet the filter\
              \ criteria specified in the request. The length of the list is specified\
              \ in the <code>maxResults</code> parameter. If there are more imports\
              \ available, the <code>nextToken</code> field contains a token to get\
              \ the next page of results."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListImports</code> operation. If\
              \ the <code>nextToken</code> field is present, you send the contents\
              \ as the <code>nextToken</code> parameter of a <code>ListImports</code>\
              \ operation request to get the next page of results."
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The locale specified in the request.
      type: object
    ImportSortAttribute:
      enum:
      - LastUpdatedDateTime
      type: string
    ImportFilter:
      description: Filters the response from the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListImports.html">ListImports</a>
        operation.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ImportFilterName'
          - description: The name of the field to use for filtering.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          - description: "The values to use to filter the response. The values must\
              \ be <code>Bot</code>, <code>BotLocale</code>, or <code>CustomVocabulary</code>."
        operator:
          allOf:
          - $ref: '#/components/schemas/ImportFilterOperator'
          - description: The operator to use for the filter. Specify EQ when the <code>ListImports</code>
              operation should return only resource types that equal the specified
              value. Specify CO when the <code>ListImports</code> operation should
              return resource types that contain the specified value.
      required:
      - name
      - operator
      - values
      type: object
    ListIntentMetricsResponse:
      example:
        nextToken: ""
        botId: ""
        results: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier for the bot for which you retrieved intent
              metrics.
        results:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentResults'
          - description: The results for the intent metrics.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the ListIntentMetrics operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response.</p> <p>Use the returned token\
              \ in the nextToken parameter of a ListIntentMetrics request to return\
              \ the next page of results. For a complete set of results, call the\
              \ ListIntentMetrics operation until the nextToken returned in the response\
              \ is null.</p>"
      type: object
    AnalyticsIntentMetric:
      description: "Contains the metric and the summary statistic you want to calculate,\
        \ and the order in which to sort the results, for the intents in the bot."
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentMetricName'
          - description: <p>The metric for which you want to get intent summary statistics.</p>
              <ul> <li> <p> <code>Count</code> – The number of times the intent was
              invoked.</p> </li> <li> <p> <code>Success</code> – The number of times
              the intent succeeded.</p> </li> <li> <p> <code>Failure</code> – The
              number of times the intent failed.</p> </li> <li> <p> <code>Switched</code>
              – The number of times there was a switch to a different intent.</p>
              </li> <li> <p> <code>Dropped</code> – The number of times the user dropped
              the intent.</p> </li> </ul>
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          - description: <p>The summary statistic to calculate.</p> <ul> <li> <p>
              <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p>
              </li> <li> <p> <code>Average</code> – The total count divided by the
              number of intents in the category you provide in <code>name</code>.</p>
              </li> <li> <p> <code>Max</code> – The highest count in the category
              you provide in <code>name</code>.</p> </li> </ul>
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          - description: Specifies whether to sort the results in ascending or descending
              order.
      required:
      - name
      - statistic
      type: object
    AnalyticsBinBySpecification:
      description: "Contains the time metric, interval, and method by which to bin\
        \ the analytics data."
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinByName'
          - description: Specifies the time metric by which to bin the analytics data.
        interval:
          allOf:
          - $ref: '#/components/schemas/AnalyticsInterval'
          - description: Specifies the interval of time by which to bin the analytics
              data.
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          - description: "Specifies whether to bin the analytics data in ascending\
              \ or descending order. If this field is left blank, the default order\
              \ is by the key of the bin in descending order."
      required:
      - interval
      - name
      type: object
    AnalyticsIntentGroupBySpecification:
      description: Contains the category by which to group the intents.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentField'
          - description: Specifies whether to group the intent stages by their name
              or their end state.
      required:
      - name
      type: object
    AnalyticsIntentFilter:
      description: "<p>Contains fields describing a condition by which to filter the\
        \ intents. The expression may be understood as <code>name</code> <code>operator</code>\
        \ <code>values</code>. For example:</p> <ul> <li> <p> <code>IntentName CO\
        \ Book</code> – The intent name contains the string \"Book.\"</p> </li> <li>\
        \ <p> <code>BotVersion EQ 2</code> – The bot version is equal to two.</p>\
        \ </li> </ul> <p>The operators that each filter supports are listed below:</p>\
        \ <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li> <p>\
        \ <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code>\
        \ – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p>\
        \ </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> <li> <p>\
        \ <code>SessionId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code>\
        \ – <code>EQ</code>.</p> </li> <li> <p> <code>IntentName</code> – <code>EQ</code>,\
        \ <code>CO</code>.</p> </li> <li> <p> <code>IntentEndState</code> – <code>EQ</code>,\
        \ <code>CO</code>.</p> </li> </ul>"
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentFilterName'
          - description: "<p>The category by which to filter the intents. The descriptions\
              \ for each option are as follows:</p> <ul> <li> <p> <code>BotAlias</code>\
              \ – The name of the bot alias.</p> </li> <li> <p> <code>BotVersion</code>\
              \ – The version of the bot.</p> </li> <li> <p> <code>LocaleId</code>\
              \ – The locale of the bot.</p> </li> <li> <p> <code>Modality</code>\
              \ – The modality of the session with the bot (audio, DTMF, or text).</p>\
              \ </li> <li> <p> <code>Channel</code> – The channel that the bot is\
              \ integrated with.</p> </li> <li> <p> <code>SessionId</code> – The identifier\
              \ of the session with the bot.</p> </li> <li> <p> <code>OriginatingRequestId</code>\
              \ – The identifier of the first request in a session.</p> </li> <li>\
              \ <p> <code>IntentName</code> – The name of the intent.</p> </li> <li>\
              \ <p> <code>IntentEndState</code> – The final state of the intent.</p>\
              \ </li> </ul>"
        operator:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterOperator'
          - description: "<p>The operation by which to filter the category. The following\
              \ operations are possible:</p> <ul> <li> <p> <code>CO</code> – Contains</p>\
              \ </li> <li> <p> <code>EQ</code> – Equals</p> </li> <li> <p> <code>GT</code>\
              \ – Greater than</p> </li> <li> <p> <code>LT</code> – Less than</p>\
              \ </li> </ul> <p>The operators that each filter supports are listed\
              \ below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p>\
              \ </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li>\
              \ <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p>\
              \ <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code>\
              \ – <code>EQ</code>.</p> </li> <li> <p> <code>SessionId</code> – <code>EQ</code>.</p>\
              \ </li> <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p>\
              \ </li> <li> <p> <code>IntentName</code> – <code>EQ</code>, <code>CO</code>.</p>\
              \ </li> <li> <p> <code>IntentEndState</code> – <code>EQ</code>, <code>CO</code>.</p>\
              \ </li> </ul>"
        values:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterValues'
          - description: "An array containing the values of the category by which\
              \ to apply the operator to filter the results. You can provide multiple\
              \ values if the operator is <code>EQ</code> or <code>CO</code>. If you\
              \ provide multiple values, you filter for results that equal/contain\
              \ any of the values. For example, if the <code>name</code>, <code>operator</code>,\
              \ and <code>values</code> fields are <code>Modality</code>, <code>EQ</code>,\
              \ and <code>[Speech, Text]</code>, the operation filters for results\
              \ where the modality was either <code>Speech</code> or <code>Text</code>."
      required:
      - name
      - operator
      - values
      type: object
    ListIntentPathsResponse:
      example:
        nodeSummaries: ""
      properties:
        nodeSummaries:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentNodeSummaries'
          - description: "A list of objects, each of which contains information about\
              \ a node in the intent path for which you requested metrics."
      type: object
    AnalyticsPathFilter:
      description: <p>Contains fields describing a condition by which to filter the
        paths. The expression may be understood as <code>name</code> <code>operator</code>
        <code>values</code>. For example:</p> <ul> <li> <p> <code>LocaleId EQ en</code>
        – The locale is "en".</p> </li> <li> <p> <code>BotVersion EQ 2</code> – The
        bot version is equal to two.</p> </li> </ul> <p>The operators that each filter
        supports are listed below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p>
        </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p>
        <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code>
        – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p>
        </li> </ul>
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsCommonFilterName'
          - description: "<p>The category by which to filter the intent paths. The\
              \ descriptions for each option are as follows:</p> <ul> <li> <p> <code>BotAlias</code>\
              \ – The name of the bot alias.</p> </li> <li> <p> <code>BotVersion</code>\
              \ – The version of the bot.</p> </li> <li> <p> <code>LocaleId</code>\
              \ – The locale of the bot.</p> </li> <li> <p> <code>Modality</code>\
              \ – The modality of the session with the bot (audio, DTMF, or text).</p>\
              \ </li> <li> <p> <code>Channel</code> – The channel that the bot is\
              \ integrated with.</p> </li> </ul>"
        operator:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterOperator'
          - description: <p>The operation by which to filter the category. The following
              operations are possible:</p> <ul> <li> <p> <code>CO</code> – Contains</p>
              </li> <li> <p> <code>EQ</code> – Equals</p> </li> <li> <p> <code>GT</code>
              – Greater than</p> </li> <li> <p> <code>LT</code> – Less than</p> </li>
              </ul> <p>The operators that each filter supports are listed below:</p>
              <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li>
              <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code>
              – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p>
              </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> </ul>
        values:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterValues'
          - description: "An array containing the values of the category by which\
              \ to apply the operator to filter the results. You can provide multiple\
              \ values if the operator is <code>EQ</code> or <code>CO</code>. If you\
              \ provide multiple values, you filter for results that equal/contain\
              \ any of the values. For example, if the <code>name</code>, <code>operator</code>,\
              \ and <code>values</code> fields are <code>Modality</code>, <code>EQ</code>,\
              \ and <code>[Speech, Text]</code>, the operation filters for results\
              \ where the modality was either <code>Speech</code> or <code>Text</code>."
      required:
      - name
      - operator
      - values
      type: object
    ListIntentStageMetricsResponse:
      example:
        nextToken: ""
        botId: ""
        results: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier for the bot for which you retrieved intent
              stage metrics.
        results:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageResults'
          - description: The results for the intent stage metrics.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the ListIntentStageMetrics operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response.</p> <p>Use the returned token\
              \ in the nextToken parameter of a ListIntentStageMetrics request to\
              \ return the next page of results. For a complete set of results, call\
              \ the ListIntentStageMetrics operation until the nextToken returned\
              \ in the response is null.</p>"
      type: object
    AnalyticsIntentStageMetric:
      description: "Contains the metric and the summary statistic you want to calculate,\
        \ and the order in which to sort the results, for the intent stages across\
        \ the user sessions with the bot."
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageMetricName'
          - description: <p>The metric for which you want to get intent stage summary
              statistics. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/analytics-key-definitions.html">Key
              definitions</a> for more details about these metrics.</p> <ul> <li>
              <p> <code>Count</code> – The number of times the intent stage occurred.</p>
              </li> <li> <p> <code>Success</code> – The number of times the intent
              stage succeeded.</p> </li> <li> <p> <code>Failure</code> – The number
              of times the intent stage failed.</p> </li> <li> <p> <code>Dropped</code>
              – The number of times the user dropped the intent stage.</p> </li> <li>
              <p> <code>Retry</code> – The number of times the bot tried to elicit
              a response from the user at this stage.</p> </li> </ul>
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          - description: <p>The summary statistic to calculate.</p> <ul> <li> <p>
              <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p>
              </li> <li> <p> <code>Average</code> – The total count divided by the
              number of intent stages in the category you provide in <code>name</code>.</p>
              </li> <li> <p> <code>Max</code> – The highest count in the category
              you provide in <code>name</code>.</p> </li> </ul>
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          - description: Specifies whether to sort the results in ascending or descending
              order of the summary statistic (<code>value</code> in the response).
      required:
      - name
      - statistic
      type: object
    AnalyticsIntentStageGroupBySpecification:
      description: Contains the category by which to group the intent stages.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageField'
          - description: Specifies whether to group the intent stages by their name
              or the intent to which the session was switched.
      required:
      - name
      type: object
    AnalyticsIntentStageFilter:
      description: "<p>Contains fields describing a condition by which to filter the\
        \ intent stages. The expression may be understood as <code>name</code> <code>operator</code>\
        \ <code>values</code>. For example:</p> <ul> <li> <p> <code>IntentName CO\
        \ Book</code> – The intent name contains the string \"Book.\"</p> </li> <li>\
        \ <p> <code>BotVersion EQ 2</code> – The bot version is equal to two.</p>\
        \ </li> </ul> <p>The operators that each filter supports are listed below:</p>\
        \ <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li> <p>\
        \ <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code>\
        \ – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p>\
        \ </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> <li> <p>\
        \ <code>SessionId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code>\
        \ – <code>EQ</code>.</p> </li> <li> <p> <code>IntentName</code> – <code>EQ</code>,\
        \ <code>CO</code>.</p> </li> <li> <p> <code>IntentStageName</code> – <code>EQ</code>,\
        \ <code>CO</code>.</p> </li> </ul>"
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageFilterName'
          - description: "<p>The category by which to filter the intent stages. The\
              \ descriptions for each option are as follows:</p> <ul> <li> <p> <code>BotAlias</code>\
              \ – The name of the bot alias.</p> </li> <li> <p> <code>BotVersion</code>\
              \ – The version of the bot.</p> </li> <li> <p> <code>LocaleId</code>\
              \ – The locale of the bot.</p> </li> <li> <p> <code>Modality</code>\
              \ – The modality of the session with the bot (audio, DTMF, or text).</p>\
              \ </li> <li> <p> <code>Channel</code> – The channel that the bot is\
              \ integrated with.</p> </li> <li> <p> <code>SessionId</code> – The identifier\
              \ of the session with the bot.</p> </li> <li> <p> <code>OriginatingRequestId</code>\
              \ – The identifier of the first request in a session.</p> </li> <li>\
              \ <p> <code>IntentName</code> – The name of the intent.</p> </li> <li>\
              \ <p> <code>IntentStageName</code> – The stage in the intent.</p> </li>\
              \ </ul>"
        operator:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterOperator'
          - description: "<p>The operation by which to filter the category. The following\
              \ operations are possible:</p> <ul> <li> <p> <code>CO</code> – Contains</p>\
              \ </li> <li> <p> <code>EQ</code> – Equals</p> </li> <li> <p> <code>GT</code>\
              \ – Greater than</p> </li> <li> <p> <code>LT</code> – Less than</p>\
              \ </li> </ul> <p>The operators that each filter supports are listed\
              \ below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p>\
              \ </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li>\
              \ <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p>\
              \ <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code>\
              \ – <code>EQ</code>.</p> </li> <li> <p> <code>SessionId</code> – <code>EQ</code>.</p>\
              \ </li> <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p>\
              \ </li> <li> <p> <code>IntentName</code> – <code>EQ</code>, <code>CO</code>.</p>\
              \ </li> <li> <p> <code>IntentStageName</code> – <code>EQ</code>, <code>CO</code>.</p>\
              \ </li> </ul>"
        values:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterValues'
          - description: "An array containing the values of the category by which\
              \ to apply the operator to filter the results. You can provide multiple\
              \ values if the operator is <code>EQ</code> or <code>CO</code>. If you\
              \ provide multiple values, you filter for results that equal/contain\
              \ any of the values. For example, if the <code>name</code>, <code>operator</code>,\
              \ and <code>values</code> fields are <code>Modality</code>, <code>EQ</code>,\
              \ and <code>[Speech, Text]</code>, the operation filters for results\
              \ where the modality was either <code>Speech</code> or <code>Text</code>."
      required:
      - name
      - operator
      - values
      type: object
    ListIntentsResponse:
      example:
        intentSummaries: ""
        nextToken: ""
        botId: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that contains the intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot that contains the intent.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and locale of the intents in the list.
        intentSummaries:
          allOf:
          - $ref: '#/components/schemas/IntentSummaryList'
          - description: "Summary information for the intents that meet the filter\
              \ criteria specified in the request. The length of the list is specified\
              \ in the <code>maxResults</code> parameter of the request. If there\
              \ are more intents available, the <code>nextToken</code> field contains\
              \ a token to get the next page of results."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListIntents</code> operation. If\
              \ the <code>nextToken</code> field is present, you send the contents\
              \ as the <code>nextToken</code> parameter of a <code>ListIntents</code>\
              \ operation request to get the next page of results."
      type: object
    IntentSortAttribute:
      enum:
      - IntentName
      - LastUpdatedDateTime
      type: string
    IntentFilter:
      description: Filters the response from the <code>ListIntents</code> operation.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentFilterName'
          - description: The name of the field to use for the filter.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          - description: The value to use for the filter.
        operator:
          allOf:
          - $ref: '#/components/schemas/IntentFilterOperator'
          - description: The operator to use for the filter. Specify <code>EQ</code>
              when the <code>ListIntents</code> operation should return only aliases
              that equal the specified value. Specify <code>CO</code> when the <code>ListIntents</code>
              operation should return aliases that contain the specified value.
      required:
      - name
      - operator
      - values
      type: object
    ListRecommendedIntentsResponse:
      example:
        summaryList: ""
        nextToken: ""
        botId: ""
        botRecommendationId: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot associated with the recommended
              intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot that contains the intent.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "The identifier of the language and locale of the intents\
              \ to list. The string must match one of the supported locales. For more\
              \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
              >Supported languages</a>."
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot recommendation that contains the
              recommended intent.
        summaryList:
          allOf:
          - $ref: '#/components/schemas/RecommendedIntentSummaryList'
          - description: "Summary information for the intents that meet the filter\
              \ criteria specified in the request. The length of the list is specified\
              \ in the maxResults parameter of the request. If there are more intents\
              \ available, the nextToken field contains a token to get the next page\
              \ of results."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the ListRecommendedIntents operation. If the\
              \ nextToken field is present, you send the contents as the nextToken\
              \ parameter of a ListRecommendedIntents operation request to get the\
              \ next page of results."
      type: object
    ListSessionAnalyticsDataResponse:
      example:
        sessions: ""
        nextToken: ""
        botId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot that the sessions belong
              to.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the ListSessionAnalyticsData operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response.</p> <p>Use the returned token\
              \ in the nextToken parameter of a ListSessionAnalyticsData request to\
              \ return the next page of results. For a complete set of results, call\
              \ the ListSessionAnalyticsData operation until the nextToken returned\
              \ in the response is null.</p>"
        sessions:
          allOf:
          - $ref: '#/components/schemas/SessionSpecifications'
          - description: "A list of objects, each of which contains information about\
              \ a session with the bot."
      type: object
    AnalyticsSessionSortByName:
      enum:
      - ConversationStartTime
      - NumberOfTurns
      - Duration
      type: string
    AnalyticsSortOrder:
      enum:
      - Ascending
      - Descending
      type: string
    AnalyticsSessionFilter:
      description: "<p>Contains fields describing a condition by which to filter the\
        \ sessions. The expression may be understood as <code>name</code> <code>operator</code>\
        \ <code>values</code>. For example:</p> <ul> <li> <p> <code>LocaleId EQ en</code>\
        \ – The locale is \"en\".</p> </li> <li> <p> <code>Duration GT 200</code>\
        \ – The duration is greater than 200 seconds.</p> </li> </ul> <p>The operators\
        \ that each filter supports are listed below:</p> <ul> <li> <p> <code>BotAlias</code>\
        \ – <code>EQ</code>.</p> </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p>\
        \ </li> <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p>\
        \ <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code>\
        \ – <code>EQ</code>.</p> </li> <li> <p> <code>Duration</code> – <code>EQ</code>,\
        \ <code>GT</code>, <code>LT</code>.</p> </li> <li> <p> <code>conversationEndState</code>\
        \ – <code>EQ</code>, <code>CO</code>.</p> </li> <li> <p> <code>SessionId</code>\
        \ – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code>\
        \ – <code>EQ</code>.</p> </li> <li> <p> <code>IntentPath</code> – <code>EQ</code>.</p>\
        \ </li> </ul>"
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionFilterName'
          - description: "<p>The category by which to filter the sessions. The descriptions\
              \ for each option are as follows:</p> <ul> <li> <p> <code>BotAlias</code>\
              \ – The name of the bot alias.</p> </li> <li> <p> <code>BotVersion</code>\
              \ – The version of the bot.</p> </li> <li> <p> <code>LocaleId</code>\
              \ – The locale of the bot.</p> </li> <li> <p> <code>Modality</code>\
              \ – The modality of the session with the bot (audio, DTMF, or text).</p>\
              \ </li> <li> <p> <code>Channel</code> – The channel that the bot is\
              \ integrated with.</p> </li> <li> <p> <code>Duration</code> – The duration\
              \ of the session.</p> </li> <li> <p> <code>conversationEndState</code>\
              \ – The final state of the session.</p> </li> <li> <p> <code>SessionId</code>\
              \ – The identifier of the session with the bot.</p> </li> <li> <p> <code>OriginatingRequestId</code>\
              \ – The identifier of the first request in a session.</p> </li> <li>\
              \ <p> <code>IntentPath</code> – The order of intents taken in a session.</p>\
              \ </li> </ul>"
        operator:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterOperator'
          - description: "<p>The operation by which to filter the category. The following\
              \ operations are possible:</p> <ul> <li> <p> <code>CO</code> – Contains</p>\
              \ </li> <li> <p> <code>EQ</code> – Equals</p> </li> <li> <p> <code>GT</code>\
              \ – Greater than</p> </li> <li> <p> <code>LT</code> – Less than</p>\
              \ </li> </ul> <p>The operators that each filter supports are listed\
              \ below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p>\
              \ </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li>\
              \ <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p>\
              \ <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code>\
              \ – <code>EQ</code>.</p> </li> <li> <p> <code>Duration</code> – <code>EQ</code>,\
              \ <code>GT</code>, <code>LT</code>.</p> </li> <li> <p> <code>conversationEndState</code>\
              \ – <code>EQ</code>, <code>CO</code>.</p> </li> <li> <p> <code>SessionId</code>\
              \ – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code>\
              \ – <code>EQ</code>.</p> </li> <li> <p> <code>IntentPath</code> – <code>EQ</code>.</p>\
              \ </li> </ul>"
        values:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterValues'
          - description: "An array containing the values of the category by which\
              \ to apply the operator to filter the results. You can provide multiple\
              \ values if the operator is <code>EQ</code> or <code>CO</code>. If you\
              \ provide multiple values, you filter for results that equal/contain\
              \ any of the values. For example, if the <code>name</code>, <code>operator</code>,\
              \ and <code>values</code> fields are <code>Modality</code>, <code>EQ</code>,\
              \ and <code>[Speech, Text]</code>, the operation filters for results\
              \ where the modality was either <code>Speech</code> or <code>Text</code>."
      required:
      - name
      - operator
      - values
      type: object
    ListSessionMetricsResponse:
      example:
        nextToken: ""
        botId: ""
        results: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier for the bot for which you retrieved session
              metrics.
        results:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionResults'
          - description: The results for the session metrics.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the ListSessionMetrics operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response.</p> <p>Use the returned token\
              \ in the nextToken parameter of a ListSessionMetrics request to return\
              \ the next page of results. For a complete set of results, call the\
              \ ListSessionMetrics operation until the nextToken returned in the response\
              \ is null.</p>"
      type: object
    AnalyticsSessionMetric:
      description: "Contains the metric and the summary statistic you want to calculate,\
        \ and the order in which to sort the results, for the user sessions with the\
        \ bot."
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionMetricName'
          - description: <p>The metric for which you want to get session summary statistics.</p>
              <ul> <li> <p> <code>Count</code> – The number of sessions.</p> </li>
              <li> <p> <code>Success</code> – The number of sessions that succeeded.</p>
              </li> <li> <p> <code>Failure</code> – The number of sessions that failed.</p>
              </li> <li> <p> <code>Dropped</code> – The number of sessions that the
              user dropped.</p> </li> <li> <p> <code>Duration</code> – The duration
              of sessions.</p> </li> <li> <p> <code>TurnsPerSession</code> – The number
              of turns in the sessions.</p> </li> <li> <p> <code>Concurrency</code>
              – The number of sessions occurring in the same period of time.</p> </li>
              </ul>
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          - description: <p>The summary statistic to calculate.</p> <ul> <li> <p>
              <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p>
              </li> <li> <p> <code>Average</code> – The total count divided by the
              number of sessions in the category you provide in <code>name</code>.</p>
              </li> <li> <p> <code>Max</code> – The highest count in the category
              you provide in <code>name</code>.</p> </li> </ul>
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          - description: Specifies whether to sort the results in ascending or descending
              order.
      required:
      - name
      - statistic
      type: object
    AnalyticsSessionGroupBySpecification:
      description: Contains the category by which to group the sessions.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionField'
          - description: Specifies whether to group the session by their end state
              or their locale.
      required:
      - name
      type: object
    ListSlotTypesResponse:
      example:
        nextToken: ""
        slotTypeSummaries: ""
        botId: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that contains the slot types.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot that contains the slot types.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and local of the slot types in the list.
        slotTypeSummaries:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSummaryList'
          - description: "Summary information for the slot types that meet the filter\
              \ criteria specified in the request. The length of the list is specified\
              \ in the <code>maxResults</code> parameter of the request. If there\
              \ are more slot types available, the <code>nextToken</code> field contains\
              \ a token to get the next page of results."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListSlotTypes</code> operation.\
              \ If the <code>nextToken</code> field is present, you send the contents\
              \ as the <code>nextToken</code> parameter of a <code>ListSlotTypes</code>\
              \ operation request to get the next page of results."
      type: object
    SlotTypeSortAttribute:
      enum:
      - SlotTypeName
      - LastUpdatedDateTime
      type: string
    SlotTypeFilter:
      description: Filters the response from the <code>ListSlotTypes</code> operation.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeFilterName'
          - description: The name of the field to use for filtering.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          - description: The value to use to filter the response.
        operator:
          allOf:
          - $ref: '#/components/schemas/SlotTypeFilterOperator'
          - description: The operator to use for the filter. Specify <code>EQ</code>
              when the <code>ListSlotTypes</code> operation should return only aliases
              that equal the specified value. Specify <code>CO</code> when the <code>ListSlotTypes</code>
              operation should return aliases that contain the specified value.
      required:
      - name
      - operator
      - values
      type: object
    ListSlotsResponse:
      example:
        nextToken: ""
        intentId: ""
        botId: ""
        slotSummaries: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that contains the slots.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot that contains the slots.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and locale of the slots in the list.
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the intent that contains the slots.
        slotSummaries:
          allOf:
          - $ref: '#/components/schemas/SlotSummaryList'
          - description: "Summary information for the slots that meet the filter criteria\
              \ specified in the request. The length of the list is specified in the\
              \ <code>maxResults</code> parameter of the request. If there are more\
              \ slots available, the <code>nextToken</code> field contains a token\
              \ to get the next page of results."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListSlots</code> operation. If the\
              \ <code>nextToken</code> field is present, you send the contents as\
              \ the <code>nextToken</code> parameter of a <code>ListSlots</code> operation\
              \ request to get the next page of results."
      type: object
    SlotSortAttribute:
      enum:
      - SlotName
      - LastUpdatedDateTime
      type: string
    SlotFilter:
      description: Filters the response from the <code>ListSlots</code> operation.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotFilterName'
          - description: The name of the field to use for filtering.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          - description: The value to use to filter the response.
        operator:
          allOf:
          - $ref: '#/components/schemas/SlotFilterOperator'
          - description: The operator to use for the filter. Specify <code>EQ</code>
              when the <code>ListSlots</code> operation should return only aliases
              that equal the specified value. Specify <code>CO</code> when the <code>ListSlots</code>
              operation should return aliases that contain the specified value.
      required:
      - name
      - operator
      - values
      type: object
    ListTagsForResourceResponse:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: The tags associated with a resource.
      type: object
    ListTestExecutionResultItemsResponse:
      example:
        nextToken: ""
        testExecutionResults:
          utteranceLevelTestResults:
            items: ""
          overallTestResults:
            items: ""
          intentLevelSlotResolutionTestResults:
            items: ""
          conversationLevelTestResults:
            items: ""
          intentClassificationTestResults:
            items: ""
      properties:
        testExecutionResults:
          $ref: '#/components/schemas/ListTestExecutionResultItemsResponse_testExecutionResults'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the <code>ListTestExecutionResultItems</code>\
              \ operation. If the <code>nextToken</code> field is present, you send\
              \ the contents as the <code>nextToken</code> parameter of a <code>ListTestExecutionResultItems</code>\
              \ operation request to get the next page of results."
      type: object
    TestResultTypeFilter:
      enum:
      - OverallTestResults
      - ConversationLevelTestResults
      - IntentClassificationTestResults
      - SlotResolutionTestResults
      - UtteranceLevelResults
      type: string
    ConversationLevelTestResultsFilterBy:
      description: The selection to filter the test set results data at the conversation
        level.
      properties:
        endToEndResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          - description: The selection of matched or mismatched end-to-end status
              to filter test set results data at the conversation level.
      type: object
    ListTestExecutionsResponse:
      example:
        testExecutions: ""
        nextToken: ""
      properties:
        testExecutions:
          allOf:
          - $ref: '#/components/schemas/TestExecutionSummaryList'
          - description: The list of test executions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the ListTestExecutions operation. If the nextToken\
              \ field is present, you send the contents as the nextToken parameter\
              \ of a ListTestExecutions operation request to get the next page of\
              \ results."
      type: object
    TestExecutionSortAttribute:
      enum:
      - TestSetName
      - CreationDateTime
      type: string
    ListTestSetRecordsResponse:
      example:
        testSetRecords: ""
        nextToken: ""
      properties:
        testSetRecords:
          allOf:
          - $ref: '#/components/schemas/TestSetTurnRecordList'
          - description: The list of records from the test set.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more records to\
              \ return in a response to the ListTestSetRecords operation. If the nextToken\
              \ field is present, you send the contents as the nextToken parameter\
              \ of a ListTestSetRecords operation request to get the next page of\
              \ records."
      type: object
    ListTestSetsResponse:
      example:
        nextToken: ""
        testSets: ""
      properties:
        testSets:
          allOf:
          - $ref: '#/components/schemas/TestSetSummaryList'
          - description: The selected test sets in a list of test sets.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A token that indicates whether there are more results to\
              \ return in a response to the ListTestSets operation. If the nextToken\
              \ field is present, you send the contents as the nextToken parameter\
              \ of a ListTestSets operation request to get the next page of results."
      type: object
    TestSetSortAttribute:
      enum:
      - TestSetName
      - LastUpdatedDateTime
      type: string
    ListUtteranceAnalyticsDataResponse:
      example:
        utterances: ""
        nextToken: ""
        botId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot that the utterances belong
              to.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the ListUtteranceAnalyticsData operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response.</p> <p>Use the returned token\
              \ in the nextToken parameter of a ListUtteranceAnalyticsData request\
              \ to return the next page of results. For a complete set of results,\
              \ call the ListUtteranceAnalyticsData operation until the nextToken\
              \ returned in the response is null.</p>"
        utterances:
          allOf:
          - $ref: '#/components/schemas/UtteranceSpecifications'
          - description: "A list of objects, each of which contains information about\
              \ an utterance in a user session with your bot."
      type: object
    AnalyticsUtteranceSortByName:
      enum:
      - UtteranceTimestamp
      type: string
    AnalyticsUtteranceFilter:
      description: "<p>Contains fields describing a condition by which to filter the\
        \ utterances. The expression may be understood as <code>name</code> <code>operator</code>\
        \ <code>values</code>. For example:</p> <ul> <li> <p> <code>LocaleId EQ Book</code>\
        \ – The locale is the string \"en\".</p> </li> <li> <p> <code>UtteranceText\
        \ CO help</code> – The text of the utterance contains the string \"help\"\
        .</p> </li> </ul> <p>The operators that each filter supports are listed below:</p>\
        \ <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li> <p>\
        \ <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code>\
        \ – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p>\
        \ </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> <li> <p>\
        \ <code>SessionId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code>\
        \ – <code>EQ</code>.</p> </li> <li> <p> <code>UtteranceState</code> – <code>EQ</code>.</p>\
        \ </li> <li> <p> <code>UtteranceText</code> – <code>EQ</code>, <code>CO</code>.</p>\
        \ </li> </ul>"
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceFilterName'
          - description: "<p>The category by which to filter the utterances. The descriptions\
              \ for each option are as follows:</p> <ul> <li> <p> <code>BotAlias</code>\
              \ – The name of the bot alias.</p> </li> <li> <p> <code>BotVersion</code>\
              \ – The version of the bot.</p> </li> <li> <p> <code>LocaleId</code>\
              \ – The locale of the bot.</p> </li> <li> <p> <code>Modality</code>\
              \ – The modality of the session with the bot (audio, DTMF, or text).</p>\
              \ </li> <li> <p> <code>Channel</code> – The channel that the bot is\
              \ integrated with.</p> </li> <li> <p> <code>SessionId</code> – The identifier\
              \ of the session with the bot.</p> </li> <li> <p> <code>OriginatingRequestId</code>\
              \ – The identifier of the first request in a session.</p> </li> <li>\
              \ <p> <code>UtteranceState</code> – The state of the utterance.</p>\
              \ </li> <li> <p> <code>UtteranceText</code> – The text in the utterance.</p>\
              \ </li> </ul>"
        operator:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterOperator'
          - description: "<p>The operation by which to filter the category. The following\
              \ operations are possible:</p> <ul> <li> <p> <code>CO</code> – Contains</p>\
              \ </li> <li> <p> <code>EQ</code> – Equals</p> </li> <li> <p> <code>GT</code>\
              \ – Greater than</p> </li> <li> <p> <code>LT</code> – Less than</p>\
              \ </li> </ul> <p>The operators that each filter supports are listed\
              \ below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p>\
              \ </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li>\
              \ <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p>\
              \ <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code>\
              \ – <code>EQ</code>.</p> </li> <li> <p> <code>SessionId</code> – <code>EQ</code>.</p>\
              \ </li> <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p>\
              \ </li> <li> <p> <code>UtteranceState</code> – <code>EQ</code>.</p>\
              \ </li> <li> <p> <code>UtteranceText</code> – <code>EQ</code>, <code>CO</code>.</p>\
              \ </li> </ul>"
        values:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterValues'
          - description: "An array containing the values of the category by which\
              \ to apply the operator to filter the results. You can provide multiple\
              \ values if the operator is <code>EQ</code> or <code>CO</code>. If you\
              \ provide multiple values, you filter for results that equal/contain\
              \ any of the values. For example, if the <code>name</code>, <code>operator</code>,\
              \ and <code>values</code> fields are <code>Modality</code>, <code>EQ</code>,\
              \ and <code>[Speech, Text]</code>, the operation filters for results\
              \ where the modality was either <code>Speech</code> or <code>Text</code>."
      required:
      - name
      - operator
      - values
      type: object
    ListUtteranceMetricsResponse:
      example:
        nextToken: ""
        botId: ""
        results: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier for the bot for which you retrieved utterance
              metrics.
        results:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceResults'
          - description: The results for the utterance metrics.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the ListUtteranceMetrics operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response.</p> <p>Use the returned token\
              \ in the nextToken parameter of a ListUtteranceMetrics request to return\
              \ the next page of results. For a complete set of results, call the\
              \ ListUtteranceMetrics operation until the nextToken returned in the\
              \ response is null.</p>"
      type: object
    AnalyticsUtteranceMetric:
      description: "Contains the metric and the summary statistic you want to calculate,\
        \ and the order in which to sort the results, for the utterances across the\
        \ user sessions with the bot."
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceMetricName'
          - description: <p>The metric for which you want to get utterance summary
              statistics.</p> <ul> <li> <p> <code>Count</code> – The number of utterances.</p>
              </li> <li> <p> <code>Missed</code> – The number of utterances that Amazon
              Lex failed to recognize.</p> </li> <li> <p> <code>Detected</code> –
              The number of utterances that Amazon Lex managed to detect.</p> </li>
              <li> <p> <code>UtteranceTimestamp</code> – The date and time of the
              utterance.</p> </li> </ul>
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          - description: <p>The summary statistic to calculate.</p> <ul> <li> <p>
              <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p>
              </li> <li> <p> <code>Average</code> – The total count divided by the
              number of utterances in the category you provide in <code>name</code>.</p>
              </li> <li> <p> <code>Max</code> – The highest count in the category
              you provide in <code>name</code>.</p> </li> </ul>
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          - description: Specifies whether to sort the results in ascending or descending
              order.
      required:
      - name
      - statistic
      type: object
    AnalyticsUtteranceGroupBySpecification:
      description: Contains the category by which to group the utterances.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceField'
          - description: Specifies whether to group the utterances by their text or
              their state.
      required:
      - name
      type: object
    AnalyticsUtteranceAttribute:
      description: An object that specifies the last used intent at the time of the
        utterance as an attribute to return.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceAttributeName'
          - description: An attribute to return. The only available attribute is the
              intent that the bot mapped the utterance to.
      required:
      - name
      type: object
    SearchAssociatedTranscriptsResponse:
      example:
        totalResults: ""
        associatedTranscripts: ""
        botId: ""
        nextIndex: ""
        botRecommendationId: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot associated with the transcripts
              that you are searching.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot containing the transcripts that you
              are searching.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "The identifier of the language and locale of the transcripts\
              \ to search. The string must match one of the supported locales. For\
              \ more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
              >Supported languages</a> "
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: ' The unique identifier of the bot recommendation associated
              with the transcripts to search.'
        nextIndex:
          allOf:
          - $ref: '#/components/schemas/NextIndex'
          - description: "A index that indicates whether there are more results to\
              \ return in a response to the SearchAssociatedTranscripts operation.\
              \ If the nextIndex field is present, you send the contents as the nextIndex\
              \ parameter of a SearchAssociatedTranscriptsRequest operation to get\
              \ the next page of results."
        associatedTranscripts:
          allOf:
          - $ref: '#/components/schemas/AssociatedTranscriptList'
          - description: The object that contains the associated transcript that meet
              the criteria you specified.
        totalResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: The total number of transcripts returned by the search.
      type: object
    AssociatedTranscriptFilter:
      description: Filters to search for the associated transcript.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AssociatedTranscriptFilterName'
          - description: The name of the field to use for filtering. The allowed names
              are IntentId and SlotTypeId.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          - description: The values to use to filter the transcript.
      required:
      - name
      - values
      type: object
    StartBotRecommendationResponse:
      example:
        encryptionSetting:
          associatedTranscriptsPassword: ""
          botLocaleExportPassword: ""
          kmsKeyArn: ""
        botRecommendationStatus: ""
        botId: ""
        botRecommendationId: ""
        botVersion: ""
        localeId: ""
        transcriptSourceSetting:
          s3BucketTranscriptSource:
            transcriptFilter:
              lexTranscriptFilter:
                dateRangeFilter:
                  startDateTime: ""
                  endDateTime: ""
            kmsKeyArn: ""
            s3BucketName: ""
            pathFormat:
              objectPrefixes: ""
            transcriptFormat: ""
        creationDateTime: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot containing the bot recommendation.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot containing the bot recommendation.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "The identifier of the language and locale of the bot recommendation\
              \ to start. The string must match one of the supported locales. For\
              \ more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
              >Supported languages</a> "
        botRecommendationStatus:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationStatus'
          - description: "<p>The status of the bot recommendation.</p> <p>If the status\
              \ is Failed, then the reasons for the failure are listed in the failureReasons\
              \ field. </p>"
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot recommendation that you have created.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot recommendation
              was created.
        transcriptSourceSetting:
          $ref: '#/components/schemas/DescribeBotRecommendationResponse_transcriptSourceSetting'
        encryptionSetting:
          $ref: '#/components/schemas/DescribeBotRecommendationResponse_encryptionSetting'
      type: object
    S3BucketTranscriptSource:
      description: "The object representing the Amazon S3 bucket containing the transcript,\
        \ as well as the associated metadata."
      properties:
        s3BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          - description: The name of the bucket containing the transcript and the
              associated metadata.
        pathFormat:
          $ref: '#/components/schemas/S3BucketTranscriptSource_pathFormat'
        transcriptFormat:
          allOf:
          - $ref: '#/components/schemas/TranscriptFormat'
          - description: "The format of the transcript content. Currently, Genie only\
              \ supports the Amazon Lex transcript format."
        transcriptFilter:
          $ref: '#/components/schemas/S3BucketTranscriptSource_transcriptFilter'
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          - description: The ARN of the KMS key that customer use to encrypt their
              Amazon S3 bucket. Only use this field if your bucket is encrypted using
              a customer managed KMS key.
      required:
      - s3BucketName
      - transcriptFormat
      type: object
    KmsKeyArn:
      maxLength: 2048
      minLength: 20
      pattern: "^arn:[\\w\\-]+:kms:[\\w\\-]+:[\\d]{12}:(?:key\\/[\\w\\-]+|alias\\\
        /[a-zA-Z0-9:\\/_\\-]{1,256})$"
      type: string
    FilePassword:
      format: password
      maxLength: 1024
      minLength: 0
      type: string
    StartImportResponse:
      example:
        importStatus: ""
        importId: ""
        mergeStrategy: ""
        resourceSpecification:
          customVocabularyImportSpecification:
            botId: ""
            botVersion: ""
            localeId: ""
          testSetImportResourceSpecification:
            testSetTags: ""
            modality: ""
            roleArn: ""
            description: ""
            storageLocation:
              s3Path: ""
              kmsKeyArn: ""
              s3BucketName: ""
            importInputLocation:
              s3Path: ""
              s3BucketName: ""
            testSetName: ""
          botLocaleImportSpecification:
            nluIntentConfidenceThreshold: ""
            voiceSettings:
              voiceId: ""
              engine: ""
            botId: ""
            botVersion: ""
            localeId: ""
          botImportSpecification:
            testBotAliasTags: ""
            botName: ""
            roleArn: ""
            botTags: ""
            dataPrivacy:
              childDirected: ""
            idleSessionTTLInSeconds: ""
        creationDateTime: ""
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: A unique identifier for the import.
        resourceSpecification:
          $ref: '#/components/schemas/StartImportResponse_resourceSpecification'
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          - description: The strategy used when there was a name conflict between
              the imported resource and an existing resource. When the merge strategy
              is <code>FailOnConflict</code> existing resources are not overwritten
              and the import fails.
        importStatus:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          - description: "The current status of the import. When the status is <code>Complete</code>\
              \ the bot, bot alias, or custom vocabulary is ready to use."
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the import request was created.
      type: object
    BotImportSpecification:
      description: Provides the bot parameters required for importing a bot.
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name that Amazon Lex should use for the bot.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The Amazon Resource Name (ARN) of the IAM role used to build
              and run the bot.
        dataPrivacy:
          $ref: '#/components/schemas/DataPrivacy'
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          - description: "<p>The time, in seconds, that Amazon Lex should keep information\
              \ about a user's conversation with the bot. </p> <p>A user interaction\
              \ remains active for the amount of time specified. If no conversation\
              \ occurs during this time, the session expires and Amazon Lex deletes\
              \ any data provided before the timeout.</p> <p>You can specify between\
              \ 60 (1 minute) and 86,400 (24 hours) seconds.</p>"
        botTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of tags to add to the bot. You can only add tags\
              \ when you import a bot. You can't use the <code>UpdateBot</code> operation\
              \ to update tags. To update tags, use the <code>TagResource</code> operation."
        testBotAliasTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of tags to add to the test alias for a bot. You can\
              \ only add tags when you import a bot. You can't use the <code>UpdateAlias</code>\
              \ operation to update tags. To update tags on the test alias, use the\
              \ <code>TagResource</code> operation."
      required:
      - botName
      - dataPrivacy
      - roleArn
      type: object
    BotLocaleImportSpecification:
      description: Provides the bot locale parameters required for importing a bot
        locale.
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot to import the locale to.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot to import the locale to. This can
              only be the <code>DRAFT</code> version of the bot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "The identifier of the language and locale that the bot will\
              \ be used in. The string must match one of the supported locales. All\
              \ of the intents, slot types, and slots used in the bot must have the\
              \ same locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
              >Supported languages</a>."
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          - description: "<p>Determines the threshold where Amazon Lex will insert\
              \ the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>,\
              \ or both when returning alternative intents. <code>AMAZON.FallbackIntent</code>\
              \ and <code>AMAZON.KendraSearchIntent</code> are only inserted if they\
              \ are configured for the bot. </p> <p>For example, suppose a bot is\
              \ configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>.\
              \ Amazon Lex returns three alternative intents with the following confidence\
              \ scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response\
              \ from the <code>PostText</code> operation would be:</p> <ul> <li> <p>\
              \ <code>AMAZON.FallbackIntent</code> </p> </li> <li> <p> <code>IntentA</code>\
              \ </p> </li> <li> <p> <code>IntentB</code> </p> </li> <li> <p> <code>IntentC</code>\
              \ </p> </li> </ul>"
        voiceSettings:
          $ref: '#/components/schemas/VoiceSettings'
      required:
      - botId
      - botVersion
      - localeId
      type: object
    CustomVocabularyImportSpecification:
      description: Provides the parameters required for importing a custom vocabulary.
      example:
        botId: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot to import the custom vocabulary
              to.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot to import the custom vocabulary to.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The identifier of the local to import the custom vocabulary
              to. The value must be <code>en_GB</code>.
      required:
      - botId
      - botVersion
      - localeId
      type: object
    TestSetImportResourceSpecification:
      description: Contains information about the test set that is imported.
      properties:
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the test set.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the test set.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The Amazon Resource Name (ARN) of an IAM role that has permission
              to access the test set.
        storageLocation:
          $ref: '#/components/schemas/TestSetImportResourceSpecification_storageLocation'
        importInputLocation:
          $ref: '#/components/schemas/TestSetImportResourceSpecification_importInputLocation'
        modality:
          allOf:
          - $ref: '#/components/schemas/TestSetModality'
          - description: Specifies whether the test-set being imported contains written
              or spoken data.
        testSetTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of tags to add to the test set. You can only add\
              \ tags when you import/generate a new test set. You can't use the <code>UpdateTestSet</code>\
              \ operation to update tags. To update tags, use the <code>TagResource</code>\
              \ operation."
      required:
      - importInputLocation
      - modality
      - roleArn
      - storageLocation
      - testSetName
      type: object
    StartTestExecutionResponse:
      example:
        testExecutionModality: ""
        testExecutionId: ""
        testSetId: ""
        apiMode: ""
        creationDateTime: ""
        target:
          botAliasTarget:
            botAliasId: ""
            botId: ""
            localeId: ""
      properties:
        testExecutionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the test set execution.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The creation date and time for the test set execution.
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The test set Id for the test set execution.
        target:
          $ref: '#/components/schemas/StartTestExecutionResponse_target'
        apiMode:
          allOf:
          - $ref: '#/components/schemas/TestExecutionApiMode'
          - description: "Indicates whether we use streaming or non-streaming APIs\
              \ for the test set execution. For streaming, StartConversation Amazon\
              \ Lex Runtime API is used. Whereas for non-streaming, RecognizeUtterance\
              \ and RecognizeText Amazon Lex Runtime API are used."
        testExecutionModality:
          allOf:
          - $ref: '#/components/schemas/TestExecutionModality'
          - description: Indicates whether audio or text is used.
      type: object
    BotAliasTestExecutionTarget:
      description: The target Amazon S3 location for the test set execution using
        a bot alias.
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The bot Id of the bot alias used in the test set execution.
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: The bot alias Id of the bot alias used in the test set execution.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The locale Id of the bot alias used in the test set execution.
      required:
      - botAliasId
      - botId
      - localeId
      type: object
    StartTestSetGenerationResponse:
      example:
        testSetTags: ""
        testSetGenerationStatus: ""
        roleArn: ""
        testSetGenerationId: ""
        description: ""
        storageLocation:
          s3Path: ""
          kmsKeyArn: ""
          s3BucketName: ""
        generationDataSource:
          conversationLogsDataSource:
            filter:
              inputMode: ""
              startTime: ""
              endTime: ""
            botAliasId: ""
            botId: ""
            localeId: ""
        testSetName: ""
        creationDateTime: ""
      properties:
        testSetGenerationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the test set generation to describe.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: ' The creation date and time for the test set generation.'
        testSetGenerationStatus:
          allOf:
          - $ref: '#/components/schemas/TestSetGenerationStatus'
          - description: ' The status for the test set generation.'
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The test set name used for the test set generation.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description used for the test set generation.
        storageLocation:
          $ref: '#/components/schemas/DescribeTestSetGenerationResponse_storageLocation'
        generationDataSource:
          $ref: '#/components/schemas/StartTestSetGenerationResponse_generationDataSource'
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The roleARN used for any operation in the test set to access
              resources in the Amazon Web Services account.
        testSetTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: A list of tags that was used for the test set that is being
              generated.
      type: object
    S3BucketName:
      maxLength: 63
      minLength: 3
      pattern: "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$"
      type: string
    S3ObjectPath:
      maxLength: 1024
      minLength: 1
      pattern: "[\\.\\-\\!\\*\\_\\'\\(\\)a-zA-Z0-9][\\.\\-\\!\\*\\_\\'\\(\\)\\/a-zA-Z0-9]*$"
      type: string
    ConversationLogsDataSource:
      description: The data source that uses conversation logs.
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The bot Id from the conversation logs.
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: The bot alias Id from the conversation logs.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The locale Id of the conversation log.
        filter:
          $ref: '#/components/schemas/ConversationLogsDataSource_filter'
      required:
      - botAliasId
      - botId
      - filter
      - localeId
      type: object
    StopBotRecommendationResponse:
      example:
        botRecommendationStatus: ""
        botId: ""
        botRecommendationId: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot containing the bot recommendation
              that is being stopped.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot containing the recommendation that
              is being stopped.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "The identifier of the language and locale of the bot response\
              \ to stop. The string must match one of the supported locales. For more\
              \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
              >Supported languages</a> "
        botRecommendationStatus:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationStatus'
          - description: "The status of the bot recommendation. If the status is Failed,\
              \ then the reasons for the failure are listed in the failureReasons\
              \ field."
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot recommendation that is being
              stopped.
      type: object
    TagResourceResponse:
      properties: {}
      type: object
    UntagResourceResponse:
      properties: {}
      type: object
    TagKey:
      maxLength: 128
      minLength: 1
      type: string
    UpdateBotResponse:
      example:
        botStatus: ""
        botName: ""
        roleArn: ""
        botType: ""
        description: ""
        dataPrivacy:
          childDirected: ""
        idleSessionTTLInSeconds: ""
        botId: ""
        lastUpdatedDateTime: ""
        botMembers: ""
        creationDateTime: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot that was updated.
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the bot after the update.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the bot after the update.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The Amazon Resource Name (ARN) of the IAM role used by the
              bot after the update.
        dataPrivacy:
          $ref: '#/components/schemas/UpdateBotResponse_dataPrivacy'
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          - description: "The session timeout, in seconds, for the bot after the update."
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          - description: "Shows the current status of the bot. The bot is first in\
              \ the <code>Creating</code> status. Once the bot is read for use, it\
              \ changes to the <code>Available</code> status. After the bot is created,\
              \ you can use the <code>DRAFT</code> version of the bot."
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot was last updated.
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          - description: The type of the bot that was updated.
        botMembers:
          allOf:
          - $ref: '#/components/schemas/BotMembers'
          - description: The list of bot members in the network that was updated.
      type: object
    UpdateBotAliasResponse:
      example:
        botAliasLocaleSettings: ""
        sentimentAnalysisSettings:
          detectSentiment: ""
        botAliasId: ""
        description: ""
        botAliasName: ""
        botId: ""
        lastUpdatedDateTime: ""
        botVersion: ""
        botAliasStatus: ""
        conversationLogSettings:
          textLogSettings: ""
          audioLogSettings: ""
        creationDateTime: ""
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: The identifier of the updated bot alias.
        botAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The updated name of the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The updated description of the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The updated version of the bot that the alias points to.
        botAliasLocaleSettings:
          allOf:
          - $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          - description: The updated Lambda functions to use in each locale for the
              bot alias.
        conversationLogSettings:
          $ref: '#/components/schemas/UpdateBotAliasResponse_conversationLogSettings'
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        botAliasStatus:
          allOf:
          - $ref: '#/components/schemas/BotAliasStatus'
          - description: The current status of the bot alias. When the status is <code>Available</code>
              the alias is ready for use.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot with the updated alias.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot was last updated.
      type: object
    UpdateBotLocaleResponse:
      example:
        nluIntentConfidenceThreshold: ""
        failureReasons: ""
        description: ""
        voiceSettings:
          voiceId: ""
          engine: ""
        botLocaleStatus: ""
        botId: ""
        lastUpdatedDateTime: ""
        recommendedActions: ""
        localeName: ""
        botVersion: ""
        localeId: ""
        creationDateTime: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that contains the updated locale.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot that contains the updated locale.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and locale of the updated bot locale.
        localeName:
          allOf:
          - $ref: '#/components/schemas/LocaleName'
          - description: The updated locale name for the locale.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The updated description of the locale.
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          - description: The updated confidence threshold for inserting the <code>AMAZON.FallbackIntent</code>
              and <code>AMAZON.KendraSearchIntent</code> intents in the list of possible
              intents for an utterance.
        voiceSettings:
          $ref: '#/components/schemas/UpdateBotLocaleResponse_voiceSettings'
        botLocaleStatus:
          allOf:
          - $ref: '#/components/schemas/BotLocaleStatus'
          - description: The current status of the locale. When the bot status is
              <code>Built</code> the locale is ready for use.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          - description: "If the <code>botLocaleStatus</code> is <code>Failed</code>,\
              \ the <code>failureReasons</code> field lists the errors that occurred\
              \ while building the bot."
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the locale was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the locale was last
              updated.
        recommendedActions:
          allOf:
          - $ref: '#/components/schemas/RecommendedActions'
          - description: Recommended actions to take to resolve an error in the <code>failureReasons</code>
              field.
      type: object
    UpdateBotRecommendationResponse:
      example:
        encryptionSetting:
          associatedTranscriptsPassword: ""
          botLocaleExportPassword: ""
          kmsKeyArn: ""
        botRecommendationStatus: ""
        botId: ""
        lastUpdatedDateTime: ""
        botRecommendationId: ""
        botVersion: ""
        localeId: ""
        transcriptSourceSetting:
          s3BucketTranscriptSource:
            transcriptFilter:
              lexTranscriptFilter:
                dateRangeFilter:
                  startDateTime: ""
                  endDateTime: ""
            kmsKeyArn: ""
            s3BucketName: ""
            pathFormat:
              objectPrefixes: ""
            transcriptFormat: ""
        creationDateTime: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot containing the bot recommendation
              that has been updated.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot containing the bot recommendation
              that has been updated.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "The identifier of the language and locale of the bot recommendation\
              \ to update. The string must match one of the supported locales. For\
              \ more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
              >Supported languages</a> "
        botRecommendationStatus:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationStatus'
          - description: "<p>The status of the bot recommendation.</p> <p>If the status\
              \ is Failed, then the reasons for the failure are listed in the failureReasons\
              \ field. </p>"
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot recommendation to be updated.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot recommendation
              was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot recommendation
              was last updated.
        transcriptSourceSetting:
          $ref: '#/components/schemas/DescribeBotRecommendationResponse_transcriptSourceSetting'
        encryptionSetting:
          $ref: '#/components/schemas/DescribeBotRecommendationResponse_encryptionSetting'
      type: object
    UpdateExportResponse:
      example:
        exportStatus: ""
        resourceSpecification:
          testSetExportSpecification:
            testSetId: ""
          customVocabularyExportSpecification:
            botId: ""
            botVersion: ""
            localeId: ""
          botExportSpecification:
            botId: ""
            botVersion: ""
          botLocaleExportSpecification:
            botId: ""
            botVersion: ""
            localeId: ""
        lastUpdatedDateTime: ""
        exportId: ""
        fileFormat: ""
        creationDateTime: ""
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier Amazon Lex assigned to the export.
        resourceSpecification:
          $ref: '#/components/schemas/CreateExportResponse_resourceSpecification'
        fileFormat:
          allOf:
          - $ref: '#/components/schemas/ImportExportFileFormat'
          - description: The file format used for the files that define the resource.
              The <code>TSV</code> format is required to export a custom vocabulary
              only; otherwise use <code>LexJson</code> format.
        exportStatus:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          - description: The status of the export. When the status is <code>Completed</code>
              the export archive is available for download.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the export was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the export was last updated.
      type: object
    UpdateIntentResponse:
      example:
        sampleUtterances: ""
        parentIntentSignature: ""
        intentConfirmationSetting:
          declinationResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          active: ""
          confirmationNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
          declinationNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          promptSpecification:
            messageGroups: ""
            maxRetries: ""
            allowInterrupt: ""
            promptAttemptsSpecification: ""
            messageSelectionStrategy: ""
          confirmationConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          confirmationResponse:
            messageGroups: ""
            allowInterrupt: ""
          elicitationCodeHook:
            enableCodeHookInvocation: ""
            invocationLabel: ""
          declinationConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
        intentName: ""
        intentId: ""
        description: ""
        intentClosingSetting:
          conditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          closingResponse:
            messageGroups: ""
            allowInterrupt: ""
          active: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        botVersion: ""
        initialResponseSetting:
          conditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          initialResponse:
            messageGroups: ""
            allowInterrupt: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
        slotPriorities: ""
        inputContexts: ""
        outputContexts: ""
        kendraConfiguration:
          kendraIndex: ""
          queryFilterStringEnabled: ""
          queryFilterString: ""
        fulfillmentCodeHook:
          active: ""
          postFulfillmentStatusSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          fulfillmentUpdatesSpecification:
            active: ""
            startResponse:
              messageGroups: ""
              allowInterrupt: ""
              delayInSeconds: ""
            updateResponse:
              messageGroups: ""
              allowInterrupt: ""
              frequencyInSeconds: ""
            timeoutInSeconds: ""
          enabled: ""
        botId: ""
        lastUpdatedDateTime: ""
        dialogCodeHook:
          enabled: ""
        localeId: ""
        creationDateTime: ""
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the intent that was updated.
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The updated name of the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The updated description of the intent.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          - description: The updated built-in intent that is the parent of this intent.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          - description: The updated list of sample utterances for the intent.
        dialogCodeHook:
          $ref: '#/components/schemas/UpdateIntentResponse_dialogCodeHook'
        fulfillmentCodeHook:
          $ref: '#/components/schemas/UpdateIntentResponse_fulfillmentCodeHook'
        slotPriorities:
          allOf:
          - $ref: '#/components/schemas/SlotPrioritiesList'
          - description: The updated list of slots and their priorities that are elicited
              from the user for the intent.
        intentConfirmationSetting:
          $ref: '#/components/schemas/UpdateIntentResponse_intentConfirmationSetting'
        intentClosingSetting:
          $ref: '#/components/schemas/UpdateIntentResponse_intentClosingSetting'
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextsList'
          - description: The updated list of contexts that must be active for the
              intent to be considered by Amazon Lex.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextsList'
          - description: The updated list of contexts that Amazon Lex activates when
              the intent is fulfilled.
        kendraConfiguration:
          $ref: '#/components/schemas/UpdateIntentResponse_kendraConfiguration'
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that contains the intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot that contains the intent. Will always
              be <code>DRAFT</code>.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The updated language and locale of the intent.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of when the intent was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the last time that the intent was modified.
        initialResponseSetting:
          $ref: '#/components/schemas/UpdateIntentResponse_initialResponseSetting'
      type: object
    SlotPriority:
      description: Sets the priority that Amazon Lex should use when eliciting slot
        values from a user.
      properties:
        priority:
          allOf:
          - $ref: '#/components/schemas/PriorityValue'
          - description: The priority that Amazon Lex should apply to the slot.
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the slot.
      required:
      - priority
      - slotId
      type: object
    UpdateResourcePolicyResponse:
      example:
        revisionId: ""
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          - description: The Amazon Resource Name (ARN) of the bot or bot alias that
              the resource policy is attached to.
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: "The current revision of the resource policy. Use the revision\
              \ ID to make sure that you are updating the most current version of\
              \ a resource policy when you add a policy statement to a resource, delete\
              \ a resource, or update a resource."
      type: object
    UpdateSlotResponse:
      example:
        subSlotSetting:
          expression: ""
          slotSpecifications: ""
        description: ""
        intentId: ""
        valueElicitationSetting:
          sampleUtterances: ""
          slotConstraint: ""
          waitAndContinueSpecification:
            continueResponse:
              messageGroups: ""
              allowInterrupt: ""
            waitingResponse:
              messageGroups: ""
              allowInterrupt: ""
            active: ""
            stillWaitingResponse:
              messageGroups: ""
              allowInterrupt: ""
              frequencyInSeconds: ""
              timeoutInSeconds: ""
          defaultValueSpecification:
            defaultValueList: ""
          promptSpecification:
            messageGroups: ""
            maxRetries: ""
            allowInterrupt: ""
            promptAttemptsSpecification: ""
            messageSelectionStrategy: ""
          slotCaptureSetting:
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            captureResponse:
              messageGroups: ""
              allowInterrupt: ""
            elicitationCodeHook:
              enableCodeHookInvocation: ""
              invocationLabel: ""
            captureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            captureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            codeHook:
              postCodeHookSpecification:
                successResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                successConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
                successNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                timeoutNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                timeoutResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                failureNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                failureConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
                failureResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                timeoutConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
              active: ""
              enableCodeHookInvocation: ""
              invocationLabel: ""
        botVersion: ""
        slotName: ""
        slotTypeId: ""
        slotId: ""
        botId: ""
        lastUpdatedDateTime: ""
        obfuscationSetting:
          obfuscationSettingType: ""
        localeId: ""
        multipleValuesSetting:
          allowMultipleValues: ""
        creationDateTime: ""
      properties:
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the slot that was updated.
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The updated name of the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The updated description of the bot.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          - description: The updated identifier of the slot type that provides values
              for the slot.
        valueElicitationSetting:
          $ref: '#/components/schemas/UpdateSlotResponse_valueElicitationSetting'
        obfuscationSetting:
          $ref: '#/components/schemas/UpdateSlotResponse_obfuscationSetting'
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that contains the slot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot that contains the slot. Will always
              be <code>DRAFT</code>.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The locale that contains the slot.
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The intent that contains the slot.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp of the date and time that the slot was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp of the date and time that the slot was last
              updated.
        multipleValuesSetting:
          $ref: '#/components/schemas/UpdateSlotResponse_multipleValuesSetting'
        subSlotSetting:
          $ref: '#/components/schemas/CreateSlotResponse_subSlotSetting'
      type: object
    UpdateSlotTypeResponse:
      example:
        parentSlotTypeSignature: ""
        slotTypeName: ""
        description: ""
        valueSelectionSetting:
          resolutionStrategy: ""
          regexFilter:
            pattern: ""
          advancedRecognitionSetting:
            audioRecognitionStrategy: ""
        botVersion: ""
        slotTypeId: ""
        externalSourceSetting:
          grammarSlotTypeSetting:
            source:
              s3ObjectKey: ""
              kmsKeyArn: ""
              s3BucketName: ""
        compositeSlotTypeSetting:
          subSlots: ""
        botId: ""
        lastUpdatedDateTime: ""
        localeId: ""
        slotTypeValues: ""
        creationDateTime: ""
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the updated slot type.
        slotTypeName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The updated name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The updated description of the slot type.
        slotTypeValues:
          allOf:
          - $ref: '#/components/schemas/SlotTypeValues'
          - description: The updated values that the slot type provides.
        valueSelectionSetting:
          $ref: '#/components/schemas/UpdateSlotTypeResponse_valueSelectionSetting'
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          - description: The updated signature of the built-in slot type that is the
              parent of this slot type.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the bot that contains the slot type.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot that contains the slot type. This
              is always <code>DRAFT</code>.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and locale of the updated slot type.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp of the date and time that the slot type was
              created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the slot type was last
              updated.
        externalSourceSetting:
          $ref: '#/components/schemas/ExternalSourceSetting'
        compositeSlotTypeSetting:
          $ref: '#/components/schemas/CreateSlotTypeResponse_compositeSlotTypeSetting'
      type: object
    UpdateTestSetResponse:
      example:
        numTurns: ""
        testSetId: ""
        modality: ""
        roleArn: ""
        description: ""
        storageLocation:
          s3Path: ""
          kmsKeyArn: ""
          s3BucketName: ""
        lastUpdatedDateTime: ""
        testSetName: ""
        status: ""
        creationDateTime: ""
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The test set Id for which update test operation to be performed.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The test set name for the updated test set.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The test set description for the updated test set.
        modality:
          allOf:
          - $ref: '#/components/schemas/TestSetModality'
          - description: Indicates whether audio or text is used for the updated test
              set.
        status:
          allOf:
          - $ref: '#/components/schemas/TestSetStatus'
          - description: The status for the updated test set.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The roleARN used for any operation in the test set to access
              resources in the Amazon Web Services account.
        numTurns:
          allOf:
          - $ref: '#/components/schemas/Count'
          - description: The number of conversation turns from the updated test set.
        storageLocation:
          $ref: '#/components/schemas/UpdateTestSetResponse_storageLocation'
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The creation date and time for the updated test set.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: ' The date and time of the last update for the updated test
              set.'
      type: object
    ActiveContextName:
      maxLength: 100
      minLength: 1
      pattern: "^([A-Za-z]_?)+$"
      type: string
    ActiveContext:
      description: The active context used in the test execution.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ActiveContextName'
          - description: The name of active context.
      required:
      - name
      type: object
    ActiveContextList:
      items:
        $ref: '#/components/schemas/ActiveContext'
      maxItems: 20
      minItems: 0
      type: array
    AudioRecognitionStrategy:
      enum:
      - UseSlotValuesAsCustomVocabulary
      type: string
    TestSetAgentPrompt:
      maxLength: 1024
      minLength: 1
      type: string
    ExecutionErrorDetails:
      description: Details about an error in an execution of a test set.
      properties:
        errorCode:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The error code for the error.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The message describing the error.
      required:
      - errorCode
      - errorMessage
      type: object
    TestResultSlotName:
      maxLength: 100
      minLength: 1
      pattern: "^([0-9a-zA-Z][_.-]?)+$"
      type: string
    Name:
      maxLength: 100
      minLength: 1
      pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
      type: string
    AgentTurnResult:
      description: The information about the agent turn in a test set execution.
      properties:
        expectedAgentPrompt:
          allOf:
          - $ref: '#/components/schemas/TestSetAgentPrompt'
          - description: The expected agent prompt for the agent turn in a test set
              execution.
        actualAgentPrompt:
          allOf:
          - $ref: '#/components/schemas/TestSetAgentPrompt'
          - description: The actual agent prompt for the agent turn in a test set
              execution.
        errorDetails:
          $ref: '#/components/schemas/ExecutionErrorDetails'
        actualElicitedSlot:
          allOf:
          - $ref: '#/components/schemas/TestResultSlotName'
          - description: The actual elicited slot for the agent turn in a test set
              execution.
        actualIntent:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The actual intent for the agent turn in a test set execution.
      required:
      - expectedAgentPrompt
      type: object
    AgentTurnSpecification:
      description: The specification of an agent turn.
      properties:
        agentPrompt:
          allOf:
          - $ref: '#/components/schemas/TestSetAgentPrompt'
          - description: The agent prompt for the agent turn in a test set.
      required:
      - agentPrompt
      type: object
    AggregatedUtterancesFilterName:
      enum:
      - Utterance
      type: string
    FilterValues:
      items:
        $ref: '#/components/schemas/FilterValue'
      maxItems: 1
      minItems: 1
      type: array
    AggregatedUtterancesFilterOperator:
      enum:
      - CO
      - EQ
      type: string
    AggregatedUtterancesFilters:
      items:
        $ref: '#/components/schemas/AggregatedUtterancesFilter'
      maxItems: 1
      minItems: 1
      type: array
    AggregatedUtterancesSortBy:
      description: Specifies attributes for sorting a list of utterances.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/AggregatedUtterancesSortAttribute'
          - description: The utterance attribute to sort by.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: Specifies whether to sort the aggregated utterances in ascending
              or descending order.
      required:
      - attribute
      - order
      type: object
    Utterance:
      type: string
    HitCount:
      type: integer
    MissedCount:
      type: integer
    Timestamp:
      format: date-time
      type: string
    AggregatedUtterancesSummary:
      description: Provides summary information for aggregated utterances. The <code>ListAggregatedUtterances</code>
        operations combines all instances of the same utterance into a single aggregated
        summary.
      properties:
        utterance:
          allOf:
          - $ref: '#/components/schemas/Utterance'
          - description: "The text of the utterance. If the utterance was used with\
              \ the <code>RecognizeUtterance</code> operation, the text is the transcription\
              \ of the audio utterance."
        hitCount:
          allOf:
          - $ref: '#/components/schemas/HitCount'
          - description: "The number of times that the utterance was detected by Amazon\
              \ Lex during the time period. When an utterance is detected, it activates\
              \ an intent or a slot."
        missedCount:
          allOf:
          - $ref: '#/components/schemas/MissedCount'
          - description: The number of times that the utterance was missed by Amazon
              Lex An utterance is missed when it doesn't activate an intent or slot.
        utteranceFirstRecordedInAggregationDuration:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the utterance was first recorded\
              \ in the time window for aggregation. An utterance may have been sent\
              \ to Amazon Lex before that time, but only utterances within the time\
              \ window are counted."
        utteranceLastRecordedInAggregationDuration:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The last date and time that an utterance was recorded in\
              \ the time window for aggregation. An utterance may be sent to Amazon\
              \ Lex after that time, but only utterances within the time window are\
              \ counted."
        containsDataFromDeletedResources:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: "Aggregated utterance data may contain utterances from versions\
              \ of your bot that have since been deleted. When the aggregated contains\
              \ this kind of data, this field is set to true."
      type: object
    AggregatedUtterancesSummaryList:
      items:
        $ref: '#/components/schemas/AggregatedUtterancesSummary'
      type: array
    AllowedInputTypes:
      description: Specifies the allowed input types.
      properties:
        allowAudioInput:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: Indicates whether audio input is allowed.
        allowDTMFInput:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: Indicates whether DTMF input is allowed.
      required:
      - allowAudioInput
      - allowDTMFInput
      type: object
    AmazonResourceName:
      maxLength: 1011
      minLength: 1
      type: string
    AnalyticsBinByList:
      items:
        $ref: '#/components/schemas/AnalyticsBinBySpecification'
      maxItems: 1
      minItems: 1
      type: array
    AnalyticsBinByName:
      enum:
      - ConversationStartTime
      - UtteranceTimestamp
      type: string
    AnalyticsInterval:
      enum:
      - OneHour
      - OneDay
      type: string
    AnalyticsBinValue:
      type: integer
    AnalyticsBinKey:
      description: An object containing the criterion by which to bin the results
        and the value that defines that bin.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinByName'
          - description: The criterion by which to bin the results.
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinValue'
          - description: The value of the criterion that defines the bin.
      type: object
    AnalyticsBinKeys:
      items:
        $ref: '#/components/schemas/AnalyticsBinKey'
      maxItems: 1
      minItems: 1
      type: array
    AnalyticsChannel:
      maxLength: 50
      minLength: 1
      type: string
    AnalyticsCommonFilterName:
      enum:
      - BotAliasId
      - BotVersion
      - LocaleId
      - Modality
      - Channel
      type: string
    AnalyticsFilterOperator:
      enum:
      - EQ
      - GT
      - LT
      type: string
    AnalyticsFilterValue:
      type: string
    AnalyticsFilterValues:
      items:
        $ref: '#/components/schemas/AnalyticsFilterValue'
      maxItems: 5
      minItems: 1
      type: array
    AnalyticsGroupByValue:
      type: string
    AnalyticsIntentField:
      enum:
      - IntentName
      - IntentEndState
      - IntentLevel
      type: string
    AnalyticsIntentFilterName:
      enum:
      - BotAliasId
      - BotVersion
      - LocaleId
      - Modality
      - Channel
      - SessionId
      - OriginatingRequestId
      - IntentName
      - IntentEndState
      type: string
    AnalyticsIntentFilters:
      items:
        $ref: '#/components/schemas/AnalyticsIntentFilter'
      maxItems: 9
      minItems: 1
      type: array
    AnalyticsIntentGroupByKey:
      description: Contains the category by which the intent analytics were grouped
        and a member of that category.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentField'
          - description: A category by which the intent analytics were grouped.
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsGroupByValue'
          - description: A member of the category by which the intent analytics were
              grouped.
      type: object
    AnalyticsIntentGroupByKeys:
      items:
        $ref: '#/components/schemas/AnalyticsIntentGroupByKey'
      type: array
    AnalyticsIntentGroupByList:
      items:
        $ref: '#/components/schemas/AnalyticsIntentGroupBySpecification'
      maxItems: 3
      minItems: 1
      type: array
    AnalyticsIntentMetricName:
      enum:
      - Count
      - Success
      - Failure
      - Switched
      - Dropped
      type: string
    AnalyticsMetricStatistic:
      enum:
      - Sum
      - Avg
      - Max
      type: string
    AnalyticsMetricValue:
      format: double
      type: number
    AnalyticsIntentMetricResult:
      description: An object containing the results for the intent metric you requested.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentMetricName'
          - description: <p>The metric that you requested. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/analytics-key-definitions.html">Key
              definitions</a> for more details about these metrics.</p> <ul> <li>
              <p> <code>Count</code> – The number of times the intent was invoked.</p>
              </li> <li> <p> <code>Success</code> – The number of times the intent
              succeeded.</p> </li> <li> <p> <code>Failure</code> – The number of times
              the intent failed.</p> </li> <li> <p> <code>Switched</code> – The number
              of times there was a switch to a different intent.</p> </li> <li> <p>
              <code>Dropped</code> – The number of times the user dropped the intent.</p>
              </li> </ul>
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          - description: <p>The statistic that you requested to calculate.</p> <ul>
              <li> <p> <code>Sum</code> – The total count for the category you provide
              in <code>name</code>.</p> </li> <li> <p> <code>Average</code> – The
              total count divided by the number of intents in the category you provide
              in <code>name</code>.</p> </li> <li> <p> <code>Max</code> – The highest
              count in the category you provide in <code>name</code>.</p> </li> </ul>
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricValue'
          - description: The value of the summary statistic for the metric that you
              requested.
      type: object
    AnalyticsIntentMetricResults:
      items:
        $ref: '#/components/schemas/AnalyticsIntentMetricResult'
      type: array
    AnalyticsIntentMetrics:
      items:
        $ref: '#/components/schemas/AnalyticsIntentMetric'
      maxItems: 5
      minItems: 1
      type: array
    AnalyticsIntentNodeSummary:
      description: An object containing information about the requested path.
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the intent at the end of the requested path.
        intentPath:
          allOf:
          - $ref: '#/components/schemas/AnalyticsPath'
          - description: The path.
        intentCount:
          allOf:
          - $ref: '#/components/schemas/AnalyticsNodeCount'
          - description: The total number of sessions that follow the given path to
              the given intent.
        intentLevel:
          allOf:
          - $ref: '#/components/schemas/AnalyticsNodeLevel'
          - description: The number of intents up to and including the requested path.
        nodeType:
          allOf:
          - $ref: '#/components/schemas/AnalyticsNodeType'
          - description: Specifies whether the node is the end of a path (<code>Exit</code>)
              or not (<code>Inner</code>).
      type: object
    AnalyticsIntentNodeSummaries:
      items:
        $ref: '#/components/schemas/AnalyticsIntentNodeSummary'
      maxItems: 100
      minItems: 1
      type: array
    AnalyticsPath:
      maxLength: 1024
      minLength: 1
      type: string
    AnalyticsNodeCount:
      type: integer
    AnalyticsNodeLevel:
      maximum: 100
      minimum: 0
      type: integer
    AnalyticsNodeType:
      enum:
      - Inner
      - Exit
      type: string
    AnalyticsIntentResult:
      description: "An object containing the results for the intent metrics you requested\
        \ and the bin and/or group(s) they refer to, if applicable."
      properties:
        binKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinKeys'
          - description: A list of objects containing the criteria you requested for
              binning results and the values of the bins.
        groupByKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentGroupByKeys'
          - description: A list of objects containing the criteria you requested for
              grouping results and the values of the groups.
        metricsResults:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentMetricResults'
          - description: "A list of objects, each of which contains a metric you want\
              \ to list, the statistic for the metric you want to return, and the\
              \ method by which to organize the results."
      type: object
    AnalyticsIntentResults:
      items:
        $ref: '#/components/schemas/AnalyticsIntentResult'
      type: array
    AnalyticsIntentStageField:
      enum:
      - IntentStageName
      - SwitchedToIntent
      type: string
    AnalyticsIntentStageFilterName:
      enum:
      - BotAliasId
      - BotVersion
      - LocaleId
      - Modality
      - Channel
      - SessionId
      - OriginatingRequestId
      - IntentName
      - IntentStageName
      type: string
    AnalyticsIntentStageFilters:
      items:
        $ref: '#/components/schemas/AnalyticsIntentStageFilter'
      maxItems: 9
      minItems: 1
      type: array
    AnalyticsIntentStageGroupByKey:
      description: Contains the category by which the intent stage analytics and the
        values for that category were grouped.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageField'
          - description: A category by which the intent stage analytics were grouped.
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsGroupByValue'
          - description: A member of the category by which the intent stage analytics
              were grouped.
      type: object
    AnalyticsIntentStageGroupByKeys:
      items:
        $ref: '#/components/schemas/AnalyticsIntentStageGroupByKey'
      type: array
    AnalyticsIntentStageGroupByList:
      items:
        $ref: '#/components/schemas/AnalyticsIntentStageGroupBySpecification'
      maxItems: 2
      minItems: 1
      type: array
    AnalyticsIntentStageMetricName:
      enum:
      - Count
      - Success
      - Failed
      - Dropped
      - Retry
      type: string
    AnalyticsIntentStageMetricResult:
      description: An object containing the results for an intent stage metric you
        requested.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageMetricName'
          - description: <p>The metric that you requested.</p> <ul> <li> <p> <code>Count</code>
              – The number of times the intent stage occurred.</p> </li> <li> <p>
              <code>Success</code> – The number of times the intent stage succeeded.</p>
              </li> <li> <p> <code>Failure</code> – The number of times the intent
              stage failed.</p> </li> <li> <p> <code>Dropped</code> – The number of
              times the user dropped the intent stage.</p> </li> <li> <p> <code>Retry</code>
              – The number of times the bot tried to elicit a response from the user
              at this stage.</p> </li> </ul>
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          - description: <p>The summary statistic that you requested to calculate.</p>
              <ul> <li> <p> <code>Sum</code> – The total count for the category you
              provide in <code>name</code>.</p> </li> <li> <p> <code>Average</code>
              – The total count divided by the number of intent stages in the category
              you provide in <code>name</code>.</p> </li> <li> <p> <code>Max</code>
              – The highest count in the category you provide in <code>name</code>.</p>
              </li> </ul>
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricValue'
          - description: The value of the summary statistic for the metric that you
              requested.
      type: object
    AnalyticsIntentStageMetricResults:
      items:
        $ref: '#/components/schemas/AnalyticsIntentStageMetricResult'
      type: array
    AnalyticsIntentStageMetrics:
      items:
        $ref: '#/components/schemas/AnalyticsIntentStageMetric'
      maxItems: 5
      minItems: 1
      type: array
    AnalyticsIntentStageResult:
      description: "An object containing the results for the intent stage metrics\
        \ you requested and the bin and/or group they refer to, if applicable."
      properties:
        binKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinKeys'
          - description: A list of objects containing the criteria you requested for
              binning results and the values of the bins.
        groupByKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageGroupByKeys'
          - description: A list of objects containing the criteria you requested for
              grouping results and the values of the bins.
        metricsResults:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageMetricResults'
          - description: "A list of objects, each of which contains a metric you want\
              \ to list, the statistic for the metric you want to return, and the\
              \ method by which to organize the results."
      type: object
    AnalyticsIntentStageResults:
      items:
        $ref: '#/components/schemas/AnalyticsIntentStageResult'
      type: array
    AnalyticsLongValue:
      type: integer
    AnalyticsModality:
      enum:
      - Speech
      - Text
      - DTMF
      - MultiMode
      type: string
    AnalyticsOriginatingRequestId:
      type: string
    AnalyticsPathFilters:
      items:
        $ref: '#/components/schemas/AnalyticsPathFilter'
      maxItems: 5
      minItems: 1
      type: array
    AnalyticsSessionField:
      enum:
      - ConversationEndState
      - LocaleId
      type: string
    AnalyticsSessionFilterName:
      enum:
      - BotAliasId
      - BotVersion
      - LocaleId
      - Modality
      - Channel
      - Duration
      - ConversationEndState
      - SessionId
      - OriginatingRequestId
      - IntentPath
      type: string
    AnalyticsSessionFilters:
      items:
        $ref: '#/components/schemas/AnalyticsSessionFilter'
      maxItems: 10
      minItems: 1
      type: array
    AnalyticsSessionGroupByKey:
      description: Contains the category by which the session analytics were grouped
        and a member of that category.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionField'
          - description: The category by which the session analytics were grouped.
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsGroupByValue'
          - description: A member of the category by which the session analytics were
              grouped.
      type: object
    AnalyticsSessionGroupByKeys:
      items:
        $ref: '#/components/schemas/AnalyticsSessionGroupByKey'
      type: array
    AnalyticsSessionGroupByList:
      items:
        $ref: '#/components/schemas/AnalyticsSessionGroupBySpecification'
      maxItems: 2
      minItems: 1
      type: array
    AnalyticsSessionId:
      pattern: "[0-9a-zA-Z._:-]"
      type: string
    AnalyticsSessionMetricName:
      enum:
      - Count
      - Success
      - Failure
      - Dropped
      - Duration
      - TurnsPerConversation
      - Concurrency
      type: string
    AnalyticsSessionMetricResult:
      description: An object containing the results for a session metric you requested.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionMetricName'
          - description: <p>The metric that you requested.</p> <ul> <li> <p> <code>Count</code>
              – The number of sessions.</p> </li> <li> <p> <code>Success</code> –
              The number of sessions that succeeded.</p> </li> <li> <p> <code>Failure</code>
              – The number of sessions that failed.</p> </li> <li> <p> <code>Dropped</code>
              – The number of sessions that the user dropped.</p> </li> <li> <p> <code>Duration</code>
              – The duration of sessions.</p> </li> <li> <p> <code>TurnPersession</code>
              – The number of turns in the sessions.</p> </li> <li> <p> <code>Concurrency</code>
              – The number of sessions occurring in the same period of time.</p> </li>
              </ul>
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          - description: <p>The summary statistic that you requested to calculate.</p>
              <ul> <li> <p> <code>Sum</code> – The total count for the category you
              provide in <code>name</code>.</p> </li> <li> <p> <code>Average</code>
              – The total count divided by the number of sessions in the category
              you provide in <code>name</code>.</p> </li> <li> <p> <code>Max</code>
              – The highest count in the category you provide in <code>name</code>.</p>
              </li> </ul>
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricValue'
          - description: The value of the summary statistic for the metric that you
              requested.
      type: object
    AnalyticsSessionMetricResults:
      items:
        $ref: '#/components/schemas/AnalyticsSessionMetricResult'
      type: array
    AnalyticsSessionMetrics:
      items:
        $ref: '#/components/schemas/AnalyticsSessionMetric'
      maxItems: 7
      minItems: 1
      type: array
    AnalyticsSessionResult:
      description: "An object containing the results for the session metrics you requested\
        \ and the bin and/or group(s) they refer to, if applicable."
      properties:
        binKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinKeys'
          - description: A list of objects containing the criteria you requested for
              binning results and the values of the bins.
        groupByKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionGroupByKeys'
          - description: A list of objects containing the criteria you requested for
              grouping results and the values of the bins.
        metricsResults:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionMetricResults'
          - description: "A list of objects, each of which contains a metric you want\
              \ to list, the statistic for the metric you want to return, and the\
              \ method by which to organize the results."
      type: object
    AnalyticsSessionResults:
      items:
        $ref: '#/components/schemas/AnalyticsSessionResult'
      type: array
    AnalyticsUtteranceAttributeName:
      enum:
      - LastUsedIntent
      type: string
    AnalyticsUtteranceAttributeResult:
      description: An object containing the intent that the bot mapped the utterance
        to.
      properties:
        lastUsedIntent:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The intent that the bot mapped the utterance to.
      type: object
    AnalyticsUtteranceAttributeResults:
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceAttributeResult'
      type: array
    AnalyticsUtteranceAttributes:
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceAttribute'
      maxItems: 1
      minItems: 1
      type: array
    AnalyticsUtteranceField:
      enum:
      - UtteranceText
      - UtteranceState
      type: string
    AnalyticsUtteranceFilterName:
      enum:
      - BotAliasId
      - BotVersion
      - LocaleId
      - Modality
      - Channel
      - SessionId
      - OriginatingRequestId
      - UtteranceState
      - UtteranceText
      type: string
    AnalyticsUtteranceFilters:
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceFilter'
      maxItems: 9
      minItems: 1
      type: array
    AnalyticsUtteranceGroupByKey:
      description: Contains the category by which the utterance analytics were grouped
        and the values for that category.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceField'
          - description: The category by which the utterance analytics were grouped.
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsGroupByValue'
          - description: A member of the category by which the utterance analytics
              were grouped.
      type: object
    AnalyticsUtteranceGroupByKeys:
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceGroupByKey'
      type: array
    AnalyticsUtteranceGroupByList:
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceGroupBySpecification'
      maxItems: 2
      minItems: 1
      type: array
    AnalyticsUtteranceMetricName:
      enum:
      - Count
      - Missed
      - Detected
      - UtteranceTimestamp
      type: string
    AnalyticsUtteranceMetricResult:
      description: An object containing the results for the utterance metric you requested.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceMetricName'
          - description: <p>The metric that you requested.</p> <ul> <li> <p> <code>Count</code>
              – The number of utterances.</p> </li> <li> <p> <code>Missed</code> –
              The number of utterances that Amazon Lex failed to recognize.</p> </li>
              <li> <p> <code>Detected</code> – The number of utterances that Amazon
              Lex managed to detect.</p> </li> <li> <p> <code>UtteranceTimestamp</code>
              – The date and time of the utterance.</p> </li> </ul>
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          - description: <p>The summary statistic that you requested to calculate.</p>
              <ul> <li> <p> <code>Sum</code> – The total count for the category you
              provide in <code>name</code>.</p> </li> <li> <p> <code>Average</code>
              – The total count divided by the number of utterances in the category
              you provide in <code>name</code>.</p> </li> <li> <p> <code>Max</code>
              – The highest count in the category you provide in <code>name</code>.</p>
              </li> </ul>
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricValue'
          - description: The value of the summary statistic for the metric that you
              requested.
      type: object
    AnalyticsUtteranceMetricResults:
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceMetricResult'
      type: array
    AnalyticsUtteranceMetrics:
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceMetric'
      maxItems: 4
      minItems: 1
      type: array
    AnalyticsUtteranceResult:
      description: "An object containing the results for the utterance metrics you\
        \ requested and the bin and/or group(s) they refer to, if applicable."
      properties:
        binKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinKeys'
          - description: A list of objects containing the criteria you requested for
              binning results and the values of the bins.
        groupByKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceGroupByKeys'
          - description: A list of objects containing the criteria you requested for
              grouping results and the values of the bins.
        metricsResults:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceMetricResults'
          - description: "A list of objects, each of which contains a metric you want\
              \ to list, the statistic for the metric you want to return, and the\
              \ method by which to organize the results."
        attributeResults:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceAttributeResults'
          - description: A list of objects containing information about the last used
              intent at the time of an utterance.
      type: object
    AnalyticsUtteranceResults:
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceResult'
      type: array
    Transcript:
      maxLength: 6000000
      minLength: 1
      pattern: .*
      type: string
    AssociatedTranscript:
      description: The object containing information that associates the recommended
        intent/slot type with a conversation.
      properties:
        transcript:
          allOf:
          - $ref: '#/components/schemas/Transcript'
          - description: "The content of the transcript that meets the search filter\
              \ criteria. For the JSON format of the transcript, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/designing-output-format.html\"\
              >Output transcript format</a>."
      type: object
    AssociatedTranscriptFilterName:
      enum:
      - IntentId
      - SlotTypeId
      type: string
    AssociatedTranscriptFilters:
      items:
        $ref: '#/components/schemas/AssociatedTranscriptFilter'
      maxItems: 1
      minItems: 1
      type: array
    AssociatedTranscriptList:
      items:
        $ref: '#/components/schemas/AssociatedTranscript'
      type: array
    AttachmentTitle:
      maxLength: 250
      minLength: 1
      type: string
    AttachmentUrl:
      maxLength: 250
      minLength: 1
      type: string
    TimeInMilliSeconds:
      minimum: 1
      type: integer
    AudioSpecification:
      description: Specifies the audio input specifications.
      properties:
        maxLengthMs:
          allOf:
          - $ref: '#/components/schemas/TimeInMilliSeconds'
          - description: Time for how long Amazon Lex waits before speech input is
              truncated and the speech is returned to application.
        endTimeoutMs:
          allOf:
          - $ref: '#/components/schemas/TimeInMilliSeconds'
          - description: Time for which a bot waits after the customer stops speaking
              to assume the utterance is finished.
      required:
      - endTimeoutMs
      - maxLengthMs
      type: object
    DTMFSpecification:
      description: Specifies the DTMF input specifications.
      properties:
        maxLength:
          allOf:
          - $ref: '#/components/schemas/MaxUtteranceDigits'
          - description: The maximum number of DTMF digits allowed in an utterance.
        endTimeoutMs:
          allOf:
          - $ref: '#/components/schemas/TimeInMilliSeconds'
          - description: How long the bot should wait after the last DTMF character
              input before assuming that the input has concluded.
        deletionCharacter:
          allOf:
          - $ref: '#/components/schemas/DTMFCharacter'
          - description: The DTMF character that clears the accumulated DTMF digits
              and immediately ends the input.
        endCharacter:
          allOf:
          - $ref: '#/components/schemas/DTMFCharacter'
          - description: "The DTMF character that immediately ends input. If the user\
              \ does not press this character, the input ends after the end timeout."
      required:
      - deletionCharacter
      - endCharacter
      - endTimeoutMs
      - maxLength
      type: object
    AudioAndDTMFInputSpecification:
      description: Specifies the audio and DTMF input specification.
      properties:
        startTimeoutMs:
          allOf:
          - $ref: '#/components/schemas/TimeInMilliSeconds'
          - description: Time for which a bot waits before assuming that the customer
              isn't going to speak or press a key. This timeout is shared between
              Audio and DTMF inputs.
        audioSpecification:
          $ref: '#/components/schemas/AudioAndDTMFInputSpecification_audioSpecification'
        dtmfSpecification:
          $ref: '#/components/schemas/AudioAndDTMFInputSpecification_dtmfSpecification'
      required:
      - startTimeoutMs
      type: object
    AudioFileS3Location:
      maxLength: 1024
      minLength: 1
      pattern: "^s3://([a-z0-9\\\\.-]+)/(.+)$"
      type: string
    S3BucketLogDestination:
      description: Specifies an Amazon S3 bucket for logging audio conversations
      properties:
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          - description: The Amazon Resource Name (ARN) of an Amazon Web Services
              Key Management Service (KMS) key for encrypting audio log files stored
              in an S3 bucket.
        s3BucketArn:
          allOf:
          - $ref: '#/components/schemas/S3BucketArn'
          - description: The Amazon Resource Name (ARN) of an Amazon S3 bucket where
              audio log files are stored.
        logPrefix:
          allOf:
          - $ref: '#/components/schemas/LogPrefix'
          - description: The S3 prefix to assign to audio log files.
      required:
      - logPrefix
      - s3BucketArn
      type: object
    AudioLogDestination:
      description: The location of audio log files collected when conversation logging
        is enabled for a bot.
      properties:
        s3Bucket:
          $ref: '#/components/schemas/AudioLogDestination_s3Bucket'
      required:
      - s3Bucket
      type: object
    AudioLogSetting:
      description: Settings for logging audio of conversations between Amazon Lex
        and a user. You specify whether to log audio and the Amazon S3 bucket where
        the audio file is stored.
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Determines whether audio logging in enabled for the bot.
        destination:
          $ref: '#/components/schemas/AudioLogDestination'
      required:
      - destination
      - enabled
      type: object
    Id:
      maxLength: 10
      minLength: 10
      pattern: "^[0-9a-zA-Z]+$"
      type: string
    BotVersion:
      maxLength: 5
      minLength: 1
      pattern: "^(DRAFT|[0-9]+)$"
      type: string
    LocaleId:
      type: string
    CreateCustomVocabularyItemsList:
      items:
        $ref: '#/components/schemas/NewCustomVocabularyItem'
      maxItems: 10
      minItems: 1
      type: array
    BatchCreateCustomVocabularyItemRequest:
      example:
        customVocabularyItemList: ""
      properties:
        customVocabularyItemList:
          allOf:
          - $ref: '#/components/schemas/CreateCustomVocabularyItemsList'
          - description: A list of new custom vocabulary items. Each entry must contain
              a phrase and can optionally contain a displayAs and/or a weight.
      required:
      - customVocabularyItemList
      title: BatchCreateCustomVocabularyItemRequest
      type: object
    FailedCustomVocabularyItems:
      items:
        $ref: '#/components/schemas/FailedCustomVocabularyItem'
      type: array
    CustomVocabularyItems:
      items:
        $ref: '#/components/schemas/CustomVocabularyItem'
      type: array
    DeleteCustomVocabularyItemsList:
      items:
        $ref: '#/components/schemas/CustomVocabularyEntryId'
      maxItems: 10
      minItems: 1
      type: array
    BatchDeleteCustomVocabularyItemRequest:
      example:
        customVocabularyItemList: ""
      properties:
        customVocabularyItemList:
          allOf:
          - $ref: '#/components/schemas/DeleteCustomVocabularyItemsList'
          - description: A list of custom vocabulary items requested to be deleted.
              Each entry must contain the unique custom vocabulary entry identifier.
      required:
      - customVocabularyItemList
      title: BatchDeleteCustomVocabularyItemRequest
      type: object
    UpdateCustomVocabularyItemsList:
      items:
        $ref: '#/components/schemas/CustomVocabularyItem'
      maxItems: 10
      minItems: 1
      type: array
    BatchUpdateCustomVocabularyItemRequest:
      example:
        customVocabularyItemList: ""
      properties:
        customVocabularyItemList:
          allOf:
          - $ref: '#/components/schemas/UpdateCustomVocabularyItemsList'
          - description: A list of custom vocabulary items with updated fields. Each
              entry must contain a phrase and can optionally contain a displayAs and/or
              a weight.
      required:
      - customVocabularyItemList
      title: BatchUpdateCustomVocabularyItemRequest
      type: object
    BotAliasHistoryEvent:
      description: "Provides a record of an event that affects a bot alias. For example,\
        \ when the version of a bot that the alias points to changes."
      properties:
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: 'The version of the bot that was used in the event. '
        startDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the event started.
        endDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the event ended.
      type: object
    BotAliasHistoryEventsList:
      items:
        $ref: '#/components/schemas/BotAliasHistoryEvent'
      type: array
    BotAliasId:
      maxLength: 10
      minLength: 10
      pattern: "^(\\bTSTALIASID\\b|[0-9a-zA-Z]+)$"
      type: string
    CodeHookSpecification:
      description: Contains information about code hooks that Amazon Lex calls during
        a conversation.
      properties:
        lambdaCodeHook:
          $ref: '#/components/schemas/LambdaCodeHook'
      required:
      - lambdaCodeHook
      type: object
    BotAliasLocaleSettingsMap:
      additionalProperties:
        $ref: '#/components/schemas/BotAliasLocaleSettings'
      minProperties: 1
      type: object
    BotAliasName:
      maxLength: 100
      minLength: 1
      pattern: "^(\\bAmazonLexTestAlias\\b|[0-9a-zA-Z][_-]?)+$"
      type: string
    BotAliasStatus:
      enum:
      - Creating
      - Available
      - Deleting
      - Failed
      type: string
    Description:
      maxLength: 200
      minLength: 0
      type: string
    BotAliasSummary:
      description: Summary information about bot aliases returned from the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBotAliases.html">ListBotAliases</a>
        operation.
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: The unique identifier assigned to the bot alias. You can
              use this ID to get detailed information about the alias using the <a
              href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeBotAlias.html">DescribeBotAlias</a>
              operation.
        botAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot that the bot alias references.
        botAliasStatus:
          allOf:
          - $ref: '#/components/schemas/BotAliasStatus'
          - description: "The current state of the bot alias. If the status is <code>Available</code>,\
              \ the alias is ready for use."
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot alias was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot alias was last
              updated.
      type: object
    BotAliasSummaryList:
      items:
        $ref: '#/components/schemas/BotAliasSummary'
      type: array
    BotFilterName:
      enum:
      - BotName
      - BotType
      type: string
    BotFilterOperator:
      enum:
      - CO
      - EQ
      - NE
      type: string
    BotFilters:
      items:
        $ref: '#/components/schemas/BotFilter'
      maxItems: 2
      minItems: 1
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 32
      pattern: "^arn:aws:iam::[0-9]{12}:role/.*$"
      type: string
    DataPrivacy:
      description: "By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code>\
        \ structure provides settings that determine how Amazon Lex handles special\
        \ cases of securing the data for your bot. "
      example:
        childDirected: ""
      properties:
        childDirected:
          allOf:
          - $ref: '#/components/schemas/ChildDirected'
          - description: "For each Amazon Lex bot created with the Amazon Lex Model\
              \ Building Service, you must specify whether your use of Amazon Lex\
              \ is related to a website, program, or other application that is directed\
              \ or targeted, in whole or in part, to children under age 13 and subject\
              \ to the Children's Online Privacy Protection Act (COPPA) by specifying\
              \ <code>true</code> or <code>false</code> in the <code>childDirected</code>\
              \ field. By specifying <code>true</code> in the <code>childDirected</code>\
              \ field, you confirm that your use of Amazon Lex <b>is</b> related to\
              \ a website, program, or other application that is directed or targeted,\
              \ in whole or in part, to children under age 13 and subject to COPPA.\
              \ By specifying <code>false</code> in the <code>childDirected</code>\
              \ field, you confirm that your use of Amazon Lex <b>is not</b> related\
              \ to a website, program, or other application that is directed or targeted,\
              \ in whole or in part, to children under age 13 and subject to COPPA.\
              \ You may not specify a default value for the <code>childDirected</code>\
              \ field that does not accurately reflect whether your use of Amazon\
              \ Lex is related to a website, program, or other application that is\
              \ directed or targeted, in whole or in part, to children under age 13\
              \ and subject to COPPA. If your use of Amazon Lex relates to a website,\
              \ program, or other application that is directed in whole or in part,\
              \ to children under age 13, you must obtain any required verifiable\
              \ parental consent under COPPA. For information regarding the use of\
              \ Amazon Lex in connection with websites, programs, or other applications\
              \ that are directed or targeted, in whole or in part, to children under\
              \ age 13, see the <a href=\"http://aws.amazon.com/lex/faqs#data-security\"\
              >Amazon Lex FAQ</a>."
      required:
      - childDirected
      type: object
    SessionTTL:
      maximum: 86400
      minimum: 60
      type: integer
    TagMap:
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
      maxProperties: 200
      minProperties: 0
      type: object
    BotLocaleFilterName:
      enum:
      - BotLocaleName
      type: string
    BotLocaleFilterOperator:
      enum:
      - CO
      - EQ
      type: string
    BotLocaleFilters:
      items:
        $ref: '#/components/schemas/BotLocaleFilter'
      maxItems: 1
      minItems: 1
      type: array
    BotLocaleHistoryEventDescription:
      type: string
    BotLocaleHistoryEvent:
      description: Provides information about an event that occurred affecting the
        bot locale.
      properties:
        event:
          allOf:
          - $ref: '#/components/schemas/BotLocaleHistoryEventDescription'
          - description: A description of the event that occurred.
        eventDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the event occurred.
      required:
      - event
      - eventDate
      type: object
    BotLocaleHistoryEventsList:
      items:
        $ref: '#/components/schemas/BotLocaleHistoryEvent'
      type: array
    DraftBotVersion:
      maxLength: 5
      minLength: 5
      pattern: ^DRAFT$
      type: string
    ConfidenceThreshold:
      format: double
      maximum: 1
      minimum: 0
      type: number
    VoiceSettings:
      description: Defines settings for using an Amazon Polly voice to communicate
        with a user.
      example:
        voiceId: ""
        engine: ""
      properties:
        voiceId:
          allOf:
          - $ref: '#/components/schemas/VoiceId'
          - description: The identifier of the Amazon Polly voice to use.
        engine:
          allOf:
          - $ref: '#/components/schemas/VoiceEngine'
          - description: "<p>Indicates the type of Amazon Polly voice that Amazon\
              \ Lex should use for voice interaction with the user. For more information,\
              \ see the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_SynthesizeSpeech.html#polly-SynthesizeSpeech-request-Engine\"\
              > <code>engine</code> parameter of the <code>SynthesizeSpeech</code>\
              \ operation</a> in the <i>Amazon Polly developer guide</i>.</p> <p>If\
              \ you do not specify a value, the default is <code>standard</code>.</p>"
      required:
      - voiceId
      type: object
    BotLocaleSortBy:
      description: Specifies attributes for sorting a list of bot locales.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BotLocaleSortAttribute'
          - description: The bot locale attribute to sort by.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: Specifies whether to sort the bot locales in ascending or
              descending order.
      required:
      - attribute
      - order
      type: object
    BotLocaleStatus:
      enum:
      - Creating
      - Building
      - Built
      - ReadyExpressTesting
      - Failed
      - Deleting
      - NotBuilt
      - Importing
      - Processing
      type: string
    LocaleName:
      type: string
    BotLocaleSummary:
      description: Summary information about bot locales returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBotLocales.html">ListBotLocales</a>
        operation.
      properties:
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The language and locale of the bot locale.
        localeName:
          allOf:
          - $ref: '#/components/schemas/LocaleName'
          - description: The name of the bot locale.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the bot locale.
        botLocaleStatus:
          allOf:
          - $ref: '#/components/schemas/BotLocaleStatus'
          - description: The current status of the bot locale. When the status is
              <code>Built</code> the locale is ready for use.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot locale was
              last updated.
        lastBuildSubmittedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot locale was
              last built.
      type: object
    BotLocaleSummaryList:
      items:
        $ref: '#/components/schemas/BotLocaleSummary'
      type: array
    BotMembers:
      items:
        $ref: '#/components/schemas/BotMember'
      maxItems: 10
      minItems: 0
      type: array
    IntentStatistics:
      description: The object that contains the statistical summary of recommended
        intents associated with the bot recommendation.
      properties:
        discoveredIntentCount:
          allOf:
          - $ref: '#/components/schemas/Count'
          - description: The number of recommended intents associated with the bot
              recommendation.
      type: object
    SlotTypeStatistics:
      description: The object that contains the statistical summary of the recommended
        slot type associated with the bot recommendation.
      properties:
        discoveredSlotTypeCount:
          allOf:
          - $ref: '#/components/schemas/Count'
          - description: The number of recommended slot types associated with the
              bot recommendation.
      type: object
    BotRecommendationResultStatistics:
      description: A statistical summary of the bot recommendation results.
      properties:
        intents:
          $ref: '#/components/schemas/BotRecommendationResultStatistics_intents'
        slotTypes:
          $ref: '#/components/schemas/BotRecommendationResultStatistics_slotTypes'
      type: object
    PresignedS3Url:
      maxLength: 1024
      minLength: 1
      type: string
    BotRecommendationResults:
      description: "The object representing the URL of the bot definition, the URL\
        \ of the associated transcript, and a statistical summary of the bot recommendation\
        \ results."
      properties:
        botLocaleExportUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          - description: The presigned URL link of the recommended bot definition.
        associatedTranscriptsUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          - description: The presigned url link of the associated transcript.
        statistics:
          $ref: '#/components/schemas/BotRecommendationResults_statistics'
      type: object
    BotRecommendationStatus:
      enum:
      - Processing
      - Deleting
      - Deleted
      - Downloading
      - Updating
      - Available
      - Failed
      - Stopping
      - Stopped
      type: string
    BotRecommendationSummary:
      description: A summary of the bot recommendation.
      properties:
        botRecommendationStatus:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationStatus'
          - description: "<p>The status of the bot recommendation.</p> <p>If the status\
              \ is Failed, then the reasons for the failure are listed in the failureReasons\
              \ field. </p>"
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the bot recommendation to be updated.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot recommendation
              was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the bot recommendation
              was last updated.
      required:
      - botRecommendationId
      - botRecommendationStatus
      type: object
    BotRecommendationSummaryList:
      items:
        $ref: '#/components/schemas/BotRecommendationSummary'
      type: array
    BotSortBy:
      description: Specifies attributes for sorting a list of bots.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BotSortAttribute'
          - description: The attribute to use to sort the list of bots.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can choose ascending or descending.
      required:
      - attribute
      - order
      type: object
    BotStatus:
      enum:
      - Creating
      - Available
      - Inactive
      - Deleting
      - Failed
      - Versioning
      - Importing
      - Updating
      type: string
    NumericalBotVersion:
      maxLength: 5
      minLength: 1
      pattern: "^[0-9]+$"
      type: string
    BotType:
      enum:
      - Bot
      - BotNetwork
      type: string
    BotSummary:
      description: Summary information about a bot returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBots.html">ListBots</a>
        operation.
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier assigned to the bot. Use this ID to
              get detailed information about the bot with the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeBot.html">DescribeBot</a>
              operation.
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the bot.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          - description: The current status of the bot. When the status is <code>Available</code>
              the bot is ready for use.
        latestBotVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          - description: The latest numerical version in use for the bot.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the bot was last updated.
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          - description: The type of the bot.
      type: object
    BotSummaryList:
      items:
        $ref: '#/components/schemas/BotSummary'
      type: array
    BotVersionLocaleSpecification:
      additionalProperties:
        $ref: '#/components/schemas/BotVersionLocaleDetails'
      minProperties: 1
      type: object
    BotVersionSortBy:
      description: Specifies attributes for sorting a list of bot versions.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BotVersionSortAttribute'
          - description: The attribute to use to sort the list of versions.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can specify ascending or
              descending order.
      required:
      - attribute
      - order
      type: object
    BotVersionSummary:
      description: Summary information about a bot version returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBotVersions.html">ListBotVersions</a>
        operation.
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the bot associated with the version.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: "The numeric version of the bot, or <code>DRAFT</code> to\
              \ indicate that this is the version of the bot that can be updated.."
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the version.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          - description: "The status of the bot. When the status is available, the\
              \ version of the bot is ready for use."
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the version was created.
      type: object
    BotVersionSummaryList:
      items:
        $ref: '#/components/schemas/BotVersionSummary'
      type: array
    BuildBotLocaleRequest:
      properties: {}
      title: BuildBotLocaleRequest
      type: object
    BuiltInIntentSortBy:
      description: Specifies attributes for sorting a list of built-in intents.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BuiltInIntentSortAttribute'
          - description: The attribute to use to sort the list of built-in intents.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can specify ascending or
              descending order.
      required:
      - attribute
      - order
      type: object
    IntentSignature:
      type: string
    BuiltInIntentSummary:
      description: Provides summary information about a built-in intent for the <a
        href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBuiltInIntents.html">
        ListBuiltInIntents </a> operation.
      properties:
        intentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          - description: The signature of the built-in intent. Use this to specify
              the parent intent of a derived intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the intent.
      type: object
    BuiltInIntentSummaryList:
      items:
        $ref: '#/components/schemas/BuiltInIntentSummary'
      type: array
    BuiltInOrCustomSlotTypeId:
      maxLength: 25
      minLength: 1
      pattern: "^((AMAZON\\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$"
      type: string
    BuiltInSlotTypeSortBy:
      description: Specifies attributes for sorting a list of built-in slot types.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BuiltInSlotTypeSortAttribute'
          - description: The attribute to use to sort the list of built-in intents.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can choose ascending or descending.
      required:
      - attribute
      - order
      type: object
    SlotTypeSignature:
      type: string
    BuiltInSlotTypeSummary:
      description: Provides summary information about a built-in slot type for the
        <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBuiltInSlotTypes.html">
        ListBuiltInSlotTypes </a> operation.
      properties:
        slotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          - description: The signature of the built-in slot type. Use this to specify
              the parent slot type of a derived slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the built-in slot type.
      type: object
    BuiltInSlotTypeSummaryList:
      items:
        $ref: '#/components/schemas/BuiltInSlotTypeSummary'
      type: array
    BuiltInsMaxResults:
      maximum: 20
      minimum: 20
      type: integer
    ButtonText:
      maxLength: 50
      minLength: 1
      type: string
    ButtonValue:
      maxLength: 50
      minLength: 1
      type: string
    Button:
      description: Describes a button to use on a response card used to gather slot
        values from a user.
      properties:
        text:
          allOf:
          - $ref: '#/components/schemas/ButtonText'
          - description: The text that appears on the button. Use this to tell the
              user what value is returned when they choose this button.
        value:
          allOf:
          - $ref: '#/components/schemas/ButtonValue'
          - description: The value returned to Amazon Lex when the user chooses this
              button. This must be one of the slot values configured for the slot.
      required:
      - text
      - value
      type: object
    ButtonsList:
      items:
        $ref: '#/components/schemas/Button'
      maxItems: 5
      minItems: 0
      type: array
    CloudWatchLogGroupArn:
      maxLength: 2048
      minLength: 1
      pattern: "^arn:[\\w\\-]+:logs:[\\w\\-]+:[\\d]{12}:log-group:[\\.\\-_/#A-Za-z0-9]{1,512}(?::\\\
        *)?$"
      type: string
    LogPrefix:
      maxLength: 1024
      type: string
    CloudWatchLogGroupLogDestination:
      description: The Amazon CloudWatch Logs log group where the text and metadata
        logs are delivered. The log group must exist before you enable logging.
      properties:
        cloudWatchLogGroupArn:
          allOf:
          - $ref: '#/components/schemas/CloudWatchLogGroupArn'
          - description: The Amazon Resource Name (ARN) of the log group where text
              and metadata logs are delivered.
        logPrefix:
          allOf:
          - $ref: '#/components/schemas/LogPrefix'
          - description: 'The prefix of the log stream name within the log group that
              you specified '
      required:
      - cloudWatchLogGroupArn
      - logPrefix
      type: object
    CodeHookInterfaceVersion:
      maxLength: 5
      minLength: 1
      type: string
    LambdaCodeHook:
      description: Specifies a Lambda function that verifies requests to a bot or
        fulfills the user's request to a bot.
      properties:
        lambdaARN:
          allOf:
          - $ref: '#/components/schemas/LambdaARN'
          - description: The Amazon Resource Name (ARN) of the Lambda function.
        codeHookInterfaceVersion:
          allOf:
          - $ref: '#/components/schemas/CodeHookInterfaceVersion'
          - description: The version of the request-response that you want Amazon
              Lex to use to invoke your Lambda function.
      required:
      - codeHookInterfaceVersion
      - lambdaARN
      type: object
    CompositeSlotTypeSetting:
      description: A composite slot is a combination of two or more slots that capture
        multiple pieces of information in a single user input.
      properties:
        subSlots:
          allOf:
          - $ref: '#/components/schemas/SubSlotTypeList'
          - description: Subslots in the composite slot.
      type: object
    ConditionExpression:
      maxLength: 1024
      minLength: 1
      type: string
    Condition:
      description: 'Provides an expression that evaluates to true or false. '
      properties:
        expressionString:
          allOf:
          - $ref: '#/components/schemas/ConditionExpression'
          - description: 'The expression string that is evaluated. '
      required:
      - expressionString
      type: object
    ConditionKey:
      maxLength: 1024
      minLength: 1
      type: string
    ConditionValue:
      maxLength: 1024
      minLength: 1
      type: string
    ConditionMap:
      additionalProperties:
        $ref: '#/components/schemas/ConditionKeyValueMap'
      maxProperties: 10
      minProperties: 0
      type: object
    ConditionOperator:
      minLength: 1
      type: string
    ConditionalBranch:
      description: A set of actions that Amazon Lex should run if the condition is
        matched.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: 'The name of the branch. '
        condition:
          $ref: '#/components/schemas/ConditionalBranch_condition'
        nextStep:
          $ref: '#/components/schemas/CreateIntent_request_initialResponseSetting_nextStep'
        response:
          $ref: '#/components/schemas/ResponseSpecification'
      required:
      - condition
      - name
      - nextStep
      type: object
    ConditionalBranches:
      items:
        $ref: '#/components/schemas/ConditionalBranch'
      maxItems: 4
      minItems: 1
      type: array
    DefaultConditionalBranch:
      description: A set of actions that Amazon Lex should run if none of the other
        conditions are met.
      properties:
        nextStep:
          $ref: '#/components/schemas/CreateIntent_request_initialResponseSetting_nextStep'
        response:
          $ref: '#/components/schemas/ResponseSpecification'
      type: object
    ContextTimeToLiveInSeconds:
      maximum: 86400
      minimum: 5
      type: integer
    ContextTurnsToLive:
      maximum: 20
      minimum: 1
      type: integer
    ConversationEndState:
      enum:
      - Success
      - Failure
      - Dropped
      type: string
    TestResultMatchStatus:
      enum:
      - Matched
      - Mismatched
      - ExecutionError
      type: string
    ConversationLevelIntentClassificationResultItem:
      description: The item listing the evaluation of intent level success or failure.
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The intent name used in the evaluation of intent level success
              or failure.
        matchResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          - description: The number of times the specific intent is used in the evaluation
              of intent level success or failure.
      required:
      - intentName
      - matchResult
      type: object
    ConversationLevelIntentClassificationResults:
      items:
        $ref: '#/components/schemas/ConversationLevelIntentClassificationResultItem'
      type: array
    ConversationLevelResultDetail:
      description: The conversation level details of the conversation used in the
        test set.
      properties:
        endToEndResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          - description: The success or failure of the streaming of the conversation.
        speechTranscriptionResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          - description: The speech transcription success or failure details of the
              conversation.
      required:
      - endToEndResult
      type: object
    ConversationLevelSlotResolutionResultItem:
      description: The slots used for the slot resolution in the conversation.
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The intents used in the slots list for the slot resolution
              details.
        slotName:
          allOf:
          - $ref: '#/components/schemas/TestResultSlotName'
          - description: The slot name in the slots list for the slot resolution details.
        matchResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          - description: The number of matching slots used in the slots listings for
              the slot resolution evaluation.
      required:
      - intentName
      - matchResult
      - slotName
      type: object
    ConversationLevelSlotResolutionResults:
      items:
        $ref: '#/components/schemas/ConversationLevelSlotResolutionResultItem'
      type: array
    TestSetConversationId:
      maxLength: 50
      minLength: 1
      pattern: "^([0-9a-zA-Z][_-]?)+$"
      type: string
    ConversationLevelTestResultItem:
      description: The test result evaluation item at the conversation level.
      properties:
        conversationId:
          allOf:
          - $ref: '#/components/schemas/TestSetConversationId'
          - description: The conversation Id of the test result evaluation item.
        endToEndResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          - description: The end-to-end success or failure of the test result evaluation
              item.
        speechTranscriptionResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          - description: The speech transcription success or failure of the test result
              evaluation item.
        intentClassificationResults:
          allOf:
          - $ref: '#/components/schemas/ConversationLevelIntentClassificationResults'
          - description: The intent classification of the test result evaluation item.
        slotResolutionResults:
          allOf:
          - $ref: '#/components/schemas/ConversationLevelSlotResolutionResults'
          - description: The slot success or failure of the test result evaluation
              item.
      required:
      - conversationId
      - endToEndResult
      - intentClassificationResults
      - slotResolutionResults
      type: object
    ConversationLevelTestResultItemList:
      items:
        $ref: '#/components/schemas/ConversationLevelTestResultItem'
      type: array
    ConversationLevelTestResults:
      description: The test set results data at the conversation level.
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ConversationLevelTestResultItemList'
          - description: The item list in the test set results data at the conversation
              level.
      required:
      - items
      type: object
    ConversationLogSettings:
      description: "Configures conversation logging that saves audio, text, and metadata\
        \ for the conversations with your users."
      properties:
        textLogSettings:
          allOf:
          - $ref: '#/components/schemas/TextLogSettingsList'
          - description: The Amazon CloudWatch Logs settings for logging text and
              metadata.
        audioLogSettings:
          allOf:
          - $ref: '#/components/schemas/AudioLogSettingsList'
          - description: The Amazon S3 settings for logging audio to an S3 bucket.
      type: object
    ConversationLogsDataSourceFilterBy:
      description: The selected data source to filter the conversation log.
      properties:
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The start time for the conversation log.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The end time for the conversation log.
        inputMode:
          allOf:
          - $ref: '#/components/schemas/ConversationLogsInputModeFilter'
          - description: 'The selection to filter by input mode for the conversation
              logs. '
      required:
      - endTime
      - inputMode
      - startTime
      type: object
    ConversationLogsInputModeFilter:
      enum:
      - Speech
      - Text
      type: string
    Count:
      type: integer
    SentimentAnalysisSettings:
      description: Determines whether Amazon Lex will use Amazon Comprehend to detect
        the sentiment of user utterances.
      example:
        detectSentiment: ""
      properties:
        detectSentiment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Sets whether Amazon Lex uses Amazon Comprehend to detect
              the sentiment of user utterances.
      required:
      - detectSentiment
      type: object
    CreateBotAliasRequest:
      example:
        botAliasLocaleSettings: ""
        sentimentAnalysisSettings:
          detectSentiment: ""
        description: ""
        botAliasName: ""
        botVersion: ""
        conversationLogSettings:
          textLogSettings: ""
          audioLogSettings: ""
        tags: ""
      properties:
        botAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The alias to create. The name must be unique for the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the alias. Use this description to help
              identify the alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          - description: The version of the bot that this alias points to. You can
              use the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_UpdateBotAlias.html">UpdateBotAlias</a>
              operation to change the bot version associated with the alias.
        botAliasLocaleSettings:
          allOf:
          - $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          - description: Maps configuration information to a specific locale. You
              can use this parameter to specify a specific Lambda function to run
              different functions in different locales.
        conversationLogSettings:
          $ref: '#/components/schemas/CreateBotAliasRequest_conversationLogSettings'
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of tags to add to the bot alias. You can only add\
              \ tags when you create an alias, you can't use the <code>UpdateBotAlias</code>\
              \ operation to update the tags on a bot alias. To update tags, use the\
              \ <code>TagResource</code> operation."
      required:
      - botAliasName
      title: CreateBotAliasRequest
      type: object
    CreateBotLocaleRequest:
      example:
        nluIntentConfidenceThreshold: ""
        description: ""
        voiceSettings:
          voiceId: ""
          engine: ""
        localeId: ""
      properties:
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "The identifier of the language and locale that the bot will\
              \ be used in. The string must match one of the supported locales. All\
              \ of the intents, slot types, and slots used in the bot must have the\
              \ same locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
              >Supported languages</a>."
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the bot locale. Use this to help identify
              the bot locale in lists.
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          - description: "<p>Determines the threshold where Amazon Lex will insert\
              \ the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>,\
              \ or both when returning alternative intents. <code>AMAZON.FallbackIntent</code>\
              \ and <code>AMAZON.KendraSearchIntent</code> are only inserted if they\
              \ are configured for the bot.</p> <p>For example, suppose a bot is configured\
              \ with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>.\
              \ Amazon Lex returns three alternative intents with the following confidence\
              \ scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response\
              \ from the <code>RecognizeText</code> operation would be:</p> <ul> <li>\
              \ <p>AMAZON.FallbackIntent</p> </li> <li> <p>IntentA</p> </li> <li>\
              \ <p>IntentB</p> </li> <li> <p>IntentC</p> </li> </ul>"
        voiceSettings:
          $ref: '#/components/schemas/CreateBotLocaleResponse_voiceSettings'
      required:
      - localeId
      - nluIntentConfidenceThreshold
      title: CreateBotLocaleRequest
      type: object
    CreateBotRequest:
      example:
        testBotAliasTags: ""
        botName: ""
        roleArn: ""
        botTags: ""
        botType: ""
        description: ""
        dataPrivacy:
          childDirected: ""
        idleSessionTTLInSeconds: ""
        botMembers: ""
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the bot. The bot name must be unique in the account
              that creates the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the bot. It appears in lists to help you
              identify a particular bot.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The Amazon Resource Name (ARN) of an IAM role that has permission
              to access the bot.
        dataPrivacy:
          $ref: '#/components/schemas/CreateBotRequest_dataPrivacy'
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          - description: "<p>The time, in seconds, that Amazon Lex should keep information\
              \ about a user's conversation with the bot. </p> <p>A user interaction\
              \ remains active for the amount of time specified. If no conversation\
              \ occurs during this time, the session expires and Amazon Lex deletes\
              \ any data provided before the timeout.</p> <p>You can specify between\
              \ 60 (1 minute) and 86,400 (24 hours) seconds.</p>"
        botTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of tags to add to the bot. You can only add tags\
              \ when you create a bot. You can't use the <code>UpdateBot</code> operation\
              \ to update tags. To update tags, use the <code>TagResource</code> operation."
        testBotAliasTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of tags to add to the test alias for a bot. You can\
              \ only add tags when you create a bot. You can't use the <code>UpdateAlias</code>\
              \ operation to update tags. To update tags on the test alias, use the\
              \ <code>TagResource</code> operation."
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          - description: The type of a bot to create.
        botMembers:
          allOf:
          - $ref: '#/components/schemas/BotMembers'
          - description: The list of bot members in a network to be created.
      required:
      - botName
      - dataPrivacy
      - idleSessionTTLInSeconds
      - roleArn
      title: CreateBotRequest
      type: object
    CreateBotVersionRequest:
      example:
        botVersionLocaleSpecification: ""
        description: ""
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the version. Use the description to help
              identify the version in lists.
        botVersionLocaleSpecification:
          allOf:
          - $ref: '#/components/schemas/BotVersionLocaleSpecification'
          - description: "Specifies the locales that Amazon Lex adds to this version.\
              \ You can choose the <code>Draft</code> version or any other previously\
              \ published version for each locale. When you specify a source version,\
              \ the locale data is copied from the source version to the new version."
      required:
      - botVersionLocaleSpecification
      title: CreateBotVersionRequest
      type: object
    ExportResourceSpecification:
      description: "Provides information about the bot or bot locale that you want\
        \ to export. You can specify the <code>botExportSpecification</code> or the\
        \ <code>botLocaleExportSpecification</code>, but not both."
      properties:
        botExportSpecification:
          $ref: '#/components/schemas/CreateExport_request_resourceSpecification_botExportSpecification'
        botLocaleExportSpecification:
          $ref: '#/components/schemas/CreateExport_request_resourceSpecification_botLocaleExportSpecification'
        customVocabularyExportSpecification:
          $ref: '#/components/schemas/CreateExport_request_resourceSpecification_customVocabularyExportSpecification'
        testSetExportSpecification:
          $ref: '#/components/schemas/CreateExport_request_resourceSpecification_testSetExportSpecification'
      type: object
    ImportExportFileFormat:
      enum:
      - LexJson
      - TSV
      - CSV
      type: string
    ImportExportFilePassword:
      format: password
      maxLength: 1024
      minLength: 1
      type: string
    CreateExportRequest:
      example:
        filePassword: ""
        resourceSpecification:
          testSetExportSpecification:
            testSetId: ""
          customVocabularyExportSpecification:
            botId: ""
            botVersion: ""
            localeId: ""
          botExportSpecification:
            botId: ""
            botVersion: ""
          botLocaleExportSpecification:
            botId: ""
            botVersion: ""
            localeId: ""
        fileFormat: ""
      properties:
        resourceSpecification:
          $ref: '#/components/schemas/CreateExportRequest_resourceSpecification'
        fileFormat:
          allOf:
          - $ref: '#/components/schemas/ImportExportFileFormat'
          - description: The file format of the bot or bot locale definition files.
        filePassword:
          allOf:
          - $ref: '#/components/schemas/ImportExportFilePassword'
          - description: "An password to use to encrypt the exported archive. Using\
              \ a password is optional, but you should encrypt the archive to protect\
              \ the data in transit between Amazon Lex and your local computer."
      required:
      - fileFormat
      - resourceSpecification
      title: CreateExportRequest
      type: object
    ExportStatus:
      enum:
      - InProgress
      - Completed
      - Failed
      - Deleting
      type: string
    DialogCodeHookSettings:
      description: Settings that determine the Lambda function that Amazon Lex uses
        for processing user responses.
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Enables the dialog code hook so that it processes user requests.
      required:
      - enabled
      type: object
    FulfillmentCodeHookSettings:
      description: Determines if a Lambda function should be invoked for a specific
        intent.
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Indicates whether a Lambda function should be invoked to
              fulfill a specific intent.
        postFulfillmentStatusSpecification:
          $ref: '#/components/schemas/CreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification'
        fulfillmentUpdatesSpecification:
          $ref: '#/components/schemas/CreateIntent_request_fulfillmentCodeHook_fulfillmentUpdatesSpecification'
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: "Determines whether the fulfillment code hook is used. When\
              \ <code>active</code> is false, the code hook doesn't run."
      required:
      - enabled
      type: object
    IntentConfirmationSetting:
      description: Provides a prompt for making sure that the user is ready for the
        intent to be fulfilled.
      properties:
        promptSpecification:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_promptSpecification'
        declinationResponse:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_declinationResponse'
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: "Specifies whether the intent's confirmation is sent to the\
              \ user. When this field is false, confirmation and declination responses\
              \ aren't sent. If the <code>active</code> field isn't specified, the\
              \ default is true."
        confirmationResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        confirmationNextStep:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_confirmationNextStep'
        confirmationConditional:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_confirmationConditional'
        declinationNextStep:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_declinationNextStep'
        declinationConditional:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_declinationConditional'
        failureResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        failureNextStep:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_failureNextStep'
        failureConditional:
          $ref: '#/components/schemas/ConditionalSpecification'
        codeHook:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_codeHook'
        elicitationCodeHook:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_elicitationCodeHook'
      required:
      - promptSpecification
      type: object
    IntentClosingSetting:
      description: Provides a statement the Amazon Lex conveys to the user when the
        intent is successfully fulfilled.
      properties:
        closingResponse:
          $ref: '#/components/schemas/CreateIntent_request_intentClosingSetting_closingResponse'
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: "Specifies whether an intent's closing response is used.\
              \ When this field is false, the closing response isn't sent to the user.\
              \ If the <code>active</code> field isn't specified, the default is true."
        nextStep:
          $ref: '#/components/schemas/CreateIntent_request_intentClosingSetting_nextStep'
        conditional:
          $ref: '#/components/schemas/CreateIntent_request_intentClosingSetting_conditional'
      type: object
    InputContextsList:
      items:
        $ref: '#/components/schemas/InputContext'
      maxItems: 5
      minItems: 0
      type: array
    OutputContextsList:
      items:
        $ref: '#/components/schemas/OutputContext'
      maxItems: 10
      minItems: 0
      type: array
    KendraConfiguration:
      description: "Provides configuration information for the <code>AMAZON.KendraSearchIntent</code>\
        \ intent. When you use this intent, Amazon Lex searches the specified Amazon\
        \ Kendra index and returns documents from the index that match the user's\
        \ utterance."
      properties:
        kendraIndex:
          allOf:
          - $ref: '#/components/schemas/KendraIndexArn'
          - description: The Amazon Resource Name (ARN) of the Amazon Kendra index
              that you want the <code>AMAZON.KendraSearchIntent</code> intent to search.
              The index must be in the same account and Region as the Amazon Lex bot.
        queryFilterStringEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Determines whether the <code>AMAZON.KendraSearchIntent</code>
              intent uses a custom query string to query the Amazon Kendra index.
        queryFilterString:
          allOf:
          - $ref: '#/components/schemas/QueryFilterString'
          - description: "A query filter that Amazon Lex sends to Amazon Kendra to\
              \ filter the response from a query. The filter is in the format defined\
              \ by Amazon Kendra. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/filtering.html\"\
              >Filtering queries</a>."
      required:
      - kendraIndex
      type: object
    InitialResponseSetting:
      description: Configuration setting for a response sent to the user before Amazon
        Lex starts eliciting slots.
      properties:
        initialResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        nextStep:
          $ref: '#/components/schemas/CreateIntent_request_initialResponseSetting_nextStep'
        conditional:
          $ref: '#/components/schemas/ConditionalSpecification'
        codeHook:
          $ref: '#/components/schemas/DialogCodeHookInvocationSetting'
      type: object
    CreateIntentRequest:
      example:
        sampleUtterances: ""
        parentIntentSignature: ""
        inputContexts: ""
        outputContexts: ""
        intentConfirmationSetting:
          declinationResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          active: ""
          confirmationNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
          declinationNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          promptSpecification:
            messageGroups: ""
            maxRetries: ""
            allowInterrupt: ""
            promptAttemptsSpecification: ""
            messageSelectionStrategy: ""
          confirmationConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          confirmationResponse:
            messageGroups: ""
            allowInterrupt: ""
          elicitationCodeHook:
            enableCodeHookInvocation: ""
            invocationLabel: ""
          declinationConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
        intentName: ""
        description: ""
        kendraConfiguration:
          kendraIndex: ""
          queryFilterStringEnabled: ""
          queryFilterString: ""
        fulfillmentCodeHook:
          active: ""
          postFulfillmentStatusSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          fulfillmentUpdatesSpecification:
            active: ""
            startResponse:
              messageGroups: ""
              allowInterrupt: ""
              delayInSeconds: ""
            updateResponse:
              messageGroups: ""
              allowInterrupt: ""
              frequencyInSeconds: ""
            timeoutInSeconds: ""
          enabled: ""
        intentClosingSetting:
          conditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          closingResponse:
            messageGroups: ""
            allowInterrupt: ""
          active: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        dialogCodeHook:
          enabled: ""
        initialResponseSetting:
          conditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          initialResponse:
            messageGroups: ""
            allowInterrupt: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the intent. Intent names must be unique in the
              locale that contains the intent and cannot match the name of any built-in
              intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the intent. Use the description to help
              identify the intent in lists.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          - description: A unique identifier for the built-in intent to base this
              intent on.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          - description: "<p>An array of strings that a user might say to signal the\
              \ intent. For example, \"I want a pizza\", or \"I want a {PizzaSize}\
              \ pizza\". </p> <p>In an utterance, slot names are enclosed in curly\
              \ braces (\"{\", \"}\") to indicate where they should be displayed in\
              \ the utterance shown to the user.. </p>"
        dialogCodeHook:
          $ref: '#/components/schemas/CreateIntentRequest_dialogCodeHook'
        fulfillmentCodeHook:
          $ref: '#/components/schemas/CreateIntentRequest_fulfillmentCodeHook'
        intentConfirmationSetting:
          $ref: '#/components/schemas/CreateIntentRequest_intentConfirmationSetting'
        intentClosingSetting:
          $ref: '#/components/schemas/CreateIntentRequest_intentClosingSetting'
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextsList'
          - description: "<p>A list of contexts that must be active for this intent\
              \ to be considered by Amazon Lex.</p> <p>When an intent has an input\
              \ context list, Amazon Lex only considers using the intent in an interaction\
              \ with the user when the specified contexts are included in the active\
              \ context list for the session. If the contexts are not active, then\
              \ Amazon Lex will not use the intent.</p> <p>A context can be automatically\
              \ activated using the <code>outputContexts</code> property or it can\
              \ be set at runtime.</p> <p> For example, if there are two intents with\
              \ different input contexts that respond to the same utterances, only\
              \ the intent with the active context will respond.</p> <p>An intent\
              \ may have up to 5 input contexts. If an intent has multiple input contexts,\
              \ all of the contexts must be active to consider the intent.</p>"
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextsList'
          - description: "<p>A lists of contexts that the intent activates when it\
              \ is fulfilled.</p> <p>You can use an output context to indicate the\
              \ intents that Amazon Lex should consider for the next turn of the conversation\
              \ with a customer. </p> <p>When you use the <code>outputContextsList</code>\
              \ property, all of the contexts specified in the list are activated\
              \ when the intent is fulfilled. You can set up to 10 output contexts.\
              \ You can also set the number of conversation turns that the context\
              \ should be active, or the length of time that the context should be\
              \ active.</p>"
        kendraConfiguration:
          $ref: '#/components/schemas/CreateIntentRequest_kendraConfiguration'
        initialResponseSetting:
          $ref: '#/components/schemas/CreateIntentResponse_initialResponseSetting'
      required:
      - intentName
      title: CreateIntentRequest
      type: object
    Policy:
      minLength: 2
      type: string
    CreateResourcePolicyRequest:
      properties:
        policy:
          allOf:
          - $ref: '#/components/schemas/Policy'
          - description: "<p>A resource policy to add to the resource. The policy\
              \ is a JSON structure that contains one or more statements that define\
              \ the policy. The policy must follow the IAM syntax. For more information\
              \ about the contents of a JSON policy document, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html\"\
              > IAM JSON policy reference </a>. </p> <p>If the policy isn't valid,\
              \ Amazon Lex returns a validation exception.</p>"
      required:
      - policy
      title: CreateResourcePolicyRequest
      type: object
    RevisionId:
      maxLength: 5
      minLength: 1
      pattern: "^[0-9]+$"
      type: string
    Effect:
      enum:
      - Allow
      - Deny
      type: string
    PrincipalList:
      items:
        $ref: '#/components/schemas/Principal'
      type: array
    OperationList:
      items:
        $ref: '#/components/schemas/Operation'
      type: array
    CreateResourcePolicyStatementRequest:
      example:
        principal: ""
        condition: ""
        effect: ""
        statementId: ""
        action: ""
      properties:
        statementId:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: "The name of the statement. The ID is the same as the <code>Sid</code>\
              \ IAM property. The statement name must be unique within the policy.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html\"\
              >IAM JSON policy elements: Sid</a>. "
        effect:
          allOf:
          - $ref: '#/components/schemas/Effect'
          - description: Determines whether the statement allows or denies access
              to the resource.
        principal:
          allOf:
          - $ref: '#/components/schemas/PrincipalList'
          - description: "An IAM principal, such as an IAM user, IAM role, or Amazon\
              \ Web Services services that is allowed or denied access to a resource.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\"\
              >Amazon Web Services JSON policy elements: Principal</a>."
        action:
          allOf:
          - $ref: '#/components/schemas/OperationList'
          - description: "The Amazon Lex action that this policy either allows or\
              \ denies. The action must apply to the resource type of the specified\
              \ ARN. For more information, see <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html\"\
              > Actions, resources, and condition keys for Amazon Lex V2</a>."
        condition:
          allOf:
          - $ref: '#/components/schemas/ConditionMap'
          - description: "<p>Specifies a condition when the policy is in effect. If\
              \ the principal of the policy is a service principal, you must provide\
              \ two condition blocks, one with a SourceAccount global condition key\
              \ and one with a SourceArn global condition key.</p> <p>For more information,\
              \ see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html\"\
              >IAM JSON policy elements: Condition </a>.</p>"
      required:
      - action
      - effect
      - principal
      - statementId
      title: CreateResourcePolicyStatementRequest
      type: object
    SlotValueElicitationSetting:
      description: Specifies the elicitation setting details eliciting a slot.
      properties:
        defaultValueSpecification:
          $ref: '#/components/schemas/CreateSlot_request_valueElicitationSetting_defaultValueSpecification'
        slotConstraint:
          allOf:
          - $ref: '#/components/schemas/SlotConstraint'
          - description: Specifies whether the slot is required or optional.
        promptSpecification:
          $ref: '#/components/schemas/CreateSlot_request_valueElicitationSetting_promptSpecification'
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          - description: "If you know a specific pattern that users might respond\
              \ to an Amazon Lex request for a slot value, you can provide those utterances\
              \ to improve accuracy. This is optional. In most cases, Amazon Lex is\
              \ capable of understanding user utterances."
        waitAndContinueSpecification:
          $ref: '#/components/schemas/WaitAndContinueSpecification'
        slotCaptureSetting:
          $ref: '#/components/schemas/CreateSlot_request_valueElicitationSetting_slotCaptureSetting'
      required:
      - slotConstraint
      type: object
    ObfuscationSetting:
      description: 'Determines whether Amazon Lex obscures slot values in conversation
        logs. '
      properties:
        obfuscationSettingType:
          allOf:
          - $ref: '#/components/schemas/ObfuscationSettingType'
          - description: Value that determines whether Amazon Lex obscures slot values
              in conversation logs. The default is to obscure the values.
      required:
      - obfuscationSettingType
      type: object
    MultipleValuesSetting:
      description: Indicates whether a slot can return multiple values.
      properties:
        allowMultipleValues:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "<p>Indicates whether a slot can return multiple values.\
              \ When <code>true</code>, the slot may return more than one value in\
              \ a response. When <code>false</code>, the slot returns only a single\
              \ value.</p> <p>Multi-value slots are only available in the en-US locale.\
              \ If you set this value to <code>true</code> in any other locale, Amazon\
              \ Lex throws a <code>ValidationException</code>.</p> <p>If the <code>allowMutlipleValues</code>\
              \ is not set, the default value is <code>false</code>.</p>"
      type: object
    SubSlotSetting:
      description: Specifications for the constituent sub slots and the expression
        for the composite slot.
      properties:
        expression:
          allOf:
          - $ref: '#/components/schemas/SubSlotExpression'
          - description: The expression text for defining the constituent sub slots
              in the composite slot using logical AND and OR operators.
        slotSpecifications:
          allOf:
          - $ref: '#/components/schemas/SubSlotSpecificationMap'
          - description: Specifications for the constituent sub slots of a composite
              slot.
      type: object
    CreateSlotRequest:
      example:
        slotName: ""
        subSlotSetting:
          expression: ""
          slotSpecifications: ""
        slotTypeId: ""
        description: ""
        valueElicitationSetting:
          sampleUtterances: ""
          slotConstraint: ""
          waitAndContinueSpecification:
            continueResponse:
              messageGroups: ""
              allowInterrupt: ""
            waitingResponse:
              messageGroups: ""
              allowInterrupt: ""
            active: ""
            stillWaitingResponse:
              messageGroups: ""
              allowInterrupt: ""
              frequencyInSeconds: ""
              timeoutInSeconds: ""
          defaultValueSpecification:
            defaultValueList: ""
          promptSpecification:
            messageGroups: ""
            maxRetries: ""
            allowInterrupt: ""
            promptAttemptsSpecification: ""
            messageSelectionStrategy: ""
          slotCaptureSetting:
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            captureResponse:
              messageGroups: ""
              allowInterrupt: ""
            elicitationCodeHook:
              enableCodeHookInvocation: ""
              invocationLabel: ""
            captureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            captureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            codeHook:
              postCodeHookSpecification:
                successResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                successConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
                successNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                timeoutNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                timeoutResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                failureNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                failureConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
                failureResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                timeoutConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
              active: ""
              enableCodeHookInvocation: ""
              invocationLabel: ""
        obfuscationSetting:
          obfuscationSettingType: ""
        multipleValuesSetting:
          allowMultipleValues: ""
      properties:
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the slot. Slot names must be unique within the
              bot that contains the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the slot. Use this to help identify the
              slot in lists.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          - description: The unique identifier for the slot type associated with this
              slot. The slot type determines the values that can be entered into the
              slot.
        valueElicitationSetting:
          $ref: '#/components/schemas/CreateSlotRequest_valueElicitationSetting'
        obfuscationSetting:
          $ref: '#/components/schemas/CreateSlotRequest_obfuscationSetting'
        multipleValuesSetting:
          $ref: '#/components/schemas/CreateSlotRequest_multipleValuesSetting'
        subSlotSetting:
          $ref: '#/components/schemas/CreateSlotResponse_subSlotSetting'
      required:
      - slotName
      - valueElicitationSetting
      title: CreateSlotRequest
      type: object
    SlotTypeValues:
      items:
        $ref: '#/components/schemas/SlotTypeValue'
      maxItems: 10000
      minItems: 1
      type: array
    SlotValueSelectionSetting:
      description: Contains settings used by Amazon Lex to select a slot value.
      properties:
        resolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/SlotValueResolutionStrategy'
          - description: "<p>Determines the slot resolution strategy that Amazon Lex\
              \ uses to return slot type values. The field can be set to one of the\
              \ following values:</p> <ul> <li> <p> <code>ORIGINAL_VALUE</code> -\
              \ Returns the value entered by the user, if the user value is similar\
              \ to the slot value.</p> </li> <li> <p> <code>TOP_RESOLUTION</code>\
              \ - If there is a resolution list for the slot, return the first value\
              \ in the resolution list as the slot type value. If there is no resolution\
              \ list, null is returned.</p> </li> </ul> <p>If you don't specify the\
              \ <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>"
        regexFilter:
          $ref: '#/components/schemas/CreateSlotType_request_valueSelectionSetting_regexFilter'
        advancedRecognitionSetting:
          $ref: '#/components/schemas/CreateSlotType_request_valueSelectionSetting_advancedRecognitionSetting'
      required:
      - resolutionStrategy
      type: object
    ExternalSourceSetting:
      description: Provides information about the external source of the slot type's
        definition.
      example:
        grammarSlotTypeSetting:
          source:
            s3ObjectKey: ""
            kmsKeyArn: ""
            s3BucketName: ""
      properties:
        grammarSlotTypeSetting:
          $ref: '#/components/schemas/CreateSlotType_request_externalSourceSetting_grammarSlotTypeSetting'
      type: object
    CreateSlotTypeRequest:
      example:
        externalSourceSetting:
          grammarSlotTypeSetting:
            source:
              s3ObjectKey: ""
              kmsKeyArn: ""
              s3BucketName: ""
        parentSlotTypeSignature: ""
        slotTypeName: ""
        description: ""
        valueSelectionSetting:
          resolutionStrategy: ""
          regexFilter:
            pattern: ""
          advancedRecognitionSetting:
            audioRecognitionStrategy: ""
        compositeSlotTypeSetting:
          subSlots: ""
        slotTypeValues: ""
      properties:
        slotTypeName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name for the slot. A slot type name must be unique within
              the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the slot type. Use the description to help
              identify the slot type in lists.
        slotTypeValues:
          allOf:
          - $ref: '#/components/schemas/SlotTypeValues'
          - description: "A list of <code>SlotTypeValue</code> objects that defines\
              \ the values that the slot type can take. Each value can have a list\
              \ of synonyms, additional values that help train the machine learning\
              \ model about the values that it resolves for a slot."
        valueSelectionSetting:
          $ref: '#/components/schemas/CreateSlotTypeRequest_valueSelectionSetting'
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          - description: "<p>The built-in slot type used as a parent of this slot\
              \ type. When you define a parent slot type, the new slot type has the\
              \ configuration of the parent slot type.</p> <p>Only <code>AMAZON.AlphaNumeric</code>\
              \ is supported.</p>"
        externalSourceSetting:
          $ref: '#/components/schemas/CreateSlotTypeRequest_externalSourceSetting'
        compositeSlotTypeSetting:
          $ref: '#/components/schemas/CreateSlotTypeResponse_compositeSlotTypeSetting'
      required:
      - slotTypeName
      title: CreateSlotTypeRequest
      type: object
    TestSetDiscrepancyReportResourceTarget:
      description: Contains information about the resource used for the test set discrepancy
        report.
      properties:
        botAliasTarget:
          $ref: '#/components/schemas/CreateTestSetDiscrepancyReport_request_target_botAliasTarget'
      type: object
    CreateTestSetDiscrepancyReportRequest:
      example:
        target:
          botAliasTarget:
            botAliasId: ""
            botId: ""
            localeId: ""
      properties:
        target:
          $ref: '#/components/schemas/CreateTestSetDiscrepancyReportResponse_target'
      required:
      - target
      title: CreateTestSetDiscrepancyReportRequest
      type: object
    CreateUploadUrlRequest:
      properties: {}
      title: CreateUploadUrlRequest
      type: object
    CustomPayloadValue:
      maxLength: 1000
      minLength: 1
      type: string
    CustomPayload:
      description: A custom response string that Amazon Lex sends to your application.
        You define the content and structure the string.
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/CustomPayloadValue'
          - description: The string that is sent to your application.
      required:
      - value
      type: object
    ItemId:
      maxLength: 32
      minLength: 1
      type: string
    Phrase:
      maxLength: 100
      minLength: 1
      type: string
    Weight:
      maximum: 3
      minimum: 1
      type: integer
    CustomVocabularyStatus:
      enum:
      - Ready
      - Deleting
      - Exporting
      - Importing
      - Creating
      type: string
    DTMFCharacter:
      pattern: "^[A-D0-9#*]{1}$"
      type: string
    MaxUtteranceDigits:
      maximum: 1024
      minimum: 1
      type: integer
    DateRangeFilter:
      description: The object used for specifying the data range that the customer
        wants Amazon Lex to read through in the input transcripts.
      properties:
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp indicating the start date for the date range
              filter.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp indicating the end date for the date range filter.
      required:
      - endDateTime
      - startDateTime
      type: object
    SkipResourceInUseCheck:
      type: boolean
    DeleteBotAliasRequest:
      properties: {}
      title: DeleteBotAliasRequest
      type: object
    DeleteBotLocaleRequest:
      properties: {}
      title: DeleteBotLocaleRequest
      type: object
    DeleteBotRequest:
      properties: {}
      title: DeleteBotRequest
      type: object
    DeleteBotVersionRequest:
      properties: {}
      title: DeleteBotVersionRequest
      type: object
    DeleteCustomVocabularyRequest:
      properties: {}
      title: DeleteCustomVocabularyRequest
      type: object
    DeleteExportRequest:
      properties: {}
      title: DeleteExportRequest
      type: object
    DeleteImportRequest:
      properties: {}
      title: DeleteImportRequest
      type: object
    ImportStatus:
      enum:
      - InProgress
      - Completed
      - Failed
      - Deleting
      type: string
    DeleteIntentRequest:
      properties: {}
      title: DeleteIntentRequest
      type: object
    DeleteResourcePolicyRequest:
      properties: {}
      title: DeleteResourcePolicyRequest
      type: object
    DeleteResourcePolicyStatementRequest:
      properties: {}
      title: DeleteResourcePolicyStatementRequest
      type: object
    DeleteSlotRequest:
      properties: {}
      title: DeleteSlotRequest
      type: object
    DeleteSlotTypeRequest:
      properties: {}
      title: DeleteSlotTypeRequest
      type: object
    DeleteTestSetRequest:
      properties: {}
      title: DeleteTestSetRequest
      type: object
    SessionId:
      maxLength: 100
      minLength: 2
      pattern: "[0-9a-zA-Z._:-]+"
      type: string
    DeleteUtterancesRequest:
      properties: {}
      title: DeleteUtterancesRequest
      type: object
    DescribeBotAliasRequest:
      properties: {}
      title: DescribeBotAliasRequest
      type: object
    ParentBotNetworks:
      items:
        $ref: '#/components/schemas/ParentBotNetwork'
      maxItems: 30
      minItems: 0
      type: array
    DescribeBotLocaleRequest:
      properties: {}
      title: DescribeBotLocaleRequest
      type: object
    ResourceCount:
      type: integer
    FailureReasons:
      items:
        $ref: '#/components/schemas/FailureReason'
      type: array
    RecommendedActions:
      items:
        $ref: '#/components/schemas/RecommendedAction'
      type: array
    DescribeBotRecommendationRequest:
      properties: {}
      title: DescribeBotRecommendationRequest
      type: object
    TranscriptSourceSetting:
      description: Indicates the setting of the location where the transcript is stored.
      properties:
        s3BucketTranscriptSource:
          $ref: '#/components/schemas/StartBotRecommendation_request_transcriptSourceSetting_s3BucketTranscriptSource'
      type: object
    EncryptionSetting:
      description: "The object representing the passwords that were used to encrypt\
        \ the data related to the bot recommendation, as well as the KMS key ARN used\
        \ to encrypt the associated metadata."
      properties:
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          - description: The KMS key ARN used to encrypt the metadata associated with
              the bot recommendation.
        botLocaleExportPassword:
          allOf:
          - $ref: '#/components/schemas/FilePassword'
          - description: The password used to encrypt the recommended bot recommendation
              file.
        associatedTranscriptsPassword:
          allOf:
          - $ref: '#/components/schemas/FilePassword'
          - description: The password used to encrypt the associated transcript file.
      type: object
    DescribeBotRequest:
      properties: {}
      title: DescribeBotRequest
      type: object
    DescribeBotVersionRequest:
      properties: {}
      title: DescribeBotVersionRequest
      type: object
    DescribeCustomVocabularyMetadataRequest:
      properties: {}
      title: DescribeCustomVocabularyMetadataRequest
      type: object
    DescribeExportRequest:
      properties: {}
      title: DescribeExportRequest
      type: object
    DescribeImportRequest:
      properties: {}
      title: DescribeImportRequest
      type: object
    ImportResourceSpecification:
      description: "Provides information about the bot or bot locale that you want\
        \ to import. You can specify the <code>botImportSpecification</code> or the\
        \ <code>botLocaleImportSpecification</code>, but not both."
      properties:
        botImportSpecification:
          $ref: '#/components/schemas/StartImport_request_resourceSpecification_botImportSpecification'
        botLocaleImportSpecification:
          $ref: '#/components/schemas/StartImport_request_resourceSpecification_botLocaleImportSpecification'
        customVocabularyImportSpecification:
          $ref: '#/components/schemas/CustomVocabularyImportSpecification'
        testSetImportResourceSpecification:
          $ref: '#/components/schemas/StartImport_request_resourceSpecification_testSetImportResourceSpecification'
      type: object
    ImportedResourceId:
      maxLength: 10
      minLength: 5
      pattern: "^([0-9a-zA-Z_])+$"
      type: string
    MergeStrategy:
      enum:
      - Overwrite
      - FailOnConflict
      - Append
      type: string
    DescribeIntentRequest:
      properties: {}
      title: DescribeIntentRequest
      type: object
    SlotPrioritiesList:
      items:
        $ref: '#/components/schemas/SlotPriority'
      type: array
    DescribeResourcePolicyRequest:
      properties: {}
      title: DescribeResourcePolicyRequest
      type: object
    DescribeSlotRequest:
      properties: {}
      title: DescribeSlotRequest
      type: object
    DescribeSlotTypeRequest:
      properties: {}
      title: DescribeSlotTypeRequest
      type: object
    DescribeTestExecutionRequest:
      properties: {}
      title: DescribeTestExecutionRequest
      type: object
    TestExecutionStatus:
      enum:
      - Pending
      - Waiting
      - InProgress
      - Completed
      - Failed
      - Stopping
      - Stopped
      type: string
    TestExecutionTarget:
      description: Contains information about the bot used for the test execution.
      properties:
        botAliasTarget:
          $ref: '#/components/schemas/StartTestExecution_request_target_botAliasTarget'
      type: object
    TestExecutionApiMode:
      enum:
      - Streaming
      - NonStreaming
      type: string
    TestExecutionModality:
      enum:
      - Text
      - Audio
      type: string
    DescribeTestSetDiscrepancyReportRequest:
      properties: {}
      title: DescribeTestSetDiscrepancyReportRequest
      type: object
    TestSetDiscrepancyReportStatus:
      enum:
      - InProgress
      - Completed
      - Failed
      type: string
    TestSetDiscrepancyErrors:
      description: Contains details about the errors in the test set discrepancy report
      properties:
        intentDiscrepancies:
          allOf:
          - $ref: '#/components/schemas/TestSetIntentDiscrepancyList'
          - description: Contains information about discrepancies found for intents
              between the test set and the bot.
        slotDiscrepancies:
          allOf:
          - $ref: '#/components/schemas/TestSetSlotDiscrepancyList'
          - description: Contains information about discrepancies found for slots
              between the test set and the bot.
      required:
      - intentDiscrepancies
      - slotDiscrepancies
      type: object
    DescribeTestSetGenerationRequest:
      properties: {}
      title: DescribeTestSetGenerationRequest
      type: object
    TestSetGenerationStatus:
      enum:
      - Generating
      - Ready
      - Failed
      - Pending
      type: string
    TestSetStorageLocation:
      description: Contains information about the location in which the test set is
        stored.
      properties:
        s3BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          - description: The name of the Amazon S3 bucket in which the test set is
              stored.
        s3Path:
          allOf:
          - $ref: '#/components/schemas/S3ObjectPath'
          - description: The path inside the Amazon S3 bucket where the test set is
              stored.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          - description: The Amazon Resource Name (ARN) of an Amazon Web Services
              Key Management Service (KMS) key for encrypting the test set.
      required:
      - s3BucketName
      - s3Path
      type: object
    TestSetGenerationDataSource:
      description: Contains information about the data source from which the test
        set is generated.
      properties:
        conversationLogsDataSource:
          $ref: '#/components/schemas/StartTestSetGeneration_request_generationDataSource_conversationLogsDataSource'
      type: object
    DescribeTestSetRequest:
      properties: {}
      title: DescribeTestSetRequest
      type: object
    TestSetModality:
      enum:
      - Text
      - Audio
      type: string
    TestSetStatus:
      enum:
      - Importing
      - PendingAnnotation
      - Deleting
      - ValidationError
      - Ready
      type: string
    DialogActionType:
      enum:
      - ElicitIntent
      - StartIntent
      - ElicitSlot
      - EvaluateConditional
      - InvokeDialogCodeHook
      - ConfirmIntent
      - FulfillIntent
      - CloseIntent
      - EndConversation
      type: string
    DialogAction:
      description: Defines the action that the bot executes at runtime when the conversation
        reaches this step.
      example:
        suppressNextMessage: ""
        type: ""
        slotToElicit: ""
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/DialogActionType'
          - description: 'The action that the bot should execute. '
        slotToElicit:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: "If the dialog action is <code>ElicitSlot</code>, defines\
              \ the slot to elicit from the user."
        suppressNextMessage:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: When true the next message for the intent is not used.
      required:
      - type
      type: object
    PostDialogCodeHookInvocationSpecification:
      description: Specifies next steps to run after the dialog code hook finishes.
      properties:
        successResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        successNextStep:
          $ref: '#/components/schemas/PostDialogCodeHookInvocationSpecification_successNextStep'
        successConditional:
          $ref: '#/components/schemas/PostDialogCodeHookInvocationSpecification_successConditional'
        failureResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        failureNextStep:
          $ref: '#/components/schemas/PostDialogCodeHookInvocationSpecification_failureNextStep'
        failureConditional:
          $ref: '#/components/schemas/PostDialogCodeHookInvocationSpecification_failureConditional'
        timeoutResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        timeoutNextStep:
          $ref: '#/components/schemas/PostDialogCodeHookInvocationSpecification_timeoutNextStep'
        timeoutConditional:
          $ref: '#/components/schemas/PostDialogCodeHookInvocationSpecification_timeoutConditional'
      type: object
    IntentOverride:
      description: Override settings to configure the intent state.
      example:
        slots: ""
        name: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the intent. Only required when you're switching
              intents.
        slots:
          allOf:
          - $ref: '#/components/schemas/SlotValueOverrideMap'
          - description: A map of all of the slot value overrides for the intent.
              The name of the slot maps to the value of the slot. Slots that are not
              included in the map aren't overridden.
      type: object
    StringMap:
      additionalProperties:
        $ref: '#/components/schemas/String'
      type: object
    ErrorCode:
      enum:
      - DUPLICATE_INPUT
      - RESOURCE_DOES_NOT_EXIST
      - RESOURCE_ALREADY_EXISTS
      - INTERNAL_SERVER_FAILURE
      type: string
    ErrorMessage:
      type: string
    NonEmptyString:
      minLength: 1
      type: string
    ExportFilterName:
      enum:
      - ExportResourceType
      type: string
    ExportFilterOperator:
      enum:
      - CO
      - EQ
      type: string
    ExportFilters:
      items:
        $ref: '#/components/schemas/ExportFilter'
      maxItems: 1
      minItems: 1
      type: array
    ExportSortBy:
      description: Provides information about sorting a list of exports.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/ExportSortAttribute'
          - description: The export field to use for sorting.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list.
      required:
      - attribute
      - order
      type: object
    ExportSummary:
      description: 'Provides summary information about an export in an export list. '
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier that Amazon Lex assigned to the export.
        resourceSpecification:
          $ref: '#/components/schemas/ExportSummary_resourceSpecification'
        fileFormat:
          allOf:
          - $ref: '#/components/schemas/ImportExportFileFormat'
          - description: The file format used in the export files.
        exportStatus:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          - description: The status of the export. When the status is <code>Completed</code>
              the export is ready to download.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the export was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the export was last updated.
      type: object
    ExportSummaryList:
      items:
        $ref: '#/components/schemas/ExportSummary'
      type: array
    FailedCustomVocabularyItem:
      description: The unique failed custom vocabulary item from the custom vocabulary
        list.
      properties:
        itemId:
          allOf:
          - $ref: '#/components/schemas/ItemId'
          - description: The unique item identifer for the failed custom vocabulary
              item from the custom vocabulary list.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          - description: The error message for the failed custom vocabulary item from
              the custom vocabulary list.
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          - description: The unique error code for the failed custom vocabulary item
              from the custom vocabulary list.
      type: object
    FailureReason:
      type: string
    FilterValue:
      maxLength: 100
      minLength: 1
      pattern: "^[0-9a-zA-Z_()\\s-]+$"
      type: string
    FulfillmentStartResponseDelay:
      maximum: 900
      minimum: 1
      type: integer
    MessageGroupsList:
      items:
        $ref: '#/components/schemas/MessageGroup'
      maxItems: 5
      minItems: 1
      type: array
    FulfillmentStartResponseSpecification:
      description: Provides settings for a message that is sent to the user when a
        fulfillment Lambda function starts running.
      properties:
        delayInSeconds:
          allOf:
          - $ref: '#/components/schemas/FulfillmentStartResponseDelay'
          - description: "The delay between when the Lambda fulfillment function starts\
              \ running and the start message is played. If the Lambda function returns\
              \ before the delay is over, the start message isn't played."
        messageGroups:
          allOf:
          - $ref: '#/components/schemas/MessageGroupsList'
          - description: 1 - 5 message groups that contain start messages. Amazon
              Lex chooses one of the messages to play to the user.
        allowInterrupt:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: Determines whether the user can interrupt the start message
              while it is playing.
      required:
      - delayInSeconds
      - messageGroups
      type: object
    FulfillmentTimeout:
      maximum: 900
      minimum: 1
      type: integer
    FulfillmentUpdateResponseFrequency:
      maximum: 900
      minimum: 1
      type: integer
    FulfillmentUpdateResponseSpecification:
      description: Provides settings for a message that is sent periodically to the
        user while a fulfillment Lambda function is running.
      properties:
        frequencyInSeconds:
          allOf:
          - $ref: '#/components/schemas/FulfillmentUpdateResponseFrequency'
          - description: "The frequency that a message is sent to the user. When the\
              \ period ends, Amazon Lex chooses a message from the message groups\
              \ and plays it to the user. If the fulfillment Lambda returns before\
              \ the first period ends, an update message is not played to the user."
        messageGroups:
          allOf:
          - $ref: '#/components/schemas/MessageGroupsList'
          - description: 1 - 5 message groups that contain update messages. Amazon
              Lex chooses one of the messages to play to the user.
        allowInterrupt:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: Determines whether the user can interrupt an update message
              while it is playing.
      required:
      - frequencyInSeconds
      - messageGroups
      type: object
    GetTestExecutionArtifactsUrlRequest:
      properties: {}
      title: GetTestExecutionArtifactsUrlRequest
      type: object
    GrammarSlotTypeSource:
      description: Describes the Amazon S3 bucket name and location for the grammar
        that is the source for the slot type.
      properties:
        s3BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          - description: The name of the Amazon S3 bucket that contains the grammar
              source.
        s3ObjectKey:
          allOf:
          - $ref: '#/components/schemas/S3ObjectPath'
          - description: The path to the grammar in the Amazon S3 bucket.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          - description: "The KMS key required to decrypt the contents of the grammar,\
              \ if any."
      required:
      - s3BucketName
      - s3ObjectKey
      type: object
    ImageResponseCard:
      description: "<p>A card that is shown to the user by a messaging platform. You\
        \ define the contents of the card, the card is displayed by the platform.\
        \ </p> <p>When you use a response card, the response from the user is constrained\
        \ to the text associated with a button on the card.</p>"
      properties:
        title:
          allOf:
          - $ref: '#/components/schemas/AttachmentTitle'
          - description: The title to display on the response card. The format of
              the title is determined by the platform displaying the response card.
        subtitle:
          allOf:
          - $ref: '#/components/schemas/AttachmentTitle'
          - description: The subtitle to display on the response card. The format
              of the subtitle is determined by the platform displaying the response
              card.
        imageUrl:
          allOf:
          - $ref: '#/components/schemas/AttachmentUrl'
          - description: The URL of an image to display on the response card. The
              image URL must be publicly available so that the platform displaying
              the response card has access to the image.
        buttons:
          allOf:
          - $ref: '#/components/schemas/ButtonsList'
          - description: A list of buttons that should be displayed on the response
              card. The arrangement of the buttons is determined by the platform that
              displays the button.
      required:
      - title
      type: object
    ImportFilterName:
      enum:
      - ImportResourceType
      type: string
    ImportFilterOperator:
      enum:
      - CO
      - EQ
      type: string
    ImportFilters:
      items:
        $ref: '#/components/schemas/ImportFilter'
      maxItems: 1
      minItems: 1
      type: array
    ImportResourceType:
      enum:
      - Bot
      - BotLocale
      - CustomVocabulary
      - TestSet
      type: string
    ImportSortBy:
      description: Provides information for sorting a list of imports.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/ImportSortAttribute'
          - description: The export field to use for sorting.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list.
      required:
      - attribute
      - order
      type: object
    ImportSummary:
      description: Provides summary information about an import in an import list.
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier that Amazon Lex assigned to the import.
        importedResourceId:
          allOf:
          - $ref: '#/components/schemas/ImportedResourceId'
          - description: The unique identifier that Amazon Lex assigned to the imported
              resource.
        importedResourceName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name that you gave the imported resource.
        importStatus:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          - description: The status of the resource. When the status is <code>Completed</code>
              the resource is ready to build.
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          - description: The strategy used to merge existing bot or bot locale definitions
              with the imported definition.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the import was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the import was last updated.
        importedResourceType:
          allOf:
          - $ref: '#/components/schemas/ImportResourceType'
          - description: The type of resource that was imported.
      type: object
    ImportSummaryList:
      items:
        $ref: '#/components/schemas/ImportSummary'
      type: array
    RuntimeHints:
      description: "<p>You can provide Amazon Lex with hints to the phrases that a\
        \ customer is likely to use for a slot. When a slot with hints is resolved,\
        \ the phrases in the runtime hints are preferred in the resolution. You can\
        \ provide hints for a maximum of 100 intents. You can provide a maximum of\
        \ 100 slots.</p> <p>Before you can use runtime hints with an existing bot,\
        \ you must first rebuild the bot.</p> <p>For more information, see <a href=\"\
        https://docs.aws.amazon.com/lexv2/latest/dg/using-hints.html\">Using runtime\
        \ hints to improve recognition of slot values</a>.</p>"
      properties:
        slotHints:
          allOf:
          - $ref: '#/components/schemas/SlotHintsIntentMap'
          - description: "<p>A list of the slots in the intent that should have runtime\
              \ hints added, and the phrases that should be added for each slot.</p>\
              \ <p>The first level of the <code>slotHints</code> map is the name of\
              \ the intent. The second level is the name of the slot within the intent.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/using-hints.html\"\
              >Using hints to improve accuracy</a>.</p> <p>The intent name and slot\
              \ name must exist.</p>"
      type: object
    InputSessionStateSpecification:
      description: Specifications for the current state of the dialog between the
        user and the bot in the test set.
      properties:
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: Session attributes for the session state.
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/ActiveContextList'
          - description: Active contexts for the session state.
        runtimeHints:
          $ref: '#/components/schemas/InputSessionStateSpecification_runtimeHints'
      type: object
    IntentClassificationTestResultItemCounts:
      description: The number of items in the intent classification test.
      properties:
        totalResultCount:
          allOf:
          - $ref: '#/components/schemas/Count'
          - description: The total number of results in the intent classification
              test.
        speechTranscriptionResultCounts:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatusCountMap'
          - description: "The number of matched, mismatched, and execution error results\
              \ for speech transcription for the intent."
        intentMatchResultCounts:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatusCountMap'
          - description: The number of matched and mismatched results for intent recognition
              for the intent.
      required:
      - intentMatchResultCounts
      - totalResultCount
      type: object
    IntentClassificationTestResultItem:
      description: Information for an intent that is classified by the test workbench.
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the intent.
        multiTurnConversation:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Indicates whether the conversation involves multiple turns
              or not.
        resultCounts:
          $ref: '#/components/schemas/IntentClassificationTestResultItem_resultCounts'
      required:
      - intentName
      - multiTurnConversation
      - resultCounts
      type: object
    TestResultMatchStatusCountMap:
      additionalProperties:
        $ref: '#/components/schemas/Count'
      type: object
    IntentClassificationTestResultItemList:
      items:
        $ref: '#/components/schemas/IntentClassificationTestResultItem'
      type: array
    IntentClassificationTestResults:
      description: 'Information for the results of the intent classification test. '
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/IntentClassificationTestResultItemList'
          - description: A list of the results for the intent classification test.
      required:
      - items
      type: object
    IntentFilterName:
      enum:
      - IntentName
      type: string
    IntentFilterOperator:
      enum:
      - CO
      - EQ
      type: string
    IntentFilters:
      items:
        $ref: '#/components/schemas/IntentFilter'
      maxItems: 1
      minItems: 1
      type: array
    SlotResolutionTestResultItems:
      items:
        $ref: '#/components/schemas/SlotResolutionTestResultItem'
      type: array
    IntentLevelSlotResolutionTestResultItem:
      description: Information about intent-level slot resolution in a test result.
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the intent that was recognized.
        multiTurnConversation:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Indicates whether the conversation involves multiple turns
              or not.
        slotResolutionResults:
          allOf:
          - $ref: '#/components/schemas/SlotResolutionTestResultItems'
          - description: The results for the slot resolution in the test execution
              result.
      required:
      - intentName
      - multiTurnConversation
      - slotResolutionResults
      type: object
    IntentLevelSlotResolutionTestResultItemList:
      items:
        $ref: '#/components/schemas/IntentLevelSlotResolutionTestResultItem'
      type: array
    IntentLevelSlotResolutionTestResults:
      description: Indicates the success or failure of slots at the intent level.
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/IntentLevelSlotResolutionTestResultItemList'
          - description: Indicates the items for the slot level resolution for the
              intents.
      required:
      - items
      type: object
    SlotValueOverrideMap:
      additionalProperties:
        $ref: '#/components/schemas/SlotValueOverride'
      type: object
    IntentSortBy:
      description: Specifies attributes for sorting a list of intents.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/IntentSortAttribute'
          - description: The attribute to use to sort the list of intents.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can choose ascending or descending.
      required:
      - attribute
      - order
      type: object
    IntentState:
      enum:
      - Failed
      - Fulfilled
      - InProgress
      - ReadyForFulfillment
      - Waiting
      - FulfillmentInProgress
      type: string
    IntentSummary:
      description: Summary information about an intent returned by the <code>ListIntents</code>
        operation.
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier assigned to the intent. Use this ID
              to get detailed information about the intent with the <code>DescribeIntent</code>
              operation.
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the intent.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          - description: "If this intent is derived from a built-in intent, the name\
              \ of the parent intent."
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextsList'
          - description: The input contexts that must be active for this intent to
              be considered for recognition.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextsList'
          - description: The output contexts that are activated when this intent is
              fulfilled.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp of the date and time that the intent was last
              updated.
      type: object
    IntentSummaryList:
      items:
        $ref: '#/components/schemas/IntentSummary'
      type: array
    InvokedIntentSample:
      description: An object containing the name of an intent that was invoked.
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of an intent that was invoked.
      type: object
    InvokedIntentSamples:
      items:
        $ref: '#/components/schemas/InvokedIntentSample'
      type: array
    LambdaARN:
      maxLength: 2048
      minLength: 20
      pattern: "arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?"
      type: string
    LexTranscriptFilter:
      description: The object that contains transcript filter details that are associated
        with a bot recommendation.
      properties:
        dateRangeFilter:
          $ref: '#/components/schemas/LexTranscriptFilter_dateRangeFilter'
      type: object
    UtteranceAggregationDuration:
      description: Provides parameters for setting the time window and duration for
        aggregating utterance data.
      properties:
        relativeAggregationDuration:
          $ref: '#/components/schemas/ListAggregatedUtterances_request_aggregationDuration_relativeAggregationDuration'
      required:
      - relativeAggregationDuration
      type: object
    MaxResults:
      maximum: 1000
      minimum: 1
      type: integer
    NextToken:
      type: string
    ListAggregatedUtterancesRequest:
      example:
        botAliasId: ""
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
        filters: ""
        aggregationDuration:
          relativeAggregationDuration:
            timeDimension: ""
            timeValue: ""
        botVersion: ""
        localeId: ""
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: "The identifier of the bot alias associated with this request.\
              \ If you specify the bot alias, you can't specify the bot version."
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: "The identifier of the bot version associated with this request.\
              \ If you specify the bot version, you can't specify the bot alias."
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "The identifier of the language and locale where the utterances\
              \ were collected. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
              >Supported languages</a>."
        aggregationDuration:
          $ref: '#/components/schemas/ListAggregatedUtterancesRequest_aggregationDuration'
        sortBy:
          $ref: '#/components/schemas/ListAggregatedUtterancesRequest_sortBy'
        filters:
          allOf:
          - $ref: '#/components/schemas/AggregatedUtterancesFilters'
          - description: Provides the specification of a filter used to limit the
              utterances in the response to only those that match the filter specification.
              You can only specify one filter and one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of utterances to return in each page\
              \ of results. If there are fewer results than the maximum page size,\
              \ only the actual number of results are returned. If you don't specify\
              \ the <code>maxResults</code> parameter, 1,000 results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the <code>ListAggregatedUtterances</code>\
              \ operation contains more results that specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response. Use that token in\
              \ the <code>nextToken</code> parameter to return the next page of results."
      required:
      - aggregationDuration
      - localeId
      title: ListAggregatedUtterancesRequest
      type: object
    ListBotAliasesRequest:
      example:
        maxResults: ""
        nextToken: ""
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of aliases to return in each page of\
              \ results. If there are fewer results than the max page size, only the\
              \ actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the <code>ListBotAliases</code> operation\
              \ contains more results than specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response. Use that token in\
              \ the <code>nextToken</code> parameter to return the next page of results."
      title: ListBotAliasesRequest
      type: object
    ListBotLocalesRequest:
      example:
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
        filters: ""
      properties:
        sortBy:
          $ref: '#/components/schemas/ListBotLocalesRequest_sortBy'
        filters:
          allOf:
          - $ref: '#/components/schemas/BotLocaleFilters'
          - description: Provides the specification for a filter used to limit the
              response to only those locales that match the filter specification.
              You can only specify one filter and one value to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of aliases to return in each page of\
              \ results. If there are fewer results than the max page size, only the\
              \ actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the <code>ListBotLocales</code> operation\
              \ contains more results than specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response. Use that token as\
              \ the <code>nextToken</code> parameter to return the next page of results. "
      title: ListBotLocalesRequest
      type: object
    ListBotRecommendationsRequest:
      example:
        maxResults: ""
        nextToken: ""
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of bot recommendations to return in each\
              \ page of results. If there are fewer results than the max page size,\
              \ only the actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the ListBotRecommendation operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response. Use that token in the nextToken\
              \ parameter to return the next page of results."
      title: ListBotRecommendationsRequest
      type: object
    ListBotVersionsRequest:
      example:
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
      properties:
        sortBy:
          $ref: '#/components/schemas/ListBotVersionsRequest_sortBy'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of versions to return in each page of\
              \ results. If there are fewer results than the max page size, only the\
              \ actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response to the <code>ListBotVersion</code> operation\
              \ contains more results than specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response. Use that token in\
              \ the <code>nextToken</code> parameter to return the next page of results."
      title: ListBotVersionsRequest
      type: object
    ListBotsRequest:
      example:
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
        filters: ""
      properties:
        sortBy:
          $ref: '#/components/schemas/ListBotsRequest_sortBy'
        filters:
          allOf:
          - $ref: '#/components/schemas/BotFilters'
          - description: Provides the specification of a filter used to limit the
              bots in the response to only those that match the filter specification.
              You can only specify one filter and one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of bots to return in each page of results.\
              \ If there are fewer results than the maximum page size, only the actual\
              \ number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the <code>ListBots</code> operation\
              \ contains more results than specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response. </p> <p>Use the returned\
              \ token in the <code>nextToken</code> parameter of a <code>ListBots</code>\
              \ request to return the next page of results. For a complete set of\
              \ results, call the <code>ListBots</code> operation until the <code>nextToken</code>\
              \ returned in the response is null.</p>"
      title: ListBotsRequest
      type: object
    ListBuiltInIntentsRequest:
      example:
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
      properties:
        sortBy:
          $ref: '#/components/schemas/ListBuiltInIntentsRequest_sortBy'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/BuiltInsMaxResults'
          - description: "The maximum number of built-in intents to return in each\
              \ page of results. If there are fewer results than the max page size,\
              \ only the actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the <code>ListBuiltInIntents</code>\
              \ operation contains more results than specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response. Use that token in\
              \ the <code>nextToken</code> parameter to return the next page of results."
      title: ListBuiltInIntentsRequest
      type: object
    ListBuiltInSlotTypesRequest:
      example:
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
      properties:
        sortBy:
          $ref: '#/components/schemas/ListBuiltInSlotTypesRequest_sortBy'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/BuiltInsMaxResults'
          - description: "The maximum number of built-in slot types to return in each\
              \ page of results. If there are fewer results than the max page size,\
              \ only the actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the <code>ListBuiltInSlotTypes</code>\
              \ operation contains more results than specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response. Use that token in\
              \ the <code>nextToken</code> parameter to return the next page of results."
      title: ListBuiltInSlotTypesRequest
      type: object
    ListCustomVocabularyItemsRequest:
      example:
        maxResults: ""
        nextToken: ""
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: The maximum number of items returned by the list operation.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The nextToken identifier to the list custom vocabulary request.
      title: ListCustomVocabularyItemsRequest
      type: object
    ListExportsRequest:
      example:
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
        botId: ""
        filters: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier that Amazon Lex assigned to the bot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: 'The version of the bot to list exports for. '
        sortBy:
          $ref: '#/components/schemas/ListExportsRequest_sortBy'
        filters:
          allOf:
          - $ref: '#/components/schemas/ExportFilters'
          - description: Provides the specification of a filter used to limit the
              exports in the response to only those that match the filter specification.
              You can only specify one filter and one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of exports to return in each page of\
              \ results. If there are fewer results than the max page size, only the\
              \ actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the <code>ListExports</code> operation\
              \ contains more results that specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response. </p> <p>Use the returned\
              \ token in the <code>nextToken</code> parameter of a <code>ListExports</code>\
              \ request to return the next page of results. For a complete set of\
              \ results, call the <code>ListExports</code> operation until the <code>nextToken</code>\
              \ returned in the response is null.</p>"
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "Specifies the resources that should be exported. If you\
              \ don't specify a resource type in the <code>filters</code> parameter,\
              \ both bot locales and custom vocabularies are exported."
      title: ListExportsRequest
      type: object
    ListImportsRequest:
      example:
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
        botId: ""
        filters: ""
        botVersion: ""
        localeId: ""
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier that Amazon Lex assigned to the bot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          - description: The version of the bot to list imports for.
        sortBy:
          $ref: '#/components/schemas/ListImportsRequest_sortBy'
        filters:
          allOf:
          - $ref: '#/components/schemas/ImportFilters'
          - description: Provides the specification of a filter used to limit the
              bots in the response to only those that match the filter specification.
              You can only specify one filter and one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of imports to return in each page of\
              \ results. If there are fewer results than the max page size, only the\
              \ actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the <code>ListImports</code> operation\
              \ contains more results than specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response.</p> <p>Use the returned\
              \ token in the <code>nextToken</code> parameter of a <code>ListImports</code>\
              \ request to return the next page of results. For a complete set of\
              \ results, call the <code>ListImports</code> operation until the <code>nextToken</code>\
              \ returned in the response is null.</p>"
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: "Specifies the locale that should be present in the list.\
              \ If you don't specify a resource type in the <code>filters</code> parameter,\
              \ the list contains both bot locales and custom vocabularies."
      title: ListImportsRequest
      type: object
    ListIntentMetricsRequest:
      example:
        startDateTime: ""
        maxResults: ""
        nextToken: ""
        binBy: ""
        metrics: ""
        groupBy: ""
        filters: ""
        endDateTime: ""
      properties:
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp that marks the beginning of the range of time
              for which you want to see intent metrics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the end of the range of time
              for which you want to see intent metrics.
        metrics:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentMetrics'
          - description: "A list of objects, each of which contains a metric you want\
              \ to list, the statistic for the metric you want to return, and the\
              \ order by which to organize the results."
        binBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinByList'
          - description: "A list of objects, each of which contains specifications\
              \ for organizing the results by time."
        groupBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentGroupByList'
          - description: "<p>A list of objects, each of which specifies how to group\
              \ the results. You can group by the following criteria:</p> <ul> <li>\
              \ <p> <code>IntentName</code> – The name of the intent.</p> </li> <li>\
              \ <p> <code>IntentEndState</code> – The final state of the intent. The\
              \ possible end states are detailed in <a href=\"https://docs.aws.amazon.com/analytics-key-definitions-intents\"\
              >Key definitions</a> in the user guide.</p> </li> </ul>"
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentFilters'
          - description: "A list of objects, each of which describes a condition by\
              \ which you want to filter the results."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of results to return in each page of\
              \ results. If there are fewer results than the maximum page size, only\
              \ the actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the ListIntentMetrics operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response.</p> <p>Use the returned token\
              \ in the nextToken parameter of a ListIntentMetrics request to return\
              \ the next page of results. For a complete set of results, call the\
              \ ListIntentMetrics operation until the nextToken returned in the response\
              \ is null.</p>"
      required:
      - endDateTime
      - metrics
      - startDateTime
      title: ListIntentMetricsRequest
      type: object
    ListIntentPathsRequest:
      example:
        startDateTime: ""
        intentPath: ""
        filters: ""
        endDateTime: ""
      properties:
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the beginning of the range of
              time for which you want to see intent path metrics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the end of the range of time
              for which you want to see intent path metrics.
        intentPath:
          allOf:
          - $ref: '#/components/schemas/AnalyticsPath'
          - description: <p>The intent path for which you want to retrieve metrics.
              Use a forward slash to separate intents in the path. For example:</p>
              <ul> <li> <p>/BookCar</p> </li> <li> <p>/BookCar/BookHotel</p> </li>
              <li> <p>/BookHotel/BookCar</p> </li> </ul>
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsPathFilters'
          - description: "A list of objects, each describes a condition by which you\
              \ want to filter the results."
      required:
      - endDateTime
      - intentPath
      - startDateTime
      title: ListIntentPathsRequest
      type: object
    ListIntentStageMetricsRequest:
      example:
        startDateTime: ""
        maxResults: ""
        nextToken: ""
        binBy: ""
        metrics: ""
        groupBy: ""
        filters: ""
        endDateTime: ""
      properties:
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the beginning of the range of
              time for which you want to see intent stage metrics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the end of the range of time
              for which you want to see intent stage metrics.
        metrics:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageMetrics'
          - description: "A list of objects, each of which contains a metric you want\
              \ to list, the statistic for the metric you want to return, and the\
              \ method by which to organize the results."
        binBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinByList'
          - description: "A list of objects, each of which contains specifications\
              \ for organizing the results by time."
        groupBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageGroupByList'
          - description: "<p>A list of objects, each of which specifies how to group\
              \ the results. You can group by the following criteria:</p> <ul> <li>\
              \ <p> <code>IntentStageName</code> – The name of the intent stage.</p>\
              \ </li> <li> <p> <code>SwitchedToIntent</code> – The intent to which\
              \ the conversation was switched (if any).</p> </li> </ul>"
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageFilters'
          - description: "A list of objects, each of which describes a condition by\
              \ which you want to filter the results."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of results to return in each page of\
              \ results. If there are fewer results than the maximum page size, only\
              \ the actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the ListIntentStageMetrics operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response.</p> <p>Use the returned token\
              \ in the nextToken parameter of a ListIntentStageMetrics request to\
              \ return the next page of results. For a complete set of results, call\
              \ the ListIntentStageMetrics operation until the nextToken returned\
              \ in the response is null.</p>"
      required:
      - endDateTime
      - metrics
      - startDateTime
      title: ListIntentStageMetricsRequest
      type: object
    ListIntentsRequest:
      example:
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
        filters: ""
      properties:
        sortBy:
          $ref: '#/components/schemas/ListIntentsRequest_sortBy'
        filters:
          allOf:
          - $ref: '#/components/schemas/IntentFilters'
          - description: Provides the specification of a filter used to limit the
              intents in the response to only those that match the filter specification.
              You can only specify one filter and only one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of intents to return in each page of\
              \ results. If there are fewer results than the max page size, only the\
              \ actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the <code>ListIntents</code> operation\
              \ contains more results than specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response.</p> <p>Use the returned\
              \ token in the <code>nextToken</code> parameter of a <code>ListIntents</code>\
              \ request to return the next page of results. For a complete set of\
              \ results, call the <code>ListIntents</code> operation until the <code>nextToken</code>\
              \ returned in the response is null.</p>"
      title: ListIntentsRequest
      type: object
    ListRecommendedIntentsRequest:
      example:
        nextToken: ""
        maxResults: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the ListRecommendedIntents operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response. Use that token in the nextToken\
              \ parameter to return the next page of results."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of bot recommendations to return in each\
              \ page of results. If there are fewer results than the max page size,\
              \ only the actual number of results are returned."
      title: ListRecommendedIntentsRequest
      type: object
    RecommendedIntentSummaryList:
      items:
        $ref: '#/components/schemas/RecommendedIntentSummary'
      type: array
    SessionDataSortBy:
      description: An object specifying the measure and method by which to sort the
        session analytics data.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionSortByName'
          - description: <p>The measure by which to sort the session analytics data.</p>
              <ul> <li> <p> <code>conversationStartTime</code> – The date and time
              when the conversation began. A conversation is defined as a unique combination
              of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
              </li> <li> <p> <code>numberOfTurns</code> – The number of turns that
              the session took.</p> </li> <li> <p> <code>conversationDurationSeconds</code>
              – The duration of the conversation in seconds.</p> </li> </ul>
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          - description: Specifies whether to sort the results in ascending or descending
              order.
      required:
      - name
      - order
      type: object
    ListSessionAnalyticsDataRequest:
      example:
        startDateTime: ""
        maxResults: ""
        nextToken: ""
        sortBy:
          name: ""
          order: ""
        filters: ""
        endDateTime: ""
      properties:
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the beginning of the range of
              time for which you want to see session analytics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the end of the range of time
              for which you want to see session analytics.
        sortBy:
          $ref: '#/components/schemas/ListSessionAnalyticsDataRequest_sortBy'
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionFilters'
          - description: "A list of objects, each of which describes a condition by\
              \ which you want to filter the results."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of results to return in each page of\
              \ results. If there are fewer results than the maximum page size, only\
              \ the actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the ListSessionAnalyticsData operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response.</p> <p>Use the returned token\
              \ in the nextToken parameter of a ListSessionAnalyticsData request to\
              \ return the next page of results. For a complete set of results, call\
              \ the ListSessionAnalyticsData operation until the nextToken returned\
              \ in the response is null.</p>"
      required:
      - endDateTime
      - startDateTime
      title: ListSessionAnalyticsDataRequest
      type: object
    SessionSpecifications:
      items:
        $ref: '#/components/schemas/SessionSpecification'
      type: array
    ListSessionMetricsRequest:
      example:
        startDateTime: ""
        maxResults: ""
        nextToken: ""
        binBy: ""
        metrics: ""
        groupBy: ""
        filters: ""
        endDateTime: ""
      properties:
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the beginning of the range of
              time for which you want to see session metrics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the end of the range of time
              for which you want to see session metrics.
        metrics:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionMetrics'
          - description: "A list of objects, each of which contains a metric you want\
              \ to list, the statistic for the metric you want to return, and the\
              \ method by which to organize the results."
        binBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinByList'
          - description: "A list of objects, each of which contains specifications\
              \ for organizing the results by time."
        groupBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionGroupByList'
          - description: "<p>A list of objects, each of which specifies how to group\
              \ the results. You can group by the following criteria:</p> <ul> <li>\
              \ <p> <code>ConversationEndState</code> – The final state of the conversation.\
              \ The possible end states are detailed in <a href=\"https://docs.aws.amazon.com/analytics-key-definitions-conversations\"\
              >Key definitions</a> in the user guide.</p> </li> <li> <p> <code>LocaleId</code>\
              \ – The unique identifier of the bot locale.</p> </li> </ul>"
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionFilters'
          - description: "A list of objects, each of which describes a condition by\
              \ which you want to filter the results."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of results to return in each page of\
              \ results. If there are fewer results than the maximum page size, only\
              \ the actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the ListSessionMetrics operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response.</p> <p>Use the returned token\
              \ in the nextToken parameter of a ListSessionMetrics request to return\
              \ the next page of results. For a complete set of results, call the\
              \ ListSessionMetrics operation until the nextToken returned in the response\
              \ is null.</p>"
      required:
      - endDateTime
      - metrics
      - startDateTime
      title: ListSessionMetricsRequest
      type: object
    SlotTypeSortBy:
      description: Specifies attributes for sorting a list of slot types.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSortAttribute'
          - description: The attribute to use to sort the list of slot types.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can say ascending or descending.
      required:
      - attribute
      - order
      type: object
    SlotTypeFilters:
      items:
        $ref: '#/components/schemas/SlotTypeFilter'
      maxItems: 1
      minItems: 1
      type: array
    ListSlotTypesRequest:
      example:
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
        filters: ""
      properties:
        sortBy:
          $ref: '#/components/schemas/ListSlotTypesRequest_sortBy'
        filters:
          allOf:
          - $ref: '#/components/schemas/SlotTypeFilters'
          - description: Provides the specification of a filter used to limit the
              slot types in the response to only those that match the filter specification.
              You can only specify one filter and only one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of slot types to return in each page\
              \ of results. If there are fewer results than the max page size, only\
              \ the actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the <code>ListSlotTypes</code> operation\
              \ contains more results than specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response. Use that token in\
              \ the <code>nextToken</code> parameter to return the next page of results."
      title: ListSlotTypesRequest
      type: object
    SlotTypeSummaryList:
      items:
        $ref: '#/components/schemas/SlotTypeSummary'
      type: array
    SlotSortBy:
      description: Specifies attributes for sorting a list of bots.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/SlotSortAttribute'
          - description: The attribute to use to sort the list.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can choose ascending or descending.
      required:
      - attribute
      - order
      type: object
    SlotFilters:
      items:
        $ref: '#/components/schemas/SlotFilter'
      maxItems: 1
      minItems: 1
      type: array
    ListSlotsRequest:
      example:
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
        filters: ""
      properties:
        sortBy:
          $ref: '#/components/schemas/ListSlotsRequest_sortBy'
        filters:
          allOf:
          - $ref: '#/components/schemas/SlotFilters'
          - description: Provides the specification of a filter used to limit the
              slots in the response to only those that match the filter specification.
              You can only specify one filter and only one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of slots to return in each page of results.\
              \ If there are fewer results than the max page size, only the actual\
              \ number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the <code>ListSlots</code> operation\
              \ contains more results than specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response. Use that token in\
              \ the <code>nextToken</code> parameter to return the next page of results."
      title: ListSlotsRequest
      type: object
    SlotSummaryList:
      items:
        $ref: '#/components/schemas/SlotSummary'
      type: array
    ListTagsForResourceRequest:
      properties: {}
      title: ListTagsForResourceRequest
      type: object
    TestExecutionResultFilterBy:
      description: Contains information about the method by which to filter the results
        of the test execution.
      properties:
        resultTypeFilter:
          allOf:
          - $ref: '#/components/schemas/TestResultTypeFilter'
          - description: Specifies which results to filter. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/test-results-details-test-set.html">Test
              result details"&gt;Test results details</a> for details about different
              types of results.
        conversationLevelTestResultsFilterBy:
          $ref: '#/components/schemas/ListTestExecutionResultItems_request_resultFilterBy_conversationLevelTestResultsFilterBy'
      required:
      - resultTypeFilter
      type: object
    ListTestExecutionResultItemsRequest:
      example:
        maxResults: ""
        nextToken: ""
        resultFilterBy:
          resultTypeFilter: ""
          conversationLevelTestResultsFilterBy:
            endToEndResult: ""
      properties:
        resultFilterBy:
          $ref: '#/components/schemas/ListTestExecutionResultItemsRequest_resultFilterBy'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of test execution result items to return\
              \ in each page. If there are fewer results than the max page size, only\
              \ the actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the <code>ListTestExecutionResultItems</code>\
              \ operation contains more results than specified in the <code>maxResults</code>\
              \ parameter, a token is returned in the response. Use that token in\
              \ the <code>nextToken</code> parameter to return the next page of results."
      required:
      - resultFilterBy
      title: ListTestExecutionResultItemsRequest
      type: object
    TestExecutionResultItems:
      description: "Contains the results of the test execution, grouped by type of\
        \ results. See <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/test-results-details-test-set.html\"\
        >Test result details\"&gt;Test results details</a> for details about different\
        \ types of results."
      properties:
        overallTestResults:
          $ref: '#/components/schemas/TestExecutionResultItems_overallTestResults'
        conversationLevelTestResults:
          $ref: '#/components/schemas/TestExecutionResultItems_conversationLevelTestResults'
        intentClassificationTestResults:
          $ref: '#/components/schemas/TestExecutionResultItems_intentClassificationTestResults'
        intentLevelSlotResolutionTestResults:
          $ref: '#/components/schemas/TestExecutionResultItems_intentLevelSlotResolutionTestResults'
        utteranceLevelTestResults:
          $ref: '#/components/schemas/TestExecutionResultItems_utteranceLevelTestResults'
      type: object
    TestExecutionSortBy:
      description: Contains information about the method by which to sort the instances
        of test executions you have carried out.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/TestExecutionSortAttribute'
          - description: Specifies whether to sort the test set executions by the
              date and time at which the test sets were created.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: Specifies whether to sort in ascending or descending order.
      required:
      - attribute
      - order
      type: object
    ListTestExecutionsRequest:
      example:
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
      properties:
        sortBy:
          $ref: '#/components/schemas/ListTestExecutionsRequest_sortBy'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of test executions to return in each\
              \ page. If there are fewer results than the max page size, only the\
              \ actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the ListTestExecutions operation contains\
              \ more results than specified in the maxResults parameter, a token is\
              \ returned in the response. Use that token in the nextToken parameter\
              \ to return the next page of results."
      title: ListTestExecutionsRequest
      type: object
    TestExecutionSummaryList:
      items:
        $ref: '#/components/schemas/TestExecutionSummary'
      type: array
    ListTestSetRecordsRequest:
      example:
        maxResults: ""
        nextToken: ""
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of test set records to return in each\
              \ page. If there are fewer records than the max page size, only the\
              \ actual number of records are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the ListTestSetRecords operation contains\
              \ more results than specified in the maxResults parameter, a token is\
              \ returned in the response. Use that token in the nextToken parameter\
              \ to return the next page of results."
      title: ListTestSetRecordsRequest
      type: object
    TestSetTurnRecordList:
      items:
        $ref: '#/components/schemas/TestSetTurnRecord'
      type: array
    TestSetSortBy:
      description: Contains information about the methods by which to sort the test
        set.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/TestSetSortAttribute'
          - description: Specifies whether to sort the test sets by name or by the
              time they were last updated.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: Specifies whether to sort in ascending or descending order.
      required:
      - attribute
      - order
      type: object
    ListTestSetsRequest:
      example:
        maxResults: ""
        nextToken: ""
        sortBy:
          attribute: ""
          order: ""
      properties:
        sortBy:
          $ref: '#/components/schemas/ListTestSetsRequest_sortBy'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of test sets to return in each page.\
              \ If there are fewer results than the max page size, only the actual\
              \ number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response from the ListTestSets operation contains\
              \ more results than specified in the maxResults parameter, a token is\
              \ returned in the response. Use that token in the nextToken parameter\
              \ to return the next page of results."
      title: ListTestSetsRequest
      type: object
    TestSetSummaryList:
      items:
        $ref: '#/components/schemas/TestSetSummary'
      type: array
    UtteranceDataSortBy:
      description: An object specifying the measure and method by which to sort the
        utterance data.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceSortByName'
          - description: <p>The measure by which to sort the utterance analytics data.</p>
              <ul> <li> <p> <code>Count</code> – The number of utterances.</p> </li>
              <li> <p> <code>UtteranceTimestamp</code> – The date and time of the
              utterance.</p> </li> </ul>
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          - description: Specifies whether to sort the results in ascending or descending
              order.
      required:
      - name
      - order
      type: object
    ListUtteranceAnalyticsDataRequest:
      example:
        startDateTime: ""
        maxResults: ""
        nextToken: ""
        sortBy:
          name: ""
          order: ""
        filters: ""
        endDateTime: ""
      properties:
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the beginning of the range of
              time for which you want to see utterance analytics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the end of the range of time
              for which you want to see utterance analytics.
        sortBy:
          $ref: '#/components/schemas/ListUtteranceAnalyticsDataRequest_sortBy'
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceFilters'
          - description: "A list of objects, each of which describes a condition by\
              \ which you want to filter the results."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of results to return in each page of\
              \ results. If there are fewer results than the maximum page size, only\
              \ the actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the ListUtteranceAnalyticsData operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response.</p> <p>Use the returned token\
              \ in the nextToken parameter of a ListUtteranceAnalyticsData request\
              \ to return the next page of results. For a complete set of results,\
              \ call the ListUtteranceAnalyticsData operation until the nextToken\
              \ returned in the response is null.</p>"
      required:
      - endDateTime
      - startDateTime
      title: ListUtteranceAnalyticsDataRequest
      type: object
    UtteranceSpecifications:
      items:
        $ref: '#/components/schemas/UtteranceSpecification'
      type: array
    ListUtteranceMetricsRequest:
      example:
        startDateTime: ""
        maxResults: ""
        nextToken: ""
        binBy: ""
        attributes: ""
        metrics: ""
        groupBy: ""
        filters: ""
        endDateTime: ""
      properties:
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the beginning of the range of
              time for which you want to see utterance metrics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that marks the end of the range of time
              for which you want to see utterance metrics.
        metrics:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceMetrics'
          - description: "A list of objects, each of which contains a metric you want\
              \ to list, the statistic for the metric you want to return, and the\
              \ method by which to organize the results."
        binBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinByList'
          - description: "A list of objects, each of which contains specifications\
              \ for organizing the results by time."
        groupBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceGroupByList'
          - description: "<p>A list of objects, each of which specifies how to group\
              \ the results. You can group by the following criteria:</p> <ul> <li>\
              \ <p> <code>UtteranceText</code> – The transcription of the utterance.</p>\
              \ </li> <li> <p> <code>UtteranceState</code> – The state of the utterance.\
              \ The possible states are detailed in <a href=\"https://docs.aws.amazon.com/analytics-key-definitions-utterances\"\
              >Key definitions</a> in the user guide.</p> </li> </ul>"
        attributes:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceAttributes'
          - description: <p>A list containing attributes related to the utterance
              that you want the response to return. The following attributes are possible:</p>
              <ul> <li> <p> <code>LastUsedIntent</code> – The last used intent at
              the time of the utterance.</p> </li> </ul>
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceFilters'
          - description: "A list of objects, each of which describes a condition by\
              \ which you want to filter the results."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of results to return in each page of\
              \ results. If there are fewer results than the maximum page size, only\
              \ the actual number of results are returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>If the response from the ListUtteranceMetrics operation\
              \ contains more results than specified in the maxResults parameter,\
              \ a token is returned in the response.</p> <p>Use the returned token\
              \ in the nextToken parameter of a ListUtteranceMetrics request to return\
              \ the next page of results. For a complete set of results, call the\
              \ ListUtteranceMetrics operation until the nextToken returned in the\
              \ response is null.</p>"
      required:
      - endDateTime
      - metrics
      - startDateTime
      title: ListUtteranceMetricsRequest
      type: object
    PlainTextMessage:
      description: Defines an ASCII text message to send to the user.
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/PlainTextMessageValue'
          - description: The message to send to the user.
      required:
      - value
      type: object
    SSMLMessage:
      description: Defines a Speech Synthesis Markup Language (SSML) prompt.
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/SSMLMessageValue'
          - description: The SSML text that defines the prompt.
      required:
      - value
      type: object
    Message:
      description: The object that provides message text and its type.
      properties:
        plainTextMessage:
          $ref: '#/components/schemas/Message_plainTextMessage'
        customPayload:
          $ref: '#/components/schemas/Message_customPayload'
        ssmlMessage:
          $ref: '#/components/schemas/Message_ssmlMessage'
        imageResponseCard:
          $ref: '#/components/schemas/Message_imageResponseCard'
      type: object
    MessageVariationsList:
      items:
        $ref: '#/components/schemas/Message'
      maxItems: 2
      minItems: 0
      type: array
    MessageGroup:
      description: Provides one or more messages that Amazon Lex should send to the
        user.
      properties:
        message:
          $ref: '#/components/schemas/MessageGroup_message'
        variations:
          allOf:
          - $ref: '#/components/schemas/MessageVariationsList'
          - description: "Message variations to send to the user. When variations\
              \ are defined, Amazon Lex chooses the primary message or one of the\
              \ variations to send to the user."
      required:
      - message
      type: object
    MessageSelectionStrategy:
      enum:
      - Random
      - Ordered
      type: string
    NextIndex:
      maximum: 10000000
      minimum: 0
      type: integer
    ObjectPrefix:
      minLength: 1
      pattern: "^[\\/]\\?\\+[a-zA-Z0-9!_.*'\\(\\)-]\\+\\(\\/[a-zA-Z0-9!_.*'\\(\\)-]\\\
        +\\)*$"
      type: string
    ObjectPrefixes:
      items:
        $ref: '#/components/schemas/ObjectPrefix'
      maxItems: 2
      minItems: 1
      type: array
    OverallTestResultItem:
      description: Information about the overall results for a test execution result.
      properties:
        multiTurnConversation:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Indicates whether the conversation contains multiple turns
              or not.
        totalResultCount:
          allOf:
          - $ref: '#/components/schemas/Count'
          - description: The total number of overall results in the result of the
              test execution.
        speechTranscriptionResultCounts:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatusCountMap'
          - description: The number of speech transcription results in the overall
              test.
        endToEndResultCounts:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatusCountMap'
          - description: The number of results that succeeded.
      required:
      - endToEndResultCounts
      - multiTurnConversation
      - totalResultCount
      type: object
    OverallTestResultItemList:
      items:
        $ref: '#/components/schemas/OverallTestResultItem'
      type: array
    OverallTestResults:
      description: Information about the overall test results.
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/OverallTestResultItemList'
          - description: A list of the overall test results.
      required:
      - items
      type: object
    ParentBotNetwork:
      description: A network of bots.
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the network of bots assigned by Amazon
              Lex.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the network of bots.
      required:
      - botId
      - botVersion
      type: object
    PathFormat:
      description: The object that contains a path format that will be applied when
        Amazon Lex reads the transcript file in the bucket you provide. Specify this
        object if you only want Lex to read a subset of files in your Amazon S3 bucket.
      properties:
        objectPrefixes:
          allOf:
          - $ref: '#/components/schemas/ObjectPrefixes'
          - description: A list of Amazon S3 prefixes that points to sub-folders in
              the Amazon S3 bucket. Specify this list if you only want Lex to read
              the files under this set of sub-folders.
      type: object
    PlainTextMessageValue:
      maxLength: 1000
      minLength: 1
      type: string
    ServicePrincipal:
      maxLength: 1024
      minLength: 15
      pattern: "^[0-9a-zA-Z_.]+$"
      type: string
    PrincipalArn:
      maxLength: 1024
      minLength: 30
      pattern: "^arn:aws:iam::[0-9]{12}:(root|(user|role)/.*)$"
      type: string
    PriorityValue:
      maximum: 100
      minimum: 0
      type: integer
    PromptAttempt:
      description: The attempt name of attempts of a prompt.
      enum:
      - Initial
      - Retry1
      - Retry2
      - Retry3
      - Retry4
      - Retry5
      type: string
    TextInputSpecification:
      description: Specifies the text input specifications.
      properties:
        startTimeoutMs:
          allOf:
          - $ref: '#/components/schemas/TimeInMilliSeconds'
          - description: Time for which a bot waits before re-prompting a customer
              for text input.
      required:
      - startTimeoutMs
      type: object
    PromptAttemptSpecification:
      description: Specifies the settings on a prompt attempt.
      properties:
        allowInterrupt:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: Indicates whether the user can interrupt a speech prompt
              attempt from the bot.
        allowedInputTypes:
          $ref: '#/components/schemas/PromptAttemptSpecification_allowedInputTypes'
        audioAndDTMFInputSpecification:
          $ref: '#/components/schemas/PromptAttemptSpecification_audioAndDTMFInputSpecification'
        textInputSpecification:
          $ref: '#/components/schemas/PromptAttemptSpecification_textInputSpecification'
      required:
      - allowedInputTypes
      type: object
    PromptAttemptsSpecificationMap:
      additionalProperties:
        $ref: '#/components/schemas/PromptAttemptSpecification'
      type: object
    PromptMaxRetries:
      maximum: 5
      minimum: 0
      type: integer
    RecommendedAction:
      type: string
    SampleUtterancesCount:
      type: integer
    RecommendedIntentSummary:
      description: An object that contains a summary of a recommended intent.
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of a recommended intent associated
              with the bot recommendation.
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of a recommended intent associated with the bot
              recommendation.
        sampleUtterancesCount:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesCount'
          - description: The count of sample utterances of a recommended intent that
              is associated with a bot recommendation.
      type: object
    RecordNumber:
      maximum: 200000
      minimum: 1
      type: integer
    RegexPattern:
      maxLength: 300
      minLength: 1
      type: string
    TimeDimension:
      enum:
      - Hours
      - Days
      - Weeks
      type: string
    TimeValue:
      maximum: 24
      minimum: 1
      type: integer
    RuntimeHintValuesList:
      items:
        $ref: '#/components/schemas/RuntimeHintValue'
      maxItems: 100
      minItems: 1
      type: array
    SlotHintsSlotMap:
      additionalProperties:
        $ref: '#/components/schemas/RuntimeHintDetails'
      type: object
    RuntimeHintDetails:
      description: Provides an array of phrases that should be given preference when
        resolving values for a slot.
      properties:
        runtimeHintValues:
          allOf:
          - $ref: '#/components/schemas/RuntimeHintValuesList'
          - description: One or more strings that Amazon Lex should look for in the
              input to the bot. Each phrase is given preference when deciding on slot
              values.
        subSlotHints:
          allOf:
          - $ref: '#/components/schemas/SlotHintsSlotMap'
          - description: "A map of constituent sub slot names inside a composite slot\
              \ in the intent and the phrases that should be added for each sub slot.\
              \ Inside each composite slot hints, this structure provides a mechanism\
              \ to add granular sub slot phrases. Only sub slot hints are supported\
              \ for composite slots. The intent name, composite slot name and the\
              \ constituent sub slot names must exist."
      type: object
    RuntimeHintPhrase:
      maxLength: 140
      minLength: 1
      type: string
    RuntimeHintValue:
      description: Provides the phrase that Amazon Lex should look for in the user's
        input to the bot.
      properties:
        phrase:
          allOf:
          - $ref: '#/components/schemas/RuntimeHintPhrase'
          - description: The phrase that Amazon Lex should look for in the user's
              input to the bot.
      required:
      - phrase
      type: object
    SlotHintsIntentMap:
      additionalProperties:
        $ref: '#/components/schemas/SlotHintsSlotMap'
      type: object
    S3BucketArn:
      maxLength: 2048
      minLength: 1
      pattern: "^arn:[\\w\\-]+:s3:::[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$"
      type: string
    TranscriptFormat:
      enum:
      - Lex
      type: string
    TranscriptFilter:
      description: The object representing the filter that Amazon Lex will use to
        select the appropriate transcript.
      properties:
        lexTranscriptFilter:
          $ref: '#/components/schemas/TranscriptFilter_lexTranscriptFilter'
      type: object
    SSMLMessageValue:
      maxLength: 1000
      minLength: 1
      type: string
    Value:
      maxLength: 140
      minLength: 1
      type: string
    SampleValue:
      description: Defines one of the values for a slot type.
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/Value'
          - description: The value that can be used for a slot type.
      required:
      - value
      type: object
    SearchOrder:
      enum:
      - Ascending
      - Descending
      type: string
    SearchAssociatedTranscriptsRequest:
      example:
        maxResults: ""
        filters: ""
        nextIndex: ""
        searchOrder: ""
      properties:
        searchOrder:
          allOf:
          - $ref: '#/components/schemas/SearchOrder'
          - description: How SearchResults are ordered. Valid values are Ascending
              or Descending. The default is Descending.
        filters:
          allOf:
          - $ref: '#/components/schemas/AssociatedTranscriptFilters'
          - description: A list of filter objects.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of bot recommendations to return in each\
              \ page of results. If there are fewer results than the max page size,\
              \ only the actual number of results are returned."
        nextIndex:
          allOf:
          - $ref: '#/components/schemas/NextIndex'
          - description: "If the response from the SearchAssociatedTranscriptsRequest\
              \ operation contains more results than specified in the maxResults parameter,\
              \ an index is returned in the response. Use that index in the nextIndex\
              \ parameter to return the next page of results."
      required:
      - filters
      title: SearchAssociatedTranscriptsRequest
      type: object
    SessionSpecification:
      description: An object containing information about a specific session.
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: The identifier of the alias of the bot that the session was
              held with.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          - description: The version of the bot that the session was held with.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The locale of the bot that the session was held with.
        channel:
          allOf:
          - $ref: '#/components/schemas/AnalyticsChannel'
          - description: The channel that is integrated with the bot that the session
              was held with.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionId'
          - description: The identifier of the session.
        conversationStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time when the conversation began. A conversation
              is defined as a unique combination of a <code>sessionId</code> and an
              <code>originatingRequestId</code>.
        conversationEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time when the conversation ended. A conversation
              is defined as a unique combination of a <code>sessionId</code> and an
              <code>originatingRequestId</code>.
        conversationDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/AnalyticsLongValue'
          - description: The duration of the conversation in seconds. A conversation
              is defined as a unique combination of a <code>sessionId</code> and an
              <code>originatingRequestId</code>.
        conversationEndState:
          allOf:
          - $ref: '#/components/schemas/ConversationEndState'
          - description: The final state of the conversation. A conversation is defined
              as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.
        mode:
          allOf:
          - $ref: '#/components/schemas/AnalyticsModality'
          - description: <p>The mode of the session. The possible values are as follows:</p>
              <ul> <li> <p> <code>Speech</code> – The session was spoken.</p> </li>
              <li> <p> <code>Text</code> – The session was written.</p> </li> <li>
              <p> <code>DTMF</code> – The session used a touch-tone keypad (Dual Tone
              Multi-Frequency).</p> </li> <li> <p> <code>MultiMode</code> – The session
              used multiple modes.</p> </li> </ul>
        numberOfTurns:
          allOf:
          - $ref: '#/components/schemas/AnalyticsLongValue'
          - description: The number of turns that the session took.
        invokedIntentSamples:
          allOf:
          - $ref: '#/components/schemas/InvokedIntentSamples'
          - description: A list of objects containing the name of an intent that was
              invoked.
        originatingRequestId:
          allOf:
          - $ref: '#/components/schemas/AnalyticsOriginatingRequestId'
          - description: The identifier of the first request in a session.
      type: object
    SlotDefaultValueString:
      maxLength: 202
      minLength: 1
      type: string
    SlotDefaultValue:
      description: Specifies the default value to use when a user doesn't provide
        a value for a slot.
      properties:
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/SlotDefaultValueString'
          - description: The default value to use when a user doesn't provide a value
              for a slot.
      required:
      - defaultValue
      type: object
    SlotDefaultValueList:
      items:
        $ref: '#/components/schemas/SlotDefaultValue'
      maxItems: 10
      minItems: 0
      type: array
    SlotFilterName:
      enum:
      - SlotName
      type: string
    SlotFilterOperator:
      enum:
      - CO
      - EQ
      type: string
    SlotResolutionTestResultItemCounts:
      description: Information about the counts for a slot resolution in the results
        of a test execution.
      properties:
        totalResultCount:
          allOf:
          - $ref: '#/components/schemas/Count'
          - description: The total number of results.
        speechTranscriptionResultCounts:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatusCountMap'
          - description: "The number of matched, mismatched and execution error results\
              \ for speech transcription for the slot."
        slotMatchResultCounts:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatusCountMap'
          - description: The number of matched and mismatched results for slot resolution
              for the slot.
      required:
      - slotMatchResultCounts
      - totalResultCount
      type: object
    SlotResolutionTestResultItem:
      description: Information about the success and failure rate of slot resolution
        in the results of a test execution.
      properties:
        slotName:
          allOf:
          - $ref: '#/components/schemas/TestResultSlotName'
          - description: The name of the slot.
        resultCounts:
          $ref: '#/components/schemas/SlotResolutionTestResultItem_resultCounts'
      required:
      - resultCounts
      - slotName
      type: object
    SlotShape:
      enum:
      - Scalar
      - List
      type: string
    SlotSummary:
      description: "Summary information about a slot, a value that the bot elicits\
        \ from the user."
      properties:
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the slot.
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name given to the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the slot.
        slotConstraint:
          allOf:
          - $ref: '#/components/schemas/SlotConstraint'
          - description: Whether the slot is required or optional. An intent is complete
              when all required slots are filled.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          - description: The unique identifier for the slot type that defines the
              values for the slot.
        valueElicitationPromptSpecification:
          $ref: '#/components/schemas/SlotSummary_valueElicitationPromptSpecification'
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp of the last date and time that the slot was
              updated.
      type: object
    SlotTypeCategory:
      enum:
      - Custom
      - Extended
      - ExternalGrammar
      - Composite
      type: string
    SlotTypeFilterName:
      enum:
      - SlotTypeName
      - ExternalSourceType
      type: string
    SlotTypeFilterOperator:
      enum:
      - CO
      - EQ
      type: string
    SlotTypeSummary:
      description: Provides summary information about a slot type.
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier assigned to the slot type.
        slotTypeName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the slot type.
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          - description: "If the slot type is derived from a built-on slot type, the\
              \ name of the parent slot type."
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp of the date and time that the slot type was last
              updated.
        slotTypeCategory:
          allOf:
          - $ref: '#/components/schemas/SlotTypeCategory'
          - description: "<p>Indicates the type of the slot type.</p> <ul> <li> <p>\
              \ <code>Custom</code> - A slot type that you created using custom values.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/custom-slot-types.html\"\
              >Creating custom slot types</a>.</p> </li> <li> <p> <code>Extended</code>\
              \ - A slot type created by extending the <code>AMAZON.AlphaNumeric</code>\
              \ built-in slot type. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/built-in-slot-alphanumerice.html\"\
              > <code>AMAZON.AlphaNumeric</code> </a>.</p> </li> <li> <p> <code>ExternalGrammar</code>\
              \ - A slot type using a custom GRXML grammar to define values. For more\
              \ information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/building-grxml.html\"\
              >Using a custom grammar slot type</a>.</p> </li> </ul>"
      type: object
    SynonymList:
      items:
        $ref: '#/components/schemas/SampleValue'
      maxItems: 10000
      minItems: 1
      type: array
    SlotValue:
      description: The value to set in a slot.
      properties:
        interpretedValue:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: "The value that Amazon Lex determines for the slot. The actual\
              \ value depends on the setting of the value selection strategy for the\
              \ bot. You can choose to use the value entered by the user, or you can\
              \ have Amazon Lex choose the first value in the <code>resolvedValues</code>\
              \ list."
      type: object
    SlotValues:
      items:
        $ref: '#/components/schemas/SlotValueOverride'
      type: array
    SlotValueOverride:
      description: The slot values that Amazon Lex uses when it sets slot values in
        a dialog step.
      properties:
        value:
          $ref: '#/components/schemas/SlotValueOverride_value'
        values:
          allOf:
          - $ref: '#/components/schemas/SlotValues'
          - description: "A list of one or more values that the user provided for\
              \ the slot. For example, for a slot that elicits pizza toppings, the\
              \ values might be \"pepperoni\" and \"pineapple.\""
      type: object
    SubSlotValueElicitationSetting:
      description: "<p>Subslot elicitation settings.</p> <p> <code>DefaultValueSpecification</code>\
        \ is a list of default values for a constituent sub slot in a composite slot.\
        \ Default values are used when Amazon Lex hasn't determined a value for a\
        \ slot. You can specify default values from context variables, session attributes,\
        \ and defined values. This is similar to <code>DefaultValueSpecification</code>\
        \ for slots.</p> <p> <code>PromptSpecification</code> is the prompt that Amazon\
        \ Lex uses to elicit the sub slot value from the user. This is similar to\
        \ <code>PromptSpecification</code> for slots.</p>"
      properties:
        defaultValueSpecification:
          $ref: '#/components/schemas/SlotDefaultValueSpecification'
        promptSpecification:
          $ref: '#/components/schemas/PromptSpecification'
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          - description: "If you know a specific pattern that users might respond\
              \ to an Amazon Lex request for a sub slot value, you can provide those\
              \ utterances to improve accuracy. This is optional. In most cases Amazon\
              \ Lex is capable of understanding user utterances. This is similar to\
              \ <code>SampleUtterances</code> for slots."
        waitAndContinueSpecification:
          $ref: '#/components/schemas/WaitAndContinueSpecification'
      required:
      - promptSpecification
      type: object
    Specifications:
      description: Subslot specifications.
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          - description: The unique identifier assigned to the slot type.
        valueElicitationSetting:
          $ref: '#/components/schemas/Specifications_valueElicitationSetting'
      required:
      - slotTypeId
      - valueElicitationSetting
      type: object
    StartBotRecommendationRequest:
      example:
        encryptionSetting:
          associatedTranscriptsPassword: ""
          botLocaleExportPassword: ""
          kmsKeyArn: ""
        transcriptSourceSetting:
          s3BucketTranscriptSource:
            transcriptFilter:
              lexTranscriptFilter:
                dateRangeFilter:
                  startDateTime: ""
                  endDateTime: ""
            kmsKeyArn: ""
            s3BucketName: ""
            pathFormat:
              objectPrefixes: ""
            transcriptFormat: ""
      properties:
        transcriptSourceSetting:
          $ref: '#/components/schemas/DescribeBotRecommendationResponse_transcriptSourceSetting'
        encryptionSetting:
          $ref: '#/components/schemas/StartBotRecommendationRequest_encryptionSetting'
      required:
      - transcriptSourceSetting
      title: StartBotRecommendationRequest
      type: object
    StartImportRequest:
      example:
        importId: ""
        filePassword: ""
        mergeStrategy: ""
        resourceSpecification:
          customVocabularyImportSpecification:
            botId: ""
            botVersion: ""
            localeId: ""
          testSetImportResourceSpecification:
            testSetTags: ""
            modality: ""
            roleArn: ""
            description: ""
            storageLocation:
              s3Path: ""
              kmsKeyArn: ""
              s3BucketName: ""
            importInputLocation:
              s3Path: ""
              s3BucketName: ""
            testSetName: ""
          botLocaleImportSpecification:
            nluIntentConfidenceThreshold: ""
            voiceSettings:
              voiceId: ""
              engine: ""
            botId: ""
            botVersion: ""
            localeId: ""
          botImportSpecification:
            testBotAliasTags: ""
            botName: ""
            roleArn: ""
            botTags: ""
            dataPrivacy:
              childDirected: ""
            idleSessionTTLInSeconds: ""
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the import. It is included in the
              response from the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateUploadUrl.html">CreateUploadUrl</a>
              operation.
        resourceSpecification:
          $ref: '#/components/schemas/StartImportRequest_resourceSpecification'
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          - description: The strategy to use when there is a name conflict between
              the imported resource and an existing resource. When the merge strategy
              is <code>FailOnConflict</code> existing resources are not overwritten
              and the import fails.
        filePassword:
          allOf:
          - $ref: '#/components/schemas/ImportExportFilePassword'
          - description: The password used to encrypt the zip archive that contains
              the resource definition. You should always encrypt the zip archive to
              protect it during transit between your site and Amazon Lex.
      required:
      - importId
      - mergeStrategy
      - resourceSpecification
      title: StartImportRequest
      type: object
    StartTestExecutionRequest:
      example:
        testExecutionModality: ""
        apiMode: ""
        target:
          botAliasTarget:
            botAliasId: ""
            botId: ""
            localeId: ""
      properties:
        target:
          $ref: '#/components/schemas/StartTestExecutionResponse_target'
        apiMode:
          allOf:
          - $ref: '#/components/schemas/TestExecutionApiMode'
          - description: "Indicates whether we use streaming or non-streaming APIs\
              \ for the test set execution. For streaming, StartConversation Runtime\
              \ API is used. Whereas, for non-streaming, RecognizeUtterance and RecognizeText\
              \ Amazon Lex Runtime API are used."
        testExecutionModality:
          allOf:
          - $ref: '#/components/schemas/TestExecutionModality'
          - description: Indicates whether audio or text is used.
      required:
      - apiMode
      - target
      title: StartTestExecutionRequest
      type: object
    StartTestSetGenerationRequest:
      example:
        testSetTags: ""
        roleArn: ""
        description: ""
        storageLocation:
          s3Path: ""
          kmsKeyArn: ""
          s3BucketName: ""
        generationDataSource:
          conversationLogsDataSource:
            filter:
              inputMode: ""
              startTime: ""
              endTime: ""
            botAliasId: ""
            botId: ""
            localeId: ""
        testSetName: ""
      properties:
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The test set name for the test set generation request.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The test set description for the test set generation request.
        storageLocation:
          $ref: '#/components/schemas/DescribeTestSetGenerationResponse_storageLocation'
        generationDataSource:
          $ref: '#/components/schemas/StartTestSetGenerationRequest_generationDataSource'
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The roleARN used for any operation in the test set to access
              resources in the Amazon Web Services account.
        testSetTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of tags to add to the test set. You can only add\
              \ tags when you import/generate a new test set. You can't use the <code>UpdateTestSet</code>\
              \ operation to update tags. To update tags, use the <code>TagResource</code>\
              \ operation."
      required:
      - generationDataSource
      - roleArn
      - storageLocation
      - testSetName
      title: StartTestSetGenerationRequest
      type: object
    StillWaitingResponseFrequency:
      maximum: 300
      minimum: 1
      type: integer
    StillWaitingResponseTimeout:
      maximum: 900
      minimum: 1
      type: integer
    StillWaitingResponseSpecification:
      description: Defines the messages that Amazon Lex sends to a user to remind
        them that the bot is waiting for a response.
      properties:
        messageGroups:
          allOf:
          - $ref: '#/components/schemas/MessageGroupsList'
          - description: "One or more message groups, each containing one or more\
              \ messages, that define the prompts that Amazon Lex sends to the user."
        frequencyInSeconds:
          allOf:
          - $ref: '#/components/schemas/StillWaitingResponseFrequency'
          - description: "How often a message should be sent to the user. Minimum\
              \ of 1 second, maximum of 5 minutes."
        timeoutInSeconds:
          allOf:
          - $ref: '#/components/schemas/StillWaitingResponseTimeout'
          - description: "If Amazon Lex waits longer than this length of time for\
              \ a response, it will stop sending messages."
        allowInterrupt:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: Indicates that the user can interrupt the response by speaking
              while the message is being played.
      required:
      - frequencyInSeconds
      - messageGroups
      - timeoutInSeconds
      type: object
    StopBotRecommendationRequest:
      properties: {}
      title: StopBotRecommendationRequest
      type: object
    String:
      type: string
    SubSlotTypeComposition:
      description: Subslot type composition.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: Name of a constituent sub slot inside a composite slot.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          - description: The unique identifier assigned to a slot type. This refers
              to either a built-in slot type or the unique slotTypeId of a custom
              slot type.
      required:
      - name
      - slotTypeId
      type: object
    TagKeyList:
      items:
        $ref: '#/components/schemas/TagKey'
      maxItems: 200
      minItems: 0
      type: array
    TagResourceRequest:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of tag keys to add to the resource. If a tag key\
              \ already exists, the existing value is replaced with the new value."
      required:
      - tags
      title: TagResourceRequest
      type: object
    UtteranceLevelTestResults:
      description: Contains information about the utterances in the results of the
        test set execution.
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/UtteranceLevelTestResultItemList'
          - description: Contains information about an utterance in the results of
              the test set execution.
      required:
      - items
      type: object
    TestExecutionSummary:
      description: Summarizes metadata about the test execution.
      properties:
        testExecutionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the test execution.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time at which the test execution was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time at which the test execution was last updated.
        testExecutionStatus:
          allOf:
          - $ref: '#/components/schemas/TestExecutionStatus'
          - description: The current status of the test execution.
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the test set used in the test execution.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the test set used in the test execution.
        target:
          $ref: '#/components/schemas/TestExecutionSummary_target'
        apiMode:
          allOf:
          - $ref: '#/components/schemas/TestExecutionApiMode'
          - description: Specifies whether the API mode for the test execution is
              streaming or non-streaming.
        testExecutionModality:
          allOf:
          - $ref: '#/components/schemas/TestExecutionModality'
          - description: Specifies whether the data used for the test execution is
              written or spoken.
      type: object
    TestSetIntentDiscrepancyList:
      items:
        $ref: '#/components/schemas/TestSetIntentDiscrepancyItem'
      type: array
    TestSetSlotDiscrepancyList:
      items:
        $ref: '#/components/schemas/TestSetSlotDiscrepancyItem'
      type: array
    TestSetImportInputLocation:
      description: Contains information about the Amazon S3 location from which the
        test set is imported.
      properties:
        s3BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          - description: The name of the Amazon S3 bucket.
        s3Path:
          allOf:
          - $ref: '#/components/schemas/S3ObjectPath'
          - description: The path inside the Amazon S3 bucket pointing to the test-set
              CSV file.
      required:
      - s3BucketName
      - s3Path
      type: object
    TestSetIntentDiscrepancyItem:
      description: Contains information about discrepancy in an intent information
        between the test set and the bot.
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the intent in the discrepancy report.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The error message for a discrepancy for an intent between
              the test set and the bot.
      required:
      - errorMessage
      - intentName
      type: object
    TestSetSlotDiscrepancyItem:
      description: Contains information about discrepancy in a slot information between
        the test set and the bot.
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the intent associated with the slot in the discrepancy
              report.
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the slot in the discrepancy report.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The error message for a discrepancy for an intent between
              the test set and the bot.
      required:
      - errorMessage
      - intentName
      - slotName
      type: object
    TestSetSummary:
      description: Contains summary information about the test set.
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier of the test set.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the test set.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the test set.
        modality:
          allOf:
          - $ref: '#/components/schemas/TestSetModality'
          - description: Specifies whether the test set contains written or spoken
              data.
        status:
          allOf:
          - $ref: '#/components/schemas/TestSetStatus'
          - description: The status of the test set.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The Amazon Resource Name (ARN) of an IAM role that has permission
              to access the test set.
        numTurns:
          allOf:
          - $ref: '#/components/schemas/Count'
          - description: The number of turns in the test set.
        storageLocation:
          $ref: '#/components/schemas/TestSetSummary_storageLocation'
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time at which the test set was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time at which the test set was last updated.
      type: object
    TurnNumber:
      maximum: 30
      minimum: 0
      type: integer
    TurnSpecification:
      description: Contains information about the messages in the turn.
      properties:
        agentTurn:
          $ref: '#/components/schemas/TurnSpecification_agentTurn'
        userTurn:
          $ref: '#/components/schemas/TurnSpecification_userTurn'
      type: object
    TestSetTurnRecord:
      description: Contains information about a turn in a test set.
      properties:
        recordNumber:
          allOf:
          - $ref: '#/components/schemas/RecordNumber'
          - description: The record number associated with the turn.
        conversationId:
          allOf:
          - $ref: '#/components/schemas/TestSetConversationId'
          - description: The unique identifier for the conversation associated with
              the turn.
        turnNumber:
          allOf:
          - $ref: '#/components/schemas/TurnNumber'
          - description: The number of turns that has elapsed up to that turn.
        turnSpecification:
          $ref: '#/components/schemas/TestSetTurnRecord_turnSpecification'
      required:
      - recordNumber
      - turnSpecification
      type: object
    UserTurnResult:
      description: Contains the results for the user turn by the test execution.
      properties:
        input:
          $ref: '#/components/schemas/UserTurnResult_input'
        expectedOutput:
          $ref: '#/components/schemas/UserTurnResult_expectedOutput'
        actualOutput:
          $ref: '#/components/schemas/UserTurnResult_actualOutput'
        errorDetails:
          $ref: '#/components/schemas/ExecutionErrorDetails'
        endToEndResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          - description: "Specifies whether the expected and actual outputs match\
              \ or not, or if there is an error in execution."
        intentMatchResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          - description: Specifies whether the expected and actual intents match or
              not.
        slotMatchResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          - description: Specifies whether the expected and actual slots match or
              not.
        speechTranscriptionResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          - description: "Specifies whether the expected and actual speech transcriptions\
              \ match or not, or if there is an error in execution."
        conversationLevelResult:
          $ref: '#/components/schemas/UserTurnResult_conversationLevelResult'
      required:
      - expectedOutput
      - input
      type: object
    TestSetTurnResult:
      description: Contains information about the results of the analysis of a turn
        in the test set.
      properties:
        agent:
          $ref: '#/components/schemas/TestSetTurnResult_agent'
        user:
          $ref: '#/components/schemas/TestSetTurnResult_user'
      type: object
    TestSetUtteranceText:
      maxLength: 1024
      minLength: 1
      type: string
    TextLogDestination:
      description: Defines the Amazon CloudWatch Logs destination log group for conversation
        text logs.
      properties:
        cloudWatch:
          $ref: '#/components/schemas/TextLogDestination_cloudWatch'
      required:
      - cloudWatch
      type: object
    TextLogSetting:
      description: Defines settings to enable text conversation logs.
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Determines whether conversation logs should be stored for
              an alias.
        destination:
          $ref: '#/components/schemas/TextLogDestination'
      required:
      - destination
      - enabled
      type: object
    UserTurnSpecification:
      description: Contains information about the expected and input values for the
        user turn.
      properties:
        input:
          $ref: '#/components/schemas/UserTurnResult_input'
        expected:
          $ref: '#/components/schemas/UserTurnSpecification_expected'
      required:
      - expected
      - input
      type: object
    UntagResourceRequest:
      properties: {}
      title: UntagResourceRequest
      type: object
    UpdateBotAliasRequest:
      example:
        botAliasLocaleSettings: ""
        sentimentAnalysisSettings:
          detectSentiment: ""
        description: ""
        botAliasName: ""
        botVersion: ""
        conversationLogSettings:
          textLogSettings: ""
          audioLogSettings: ""
      properties:
        botAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The new name to assign to the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The new description to assign to the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The new bot version to assign to the bot alias.
        botAliasLocaleSettings:
          allOf:
          - $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          - description: The new Lambda functions to use in each locale for the bot
              alias.
        conversationLogSettings:
          $ref: '#/components/schemas/UpdateBotAliasRequest_conversationLogSettings'
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
      required:
      - botAliasName
      title: UpdateBotAliasRequest
      type: object
    UpdateBotLocaleRequest:
      example:
        nluIntentConfidenceThreshold: ""
        description: ""
        voiceSettings:
          voiceId: ""
          engine: ""
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The new description of the locale.
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          - description: The new confidence threshold where Amazon Lex inserts the
              <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code>
              intents in the list of possible intents for an utterance.
        voiceSettings:
          $ref: '#/components/schemas/UpdateBotLocaleRequest_voiceSettings'
      required:
      - nluIntentConfidenceThreshold
      title: UpdateBotLocaleRequest
      type: object
    UpdateBotRecommendationRequest:
      example:
        encryptionSetting:
          associatedTranscriptsPassword: ""
          botLocaleExportPassword: ""
          kmsKeyArn: ""
      properties:
        encryptionSetting:
          $ref: '#/components/schemas/StartBotRecommendationRequest_encryptionSetting'
      required:
      - encryptionSetting
      title: UpdateBotRecommendationRequest
      type: object
    UpdateBotRequest:
      example:
        botName: ""
        roleArn: ""
        botType: ""
        description: ""
        dataPrivacy:
          childDirected: ""
        idleSessionTTLInSeconds: ""
        botMembers: ""
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The new name of the bot. The name must be unique in the account
              that creates the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the bot.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The Amazon Resource Name (ARN) of an IAM role that has permissions
              to access the bot.
        dataPrivacy:
          $ref: '#/components/schemas/CreateBotRequest_dataPrivacy'
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          - description: "<p>The time, in seconds, that Amazon Lex should keep information\
              \ about a user's conversation with the bot.</p> <p>A user interaction\
              \ remains active for the amount of time specified. If no conversation\
              \ occurs during this time, the session expires and Amazon Lex deletes\
              \ any data provided before the timeout.</p> <p>You can specify between\
              \ 60 (1 minute) and 86,400 (24 hours) seconds.</p>"
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          - description: The type of the bot to be updated.
        botMembers:
          allOf:
          - $ref: '#/components/schemas/BotMembers'
          - description: The list of bot members in the network associated with the
              update action.
      required:
      - botName
      - dataPrivacy
      - idleSessionTTLInSeconds
      - roleArn
      title: UpdateBotRequest
      type: object
    UpdateExportRequest:
      example:
        filePassword: ""
      properties:
        filePassword:
          allOf:
          - $ref: '#/components/schemas/ImportExportFilePassword'
          - description: The new password to use to encrypt the export zip archive.
      title: UpdateExportRequest
      type: object
    UpdateIntentRequest:
      example:
        sampleUtterances: ""
        parentIntentSignature: ""
        intentConfirmationSetting:
          declinationResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          active: ""
          confirmationNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
          declinationNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          promptSpecification:
            messageGroups: ""
            maxRetries: ""
            allowInterrupt: ""
            promptAttemptsSpecification: ""
            messageSelectionStrategy: ""
          confirmationConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          confirmationResponse:
            messageGroups: ""
            allowInterrupt: ""
          elicitationCodeHook:
            enableCodeHookInvocation: ""
            invocationLabel: ""
          declinationConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
        intentName: ""
        description: ""
        intentClosingSetting:
          conditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          closingResponse:
            messageGroups: ""
            allowInterrupt: ""
          active: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        initialResponseSetting:
          conditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          initialResponse:
            messageGroups: ""
            allowInterrupt: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
        slotPriorities: ""
        inputContexts: ""
        outputContexts: ""
        kendraConfiguration:
          kendraIndex: ""
          queryFilterStringEnabled: ""
          queryFilterString: ""
        fulfillmentCodeHook:
          active: ""
          postFulfillmentStatusSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          fulfillmentUpdatesSpecification:
            active: ""
            startResponse:
              messageGroups: ""
              allowInterrupt: ""
              delayInSeconds: ""
            updateResponse:
              messageGroups: ""
              allowInterrupt: ""
              frequencyInSeconds: ""
            timeoutInSeconds: ""
          enabled: ""
        dialogCodeHook:
          enabled: ""
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The new name for the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The new description of the intent.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          - description: The signature of the new built-in intent to use as the parent
              of this intent.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          - description: New utterances used to invoke the intent.
        dialogCodeHook:
          $ref: '#/components/schemas/UpdateIntentRequest_dialogCodeHook'
        fulfillmentCodeHook:
          $ref: '#/components/schemas/UpdateIntentRequest_fulfillmentCodeHook'
        slotPriorities:
          allOf:
          - $ref: '#/components/schemas/SlotPrioritiesList'
          - description: A new list of slots and their priorities that are contained
              by the intent.
        intentConfirmationSetting:
          $ref: '#/components/schemas/UpdateIntentRequest_intentConfirmationSetting'
        intentClosingSetting:
          $ref: '#/components/schemas/UpdateIntentRequest_intentClosingSetting'
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextsList'
          - description: A new list of contexts that must be active in order for Amazon
              Lex to consider the intent.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextsList'
          - description: A new list of contexts that Amazon Lex activates when the
              intent is fulfilled.
        kendraConfiguration:
          $ref: '#/components/schemas/UpdateIntentRequest_kendraConfiguration'
        initialResponseSetting:
          $ref: '#/components/schemas/UpdateIntentResponse_initialResponseSetting'
      required:
      - intentName
      title: UpdateIntentRequest
      type: object
    UpdateResourcePolicyRequest:
      example:
        policy: ""
      properties:
        policy:
          allOf:
          - $ref: '#/components/schemas/Policy'
          - description: "<p>A resource policy to add to the resource. The policy\
              \ is a JSON structure that contains one or more statements that define\
              \ the policy. The policy must follow the IAM syntax. For more information\
              \ about the contents of a JSON policy document, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html\"\
              > IAM JSON policy reference </a>. </p> <p>If the policy isn't valid,\
              \ Amazon Lex returns a validation exception.</p>"
      required:
      - policy
      title: UpdateResourcePolicyRequest
      type: object
    UpdateSlotRequest:
      example:
        slotName: ""
        subSlotSetting:
          expression: ""
          slotSpecifications: ""
        slotTypeId: ""
        description: ""
        valueElicitationSetting:
          sampleUtterances: ""
          slotConstraint: ""
          waitAndContinueSpecification:
            continueResponse:
              messageGroups: ""
              allowInterrupt: ""
            waitingResponse:
              messageGroups: ""
              allowInterrupt: ""
            active: ""
            stillWaitingResponse:
              messageGroups: ""
              allowInterrupt: ""
              frequencyInSeconds: ""
              timeoutInSeconds: ""
          defaultValueSpecification:
            defaultValueList: ""
          promptSpecification:
            messageGroups: ""
            maxRetries: ""
            allowInterrupt: ""
            promptAttemptsSpecification: ""
            messageSelectionStrategy: ""
          slotCaptureSetting:
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            captureResponse:
              messageGroups: ""
              allowInterrupt: ""
            elicitationCodeHook:
              enableCodeHookInvocation: ""
              invocationLabel: ""
            captureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            captureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            codeHook:
              postCodeHookSpecification:
                successResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                successConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
                successNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                timeoutNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                timeoutResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                failureNextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
                failureConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
                failureResponse:
                  messageGroups: ""
                  allowInterrupt: ""
                timeoutConditional:
                  defaultBranch:
                    response:
                      messageGroups: ""
                      allowInterrupt: ""
                    nextStep:
                      dialogAction:
                        suppressNextMessage: ""
                        type: ""
                        slotToElicit: ""
                      sessionAttributes: ""
                      intent:
                        slots: ""
                        name: ""
                  active: ""
                  conditionalBranches: ""
              active: ""
              enableCodeHookInvocation: ""
              invocationLabel: ""
        obfuscationSetting:
          obfuscationSettingType: ""
        multipleValuesSetting:
          allowMultipleValues: ""
      properties:
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The new name for the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The new description for the slot.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          - description: 'The unique identifier of the new slot type to associate
              with this slot. '
        valueElicitationSetting:
          $ref: '#/components/schemas/UpdateSlotRequest_valueElicitationSetting'
        obfuscationSetting:
          $ref: '#/components/schemas/UpdateSlotRequest_obfuscationSetting'
        multipleValuesSetting:
          $ref: '#/components/schemas/UpdateSlotRequest_multipleValuesSetting'
        subSlotSetting:
          $ref: '#/components/schemas/CreateSlotResponse_subSlotSetting'
      required:
      - slotName
      - valueElicitationSetting
      title: UpdateSlotRequest
      type: object
    UpdateSlotTypeRequest:
      example:
        externalSourceSetting:
          grammarSlotTypeSetting:
            source:
              s3ObjectKey: ""
              kmsKeyArn: ""
              s3BucketName: ""
        parentSlotTypeSignature: ""
        slotTypeName: ""
        description: ""
        valueSelectionSetting:
          resolutionStrategy: ""
          regexFilter:
            pattern: ""
          advancedRecognitionSetting:
            audioRecognitionStrategy: ""
        compositeSlotTypeSetting:
          subSlots: ""
        slotTypeValues: ""
      properties:
        slotTypeName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The new name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The new description of the slot type.
        slotTypeValues:
          allOf:
          - $ref: '#/components/schemas/SlotTypeValues'
          - description: A new list of values and their optional synonyms that define
              the values that the slot type can take.
        valueSelectionSetting:
          $ref: '#/components/schemas/UpdateSlotTypeRequest_valueSelectionSetting'
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          - description: The new built-in slot type that should be used as the parent
              of this slot type.
        externalSourceSetting:
          $ref: '#/components/schemas/ExternalSourceSetting'
        compositeSlotTypeSetting:
          $ref: '#/components/schemas/CreateSlotTypeResponse_compositeSlotTypeSetting'
      required:
      - slotTypeName
      title: UpdateSlotTypeRequest
      type: object
    UpdateTestSetRequest:
      example:
        description: ""
        testSetName: ""
      properties:
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The new test set name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The new test set description.
      required:
      - testSetName
      title: UpdateTestSetRequest
      type: object
    UtteranceInputSpecification:
      description: Contains information about input of an utterance.
      properties:
        textInput:
          allOf:
          - $ref: '#/components/schemas/TestSetUtteranceText'
          - description: A text input transcription of the utterance. It is only applicable
              for test-sets containing text data.
        audioInput:
          $ref: '#/components/schemas/UtteranceInputSpecification_audioInput'
      type: object
    UserTurnInputSpecification:
      description: Contains information about the user messages in the turn in the
        input.
      properties:
        utteranceInput:
          $ref: '#/components/schemas/UserTurnInputSpecification_utteranceInput'
        requestAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: Request attributes of the user turn.
        sessionState:
          $ref: '#/components/schemas/UserTurnInputSpecification_sessionState'
      required:
      - utteranceInput
      type: object
    UserTurnSlotOutputMap:
      additionalProperties:
        $ref: '#/components/schemas/UserTurnSlotOutput'
      type: object
    UserTurnIntentOutput:
      description: Contains information about the intent that is output for the turn
        by the test execution.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/UserTurnSlotOutputMap'
          - description: The slots associated with the intent.
      required:
      - name
      type: object
    UserTurnOutputSpecification:
      description: Contains results that are output for the user turn by the test
        execution.
      properties:
        intent:
          $ref: '#/components/schemas/UserTurnOutputSpecification_intent'
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/ActiveContextList'
          - description: The contexts that are active in the turn.
        transcript:
          allOf:
          - $ref: '#/components/schemas/TestSetUtteranceText'
          - description: The transcript that is output for the user turn by the test
              execution.
      required:
      - intent
      type: object
    UserTurnSlotOutputList:
      items:
        $ref: '#/components/schemas/UserTurnSlotOutput'
      type: array
    UserTurnSlotOutput:
      description: Contains information about a slot output by the test set execution.
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The value output by the slot recognition.
        values:
          allOf:
          - $ref: '#/components/schemas/UserTurnSlotOutputList'
          - description: Values that are output by the slot recognition.
        subSlots:
          allOf:
          - $ref: '#/components/schemas/UserTurnSlotOutputMap'
          - description: A list of items mapping the name of the subslots to information
              about those subslots.
      type: object
    UtteranceAudioInputSpecification:
      description: Contains information about the audio for an utterance.
      properties:
        audioFileS3Location:
          allOf:
          - $ref: '#/components/schemas/AudioFileS3Location'
          - description: Amazon S3 file pointing to the audio.
      required:
      - audioFileS3Location
      type: object
    UtteranceContentType:
      enum:
      - PlainText
      - CustomPayload
      - SSML
      - ImageResponseCard
      type: string
    UtteranceBotResponse:
      description: An object that contains a response to the utterance from the bot.
      properties:
        content:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The text of the response to the utterance from the bot.
        contentType:
          allOf:
          - $ref: '#/components/schemas/UtteranceContentType'
          - description: <p>The type of the response. The following values are possible:</p>
              <ul> <li> <p> <code>PlainText</code> – A plain text string.</p> </li>
              <li> <p> <code>CustomPayload</code> – A response string that you can
              customize to include data or metadata for your application.</p> </li>
              <li> <p> <code>SSML</code> – A string that includes Speech Synthesis
              Markup Language to customize the audio response.</p> </li> <li> <p>
              <code>ImageResponseCard</code> – An image with buttons that the customer
              can select. See <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_ImageResponseCard.html">ImageResponseCard</a>
              for more information.</p> </li> </ul>
        imageResponseCard:
          $ref: '#/components/schemas/ImageResponseCard'
      type: object
    UtteranceBotResponses:
      items:
        $ref: '#/components/schemas/UtteranceBotResponse'
      type: array
    UtteranceLevelTestResultItem:
      description: Contains information about multiple utterances in the results of
        a test set execution.
      properties:
        recordNumber:
          allOf:
          - $ref: '#/components/schemas/RecordNumber'
          - description: The record number of the result.
        conversationId:
          allOf:
          - $ref: '#/components/schemas/TestSetConversationId'
          - description: The unique identifier for the conversation associated with
              the result.
        turnResult:
          $ref: '#/components/schemas/UtteranceLevelTestResultItem_turnResult'
      required:
      - recordNumber
      - turnResult
      type: object
    UtteranceLevelTestResultItemList:
      items:
        $ref: '#/components/schemas/UtteranceLevelTestResultItem'
      type: array
    UtteranceUnderstood:
      type: boolean
    UtteranceSpecification:
      description: An object containing information about a specific utterance.
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          - description: The identifier of the alias of the bot that the utterance
              was made to.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          - description: The version of the bot that the utterance was made to.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          - description: The locale of the bot that the utterance was made to.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionId'
          - description: The identifier of the session that the utterance was made
              in.
        channel:
          allOf:
          - $ref: '#/components/schemas/AnalyticsChannel'
          - description: The channel that is integrated with the bot that the utterance
              was made to.
        mode:
          allOf:
          - $ref: '#/components/schemas/AnalyticsModality'
          - description: <p>The mode of the session. The possible values are as follows:</p>
              <ul> <li> <p> <code>Speech</code> – The session consisted of spoken
              dialogue.</p> </li> <li> <p> <code>Text</code> – The session consisted
              of written dialogue.</p> </li> <li> <p> <code>DTMF</code> – The session
              consisted of touch-tone keypad (Dual Tone Multi-Frequency) key presses.</p>
              </li> <li> <p> <code>MultiMode</code> – The session consisted of multiple
              modes.</p> </li> </ul>
        conversationStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time when the conversation in which the utterance
              took place began. A conversation is defined as a unique combination
              of a <code>sessionId</code> and an <code>originatingRequestId</code>.
        conversationEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time when the conversation in which the utterance
              took place ended. A conversation is defined as a unique combination
              of a <code>sessionId</code> and an <code>originatingRequestId</code>.
        utterance:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The text of the utterance.
        utteranceTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time when the utterance took place.
        audioVoiceDurationMillis:
          allOf:
          - $ref: '#/components/schemas/AnalyticsLongValue'
          - description: The duration in milliseconds of the audio associated with
              the utterance.
        utteranceUnderstood:
          allOf:
          - $ref: '#/components/schemas/UtteranceUnderstood'
          - description: Specifies whether the bot understood the utterance or not.
        inputType:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "<p>The input type of the utterance. The possible values\
              \ are as follows:</p> <ul> <li> <p>PCM format: audio data must be in\
              \ little-endian byte order.</p> <ul> <li> <p> <code>audio/l16; rate=16000;\
              \ channels=1</code> </p> </li> <li> <p> <code>audio/x-l16; sample-rate=16000;\
              \ channel-count=1</code> </p> </li> <li> <p> <code>audio/lpcm; sample-rate=8000;\
              \ sample-size-bits=16; channel-count=1; is-big-endian=false</code> </p>\
              \ </li> </ul> </li> <li> <p>Opus format</p> <ul> <li> <p> <code>audio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4</code>\
              \ </p> </li> </ul> </li> <li> <p>Text format</p> <ul> <li> <p> <code>text/plain;\
              \ charset=utf-8</code> </p> </li> </ul> </li> </ul>"
        outputType:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: <p>The output type of the utterance. The possible values
              are as follows:</p> <ul> <li> <p> <code>audio/mpeg</code> </p> </li>
              <li> <p> <code>audio/ogg</code> </p> </li> <li> <p> <code>audio/pcm
              (16 KHz)</code> </p> </li> <li> <p> <code>audio/</code> (defaults to
              <code>mpeg</code>)</p> </li> <li> <p> <code>text/plain; charset=utf-8</code>
              </p> </li> </ul>
        associatedIntentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the intent that the utterance is associated to.
        associatedSlotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the slot that the utterance is associated to.
        intentState:
          allOf:
          - $ref: '#/components/schemas/IntentState'
          - description: The state of the intent that the utterance is associated
              to.
        dialogActionType:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The type of dialog action that the utterance is associated
              to. See the <code>type</code> field in <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_DialogAction.html">DialogAction</a>
              for more information.
        botResponseAudioVoiceId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier for the audio of the bot response.
        slotsFilledInSession:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The slots that have been filled in the session by the time
              of the utterance.
        utteranceRequestId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The identifier of the request associated with the utterance.
        botResponses:
          allOf:
          - $ref: '#/components/schemas/UtteranceBotResponses'
          - description: A list of objects containing information about the bot response
              to the utterance.
      type: object
    BatchCreateCustomVocabularyItem_request:
      properties:
        customVocabularyItemList:
          description: A list of new custom vocabulary items. Each entry must contain
            a phrase and can optionally contain a displayAs and/or a weight.
          items:
            $ref: '#/components/schemas/NewCustomVocabularyItem'
          maxItems: 10
          minItems: 1
          type: array
      required:
      - customVocabularyItemList
      type: object
    BatchDeleteCustomVocabularyItem_request:
      properties:
        customVocabularyItemList:
          description: A list of custom vocabulary items requested to be deleted.
            Each entry must contain the unique custom vocabulary entry identifier.
          items:
            $ref: '#/components/schemas/CustomVocabularyEntryId'
          maxItems: 10
          minItems: 1
          type: array
      required:
      - customVocabularyItemList
      type: object
    BatchUpdateCustomVocabularyItem_request:
      properties:
        customVocabularyItemList:
          description: A list of custom vocabulary items with updated fields. Each
            entry must contain a phrase and can optionally contain a displayAs and/or
            a weight.
          items:
            $ref: '#/components/schemas/CustomVocabularyItem'
          maxItems: 10
          minItems: 1
          type: array
      required:
      - customVocabularyItemList
      type: object
    UpdateBotLocale_request_voiceSettings:
      description: Defines settings for using an Amazon Polly voice to communicate
        with a user.
      properties:
        voiceId:
          allOf:
          - $ref: '#/components/schemas/VoiceId'
          - description: The identifier of the Amazon Polly voice to use.
        engine:
          allOf:
          - $ref: '#/components/schemas/VoiceEngine'
          - description: "<p>Indicates the type of Amazon Polly voice that Amazon\
              \ Lex should use for voice interaction with the user. For more information,\
              \ see the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_SynthesizeSpeech.html#polly-SynthesizeSpeech-request-Engine\"\
              > <code>engine</code> parameter of the <code>SynthesizeSpeech</code>\
              \ operation</a> in the <i>Amazon Polly developer guide</i>.</p> <p>If\
              \ you do not specify a value, the default is <code>standard</code>.</p>"
      type: object
    UpdateBotLocale_request:
      properties:
        description:
          description: The new description of the locale.
          maxLength: 200
          minLength: 0
          type: string
        nluIntentConfidenceThreshold:
          description: The new confidence threshold where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code>
            and <code>AMAZON.KendraSearchIntent</code> intents in the list of possible
            intents for an utterance.
          format: double
          maximum: 1
          minimum: 0
          type: number
        voiceSettings:
          $ref: '#/components/schemas/UpdateBotLocale_request_voiceSettings'
      required:
      - nluIntentConfidenceThreshold
      type: object
    CreateBot_request_dataPrivacy:
      description: "By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code>\
        \ structure provides settings that determine how Amazon Lex handles special\
        \ cases of securing the data for your bot. "
      properties:
        childDirected:
          allOf:
          - $ref: '#/components/schemas/ChildDirected'
          - description: "For each Amazon Lex bot created with the Amazon Lex Model\
              \ Building Service, you must specify whether your use of Amazon Lex\
              \ is related to a website, program, or other application that is directed\
              \ or targeted, in whole or in part, to children under age 13 and subject\
              \ to the Children's Online Privacy Protection Act (COPPA) by specifying\
              \ <code>true</code> or <code>false</code> in the <code>childDirected</code>\
              \ field. By specifying <code>true</code> in the <code>childDirected</code>\
              \ field, you confirm that your use of Amazon Lex <b>is</b> related to\
              \ a website, program, or other application that is directed or targeted,\
              \ in whole or in part, to children under age 13 and subject to COPPA.\
              \ By specifying <code>false</code> in the <code>childDirected</code>\
              \ field, you confirm that your use of Amazon Lex <b>is not</b> related\
              \ to a website, program, or other application that is directed or targeted,\
              \ in whole or in part, to children under age 13 and subject to COPPA.\
              \ You may not specify a default value for the <code>childDirected</code>\
              \ field that does not accurately reflect whether your use of Amazon\
              \ Lex is related to a website, program, or other application that is\
              \ directed or targeted, in whole or in part, to children under age 13\
              \ and subject to COPPA. If your use of Amazon Lex relates to a website,\
              \ program, or other application that is directed in whole or in part,\
              \ to children under age 13, you must obtain any required verifiable\
              \ parental consent under COPPA. For information regarding the use of\
              \ Amazon Lex in connection with websites, programs, or other applications\
              \ that are directed or targeted, in whole or in part, to children under\
              \ age 13, see the <a href=\"http://aws.amazon.com/lex/faqs#data-security\"\
              >Amazon Lex FAQ</a>."
      type: object
    CreateBot_request:
      properties:
        botName:
          description: The name of the bot. The bot name must be unique in the account
            that creates the bot.
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        description:
          description: A description of the bot. It appears in lists to help you identify
            a particular bot.
          maxLength: 200
          minLength: 0
          type: string
        roleArn:
          description: The Amazon Resource Name (ARN) of an IAM role that has permission
            to access the bot.
          maxLength: 2048
          minLength: 32
          pattern: "^arn:aws:iam::[0-9]{12}:role/.*$"
          type: string
        dataPrivacy:
          $ref: '#/components/schemas/CreateBot_request_dataPrivacy'
        idleSessionTTLInSeconds:
          description: "<p>The time, in seconds, that Amazon Lex should keep information\
            \ about a user's conversation with the bot. </p> <p>A user interaction\
            \ remains active for the amount of time specified. If no conversation\
            \ occurs during this time, the session expires and Amazon Lex deletes\
            \ any data provided before the timeout.</p> <p>You can specify between\
            \ 60 (1 minute) and 86,400 (24 hours) seconds.</p>"
          maximum: 86400
          minimum: 60
          type: integer
        botTags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "A list of tags to add to the bot. You can only add tags when\
            \ you create a bot. You can't use the <code>UpdateBot</code> operation\
            \ to update tags. To update tags, use the <code>TagResource</code> operation."
          maxProperties: 200
          minProperties: 0
          type: object
        testBotAliasTags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "A list of tags to add to the test alias for a bot. You can\
            \ only add tags when you create a bot. You can't use the <code>UpdateAlias</code>\
            \ operation to update tags. To update tags on the test alias, use the\
            \ <code>TagResource</code> operation."
          maxProperties: 200
          minProperties: 0
          type: object
        botType:
          description: The type of a bot to create.
          enum:
          - Bot
          - BotNetwork
          type: string
        botMembers:
          description: The list of bot members in a network to be created.
          items:
            $ref: '#/components/schemas/BotMember'
          maxItems: 10
          minItems: 0
          type: array
      required:
      - botName
      - dataPrivacy
      - idleSessionTTLInSeconds
      - roleArn
      type: object
    ListBots_request_sortBy:
      description: Specifies attributes for sorting a list of bots.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BotSortAttribute'
          - description: The attribute to use to sort the list of bots.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can choose ascending or descending.
      type: object
    ListBots_request:
      properties:
        sortBy:
          $ref: '#/components/schemas/ListBots_request_sortBy'
        filters:
          description: Provides the specification of a filter used to limit the bots
            in the response to only those that match the filter specification. You
            can only specify one filter and one string to filter on.
          items:
            $ref: '#/components/schemas/BotFilter'
          maxItems: 2
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of bots to return in each page of results.\
            \ If there are fewer results than the maximum page size, only the actual\
            \ number of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "<p>If the response from the <code>ListBots</code> operation\
            \ contains more results than specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response. </p> <p>Use the returned\
            \ token in the <code>nextToken</code> parameter of a <code>ListBots</code>\
            \ request to return the next page of results. For a complete set of results,\
            \ call the <code>ListBots</code> operation until the <code>nextToken</code>\
            \ returned in the response is null.</p>"
          type: string
      type: object
    CreateBotAlias_request_conversationLogSettings:
      description: "Configures conversation logging that saves audio, text, and metadata\
        \ for the conversations with your users."
      properties:
        textLogSettings:
          allOf:
          - $ref: '#/components/schemas/TextLogSettingsList'
          - description: The Amazon CloudWatch Logs settings for logging text and
              metadata.
        audioLogSettings:
          allOf:
          - $ref: '#/components/schemas/AudioLogSettingsList'
          - description: The Amazon S3 settings for logging audio to an S3 bucket.
      type: object
    CreateBotAlias_request_sentimentAnalysisSettings:
      description: Determines whether Amazon Lex will use Amazon Comprehend to detect
        the sentiment of user utterances.
      properties:
        detectSentiment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Sets whether Amazon Lex uses Amazon Comprehend to detect
              the sentiment of user utterances.
      type: object
    CreateBotAlias_request:
      properties:
        botAliasName:
          description: The alias to create. The name must be unique for the bot.
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        description:
          description: A description of the alias. Use this description to help identify
            the alias.
          maxLength: 200
          minLength: 0
          type: string
        botVersion:
          description: The version of the bot that this alias points to. You can use
            the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_UpdateBotAlias.html">UpdateBotAlias</a>
            operation to change the bot version associated with the alias.
          maxLength: 5
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
        botAliasLocaleSettings:
          additionalProperties:
            $ref: '#/components/schemas/BotAliasLocaleSettings'
          description: Maps configuration information to a specific locale. You can
            use this parameter to specify a specific Lambda function to run different
            functions in different locales.
          minProperties: 1
          type: object
        conversationLogSettings:
          $ref: '#/components/schemas/CreateBotAlias_request_conversationLogSettings'
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/CreateBotAlias_request_sentimentAnalysisSettings'
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "A list of tags to add to the bot alias. You can only add tags\
            \ when you create an alias, you can't use the <code>UpdateBotAlias</code>\
            \ operation to update the tags on a bot alias. To update tags, use the\
            \ <code>TagResource</code> operation."
          maxProperties: 200
          minProperties: 0
          type: object
      required:
      - botAliasName
      type: object
    ListBotAliases_request:
      properties:
        maxResults:
          description: "The maximum number of aliases to return in each page of results.\
            \ If there are fewer results than the max page size, only the actual number\
            \ of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "If the response from the <code>ListBotAliases</code> operation\
            \ contains more results than specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response. Use that token in the\
            \ <code>nextToken</code> parameter to return the next page of results."
          type: string
      type: object
    CreateBotLocale_request:
      properties:
        localeId:
          description: "The identifier of the language and locale that the bot will\
            \ be used in. The string must match one of the supported locales. All\
            \ of the intents, slot types, and slots used in the bot must have the\
            \ same locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
            >Supported languages</a>."
          type: string
        description:
          description: A description of the bot locale. Use this to help identify
            the bot locale in lists.
          maxLength: 200
          minLength: 0
          type: string
        nluIntentConfidenceThreshold:
          description: "<p>Determines the threshold where Amazon Lex will insert the\
            \ <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>,\
            \ or both when returning alternative intents. <code>AMAZON.FallbackIntent</code>\
            \ and <code>AMAZON.KendraSearchIntent</code> are only inserted if they\
            \ are configured for the bot.</p> <p>For example, suppose a bot is configured\
            \ with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>.\
            \ Amazon Lex returns three alternative intents with the following confidence\
            \ scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response\
            \ from the <code>RecognizeText</code> operation would be:</p> <ul> <li>\
            \ <p>AMAZON.FallbackIntent</p> </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p>\
            \ </li> <li> <p>IntentC</p> </li> </ul>"
          format: double
          maximum: 1
          minimum: 0
          type: number
        voiceSettings:
          $ref: '#/components/schemas/UpdateBotLocale_request_voiceSettings'
      required:
      - localeId
      - nluIntentConfidenceThreshold
      type: object
    ListBotLocales_request_sortBy:
      description: Specifies attributes for sorting a list of bot locales.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BotLocaleSortAttribute'
          - description: The bot locale attribute to sort by.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: Specifies whether to sort the bot locales in ascending or
              descending order.
      type: object
    ListBotLocales_request:
      properties:
        sortBy:
          $ref: '#/components/schemas/ListBotLocales_request_sortBy'
        filters:
          description: Provides the specification for a filter used to limit the response
            to only those locales that match the filter specification. You can only
            specify one filter and one value to filter on.
          items:
            $ref: '#/components/schemas/BotLocaleFilter'
          maxItems: 1
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of aliases to return in each page of results.\
            \ If there are fewer results than the max page size, only the actual number\
            \ of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "If the response from the <code>ListBotLocales</code> operation\
            \ contains more results than specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response. Use that token as the\
            \ <code>nextToken</code> parameter to return the next page of results. "
          type: string
      type: object
    CreateBotVersion_request:
      properties:
        description:
          description: A description of the version. Use the description to help identify
            the version in lists.
          maxLength: 200
          minLength: 0
          type: string
        botVersionLocaleSpecification:
          additionalProperties:
            $ref: '#/components/schemas/BotVersionLocaleDetails'
          description: "Specifies the locales that Amazon Lex adds to this version.\
            \ You can choose the <code>Draft</code> version or any other previously\
            \ published version for each locale. When you specify a source version,\
            \ the locale data is copied from the source version to the new version."
          minProperties: 1
          type: object
      required:
      - botVersionLocaleSpecification
      type: object
    ListBotVersions_request_sortBy:
      description: Specifies attributes for sorting a list of bot versions.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BotVersionSortAttribute'
          - description: The attribute to use to sort the list of versions.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can specify ascending or
              descending order.
      type: object
    ListBotVersions_request:
      properties:
        sortBy:
          $ref: '#/components/schemas/ListBotVersions_request_sortBy'
        maxResults:
          description: "The maximum number of versions to return in each page of results.\
            \ If there are fewer results than the max page size, only the actual number\
            \ of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "If the response to the <code>ListBotVersion</code> operation\
            \ contains more results than specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response. Use that token in the\
            \ <code>nextToken</code> parameter to return the next page of results."
          type: string
      type: object
    CreateExport_request_resourceSpecification_botExportSpecification:
      allOf:
      - $ref: '#/components/schemas/BotExportSpecification'
      - description: Parameters for exporting a bot.
      example:
        botId: ""
        botVersion: ""
    CreateExport_request_resourceSpecification_botLocaleExportSpecification:
      allOf:
      - $ref: '#/components/schemas/BotLocaleExportSpecification'
      - description: Parameters for exporting a bot locale.
      example:
        botId: ""
        botVersion: ""
        localeId: ""
    CreateExport_request_resourceSpecification_customVocabularyExportSpecification:
      allOf:
      - $ref: '#/components/schemas/CustomVocabularyExportSpecification'
      - description: The parameters required to export a custom vocabulary.
      example:
        botId: ""
        botVersion: ""
        localeId: ""
    CreateExport_request_resourceSpecification_testSetExportSpecification:
      allOf:
      - $ref: '#/components/schemas/TestSetExportSpecification'
      - description: Specifications for the test set that is exported as a resource.
      example:
        testSetId: ""
    CreateExport_request_resourceSpecification:
      description: "Provides information about the bot or bot locale that you want\
        \ to export. You can specify the <code>botExportSpecification</code> or the\
        \ <code>botLocaleExportSpecification</code>, but not both."
      properties:
        botExportSpecification:
          $ref: '#/components/schemas/CreateExport_request_resourceSpecification_botExportSpecification'
        botLocaleExportSpecification:
          $ref: '#/components/schemas/CreateExport_request_resourceSpecification_botLocaleExportSpecification'
        customVocabularyExportSpecification:
          $ref: '#/components/schemas/CreateExport_request_resourceSpecification_customVocabularyExportSpecification'
        testSetExportSpecification:
          $ref: '#/components/schemas/CreateExport_request_resourceSpecification_testSetExportSpecification'
      type: object
    CreateExport_request:
      properties:
        resourceSpecification:
          $ref: '#/components/schemas/CreateExport_request_resourceSpecification'
        fileFormat:
          description: The file format of the bot or bot locale definition files.
          enum:
          - LexJson
          - TSV
          - CSV
          type: string
        filePassword:
          description: "An password to use to encrypt the exported archive. Using\
            \ a password is optional, but you should encrypt the archive to protect\
            \ the data in transit between Amazon Lex and your local computer."
          format: password
          maxLength: 1024
          minLength: 1
          type: string
      required:
      - fileFormat
      - resourceSpecification
      type: object
    ListExports_request_sortBy:
      description: Provides information about sorting a list of exports.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/ExportSortAttribute'
          - description: The export field to use for sorting.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list.
      type: object
    ListExports_request:
      properties:
        botId:
          description: The unique identifier that Amazon Lex assigned to the bot.
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        botVersion:
          description: 'The version of the bot to list exports for. '
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        sortBy:
          $ref: '#/components/schemas/ListExports_request_sortBy'
        filters:
          description: Provides the specification of a filter used to limit the exports
            in the response to only those that match the filter specification. You
            can only specify one filter and one string to filter on.
          items:
            $ref: '#/components/schemas/ExportFilter'
          maxItems: 1
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of exports to return in each page of results.\
            \ If there are fewer results than the max page size, only the actual number\
            \ of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "<p>If the response from the <code>ListExports</code> operation\
            \ contains more results that specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response. </p> <p>Use the returned\
            \ token in the <code>nextToken</code> parameter of a <code>ListExports</code>\
            \ request to return the next page of results. For a complete set of results,\
            \ call the <code>ListExports</code> operation until the <code>nextToken</code>\
            \ returned in the response is null.</p>"
          type: string
        localeId:
          description: "Specifies the resources that should be exported. If you don't\
            \ specify a resource type in the <code>filters</code> parameter, both\
            \ bot locales and custom vocabularies are exported."
          type: string
      type: object
    CreateIntent_request_dialogCodeHook:
      description: Settings that determine the Lambda function that Amazon Lex uses
        for processing user responses.
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Enables the dialog code hook so that it processes user requests.
      type: object
    CreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification:
      allOf:
      - $ref: '#/components/schemas/PostFulfillmentStatusSpecification'
      - description: Provides settings for messages sent to the user for after the
          Lambda fulfillment function completes. Post-fulfillment messages can be
          sent for both streaming and non-streaming conversations.
      example:
        successResponse:
          messageGroups: ""
          allowInterrupt: ""
        successConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        successNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        timeoutNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        timeoutResponse:
          messageGroups: ""
          allowInterrupt: ""
        failureNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        failureConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        failureResponse:
          messageGroups: ""
          allowInterrupt: ""
        timeoutConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
    CreateIntent_request_fulfillmentCodeHook_fulfillmentUpdatesSpecification:
      allOf:
      - $ref: '#/components/schemas/FulfillmentUpdatesSpecification'
      - description: Provides settings for update messages sent to the user for long-running
          Lambda fulfillment functions. Fulfillment updates can be used only with
          streaming conversations.
      example:
        active: ""
        startResponse:
          messageGroups: ""
          allowInterrupt: ""
          delayInSeconds: ""
        updateResponse:
          messageGroups: ""
          allowInterrupt: ""
          frequencyInSeconds: ""
        timeoutInSeconds: ""
    CreateIntent_request_fulfillmentCodeHook:
      description: Determines if a Lambda function should be invoked for a specific
        intent.
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Indicates whether a Lambda function should be invoked to
              fulfill a specific intent.
        postFulfillmentStatusSpecification:
          $ref: '#/components/schemas/CreateIntent_request_fulfillmentCodeHook_postFulfillmentStatusSpecification'
        fulfillmentUpdatesSpecification:
          $ref: '#/components/schemas/CreateIntent_request_fulfillmentCodeHook_fulfillmentUpdatesSpecification'
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: "Determines whether the fulfillment code hook is used. When\
              \ <code>active</code> is false, the code hook doesn't run."
      type: object
    CreateIntent_request_intentConfirmationSetting_promptSpecification:
      allOf:
      - $ref: '#/components/schemas/PromptSpecification'
      - description: "<p>Prompts the user to confirm the intent. This question should\
          \ have a yes or no answer.</p> <p>Amazon Lex uses this prompt to ensure\
          \ that the user acknowledges that the intent is ready for fulfillment. For\
          \ example, with the <code>OrderPizza</code> intent, you might want to confirm\
          \ that the order is correct before placing it. For other intents, such as\
          \ intents that simply respond to user questions, you might not need to ask\
          \ the user for confirmation before providing the information. </p>"
      example:
        messageGroups: ""
        maxRetries: ""
        allowInterrupt: ""
        promptAttemptsSpecification: ""
        messageSelectionStrategy: ""
    CreateIntent_request_intentConfirmationSetting_declinationResponse:
      allOf:
      - $ref: '#/components/schemas/ResponseSpecification'
      - description: "When the user answers \"no\" to the question defined in <code>promptSpecification</code>,\
          \ Amazon Lex responds with this response to acknowledge that the intent\
          \ was canceled. "
      example:
        messageGroups: ""
        allowInterrupt: ""
    CreateIntent_request_intentConfirmationSetting_confirmationNextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: Specifies the next step that the bot executes when the customer
          confirms the intent.
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    CreateIntent_request_intentConfirmationSetting_confirmationConditional:
      allOf:
      - $ref: '#/components/schemas/ConditionalSpecification'
      - description: A list of conditional branches to evaluate after the intent is
          closed.
      example:
        defaultBranch:
          response:
            messageGroups: ""
            allowInterrupt: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        active: ""
        conditionalBranches: ""
    CreateIntent_request_intentConfirmationSetting_declinationNextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: Specifies the next step that the bot executes when the customer
          declines the intent.
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    CreateIntent_request_intentConfirmationSetting_declinationConditional:
      allOf:
      - $ref: '#/components/schemas/ConditionalSpecification'
      - description: A list of conditional branches to evaluate after the intent is
          declined.
      example:
        defaultBranch:
          response:
            messageGroups: ""
            allowInterrupt: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        active: ""
        conditionalBranches: ""
    CreateIntent_request_intentConfirmationSetting_failureNextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: The next step to take in the conversation if the confirmation
          step fails.
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    CreateIntent_request_intentConfirmationSetting_codeHook:
      allOf:
      - $ref: '#/components/schemas/DialogCodeHookInvocationSetting'
      - description: 'The <code>DialogCodeHookInvocationSetting</code> object associated
          with intent''s confirmation step. The dialog code hook is triggered based
          on these invocation settings when the confirmation next step or declination
          next step or failure next step is <code>InvokeDialogCodeHook</code>. '
      example:
        postCodeHookSpecification:
          successResponse:
            messageGroups: ""
            allowInterrupt: ""
          successConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          successNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          timeoutConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
        active: ""
        enableCodeHookInvocation: ""
        invocationLabel: ""
    CreateIntent_request_intentConfirmationSetting_elicitationCodeHook:
      allOf:
      - $ref: '#/components/schemas/ElicitationCodeHookInvocationSetting'
      - description: The <code>DialogCodeHookInvocationSetting</code> used when the
          code hook is invoked during confirmation prompt retries.
      example:
        enableCodeHookInvocation: ""
        invocationLabel: ""
    CreateIntent_request_intentConfirmationSetting:
      description: Provides a prompt for making sure that the user is ready for the
        intent to be fulfilled.
      properties:
        promptSpecification:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_promptSpecification'
        declinationResponse:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_declinationResponse'
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: "Specifies whether the intent's confirmation is sent to the\
              \ user. When this field is false, confirmation and declination responses\
              \ aren't sent. If the <code>active</code> field isn't specified, the\
              \ default is true."
        confirmationResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        confirmationNextStep:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_confirmationNextStep'
        confirmationConditional:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_confirmationConditional'
        declinationNextStep:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_declinationNextStep'
        declinationConditional:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_declinationConditional'
        failureResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        failureNextStep:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_failureNextStep'
        failureConditional:
          $ref: '#/components/schemas/ConditionalSpecification'
        codeHook:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_codeHook'
        elicitationCodeHook:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting_elicitationCodeHook'
      type: object
    CreateIntent_request_intentClosingSetting_closingResponse:
      allOf:
      - $ref: '#/components/schemas/ResponseSpecification'
      - description: The response that Amazon Lex sends to the user when the intent
          is complete.
      example:
        messageGroups: ""
        allowInterrupt: ""
    CreateIntent_request_intentClosingSetting_nextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: Specifies the next step that the bot executes after playing the
          intent's closing response.
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    CreateIntent_request_intentClosingSetting_conditional:
      allOf:
      - $ref: '#/components/schemas/ConditionalSpecification'
      - description: A list of conditional branches associated with the intent's closing
          response. These branches are executed when the <code>nextStep</code> attribute
          is set to <code>EvalutateConditional</code>.
      example:
        defaultBranch:
          response:
            messageGroups: ""
            allowInterrupt: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        active: ""
        conditionalBranches: ""
    CreateIntent_request_intentClosingSetting:
      description: Provides a statement the Amazon Lex conveys to the user when the
        intent is successfully fulfilled.
      properties:
        closingResponse:
          $ref: '#/components/schemas/CreateIntent_request_intentClosingSetting_closingResponse'
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          - description: "Specifies whether an intent's closing response is used.\
              \ When this field is false, the closing response isn't sent to the user.\
              \ If the <code>active</code> field isn't specified, the default is true."
        nextStep:
          $ref: '#/components/schemas/CreateIntent_request_intentClosingSetting_nextStep'
        conditional:
          $ref: '#/components/schemas/CreateIntent_request_intentClosingSetting_conditional'
      type: object
    CreateIntent_request_kendraConfiguration:
      description: "Provides configuration information for the <code>AMAZON.KendraSearchIntent</code>\
        \ intent. When you use this intent, Amazon Lex searches the specified Amazon\
        \ Kendra index and returns documents from the index that match the user's\
        \ utterance."
      properties:
        kendraIndex:
          allOf:
          - $ref: '#/components/schemas/KendraIndexArn'
          - description: The Amazon Resource Name (ARN) of the Amazon Kendra index
              that you want the <code>AMAZON.KendraSearchIntent</code> intent to search.
              The index must be in the same account and Region as the Amazon Lex bot.
        queryFilterStringEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Determines whether the <code>AMAZON.KendraSearchIntent</code>
              intent uses a custom query string to query the Amazon Kendra index.
        queryFilterString:
          allOf:
          - $ref: '#/components/schemas/QueryFilterString'
          - description: "A query filter that Amazon Lex sends to Amazon Kendra to\
              \ filter the response from a query. The filter is in the format defined\
              \ by Amazon Kendra. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/filtering.html\"\
              >Filtering queries</a>."
      type: object
    CreateIntent_request_initialResponseSetting_nextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: The next step in the conversation.
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    CreateIntent_request_initialResponseSetting:
      description: Configuration setting for a response sent to the user before Amazon
        Lex starts eliciting slots.
      properties:
        initialResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        nextStep:
          $ref: '#/components/schemas/CreateIntent_request_initialResponseSetting_nextStep'
        conditional:
          $ref: '#/components/schemas/ConditionalSpecification'
        codeHook:
          $ref: '#/components/schemas/DialogCodeHookInvocationSetting'
      type: object
    CreateIntent_request:
      properties:
        intentName:
          description: The name of the intent. Intent names must be unique in the
            locale that contains the intent and cannot match the name of any built-in
            intent.
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        description:
          description: A description of the intent. Use the description to help identify
            the intent in lists.
          maxLength: 200
          minLength: 0
          type: string
        parentIntentSignature:
          description: A unique identifier for the built-in intent to base this intent
            on.
          type: string
        sampleUtterances:
          description: "<p>An array of strings that a user might say to signal the\
            \ intent. For example, \"I want a pizza\", or \"I want a {PizzaSize} pizza\"\
            . </p> <p>In an utterance, slot names are enclosed in curly braces (\"\
            {\", \"}\") to indicate where they should be displayed in the utterance\
            \ shown to the user.. </p>"
          items:
            $ref: '#/components/schemas/SampleUtterance'
          type: array
        dialogCodeHook:
          $ref: '#/components/schemas/CreateIntent_request_dialogCodeHook'
        fulfillmentCodeHook:
          $ref: '#/components/schemas/CreateIntent_request_fulfillmentCodeHook'
        intentConfirmationSetting:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting'
        intentClosingSetting:
          $ref: '#/components/schemas/CreateIntent_request_intentClosingSetting'
        inputContexts:
          description: "<p>A list of contexts that must be active for this intent\
            \ to be considered by Amazon Lex.</p> <p>When an intent has an input context\
            \ list, Amazon Lex only considers using the intent in an interaction with\
            \ the user when the specified contexts are included in the active context\
            \ list for the session. If the contexts are not active, then Amazon Lex\
            \ will not use the intent.</p> <p>A context can be automatically activated\
            \ using the <code>outputContexts</code> property or it can be set at runtime.</p>\
            \ <p> For example, if there are two intents with different input contexts\
            \ that respond to the same utterances, only the intent with the active\
            \ context will respond.</p> <p>An intent may have up to 5 input contexts.\
            \ If an intent has multiple input contexts, all of the contexts must be\
            \ active to consider the intent.</p>"
          items:
            $ref: '#/components/schemas/InputContext'
          maxItems: 5
          minItems: 0
          type: array
        outputContexts:
          description: "<p>A lists of contexts that the intent activates when it is\
            \ fulfilled.</p> <p>You can use an output context to indicate the intents\
            \ that Amazon Lex should consider for the next turn of the conversation\
            \ with a customer. </p> <p>When you use the <code>outputContextsList</code>\
            \ property, all of the contexts specified in the list are activated when\
            \ the intent is fulfilled. You can set up to 10 output contexts. You can\
            \ also set the number of conversation turns that the context should be\
            \ active, or the length of time that the context should be active.</p>"
          items:
            $ref: '#/components/schemas/OutputContext'
          maxItems: 10
          minItems: 0
          type: array
        kendraConfiguration:
          $ref: '#/components/schemas/CreateIntent_request_kendraConfiguration'
        initialResponseSetting:
          $ref: '#/components/schemas/CreateIntent_request_initialResponseSetting'
      required:
      - intentName
      type: object
    ListIntents_request_sortBy:
      description: Specifies attributes for sorting a list of intents.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/IntentSortAttribute'
          - description: The attribute to use to sort the list of intents.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can choose ascending or descending.
      type: object
    ListIntents_request:
      properties:
        sortBy:
          $ref: '#/components/schemas/ListIntents_request_sortBy'
        filters:
          description: Provides the specification of a filter used to limit the intents
            in the response to only those that match the filter specification. You
            can only specify one filter and only one string to filter on.
          items:
            $ref: '#/components/schemas/IntentFilter'
          maxItems: 1
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of intents to return in each page of results.\
            \ If there are fewer results than the max page size, only the actual number\
            \ of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "<p>If the response from the <code>ListIntents</code> operation\
            \ contains more results than specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response.</p> <p>Use the returned\
            \ token in the <code>nextToken</code> parameter of a <code>ListIntents</code>\
            \ request to return the next page of results. For a complete set of results,\
            \ call the <code>ListIntents</code> operation until the <code>nextToken</code>\
            \ returned in the response is null.</p>"
          type: string
      type: object
    UpdateResourcePolicy_request:
      properties:
        policy:
          description: "<p>A resource policy to add to the resource. The policy is\
            \ a JSON structure that contains one or more statements that define the\
            \ policy. The policy must follow the IAM syntax. For more information\
            \ about the contents of a JSON policy document, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html\"\
            > IAM JSON policy reference </a>. </p> <p>If the policy isn't valid, Amazon\
            \ Lex returns a validation exception.</p>"
          minLength: 2
          type: string
      required:
      - policy
      type: object
    CreateResourcePolicyStatement_request:
      properties:
        statementId:
          description: "The name of the statement. The ID is the same as the <code>Sid</code>\
            \ IAM property. The statement name must be unique within the policy. For\
            \ more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html\"\
            >IAM JSON policy elements: Sid</a>. "
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        effect:
          description: Determines whether the statement allows or denies access to
            the resource.
          enum:
          - Allow
          - Deny
          type: string
        principal:
          description: "An IAM principal, such as an IAM user, IAM role, or Amazon\
            \ Web Services services that is allowed or denied access to a resource.\
            \ For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\"\
            >Amazon Web Services JSON policy elements: Principal</a>."
          items:
            $ref: '#/components/schemas/Principal'
          type: array
        action:
          description: "The Amazon Lex action that this policy either allows or denies.\
            \ The action must apply to the resource type of the specified ARN. For\
            \ more information, see <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html\"\
            > Actions, resources, and condition keys for Amazon Lex V2</a>."
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        condition:
          additionalProperties:
            $ref: '#/components/schemas/ConditionKeyValueMap'
          description: "<p>Specifies a condition when the policy is in effect. If\
            \ the principal of the policy is a service principal, you must provide\
            \ two condition blocks, one with a SourceAccount global condition key\
            \ and one with a SourceArn global condition key.</p> <p>For more information,\
            \ see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html\"\
            >IAM JSON policy elements: Condition </a>.</p>"
          maxProperties: 10
          minProperties: 0
          type: object
      required:
      - action
      - effect
      - principal
      - statementId
      type: object
    CreateSlot_request_valueElicitationSetting_defaultValueSpecification:
      allOf:
      - $ref: '#/components/schemas/SlotDefaultValueSpecification'
      - description: "A list of default values for a slot. Default values are used\
          \ when Amazon Lex hasn't determined a value for a slot. You can specify\
          \ default values from context variables, session attributes, and defined\
          \ values."
      example:
        defaultValueList: ""
    CreateSlot_request_valueElicitationSetting_promptSpecification:
      allOf:
      - $ref: '#/components/schemas/PromptSpecification'
      - description: The prompt that Amazon Lex uses to elicit the slot value from
          the user.
      example:
        messageGroups: ""
        maxRetries: ""
        allowInterrupt: ""
        promptAttemptsSpecification: ""
        messageSelectionStrategy: ""
    CreateSlot_request_valueElicitationSetting_slotCaptureSetting:
      allOf:
      - $ref: '#/components/schemas/SlotCaptureSetting'
      - description: Specifies the settings that Amazon Lex uses when a slot value
          is successfully entered by a user.
      example:
        failureNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        failureConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        captureResponse:
          messageGroups: ""
          allowInterrupt: ""
        elicitationCodeHook:
          enableCodeHookInvocation: ""
          invocationLabel: ""
        captureNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        failureResponse:
          messageGroups: ""
          allowInterrupt: ""
        captureConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        codeHook:
          postCodeHookSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          active: ""
          enableCodeHookInvocation: ""
          invocationLabel: ""
    CreateSlot_request_valueElicitationSetting:
      description: Specifies the elicitation setting details eliciting a slot.
      properties:
        defaultValueSpecification:
          $ref: '#/components/schemas/CreateSlot_request_valueElicitationSetting_defaultValueSpecification'
        slotConstraint:
          allOf:
          - $ref: '#/components/schemas/SlotConstraint'
          - description: Specifies whether the slot is required or optional.
        promptSpecification:
          $ref: '#/components/schemas/CreateSlot_request_valueElicitationSetting_promptSpecification'
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          - description: "If you know a specific pattern that users might respond\
              \ to an Amazon Lex request for a slot value, you can provide those utterances\
              \ to improve accuracy. This is optional. In most cases, Amazon Lex is\
              \ capable of understanding user utterances."
        waitAndContinueSpecification:
          $ref: '#/components/schemas/WaitAndContinueSpecification'
        slotCaptureSetting:
          $ref: '#/components/schemas/CreateSlot_request_valueElicitationSetting_slotCaptureSetting'
      type: object
    CreateSlot_request_obfuscationSetting:
      description: 'Determines whether Amazon Lex obscures slot values in conversation
        logs. '
      properties:
        obfuscationSettingType:
          allOf:
          - $ref: '#/components/schemas/ObfuscationSettingType'
          - description: Value that determines whether Amazon Lex obscures slot values
              in conversation logs. The default is to obscure the values.
      type: object
    CreateSlot_request_multipleValuesSetting:
      description: Indicates whether a slot can return multiple values.
      properties:
        allowMultipleValues:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "<p>Indicates whether a slot can return multiple values.\
              \ When <code>true</code>, the slot may return more than one value in\
              \ a response. When <code>false</code>, the slot returns only a single\
              \ value.</p> <p>Multi-value slots are only available in the en-US locale.\
              \ If you set this value to <code>true</code> in any other locale, Amazon\
              \ Lex throws a <code>ValidationException</code>.</p> <p>If the <code>allowMutlipleValues</code>\
              \ is not set, the default value is <code>false</code>.</p>"
      type: object
    CreateSlot_request_subSlotSetting:
      description: Specifications for the constituent sub slots and the expression
        for the composite slot.
      properties:
        expression:
          allOf:
          - $ref: '#/components/schemas/SubSlotExpression'
          - description: The expression text for defining the constituent sub slots
              in the composite slot using logical AND and OR operators.
        slotSpecifications:
          allOf:
          - $ref: '#/components/schemas/SubSlotSpecificationMap'
          - description: Specifications for the constituent sub slots of a composite
              slot.
      type: object
    CreateSlot_request:
      properties:
        slotName:
          description: The name of the slot. Slot names must be unique within the
            bot that contains the slot.
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        description:
          description: A description of the slot. Use this to help identify the slot
            in lists.
          maxLength: 200
          minLength: 0
          type: string
        slotTypeId:
          description: The unique identifier for the slot type associated with this
            slot. The slot type determines the values that can be entered into the
            slot.
          maxLength: 25
          minLength: 1
          pattern: "^((AMAZON\\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$"
          type: string
        valueElicitationSetting:
          $ref: '#/components/schemas/CreateSlot_request_valueElicitationSetting'
        obfuscationSetting:
          $ref: '#/components/schemas/CreateSlot_request_obfuscationSetting'
        multipleValuesSetting:
          $ref: '#/components/schemas/CreateSlot_request_multipleValuesSetting'
        subSlotSetting:
          $ref: '#/components/schemas/CreateSlot_request_subSlotSetting'
      required:
      - slotName
      - valueElicitationSetting
      type: object
    ListSlots_request_sortBy:
      description: Specifies attributes for sorting a list of bots.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/SlotSortAttribute'
          - description: The attribute to use to sort the list.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can choose ascending or descending.
      type: object
    ListSlots_request:
      properties:
        sortBy:
          $ref: '#/components/schemas/ListSlots_request_sortBy'
        filters:
          description: Provides the specification of a filter used to limit the slots
            in the response to only those that match the filter specification. You
            can only specify one filter and only one string to filter on.
          items:
            $ref: '#/components/schemas/SlotFilter'
          maxItems: 1
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of slots to return in each page of results.\
            \ If there are fewer results than the max page size, only the actual number\
            \ of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "If the response from the <code>ListSlots</code> operation\
            \ contains more results than specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response. Use that token in the\
            \ <code>nextToken</code> parameter to return the next page of results."
          type: string
      type: object
    CreateSlotType_request_valueSelectionSetting_regexFilter:
      allOf:
      - $ref: '#/components/schemas/SlotValueRegexFilter'
      - description: A regular expression used to validate the value of a slot.
      example:
        pattern: ""
    CreateSlotType_request_valueSelectionSetting_advancedRecognitionSetting:
      allOf:
      - $ref: '#/components/schemas/AdvancedRecognitionSetting'
      - description: Provides settings that enable advanced recognition settings for
          slot values. You can use this to enable using slot values as a custom vocabulary
          for recognizing user utterances.
      example:
        audioRecognitionStrategy: ""
    CreateSlotType_request_valueSelectionSetting:
      description: Contains settings used by Amazon Lex to select a slot value.
      properties:
        resolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/SlotValueResolutionStrategy'
          - description: "<p>Determines the slot resolution strategy that Amazon Lex\
              \ uses to return slot type values. The field can be set to one of the\
              \ following values:</p> <ul> <li> <p> <code>ORIGINAL_VALUE</code> -\
              \ Returns the value entered by the user, if the user value is similar\
              \ to the slot value.</p> </li> <li> <p> <code>TOP_RESOLUTION</code>\
              \ - If there is a resolution list for the slot, return the first value\
              \ in the resolution list as the slot type value. If there is no resolution\
              \ list, null is returned.</p> </li> </ul> <p>If you don't specify the\
              \ <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>"
        regexFilter:
          $ref: '#/components/schemas/CreateSlotType_request_valueSelectionSetting_regexFilter'
        advancedRecognitionSetting:
          $ref: '#/components/schemas/CreateSlotType_request_valueSelectionSetting_advancedRecognitionSetting'
      type: object
    CreateSlotType_request_externalSourceSetting_grammarSlotTypeSetting:
      allOf:
      - $ref: '#/components/schemas/GrammarSlotTypeSetting'
      - description: Settings required for a slot type based on a grammar that you
          provide.
      example:
        source:
          s3ObjectKey: ""
          kmsKeyArn: ""
          s3BucketName: ""
    CreateSlotType_request_externalSourceSetting:
      description: Provides information about the external source of the slot type's
        definition.
      properties:
        grammarSlotTypeSetting:
          $ref: '#/components/schemas/CreateSlotType_request_externalSourceSetting_grammarSlotTypeSetting'
      type: object
    CreateSlotType_request_compositeSlotTypeSetting:
      description: A composite slot is a combination of two or more slots that capture
        multiple pieces of information in a single user input.
      properties:
        subSlots:
          allOf:
          - $ref: '#/components/schemas/SubSlotTypeList'
          - description: Subslots in the composite slot.
      type: object
    CreateSlotType_request:
      properties:
        slotTypeName:
          description: The name for the slot. A slot type name must be unique within
            the intent.
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        description:
          description: A description of the slot type. Use the description to help
            identify the slot type in lists.
          maxLength: 200
          minLength: 0
          type: string
        slotTypeValues:
          description: "A list of <code>SlotTypeValue</code> objects that defines\
            \ the values that the slot type can take. Each value can have a list of\
            \ synonyms, additional values that help train the machine learning model\
            \ about the values that it resolves for a slot."
          items:
            $ref: '#/components/schemas/SlotTypeValue'
          maxItems: 10000
          minItems: 1
          type: array
        valueSelectionSetting:
          $ref: '#/components/schemas/CreateSlotType_request_valueSelectionSetting'
        parentSlotTypeSignature:
          description: "<p>The built-in slot type used as a parent of this slot type.\
            \ When you define a parent slot type, the new slot type has the configuration\
            \ of the parent slot type.</p> <p>Only <code>AMAZON.AlphaNumeric</code>\
            \ is supported.</p>"
          type: string
        externalSourceSetting:
          $ref: '#/components/schemas/CreateSlotType_request_externalSourceSetting'
        compositeSlotTypeSetting:
          $ref: '#/components/schemas/CreateSlotType_request_compositeSlotTypeSetting'
      required:
      - slotTypeName
      type: object
    ListSlotTypes_request_sortBy:
      description: Specifies attributes for sorting a list of slot types.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSortAttribute'
          - description: The attribute to use to sort the list of slot types.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can say ascending or descending.
      type: object
    ListSlotTypes_request:
      properties:
        sortBy:
          $ref: '#/components/schemas/ListSlotTypes_request_sortBy'
        filters:
          description: Provides the specification of a filter used to limit the slot
            types in the response to only those that match the filter specification.
            You can only specify one filter and only one string to filter on.
          items:
            $ref: '#/components/schemas/SlotTypeFilter'
          maxItems: 1
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of slot types to return in each page of\
            \ results. If there are fewer results than the max page size, only the\
            \ actual number of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "If the response from the <code>ListSlotTypes</code> operation\
            \ contains more results than specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response. Use that token in the\
            \ <code>nextToken</code> parameter to return the next page of results."
          type: string
      type: object
    CreateTestSetDiscrepancyReport_request_target_botAliasTarget:
      allOf:
      - $ref: '#/components/schemas/TestSetDiscrepancyReportBotAliasTarget'
      - description: Contains information about the bot alias used as the resource
          for the test set discrepancy report.
      example:
        botAliasId: ""
        botId: ""
        localeId: ""
    CreateTestSetDiscrepancyReport_request_target:
      description: Contains information about the resource used for the test set discrepancy
        report.
      properties:
        botAliasTarget:
          $ref: '#/components/schemas/CreateTestSetDiscrepancyReport_request_target_botAliasTarget'
      type: object
    CreateTestSetDiscrepancyReport_request:
      properties:
        target:
          $ref: '#/components/schemas/CreateTestSetDiscrepancyReport_request_target'
      required:
      - target
      type: object
    UpdateBot_request:
      properties:
        botName:
          description: The new name of the bot. The name must be unique in the account
            that creates the bot.
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        description:
          description: A description of the bot.
          maxLength: 200
          minLength: 0
          type: string
        roleArn:
          description: The Amazon Resource Name (ARN) of an IAM role that has permissions
            to access the bot.
          maxLength: 2048
          minLength: 32
          pattern: "^arn:aws:iam::[0-9]{12}:role/.*$"
          type: string
        dataPrivacy:
          $ref: '#/components/schemas/CreateBot_request_dataPrivacy'
        idleSessionTTLInSeconds:
          description: "<p>The time, in seconds, that Amazon Lex should keep information\
            \ about a user's conversation with the bot.</p> <p>A user interaction\
            \ remains active for the amount of time specified. If no conversation\
            \ occurs during this time, the session expires and Amazon Lex deletes\
            \ any data provided before the timeout.</p> <p>You can specify between\
            \ 60 (1 minute) and 86,400 (24 hours) seconds.</p>"
          maximum: 86400
          minimum: 60
          type: integer
        botType:
          description: The type of the bot to be updated.
          enum:
          - Bot
          - BotNetwork
          type: string
        botMembers:
          description: The list of bot members in the network associated with the
            update action.
          items:
            $ref: '#/components/schemas/BotMember'
          maxItems: 10
          minItems: 0
          type: array
      required:
      - botName
      - dataPrivacy
      - idleSessionTTLInSeconds
      - roleArn
      type: object
    UpdateBotAlias_request:
      properties:
        botAliasName:
          description: The new name to assign to the bot alias.
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        description:
          description: The new description to assign to the bot alias.
          maxLength: 200
          minLength: 0
          type: string
        botVersion:
          description: The new bot version to assign to the bot alias.
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        botAliasLocaleSettings:
          additionalProperties:
            $ref: '#/components/schemas/BotAliasLocaleSettings'
          description: The new Lambda functions to use in each locale for the bot
            alias.
          minProperties: 1
          type: object
        conversationLogSettings:
          $ref: '#/components/schemas/CreateBotAlias_request_conversationLogSettings'
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/CreateBotAlias_request_sentimentAnalysisSettings'
      required:
      - botAliasName
      type: object
    UpdateExport_request:
      properties:
        filePassword:
          description: The new password to use to encrypt the export zip archive.
          format: password
          maxLength: 1024
          minLength: 1
          type: string
      type: object
    UpdateIntent_request:
      properties:
        intentName:
          description: The new name for the intent.
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        description:
          description: The new description of the intent.
          maxLength: 200
          minLength: 0
          type: string
        parentIntentSignature:
          description: The signature of the new built-in intent to use as the parent
            of this intent.
          type: string
        sampleUtterances:
          description: New utterances used to invoke the intent.
          items:
            $ref: '#/components/schemas/SampleUtterance'
          type: array
        dialogCodeHook:
          $ref: '#/components/schemas/CreateIntent_request_dialogCodeHook'
        fulfillmentCodeHook:
          $ref: '#/components/schemas/CreateIntent_request_fulfillmentCodeHook'
        slotPriorities:
          description: A new list of slots and their priorities that are contained
            by the intent.
          items:
            $ref: '#/components/schemas/SlotPriority'
          type: array
        intentConfirmationSetting:
          $ref: '#/components/schemas/CreateIntent_request_intentConfirmationSetting'
        intentClosingSetting:
          $ref: '#/components/schemas/CreateIntent_request_intentClosingSetting'
        inputContexts:
          description: A new list of contexts that must be active in order for Amazon
            Lex to consider the intent.
          items:
            $ref: '#/components/schemas/InputContext'
          maxItems: 5
          minItems: 0
          type: array
        outputContexts:
          description: A new list of contexts that Amazon Lex activates when the intent
            is fulfilled.
          items:
            $ref: '#/components/schemas/OutputContext'
          maxItems: 10
          minItems: 0
          type: array
        kendraConfiguration:
          $ref: '#/components/schemas/CreateIntent_request_kendraConfiguration'
        initialResponseSetting:
          $ref: '#/components/schemas/CreateIntent_request_initialResponseSetting'
      required:
      - intentName
      type: object
    UpdateSlot_request:
      properties:
        slotName:
          description: The new name for the slot.
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        description:
          description: The new description for the slot.
          maxLength: 200
          minLength: 0
          type: string
        slotTypeId:
          description: 'The unique identifier of the new slot type to associate with
            this slot. '
          maxLength: 25
          minLength: 1
          pattern: "^((AMAZON\\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$"
          type: string
        valueElicitationSetting:
          $ref: '#/components/schemas/CreateSlot_request_valueElicitationSetting'
        obfuscationSetting:
          $ref: '#/components/schemas/CreateSlot_request_obfuscationSetting'
        multipleValuesSetting:
          $ref: '#/components/schemas/CreateSlot_request_multipleValuesSetting'
        subSlotSetting:
          $ref: '#/components/schemas/CreateSlot_request_subSlotSetting'
      required:
      - slotName
      - valueElicitationSetting
      type: object
    UpdateSlotType_request:
      properties:
        slotTypeName:
          description: The new name of the slot type.
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        description:
          description: The new description of the slot type.
          maxLength: 200
          minLength: 0
          type: string
        slotTypeValues:
          description: A new list of values and their optional synonyms that define
            the values that the slot type can take.
          items:
            $ref: '#/components/schemas/SlotTypeValue'
          maxItems: 10000
          minItems: 1
          type: array
        valueSelectionSetting:
          $ref: '#/components/schemas/CreateSlotType_request_valueSelectionSetting'
        parentSlotTypeSignature:
          description: The new built-in slot type that should be used as the parent
            of this slot type.
          type: string
        externalSourceSetting:
          $ref: '#/components/schemas/CreateSlotType_request_externalSourceSetting'
        compositeSlotTypeSetting:
          $ref: '#/components/schemas/CreateSlotType_request_compositeSlotTypeSetting'
      required:
      - slotTypeName
      type: object
    UpdateTestSet_request:
      properties:
        testSetName:
          description: The new test set name.
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        description:
          description: The new test set description.
          maxLength: 200
          minLength: 0
          type: string
      required:
      - testSetName
      type: object
    UpdateBotRecommendation_request_encryptionSetting:
      description: "The object representing the passwords that were used to encrypt\
        \ the data related to the bot recommendation, as well as the KMS key ARN used\
        \ to encrypt the associated metadata."
      properties:
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          - description: The KMS key ARN used to encrypt the metadata associated with
              the bot recommendation.
        botLocaleExportPassword:
          allOf:
          - $ref: '#/components/schemas/FilePassword'
          - description: The password used to encrypt the recommended bot recommendation
              file.
        associatedTranscriptsPassword:
          allOf:
          - $ref: '#/components/schemas/FilePassword'
          - description: The password used to encrypt the associated transcript file.
      type: object
    UpdateBotRecommendation_request:
      properties:
        encryptionSetting:
          $ref: '#/components/schemas/UpdateBotRecommendation_request_encryptionSetting'
      required:
      - encryptionSetting
      type: object
    ListAggregatedUtterances_request_aggregationDuration_relativeAggregationDuration:
      allOf:
      - $ref: '#/components/schemas/RelativeAggregationDuration'
      - description: 'The desired time window for aggregating utterances. '
      example:
        timeDimension: ""
        timeValue: ""
    ListAggregatedUtterances_request_aggregationDuration:
      description: Provides parameters for setting the time window and duration for
        aggregating utterance data.
      properties:
        relativeAggregationDuration:
          $ref: '#/components/schemas/ListAggregatedUtterances_request_aggregationDuration_relativeAggregationDuration'
      type: object
    ListAggregatedUtterances_request_sortBy:
      description: Specifies attributes for sorting a list of utterances.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/AggregatedUtterancesSortAttribute'
          - description: The utterance attribute to sort by.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: Specifies whether to sort the aggregated utterances in ascending
              or descending order.
      type: object
    ListAggregatedUtterances_request:
      properties:
        botAliasId:
          description: "The identifier of the bot alias associated with this request.\
            \ If you specify the bot alias, you can't specify the bot version."
          maxLength: 10
          minLength: 10
          pattern: "^(\\bTSTALIASID\\b|[0-9a-zA-Z]+)$"
          type: string
        botVersion:
          description: "The identifier of the bot version associated with this request.\
            \ If you specify the bot version, you can't specify the bot alias."
          maxLength: 5
          minLength: 1
          pattern: "^(DRAFT|[0-9]+)$"
          type: string
        localeId:
          description: "The identifier of the language and locale where the utterances\
            \ were collected. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\"\
            >Supported languages</a>."
          type: string
        aggregationDuration:
          $ref: '#/components/schemas/ListAggregatedUtterances_request_aggregationDuration'
        sortBy:
          $ref: '#/components/schemas/ListAggregatedUtterances_request_sortBy'
        filters:
          description: Provides the specification of a filter used to limit the utterances
            in the response to only those that match the filter specification. You
            can only specify one filter and one string to filter on.
          items:
            $ref: '#/components/schemas/AggregatedUtterancesFilter'
          maxItems: 1
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of utterances to return in each page of\
            \ results. If there are fewer results than the maximum page size, only\
            \ the actual number of results are returned. If you don't specify the\
            \ <code>maxResults</code> parameter, 1,000 results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "If the response from the <code>ListAggregatedUtterances</code>\
            \ operation contains more results that specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response. Use that token in the\
            \ <code>nextToken</code> parameter to return the next page of results."
          type: string
      required:
      - aggregationDuration
      - localeId
      type: object
    StartBotRecommendation_request_transcriptSourceSetting_s3BucketTranscriptSource:
      allOf:
      - $ref: '#/components/schemas/S3BucketTranscriptSource'
      - description: Indicates the setting of the Amazon S3 bucket where the transcript
          is stored.
      example:
        transcriptFilter:
          lexTranscriptFilter:
            dateRangeFilter:
              startDateTime: ""
              endDateTime: ""
        kmsKeyArn: ""
        s3BucketName: ""
        pathFormat:
          objectPrefixes: ""
        transcriptFormat: ""
    StartBotRecommendation_request_transcriptSourceSetting:
      description: Indicates the setting of the location where the transcript is stored.
      properties:
        s3BucketTranscriptSource:
          $ref: '#/components/schemas/StartBotRecommendation_request_transcriptSourceSetting_s3BucketTranscriptSource'
      type: object
    StartBotRecommendation_request:
      properties:
        transcriptSourceSetting:
          $ref: '#/components/schemas/StartBotRecommendation_request_transcriptSourceSetting'
        encryptionSetting:
          $ref: '#/components/schemas/UpdateBotRecommendation_request_encryptionSetting'
      required:
      - transcriptSourceSetting
      type: object
    ListBotRecommendations_request:
      properties:
        maxResults:
          description: "The maximum number of bot recommendations to return in each\
            \ page of results. If there are fewer results than the max page size,\
            \ only the actual number of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "If the response from the ListBotRecommendation operation contains\
            \ more results than specified in the maxResults parameter, a token is\
            \ returned in the response. Use that token in the nextToken parameter\
            \ to return the next page of results."
          type: string
      type: object
    ListBuiltInIntents_request_sortBy:
      description: Specifies attributes for sorting a list of built-in intents.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BuiltInIntentSortAttribute'
          - description: The attribute to use to sort the list of built-in intents.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can specify ascending or
              descending order.
      type: object
    ListBuiltInIntents_request:
      properties:
        sortBy:
          $ref: '#/components/schemas/ListBuiltInIntents_request_sortBy'
        maxResults:
          description: "The maximum number of built-in intents to return in each page\
            \ of results. If there are fewer results than the max page size, only\
            \ the actual number of results are returned."
          maximum: 20
          minimum: 20
          type: integer
        nextToken:
          description: "If the response from the <code>ListBuiltInIntents</code> operation\
            \ contains more results than specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response. Use that token in the\
            \ <code>nextToken</code> parameter to return the next page of results."
          type: string
      type: object
    ListBuiltInSlotTypes_request_sortBy:
      description: Specifies attributes for sorting a list of built-in slot types.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BuiltInSlotTypeSortAttribute'
          - description: The attribute to use to sort the list of built-in intents.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list. You can choose ascending or descending.
      type: object
    ListBuiltInSlotTypes_request:
      properties:
        sortBy:
          $ref: '#/components/schemas/ListBuiltInSlotTypes_request_sortBy'
        maxResults:
          description: "The maximum number of built-in slot types to return in each\
            \ page of results. If there are fewer results than the max page size,\
            \ only the actual number of results are returned."
          maximum: 20
          minimum: 20
          type: integer
        nextToken:
          description: "If the response from the <code>ListBuiltInSlotTypes</code>\
            \ operation contains more results than specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response. Use that token in the\
            \ <code>nextToken</code> parameter to return the next page of results."
          type: string
      type: object
    ListCustomVocabularyItems_request:
      properties:
        maxResults:
          description: The maximum number of items returned by the list operation.
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: The nextToken identifier to the list custom vocabulary request.
          type: string
      type: object
    StartImport_request_resourceSpecification_botImportSpecification:
      allOf:
      - $ref: '#/components/schemas/BotImportSpecification'
      - description: Parameters for importing a bot.
      example:
        testBotAliasTags: ""
        botName: ""
        roleArn: ""
        botTags: ""
        dataPrivacy:
          childDirected: ""
        idleSessionTTLInSeconds: ""
    StartImport_request_resourceSpecification_botLocaleImportSpecification:
      allOf:
      - $ref: '#/components/schemas/BotLocaleImportSpecification'
      - description: Parameters for importing a bot locale.
      example:
        nluIntentConfidenceThreshold: ""
        voiceSettings:
          voiceId: ""
          engine: ""
        botId: ""
        botVersion: ""
        localeId: ""
    StartImport_request_resourceSpecification_testSetImportResourceSpecification:
      allOf:
      - $ref: '#/components/schemas/TestSetImportResourceSpecification'
      - description: Specifications for the test set that is imported.
      example:
        testSetTags: ""
        modality: ""
        roleArn: ""
        description: ""
        storageLocation:
          s3Path: ""
          kmsKeyArn: ""
          s3BucketName: ""
        importInputLocation:
          s3Path: ""
          s3BucketName: ""
        testSetName: ""
    StartImport_request_resourceSpecification:
      description: "Provides information about the bot or bot locale that you want\
        \ to import. You can specify the <code>botImportSpecification</code> or the\
        \ <code>botLocaleImportSpecification</code>, but not both."
      properties:
        botImportSpecification:
          $ref: '#/components/schemas/StartImport_request_resourceSpecification_botImportSpecification'
        botLocaleImportSpecification:
          $ref: '#/components/schemas/StartImport_request_resourceSpecification_botLocaleImportSpecification'
        customVocabularyImportSpecification:
          $ref: '#/components/schemas/CustomVocabularyImportSpecification'
        testSetImportResourceSpecification:
          $ref: '#/components/schemas/StartImport_request_resourceSpecification_testSetImportResourceSpecification'
      type: object
    StartImport_request:
      properties:
        importId:
          description: The unique identifier for the import. It is included in the
            response from the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateUploadUrl.html">CreateUploadUrl</a>
            operation.
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        resourceSpecification:
          $ref: '#/components/schemas/StartImport_request_resourceSpecification'
        mergeStrategy:
          description: The strategy to use when there is a name conflict between the
            imported resource and an existing resource. When the merge strategy is
            <code>FailOnConflict</code> existing resources are not overwritten and
            the import fails.
          enum:
          - Overwrite
          - FailOnConflict
          - Append
          type: string
        filePassword:
          description: The password used to encrypt the zip archive that contains
            the resource definition. You should always encrypt the zip archive to
            protect it during transit between your site and Amazon Lex.
          format: password
          maxLength: 1024
          minLength: 1
          type: string
      required:
      - importId
      - mergeStrategy
      - resourceSpecification
      type: object
    ListImports_request_sortBy:
      description: Provides information for sorting a list of imports.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/ImportSortAttribute'
          - description: The export field to use for sorting.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: The order to sort the list.
      type: object
    ListImports_request:
      properties:
        botId:
          description: The unique identifier that Amazon Lex assigned to the bot.
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        botVersion:
          description: The version of the bot to list imports for.
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          type: string
        sortBy:
          $ref: '#/components/schemas/ListImports_request_sortBy'
        filters:
          description: Provides the specification of a filter used to limit the bots
            in the response to only those that match the filter specification. You
            can only specify one filter and one string to filter on.
          items:
            $ref: '#/components/schemas/ImportFilter'
          maxItems: 1
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of imports to return in each page of results.\
            \ If there are fewer results than the max page size, only the actual number\
            \ of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "<p>If the response from the <code>ListImports</code> operation\
            \ contains more results than specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response.</p> <p>Use the returned\
            \ token in the <code>nextToken</code> parameter of a <code>ListImports</code>\
            \ request to return the next page of results. For a complete set of results,\
            \ call the <code>ListImports</code> operation until the <code>nextToken</code>\
            \ returned in the response is null.</p>"
          type: string
        localeId:
          description: "Specifies the locale that should be present in the list. If\
            \ you don't specify a resource type in the <code>filters</code> parameter,\
            \ the list contains both bot locales and custom vocabularies."
          type: string
      type: object
    ListIntentMetrics_request:
      properties:
        startDateTime:
          description: The timestamp that marks the beginning of the range of time
            for which you want to see intent metrics.
          format: date-time
          type: string
        endDateTime:
          description: The date and time that marks the end of the range of time for
            which you want to see intent metrics.
          format: date-time
          type: string
        metrics:
          description: "A list of objects, each of which contains a metric you want\
            \ to list, the statistic for the metric you want to return, and the order\
            \ by which to organize the results."
          items:
            $ref: '#/components/schemas/AnalyticsIntentMetric'
          maxItems: 5
          minItems: 1
          type: array
        binBy:
          description: "A list of objects, each of which contains specifications for\
            \ organizing the results by time."
          items:
            $ref: '#/components/schemas/AnalyticsBinBySpecification'
          maxItems: 1
          minItems: 1
          type: array
        groupBy:
          description: "<p>A list of objects, each of which specifies how to group\
            \ the results. You can group by the following criteria:</p> <ul> <li>\
            \ <p> <code>IntentName</code> – The name of the intent.</p> </li> <li>\
            \ <p> <code>IntentEndState</code> – The final state of the intent. The\
            \ possible end states are detailed in <a href=\"https://docs.aws.amazon.com/analytics-key-definitions-intents\"\
            >Key definitions</a> in the user guide.</p> </li> </ul>"
          items:
            $ref: '#/components/schemas/AnalyticsIntentGroupBySpecification'
          maxItems: 3
          minItems: 1
          type: array
        filters:
          description: "A list of objects, each of which describes a condition by\
            \ which you want to filter the results."
          items:
            $ref: '#/components/schemas/AnalyticsIntentFilter'
          maxItems: 9
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of results to return in each page of results.\
            \ If there are fewer results than the maximum page size, only the actual\
            \ number of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "<p>If the response from the ListIntentMetrics operation contains\
            \ more results than specified in the maxResults parameter, a token is\
            \ returned in the response.</p> <p>Use the returned token in the nextToken\
            \ parameter of a ListIntentMetrics request to return the next page of\
            \ results. For a complete set of results, call the ListIntentMetrics operation\
            \ until the nextToken returned in the response is null.</p>"
          type: string
      required:
      - endDateTime
      - metrics
      - startDateTime
      type: object
    ListIntentPaths_request:
      properties:
        startDateTime:
          description: The date and time that marks the beginning of the range of
            time for which you want to see intent path metrics.
          format: date-time
          type: string
        endDateTime:
          description: The date and time that marks the end of the range of time for
            which you want to see intent path metrics.
          format: date-time
          type: string
        intentPath:
          description: <p>The intent path for which you want to retrieve metrics.
            Use a forward slash to separate intents in the path. For example:</p>
            <ul> <li> <p>/BookCar</p> </li> <li> <p>/BookCar/BookHotel</p> </li> <li>
            <p>/BookHotel/BookCar</p> </li> </ul>
          maxLength: 1024
          minLength: 1
          type: string
        filters:
          description: "A list of objects, each describes a condition by which you\
            \ want to filter the results."
          items:
            $ref: '#/components/schemas/AnalyticsPathFilter'
          maxItems: 5
          minItems: 1
          type: array
      required:
      - endDateTime
      - intentPath
      - startDateTime
      type: object
    ListIntentStageMetrics_request:
      properties:
        startDateTime:
          description: The date and time that marks the beginning of the range of
            time for which you want to see intent stage metrics.
          format: date-time
          type: string
        endDateTime:
          description: The date and time that marks the end of the range of time for
            which you want to see intent stage metrics.
          format: date-time
          type: string
        metrics:
          description: "A list of objects, each of which contains a metric you want\
            \ to list, the statistic for the metric you want to return, and the method\
            \ by which to organize the results."
          items:
            $ref: '#/components/schemas/AnalyticsIntentStageMetric'
          maxItems: 5
          minItems: 1
          type: array
        binBy:
          description: "A list of objects, each of which contains specifications for\
            \ organizing the results by time."
          items:
            $ref: '#/components/schemas/AnalyticsBinBySpecification'
          maxItems: 1
          minItems: 1
          type: array
        groupBy:
          description: "<p>A list of objects, each of which specifies how to group\
            \ the results. You can group by the following criteria:</p> <ul> <li>\
            \ <p> <code>IntentStageName</code> – The name of the intent stage.</p>\
            \ </li> <li> <p> <code>SwitchedToIntent</code> – The intent to which the\
            \ conversation was switched (if any).</p> </li> </ul>"
          items:
            $ref: '#/components/schemas/AnalyticsIntentStageGroupBySpecification'
          maxItems: 2
          minItems: 1
          type: array
        filters:
          description: "A list of objects, each of which describes a condition by\
            \ which you want to filter the results."
          items:
            $ref: '#/components/schemas/AnalyticsIntentStageFilter'
          maxItems: 9
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of results to return in each page of results.\
            \ If there are fewer results than the maximum page size, only the actual\
            \ number of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "<p>If the response from the ListIntentStageMetrics operation\
            \ contains more results than specified in the maxResults parameter, a\
            \ token is returned in the response.</p> <p>Use the returned token in\
            \ the nextToken parameter of a ListIntentStageMetrics request to return\
            \ the next page of results. For a complete set of results, call the ListIntentStageMetrics\
            \ operation until the nextToken returned in the response is null.</p>"
          type: string
      required:
      - endDateTime
      - metrics
      - startDateTime
      type: object
    ListRecommendedIntents_request:
      properties:
        nextToken:
          description: "If the response from the ListRecommendedIntents operation\
            \ contains more results than specified in the maxResults parameter, a\
            \ token is returned in the response. Use that token in the nextToken parameter\
            \ to return the next page of results."
          type: string
        maxResults:
          description: "The maximum number of bot recommendations to return in each\
            \ page of results. If there are fewer results than the max page size,\
            \ only the actual number of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
      type: object
    ListSessionAnalyticsData_request_sortBy:
      description: An object specifying the measure and method by which to sort the
        session analytics data.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionSortByName'
          - description: <p>The measure by which to sort the session analytics data.</p>
              <ul> <li> <p> <code>conversationStartTime</code> – The date and time
              when the conversation began. A conversation is defined as a unique combination
              of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
              </li> <li> <p> <code>numberOfTurns</code> – The number of turns that
              the session took.</p> </li> <li> <p> <code>conversationDurationSeconds</code>
              – The duration of the conversation in seconds.</p> </li> </ul>
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          - description: Specifies whether to sort the results in ascending or descending
              order.
      type: object
    ListSessionAnalyticsData_request:
      properties:
        startDateTime:
          description: The date and time that marks the beginning of the range of
            time for which you want to see session analytics.
          format: date-time
          type: string
        endDateTime:
          description: The date and time that marks the end of the range of time for
            which you want to see session analytics.
          format: date-time
          type: string
        sortBy:
          $ref: '#/components/schemas/ListSessionAnalyticsData_request_sortBy'
        filters:
          description: "A list of objects, each of which describes a condition by\
            \ which you want to filter the results."
          items:
            $ref: '#/components/schemas/AnalyticsSessionFilter'
          maxItems: 10
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of results to return in each page of results.\
            \ If there are fewer results than the maximum page size, only the actual\
            \ number of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "<p>If the response from the ListSessionAnalyticsData operation\
            \ contains more results than specified in the maxResults parameter, a\
            \ token is returned in the response.</p> <p>Use the returned token in\
            \ the nextToken parameter of a ListSessionAnalyticsData request to return\
            \ the next page of results. For a complete set of results, call the ListSessionAnalyticsData\
            \ operation until the nextToken returned in the response is null.</p>"
          type: string
      required:
      - endDateTime
      - startDateTime
      type: object
    ListSessionMetrics_request:
      properties:
        startDateTime:
          description: The date and time that marks the beginning of the range of
            time for which you want to see session metrics.
          format: date-time
          type: string
        endDateTime:
          description: The date and time that marks the end of the range of time for
            which you want to see session metrics.
          format: date-time
          type: string
        metrics:
          description: "A list of objects, each of which contains a metric you want\
            \ to list, the statistic for the metric you want to return, and the method\
            \ by which to organize the results."
          items:
            $ref: '#/components/schemas/AnalyticsSessionMetric'
          maxItems: 7
          minItems: 1
          type: array
        binBy:
          description: "A list of objects, each of which contains specifications for\
            \ organizing the results by time."
          items:
            $ref: '#/components/schemas/AnalyticsBinBySpecification'
          maxItems: 1
          minItems: 1
          type: array
        groupBy:
          description: "<p>A list of objects, each of which specifies how to group\
            \ the results. You can group by the following criteria:</p> <ul> <li>\
            \ <p> <code>ConversationEndState</code> – The final state of the conversation.\
            \ The possible end states are detailed in <a href=\"https://docs.aws.amazon.com/analytics-key-definitions-conversations\"\
            >Key definitions</a> in the user guide.</p> </li> <li> <p> <code>LocaleId</code>\
            \ – The unique identifier of the bot locale.</p> </li> </ul>"
          items:
            $ref: '#/components/schemas/AnalyticsSessionGroupBySpecification'
          maxItems: 2
          minItems: 1
          type: array
        filters:
          description: "A list of objects, each of which describes a condition by\
            \ which you want to filter the results."
          items:
            $ref: '#/components/schemas/AnalyticsSessionFilter'
          maxItems: 10
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of results to return in each page of results.\
            \ If there are fewer results than the maximum page size, only the actual\
            \ number of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "<p>If the response from the ListSessionMetrics operation contains\
            \ more results than specified in the maxResults parameter, a token is\
            \ returned in the response.</p> <p>Use the returned token in the nextToken\
            \ parameter of a ListSessionMetrics request to return the next page of\
            \ results. For a complete set of results, call the ListSessionMetrics\
            \ operation until the nextToken returned in the response is null.</p>"
          type: string
      required:
      - endDateTime
      - metrics
      - startDateTime
      type: object
    TagResource_request:
      properties:
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "A list of tag keys to add to the resource. If a tag key already\
            \ exists, the existing value is replaced with the new value."
          maxProperties: 200
          minProperties: 0
          type: object
      required:
      - tags
      type: object
    ListTestExecutionResultItems_request_resultFilterBy_conversationLevelTestResultsFilterBy:
      allOf:
      - $ref: '#/components/schemas/ConversationLevelTestResultsFilterBy'
      - description: Contains information about the method for filtering Conversation
          level test results.
      example:
        endToEndResult: ""
    ListTestExecutionResultItems_request_resultFilterBy:
      description: Contains information about the method by which to filter the results
        of the test execution.
      properties:
        resultTypeFilter:
          allOf:
          - $ref: '#/components/schemas/TestResultTypeFilter'
          - description: Specifies which results to filter. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/test-results-details-test-set.html">Test
              result details"&gt;Test results details</a> for details about different
              types of results.
        conversationLevelTestResultsFilterBy:
          $ref: '#/components/schemas/ListTestExecutionResultItems_request_resultFilterBy_conversationLevelTestResultsFilterBy'
      type: object
    ListTestExecutionResultItems_request:
      properties:
        resultFilterBy:
          $ref: '#/components/schemas/ListTestExecutionResultItems_request_resultFilterBy'
        maxResults:
          description: "The maximum number of test execution result items to return\
            \ in each page. If there are fewer results than the max page size, only\
            \ the actual number of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "If the response from the <code>ListTestExecutionResultItems</code>\
            \ operation contains more results than specified in the <code>maxResults</code>\
            \ parameter, a token is returned in the response. Use that token in the\
            \ <code>nextToken</code> parameter to return the next page of results."
          type: string
      required:
      - resultFilterBy
      type: object
    ListTestExecutions_request_sortBy:
      description: Contains information about the method by which to sort the instances
        of test executions you have carried out.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/TestExecutionSortAttribute'
          - description: Specifies whether to sort the test set executions by the
              date and time at which the test sets were created.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: Specifies whether to sort in ascending or descending order.
      type: object
    ListTestExecutions_request:
      properties:
        sortBy:
          $ref: '#/components/schemas/ListTestExecutions_request_sortBy'
        maxResults:
          description: "The maximum number of test executions to return in each page.\
            \ If there are fewer results than the max page size, only the actual number\
            \ of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "If the response from the ListTestExecutions operation contains\
            \ more results than specified in the maxResults parameter, a token is\
            \ returned in the response. Use that token in the nextToken parameter\
            \ to return the next page of results."
          type: string
      type: object
    ListTestSetRecords_request:
      properties:
        maxResults:
          description: "The maximum number of test set records to return in each page.\
            \ If there are fewer records than the max page size, only the actual number\
            \ of records are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "If the response from the ListTestSetRecords operation contains\
            \ more results than specified in the maxResults parameter, a token is\
            \ returned in the response. Use that token in the nextToken parameter\
            \ to return the next page of results."
          type: string
      type: object
    ListTestSets_request_sortBy:
      description: Contains information about the methods by which to sort the test
        set.
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/TestSetSortAttribute'
          - description: Specifies whether to sort the test sets by name or by the
              time they were last updated.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: Specifies whether to sort in ascending or descending order.
      type: object
    ListTestSets_request:
      properties:
        sortBy:
          $ref: '#/components/schemas/ListTestSets_request_sortBy'
        maxResults:
          description: "The maximum number of test sets to return in each page. If\
            \ there are fewer results than the max page size, only the actual number\
            \ of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "If the response from the ListTestSets operation contains more\
            \ results than specified in the maxResults parameter, a token is returned\
            \ in the response. Use that token in the nextToken parameter to return\
            \ the next page of results."
          type: string
      type: object
    ListUtteranceAnalyticsData_request_sortBy:
      description: An object specifying the measure and method by which to sort the
        utterance data.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceSortByName'
          - description: <p>The measure by which to sort the utterance analytics data.</p>
              <ul> <li> <p> <code>Count</code> – The number of utterances.</p> </li>
              <li> <p> <code>UtteranceTimestamp</code> – The date and time of the
              utterance.</p> </li> </ul>
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          - description: Specifies whether to sort the results in ascending or descending
              order.
      type: object
    ListUtteranceAnalyticsData_request:
      properties:
        startDateTime:
          description: The date and time that marks the beginning of the range of
            time for which you want to see utterance analytics.
          format: date-time
          type: string
        endDateTime:
          description: The date and time that marks the end of the range of time for
            which you want to see utterance analytics.
          format: date-time
          type: string
        sortBy:
          $ref: '#/components/schemas/ListUtteranceAnalyticsData_request_sortBy'
        filters:
          description: "A list of objects, each of which describes a condition by\
            \ which you want to filter the results."
          items:
            $ref: '#/components/schemas/AnalyticsUtteranceFilter'
          maxItems: 9
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of results to return in each page of results.\
            \ If there are fewer results than the maximum page size, only the actual\
            \ number of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "<p>If the response from the ListUtteranceAnalyticsData operation\
            \ contains more results than specified in the maxResults parameter, a\
            \ token is returned in the response.</p> <p>Use the returned token in\
            \ the nextToken parameter of a ListUtteranceAnalyticsData request to return\
            \ the next page of results. For a complete set of results, call the ListUtteranceAnalyticsData\
            \ operation until the nextToken returned in the response is null.</p>"
          type: string
      required:
      - endDateTime
      - startDateTime
      type: object
    ListUtteranceMetrics_request:
      properties:
        startDateTime:
          description: The date and time that marks the beginning of the range of
            time for which you want to see utterance metrics.
          format: date-time
          type: string
        endDateTime:
          description: The date and time that marks the end of the range of time for
            which you want to see utterance metrics.
          format: date-time
          type: string
        metrics:
          description: "A list of objects, each of which contains a metric you want\
            \ to list, the statistic for the metric you want to return, and the method\
            \ by which to organize the results."
          items:
            $ref: '#/components/schemas/AnalyticsUtteranceMetric'
          maxItems: 4
          minItems: 1
          type: array
        binBy:
          description: "A list of objects, each of which contains specifications for\
            \ organizing the results by time."
          items:
            $ref: '#/components/schemas/AnalyticsBinBySpecification'
          maxItems: 1
          minItems: 1
          type: array
        groupBy:
          description: "<p>A list of objects, each of which specifies how to group\
            \ the results. You can group by the following criteria:</p> <ul> <li>\
            \ <p> <code>UtteranceText</code> – The transcription of the utterance.</p>\
            \ </li> <li> <p> <code>UtteranceState</code> – The state of the utterance.\
            \ The possible states are detailed in <a href=\"https://docs.aws.amazon.com/analytics-key-definitions-utterances\"\
            >Key definitions</a> in the user guide.</p> </li> </ul>"
          items:
            $ref: '#/components/schemas/AnalyticsUtteranceGroupBySpecification'
          maxItems: 2
          minItems: 1
          type: array
        attributes:
          description: <p>A list containing attributes related to the utterance that
            you want the response to return. The following attributes are possible:</p>
            <ul> <li> <p> <code>LastUsedIntent</code> – The last used intent at the
            time of the utterance.</p> </li> </ul>
          items:
            $ref: '#/components/schemas/AnalyticsUtteranceAttribute'
          maxItems: 1
          minItems: 1
          type: array
        filters:
          description: "A list of objects, each of which describes a condition by\
            \ which you want to filter the results."
          items:
            $ref: '#/components/schemas/AnalyticsUtteranceFilter'
          maxItems: 9
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of results to return in each page of results.\
            \ If there are fewer results than the maximum page size, only the actual\
            \ number of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextToken:
          description: "<p>If the response from the ListUtteranceMetrics operation\
            \ contains more results than specified in the maxResults parameter, a\
            \ token is returned in the response.</p> <p>Use the returned token in\
            \ the nextToken parameter of a ListUtteranceMetrics request to return\
            \ the next page of results. For a complete set of results, call the ListUtteranceMetrics\
            \ operation until the nextToken returned in the response is null.</p>"
          type: string
      required:
      - endDateTime
      - metrics
      - startDateTime
      type: object
    SearchAssociatedTranscripts_request:
      properties:
        searchOrder:
          description: How SearchResults are ordered. Valid values are Ascending or
            Descending. The default is Descending.
          enum:
          - Ascending
          - Descending
          type: string
        filters:
          description: A list of filter objects.
          items:
            $ref: '#/components/schemas/AssociatedTranscriptFilter'
          maxItems: 1
          minItems: 1
          type: array
        maxResults:
          description: "The maximum number of bot recommendations to return in each\
            \ page of results. If there are fewer results than the max page size,\
            \ only the actual number of results are returned."
          maximum: 1000
          minimum: 1
          type: integer
        nextIndex:
          description: "If the response from the SearchAssociatedTranscriptsRequest\
            \ operation contains more results than specified in the maxResults parameter,\
            \ an index is returned in the response. Use that index in the nextIndex\
            \ parameter to return the next page of results."
          maximum: 10000000
          minimum: 0
          type: integer
      required:
      - filters
      type: object
    StartTestExecution_request_target_botAliasTarget:
      allOf:
      - $ref: '#/components/schemas/BotAliasTestExecutionTarget'
      - description: Contains information about the bot alias used for the test execution.
      example:
        botAliasId: ""
        botId: ""
        localeId: ""
    StartTestExecution_request_target:
      description: Contains information about the bot used for the test execution.
      properties:
        botAliasTarget:
          $ref: '#/components/schemas/StartTestExecution_request_target_botAliasTarget'
      type: object
    StartTestExecution_request:
      properties:
        target:
          $ref: '#/components/schemas/StartTestExecution_request_target'
        apiMode:
          description: "Indicates whether we use streaming or non-streaming APIs for\
            \ the test set execution. For streaming, StartConversation Runtime API\
            \ is used. Whereas, for non-streaming, RecognizeUtterance and RecognizeText\
            \ Amazon Lex Runtime API are used."
          enum:
          - Streaming
          - NonStreaming
          type: string
        testExecutionModality:
          description: Indicates whether audio or text is used.
          enum:
          - Text
          - Audio
          type: string
      required:
      - apiMode
      - target
      type: object
    StartTestSetGeneration_request_storageLocation:
      description: Contains information about the location in which the test set is
        stored.
      properties:
        s3BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          - description: The name of the Amazon S3 bucket in which the test set is
              stored.
        s3Path:
          allOf:
          - $ref: '#/components/schemas/S3ObjectPath'
          - description: The path inside the Amazon S3 bucket where the test set is
              stored.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          - description: The Amazon Resource Name (ARN) of an Amazon Web Services
              Key Management Service (KMS) key for encrypting the test set.
      type: object
    StartTestSetGeneration_request_generationDataSource_conversationLogsDataSource:
      allOf:
      - $ref: '#/components/schemas/ConversationLogsDataSource'
      - description: Contains information about the bot from which the conversation
          logs are sourced.
      example:
        filter:
          inputMode: ""
          startTime: ""
          endTime: ""
        botAliasId: ""
        botId: ""
        localeId: ""
    StartTestSetGeneration_request_generationDataSource:
      description: Contains information about the data source from which the test
        set is generated.
      properties:
        conversationLogsDataSource:
          $ref: '#/components/schemas/StartTestSetGeneration_request_generationDataSource_conversationLogsDataSource'
      type: object
    StartTestSetGeneration_request:
      properties:
        testSetName:
          description: The test set name for the test set generation request.
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?){1,100}$"
          type: string
        description:
          description: The test set description for the test set generation request.
          maxLength: 200
          minLength: 0
          type: string
        storageLocation:
          $ref: '#/components/schemas/StartTestSetGeneration_request_storageLocation'
        generationDataSource:
          $ref: '#/components/schemas/StartTestSetGeneration_request_generationDataSource'
        roleArn:
          description: The roleARN used for any operation in the test set to access
            resources in the Amazon Web Services account.
          maxLength: 2048
          minLength: 32
          pattern: "^arn:aws:iam::[0-9]{12}:role/.*$"
          type: string
        testSetTags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "A list of tags to add to the test set. You can only add tags\
            \ when you import/generate a new test set. You can't use the <code>UpdateTestSet</code>\
            \ operation to update tags. To update tags, use the <code>TagResource</code>\
            \ operation."
          maxProperties: 200
          minProperties: 0
          type: object
      required:
      - generationDataSource
      - roleArn
      - storageLocation
      - testSetName
      type: object
    CreateBotResponse_dataPrivacy:
      allOf:
      - $ref: '#/components/schemas/DataPrivacy'
      - description: The data privacy settings specified for the bot.
      example:
        childDirected: ""
    CreateBotAliasResponse_conversationLogSettings:
      allOf:
      - $ref: '#/components/schemas/ConversationLogSettings'
      - description: The conversation log settings specified for the alias.
      example:
        textLogSettings: ""
        audioLogSettings: ""
    BotAliasLocaleSettings_codeHookSpecification:
      allOf:
      - $ref: '#/components/schemas/CodeHookSpecification'
      - description: Specifies the Lambda function that should be used in the locale.
    CreateBotLocaleResponse_voiceSettings:
      allOf:
      - $ref: '#/components/schemas/VoiceSettings'
      - description: The Amazon Polly voice ID that Amazon Lex uses for voice interaction
          with the user.
      example:
        voiceId: ""
        engine: ""
    CreateExportResponse_resourceSpecification:
      allOf:
      - $ref: '#/components/schemas/ExportResourceSpecification'
      - description: "A description of the type of resource that was exported, either\
          \ a bot or a bot locale."
      example:
        testSetExportSpecification:
          testSetId: ""
        customVocabularyExportSpecification:
          botId: ""
          botVersion: ""
          localeId: ""
        botExportSpecification:
          botId: ""
          botVersion: ""
        botLocaleExportSpecification:
          botId: ""
          botVersion: ""
          localeId: ""
    CreateIntentResponse_dialogCodeHook:
      allOf:
      - $ref: '#/components/schemas/DialogCodeHookSettings'
      - description: The dialog Lambda function specified for the intent.
      example:
        enabled: ""
    CreateIntentResponse_fulfillmentCodeHook:
      allOf:
      - $ref: '#/components/schemas/FulfillmentCodeHookSettings'
      - description: The fulfillment Lambda function specified for the intent.
      example:
        active: ""
        postFulfillmentStatusSpecification:
          successResponse:
            messageGroups: ""
            allowInterrupt: ""
          successConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          successNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          timeoutConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
        fulfillmentUpdatesSpecification:
          active: ""
          startResponse:
            messageGroups: ""
            allowInterrupt: ""
            delayInSeconds: ""
          updateResponse:
            messageGroups: ""
            allowInterrupt: ""
            frequencyInSeconds: ""
          timeoutInSeconds: ""
        enabled: ""
    CreateIntentResponse_intentConfirmationSetting:
      allOf:
      - $ref: '#/components/schemas/IntentConfirmationSetting'
      - description: The confirmation setting specified for the intent.
      example:
        declinationResponse:
          messageGroups: ""
          allowInterrupt: ""
        failureConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        active: ""
        confirmationNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        codeHook:
          postCodeHookSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          active: ""
          enableCodeHookInvocation: ""
          invocationLabel: ""
        declinationNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        promptSpecification:
          messageGroups: ""
          maxRetries: ""
          allowInterrupt: ""
          promptAttemptsSpecification: ""
          messageSelectionStrategy: ""
        confirmationConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        failureNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        confirmationResponse:
          messageGroups: ""
          allowInterrupt: ""
        elicitationCodeHook:
          enableCodeHookInvocation: ""
          invocationLabel: ""
        declinationConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        failureResponse:
          messageGroups: ""
          allowInterrupt: ""
    CreateIntentResponse_intentClosingSetting:
      allOf:
      - $ref: '#/components/schemas/IntentClosingSetting'
      - description: The closing setting specified for the intent.
      example:
        conditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        closingResponse:
          messageGroups: ""
          allowInterrupt: ""
        active: ""
        nextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
    CreateIntentResponse_kendraConfiguration:
      allOf:
      - $ref: '#/components/schemas/KendraConfiguration'
      - description: Configuration for searching a Amazon Kendra index specified for
          the intent.
      example:
        kendraIndex: ""
        queryFilterStringEnabled: ""
        queryFilterString: ""
    CreateIntentResponse_initialResponseSetting:
      allOf:
      - $ref: '#/components/schemas/InitialResponseSetting'
      - description: "Configuration settings for the response that is sent to the\
          \ user at the beginning of a conversation, before eliciting slot values."
      example:
        conditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        nextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        initialResponse:
          messageGroups: ""
          allowInterrupt: ""
        codeHook:
          postCodeHookSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          active: ""
          enableCodeHookInvocation: ""
          invocationLabel: ""
    PostFulfillmentStatusSpecification_successNextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: Specifies the next step in the conversation that Amazon Lex invokes
          when the fulfillment code hook completes successfully.
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    PostFulfillmentStatusSpecification_successConditional:
      allOf:
      - $ref: '#/components/schemas/ConditionalSpecification'
      - description: A list of conditional branches to evaluate after the fulfillment
          code hook finishes successfully.
      example:
        defaultBranch:
          response:
            messageGroups: ""
            allowInterrupt: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        active: ""
        conditionalBranches: ""
    PostFulfillmentStatusSpecification_failureNextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: Specifies the next step the bot runs after the fulfillment code
          hook throws an exception or returns with the <code>State</code> field of
          the <code>Intent</code> object set to <code>Failed</code>.
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    PostFulfillmentStatusSpecification_failureConditional:
      allOf:
      - $ref: '#/components/schemas/ConditionalSpecification'
      - description: A list of conditional branches to evaluate after the fulfillment
          code hook throws an exception or returns with the <code>State</code> field
          of the <code>Intent</code> object set to <code>Failed</code>.
      example:
        defaultBranch:
          response:
            messageGroups: ""
            allowInterrupt: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        active: ""
        conditionalBranches: ""
    PostFulfillmentStatusSpecification_timeoutNextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: Specifies the next step that the bot runs when the fulfillment
          code hook times out.
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    PostFulfillmentStatusSpecification_timeoutConditional:
      allOf:
      - $ref: '#/components/schemas/ConditionalSpecification'
      - description: A list of conditional branches to evaluate if the fulfillment
          code hook times out.
      example:
        defaultBranch:
          response:
            messageGroups: ""
            allowInterrupt: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        active: ""
        conditionalBranches: ""
    FulfillmentUpdatesSpecification_startResponse:
      allOf:
      - $ref: '#/components/schemas/FulfillmentStartResponseSpecification'
      - description: Provides configuration information for the message sent to users
          when the fulfillment Lambda functions starts running.
      example:
        messageGroups: ""
        allowInterrupt: ""
        delayInSeconds: ""
    FulfillmentUpdatesSpecification_updateResponse:
      allOf:
      - $ref: '#/components/schemas/FulfillmentUpdateResponseSpecification'
      - description: Provides configuration information for messages sent periodically
          to the user while the fulfillment Lambda function is running.
      example:
        messageGroups: ""
        allowInterrupt: ""
        frequencyInSeconds: ""
    ConditionalSpecification_defaultBranch:
      allOf:
      - $ref: '#/components/schemas/DefaultConditionalBranch'
      - description: "The conditional branch that should be followed when the conditions\
          \ for other branches are not satisfied. A conditional branch is made up\
          \ of a condition, a response and a next step."
      example:
        response:
          messageGroups: ""
          allowInterrupt: ""
        nextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
    DialogCodeHookInvocationSetting_postCodeHookSpecification:
      allOf:
      - $ref: '#/components/schemas/PostDialogCodeHookInvocationSpecification'
      - description: Contains the responses and actions that Amazon Lex takes after
          the Lambda function is complete.
      example:
        successResponse:
          messageGroups: ""
          allowInterrupt: ""
        successConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        successNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        timeoutNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        timeoutResponse:
          messageGroups: ""
          allowInterrupt: ""
        failureNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        failureConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        failureResponse:
          messageGroups: ""
          allowInterrupt: ""
        timeoutConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
    CreateSlotResponse_valueElicitationSetting:
      allOf:
      - $ref: '#/components/schemas/SlotValueElicitationSetting'
      - description: The value elicitation settings specified for the slot.
      example:
        sampleUtterances: ""
        slotConstraint: ""
        waitAndContinueSpecification:
          continueResponse:
            messageGroups: ""
            allowInterrupt: ""
          waitingResponse:
            messageGroups: ""
            allowInterrupt: ""
          active: ""
          stillWaitingResponse:
            messageGroups: ""
            allowInterrupt: ""
            frequencyInSeconds: ""
            timeoutInSeconds: ""
        defaultValueSpecification:
          defaultValueList: ""
        promptSpecification:
          messageGroups: ""
          maxRetries: ""
          allowInterrupt: ""
          promptAttemptsSpecification: ""
          messageSelectionStrategy: ""
        slotCaptureSetting:
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          captureResponse:
            messageGroups: ""
            allowInterrupt: ""
          elicitationCodeHook:
            enableCodeHookInvocation: ""
            invocationLabel: ""
          captureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          captureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
    CreateSlotResponse_obfuscationSetting:
      allOf:
      - $ref: '#/components/schemas/ObfuscationSetting'
      - description: Indicates whether the slot is configured to obfuscate values
          in Amazon CloudWatch logs.
      example:
        obfuscationSettingType: ""
    CreateSlotResponse_multipleValuesSetting:
      allOf:
      - $ref: '#/components/schemas/MultipleValuesSetting'
      - description: Indicates whether the slot returns multiple values in one response.
      example:
        allowMultipleValues: ""
    CreateSlotResponse_subSlotSetting:
      allOf:
      - $ref: '#/components/schemas/SubSlotSetting'
      - description: Specifications for the constituent sub slots and the expression
          for the composite slot.
      example:
        expression: ""
        slotSpecifications: ""
    WaitAndContinueSpecification_waitingResponse:
      allOf:
      - $ref: '#/components/schemas/ResponseSpecification'
      - description: The response that Amazon Lex sends to indicate that the bot is
          waiting for the conversation to continue.
      example:
        messageGroups: ""
        allowInterrupt: ""
    WaitAndContinueSpecification_continueResponse:
      allOf:
      - $ref: '#/components/schemas/ResponseSpecification'
      - description: The response that Amazon Lex sends to indicate that the bot is
          ready to continue the conversation.
      example:
        messageGroups: ""
        allowInterrupt: ""
    WaitAndContinueSpecification_stillWaitingResponse:
      allOf:
      - $ref: '#/components/schemas/StillWaitingResponseSpecification'
      - description: A response that Amazon Lex sends periodically to the user to
          indicate that the bot is still waiting for input from the user.
      example:
        messageGroups: ""
        allowInterrupt: ""
        frequencyInSeconds: ""
        timeoutInSeconds: ""
    SlotCaptureSetting_captureNextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: Specifies the next step that the bot runs when the slot value
          is captured before the code hook times out.
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    SlotCaptureSetting_captureConditional:
      allOf:
      - $ref: '#/components/schemas/ConditionalSpecification'
      - description: A list of conditional branches to evaluate after the slot value
          is captured.
      example:
        defaultBranch:
          response:
            messageGroups: ""
            allowInterrupt: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        active: ""
        conditionalBranches: ""
    SlotCaptureSetting_failureNextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: Specifies the next step that the bot runs when the slot value
          code is not recognized.
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    SlotCaptureSetting_failureConditional:
      allOf:
      - $ref: '#/components/schemas/ConditionalSpecification'
      - description: A list of conditional branches to evaluate when the slot value
          isn't captured.
      example:
        defaultBranch:
          response:
            messageGroups: ""
            allowInterrupt: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        active: ""
        conditionalBranches: ""
    SlotCaptureSetting_codeHook:
      allOf:
      - $ref: '#/components/schemas/DialogCodeHookInvocationSetting'
      - description: Code hook called after Amazon Lex successfully captures a slot
          value.
      example:
        postCodeHookSpecification:
          successResponse:
            messageGroups: ""
            allowInterrupt: ""
          successConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          successNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          timeoutConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
        active: ""
        enableCodeHookInvocation: ""
        invocationLabel: ""
    SlotCaptureSetting_elicitationCodeHook:
      allOf:
      - $ref: '#/components/schemas/ElicitationCodeHookInvocationSetting'
      - description: Code hook called when Amazon Lex doesn't capture a slot value.
      example:
        enableCodeHookInvocation: ""
        invocationLabel: ""
    CreateSlotTypeResponse_valueSelectionSetting:
      allOf:
      - $ref: '#/components/schemas/SlotValueSelectionSetting'
      - description: The strategy that Amazon Lex uses to select a value from the
          list of possible values.
      example:
        resolutionStrategy: ""
        regexFilter:
          pattern: ""
        advancedRecognitionSetting:
          audioRecognitionStrategy: ""
    CreateSlotTypeResponse_externalSourceSetting:
      allOf:
      - $ref: '#/components/schemas/ExternalSourceSetting'
      - description: The type of external information used to create the slot type.
      example:
        grammarSlotTypeSetting:
          source:
            s3ObjectKey: ""
            kmsKeyArn: ""
            s3BucketName: ""
    CreateSlotTypeResponse_compositeSlotTypeSetting:
      allOf:
      - $ref: '#/components/schemas/CompositeSlotTypeSetting'
      - description: Specifications for a composite slot type.
      example:
        subSlots: ""
    SlotTypeValue_sampleValue:
      allOf:
      - $ref: '#/components/schemas/SampleValue'
      - description: The value of the slot type entry.
    GrammarSlotTypeSetting_source:
      allOf:
      - $ref: '#/components/schemas/GrammarSlotTypeSource'
      - description: The source of the grammar used to create the slot type.
      example:
        s3ObjectKey: ""
        kmsKeyArn: ""
        s3BucketName: ""
    CreateTestSetDiscrepancyReportResponse_target:
      allOf:
      - $ref: '#/components/schemas/TestSetDiscrepancyReportResourceTarget'
      - description: The target bot for the test set discrepancy report.
      example:
        botAliasTarget:
          botAliasId: ""
          botId: ""
          localeId: ""
    DescribeBotResponse_dataPrivacy:
      allOf:
      - $ref: '#/components/schemas/DataPrivacy'
      - description: Settings for managing data privacy of the bot and its conversations
          with users.
      example:
        childDirected: ""
    DescribeBotAliasResponse_conversationLogSettings:
      allOf:
      - $ref: '#/components/schemas/ConversationLogSettings'
      - description: Specifics of how Amazon Lex logs text and audio conversations
          with the bot associated with the alias.
      example:
        textLogSettings: ""
        audioLogSettings: ""
    DescribeBotLocaleResponse_voiceSettings:
      allOf:
      - $ref: '#/components/schemas/VoiceSettings'
      - description: The Amazon Polly voice Amazon Lex uses for voice interaction
          with the user.
      example:
        voiceId: ""
        engine: ""
    DescribeBotRecommendationResponse_transcriptSourceSetting:
      allOf:
      - $ref: '#/components/schemas/TranscriptSourceSetting'
      - description: "The object representing the Amazon S3 bucket containing the\
          \ transcript, as well as the associated metadata."
      example:
        s3BucketTranscriptSource:
          transcriptFilter:
            lexTranscriptFilter:
              dateRangeFilter:
                startDateTime: ""
                endDateTime: ""
          kmsKeyArn: ""
          s3BucketName: ""
          pathFormat:
            objectPrefixes: ""
          transcriptFormat: ""
    DescribeBotRecommendationResponse_encryptionSetting:
      allOf:
      - $ref: '#/components/schemas/EncryptionSetting'
      - description: "The object representing the passwords that were used to encrypt\
          \ the data related to the bot recommendation results, as well as the KMS\
          \ key ARN used to encrypt the associated metadata."
      example:
        associatedTranscriptsPassword: ""
        botLocaleExportPassword: ""
        kmsKeyArn: ""
    DescribeBotRecommendationResponse_botRecommendationResults:
      allOf:
      - $ref: '#/components/schemas/BotRecommendationResults'
      - description: "The object representing the URL of the bot definition, the URL\
          \ of the associated transcript and a statistical summary of the bot recommendation\
          \ results."
      example:
        associatedTranscriptsUrl: ""
        botLocaleExportUrl: ""
        statistics:
          slotTypes:
            discoveredSlotTypeCount: ""
          intents:
            discoveredIntentCount: ""
    DescribeBotVersionResponse_dataPrivacy:
      allOf:
      - $ref: '#/components/schemas/DataPrivacy'
      - description: Data privacy settings for the bot version.
      example:
        childDirected: ""
    DescribeExportResponse_resourceSpecification:
      allOf:
      - $ref: '#/components/schemas/ExportResourceSpecification'
      - description: "The bot, bot ID, and optional locale ID of the exported bot\
          \ or bot locale."
      example:
        testSetExportSpecification:
          testSetId: ""
        customVocabularyExportSpecification:
          botId: ""
          botVersion: ""
          localeId: ""
        botExportSpecification:
          botId: ""
          botVersion: ""
        botLocaleExportSpecification:
          botId: ""
          botVersion: ""
          localeId: ""
    DescribeImportResponse_resourceSpecification:
      allOf:
      - $ref: '#/components/schemas/ImportResourceSpecification'
      - description: "The specifications of the imported bot, bot locale, or custom\
          \ vocabulary."
      example:
        customVocabularyImportSpecification:
          botId: ""
          botVersion: ""
          localeId: ""
        testSetImportResourceSpecification:
          testSetTags: ""
          modality: ""
          roleArn: ""
          description: ""
          storageLocation:
            s3Path: ""
            kmsKeyArn: ""
            s3BucketName: ""
          importInputLocation:
            s3Path: ""
            s3BucketName: ""
          testSetName: ""
        botLocaleImportSpecification:
          nluIntentConfidenceThreshold: ""
          voiceSettings:
            voiceId: ""
            engine: ""
          botId: ""
          botVersion: ""
          localeId: ""
        botImportSpecification:
          testBotAliasTags: ""
          botName: ""
          roleArn: ""
          botTags: ""
          dataPrivacy:
            childDirected: ""
          idleSessionTTLInSeconds: ""
    DescribeIntentResponse_dialogCodeHook:
      allOf:
      - $ref: '#/components/schemas/DialogCodeHookSettings'
      - description: The Lambda function called during each turn of a conversation
          with the intent.
      example:
        enabled: ""
    DescribeIntentResponse_fulfillmentCodeHook:
      allOf:
      - $ref: '#/components/schemas/FulfillmentCodeHookSettings'
      - description: The Lambda function called when the intent is complete and ready
          for fulfillment.
      example:
        active: ""
        postFulfillmentStatusSpecification:
          successResponse:
            messageGroups: ""
            allowInterrupt: ""
          successConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          successNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          timeoutConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
        fulfillmentUpdatesSpecification:
          active: ""
          startResponse:
            messageGroups: ""
            allowInterrupt: ""
            delayInSeconds: ""
          updateResponse:
            messageGroups: ""
            allowInterrupt: ""
            frequencyInSeconds: ""
          timeoutInSeconds: ""
        enabled: ""
    DescribeIntentResponse_intentConfirmationSetting:
      allOf:
      - $ref: '#/components/schemas/IntentConfirmationSetting'
      - description: Prompts that Amazon Lex sends to the user to confirm completion
          of an intent.
      example:
        declinationResponse:
          messageGroups: ""
          allowInterrupt: ""
        failureConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        active: ""
        confirmationNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        codeHook:
          postCodeHookSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          active: ""
          enableCodeHookInvocation: ""
          invocationLabel: ""
        declinationNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        promptSpecification:
          messageGroups: ""
          maxRetries: ""
          allowInterrupt: ""
          promptAttemptsSpecification: ""
          messageSelectionStrategy: ""
        confirmationConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        failureNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        confirmationResponse:
          messageGroups: ""
          allowInterrupt: ""
        elicitationCodeHook:
          enableCodeHookInvocation: ""
          invocationLabel: ""
        declinationConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        failureResponse:
          messageGroups: ""
          allowInterrupt: ""
    DescribeIntentResponse_intentClosingSetting:
      allOf:
      - $ref: '#/components/schemas/IntentClosingSetting'
      - description: The response that Amazon Lex sends to when the intent is closed.
      example:
        conditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        closingResponse:
          messageGroups: ""
          allowInterrupt: ""
        active: ""
        nextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
    DescribeIntentResponse_kendraConfiguration:
      allOf:
      - $ref: '#/components/schemas/KendraConfiguration'
      - description: Configuration information required to use the <code>AMAZON.KendraSearchIntent</code>
          intent.
      example:
        kendraIndex: ""
        queryFilterStringEnabled: ""
        queryFilterString: ""
    DescribeIntentResponse_initialResponseSetting:
      allOf:
      - $ref: '#/components/schemas/InitialResponseSetting'
      - description: Configuration setting for a response sent to the user before
          Amazon Lex starts eliciting slots.
      example:
        conditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        nextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        initialResponse:
          messageGroups: ""
          allowInterrupt: ""
        codeHook:
          postCodeHookSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          active: ""
          enableCodeHookInvocation: ""
          invocationLabel: ""
    DescribeSlotResponse_valueElicitationSetting:
      allOf:
      - $ref: '#/components/schemas/SlotValueElicitationSetting'
      - description: Prompts that Amazon Lex uses to elicit a value for the slot.
      example:
        sampleUtterances: ""
        slotConstraint: ""
        waitAndContinueSpecification:
          continueResponse:
            messageGroups: ""
            allowInterrupt: ""
          waitingResponse:
            messageGroups: ""
            allowInterrupt: ""
          active: ""
          stillWaitingResponse:
            messageGroups: ""
            allowInterrupt: ""
            frequencyInSeconds: ""
            timeoutInSeconds: ""
        defaultValueSpecification:
          defaultValueList: ""
        promptSpecification:
          messageGroups: ""
          maxRetries: ""
          allowInterrupt: ""
          promptAttemptsSpecification: ""
          messageSelectionStrategy: ""
        slotCaptureSetting:
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          captureResponse:
            messageGroups: ""
            allowInterrupt: ""
          elicitationCodeHook:
            enableCodeHookInvocation: ""
            invocationLabel: ""
          captureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          captureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
    DescribeSlotResponse_obfuscationSetting:
      allOf:
      - $ref: '#/components/schemas/ObfuscationSetting'
      - description: "Whether slot values are shown in Amazon CloudWatch logs. If\
          \ the value is <code>None</code>, the actual value of the slot is shown\
          \ in logs."
      example:
        obfuscationSettingType: ""
    DescribeSlotResponse_multipleValuesSetting:
      allOf:
      - $ref: '#/components/schemas/MultipleValuesSetting'
      - description: "<p>Indicates whether the slot accepts multiple values in a single\
          \ utterance.</p> <p>If the <code>multipleValuesSetting</code> is not set,\
          \ the default value is <code>false</code>.</p>"
      example:
        allowMultipleValues: ""
    DescribeSlotTypeResponse_valueSelectionSetting:
      allOf:
      - $ref: '#/components/schemas/SlotValueSelectionSetting'
      - description: The strategy that Amazon Lex uses to choose a value from a list
          of possible values.
      example:
        resolutionStrategy: ""
        regexFilter:
          pattern: ""
        advancedRecognitionSetting:
          audioRecognitionStrategy: ""
    DescribeTestExecutionResponse_target:
      allOf:
      - $ref: '#/components/schemas/TestExecutionTarget'
      - description: The target bot for the test set execution details.
      example:
        botAliasTarget:
          botAliasId: ""
          botId: ""
          localeId: ""
    DescribeTestSetResponse_storageLocation:
      allOf:
      - $ref: '#/components/schemas/TestSetStorageLocation'
      - description: The Amazon S3 storage location for the test set data.
      example:
        s3Path: ""
        kmsKeyArn: ""
        s3BucketName: ""
    DescribeTestSetDiscrepancyReportResponse_target:
      allOf:
      - $ref: '#/components/schemas/TestSetDiscrepancyReportResourceTarget'
      - description: The target bot location for the test set discrepancy report.
      example:
        botAliasTarget:
          botAliasId: ""
          botId: ""
          localeId: ""
    DescribeTestSetDiscrepancyReportResponse_testSetDiscrepancyTopErrors:
      allOf:
      - $ref: '#/components/schemas/TestSetDiscrepancyErrors'
      - description: The top 200 error results from the test set discrepancy report.
      example:
        intentDiscrepancies: ""
        slotDiscrepancies: ""
    DescribeTestSetGenerationResponse_storageLocation:
      allOf:
      - $ref: '#/components/schemas/TestSetStorageLocation'
      - description: The Amazon S3 storage location for the test set generation.
      example:
        s3Path: ""
        kmsKeyArn: ""
        s3BucketName: ""
    DescribeTestSetGenerationResponse_generationDataSource:
      allOf:
      - $ref: '#/components/schemas/TestSetGenerationDataSource'
      - description: The data source of the test set used for the test set generation.
      example:
        conversationLogsDataSource:
          filter:
            inputMode: ""
            startTime: ""
            endTime: ""
          botAliasId: ""
          botId: ""
          localeId: ""
    ListAggregatedUtterancesResponse_aggregationDuration:
      allOf:
      - $ref: '#/components/schemas/UtteranceAggregationDuration'
      - description: The time period used to aggregate the utterance data.
      example:
        relativeAggregationDuration:
          timeDimension: ""
          timeValue: ""
    ListTestExecutionResultItemsResponse_testExecutionResults:
      allOf:
      - $ref: '#/components/schemas/TestExecutionResultItems'
      - description: The list of results from the test execution.
      example:
        utteranceLevelTestResults:
          items: ""
        overallTestResults:
          items: ""
        intentLevelSlotResolutionTestResults:
          items: ""
        conversationLevelTestResults:
          items: ""
        intentClassificationTestResults:
          items: ""
    S3BucketTranscriptSource_pathFormat:
      allOf:
      - $ref: '#/components/schemas/PathFormat'
      - description: The object that contains a path format that will be applied when
          Amazon Lex reads the transcript file in the bucket you provide. Specify
          this object if you only want Lex to read a subset of files in your Amazon
          S3 bucket.
      example:
        objectPrefixes: ""
    S3BucketTranscriptSource_transcriptFilter:
      allOf:
      - $ref: '#/components/schemas/TranscriptFilter'
      - description: The object that contains the filter which will be applied when
          Amazon Lex reads through the Amazon S3 bucket. Specify this object if you
          want Amazon Lex to read only a subset of the Amazon S3 bucket based on the
          filter you provide.
      example:
        lexTranscriptFilter:
          dateRangeFilter:
            startDateTime: ""
            endDateTime: ""
    StartImportResponse_resourceSpecification:
      allOf:
      - $ref: '#/components/schemas/ImportResourceSpecification'
      - description: The parameters used when importing the resource.
      example:
        customVocabularyImportSpecification:
          botId: ""
          botVersion: ""
          localeId: ""
        testSetImportResourceSpecification:
          testSetTags: ""
          modality: ""
          roleArn: ""
          description: ""
          storageLocation:
            s3Path: ""
            kmsKeyArn: ""
            s3BucketName: ""
          importInputLocation:
            s3Path: ""
            s3BucketName: ""
          testSetName: ""
        botLocaleImportSpecification:
          nluIntentConfidenceThreshold: ""
          voiceSettings:
            voiceId: ""
            engine: ""
          botId: ""
          botVersion: ""
          localeId: ""
        botImportSpecification:
          testBotAliasTags: ""
          botName: ""
          roleArn: ""
          botTags: ""
          dataPrivacy:
            childDirected: ""
          idleSessionTTLInSeconds: ""
    TestSetImportResourceSpecification_storageLocation:
      allOf:
      - $ref: '#/components/schemas/TestSetStorageLocation'
      - description: Contains information about the location that Amazon Lex uses
          to store the test-set.
      example:
        s3Path: ""
        kmsKeyArn: ""
        s3BucketName: ""
    TestSetImportResourceSpecification_importInputLocation:
      allOf:
      - $ref: '#/components/schemas/TestSetImportInputLocation'
      - description: Contains information about the input location from where test-set
          should be imported.
      example:
        s3Path: ""
        s3BucketName: ""
    StartTestExecutionResponse_target:
      allOf:
      - $ref: '#/components/schemas/TestExecutionTarget'
      - description: The target bot for the test set execution.
      example:
        botAliasTarget:
          botAliasId: ""
          botId: ""
          localeId: ""
    StartTestSetGenerationResponse_generationDataSource:
      allOf:
      - $ref: '#/components/schemas/TestSetGenerationDataSource'
      - description: ' The data source for the test set generation.'
      example:
        conversationLogsDataSource:
          filter:
            inputMode: ""
            startTime: ""
            endTime: ""
          botAliasId: ""
          botId: ""
          localeId: ""
    ConversationLogsDataSource_filter:
      allOf:
      - $ref: '#/components/schemas/ConversationLogsDataSourceFilterBy'
      - description: The filter for the data source of the conversation log.
      example:
        inputMode: ""
        startTime: ""
        endTime: ""
    UpdateBotResponse_dataPrivacy:
      allOf:
      - $ref: '#/components/schemas/DataPrivacy'
      - description: The data privacy settings for the bot after the update.
      example:
        childDirected: ""
    UpdateBotAliasResponse_conversationLogSettings:
      allOf:
      - $ref: '#/components/schemas/ConversationLogSettings'
      - description: The updated settings for storing conversation logs in Amazon
          CloudWatch Logs and Amazon S3 buckets.
      example:
        textLogSettings: ""
        audioLogSettings: ""
    UpdateBotLocaleResponse_voiceSettings:
      allOf:
      - $ref: '#/components/schemas/VoiceSettings'
      - description: The updated Amazon Polly voice to use for voice interaction with
          the user.
      example:
        voiceId: ""
        engine: ""
    UpdateIntentResponse_dialogCodeHook:
      allOf:
      - $ref: '#/components/schemas/DialogCodeHookSettings'
      - description: The updated Lambda function called during each turn of the conversation
          with the user.
      example:
        enabled: ""
    UpdateIntentResponse_fulfillmentCodeHook:
      allOf:
      - $ref: '#/components/schemas/FulfillmentCodeHookSettings'
      - description: The updated Lambda function called when the intent is ready for
          fulfillment.
      example:
        active: ""
        postFulfillmentStatusSpecification:
          successResponse:
            messageGroups: ""
            allowInterrupt: ""
          successConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          successNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          timeoutConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
        fulfillmentUpdatesSpecification:
          active: ""
          startResponse:
            messageGroups: ""
            allowInterrupt: ""
            delayInSeconds: ""
          updateResponse:
            messageGroups: ""
            allowInterrupt: ""
            frequencyInSeconds: ""
          timeoutInSeconds: ""
        enabled: ""
    UpdateIntentResponse_intentConfirmationSetting:
      allOf:
      - $ref: '#/components/schemas/IntentConfirmationSetting'
      - description: The updated prompts that Amazon Lex sends to the user to confirm
          the completion of an intent.
      example:
        declinationResponse:
          messageGroups: ""
          allowInterrupt: ""
        failureConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        active: ""
        confirmationNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        codeHook:
          postCodeHookSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          active: ""
          enableCodeHookInvocation: ""
          invocationLabel: ""
        declinationNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        promptSpecification:
          messageGroups: ""
          maxRetries: ""
          allowInterrupt: ""
          promptAttemptsSpecification: ""
          messageSelectionStrategy: ""
        confirmationConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        failureNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        confirmationResponse:
          messageGroups: ""
          allowInterrupt: ""
        elicitationCodeHook:
          enableCodeHookInvocation: ""
          invocationLabel: ""
        declinationConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        failureResponse:
          messageGroups: ""
          allowInterrupt: ""
    UpdateIntentResponse_intentClosingSetting:
      allOf:
      - $ref: '#/components/schemas/IntentClosingSetting'
      - description: The updated response that Amazon Lex sends the user when the
          intent is closed.
      example:
        conditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        closingResponse:
          messageGroups: ""
          allowInterrupt: ""
        active: ""
        nextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
    UpdateIntentResponse_kendraConfiguration:
      allOf:
      - $ref: '#/components/schemas/KendraConfiguration'
      - description: The updated configuration for connecting to an Amazon Kendra
          index with the <code>AMAZON.KendraSearchIntent</code> intent.
      example:
        kendraIndex: ""
        queryFilterStringEnabled: ""
        queryFilterString: ""
    UpdateIntentResponse_initialResponseSetting:
      allOf:
      - $ref: '#/components/schemas/InitialResponseSetting'
      - description: Configuration settings for a response sent to the user before
          Amazon Lex starts eliciting slots.
      example:
        conditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        nextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        initialResponse:
          messageGroups: ""
          allowInterrupt: ""
        codeHook:
          postCodeHookSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          active: ""
          enableCodeHookInvocation: ""
          invocationLabel: ""
    UpdateSlotResponse_valueElicitationSetting:
      allOf:
      - $ref: '#/components/schemas/SlotValueElicitationSetting'
      - description: The updated prompts that Amazon Lex sends to the user to elicit
          a response that provides a value for the slot.
      example:
        sampleUtterances: ""
        slotConstraint: ""
        waitAndContinueSpecification:
          continueResponse:
            messageGroups: ""
            allowInterrupt: ""
          waitingResponse:
            messageGroups: ""
            allowInterrupt: ""
          active: ""
          stillWaitingResponse:
            messageGroups: ""
            allowInterrupt: ""
            frequencyInSeconds: ""
            timeoutInSeconds: ""
        defaultValueSpecification:
          defaultValueList: ""
        promptSpecification:
          messageGroups: ""
          maxRetries: ""
          allowInterrupt: ""
          promptAttemptsSpecification: ""
          messageSelectionStrategy: ""
        slotCaptureSetting:
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          captureResponse:
            messageGroups: ""
            allowInterrupt: ""
          elicitationCodeHook:
            enableCodeHookInvocation: ""
            invocationLabel: ""
          captureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          captureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
    UpdateSlotResponse_obfuscationSetting:
      allOf:
      - $ref: '#/components/schemas/ObfuscationSetting'
      - description: The updated setting that determines whether the slot value is
          obfuscated in the Amazon CloudWatch logs.
      example:
        obfuscationSettingType: ""
    UpdateSlotResponse_multipleValuesSetting:
      allOf:
      - $ref: '#/components/schemas/MultipleValuesSetting'
      - description: Indicates whether the slot accepts multiple values in one response.
      example:
        allowMultipleValues: ""
    UpdateSlotTypeResponse_valueSelectionSetting:
      allOf:
      - $ref: '#/components/schemas/SlotValueSelectionSetting'
      - description: The updated strategy that Amazon Lex uses to determine which
          value to select from the slot type.
      example:
        resolutionStrategy: ""
        regexFilter:
          pattern: ""
        advancedRecognitionSetting:
          audioRecognitionStrategy: ""
    UpdateTestSetResponse_storageLocation:
      allOf:
      - $ref: '#/components/schemas/TestSetStorageLocation'
      - description: The Amazon S3 storage location for the updated test set.
      example:
        s3Path: ""
        kmsKeyArn: ""
        s3BucketName: ""
    AudioAndDTMFInputSpecification_audioSpecification:
      allOf:
      - $ref: '#/components/schemas/AudioSpecification'
      - description: Specifies the settings on audio input.
    AudioAndDTMFInputSpecification_dtmfSpecification:
      allOf:
      - $ref: '#/components/schemas/DTMFSpecification'
      - description: Specifies the settings on DTMF input.
    AudioLogDestination_s3Bucket:
      allOf:
      - $ref: '#/components/schemas/S3BucketLogDestination'
      - description: The Amazon S3 bucket where the audio log files are stored. The
          IAM role specified in the <code>roleArn</code> parameter of the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html">CreateBot</a>
          operation must have permission to write to this bucket.
    BotRecommendationResultStatistics_intents:
      allOf:
      - $ref: '#/components/schemas/IntentStatistics'
      - description: Statistical information about about the intents associated with
          the bot recommendation results.
      example:
        discoveredIntentCount: ""
    BotRecommendationResultStatistics_slotTypes:
      allOf:
      - $ref: '#/components/schemas/SlotTypeStatistics'
      - description: Statistical information about the slot types associated with
          the bot recommendation results.
      example:
        discoveredSlotTypeCount: ""
    BotRecommendationResults_statistics:
      allOf:
      - $ref: '#/components/schemas/BotRecommendationResultStatistics'
      - description: The statistical summary of the bot recommendation results.
      example:
        slotTypes:
          discoveredSlotTypeCount: ""
        intents:
          discoveredIntentCount: ""
    ConditionalBranch_condition:
      allOf:
      - $ref: '#/components/schemas/Condition'
      - description: "Contains the expression to evaluate. If the condition is true,\
          \ the branch's actions are taken."
    CreateBotAliasRequest_conversationLogSettings:
      allOf:
      - $ref: '#/components/schemas/ConversationLogSettings'
      - description: "Specifies whether Amazon Lex logs text and audio for a conversation\
          \ with the bot. When you enable conversation logs, text logs store text\
          \ input, transcripts of audio input, and associated metadata in Amazon CloudWatch\
          \ Logs. Audio logs store audio input in Amazon S3."
      example:
        textLogSettings: ""
        audioLogSettings: ""
    CreateBotRequest_dataPrivacy:
      allOf:
      - $ref: '#/components/schemas/DataPrivacy'
      - description: Provides information on additional privacy protections Amazon
          Lex should use with the bot's data.
      example:
        childDirected: ""
    CreateExportRequest_resourceSpecification:
      allOf:
      - $ref: '#/components/schemas/ExportResourceSpecification'
      - description: "Specifies the type of resource to export, either a bot or a\
          \ bot locale. You can only specify one type of resource to export."
      example:
        testSetExportSpecification:
          testSetId: ""
        customVocabularyExportSpecification:
          botId: ""
          botVersion: ""
          localeId: ""
        botExportSpecification:
          botId: ""
          botVersion: ""
        botLocaleExportSpecification:
          botId: ""
          botVersion: ""
          localeId: ""
    CreateIntentRequest_dialogCodeHook:
      allOf:
      - $ref: '#/components/schemas/DialogCodeHookSettings'
      - description: "<p>Specifies that Amazon Lex invokes the alias Lambda function\
          \ for each user input. You can invoke this Lambda function to personalize\
          \ user interaction.</p> <p>For example, suppose that your bot determines\
          \ that the user's name is John. You Lambda function might retrieve John's\
          \ information from a backend database and prepopulate some of the values.\
          \ For example, if you find that John is gluten intolerant, you might set\
          \ the corresponding intent slot, <code>glutenIntolerant</code> to <code>true</code>.\
          \ You might find John's phone number and set the corresponding session attribute.</p>"
      example:
        enabled: ""
    CreateIntentRequest_fulfillmentCodeHook:
      allOf:
      - $ref: '#/components/schemas/FulfillmentCodeHookSettings'
      - description: "<p>Specifies that Amazon Lex invokes the alias Lambda function\
          \ when the intent is ready for fulfillment. You can invoke this function\
          \ to complete the bot's transaction with the user.</p> <p>For example, in\
          \ a pizza ordering bot, the Lambda function can look up the closest pizza\
          \ restaurant to the customer's location and then place an order on the customer's\
          \ behalf.</p>"
      example:
        active: ""
        postFulfillmentStatusSpecification:
          successResponse:
            messageGroups: ""
            allowInterrupt: ""
          successConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          successNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          timeoutConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
        fulfillmentUpdatesSpecification:
          active: ""
          startResponse:
            messageGroups: ""
            allowInterrupt: ""
            delayInSeconds: ""
          updateResponse:
            messageGroups: ""
            allowInterrupt: ""
            frequencyInSeconds: ""
          timeoutInSeconds: ""
        enabled: ""
    CreateIntentRequest_intentConfirmationSetting:
      allOf:
      - $ref: '#/components/schemas/IntentConfirmationSetting'
      - description: "Provides prompts that Amazon Lex sends to the user to confirm\
          \ the completion of an intent. If the user answers \"no,\" the settings\
          \ contain a statement that is sent to the user to end the intent."
      example:
        declinationResponse:
          messageGroups: ""
          allowInterrupt: ""
        failureConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        active: ""
        confirmationNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        codeHook:
          postCodeHookSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          active: ""
          enableCodeHookInvocation: ""
          invocationLabel: ""
        declinationNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        promptSpecification:
          messageGroups: ""
          maxRetries: ""
          allowInterrupt: ""
          promptAttemptsSpecification: ""
          messageSelectionStrategy: ""
        confirmationConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        failureNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        confirmationResponse:
          messageGroups: ""
          allowInterrupt: ""
        elicitationCodeHook:
          enableCodeHookInvocation: ""
          invocationLabel: ""
        declinationConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        failureResponse:
          messageGroups: ""
          allowInterrupt: ""
    CreateIntentRequest_intentClosingSetting:
      allOf:
      - $ref: '#/components/schemas/IntentClosingSetting'
      - description: Sets the response that Amazon Lex sends to the user when the
          intent is closed.
      example:
        conditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        closingResponse:
          messageGroups: ""
          allowInterrupt: ""
        active: ""
        nextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
    CreateIntentRequest_kendraConfiguration:
      allOf:
      - $ref: '#/components/schemas/KendraConfiguration'
      - description: Configuration information required to use the <code>AMAZON.KendraSearchIntent</code>
          intent to connect to an Amazon Kendra index. The <code>AMAZON.KendraSearchIntent</code>
          intent is called when Amazon Lex can't determine another intent to invoke.
      example:
        kendraIndex: ""
        queryFilterStringEnabled: ""
        queryFilterString: ""
    CreateSlotRequest_valueElicitationSetting:
      allOf:
      - $ref: '#/components/schemas/SlotValueElicitationSetting'
      - description: 'Specifies prompts that Amazon Lex sends to the user to elicit
          a response that provides the value for the slot. '
      example:
        sampleUtterances: ""
        slotConstraint: ""
        waitAndContinueSpecification:
          continueResponse:
            messageGroups: ""
            allowInterrupt: ""
          waitingResponse:
            messageGroups: ""
            allowInterrupt: ""
          active: ""
          stillWaitingResponse:
            messageGroups: ""
            allowInterrupt: ""
            frequencyInSeconds: ""
            timeoutInSeconds: ""
        defaultValueSpecification:
          defaultValueList: ""
        promptSpecification:
          messageGroups: ""
          maxRetries: ""
          allowInterrupt: ""
          promptAttemptsSpecification: ""
          messageSelectionStrategy: ""
        slotCaptureSetting:
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          captureResponse:
            messageGroups: ""
            allowInterrupt: ""
          elicitationCodeHook:
            enableCodeHookInvocation: ""
            invocationLabel: ""
          captureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          captureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
    CreateSlotRequest_obfuscationSetting:
      allOf:
      - $ref: '#/components/schemas/ObfuscationSetting'
      - description: "<p>Determines how slot values are used in Amazon CloudWatch\
          \ logs. If the value of the <code>obfuscationSetting</code> parameter is\
          \ <code>DefaultObfuscation</code>, slot values are obfuscated in the log\
          \ output. If the value is <code>None</code>, the actual value is present\
          \ in the log output.</p> <p>The default is to obfuscate values in the CloudWatch\
          \ logs.</p>"
      example:
        obfuscationSettingType: ""
    CreateSlotRequest_multipleValuesSetting:
      allOf:
      - $ref: '#/components/schemas/MultipleValuesSetting'
      - description: "<p>Indicates whether the slot returns multiple values in one\
          \ response. Multi-value slots are only available in the <code>en-US</code>\
          \ locale. If you set this value to <code>true</code> in any other locale,\
          \ Amazon Lex throws a <code>ValidationException</code>. </p> <p>If the <code>multipleValuesSetting</code>\
          \ is not set, the default value is <code>false</code>.</p>"
      example:
        allowMultipleValues: ""
    CreateSlotTypeRequest_valueSelectionSetting:
      allOf:
      - $ref: '#/components/schemas/SlotValueSelectionSetting'
      - description: "<p>Determines the strategy that Amazon Lex uses to select a\
          \ value from the list of possible values. The field can be set to one of\
          \ the following values:</p> <ul> <li> <p> <code>ORIGINAL_VALUE</code> -\
          \ Returns the value entered by the user, if the user value is similar to\
          \ the slot value.</p> </li> <li> <p> <code>TOP_RESOLUTION</code> - If there\
          \ is a resolution list for the slot, return the first value in the resolution\
          \ list. If there is no resolution list, return null.</p> </li> </ul> <p>If\
          \ you don't specify the <code>valueSelectionSetting</code> parameter, the\
          \ default is <code>ORIGINAL_VALUE</code>.</p>"
      example:
        resolutionStrategy: ""
        regexFilter:
          pattern: ""
        advancedRecognitionSetting:
          audioRecognitionStrategy: ""
    CreateSlotTypeRequest_externalSourceSetting:
      allOf:
      - $ref: '#/components/schemas/ExternalSourceSetting'
      - description: Sets the type of external information used to create the slot
          type.
      example:
        grammarSlotTypeSetting:
          source:
            s3ObjectKey: ""
            kmsKeyArn: ""
            s3BucketName: ""
    PostDialogCodeHookInvocationSpecification_successNextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: 'Specifics the next step the bot runs after the dialog code hook
          finishes successfully. '
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    PostDialogCodeHookInvocationSpecification_successConditional:
      allOf:
      - $ref: '#/components/schemas/ConditionalSpecification'
      - description: A list of conditional branches to evaluate after the dialog code
          hook finishes successfully.
      example:
        defaultBranch:
          response:
            messageGroups: ""
            allowInterrupt: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        active: ""
        conditionalBranches: ""
    PostDialogCodeHookInvocationSpecification_failureNextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: Specifies the next step the bot runs after the dialog code hook
          throws an exception or returns with the <code>State</code> field of the
          <code>Intent</code> object set to <code>Failed</code>.
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    PostDialogCodeHookInvocationSpecification_failureConditional:
      allOf:
      - $ref: '#/components/schemas/ConditionalSpecification'
      - description: A list of conditional branches to evaluate after the dialog code
          hook throws an exception or returns with the <code>State</code> field of
          the <code>Intent</code> object set to <code>Failed</code>.
      example:
        defaultBranch:
          response:
            messageGroups: ""
            allowInterrupt: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        active: ""
        conditionalBranches: ""
    PostDialogCodeHookInvocationSpecification_timeoutNextStep:
      allOf:
      - $ref: '#/components/schemas/DialogState'
      - description: Specifies the next step that the bot runs when the code hook
          times out.
      example:
        dialogAction:
          suppressNextMessage: ""
          type: ""
          slotToElicit: ""
        sessionAttributes: ""
        intent:
          slots: ""
          name: ""
    PostDialogCodeHookInvocationSpecification_timeoutConditional:
      allOf:
      - $ref: '#/components/schemas/ConditionalSpecification'
      - description: A list of conditional branches to evaluate if the code hook times
          out.
      example:
        defaultBranch:
          response:
            messageGroups: ""
            allowInterrupt: ""
          nextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
        active: ""
        conditionalBranches: ""
    ExportSummary_resourceSpecification:
      allOf:
      - $ref: '#/components/schemas/ExportResourceSpecification'
      - description: Information about the bot or bot locale that was exported.
    InputSessionStateSpecification_runtimeHints:
      allOf:
      - $ref: '#/components/schemas/RuntimeHints'
      - description: Runtime hints for the session state.
    IntentClassificationTestResultItem_resultCounts:
      allOf:
      - $ref: '#/components/schemas/IntentClassificationTestResultItemCounts'
      - description: The result of the intent classification test.
    LexTranscriptFilter_dateRangeFilter:
      allOf:
      - $ref: '#/components/schemas/DateRangeFilter'
      - description: The object that contains a date range filter that will be applied
          to the transcript. Specify this object if you want Amazon Lex to only read
          the files that are within the date range.
      example:
        startDateTime: ""
        endDateTime: ""
    ListAggregatedUtterancesRequest_aggregationDuration:
      allOf:
      - $ref: '#/components/schemas/UtteranceAggregationDuration'
      - description: The time window for aggregating the utterance information. You
          can specify a time between one hour and two weeks.
      example:
        relativeAggregationDuration:
          timeDimension: ""
          timeValue: ""
    ListAggregatedUtterancesRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/AggregatedUtterancesSortBy'
      - description: "Specifies sorting parameters for the list of utterances. You\
          \ can sort by the hit count, the missed count, or the number of distinct\
          \ sessions the utterance appeared in."
      example:
        attribute: ""
        order: ""
    ListBotLocalesRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/BotLocaleSortBy'
      - description: Specifies sorting parameters for the list of locales. You can
          sort by locale name in ascending or descending order.
      example:
        attribute: ""
        order: ""
    ListBotVersionsRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/BotVersionSortBy'
      - description: Specifies sorting parameters for the list of versions. You can
          specify that the list be sorted by version name in either ascending or descending
          order.
      example:
        attribute: ""
        order: ""
    ListBotsRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/BotSortBy'
      - description: Specifies sorting parameters for the list of bots. You can specify
          that the list be sorted by bot name in ascending or descending order.
      example:
        attribute: ""
        order: ""
    ListBuiltInIntentsRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/BuiltInIntentSortBy'
      - description: Specifies sorting parameters for the list of built-in intents.
          You can specify that the list be sorted by the built-in intent signature
          in either ascending or descending order.
      example:
        attribute: ""
        order: ""
    ListBuiltInSlotTypesRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/BuiltInSlotTypeSortBy'
      - description: Determines the sort order for the response from the <code>ListBuiltInSlotTypes</code>
          operation. You can choose to sort by the slot type signature in either ascending
          or descending order.
      example:
        attribute: ""
        order: ""
    ListExportsRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/ExportSortBy'
      - description: Determines the field that the list of exports is sorted by. You
          can sort by the <code>LastUpdatedDateTime</code> field in ascending or descending
          order.
      example:
        attribute: ""
        order: ""
    ListImportsRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/ImportSortBy'
      - description: Determines the field that the list of imports is sorted by. You
          can sort by the <code>LastUpdatedDateTime</code> field in ascending or descending
          order.
      example:
        attribute: ""
        order: ""
    ListIntentsRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/IntentSortBy'
      - description: Determines the sort order for the response from the <code>ListIntents</code>
          operation. You can choose to sort by the intent name or last updated date
          in either ascending or descending order.
      example:
        attribute: ""
        order: ""
    ListSessionAnalyticsDataRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/SessionDataSortBy'
      - description: An object specifying the measure and method by which to sort
          the session analytics data.
      example:
        name: ""
        order: ""
    ListSlotTypesRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/SlotTypeSortBy'
      - description: Determines the sort order for the response from the <code>ListSlotTypes</code>
          operation. You can choose to sort by the slot type name or last updated
          date in either ascending or descending order.
      example:
        attribute: ""
        order: ""
    ListSlotsRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/SlotSortBy'
      - description: Determines the sort order for the response from the <code>ListSlots</code>
          operation. You can choose to sort by the slot name or last updated date
          in either ascending or descending order.
      example:
        attribute: ""
        order: ""
    ListTestExecutionResultItemsRequest_resultFilterBy:
      allOf:
      - $ref: '#/components/schemas/TestExecutionResultFilterBy'
      - description: The filter for the list of results from the test set execution.
      example:
        resultTypeFilter: ""
        conversationLevelTestResultsFilterBy:
          endToEndResult: ""
    TestExecutionResultItems_overallTestResults:
      allOf:
      - $ref: '#/components/schemas/OverallTestResults'
      - description: "Overall results for the test execution, including the breakdown\
          \ of conversations and single-input utterances."
      example:
        items: ""
    TestExecutionResultItems_conversationLevelTestResults:
      allOf:
      - $ref: '#/components/schemas/ConversationLevelTestResults'
      - description: "Results related to conversations in the test set, including\
          \ metrics about success and failure of conversations and intent and slot\
          \ failures."
      example:
        items: ""
    TestExecutionResultItems_intentClassificationTestResults:
      allOf:
      - $ref: '#/components/schemas/IntentClassificationTestResults'
      - description: "Intent recognition results aggregated by intent name. The aggregated\
          \ results contain success and failure rates of intent recognition, speech\
          \ transcriptions, and end-to-end conversations."
      example:
        items: ""
    TestExecutionResultItems_intentLevelSlotResolutionTestResults:
      allOf:
      - $ref: '#/components/schemas/IntentLevelSlotResolutionTestResults'
      - description: "Slot resolution results aggregated by intent and slot name.\
          \ The aggregated results contain success and failure rates of slot resolution,\
          \ speech transcriptions, and end-to-end conversations"
      example:
        items: ""
    TestExecutionResultItems_utteranceLevelTestResults:
      allOf:
      - $ref: '#/components/schemas/UtteranceLevelTestResults'
      - description: Results related to utterances in the test set.
      example:
        items: ""
    ListTestExecutionsRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/TestExecutionSortBy'
      - description: The sort order of the test set executions.
      example:
        attribute: ""
        order: ""
    ListTestSetsRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/TestSetSortBy'
      - description: The sort order for the list of test sets.
      example:
        attribute: ""
        order: ""
    ListUtteranceAnalyticsDataRequest_sortBy:
      allOf:
      - $ref: '#/components/schemas/UtteranceDataSortBy'
      - description: An object specifying the measure and method by which to sort
          the utterance analytics data.
      example:
        name: ""
        order: ""
    Message_plainTextMessage:
      allOf:
      - $ref: '#/components/schemas/PlainTextMessage'
      - description: A message in plain text format.
    Message_customPayload:
      allOf:
      - $ref: '#/components/schemas/CustomPayload'
      - description: A message in a custom format defined by the client application.
    Message_ssmlMessage:
      allOf:
      - $ref: '#/components/schemas/SSMLMessage'
      - description: A message in Speech Synthesis Markup Language (SSML).
    Message_imageResponseCard:
      allOf:
      - $ref: '#/components/schemas/ImageResponseCard'
      - description: A message that defines a response card that the client application
          can show to the user.
    MessageGroup_message:
      allOf:
      - $ref: '#/components/schemas/Message'
      - description: The primary message that Amazon Lex should send to the user.
    PromptAttemptSpecification_allowedInputTypes:
      allOf:
      - $ref: '#/components/schemas/AllowedInputTypes'
      - description: Indicates the allowed input types of the prompt attempt.
    PromptAttemptSpecification_audioAndDTMFInputSpecification:
      allOf:
      - $ref: '#/components/schemas/AudioAndDTMFInputSpecification'
      - description: Specifies the settings on audio and DTMF input.
    PromptAttemptSpecification_textInputSpecification:
      allOf:
      - $ref: '#/components/schemas/TextInputSpecification'
      - description: Specifies the settings on text input.
    TranscriptFilter_lexTranscriptFilter:
      allOf:
      - $ref: '#/components/schemas/LexTranscriptFilter'
      - description: The object representing the filter that Amazon Lex will use to
          select the appropriate transcript when the transcript format is the Amazon
          Lex format.
      example:
        dateRangeFilter:
          startDateTime: ""
          endDateTime: ""
    SlotResolutionTestResultItem_resultCounts:
      allOf:
      - $ref: '#/components/schemas/SlotResolutionTestResultItemCounts'
      - description: A result for slot resolution in the results of a test execution.
    SlotSummary_valueElicitationPromptSpecification:
      allOf:
      - $ref: '#/components/schemas/PromptSpecification'
      - description: Prompts that are sent to the user to elicit a value for the slot.
    SlotValueOverride_value:
      allOf:
      - $ref: '#/components/schemas/SlotValue'
      - description: The current value of the slot.
    Specifications_valueElicitationSetting:
      allOf:
      - $ref: '#/components/schemas/SubSlotValueElicitationSetting'
      - description: Specifies the elicitation setting details for constituent sub
          slots of a composite slot.
    StartBotRecommendationRequest_encryptionSetting:
      allOf:
      - $ref: '#/components/schemas/EncryptionSetting'
      - description: "The object representing the passwords that will be used to encrypt\
          \ the data related to the bot recommendation results, as well as the KMS\
          \ key ARN used to encrypt the associated metadata."
      example:
        associatedTranscriptsPassword: ""
        botLocaleExportPassword: ""
        kmsKeyArn: ""
    StartImportRequest_resourceSpecification:
      allOf:
      - $ref: '#/components/schemas/ImportResourceSpecification'
      - description: "Parameters for creating the bot, bot locale or custom vocabulary."
      example:
        customVocabularyImportSpecification:
          botId: ""
          botVersion: ""
          localeId: ""
        testSetImportResourceSpecification:
          testSetTags: ""
          modality: ""
          roleArn: ""
          description: ""
          storageLocation:
            s3Path: ""
            kmsKeyArn: ""
            s3BucketName: ""
          importInputLocation:
            s3Path: ""
            s3BucketName: ""
          testSetName: ""
        botLocaleImportSpecification:
          nluIntentConfidenceThreshold: ""
          voiceSettings:
            voiceId: ""
            engine: ""
          botId: ""
          botVersion: ""
          localeId: ""
        botImportSpecification:
          testBotAliasTags: ""
          botName: ""
          roleArn: ""
          botTags: ""
          dataPrivacy:
            childDirected: ""
          idleSessionTTLInSeconds: ""
    StartTestSetGenerationRequest_generationDataSource:
      allOf:
      - $ref: '#/components/schemas/TestSetGenerationDataSource'
      - description: The data source for the test set generation.
      example:
        conversationLogsDataSource:
          filter:
            inputMode: ""
            startTime: ""
            endTime: ""
          botAliasId: ""
          botId: ""
          localeId: ""
    TestExecutionSummary_target:
      allOf:
      - $ref: '#/components/schemas/TestExecutionTarget'
      - description: Contains information about the bot used for the test execution..
    TestSetSummary_storageLocation:
      allOf:
      - $ref: '#/components/schemas/TestSetStorageLocation'
      - description: Contains information about the location at which the test set
          is stored.
    TurnSpecification_agentTurn:
      allOf:
      - $ref: '#/components/schemas/AgentTurnSpecification'
      - description: Contains information about the agent messages in the turn.
    TurnSpecification_userTurn:
      allOf:
      - $ref: '#/components/schemas/UserTurnSpecification'
      - description: Contains information about the user messages in the turn.
    TestSetTurnRecord_turnSpecification:
      allOf:
      - $ref: '#/components/schemas/TurnSpecification'
      - description: Contains information about the agent or user turn depending upon
          type of turn.
    UserTurnResult_input:
      allOf:
      - $ref: '#/components/schemas/UserTurnInputSpecification'
      - description: Contains information about the user messages in the turn in the
          input.
    UserTurnResult_expectedOutput:
      allOf:
      - $ref: '#/components/schemas/UserTurnOutputSpecification'
      - description: Contains information about the expected output for the user turn.
    UserTurnResult_actualOutput:
      allOf:
      - $ref: '#/components/schemas/UserTurnOutputSpecification'
      - description: Contains information about the actual output for the user turn.
    UserTurnResult_conversationLevelResult:
      allOf:
      - $ref: '#/components/schemas/ConversationLevelResultDetail'
      - description: Contains information about the results related to the conversation
          associated with the user turn.
    TestSetTurnResult_agent:
      allOf:
      - $ref: '#/components/schemas/AgentTurnResult'
      - description: Contains information about the agent messages in the turn.
    TestSetTurnResult_user:
      allOf:
      - $ref: '#/components/schemas/UserTurnResult'
      - description: Contains information about the user messages in the turn.
    TextLogDestination_cloudWatch:
      allOf:
      - $ref: '#/components/schemas/CloudWatchLogGroupLogDestination'
      - description: Defines the Amazon CloudWatch Logs log group where text and metadata
          logs are delivered.
    UserTurnSpecification_expected:
      allOf:
      - $ref: '#/components/schemas/UserTurnOutputSpecification'
      - description: Contains results about the expected output for the user turn.
    UpdateBotAliasRequest_conversationLogSettings:
      allOf:
      - $ref: '#/components/schemas/ConversationLogSettings'
      - description: The new settings for storing conversation logs in Amazon CloudWatch
          Logs and Amazon S3 buckets.
      example:
        textLogSettings: ""
        audioLogSettings: ""
    UpdateBotLocaleRequest_voiceSettings:
      allOf:
      - $ref: '#/components/schemas/VoiceSettings'
      - description: The new Amazon Polly voice Amazon Lex should use for voice interaction
          with the user.
      example:
        voiceId: ""
        engine: ""
    UpdateIntentRequest_dialogCodeHook:
      allOf:
      - $ref: '#/components/schemas/DialogCodeHookSettings'
      - description: The new Lambda function to use between each turn of the conversation
          with the bot.
      example:
        enabled: ""
    UpdateIntentRequest_fulfillmentCodeHook:
      allOf:
      - $ref: '#/components/schemas/FulfillmentCodeHookSettings'
      - description: The new Lambda function to call when all of the intents required
          slots are provided and the intent is ready for fulfillment.
      example:
        active: ""
        postFulfillmentStatusSpecification:
          successResponse:
            messageGroups: ""
            allowInterrupt: ""
          successConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          successNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          timeoutResponse:
            messageGroups: ""
            allowInterrupt: ""
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          timeoutConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
        fulfillmentUpdatesSpecification:
          active: ""
          startResponse:
            messageGroups: ""
            allowInterrupt: ""
            delayInSeconds: ""
          updateResponse:
            messageGroups: ""
            allowInterrupt: ""
            frequencyInSeconds: ""
          timeoutInSeconds: ""
        enabled: ""
    UpdateIntentRequest_intentConfirmationSetting:
      allOf:
      - $ref: '#/components/schemas/IntentConfirmationSetting'
      - description: New prompts that Amazon Lex sends to the user to confirm the
          completion of an intent.
      example:
        declinationResponse:
          messageGroups: ""
          allowInterrupt: ""
        failureConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        active: ""
        confirmationNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        codeHook:
          postCodeHookSpecification:
            successResponse:
              messageGroups: ""
              allowInterrupt: ""
            successConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            successNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            timeoutResponse:
              messageGroups: ""
              allowInterrupt: ""
            failureNextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
            failureConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
            failureResponse:
              messageGroups: ""
              allowInterrupt: ""
            timeoutConditional:
              defaultBranch:
                response:
                  messageGroups: ""
                  allowInterrupt: ""
                nextStep:
                  dialogAction:
                    suppressNextMessage: ""
                    type: ""
                    slotToElicit: ""
                  sessionAttributes: ""
                  intent:
                    slots: ""
                    name: ""
              active: ""
              conditionalBranches: ""
          active: ""
          enableCodeHookInvocation: ""
          invocationLabel: ""
        declinationNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        promptSpecification:
          messageGroups: ""
          maxRetries: ""
          allowInterrupt: ""
          promptAttemptsSpecification: ""
          messageSelectionStrategy: ""
        confirmationConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        failureNextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
        confirmationResponse:
          messageGroups: ""
          allowInterrupt: ""
        elicitationCodeHook:
          enableCodeHookInvocation: ""
          invocationLabel: ""
        declinationConditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        failureResponse:
          messageGroups: ""
          allowInterrupt: ""
    UpdateIntentRequest_intentClosingSetting:
      allOf:
      - $ref: '#/components/schemas/IntentClosingSetting'
      - description: The new response that Amazon Lex sends the user when the intent
          is closed.
      example:
        conditional:
          defaultBranch:
            response:
              messageGroups: ""
              allowInterrupt: ""
            nextStep:
              dialogAction:
                suppressNextMessage: ""
                type: ""
                slotToElicit: ""
              sessionAttributes: ""
              intent:
                slots: ""
                name: ""
          active: ""
          conditionalBranches: ""
        closingResponse:
          messageGroups: ""
          allowInterrupt: ""
        active: ""
        nextStep:
          dialogAction:
            suppressNextMessage: ""
            type: ""
            slotToElicit: ""
          sessionAttributes: ""
          intent:
            slots: ""
            name: ""
    UpdateIntentRequest_kendraConfiguration:
      allOf:
      - $ref: '#/components/schemas/KendraConfiguration'
      - description: New configuration settings for connecting to an Amazon Kendra
          index.
      example:
        kendraIndex: ""
        queryFilterStringEnabled: ""
        queryFilterString: ""
    UpdateSlotRequest_valueElicitationSetting:
      allOf:
      - $ref: '#/components/schemas/SlotValueElicitationSetting'
      - description: A new set of prompts that Amazon Lex sends to the user to elicit
          a response the provides a value for the slot.
      example:
        sampleUtterances: ""
        slotConstraint: ""
        waitAndContinueSpecification:
          continueResponse:
            messageGroups: ""
            allowInterrupt: ""
          waitingResponse:
            messageGroups: ""
            allowInterrupt: ""
          active: ""
          stillWaitingResponse:
            messageGroups: ""
            allowInterrupt: ""
            frequencyInSeconds: ""
            timeoutInSeconds: ""
        defaultValueSpecification:
          defaultValueList: ""
        promptSpecification:
          messageGroups: ""
          maxRetries: ""
          allowInterrupt: ""
          promptAttemptsSpecification: ""
          messageSelectionStrategy: ""
        slotCaptureSetting:
          failureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          captureResponse:
            messageGroups: ""
            allowInterrupt: ""
          elicitationCodeHook:
            enableCodeHookInvocation: ""
            invocationLabel: ""
          captureNextStep:
            dialogAction:
              suppressNextMessage: ""
              type: ""
              slotToElicit: ""
            sessionAttributes: ""
            intent:
              slots: ""
              name: ""
          failureResponse:
            messageGroups: ""
            allowInterrupt: ""
          captureConditional:
            defaultBranch:
              response:
                messageGroups: ""
                allowInterrupt: ""
              nextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
            active: ""
            conditionalBranches: ""
          codeHook:
            postCodeHookSpecification:
              successResponse:
                messageGroups: ""
                allowInterrupt: ""
              successConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              successNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              timeoutResponse:
                messageGroups: ""
                allowInterrupt: ""
              failureNextStep:
                dialogAction:
                  suppressNextMessage: ""
                  type: ""
                  slotToElicit: ""
                sessionAttributes: ""
                intent:
                  slots: ""
                  name: ""
              failureConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
              failureResponse:
                messageGroups: ""
                allowInterrupt: ""
              timeoutConditional:
                defaultBranch:
                  response:
                    messageGroups: ""
                    allowInterrupt: ""
                  nextStep:
                    dialogAction:
                      suppressNextMessage: ""
                      type: ""
                      slotToElicit: ""
                    sessionAttributes: ""
                    intent:
                      slots: ""
                      name: ""
                active: ""
                conditionalBranches: ""
            active: ""
            enableCodeHookInvocation: ""
            invocationLabel: ""
    UpdateSlotRequest_obfuscationSetting:
      allOf:
      - $ref: '#/components/schemas/ObfuscationSetting'
      - description: 'New settings that determine how slot values are formatted in
          Amazon CloudWatch logs. '
      example:
        obfuscationSettingType: ""
    UpdateSlotRequest_multipleValuesSetting:
      allOf:
      - $ref: '#/components/schemas/MultipleValuesSetting'
      - description: "<p>Determines whether the slot accepts multiple values in one\
          \ response. Multiple value slots are only available in the en-US locale.\
          \ If you set this value to <code>true</code> in any other locale, Amazon\
          \ Lex throws a <code>ValidationException</code>.</p> <p>If the <code>multipleValuesSetting</code>\
          \ is not set, the default value is <code>false</code>.</p>"
      example:
        allowMultipleValues: ""
    UpdateSlotTypeRequest_valueSelectionSetting:
      allOf:
      - $ref: '#/components/schemas/SlotValueSelectionSetting'
      - description: The strategy that Amazon Lex should use when deciding on a value
          from the list of slot type values.
      example:
        resolutionStrategy: ""
        regexFilter:
          pattern: ""
        advancedRecognitionSetting:
          audioRecognitionStrategy: ""
    UtteranceInputSpecification_audioInput:
      allOf:
      - $ref: '#/components/schemas/UtteranceAudioInputSpecification'
      - description: Contains information about the audio input for an utterance.
    UserTurnInputSpecification_utteranceInput:
      allOf:
      - $ref: '#/components/schemas/UtteranceInputSpecification'
      - description: The utterance input in the user turn.
    UserTurnInputSpecification_sessionState:
      allOf:
      - $ref: '#/components/schemas/InputSessionStateSpecification'
      - description: Contains information about the session state in the input.
    UserTurnOutputSpecification_intent:
      allOf:
      - $ref: '#/components/schemas/UserTurnIntentOutput'
      - description: Contains information about the intent.
    UtteranceLevelTestResultItem_turnResult:
      allOf:
      - $ref: '#/components/schemas/TestSetTurnResult'
      - description: Contains information about the turn associated with the result.
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

