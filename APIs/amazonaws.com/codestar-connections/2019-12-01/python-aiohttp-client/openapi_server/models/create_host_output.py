# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
from openapi_server import util


class CreateHostOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_arn: str=None, tags: List[Tag]=None):
        """CreateHostOutput - a model defined in OpenAPI

        :param host_arn: The host_arn of this CreateHostOutput.
        :param tags: The tags of this CreateHostOutput.
        """
        self.openapi_types = {
            'host_arn': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'host_arn': 'HostArn',
            'tags': 'Tags'
        }

        self._host_arn = host_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateHostOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateHostOutput of this CreateHostOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_arn(self):
        """Gets the host_arn of this CreateHostOutput.


        :return: The host_arn of this CreateHostOutput.
        :rtype: str
        """
        return self._host_arn

    @host_arn.setter
    def host_arn(self, host_arn):
        """Sets the host_arn of this CreateHostOutput.


        :param host_arn: The host_arn of this CreateHostOutput.
        :type host_arn: str
        """

        self._host_arn = host_arn

    @property
    def tags(self):
        """Gets the tags of this CreateHostOutput.


        :return: The tags of this CreateHostOutput.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateHostOutput.


        :param tags: The tags of this CreateHostOutput.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
