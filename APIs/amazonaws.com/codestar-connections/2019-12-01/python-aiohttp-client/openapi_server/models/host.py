# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.host_vpc_configuration import HostVpcConfiguration
from openapi_server.models.provider_type import ProviderType
from openapi_server import util


class Host(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, host_arn: str=None, provider_type: ProviderType=None, provider_endpoint: str=None, vpc_configuration: HostVpcConfiguration=None, status: str=None, status_message: str=None):
        """Host - a model defined in OpenAPI

        :param name: The name of this Host.
        :param host_arn: The host_arn of this Host.
        :param provider_type: The provider_type of this Host.
        :param provider_endpoint: The provider_endpoint of this Host.
        :param vpc_configuration: The vpc_configuration of this Host.
        :param status: The status of this Host.
        :param status_message: The status_message of this Host.
        """
        self.openapi_types = {
            'name': str,
            'host_arn': str,
            'provider_type': ProviderType,
            'provider_endpoint': str,
            'vpc_configuration': HostVpcConfiguration,
            'status': str,
            'status_message': str
        }

        self.attribute_map = {
            'name': 'Name',
            'host_arn': 'HostArn',
            'provider_type': 'ProviderType',
            'provider_endpoint': 'ProviderEndpoint',
            'vpc_configuration': 'VpcConfiguration',
            'status': 'Status',
            'status_message': 'StatusMessage'
        }

        self._name = name
        self._host_arn = host_arn
        self._provider_type = provider_type
        self._provider_endpoint = provider_endpoint
        self._vpc_configuration = vpc_configuration
        self._status = status
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Host':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Host of this Host.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Host.


        :return: The name of this Host.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Host.


        :param name: The name of this Host.
        :type name: str
        """

        self._name = name

    @property
    def host_arn(self):
        """Gets the host_arn of this Host.


        :return: The host_arn of this Host.
        :rtype: str
        """
        return self._host_arn

    @host_arn.setter
    def host_arn(self, host_arn):
        """Sets the host_arn of this Host.


        :param host_arn: The host_arn of this Host.
        :type host_arn: str
        """

        self._host_arn = host_arn

    @property
    def provider_type(self):
        """Gets the provider_type of this Host.


        :return: The provider_type of this Host.
        :rtype: ProviderType
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this Host.


        :param provider_type: The provider_type of this Host.
        :type provider_type: ProviderType
        """

        self._provider_type = provider_type

    @property
    def provider_endpoint(self):
        """Gets the provider_endpoint of this Host.


        :return: The provider_endpoint of this Host.
        :rtype: str
        """
        return self._provider_endpoint

    @provider_endpoint.setter
    def provider_endpoint(self, provider_endpoint):
        """Sets the provider_endpoint of this Host.


        :param provider_endpoint: The provider_endpoint of this Host.
        :type provider_endpoint: str
        """

        self._provider_endpoint = provider_endpoint

    @property
    def vpc_configuration(self):
        """Gets the vpc_configuration of this Host.


        :return: The vpc_configuration of this Host.
        :rtype: HostVpcConfiguration
        """
        return self._vpc_configuration

    @vpc_configuration.setter
    def vpc_configuration(self, vpc_configuration):
        """Sets the vpc_configuration of this Host.


        :param vpc_configuration: The vpc_configuration of this Host.
        :type vpc_configuration: HostVpcConfiguration
        """

        self._vpc_configuration = vpc_configuration

    @property
    def status(self):
        """Gets the status of this Host.


        :return: The status of this Host.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Host.


        :param status: The status of this Host.
        :type status: str
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this Host.


        :return: The status_message of this Host.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this Host.


        :param status_message: The status_message of this Host.
        :type status_message: str
        """

        self._status_message = status_message
