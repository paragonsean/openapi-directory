# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_host_input_vpc_configuration import CreateHostInputVpcConfiguration
from openapi_server.models.provider_type import ProviderType
from openapi_server.models.tag import Tag
from openapi_server import util


class CreateHostInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, provider_type: ProviderType=None, provider_endpoint: str=None, vpc_configuration: CreateHostInputVpcConfiguration=None, tags: List[Tag]=None):
        """CreateHostInput - a model defined in OpenAPI

        :param name: The name of this CreateHostInput.
        :param provider_type: The provider_type of this CreateHostInput.
        :param provider_endpoint: The provider_endpoint of this CreateHostInput.
        :param vpc_configuration: The vpc_configuration of this CreateHostInput.
        :param tags: The tags of this CreateHostInput.
        """
        self.openapi_types = {
            'name': str,
            'provider_type': ProviderType,
            'provider_endpoint': str,
            'vpc_configuration': CreateHostInputVpcConfiguration,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'name': 'Name',
            'provider_type': 'ProviderType',
            'provider_endpoint': 'ProviderEndpoint',
            'vpc_configuration': 'VpcConfiguration',
            'tags': 'Tags'
        }

        self._name = name
        self._provider_type = provider_type
        self._provider_endpoint = provider_endpoint
        self._vpc_configuration = vpc_configuration
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateHostInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateHostInput of this CreateHostInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateHostInput.


        :return: The name of this CreateHostInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateHostInput.


        :param name: The name of this CreateHostInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def provider_type(self):
        """Gets the provider_type of this CreateHostInput.


        :return: The provider_type of this CreateHostInput.
        :rtype: ProviderType
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this CreateHostInput.


        :param provider_type: The provider_type of this CreateHostInput.
        :type provider_type: ProviderType
        """
        if provider_type is None:
            raise ValueError("Invalid value for `provider_type`, must not be `None`")

        self._provider_type = provider_type

    @property
    def provider_endpoint(self):
        """Gets the provider_endpoint of this CreateHostInput.


        :return: The provider_endpoint of this CreateHostInput.
        :rtype: str
        """
        return self._provider_endpoint

    @provider_endpoint.setter
    def provider_endpoint(self, provider_endpoint):
        """Sets the provider_endpoint of this CreateHostInput.


        :param provider_endpoint: The provider_endpoint of this CreateHostInput.
        :type provider_endpoint: str
        """
        if provider_endpoint is None:
            raise ValueError("Invalid value for `provider_endpoint`, must not be `None`")

        self._provider_endpoint = provider_endpoint

    @property
    def vpc_configuration(self):
        """Gets the vpc_configuration of this CreateHostInput.


        :return: The vpc_configuration of this CreateHostInput.
        :rtype: CreateHostInputVpcConfiguration
        """
        return self._vpc_configuration

    @vpc_configuration.setter
    def vpc_configuration(self, vpc_configuration):
        """Sets the vpc_configuration of this CreateHostInput.


        :param vpc_configuration: The vpc_configuration of this CreateHostInput.
        :type vpc_configuration: CreateHostInputVpcConfiguration
        """

        self._vpc_configuration = vpc_configuration

    @property
    def tags(self):
        """Gets the tags of this CreateHostInput.


        :return: The tags of this CreateHostInput.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateHostInput.


        :param tags: The tags of this CreateHostInput.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
