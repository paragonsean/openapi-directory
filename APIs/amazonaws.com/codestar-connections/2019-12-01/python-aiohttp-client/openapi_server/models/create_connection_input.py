# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provider_type import ProviderType
from openapi_server import util


class CreateConnectionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provider_type: ProviderType=None, connection_name: str=None, tags: List=None, host_arn: str=None):
        """CreateConnectionInput - a model defined in OpenAPI

        :param provider_type: The provider_type of this CreateConnectionInput.
        :param connection_name: The connection_name of this CreateConnectionInput.
        :param tags: The tags of this CreateConnectionInput.
        :param host_arn: The host_arn of this CreateConnectionInput.
        """
        self.openapi_types = {
            'provider_type': ProviderType,
            'connection_name': str,
            'tags': List,
            'host_arn': str
        }

        self.attribute_map = {
            'provider_type': 'ProviderType',
            'connection_name': 'ConnectionName',
            'tags': 'Tags',
            'host_arn': 'HostArn'
        }

        self._provider_type = provider_type
        self._connection_name = connection_name
        self._tags = tags
        self._host_arn = host_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConnectionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConnectionInput of this CreateConnectionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provider_type(self):
        """Gets the provider_type of this CreateConnectionInput.


        :return: The provider_type of this CreateConnectionInput.
        :rtype: ProviderType
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this CreateConnectionInput.


        :param provider_type: The provider_type of this CreateConnectionInput.
        :type provider_type: ProviderType
        """

        self._provider_type = provider_type

    @property
    def connection_name(self):
        """Gets the connection_name of this CreateConnectionInput.


        :return: The connection_name of this CreateConnectionInput.
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """Sets the connection_name of this CreateConnectionInput.


        :param connection_name: The connection_name of this CreateConnectionInput.
        :type connection_name: str
        """
        if connection_name is None:
            raise ValueError("Invalid value for `connection_name`, must not be `None`")

        self._connection_name = connection_name

    @property
    def tags(self):
        """Gets the tags of this CreateConnectionInput.


        :return: The tags of this CreateConnectionInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateConnectionInput.


        :param tags: The tags of this CreateConnectionInput.
        :type tags: List
        """

        self._tags = tags

    @property
    def host_arn(self):
        """Gets the host_arn of this CreateConnectionInput.


        :return: The host_arn of this CreateConnectionInput.
        :rtype: str
        """
        return self._host_arn

    @host_arn.setter
    def host_arn(self, host_arn):
        """Sets the host_arn of this CreateConnectionInput.


        :param host_arn: The host_arn of this CreateConnectionInput.
        :type host_arn: str
        """

        self._host_arn = host_arn
