/**
 * Amazon Prometheus Service
 * Amazon Managed Service for Prometheus
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRuleGroupsNamespace_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRuleGroupsNamespace_request::OAICreateRuleGroupsNamespace_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRuleGroupsNamespace_request::OAICreateRuleGroupsNamespace_request() {
    this->initializeModel();
}

OAICreateRuleGroupsNamespace_request::~OAICreateRuleGroupsNamespace_request() {}

void OAICreateRuleGroupsNamespace_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateRuleGroupsNamespace_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRuleGroupsNamespace_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateRuleGroupsNamespace_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRuleGroupsNamespace_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateRuleGroupsNamespace_request::getName() const {
    return m_name;
}
void OAICreateRuleGroupsNamespace_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRuleGroupsNamespace_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRuleGroupsNamespace_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateRuleGroupsNamespace_request::getData() const {
    return m_data;
}
void OAICreateRuleGroupsNamespace_request::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAICreateRuleGroupsNamespace_request::is_data_Set() const{
    return m_data_isSet;
}

bool OAICreateRuleGroupsNamespace_request::is_data_Valid() const{
    return m_data_isValid;
}

QString OAICreateRuleGroupsNamespace_request::getClientToken() const {
    return m_client_token;
}
void OAICreateRuleGroupsNamespace_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateRuleGroupsNamespace_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateRuleGroupsNamespace_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QMap<QString, QString> OAICreateRuleGroupsNamespace_request::getTags() const {
    return m_tags;
}
void OAICreateRuleGroupsNamespace_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRuleGroupsNamespace_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRuleGroupsNamespace_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateRuleGroupsNamespace_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRuleGroupsNamespace_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_data_isValid && true;
}

} // namespace OpenAPI
