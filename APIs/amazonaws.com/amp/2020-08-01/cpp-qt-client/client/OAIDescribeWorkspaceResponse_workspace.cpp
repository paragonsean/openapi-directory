/**
 * Amazon Prometheus Service
 * Amazon Managed Service for Prometheus
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeWorkspaceResponse_workspace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeWorkspaceResponse_workspace::OAIDescribeWorkspaceResponse_workspace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeWorkspaceResponse_workspace::OAIDescribeWorkspaceResponse_workspace() {
    this->initializeModel();
}

OAIDescribeWorkspaceResponse_workspace::~OAIDescribeWorkspaceResponse_workspace() {}

void OAIDescribeWorkspaceResponse_workspace::initializeModel() {

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_prometheus_endpoint_isSet = false;
    m_prometheus_endpoint_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribeWorkspaceResponse_workspace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeWorkspaceResponse_workspace::fromJsonObject(QJsonObject json) {

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_prometheus_endpoint_isValid = ::OpenAPI::fromJsonValue(m_prometheus_endpoint, json[QString("prometheusEndpoint")]);
    m_prometheus_endpoint_isSet = !json[QString("prometheusEndpoint")].isNull() && m_prometheus_endpoint_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIDescribeWorkspaceResponse_workspace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeWorkspaceResponse_workspace::asJsonObject() const {
    QJsonObject obj;
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_prometheus_endpoint_isSet) {
        obj.insert(QString("prometheusEndpoint"), ::OpenAPI::toJsonValue(m_prometheus_endpoint));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribeWorkspaceResponse_workspace::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIDescribeWorkspaceResponse_workspace::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIDescribeWorkspaceResponse_workspace::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIDescribeWorkspaceResponse_workspace::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

QString OAIDescribeWorkspaceResponse_workspace::getAlias() const {
    return m_alias;
}
void OAIDescribeWorkspaceResponse_workspace::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIDescribeWorkspaceResponse_workspace::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIDescribeWorkspaceResponse_workspace::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIDescribeWorkspaceResponse_workspace::getArn() const {
    return m_arn;
}
void OAIDescribeWorkspaceResponse_workspace::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeWorkspaceResponse_workspace::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeWorkspaceResponse_workspace::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIWorkspaceDescription_status OAIDescribeWorkspaceResponse_workspace::getStatus() const {
    return m_status;
}
void OAIDescribeWorkspaceResponse_workspace::setStatus(const OAIWorkspaceDescription_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeWorkspaceResponse_workspace::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeWorkspaceResponse_workspace::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeWorkspaceResponse_workspace::getPrometheusEndpoint() const {
    return m_prometheus_endpoint;
}
void OAIDescribeWorkspaceResponse_workspace::setPrometheusEndpoint(const QString &prometheus_endpoint) {
    m_prometheus_endpoint = prometheus_endpoint;
    m_prometheus_endpoint_isSet = true;
}

bool OAIDescribeWorkspaceResponse_workspace::is_prometheus_endpoint_Set() const{
    return m_prometheus_endpoint_isSet;
}

bool OAIDescribeWorkspaceResponse_workspace::is_prometheus_endpoint_Valid() const{
    return m_prometheus_endpoint_isValid;
}

QDateTime OAIDescribeWorkspaceResponse_workspace::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeWorkspaceResponse_workspace::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeWorkspaceResponse_workspace::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeWorkspaceResponse_workspace::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QMap OAIDescribeWorkspaceResponse_workspace::getTags() const {
    return m_tags;
}
void OAIDescribeWorkspaceResponse_workspace::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeWorkspaceResponse_workspace::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeWorkspaceResponse_workspace::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribeWorkspaceResponse_workspace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prometheus_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeWorkspaceResponse_workspace::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workspace_id_isValid && m_arn_isValid && m_status_isValid && m_created_at_isValid && true;
}

} // namespace OpenAPI
