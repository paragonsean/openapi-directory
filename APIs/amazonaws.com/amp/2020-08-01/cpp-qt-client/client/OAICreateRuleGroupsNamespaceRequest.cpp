/**
 * Amazon Prometheus Service
 * Amazon Managed Service for Prometheus
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRuleGroupsNamespaceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRuleGroupsNamespaceRequest::OAICreateRuleGroupsNamespaceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRuleGroupsNamespaceRequest::OAICreateRuleGroupsNamespaceRequest() {
    this->initializeModel();
}

OAICreateRuleGroupsNamespaceRequest::~OAICreateRuleGroupsNamespaceRequest() {}

void OAICreateRuleGroupsNamespaceRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateRuleGroupsNamespaceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRuleGroupsNamespaceRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateRuleGroupsNamespaceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRuleGroupsNamespaceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateRuleGroupsNamespaceRequest::getName() const {
    return m_name;
}
void OAICreateRuleGroupsNamespaceRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRuleGroupsNamespaceRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRuleGroupsNamespaceRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateRuleGroupsNamespaceRequest::getData() const {
    return m_data;
}
void OAICreateRuleGroupsNamespaceRequest::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAICreateRuleGroupsNamespaceRequest::is_data_Set() const{
    return m_data_isSet;
}

bool OAICreateRuleGroupsNamespaceRequest::is_data_Valid() const{
    return m_data_isValid;
}

QString OAICreateRuleGroupsNamespaceRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateRuleGroupsNamespaceRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateRuleGroupsNamespaceRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateRuleGroupsNamespaceRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QMap OAICreateRuleGroupsNamespaceRequest::getTags() const {
    return m_tags;
}
void OAICreateRuleGroupsNamespaceRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRuleGroupsNamespaceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRuleGroupsNamespaceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateRuleGroupsNamespaceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRuleGroupsNamespaceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_data_isValid && true;
}

} // namespace OpenAPI
