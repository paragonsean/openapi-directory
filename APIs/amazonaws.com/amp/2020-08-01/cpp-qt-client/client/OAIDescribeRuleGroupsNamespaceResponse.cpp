/**
 * Amazon Prometheus Service
 * Amazon Managed Service for Prometheus
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRuleGroupsNamespaceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRuleGroupsNamespaceResponse::OAIDescribeRuleGroupsNamespaceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRuleGroupsNamespaceResponse::OAIDescribeRuleGroupsNamespaceResponse() {
    this->initializeModel();
}

OAIDescribeRuleGroupsNamespaceResponse::~OAIDescribeRuleGroupsNamespaceResponse() {}

void OAIDescribeRuleGroupsNamespaceResponse::initializeModel() {

    m_rule_groups_namespace_isSet = false;
    m_rule_groups_namespace_isValid = false;
}

void OAIDescribeRuleGroupsNamespaceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRuleGroupsNamespaceResponse::fromJsonObject(QJsonObject json) {

    m_rule_groups_namespace_isValid = ::OpenAPI::fromJsonValue(m_rule_groups_namespace, json[QString("ruleGroupsNamespace")]);
    m_rule_groups_namespace_isSet = !json[QString("ruleGroupsNamespace")].isNull() && m_rule_groups_namespace_isValid;
}

QString OAIDescribeRuleGroupsNamespaceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRuleGroupsNamespaceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_groups_namespace.isSet()) {
        obj.insert(QString("ruleGroupsNamespace"), ::OpenAPI::toJsonValue(m_rule_groups_namespace));
    }
    return obj;
}

OAIDescribeRuleGroupsNamespaceResponse_ruleGroupsNamespace OAIDescribeRuleGroupsNamespaceResponse::getRuleGroupsNamespace() const {
    return m_rule_groups_namespace;
}
void OAIDescribeRuleGroupsNamespaceResponse::setRuleGroupsNamespace(const OAIDescribeRuleGroupsNamespaceResponse_ruleGroupsNamespace &rule_groups_namespace) {
    m_rule_groups_namespace = rule_groups_namespace;
    m_rule_groups_namespace_isSet = true;
}

bool OAIDescribeRuleGroupsNamespaceResponse::is_rule_groups_namespace_Set() const{
    return m_rule_groups_namespace_isSet;
}

bool OAIDescribeRuleGroupsNamespaceResponse::is_rule_groups_namespace_Valid() const{
    return m_rule_groups_namespace_isValid;
}

bool OAIDescribeRuleGroupsNamespaceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_groups_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRuleGroupsNamespaceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_groups_namespace_isValid && true;
}

} // namespace OpenAPI
