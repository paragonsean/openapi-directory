/**
 * Amazon Prometheus Service
 * Amazon Managed Service for Prometheus
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonPrometheusService);
  }
}(this, function(expect, AmazonPrometheusService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonPrometheusService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createAlertManagerDefinition', function() {
      it('should call createAlertManagerDefinition successfully', function(done) {
        //uncomment below and update the code to test createAlertManagerDefinition
        //instance.createAlertManagerDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLoggingConfiguration', function() {
      it('should call createLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test createLoggingConfiguration
        //instance.createLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRuleGroupsNamespace', function() {
      it('should call createRuleGroupsNamespace successfully', function(done) {
        //uncomment below and update the code to test createRuleGroupsNamespace
        //instance.createRuleGroupsNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWorkspace', function() {
      it('should call createWorkspace successfully', function(done) {
        //uncomment below and update the code to test createWorkspace
        //instance.createWorkspace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAlertManagerDefinition', function() {
      it('should call deleteAlertManagerDefinition successfully', function(done) {
        //uncomment below and update the code to test deleteAlertManagerDefinition
        //instance.deleteAlertManagerDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLoggingConfiguration', function() {
      it('should call deleteLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteLoggingConfiguration
        //instance.deleteLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRuleGroupsNamespace', function() {
      it('should call deleteRuleGroupsNamespace successfully', function(done) {
        //uncomment below and update the code to test deleteRuleGroupsNamespace
        //instance.deleteRuleGroupsNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkspace', function() {
      it('should call deleteWorkspace successfully', function(done) {
        //uncomment below and update the code to test deleteWorkspace
        //instance.deleteWorkspace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAlertManagerDefinition', function() {
      it('should call describeAlertManagerDefinition successfully', function(done) {
        //uncomment below and update the code to test describeAlertManagerDefinition
        //instance.describeAlertManagerDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeLoggingConfiguration', function() {
      it('should call describeLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeLoggingConfiguration
        //instance.describeLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRuleGroupsNamespace', function() {
      it('should call describeRuleGroupsNamespace successfully', function(done) {
        //uncomment below and update the code to test describeRuleGroupsNamespace
        //instance.describeRuleGroupsNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkspace', function() {
      it('should call describeWorkspace successfully', function(done) {
        //uncomment below and update the code to test describeWorkspace
        //instance.describeWorkspace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRuleGroupsNamespaces', function() {
      it('should call listRuleGroupsNamespaces successfully', function(done) {
        //uncomment below and update the code to test listRuleGroupsNamespaces
        //instance.listRuleGroupsNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorkspaces', function() {
      it('should call listWorkspaces successfully', function(done) {
        //uncomment below and update the code to test listWorkspaces
        //instance.listWorkspaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putAlertManagerDefinition', function() {
      it('should call putAlertManagerDefinition successfully', function(done) {
        //uncomment below and update the code to test putAlertManagerDefinition
        //instance.putAlertManagerDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRuleGroupsNamespace', function() {
      it('should call putRuleGroupsNamespace successfully', function(done) {
        //uncomment below and update the code to test putRuleGroupsNamespace
        //instance.putRuleGroupsNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLoggingConfiguration', function() {
      it('should call updateLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateLoggingConfiguration
        //instance.updateLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkspaceAlias', function() {
      it('should call updateWorkspaceAlias successfully', function(done) {
        //uncomment below and update the code to test updateWorkspaceAlias
        //instance.updateWorkspaceAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
