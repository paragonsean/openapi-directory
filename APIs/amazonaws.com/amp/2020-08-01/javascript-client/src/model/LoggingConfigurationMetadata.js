/**
 * Amazon Prometheus Service
 * Amazon Managed Service for Prometheus
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateLoggingConfigurationResponseStatus from './CreateLoggingConfigurationResponseStatus';

/**
 * The LoggingConfigurationMetadata model module.
 * @module model/LoggingConfigurationMetadata
 * @version 2020-08-01
 */
class LoggingConfigurationMetadata {
    /**
     * Constructs a new <code>LoggingConfigurationMetadata</code>.
     * Represents the properties of a logging configuration metadata.
     * @alias module:model/LoggingConfigurationMetadata
     * @param status {module:model/CreateLoggingConfigurationResponseStatus} 
     * @param workspace {String} 
     * @param logGroupArn {String} 
     * @param createdAt {Date} 
     * @param modifiedAt {Date} 
     */
    constructor(status, workspace, logGroupArn, createdAt, modifiedAt) { 
        
        LoggingConfigurationMetadata.initialize(this, status, workspace, logGroupArn, createdAt, modifiedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, workspace, logGroupArn, createdAt, modifiedAt) { 
        obj['status'] = status;
        obj['workspace'] = workspace;
        obj['logGroupArn'] = logGroupArn;
        obj['createdAt'] = createdAt;
        obj['modifiedAt'] = modifiedAt;
    }

    /**
     * Constructs a <code>LoggingConfigurationMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoggingConfigurationMetadata} obj Optional instance to populate.
     * @return {module:model/LoggingConfigurationMetadata} The populated <code>LoggingConfigurationMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoggingConfigurationMetadata();

            if (data.hasOwnProperty('status')) {
                obj['status'] = CreateLoggingConfigurationResponseStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('workspace')) {
                obj['workspace'] = ApiClient.convertToType(data['workspace'], 'String');
            }
            if (data.hasOwnProperty('logGroupArn')) {
                obj['logGroupArn'] = ApiClient.convertToType(data['logGroupArn'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('modifiedAt')) {
                obj['modifiedAt'] = ApiClient.convertToType(data['modifiedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoggingConfigurationMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoggingConfigurationMetadata</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoggingConfigurationMetadata.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          CreateLoggingConfigurationResponseStatus.validateJSON(data['status']);
        }
        // validate the optional field `workspace`
        if (data['workspace']) { // data not null
          String.validateJSON(data['workspace']);
        }
        // validate the optional field `logGroupArn`
        if (data['logGroupArn']) { // data not null
          String.validateJSON(data['logGroupArn']);
        }
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `modifiedAt`
        if (data['modifiedAt']) { // data not null
          Date.validateJSON(data['modifiedAt']);
        }

        return true;
    }


}

LoggingConfigurationMetadata.RequiredProperties = ["status", "workspace", "logGroupArn", "createdAt", "modifiedAt"];

/**
 * @member {module:model/CreateLoggingConfigurationResponseStatus} status
 */
LoggingConfigurationMetadata.prototype['status'] = undefined;

/**
 * @member {String} workspace
 */
LoggingConfigurationMetadata.prototype['workspace'] = undefined;

/**
 * @member {String} logGroupArn
 */
LoggingConfigurationMetadata.prototype['logGroupArn'] = undefined;

/**
 * @member {Date} createdAt
 */
LoggingConfigurationMetadata.prototype['createdAt'] = undefined;

/**
 * @member {Date} modifiedAt
 */
LoggingConfigurationMetadata.prototype['modifiedAt'] = undefined;






export default LoggingConfigurationMetadata;

