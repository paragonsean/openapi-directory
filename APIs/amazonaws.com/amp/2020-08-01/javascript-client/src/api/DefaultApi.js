/**
 * Amazon Prometheus Service
 * Amazon Managed Service for Prometheus
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAlertManagerDefinitionResponse from '../model/CreateAlertManagerDefinitionResponse';
import CreateLoggingConfigurationResponse from '../model/CreateLoggingConfigurationResponse';
import CreateRuleGroupsNamespaceRequest from '../model/CreateRuleGroupsNamespaceRequest';
import CreateRuleGroupsNamespaceResponse from '../model/CreateRuleGroupsNamespaceResponse';
import CreateWorkspaceRequest from '../model/CreateWorkspaceRequest';
import CreateWorkspaceResponse from '../model/CreateWorkspaceResponse';
import DescribeAlertManagerDefinitionResponse from '../model/DescribeAlertManagerDefinitionResponse';
import DescribeLoggingConfigurationResponse from '../model/DescribeLoggingConfigurationResponse';
import DescribeRuleGroupsNamespaceResponse from '../model/DescribeRuleGroupsNamespaceResponse';
import DescribeWorkspaceResponse from '../model/DescribeWorkspaceResponse';
import ListRuleGroupsNamespacesResponse from '../model/ListRuleGroupsNamespacesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListWorkspacesResponse from '../model/ListWorkspacesResponse';
import PutAlertManagerDefinitionRequest from '../model/PutAlertManagerDefinitionRequest';
import PutAlertManagerDefinitionResponse from '../model/PutAlertManagerDefinitionResponse';
import PutRuleGroupsNamespaceRequest from '../model/PutRuleGroupsNamespaceRequest';
import PutRuleGroupsNamespaceResponse from '../model/PutRuleGroupsNamespaceResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateLoggingConfigurationRequest from '../model/UpdateLoggingConfigurationRequest';
import UpdateLoggingConfigurationResponse from '../model/UpdateLoggingConfigurationResponse';
import UpdateWorkspaceAliasRequest from '../model/UpdateWorkspaceAliasRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-08-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAlertManagerDefinition operation.
     * @callback module:api/DefaultApi~createAlertManagerDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAlertManagerDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an alert manager definition.
     * @param {String} workspaceId The ID of the workspace in which to create the alert manager definition.
     * @param {module:model/PutAlertManagerDefinitionRequest} putAlertManagerDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAlertManagerDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAlertManagerDefinitionResponse}
     */
    createAlertManagerDefinition(workspaceId, putAlertManagerDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAlertManagerDefinitionRequest;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling createAlertManagerDefinition");
      }
      // verify the required parameter 'putAlertManagerDefinitionRequest' is set
      if (putAlertManagerDefinitionRequest === undefined || putAlertManagerDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'putAlertManagerDefinitionRequest' when calling createAlertManagerDefinition");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAlertManagerDefinitionResponse;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/alertmanager/definition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoggingConfiguration operation.
     * @callback module:api/DefaultApi~createLoggingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLoggingConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create logging configuration.
     * @param {String} workspaceId The ID of the workspace to vend logs to.
     * @param {module:model/UpdateLoggingConfigurationRequest} updateLoggingConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLoggingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLoggingConfigurationResponse}
     */
    createLoggingConfiguration(workspaceId, updateLoggingConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLoggingConfigurationRequest;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling createLoggingConfiguration");
      }
      // verify the required parameter 'updateLoggingConfigurationRequest' is set
      if (updateLoggingConfigurationRequest === undefined || updateLoggingConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateLoggingConfigurationRequest' when calling createLoggingConfiguration");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLoggingConfigurationResponse;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/logging', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRuleGroupsNamespace operation.
     * @callback module:api/DefaultApi~createRuleGroupsNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRuleGroupsNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a rule group namespace.
     * @param {String} workspaceId The ID of the workspace in which to create the rule group namespace.
     * @param {module:model/CreateRuleGroupsNamespaceRequest} createRuleGroupsNamespaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRuleGroupsNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRuleGroupsNamespaceResponse}
     */
    createRuleGroupsNamespace(workspaceId, createRuleGroupsNamespaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRuleGroupsNamespaceRequest;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling createRuleGroupsNamespace");
      }
      // verify the required parameter 'createRuleGroupsNamespaceRequest' is set
      if (createRuleGroupsNamespaceRequest === undefined || createRuleGroupsNamespaceRequest === null) {
        throw new Error("Missing the required parameter 'createRuleGroupsNamespaceRequest' when calling createRuleGroupsNamespace");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRuleGroupsNamespaceResponse;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/rulegroupsnamespaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkspace operation.
     * @callback module:api/DefaultApi~createWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorkspaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new AMP workspace.
     * @param {module:model/CreateWorkspaceRequest} createWorkspaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorkspaceResponse}
     */
    createWorkspace(createWorkspaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorkspaceRequest;
      // verify the required parameter 'createWorkspaceRequest' is set
      if (createWorkspaceRequest === undefined || createWorkspaceRequest === null) {
        throw new Error("Missing the required parameter 'createWorkspaceRequest' when calling createWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorkspaceResponse;
      return this.apiClient.callApi(
        '/workspaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlertManagerDefinition operation.
     * @callback module:api/DefaultApi~deleteAlertManagerDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an alert manager definition.
     * @param {String} workspaceId The ID of the workspace in which to delete the alert manager definition.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
     * @param {module:api/DefaultApi~deleteAlertManagerDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAlertManagerDefinition(workspaceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling deleteAlertManagerDefinition");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/alertmanager/definition', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoggingConfiguration operation.
     * @callback module:api/DefaultApi~deleteLoggingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete logging configuration.
     * @param {String} workspaceId The ID of the workspace to vend logs to.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
     * @param {module:api/DefaultApi~deleteLoggingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLoggingConfiguration(workspaceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling deleteLoggingConfiguration");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/logging', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRuleGroupsNamespace operation.
     * @callback module:api/DefaultApi~deleteRuleGroupsNamespaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a rule groups namespace.
     * @param {String} workspaceId The ID of the workspace to delete rule group definition.
     * @param {String} name The rule groups namespace name.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
     * @param {module:api/DefaultApi~deleteRuleGroupsNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRuleGroupsNamespace(workspaceId, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling deleteRuleGroupsNamespace");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteRuleGroupsNamespace");
      }

      let pathParams = {
        'workspaceId': workspaceId,
        'name': name
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/rulegroupsnamespaces/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkspace operation.
     * @callback module:api/DefaultApi~deleteWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an AMP workspace.
     * @param {String} workspaceId The ID of the workspace to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
     * @param {module:api/DefaultApi~deleteWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkspace(workspaceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling deleteWorkspace");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAlertManagerDefinition operation.
     * @callback module:api/DefaultApi~describeAlertManagerDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAlertManagerDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an alert manager definition.
     * @param {String} workspaceId The ID of the workspace to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAlertManagerDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAlertManagerDefinitionResponse}
     */
    describeAlertManagerDefinition(workspaceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling describeAlertManagerDefinition");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeAlertManagerDefinitionResponse;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/alertmanager/definition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLoggingConfiguration operation.
     * @callback module:api/DefaultApi~describeLoggingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLoggingConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes logging configuration.
     * @param {String} workspaceId The ID of the workspace to vend logs to.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLoggingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLoggingConfigurationResponse}
     */
    describeLoggingConfiguration(workspaceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling describeLoggingConfiguration");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeLoggingConfigurationResponse;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/logging', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRuleGroupsNamespace operation.
     * @callback module:api/DefaultApi~describeRuleGroupsNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRuleGroupsNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe a rule groups namespace.
     * @param {String} workspaceId The ID of the workspace to describe.
     * @param {String} name The rule groups namespace.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRuleGroupsNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRuleGroupsNamespaceResponse}
     */
    describeRuleGroupsNamespace(workspaceId, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling describeRuleGroupsNamespace");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling describeRuleGroupsNamespace");
      }

      let pathParams = {
        'workspaceId': workspaceId,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeRuleGroupsNamespaceResponse;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/rulegroupsnamespaces/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorkspace operation.
     * @callback module:api/DefaultApi~describeWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorkspaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing AMP workspace.
     * @param {String} workspaceId The ID of the workspace to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorkspaceResponse}
     */
    describeWorkspace(workspaceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling describeWorkspace");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeWorkspaceResponse;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRuleGroupsNamespaces operation.
     * @callback module:api/DefaultApi~listRuleGroupsNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRuleGroupsNamespacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists rule groups namespaces.
     * @param {String} workspaceId The ID of the workspace.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [name] Optional filter for rule groups namespace name. Only the rule groups namespace that begin with this value will be returned.
     * @param {String} [nextToken] Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListRuleGroupsNamespaces request.
     * @param {Number} [maxResults] Maximum results to return in response (default=100, maximum=1000).
     * @param {module:api/DefaultApi~listRuleGroupsNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRuleGroupsNamespacesResponse}
     */
    listRuleGroupsNamespaces(workspaceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling listRuleGroupsNamespaces");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
        'name': opts['name'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRuleGroupsNamespacesResponse;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/rulegroupsnamespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags you have assigned to the resource.
     * @param {String} resourceArn The ARN of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkspaces operation.
     * @callback module:api/DefaultApi~listWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkspacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all AMP workspaces, including workspaces being created or deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListWorkspaces request.
     * @param {String} [alias] Optional filter for workspace alias. Only the workspaces with aliases that begin with this value will be returned.
     * @param {Number} [maxResults] Maximum results to return in response (default=100, maximum=1000).
     * @param {module:api/DefaultApi~listWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkspacesResponse}
     */
    listWorkspaces(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'alias': opts['alias'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWorkspacesResponse;
      return this.apiClient.callApi(
        '/workspaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAlertManagerDefinition operation.
     * @callback module:api/DefaultApi~putAlertManagerDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutAlertManagerDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an alert manager definition.
     * @param {String} workspaceId The ID of the workspace in which to update the alert manager definition.
     * @param {module:model/PutAlertManagerDefinitionRequest} putAlertManagerDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAlertManagerDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutAlertManagerDefinitionResponse}
     */
    putAlertManagerDefinition(workspaceId, putAlertManagerDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAlertManagerDefinitionRequest;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling putAlertManagerDefinition");
      }
      // verify the required parameter 'putAlertManagerDefinitionRequest' is set
      if (putAlertManagerDefinitionRequest === undefined || putAlertManagerDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'putAlertManagerDefinitionRequest' when calling putAlertManagerDefinition");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutAlertManagerDefinitionResponse;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/alertmanager/definition', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRuleGroupsNamespace operation.
     * @callback module:api/DefaultApi~putRuleGroupsNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutRuleGroupsNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a rule groups namespace.
     * @param {String} workspaceId The ID of the workspace in which to update the rule group namespace.
     * @param {String} name The rule groups namespace name.
     * @param {module:model/PutRuleGroupsNamespaceRequest} putRuleGroupsNamespaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putRuleGroupsNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutRuleGroupsNamespaceResponse}
     */
    putRuleGroupsNamespace(workspaceId, name, putRuleGroupsNamespaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = putRuleGroupsNamespaceRequest;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling putRuleGroupsNamespace");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling putRuleGroupsNamespace");
      }
      // verify the required parameter 'putRuleGroupsNamespaceRequest' is set
      if (putRuleGroupsNamespaceRequest === undefined || putRuleGroupsNamespaceRequest === null) {
        throw new Error("Missing the required parameter 'putRuleGroupsNamespaceRequest' when calling putRuleGroupsNamespace");
      }

      let pathParams = {
        'workspaceId': workspaceId,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutRuleGroupsNamespaceResponse;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/rulegroupsnamespaces/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates tags for the specified resource.
     * @param {String} resourceArn The ARN of the resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes tags from the specified resource.
     * @param {String} resourceArn The ARN of the resource.
     * @param {Array.<String>} tagKeys One or more tag keys
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoggingConfiguration operation.
     * @callback module:api/DefaultApi~updateLoggingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateLoggingConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update logging configuration.
     * @param {String} workspaceId The ID of the workspace to vend logs to.
     * @param {module:model/UpdateLoggingConfigurationRequest} updateLoggingConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLoggingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateLoggingConfigurationResponse}
     */
    updateLoggingConfiguration(workspaceId, updateLoggingConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLoggingConfigurationRequest;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling updateLoggingConfiguration");
      }
      // verify the required parameter 'updateLoggingConfigurationRequest' is set
      if (updateLoggingConfigurationRequest === undefined || updateLoggingConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateLoggingConfigurationRequest' when calling updateLoggingConfiguration");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateLoggingConfigurationResponse;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/logging', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkspaceAlias operation.
     * @callback module:api/DefaultApi~updateWorkspaceAliasCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an AMP workspace alias.
     * @param {String} workspaceId The ID of the workspace being updated.
     * @param {module:model/UpdateWorkspaceAliasRequest} updateWorkspaceAliasRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWorkspaceAliasCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWorkspaceAlias(workspaceId, updateWorkspaceAliasRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWorkspaceAliasRequest;
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling updateWorkspaceAlias");
      }
      // verify the required parameter 'updateWorkspaceAliasRequest' is set
      if (updateWorkspaceAliasRequest === undefined || updateWorkspaceAliasRequest === null) {
        throw new Error("Missing the required parameter 'updateWorkspaceAliasRequest' when calling updateWorkspaceAlias");
      }

      let pathParams = {
        'workspaceId': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/alias', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
