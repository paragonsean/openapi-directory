# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateWorkspaceAliasRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, client_token: str=None):
        """UpdateWorkspaceAliasRequest - a model defined in OpenAPI

        :param alias: The alias of this UpdateWorkspaceAliasRequest.
        :param client_token: The client_token of this UpdateWorkspaceAliasRequest.
        """
        self.openapi_types = {
            'alias': str,
            'client_token': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'client_token': 'clientToken'
        }

        self._alias = alias
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateWorkspaceAliasRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateWorkspaceAlias_request of this UpdateWorkspaceAliasRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this UpdateWorkspaceAliasRequest.

        A user-assigned workspace alias.

        :return: The alias of this UpdateWorkspaceAliasRequest.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this UpdateWorkspaceAliasRequest.

        A user-assigned workspace alias.

        :param alias: The alias of this UpdateWorkspaceAliasRequest.
        :type alias: str
        """
        if alias is not None and len(alias) > 100:
            raise ValueError("Invalid value for `alias`, length must be less than or equal to `100`")
        if alias is not None and len(alias) < 1:
            raise ValueError("Invalid value for `alias`, length must be greater than or equal to `1`")

        self._alias = alias

    @property
    def client_token(self):
        """Gets the client_token of this UpdateWorkspaceAliasRequest.

        An identifier used to ensure the idempotency of a write request.

        :return: The client_token of this UpdateWorkspaceAliasRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateWorkspaceAliasRequest.

        An identifier used to ensure the idempotency of a write request.

        :param client_token: The client_token of this UpdateWorkspaceAliasRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[!-~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[!-~]+/`")

        self._client_token = client_token
