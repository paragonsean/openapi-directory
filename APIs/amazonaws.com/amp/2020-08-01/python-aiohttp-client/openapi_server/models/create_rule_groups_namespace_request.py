# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateRuleGroupsNamespaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, data: str=None, client_token: str=None, tags: Dict[str, str]=None):
        """CreateRuleGroupsNamespaceRequest - a model defined in OpenAPI

        :param name: The name of this CreateRuleGroupsNamespaceRequest.
        :param data: The data of this CreateRuleGroupsNamespaceRequest.
        :param client_token: The client_token of this CreateRuleGroupsNamespaceRequest.
        :param tags: The tags of this CreateRuleGroupsNamespaceRequest.
        """
        self.openapi_types = {
            'name': str,
            'data': str,
            'client_token': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'name',
            'data': 'data',
            'client_token': 'clientToken',
            'tags': 'tags'
        }

        self._name = name
        self._data = data
        self._client_token = client_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRuleGroupsNamespaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRuleGroupsNamespace_request of this CreateRuleGroupsNamespaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateRuleGroupsNamespaceRequest.

        The namespace name that the rule group belong to.

        :return: The name of this CreateRuleGroupsNamespaceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRuleGroupsNamespaceRequest.

        The namespace name that the rule group belong to.

        :param name: The name of this CreateRuleGroupsNamespaceRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'.*[0-9A-Za-z][-.0-9A-Z_a-z]*.*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/.*[0-9A-Za-z][-.0-9A-Z_a-z]*.*/`")

        self._name = name

    @property
    def data(self):
        """Gets the data of this CreateRuleGroupsNamespaceRequest.

        The rule groups namespace data.

        :return: The data of this CreateRuleGroupsNamespaceRequest.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CreateRuleGroupsNamespaceRequest.

        The rule groups namespace data.

        :param data: The data of this CreateRuleGroupsNamespaceRequest.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def client_token(self):
        """Gets the client_token of this CreateRuleGroupsNamespaceRequest.

        An identifier used to ensure the idempotency of a write request.

        :return: The client_token of this CreateRuleGroupsNamespaceRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateRuleGroupsNamespaceRequest.

        An identifier used to ensure the idempotency of a write request.

        :param client_token: The client_token of this CreateRuleGroupsNamespaceRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[!-~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[!-~]+/`")

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateRuleGroupsNamespaceRequest.

        The list of tags assigned to the resource.

        :return: The tags of this CreateRuleGroupsNamespaceRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRuleGroupsNamespaceRequest.

        The list of tags assigned to the resource.

        :param tags: The tags of this CreateRuleGroupsNamespaceRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
