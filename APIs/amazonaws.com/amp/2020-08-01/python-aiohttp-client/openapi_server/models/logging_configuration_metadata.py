# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_logging_configuration_response_status import CreateLoggingConfigurationResponseStatus
from openapi_server import util


class LoggingConfigurationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: CreateLoggingConfigurationResponseStatus=None, workspace: str=None, log_group_arn: str=None, created_at: datetime=None, modified_at: datetime=None):
        """LoggingConfigurationMetadata - a model defined in OpenAPI

        :param status: The status of this LoggingConfigurationMetadata.
        :param workspace: The workspace of this LoggingConfigurationMetadata.
        :param log_group_arn: The log_group_arn of this LoggingConfigurationMetadata.
        :param created_at: The created_at of this LoggingConfigurationMetadata.
        :param modified_at: The modified_at of this LoggingConfigurationMetadata.
        """
        self.openapi_types = {
            'status': CreateLoggingConfigurationResponseStatus,
            'workspace': str,
            'log_group_arn': str,
            'created_at': datetime,
            'modified_at': datetime
        }

        self.attribute_map = {
            'status': 'status',
            'workspace': 'workspace',
            'log_group_arn': 'logGroupArn',
            'created_at': 'createdAt',
            'modified_at': 'modifiedAt'
        }

        self._status = status
        self._workspace = workspace
        self._log_group_arn = log_group_arn
        self._created_at = created_at
        self._modified_at = modified_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoggingConfigurationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoggingConfigurationMetadata of this LoggingConfigurationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this LoggingConfigurationMetadata.


        :return: The status of this LoggingConfigurationMetadata.
        :rtype: CreateLoggingConfigurationResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LoggingConfigurationMetadata.


        :param status: The status of this LoggingConfigurationMetadata.
        :type status: CreateLoggingConfigurationResponseStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def workspace(self):
        """Gets the workspace of this LoggingConfigurationMetadata.


        :return: The workspace of this LoggingConfigurationMetadata.
        :rtype: str
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this LoggingConfigurationMetadata.


        :param workspace: The workspace of this LoggingConfigurationMetadata.
        :type workspace: str
        """
        if workspace is None:
            raise ValueError("Invalid value for `workspace`, must not be `None`")

        self._workspace = workspace

    @property
    def log_group_arn(self):
        """Gets the log_group_arn of this LoggingConfigurationMetadata.


        :return: The log_group_arn of this LoggingConfigurationMetadata.
        :rtype: str
        """
        return self._log_group_arn

    @log_group_arn.setter
    def log_group_arn(self, log_group_arn):
        """Sets the log_group_arn of this LoggingConfigurationMetadata.


        :param log_group_arn: The log_group_arn of this LoggingConfigurationMetadata.
        :type log_group_arn: str
        """
        if log_group_arn is None:
            raise ValueError("Invalid value for `log_group_arn`, must not be `None`")

        self._log_group_arn = log_group_arn

    @property
    def created_at(self):
        """Gets the created_at of this LoggingConfigurationMetadata.


        :return: The created_at of this LoggingConfigurationMetadata.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LoggingConfigurationMetadata.


        :param created_at: The created_at of this LoggingConfigurationMetadata.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this LoggingConfigurationMetadata.


        :return: The modified_at of this LoggingConfigurationMetadata.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this LoggingConfigurationMetadata.


        :param modified_at: The modified_at of this LoggingConfigurationMetadata.
        :type modified_at: datetime
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")

        self._modified_at = modified_at
