# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_rule_groups_namespace_response_status import CreateRuleGroupsNamespaceResponseStatus
from openapi_server import util


class RuleGroupsNamespaceDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, name: str=None, status: CreateRuleGroupsNamespaceResponseStatus=None, data: str=None, created_at: datetime=None, modified_at: datetime=None, tags: Dict=None):
        """RuleGroupsNamespaceDescription - a model defined in OpenAPI

        :param arn: The arn of this RuleGroupsNamespaceDescription.
        :param name: The name of this RuleGroupsNamespaceDescription.
        :param status: The status of this RuleGroupsNamespaceDescription.
        :param data: The data of this RuleGroupsNamespaceDescription.
        :param created_at: The created_at of this RuleGroupsNamespaceDescription.
        :param modified_at: The modified_at of this RuleGroupsNamespaceDescription.
        :param tags: The tags of this RuleGroupsNamespaceDescription.
        """
        self.openapi_types = {
            'arn': str,
            'name': str,
            'status': CreateRuleGroupsNamespaceResponseStatus,
            'data': str,
            'created_at': datetime,
            'modified_at': datetime,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'arn',
            'name': 'name',
            'status': 'status',
            'data': 'data',
            'created_at': 'createdAt',
            'modified_at': 'modifiedAt',
            'tags': 'tags'
        }

        self._arn = arn
        self._name = name
        self._status = status
        self._data = data
        self._created_at = created_at
        self._modified_at = modified_at
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleGroupsNamespaceDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleGroupsNamespaceDescription of this RuleGroupsNamespaceDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this RuleGroupsNamespaceDescription.


        :return: The arn of this RuleGroupsNamespaceDescription.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this RuleGroupsNamespaceDescription.


        :param arn: The arn of this RuleGroupsNamespaceDescription.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this RuleGroupsNamespaceDescription.


        :return: The name of this RuleGroupsNamespaceDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuleGroupsNamespaceDescription.


        :param name: The name of this RuleGroupsNamespaceDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this RuleGroupsNamespaceDescription.


        :return: The status of this RuleGroupsNamespaceDescription.
        :rtype: CreateRuleGroupsNamespaceResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RuleGroupsNamespaceDescription.


        :param status: The status of this RuleGroupsNamespaceDescription.
        :type status: CreateRuleGroupsNamespaceResponseStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def data(self):
        """Gets the data of this RuleGroupsNamespaceDescription.


        :return: The data of this RuleGroupsNamespaceDescription.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RuleGroupsNamespaceDescription.


        :param data: The data of this RuleGroupsNamespaceDescription.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def created_at(self):
        """Gets the created_at of this RuleGroupsNamespaceDescription.


        :return: The created_at of this RuleGroupsNamespaceDescription.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RuleGroupsNamespaceDescription.


        :param created_at: The created_at of this RuleGroupsNamespaceDescription.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this RuleGroupsNamespaceDescription.


        :return: The modified_at of this RuleGroupsNamespaceDescription.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this RuleGroupsNamespaceDescription.


        :param modified_at: The modified_at of this RuleGroupsNamespaceDescription.
        :type modified_at: datetime
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")

        self._modified_at = modified_at

    @property
    def tags(self):
        """Gets the tags of this RuleGroupsNamespaceDescription.


        :return: The tags of this RuleGroupsNamespaceDescription.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RuleGroupsNamespaceDescription.


        :param tags: The tags of this RuleGroupsNamespaceDescription.
        :type tags: Dict
        """

        self._tags = tags
