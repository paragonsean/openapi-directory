# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workspace_description_status import WorkspaceDescriptionStatus
from openapi_server import util


class WorkspaceSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workspace_id: str=None, alias: str=None, arn: str=None, status: WorkspaceDescriptionStatus=None, created_at: datetime=None, tags: Dict=None):
        """WorkspaceSummary - a model defined in OpenAPI

        :param workspace_id: The workspace_id of this WorkspaceSummary.
        :param alias: The alias of this WorkspaceSummary.
        :param arn: The arn of this WorkspaceSummary.
        :param status: The status of this WorkspaceSummary.
        :param created_at: The created_at of this WorkspaceSummary.
        :param tags: The tags of this WorkspaceSummary.
        """
        self.openapi_types = {
            'workspace_id': str,
            'alias': str,
            'arn': str,
            'status': WorkspaceDescriptionStatus,
            'created_at': datetime,
            'tags': Dict
        }

        self.attribute_map = {
            'workspace_id': 'workspaceId',
            'alias': 'alias',
            'arn': 'arn',
            'status': 'status',
            'created_at': 'createdAt',
            'tags': 'tags'
        }

        self._workspace_id = workspace_id
        self._alias = alias
        self._arn = arn
        self._status = status
        self._created_at = created_at
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceSummary of this WorkspaceSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workspace_id(self):
        """Gets the workspace_id of this WorkspaceSummary.


        :return: The workspace_id of this WorkspaceSummary.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this WorkspaceSummary.


        :param workspace_id: The workspace_id of this WorkspaceSummary.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id

    @property
    def alias(self):
        """Gets the alias of this WorkspaceSummary.


        :return: The alias of this WorkspaceSummary.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this WorkspaceSummary.


        :param alias: The alias of this WorkspaceSummary.
        :type alias: str
        """

        self._alias = alias

    @property
    def arn(self):
        """Gets the arn of this WorkspaceSummary.


        :return: The arn of this WorkspaceSummary.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this WorkspaceSummary.


        :param arn: The arn of this WorkspaceSummary.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def status(self):
        """Gets the status of this WorkspaceSummary.


        :return: The status of this WorkspaceSummary.
        :rtype: WorkspaceDescriptionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkspaceSummary.


        :param status: The status of this WorkspaceSummary.
        :type status: WorkspaceDescriptionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this WorkspaceSummary.


        :return: The created_at of this WorkspaceSummary.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WorkspaceSummary.


        :param created_at: The created_at of this WorkspaceSummary.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def tags(self):
        """Gets the tags of this WorkspaceSummary.


        :return: The tags of this WorkspaceSummary.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WorkspaceSummary.


        :param tags: The tags of this WorkspaceSummary.
        :type tags: Dict
        """

        self._tags = tags
