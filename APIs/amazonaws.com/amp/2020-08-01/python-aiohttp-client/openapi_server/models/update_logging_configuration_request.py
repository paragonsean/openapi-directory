# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateLoggingConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_group_arn: str=None, client_token: str=None):
        """UpdateLoggingConfigurationRequest - a model defined in OpenAPI

        :param log_group_arn: The log_group_arn of this UpdateLoggingConfigurationRequest.
        :param client_token: The client_token of this UpdateLoggingConfigurationRequest.
        """
        self.openapi_types = {
            'log_group_arn': str,
            'client_token': str
        }

        self.attribute_map = {
            'log_group_arn': 'logGroupArn',
            'client_token': 'clientToken'
        }

        self._log_group_arn = log_group_arn
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateLoggingConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateLoggingConfiguration_request of this UpdateLoggingConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_group_arn(self):
        """Gets the log_group_arn of this UpdateLoggingConfigurationRequest.

        The ARN of the CW log group to which the vended log data will be published.

        :return: The log_group_arn of this UpdateLoggingConfigurationRequest.
        :rtype: str
        """
        return self._log_group_arn

    @log_group_arn.setter
    def log_group_arn(self, log_group_arn):
        """Sets the log_group_arn of this UpdateLoggingConfigurationRequest.

        The ARN of the CW log group to which the vended log data will be published.

        :param log_group_arn: The log_group_arn of this UpdateLoggingConfigurationRequest.
        :type log_group_arn: str
        """
        if log_group_arn is None:
            raise ValueError("Invalid value for `log_group_arn`, must not be `None`")
        if log_group_arn is not None and not re.search(r'arn:aws[a-z0-9-]*:logs:[a-z0-9-]+:\d{12}:log-group:[A-Za-z0-9\.\-\_\#\/]{1,512}\:\*', log_group_arn):
            raise ValueError("Invalid value for `log_group_arn`, must be a follow pattern or equal to `/arn:aws[a-z0-9-]*:logs:[a-z0-9-]+:\d{12}:log-group:[A-Za-z0-9\.\-\_\#\/]{1,512}\:\*/`")

        self._log_group_arn = log_group_arn

    @property
    def client_token(self):
        """Gets the client_token of this UpdateLoggingConfigurationRequest.

        An identifier used to ensure the idempotency of a write request.

        :return: The client_token of this UpdateLoggingConfigurationRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateLoggingConfigurationRequest.

        An identifier used to ensure the idempotency of a write request.

        :param client_token: The client_token of this UpdateLoggingConfigurationRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[!-~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[!-~]+/`")

        self._client_token = client_token
