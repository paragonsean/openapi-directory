/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InferenceEventSummary model module.
 * @module model/InferenceEventSummary
 * @version 2020-12-15
 */
class InferenceEventSummary {
    /**
     * Constructs a new <code>InferenceEventSummary</code>.
     * Contains information about the specific inference event, including start and end time, diagnostics information, event duration and so on.
     * @alias module:model/InferenceEventSummary
     */
    constructor() { 
        
        InferenceEventSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InferenceEventSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InferenceEventSummary} obj Optional instance to populate.
     * @return {module:model/InferenceEventSummary} The populated <code>InferenceEventSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InferenceEventSummary();

            if (data.hasOwnProperty('InferenceSchedulerArn')) {
                obj['InferenceSchedulerArn'] = ApiClient.convertToType(data['InferenceSchedulerArn'], 'String');
            }
            if (data.hasOwnProperty('InferenceSchedulerName')) {
                obj['InferenceSchedulerName'] = ApiClient.convertToType(data['InferenceSchedulerName'], 'String');
            }
            if (data.hasOwnProperty('EventStartTime')) {
                obj['EventStartTime'] = ApiClient.convertToType(data['EventStartTime'], 'Date');
            }
            if (data.hasOwnProperty('EventEndTime')) {
                obj['EventEndTime'] = ApiClient.convertToType(data['EventEndTime'], 'Date');
            }
            if (data.hasOwnProperty('Diagnostics')) {
                obj['Diagnostics'] = ApiClient.convertToType(data['Diagnostics'], 'String');
            }
            if (data.hasOwnProperty('EventDurationInSeconds')) {
                obj['EventDurationInSeconds'] = ApiClient.convertToType(data['EventDurationInSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InferenceEventSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InferenceEventSummary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `InferenceSchedulerArn`
        if (data['InferenceSchedulerArn']) { // data not null
          String.validateJSON(data['InferenceSchedulerArn']);
        }
        // validate the optional field `InferenceSchedulerName`
        if (data['InferenceSchedulerName']) { // data not null
          String.validateJSON(data['InferenceSchedulerName']);
        }
        // validate the optional field `EventStartTime`
        if (data['EventStartTime']) { // data not null
          Date.validateJSON(data['EventStartTime']);
        }
        // validate the optional field `EventEndTime`
        if (data['EventEndTime']) { // data not null
          Date.validateJSON(data['EventEndTime']);
        }
        // validate the optional field `Diagnostics`
        if (data['Diagnostics']) { // data not null
          String.validateJSON(data['Diagnostics']);
        }
        // validate the optional field `EventDurationInSeconds`
        if (data['EventDurationInSeconds']) { // data not null
          Number.validateJSON(data['EventDurationInSeconds']);
        }

        return true;
    }


}



/**
 * @member {String} InferenceSchedulerArn
 */
InferenceEventSummary.prototype['InferenceSchedulerArn'] = undefined;

/**
 * @member {String} InferenceSchedulerName
 */
InferenceEventSummary.prototype['InferenceSchedulerName'] = undefined;

/**
 * @member {Date} EventStartTime
 */
InferenceEventSummary.prototype['EventStartTime'] = undefined;

/**
 * @member {Date} EventEndTime
 */
InferenceEventSummary.prototype['EventEndTime'] = undefined;

/**
 * @member {String} Diagnostics
 */
InferenceEventSummary.prototype['Diagnostics'] = undefined;

/**
 * @member {Number} EventDurationInSeconds
 */
InferenceEventSummary.prototype['EventDurationInSeconds'] = undefined;






export default InferenceEventSummary;

