/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MissingCompleteSensorData from './MissingCompleteSensorData';

/**
 * The InsufficientSensorDataMissingCompleteSensorData model module.
 * @module model/InsufficientSensorDataMissingCompleteSensorData
 * @version 2020-12-15
 */
class InsufficientSensorDataMissingCompleteSensorData {
    /**
     * Constructs a new <code>InsufficientSensorDataMissingCompleteSensorData</code>.
     * @alias module:model/InsufficientSensorDataMissingCompleteSensorData
     * @implements module:model/MissingCompleteSensorData
     * @param affectedSensorCount {Number} 
     */
    constructor(affectedSensorCount) { 
        MissingCompleteSensorData.initialize(this, affectedSensorCount);
        InsufficientSensorDataMissingCompleteSensorData.initialize(this, affectedSensorCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, affectedSensorCount) { 
        obj['AffectedSensorCount'] = affectedSensorCount;
    }

    /**
     * Constructs a <code>InsufficientSensorDataMissingCompleteSensorData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InsufficientSensorDataMissingCompleteSensorData} obj Optional instance to populate.
     * @return {module:model/InsufficientSensorDataMissingCompleteSensorData} The populated <code>InsufficientSensorDataMissingCompleteSensorData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InsufficientSensorDataMissingCompleteSensorData();
            MissingCompleteSensorData.constructFromObject(data, obj);

            if (data.hasOwnProperty('AffectedSensorCount')) {
                obj['AffectedSensorCount'] = ApiClient.convertToType(data['AffectedSensorCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InsufficientSensorDataMissingCompleteSensorData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InsufficientSensorDataMissingCompleteSensorData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InsufficientSensorDataMissingCompleteSensorData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AffectedSensorCount`
        if (data['AffectedSensorCount']) { // data not null
          Number.validateJSON(data['AffectedSensorCount']);
        }

        return true;
    }


}

InsufficientSensorDataMissingCompleteSensorData.RequiredProperties = ["AffectedSensorCount"];

/**
 * @member {Number} AffectedSensorCount
 */
InsufficientSensorDataMissingCompleteSensorData.prototype['AffectedSensorCount'] = undefined;


// Implement MissingCompleteSensorData interface:
/**
 * @member {Number} AffectedSensorCount
 */
MissingCompleteSensorData.prototype['AffectedSensorCount'] = undefined;




export default InsufficientSensorDataMissingCompleteSensorData;

