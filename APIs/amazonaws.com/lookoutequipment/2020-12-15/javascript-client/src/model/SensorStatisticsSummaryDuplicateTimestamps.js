/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CountPercent from './CountPercent';

/**
 * The SensorStatisticsSummaryDuplicateTimestamps model module.
 * @module model/SensorStatisticsSummaryDuplicateTimestamps
 * @version 2020-12-15
 */
class SensorStatisticsSummaryDuplicateTimestamps {
    /**
     * Constructs a new <code>SensorStatisticsSummaryDuplicateTimestamps</code>.
     * @alias module:model/SensorStatisticsSummaryDuplicateTimestamps
     * @implements module:model/CountPercent
     * @param count {Number} 
     * @param percentage {Number} 
     */
    constructor(count, percentage) { 
        CountPercent.initialize(this, count, percentage);
        SensorStatisticsSummaryDuplicateTimestamps.initialize(this, count, percentage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, count, percentage) { 
        obj['Count'] = count;
        obj['Percentage'] = percentage;
    }

    /**
     * Constructs a <code>SensorStatisticsSummaryDuplicateTimestamps</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SensorStatisticsSummaryDuplicateTimestamps} obj Optional instance to populate.
     * @return {module:model/SensorStatisticsSummaryDuplicateTimestamps} The populated <code>SensorStatisticsSummaryDuplicateTimestamps</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SensorStatisticsSummaryDuplicateTimestamps();
            CountPercent.constructFromObject(data, obj);

            if (data.hasOwnProperty('Count')) {
                obj['Count'] = ApiClient.convertToType(data['Count'], 'Number');
            }
            if (data.hasOwnProperty('Percentage')) {
                obj['Percentage'] = ApiClient.convertToType(data['Percentage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SensorStatisticsSummaryDuplicateTimestamps</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SensorStatisticsSummaryDuplicateTimestamps</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SensorStatisticsSummaryDuplicateTimestamps.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Count`
        if (data['Count']) { // data not null
          Number.validateJSON(data['Count']);
        }
        // validate the optional field `Percentage`
        if (data['Percentage']) { // data not null
          Number.validateJSON(data['Percentage']);
        }

        return true;
    }


}

SensorStatisticsSummaryDuplicateTimestamps.RequiredProperties = ["Count", "Percentage"];

/**
 * @member {Number} Count
 */
SensorStatisticsSummaryDuplicateTimestamps.prototype['Count'] = undefined;

/**
 * @member {Number} Percentage
 */
SensorStatisticsSummaryDuplicateTimestamps.prototype['Percentage'] = undefined;


// Implement CountPercent interface:
/**
 * @member {Number} Count
 */
CountPercent.prototype['Count'] = undefined;
/**
 * @member {Number} Percentage
 */
CountPercent.prototype['Percentage'] = undefined;




export default SensorStatisticsSummaryDuplicateTimestamps;

