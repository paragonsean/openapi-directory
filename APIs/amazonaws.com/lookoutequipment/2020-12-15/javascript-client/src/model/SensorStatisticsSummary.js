/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SensorStatisticsSummaryCategoricalValues from './SensorStatisticsSummaryCategoricalValues';
import SensorStatisticsSummaryDuplicateTimestamps from './SensorStatisticsSummaryDuplicateTimestamps';
import SensorStatisticsSummaryInvalidDateEntries from './SensorStatisticsSummaryInvalidDateEntries';
import SensorStatisticsSummaryInvalidValues from './SensorStatisticsSummaryInvalidValues';
import SensorStatisticsSummaryLargeTimestampGaps from './SensorStatisticsSummaryLargeTimestampGaps';
import SensorStatisticsSummaryMissingValues from './SensorStatisticsSummaryMissingValues';
import SensorStatisticsSummaryMonotonicValues from './SensorStatisticsSummaryMonotonicValues';
import SensorStatisticsSummaryMultipleOperatingModes from './SensorStatisticsSummaryMultipleOperatingModes';

/**
 * The SensorStatisticsSummary model module.
 * @module model/SensorStatisticsSummary
 * @version 2020-12-15
 */
class SensorStatisticsSummary {
    /**
     * Constructs a new <code>SensorStatisticsSummary</code>.
     *  Summary of ingestion statistics like whether data exists, number of missing values, number of invalid values and so on related to the particular sensor. 
     * @alias module:model/SensorStatisticsSummary
     */
    constructor() { 
        
        SensorStatisticsSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SensorStatisticsSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SensorStatisticsSummary} obj Optional instance to populate.
     * @return {module:model/SensorStatisticsSummary} The populated <code>SensorStatisticsSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SensorStatisticsSummary();

            if (data.hasOwnProperty('ComponentName')) {
                obj['ComponentName'] = ApiClient.convertToType(data['ComponentName'], 'String');
            }
            if (data.hasOwnProperty('SensorName')) {
                obj['SensorName'] = ApiClient.convertToType(data['SensorName'], 'String');
            }
            if (data.hasOwnProperty('DataExists')) {
                obj['DataExists'] = ApiClient.convertToType(data['DataExists'], 'Boolean');
            }
            if (data.hasOwnProperty('MissingValues')) {
                obj['MissingValues'] = SensorStatisticsSummaryMissingValues.constructFromObject(data['MissingValues']);
            }
            if (data.hasOwnProperty('InvalidValues')) {
                obj['InvalidValues'] = SensorStatisticsSummaryInvalidValues.constructFromObject(data['InvalidValues']);
            }
            if (data.hasOwnProperty('InvalidDateEntries')) {
                obj['InvalidDateEntries'] = SensorStatisticsSummaryInvalidDateEntries.constructFromObject(data['InvalidDateEntries']);
            }
            if (data.hasOwnProperty('DuplicateTimestamps')) {
                obj['DuplicateTimestamps'] = SensorStatisticsSummaryDuplicateTimestamps.constructFromObject(data['DuplicateTimestamps']);
            }
            if (data.hasOwnProperty('CategoricalValues')) {
                obj['CategoricalValues'] = SensorStatisticsSummaryCategoricalValues.constructFromObject(data['CategoricalValues']);
            }
            if (data.hasOwnProperty('MultipleOperatingModes')) {
                obj['MultipleOperatingModes'] = SensorStatisticsSummaryMultipleOperatingModes.constructFromObject(data['MultipleOperatingModes']);
            }
            if (data.hasOwnProperty('LargeTimestampGaps')) {
                obj['LargeTimestampGaps'] = SensorStatisticsSummaryLargeTimestampGaps.constructFromObject(data['LargeTimestampGaps']);
            }
            if (data.hasOwnProperty('MonotonicValues')) {
                obj['MonotonicValues'] = SensorStatisticsSummaryMonotonicValues.constructFromObject(data['MonotonicValues']);
            }
            if (data.hasOwnProperty('DataStartTime')) {
                obj['DataStartTime'] = ApiClient.convertToType(data['DataStartTime'], 'Date');
            }
            if (data.hasOwnProperty('DataEndTime')) {
                obj['DataEndTime'] = ApiClient.convertToType(data['DataEndTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SensorStatisticsSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SensorStatisticsSummary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ComponentName`
        if (data['ComponentName']) { // data not null
          String.validateJSON(data['ComponentName']);
        }
        // validate the optional field `SensorName`
        if (data['SensorName']) { // data not null
          String.validateJSON(data['SensorName']);
        }
        // validate the optional field `DataExists`
        if (data['DataExists']) { // data not null
          Boolean.validateJSON(data['DataExists']);
        }
        // validate the optional field `MissingValues`
        if (data['MissingValues']) { // data not null
          SensorStatisticsSummaryMissingValues.validateJSON(data['MissingValues']);
        }
        // validate the optional field `InvalidValues`
        if (data['InvalidValues']) { // data not null
          SensorStatisticsSummaryInvalidValues.validateJSON(data['InvalidValues']);
        }
        // validate the optional field `InvalidDateEntries`
        if (data['InvalidDateEntries']) { // data not null
          SensorStatisticsSummaryInvalidDateEntries.validateJSON(data['InvalidDateEntries']);
        }
        // validate the optional field `DuplicateTimestamps`
        if (data['DuplicateTimestamps']) { // data not null
          SensorStatisticsSummaryDuplicateTimestamps.validateJSON(data['DuplicateTimestamps']);
        }
        // validate the optional field `CategoricalValues`
        if (data['CategoricalValues']) { // data not null
          SensorStatisticsSummaryCategoricalValues.validateJSON(data['CategoricalValues']);
        }
        // validate the optional field `MultipleOperatingModes`
        if (data['MultipleOperatingModes']) { // data not null
          SensorStatisticsSummaryMultipleOperatingModes.validateJSON(data['MultipleOperatingModes']);
        }
        // validate the optional field `LargeTimestampGaps`
        if (data['LargeTimestampGaps']) { // data not null
          SensorStatisticsSummaryLargeTimestampGaps.validateJSON(data['LargeTimestampGaps']);
        }
        // validate the optional field `MonotonicValues`
        if (data['MonotonicValues']) { // data not null
          SensorStatisticsSummaryMonotonicValues.validateJSON(data['MonotonicValues']);
        }
        // validate the optional field `DataStartTime`
        if (data['DataStartTime']) { // data not null
          Date.validateJSON(data['DataStartTime']);
        }
        // validate the optional field `DataEndTime`
        if (data['DataEndTime']) { // data not null
          Date.validateJSON(data['DataEndTime']);
        }

        return true;
    }


}



/**
 * @member {String} ComponentName
 */
SensorStatisticsSummary.prototype['ComponentName'] = undefined;

/**
 * @member {String} SensorName
 */
SensorStatisticsSummary.prototype['SensorName'] = undefined;

/**
 * @member {Boolean} DataExists
 */
SensorStatisticsSummary.prototype['DataExists'] = undefined;

/**
 * @member {module:model/SensorStatisticsSummaryMissingValues} MissingValues
 */
SensorStatisticsSummary.prototype['MissingValues'] = undefined;

/**
 * @member {module:model/SensorStatisticsSummaryInvalidValues} InvalidValues
 */
SensorStatisticsSummary.prototype['InvalidValues'] = undefined;

/**
 * @member {module:model/SensorStatisticsSummaryInvalidDateEntries} InvalidDateEntries
 */
SensorStatisticsSummary.prototype['InvalidDateEntries'] = undefined;

/**
 * @member {module:model/SensorStatisticsSummaryDuplicateTimestamps} DuplicateTimestamps
 */
SensorStatisticsSummary.prototype['DuplicateTimestamps'] = undefined;

/**
 * @member {module:model/SensorStatisticsSummaryCategoricalValues} CategoricalValues
 */
SensorStatisticsSummary.prototype['CategoricalValues'] = undefined;

/**
 * @member {module:model/SensorStatisticsSummaryMultipleOperatingModes} MultipleOperatingModes
 */
SensorStatisticsSummary.prototype['MultipleOperatingModes'] = undefined;

/**
 * @member {module:model/SensorStatisticsSummaryLargeTimestampGaps} LargeTimestampGaps
 */
SensorStatisticsSummary.prototype['LargeTimestampGaps'] = undefined;

/**
 * @member {module:model/SensorStatisticsSummaryMonotonicValues} MonotonicValues
 */
SensorStatisticsSummary.prototype['MonotonicValues'] = undefined;

/**
 * @member {Date} DataStartTime
 */
SensorStatisticsSummary.prototype['DataStartTime'] = undefined;

/**
 * @member {Date} DataEndTime
 */
SensorStatisticsSummary.prototype['DataEndTime'] = undefined;






export default SensorStatisticsSummary;

