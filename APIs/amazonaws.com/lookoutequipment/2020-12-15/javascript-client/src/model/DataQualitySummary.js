/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataQualitySummaryDuplicateTimestamps from './DataQualitySummaryDuplicateTimestamps';
import DataQualitySummaryInsufficientSensorData from './DataQualitySummaryInsufficientSensorData';
import DataQualitySummaryInvalidSensorData from './DataQualitySummaryInvalidSensorData';
import DataQualitySummaryMissingSensorData from './DataQualitySummaryMissingSensorData';
import DataQualitySummaryUnsupportedTimestamps from './DataQualitySummaryUnsupportedTimestamps';

/**
 * The DataQualitySummary model module.
 * @module model/DataQualitySummary
 * @version 2020-12-15
 */
class DataQualitySummary {
    /**
     * Constructs a new <code>DataQualitySummary</code>.
     *  DataQualitySummary gives aggregated statistics over all the sensors about a completed ingestion job. It primarily gives more information about statistics over different incorrect data like MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, DuplicateTimeStamps. 
     * @alias module:model/DataQualitySummary
     * @param insufficientSensorData {module:model/DataQualitySummaryInsufficientSensorData} 
     * @param missingSensorData {module:model/DataQualitySummaryMissingSensorData} 
     * @param invalidSensorData {module:model/DataQualitySummaryInvalidSensorData} 
     * @param unsupportedTimestamps {module:model/DataQualitySummaryUnsupportedTimestamps} 
     * @param duplicateTimestamps {module:model/DataQualitySummaryDuplicateTimestamps} 
     */
    constructor(insufficientSensorData, missingSensorData, invalidSensorData, unsupportedTimestamps, duplicateTimestamps) { 
        
        DataQualitySummary.initialize(this, insufficientSensorData, missingSensorData, invalidSensorData, unsupportedTimestamps, duplicateTimestamps);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, insufficientSensorData, missingSensorData, invalidSensorData, unsupportedTimestamps, duplicateTimestamps) { 
        obj['InsufficientSensorData'] = insufficientSensorData;
        obj['MissingSensorData'] = missingSensorData;
        obj['InvalidSensorData'] = invalidSensorData;
        obj['UnsupportedTimestamps'] = unsupportedTimestamps;
        obj['DuplicateTimestamps'] = duplicateTimestamps;
    }

    /**
     * Constructs a <code>DataQualitySummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataQualitySummary} obj Optional instance to populate.
     * @return {module:model/DataQualitySummary} The populated <code>DataQualitySummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataQualitySummary();

            if (data.hasOwnProperty('InsufficientSensorData')) {
                obj['InsufficientSensorData'] = DataQualitySummaryInsufficientSensorData.constructFromObject(data['InsufficientSensorData']);
            }
            if (data.hasOwnProperty('MissingSensorData')) {
                obj['MissingSensorData'] = DataQualitySummaryMissingSensorData.constructFromObject(data['MissingSensorData']);
            }
            if (data.hasOwnProperty('InvalidSensorData')) {
                obj['InvalidSensorData'] = DataQualitySummaryInvalidSensorData.constructFromObject(data['InvalidSensorData']);
            }
            if (data.hasOwnProperty('UnsupportedTimestamps')) {
                obj['UnsupportedTimestamps'] = DataQualitySummaryUnsupportedTimestamps.constructFromObject(data['UnsupportedTimestamps']);
            }
            if (data.hasOwnProperty('DuplicateTimestamps')) {
                obj['DuplicateTimestamps'] = DataQualitySummaryDuplicateTimestamps.constructFromObject(data['DuplicateTimestamps']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataQualitySummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataQualitySummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataQualitySummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `InsufficientSensorData`
        if (data['InsufficientSensorData']) { // data not null
          DataQualitySummaryInsufficientSensorData.validateJSON(data['InsufficientSensorData']);
        }
        // validate the optional field `MissingSensorData`
        if (data['MissingSensorData']) { // data not null
          DataQualitySummaryMissingSensorData.validateJSON(data['MissingSensorData']);
        }
        // validate the optional field `InvalidSensorData`
        if (data['InvalidSensorData']) { // data not null
          DataQualitySummaryInvalidSensorData.validateJSON(data['InvalidSensorData']);
        }
        // validate the optional field `UnsupportedTimestamps`
        if (data['UnsupportedTimestamps']) { // data not null
          DataQualitySummaryUnsupportedTimestamps.validateJSON(data['UnsupportedTimestamps']);
        }
        // validate the optional field `DuplicateTimestamps`
        if (data['DuplicateTimestamps']) { // data not null
          DataQualitySummaryDuplicateTimestamps.validateJSON(data['DuplicateTimestamps']);
        }

        return true;
    }


}

DataQualitySummary.RequiredProperties = ["InsufficientSensorData", "MissingSensorData", "InvalidSensorData", "UnsupportedTimestamps", "DuplicateTimestamps"];

/**
 * @member {module:model/DataQualitySummaryInsufficientSensorData} InsufficientSensorData
 */
DataQualitySummary.prototype['InsufficientSensorData'] = undefined;

/**
 * @member {module:model/DataQualitySummaryMissingSensorData} MissingSensorData
 */
DataQualitySummary.prototype['MissingSensorData'] = undefined;

/**
 * @member {module:model/DataQualitySummaryInvalidSensorData} InvalidSensorData
 */
DataQualitySummary.prototype['InvalidSensorData'] = undefined;

/**
 * @member {module:model/DataQualitySummaryUnsupportedTimestamps} UnsupportedTimestamps
 */
DataQualitySummary.prototype['UnsupportedTimestamps'] = undefined;

/**
 * @member {module:model/DataQualitySummaryDuplicateTimestamps} DuplicateTimestamps
 */
DataQualitySummary.prototype['DuplicateTimestamps'] = undefined;






export default DataQualitySummary;

