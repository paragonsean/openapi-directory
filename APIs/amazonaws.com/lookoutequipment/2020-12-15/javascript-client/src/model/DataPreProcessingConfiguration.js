/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TargetSamplingRate from './TargetSamplingRate';

/**
 * The DataPreProcessingConfiguration model module.
 * @module model/DataPreProcessingConfiguration
 * @version 2020-12-15
 */
class DataPreProcessingConfiguration {
    /**
     * Constructs a new <code>DataPreProcessingConfiguration</code>.
     * &lt;p&gt;The configuration is the &lt;code&gt;TargetSamplingRate&lt;/code&gt;, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the &lt;code&gt;TargetSamplingRate&lt;/code&gt; is 1 minute.&lt;/p&gt; &lt;p&gt;When providing a value for the &lt;code&gt;TargetSamplingRate&lt;/code&gt;, you must attach the prefix \&quot;PT\&quot; to the rate you want. The value for a 1 second rate is therefore &lt;i&gt;PT1S&lt;/i&gt;, the value for a 15 minute rate is &lt;i&gt;PT15M&lt;/i&gt;, and the value for a 1 hour rate is &lt;i&gt;PT1H&lt;/i&gt; &lt;/p&gt;
     * @alias module:model/DataPreProcessingConfiguration
     */
    constructor() { 
        
        DataPreProcessingConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataPreProcessingConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataPreProcessingConfiguration} obj Optional instance to populate.
     * @return {module:model/DataPreProcessingConfiguration} The populated <code>DataPreProcessingConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataPreProcessingConfiguration();

            if (data.hasOwnProperty('TargetSamplingRate')) {
                obj['TargetSamplingRate'] = ApiClient.convertToType(data['TargetSamplingRate'], TargetSamplingRate);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataPreProcessingConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataPreProcessingConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `TargetSamplingRate`
        if (data['TargetSamplingRate']) { // data not null
          TargetSamplingRate.validateJSON(data['TargetSamplingRate']);
        }

        return true;
    }


}



/**
 * @member {module:model/TargetSamplingRate} TargetSamplingRate
 */
DataPreProcessingConfiguration.prototype['TargetSamplingRate'] = undefined;






export default DataPreProcessingConfiguration;

