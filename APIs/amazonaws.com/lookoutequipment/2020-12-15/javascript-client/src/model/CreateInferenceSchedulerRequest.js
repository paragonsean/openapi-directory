/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateInferenceSchedulerRequestDataInputConfiguration from './CreateInferenceSchedulerRequestDataInputConfiguration';
import CreateInferenceSchedulerRequestDataOutputConfiguration from './CreateInferenceSchedulerRequestDataOutputConfiguration';
import DataUploadFrequency from './DataUploadFrequency';

/**
 * The CreateInferenceSchedulerRequest model module.
 * @module model/CreateInferenceSchedulerRequest
 * @version 2020-12-15
 */
class CreateInferenceSchedulerRequest {
    /**
     * Constructs a new <code>CreateInferenceSchedulerRequest</code>.
     * @alias module:model/CreateInferenceSchedulerRequest
     * @param modelName {String} 
     * @param inferenceSchedulerName {String} 
     * @param dataUploadFrequency {module:model/DataUploadFrequency} 
     * @param dataInputConfiguration {module:model/CreateInferenceSchedulerRequestDataInputConfiguration} 
     * @param dataOutputConfiguration {module:model/CreateInferenceSchedulerRequestDataOutputConfiguration} 
     * @param roleArn {String} 
     * @param clientToken {String} 
     */
    constructor(modelName, inferenceSchedulerName, dataUploadFrequency, dataInputConfiguration, dataOutputConfiguration, roleArn, clientToken) { 
        
        CreateInferenceSchedulerRequest.initialize(this, modelName, inferenceSchedulerName, dataUploadFrequency, dataInputConfiguration, dataOutputConfiguration, roleArn, clientToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modelName, inferenceSchedulerName, dataUploadFrequency, dataInputConfiguration, dataOutputConfiguration, roleArn, clientToken) { 
        obj['ModelName'] = modelName;
        obj['InferenceSchedulerName'] = inferenceSchedulerName;
        obj['DataUploadFrequency'] = dataUploadFrequency;
        obj['DataInputConfiguration'] = dataInputConfiguration;
        obj['DataOutputConfiguration'] = dataOutputConfiguration;
        obj['RoleArn'] = roleArn;
        obj['ClientToken'] = clientToken;
    }

    /**
     * Constructs a <code>CreateInferenceSchedulerRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateInferenceSchedulerRequest} obj Optional instance to populate.
     * @return {module:model/CreateInferenceSchedulerRequest} The populated <code>CreateInferenceSchedulerRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateInferenceSchedulerRequest();

            if (data.hasOwnProperty('ModelName')) {
                obj['ModelName'] = ApiClient.convertToType(data['ModelName'], 'String');
            }
            if (data.hasOwnProperty('InferenceSchedulerName')) {
                obj['InferenceSchedulerName'] = ApiClient.convertToType(data['InferenceSchedulerName'], 'String');
            }
            if (data.hasOwnProperty('DataDelayOffsetInMinutes')) {
                obj['DataDelayOffsetInMinutes'] = ApiClient.convertToType(data['DataDelayOffsetInMinutes'], 'Number');
            }
            if (data.hasOwnProperty('DataUploadFrequency')) {
                obj['DataUploadFrequency'] = ApiClient.convertToType(data['DataUploadFrequency'], DataUploadFrequency);
            }
            if (data.hasOwnProperty('DataInputConfiguration')) {
                obj['DataInputConfiguration'] = CreateInferenceSchedulerRequestDataInputConfiguration.constructFromObject(data['DataInputConfiguration']);
            }
            if (data.hasOwnProperty('DataOutputConfiguration')) {
                obj['DataOutputConfiguration'] = CreateInferenceSchedulerRequestDataOutputConfiguration.constructFromObject(data['DataOutputConfiguration']);
            }
            if (data.hasOwnProperty('RoleArn')) {
                obj['RoleArn'] = ApiClient.convertToType(data['RoleArn'], 'String');
            }
            if (data.hasOwnProperty('ServerSideKmsKeyId')) {
                obj['ServerSideKmsKeyId'] = ApiClient.convertToType(data['ServerSideKmsKeyId'], 'String');
            }
            if (data.hasOwnProperty('ClientToken')) {
                obj['ClientToken'] = ApiClient.convertToType(data['ClientToken'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateInferenceSchedulerRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateInferenceSchedulerRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateInferenceSchedulerRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ModelName`
        if (data['ModelName']) { // data not null
          String.validateJSON(data['ModelName']);
        }
        // validate the optional field `InferenceSchedulerName`
        if (data['InferenceSchedulerName']) { // data not null
          String.validateJSON(data['InferenceSchedulerName']);
        }
        // validate the optional field `DataDelayOffsetInMinutes`
        if (data['DataDelayOffsetInMinutes']) { // data not null
          Number.validateJSON(data['DataDelayOffsetInMinutes']);
        }
        // validate the optional field `DataUploadFrequency`
        if (data['DataUploadFrequency']) { // data not null
          DataUploadFrequency.validateJSON(data['DataUploadFrequency']);
        }
        // validate the optional field `DataInputConfiguration`
        if (data['DataInputConfiguration']) { // data not null
          CreateInferenceSchedulerRequestDataInputConfiguration.validateJSON(data['DataInputConfiguration']);
        }
        // validate the optional field `DataOutputConfiguration`
        if (data['DataOutputConfiguration']) { // data not null
          CreateInferenceSchedulerRequestDataOutputConfiguration.validateJSON(data['DataOutputConfiguration']);
        }
        // validate the optional field `RoleArn`
        if (data['RoleArn']) { // data not null
          String.validateJSON(data['RoleArn']);
        }
        // validate the optional field `ServerSideKmsKeyId`
        if (data['ServerSideKmsKeyId']) { // data not null
          String.validateJSON(data['ServerSideKmsKeyId']);
        }
        // validate the optional field `ClientToken`
        if (data['ClientToken']) { // data not null
          String.validateJSON(data['ClientToken']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Array.validateJSON(data['Tags']);
        }

        return true;
    }


}

CreateInferenceSchedulerRequest.RequiredProperties = ["ModelName", "InferenceSchedulerName", "DataUploadFrequency", "DataInputConfiguration", "DataOutputConfiguration", "RoleArn", "ClientToken"];

/**
 * @member {String} ModelName
 */
CreateInferenceSchedulerRequest.prototype['ModelName'] = undefined;

/**
 * @member {String} InferenceSchedulerName
 */
CreateInferenceSchedulerRequest.prototype['InferenceSchedulerName'] = undefined;

/**
 * @member {Number} DataDelayOffsetInMinutes
 */
CreateInferenceSchedulerRequest.prototype['DataDelayOffsetInMinutes'] = undefined;

/**
 * @member {module:model/DataUploadFrequency} DataUploadFrequency
 */
CreateInferenceSchedulerRequest.prototype['DataUploadFrequency'] = undefined;

/**
 * @member {module:model/CreateInferenceSchedulerRequestDataInputConfiguration} DataInputConfiguration
 */
CreateInferenceSchedulerRequest.prototype['DataInputConfiguration'] = undefined;

/**
 * @member {module:model/CreateInferenceSchedulerRequestDataOutputConfiguration} DataOutputConfiguration
 */
CreateInferenceSchedulerRequest.prototype['DataOutputConfiguration'] = undefined;

/**
 * @member {String} RoleArn
 */
CreateInferenceSchedulerRequest.prototype['RoleArn'] = undefined;

/**
 * @member {String} ServerSideKmsKeyId
 */
CreateInferenceSchedulerRequest.prototype['ServerSideKmsKeyId'] = undefined;

/**
 * @member {String} ClientToken
 */
CreateInferenceSchedulerRequest.prototype['ClientToken'] = undefined;

/**
 * @member {Array} Tags
 */
CreateInferenceSchedulerRequest.prototype['Tags'] = undefined;






export default CreateInferenceSchedulerRequest;

