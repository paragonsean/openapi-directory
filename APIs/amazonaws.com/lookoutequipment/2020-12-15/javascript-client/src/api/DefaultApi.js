/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDatasetRequest from '../model/CreateDatasetRequest';
import CreateDatasetResponse from '../model/CreateDatasetResponse';
import CreateInferenceSchedulerRequest from '../model/CreateInferenceSchedulerRequest';
import CreateInferenceSchedulerResponse from '../model/CreateInferenceSchedulerResponse';
import CreateLabelGroupRequest from '../model/CreateLabelGroupRequest';
import CreateLabelGroupResponse from '../model/CreateLabelGroupResponse';
import CreateLabelRequest from '../model/CreateLabelRequest';
import CreateLabelResponse from '../model/CreateLabelResponse';
import CreateModelRequest from '../model/CreateModelRequest';
import CreateModelResponse from '../model/CreateModelResponse';
import DeleteDatasetRequest from '../model/DeleteDatasetRequest';
import DeleteInferenceSchedulerRequest from '../model/DeleteInferenceSchedulerRequest';
import DeleteLabelGroupRequest from '../model/DeleteLabelGroupRequest';
import DeleteLabelRequest from '../model/DeleteLabelRequest';
import DeleteModelRequest from '../model/DeleteModelRequest';
import DeleteResourcePolicyRequest from '../model/DeleteResourcePolicyRequest';
import DescribeDataIngestionJobRequest from '../model/DescribeDataIngestionJobRequest';
import DescribeDataIngestionJobResponse from '../model/DescribeDataIngestionJobResponse';
import DescribeDatasetRequest from '../model/DescribeDatasetRequest';
import DescribeDatasetResponse from '../model/DescribeDatasetResponse';
import DescribeInferenceSchedulerRequest from '../model/DescribeInferenceSchedulerRequest';
import DescribeInferenceSchedulerResponse from '../model/DescribeInferenceSchedulerResponse';
import DescribeLabelGroupRequest from '../model/DescribeLabelGroupRequest';
import DescribeLabelGroupResponse from '../model/DescribeLabelGroupResponse';
import DescribeLabelRequest from '../model/DescribeLabelRequest';
import DescribeLabelResponse from '../model/DescribeLabelResponse';
import DescribeModelRequest from '../model/DescribeModelRequest';
import DescribeModelResponse from '../model/DescribeModelResponse';
import DescribeModelVersionRequest from '../model/DescribeModelVersionRequest';
import DescribeModelVersionResponse from '../model/DescribeModelVersionResponse';
import DescribeResourcePolicyRequest from '../model/DescribeResourcePolicyRequest';
import DescribeResourcePolicyResponse from '../model/DescribeResourcePolicyResponse';
import ImportDatasetRequest from '../model/ImportDatasetRequest';
import ImportDatasetResponse from '../model/ImportDatasetResponse';
import ImportModelVersionRequest from '../model/ImportModelVersionRequest';
import ImportModelVersionResponse from '../model/ImportModelVersionResponse';
import ListDataIngestionJobsRequest from '../model/ListDataIngestionJobsRequest';
import ListDataIngestionJobsResponse from '../model/ListDataIngestionJobsResponse';
import ListDatasetsRequest from '../model/ListDatasetsRequest';
import ListDatasetsResponse from '../model/ListDatasetsResponse';
import ListInferenceEventsRequest from '../model/ListInferenceEventsRequest';
import ListInferenceEventsResponse from '../model/ListInferenceEventsResponse';
import ListInferenceExecutionsRequest from '../model/ListInferenceExecutionsRequest';
import ListInferenceExecutionsResponse from '../model/ListInferenceExecutionsResponse';
import ListInferenceSchedulersRequest from '../model/ListInferenceSchedulersRequest';
import ListInferenceSchedulersResponse from '../model/ListInferenceSchedulersResponse';
import ListLabelGroupsRequest from '../model/ListLabelGroupsRequest';
import ListLabelGroupsResponse from '../model/ListLabelGroupsResponse';
import ListLabelsRequest from '../model/ListLabelsRequest';
import ListLabelsResponse from '../model/ListLabelsResponse';
import ListModelVersionsRequest from '../model/ListModelVersionsRequest';
import ListModelVersionsResponse from '../model/ListModelVersionsResponse';
import ListModelsRequest from '../model/ListModelsRequest';
import ListModelsResponse from '../model/ListModelsResponse';
import ListSensorStatisticsRequest from '../model/ListSensorStatisticsRequest';
import ListSensorStatisticsResponse from '../model/ListSensorStatisticsResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutResourcePolicyRequest from '../model/PutResourcePolicyRequest';
import PutResourcePolicyResponse from '../model/PutResourcePolicyResponse';
import StartDataIngestionJobRequest from '../model/StartDataIngestionJobRequest';
import StartDataIngestionJobResponse from '../model/StartDataIngestionJobResponse';
import StartInferenceSchedulerRequest from '../model/StartInferenceSchedulerRequest';
import StartInferenceSchedulerResponse from '../model/StartInferenceSchedulerResponse';
import StopInferenceSchedulerRequest from '../model/StopInferenceSchedulerRequest';
import StopInferenceSchedulerResponse from '../model/StopInferenceSchedulerResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateActiveModelVersionRequest from '../model/UpdateActiveModelVersionRequest';
import UpdateActiveModelVersionResponse from '../model/UpdateActiveModelVersionResponse';
import UpdateInferenceSchedulerRequest from '../model/UpdateInferenceSchedulerRequest';
import UpdateLabelGroupRequest from '../model/UpdateLabelGroupRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-12-15
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDataset operation.
     * @callback module:api/DefaultApi~createDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDatasetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a container for a collection of data being ingested for analysis. The dataset contains the metadata describing where the data is and what the data actually looks like. For example, it contains the location of the data source, the data schema, and other information. A dataset also contains any tags associated with the ingested data. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDatasetRequest} createDatasetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDatasetResponse}
     */
    createDataset(xAmzTarget, createDatasetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDatasetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDataset");
      }
      // verify the required parameter 'createDatasetRequest' is set
      if (createDatasetRequest === undefined || createDatasetRequest === null) {
        throw new Error("Missing the required parameter 'createDatasetRequest' when calling createDataset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDatasetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.CreateDataset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInferenceScheduler operation.
     * @callback module:api/DefaultApi~createInferenceSchedulerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInferenceSchedulerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Creates a scheduled inference. Scheduling an inference is setting up a continuous real-time inference plan to analyze new measurement data. When setting up the schedule, you provide an S3 bucket location for the input data, assign it a delimiter between separate entries in the data, set an offset delay if desired, and set the frequency of inferencing. You must also provide an S3 bucket location for the output data. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateInferenceSchedulerRequest} createInferenceSchedulerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createInferenceSchedulerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInferenceSchedulerResponse}
     */
    createInferenceScheduler(xAmzTarget, createInferenceSchedulerRequest, opts, callback) {
      opts = opts || {};
      let postBody = createInferenceSchedulerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createInferenceScheduler");
      }
      // verify the required parameter 'createInferenceSchedulerRequest' is set
      if (createInferenceSchedulerRequest === undefined || createInferenceSchedulerRequest === null) {
        throw new Error("Missing the required parameter 'createInferenceSchedulerRequest' when calling createInferenceScheduler");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateInferenceSchedulerResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.CreateInferenceScheduler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLabel operation.
     * @callback module:api/DefaultApi~createLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Creates a label for an event. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLabelRequest} createLabelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLabelResponse}
     */
    createLabel(xAmzTarget, createLabelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLabelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLabel");
      }
      // verify the required parameter 'createLabelRequest' is set
      if (createLabelRequest === undefined || createLabelRequest === null) {
        throw new Error("Missing the required parameter 'createLabelRequest' when calling createLabel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLabelResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.CreateLabel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLabelGroup operation.
     * @callback module:api/DefaultApi~createLabelGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLabelGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Creates a group of labels. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLabelGroupRequest} createLabelGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLabelGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLabelGroupResponse}
     */
    createLabelGroup(xAmzTarget, createLabelGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLabelGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLabelGroup");
      }
      // verify the required parameter 'createLabelGroupRequest' is set
      if (createLabelGroupRequest === undefined || createLabelGroupRequest === null) {
        throw new Error("Missing the required parameter 'createLabelGroupRequest' when calling createLabelGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLabelGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.CreateLabelGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModel operation.
     * @callback module:api/DefaultApi~createModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an ML model for data inference. </p> <p>A machine-learning (ML) model is a mathematical model that finds patterns in your data. In Amazon Lookout for Equipment, the model learns the patterns of normal behavior and detects abnormal behavior that could be potential equipment failure (or maintenance events). The models are made by analyzing normal data and abnormalities in machine behavior that have already occurred.</p> <p>Your model is trained using a portion of the data from your dataset and uses that data to learn patterns of normal behavior and abnormal patterns that lead to equipment failure. Another portion of the data is used to evaluate the model's accuracy. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateModelRequest} createModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelResponse}
     */
    createModel(xAmzTarget, createModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createModelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createModel");
      }
      // verify the required parameter 'createModelRequest' is set
      if (createModelRequest === undefined || createModelRequest === null) {
        throw new Error("Missing the required parameter 'createModelRequest' when calling createModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateModelResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.CreateModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataset operation.
     * @callback module:api/DefaultApi~deleteDatasetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Deletes a dataset and associated artifacts. The operation will check to see if any inference scheduler or data ingestion job is currently using the dataset, and if there isn't, the dataset, its metadata, and any associated data stored in S3 will be deleted. This does not affect any models that used this dataset for training and evaluation, but does prevent it from being used in the future. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDatasetRequest} deleteDatasetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDataset(xAmzTarget, deleteDatasetRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDatasetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDataset");
      }
      // verify the required parameter 'deleteDatasetRequest' is set
      if (deleteDatasetRequest === undefined || deleteDatasetRequest === null) {
        throw new Error("Missing the required parameter 'deleteDatasetRequest' when calling deleteDataset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DeleteDataset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInferenceScheduler operation.
     * @callback module:api/DefaultApi~deleteInferenceSchedulerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an inference scheduler that has been set up. Already processed output results are not affected. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteInferenceSchedulerRequest} deleteInferenceSchedulerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteInferenceSchedulerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInferenceScheduler(xAmzTarget, deleteInferenceSchedulerRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteInferenceSchedulerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteInferenceScheduler");
      }
      // verify the required parameter 'deleteInferenceSchedulerRequest' is set
      if (deleteInferenceSchedulerRequest === undefined || deleteInferenceSchedulerRequest === null) {
        throw new Error("Missing the required parameter 'deleteInferenceSchedulerRequest' when calling deleteInferenceScheduler");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DeleteInferenceScheduler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLabel operation.
     * @callback module:api/DefaultApi~deleteLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Deletes a label. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteLabelRequest} deleteLabelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLabel(xAmzTarget, deleteLabelRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteLabelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteLabel");
      }
      // verify the required parameter 'deleteLabelRequest' is set
      if (deleteLabelRequest === undefined || deleteLabelRequest === null) {
        throw new Error("Missing the required parameter 'deleteLabelRequest' when calling deleteLabel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DeleteLabel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLabelGroup operation.
     * @callback module:api/DefaultApi~deleteLabelGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Deletes a group of labels. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteLabelGroupRequest} deleteLabelGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLabelGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLabelGroup(xAmzTarget, deleteLabelGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteLabelGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteLabelGroup");
      }
      // verify the required parameter 'deleteLabelGroupRequest' is set
      if (deleteLabelGroupRequest === undefined || deleteLabelGroupRequest === null) {
        throw new Error("Missing the required parameter 'deleteLabelGroupRequest' when calling deleteLabelGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DeleteLabelGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModel operation.
     * @callback module:api/DefaultApi~deleteModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an ML model currently available for Amazon Lookout for Equipment. This will prevent it from being used with an inference scheduler, even one that is already set up. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteModelRequest} deleteModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteModel(xAmzTarget, deleteModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteModelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteModel");
      }
      // verify the required parameter 'deleteModelRequest' is set
      if (deleteModelRequest === undefined || deleteModelRequest === null) {
        throw new Error("Missing the required parameter 'deleteModelRequest' when calling deleteModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DeleteModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourcePolicy operation.
     * @callback module:api/DefaultApi~deleteResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the resource policy attached to the resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteResourcePolicyRequest} deleteResourcePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteResourcePolicy(xAmzTarget, deleteResourcePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteResourcePolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteResourcePolicy");
      }
      // verify the required parameter 'deleteResourcePolicyRequest' is set
      if (deleteResourcePolicyRequest === undefined || deleteResourcePolicyRequest === null) {
        throw new Error("Missing the required parameter 'deleteResourcePolicyRequest' when calling deleteResourcePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DeleteResourcePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDataIngestionJob operation.
     * @callback module:api/DefaultApi~describeDataIngestionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDataIngestionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information on a specific data ingestion job such as creation time, dataset ARN, and status.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDataIngestionJobRequest} describeDataIngestionJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDataIngestionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDataIngestionJobResponse}
     */
    describeDataIngestionJob(xAmzTarget, describeDataIngestionJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDataIngestionJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDataIngestionJob");
      }
      // verify the required parameter 'describeDataIngestionJobRequest' is set
      if (describeDataIngestionJobRequest === undefined || describeDataIngestionJobRequest === null) {
        throw new Error("Missing the required parameter 'describeDataIngestionJobRequest' when calling describeDataIngestionJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDataIngestionJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DescribeDataIngestionJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDataset operation.
     * @callback module:api/DefaultApi~describeDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDatasetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a JSON description of the data in each time series dataset, including names, column names, and data types.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDatasetRequest} describeDatasetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDatasetResponse}
     */
    describeDataset(xAmzTarget, describeDatasetRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDatasetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDataset");
      }
      // verify the required parameter 'describeDatasetRequest' is set
      if (describeDatasetRequest === undefined || describeDatasetRequest === null) {
        throw new Error("Missing the required parameter 'describeDatasetRequest' when calling describeDataset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDatasetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DescribeDataset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInferenceScheduler operation.
     * @callback module:api/DefaultApi~describeInferenceSchedulerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInferenceSchedulerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Specifies information about the inference scheduler being used, including name, model, status, and associated metadata 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeInferenceSchedulerRequest} describeInferenceSchedulerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeInferenceSchedulerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInferenceSchedulerResponse}
     */
    describeInferenceScheduler(xAmzTarget, describeInferenceSchedulerRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeInferenceSchedulerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeInferenceScheduler");
      }
      // verify the required parameter 'describeInferenceSchedulerRequest' is set
      if (describeInferenceSchedulerRequest === undefined || describeInferenceSchedulerRequest === null) {
        throw new Error("Missing the required parameter 'describeInferenceSchedulerRequest' when calling describeInferenceScheduler");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeInferenceSchedulerResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DescribeInferenceScheduler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLabel operation.
     * @callback module:api/DefaultApi~describeLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns the name of the label. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLabelRequest} describeLabelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLabelResponse}
     */
    describeLabel(xAmzTarget, describeLabelRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLabelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLabel");
      }
      // verify the required parameter 'describeLabelRequest' is set
      if (describeLabelRequest === undefined || describeLabelRequest === null) {
        throw new Error("Missing the required parameter 'describeLabelRequest' when calling describeLabel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLabelResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DescribeLabel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLabelGroup operation.
     * @callback module:api/DefaultApi~describeLabelGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLabelGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns information about the label group. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLabelGroupRequest} describeLabelGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLabelGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLabelGroupResponse}
     */
    describeLabelGroup(xAmzTarget, describeLabelGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLabelGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLabelGroup");
      }
      // verify the required parameter 'describeLabelGroupRequest' is set
      if (describeLabelGroupRequest === undefined || describeLabelGroupRequest === null) {
        throw new Error("Missing the required parameter 'describeLabelGroupRequest' when calling describeLabelGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLabelGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DescribeLabelGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeModel operation.
     * @callback module:api/DefaultApi~describeModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a JSON containing the overall information about a specific ML model, including model name and ARN, dataset, training and evaluation information, status, and so on. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeModelRequest} describeModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeModelResponse}
     */
    describeModel(xAmzTarget, describeModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeModelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeModel");
      }
      // verify the required parameter 'describeModelRequest' is set
      if (describeModelRequest === undefined || describeModelRequest === null) {
        throw new Error("Missing the required parameter 'describeModelRequest' when calling describeModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeModelResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DescribeModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeModelVersion operation.
     * @callback module:api/DefaultApi~describeModelVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeModelVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about a specific machine learning model version.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeModelVersionRequest} describeModelVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeModelVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeModelVersionResponse}
     */
    describeModelVersion(xAmzTarget, describeModelVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeModelVersionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeModelVersion");
      }
      // verify the required parameter 'describeModelVersionRequest' is set
      if (describeModelVersionRequest === undefined || describeModelVersionRequest === null) {
        throw new Error("Missing the required parameter 'describeModelVersionRequest' when calling describeModelVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeModelVersionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DescribeModelVersion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeResourcePolicy operation.
     * @callback module:api/DefaultApi~describeResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeResourcePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides the details of a resource policy attached to a resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeResourcePolicyRequest} describeResourcePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeResourcePolicyResponse}
     */
    describeResourcePolicy(xAmzTarget, describeResourcePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeResourcePolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeResourcePolicy");
      }
      // verify the required parameter 'describeResourcePolicyRequest' is set
      if (describeResourcePolicyRequest === undefined || describeResourcePolicyRequest === null) {
        throw new Error("Missing the required parameter 'describeResourcePolicyRequest' when calling describeResourcePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeResourcePolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.DescribeResourcePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importDataset operation.
     * @callback module:api/DefaultApi~importDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportDatasetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports a dataset.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportDatasetRequest} importDatasetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportDatasetResponse}
     */
    importDataset(xAmzTarget, importDatasetRequest, opts, callback) {
      opts = opts || {};
      let postBody = importDatasetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importDataset");
      }
      // verify the required parameter 'importDatasetRequest' is set
      if (importDatasetRequest === undefined || importDatasetRequest === null) {
        throw new Error("Missing the required parameter 'importDatasetRequest' when calling importDataset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportDatasetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ImportDataset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importModelVersion operation.
     * @callback module:api/DefaultApi~importModelVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportModelVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports a model that has been trained successfully.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportModelVersionRequest} importModelVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importModelVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportModelVersionResponse}
     */
    importModelVersion(xAmzTarget, importModelVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = importModelVersionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importModelVersion");
      }
      // verify the required parameter 'importModelVersionRequest' is set
      if (importModelVersionRequest === undefined || importModelVersionRequest === null) {
        throw new Error("Missing the required parameter 'importModelVersionRequest' when calling importModelVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportModelVersionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ImportModelVersion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataIngestionJobs operation.
     * @callback module:api/DefaultApi~listDataIngestionJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDataIngestionJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of all data ingestion jobs, including dataset name and ARN, S3 location of the input data, status, and so on. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDataIngestionJobsRequest} listDataIngestionJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDataIngestionJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDataIngestionJobsResponse}
     */
    listDataIngestionJobs(xAmzTarget, listDataIngestionJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDataIngestionJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDataIngestionJobs");
      }
      // verify the required parameter 'listDataIngestionJobsRequest' is set
      if (listDataIngestionJobsRequest === undefined || listDataIngestionJobsRequest === null) {
        throw new Error("Missing the required parameter 'listDataIngestionJobsRequest' when calling listDataIngestionJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDataIngestionJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ListDataIngestionJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDatasets operation.
     * @callback module:api/DefaultApi~listDatasetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDatasetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all datasets currently available in your account, filtering on the dataset name. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDatasetsRequest} listDatasetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDatasetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDatasetsResponse}
     */
    listDatasets(xAmzTarget, listDatasetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDatasetsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDatasets");
      }
      // verify the required parameter 'listDatasetsRequest' is set
      if (listDatasetsRequest === undefined || listDatasetsRequest === null) {
        throw new Error("Missing the required parameter 'listDatasetsRequest' when calling listDatasets");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDatasetsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ListDatasets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInferenceEvents operation.
     * @callback module:api/DefaultApi~listInferenceEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInferenceEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Lists all inference events that have been found for the specified inference scheduler. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListInferenceEventsRequest} listInferenceEventsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listInferenceEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInferenceEventsResponse}
     */
    listInferenceEvents(xAmzTarget, listInferenceEventsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listInferenceEventsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listInferenceEvents");
      }
      // verify the required parameter 'listInferenceEventsRequest' is set
      if (listInferenceEventsRequest === undefined || listInferenceEventsRequest === null) {
        throw new Error("Missing the required parameter 'listInferenceEventsRequest' when calling listInferenceEvents");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListInferenceEventsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ListInferenceEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInferenceExecutions operation.
     * @callback module:api/DefaultApi~listInferenceExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInferenceExecutionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Lists all inference executions that have been performed by the specified inference scheduler. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListInferenceExecutionsRequest} listInferenceExecutionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listInferenceExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInferenceExecutionsResponse}
     */
    listInferenceExecutions(xAmzTarget, listInferenceExecutionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listInferenceExecutionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listInferenceExecutions");
      }
      // verify the required parameter 'listInferenceExecutionsRequest' is set
      if (listInferenceExecutionsRequest === undefined || listInferenceExecutionsRequest === null) {
        throw new Error("Missing the required parameter 'listInferenceExecutionsRequest' when calling listInferenceExecutions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListInferenceExecutionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ListInferenceExecutions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInferenceSchedulers operation.
     * @callback module:api/DefaultApi~listInferenceSchedulersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInferenceSchedulersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of all inference schedulers currently available for your account. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListInferenceSchedulersRequest} listInferenceSchedulersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listInferenceSchedulersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInferenceSchedulersResponse}
     */
    listInferenceSchedulers(xAmzTarget, listInferenceSchedulersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listInferenceSchedulersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listInferenceSchedulers");
      }
      // verify the required parameter 'listInferenceSchedulersRequest' is set
      if (listInferenceSchedulersRequest === undefined || listInferenceSchedulersRequest === null) {
        throw new Error("Missing the required parameter 'listInferenceSchedulersRequest' when calling listInferenceSchedulers");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListInferenceSchedulersResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ListInferenceSchedulers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLabelGroups operation.
     * @callback module:api/DefaultApi~listLabelGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLabelGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of the label groups. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLabelGroupsRequest} listLabelGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listLabelGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLabelGroupsResponse}
     */
    listLabelGroups(xAmzTarget, listLabelGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLabelGroupsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLabelGroups");
      }
      // verify the required parameter 'listLabelGroupsRequest' is set
      if (listLabelGroupsRequest === undefined || listLabelGroupsRequest === null) {
        throw new Error("Missing the required parameter 'listLabelGroupsRequest' when calling listLabelGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLabelGroupsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ListLabelGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLabels operation.
     * @callback module:api/DefaultApi~listLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLabelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Provides a list of labels. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLabelsRequest} listLabelsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLabelsResponse}
     */
    listLabels(xAmzTarget, listLabelsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLabelsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLabels");
      }
      // verify the required parameter 'listLabelsRequest' is set
      if (listLabelsRequest === undefined || listLabelsRequest === null) {
        throw new Error("Missing the required parameter 'listLabelsRequest' when calling listLabels");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLabelsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ListLabels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModelVersions operation.
     * @callback module:api/DefaultApi~listModelVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a list of all model versions for a given model, including the model version, model version ARN, and status. To list a subset of versions, use the <code>MaxModelVersion</code> and <code>MinModelVersion</code> fields.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListModelVersionsRequest} listModelVersionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listModelVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelVersionsResponse}
     */
    listModelVersions(xAmzTarget, listModelVersionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listModelVersionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listModelVersions");
      }
      // verify the required parameter 'listModelVersionsRequest' is set
      if (listModelVersionsRequest === undefined || listModelVersionsRequest === null) {
        throw new Error("Missing the required parameter 'listModelVersionsRequest' when calling listModelVersions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListModelVersionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ListModelVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModels operation.
     * @callback module:api/DefaultApi~listModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a list of all models in the account, including model name and ARN, dataset, and status. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListModelsRequest} listModelsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelsResponse}
     */
    listModels(xAmzTarget, listModelsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listModelsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listModels");
      }
      // verify the required parameter 'listModelsRequest' is set
      if (listModelsRequest === undefined || listModelsRequest === null) {
        throw new Error("Missing the required parameter 'listModelsRequest' when calling listModels");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListModelsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ListModels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSensorStatistics operation.
     * @callback module:api/DefaultApi~listSensorStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSensorStatisticsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Lists statistics about the data collected for each of the sensors that have been successfully ingested in the particular dataset. Can also be used to retreive Sensor Statistics for a previous ingestion job. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSensorStatisticsRequest} listSensorStatisticsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSensorStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSensorStatisticsResponse}
     */
    listSensorStatistics(xAmzTarget, listSensorStatisticsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSensorStatisticsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSensorStatistics");
      }
      // verify the required parameter 'listSensorStatisticsRequest' is set
      if (listSensorStatisticsRequest === undefined || listSensorStatisticsRequest === null) {
        throw new Error("Missing the required parameter 'listSensorStatisticsRequest' when calling listSensorStatistics");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSensorStatisticsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ListSensorStatistics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the tags for a specified resource, including key and value. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putResourcePolicy operation.
     * @callback module:api/DefaultApi~putResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutResourcePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a resource control policy for a given resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutResourcePolicyRequest} putResourcePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutResourcePolicyResponse}
     */
    putResourcePolicy(xAmzTarget, putResourcePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putResourcePolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putResourcePolicy");
      }
      // verify the required parameter 'putResourcePolicyRequest' is set
      if (putResourcePolicyRequest === undefined || putResourcePolicyRequest === null) {
        throw new Error("Missing the required parameter 'putResourcePolicyRequest' when calling putResourcePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutResourcePolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.PutResourcePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startDataIngestionJob operation.
     * @callback module:api/DefaultApi~startDataIngestionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartDataIngestionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a data ingestion job. Amazon Lookout for Equipment returns the job status. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartDataIngestionJobRequest} startDataIngestionJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startDataIngestionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartDataIngestionJobResponse}
     */
    startDataIngestionJob(xAmzTarget, startDataIngestionJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startDataIngestionJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startDataIngestionJob");
      }
      // verify the required parameter 'startDataIngestionJobRequest' is set
      if (startDataIngestionJobRequest === undefined || startDataIngestionJobRequest === null) {
        throw new Error("Missing the required parameter 'startDataIngestionJobRequest' when calling startDataIngestionJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartDataIngestionJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.StartDataIngestionJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startInferenceScheduler operation.
     * @callback module:api/DefaultApi~startInferenceSchedulerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartInferenceSchedulerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an inference scheduler. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartInferenceSchedulerRequest} startInferenceSchedulerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startInferenceSchedulerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartInferenceSchedulerResponse}
     */
    startInferenceScheduler(xAmzTarget, startInferenceSchedulerRequest, opts, callback) {
      opts = opts || {};
      let postBody = startInferenceSchedulerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startInferenceScheduler");
      }
      // verify the required parameter 'startInferenceSchedulerRequest' is set
      if (startInferenceSchedulerRequest === undefined || startInferenceSchedulerRequest === null) {
        throw new Error("Missing the required parameter 'startInferenceSchedulerRequest' when calling startInferenceScheduler");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartInferenceSchedulerResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.StartInferenceScheduler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopInferenceScheduler operation.
     * @callback module:api/DefaultApi~stopInferenceSchedulerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopInferenceSchedulerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an inference scheduler. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopInferenceSchedulerRequest} stopInferenceSchedulerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopInferenceSchedulerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopInferenceSchedulerResponse}
     */
    stopInferenceScheduler(xAmzTarget, stopInferenceSchedulerRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopInferenceSchedulerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopInferenceScheduler");
      }
      // verify the required parameter 'stopInferenceSchedulerRequest' is set
      if (stopInferenceSchedulerRequest === undefined || stopInferenceSchedulerRequest === null) {
        throw new Error("Missing the required parameter 'stopInferenceSchedulerRequest' when calling stopInferenceScheduler");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopInferenceSchedulerResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.StopInferenceScheduler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a given tag to a resource in your account. A tag is a key-value pair which can be added to an Amazon Lookout for Equipment resource as metadata. Tags can be used for organizing your resources as well as helping you to search and filter by tag. Multiple tags can be added to a resource, either when you create it, or later. Up to 50 tags can be associated with each resource. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a specific tag from a given resource. The tag is specified by its key. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateActiveModelVersion operation.
     * @callback module:api/DefaultApi~updateActiveModelVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateActiveModelVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the active model version for a given machine learning model.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateActiveModelVersionRequest} updateActiveModelVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateActiveModelVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateActiveModelVersionResponse}
     */
    updateActiveModelVersion(xAmzTarget, updateActiveModelVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateActiveModelVersionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateActiveModelVersion");
      }
      // verify the required parameter 'updateActiveModelVersionRequest' is set
      if (updateActiveModelVersionRequest === undefined || updateActiveModelVersionRequest === null) {
        throw new Error("Missing the required parameter 'updateActiveModelVersionRequest' when calling updateActiveModelVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateActiveModelVersionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.UpdateActiveModelVersion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInferenceScheduler operation.
     * @callback module:api/DefaultApi~updateInferenceSchedulerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an inference scheduler. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateInferenceSchedulerRequest} updateInferenceSchedulerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateInferenceSchedulerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateInferenceScheduler(xAmzTarget, updateInferenceSchedulerRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateInferenceSchedulerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateInferenceScheduler");
      }
      // verify the required parameter 'updateInferenceSchedulerRequest' is set
      if (updateInferenceSchedulerRequest === undefined || updateInferenceSchedulerRequest === null) {
        throw new Error("Missing the required parameter 'updateInferenceSchedulerRequest' when calling updateInferenceScheduler");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.UpdateInferenceScheduler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLabelGroup operation.
     * @callback module:api/DefaultApi~updateLabelGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates the label group. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateLabelGroupRequest} updateLabelGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLabelGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateLabelGroup(xAmzTarget, updateLabelGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLabelGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateLabelGroup");
      }
      // verify the required parameter 'updateLabelGroupRequest' is set
      if (updateLabelGroupRequest === undefined || updateLabelGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateLabelGroupRequest' when calling updateLabelGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLookoutEquipmentFrontendService.UpdateLabelGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
