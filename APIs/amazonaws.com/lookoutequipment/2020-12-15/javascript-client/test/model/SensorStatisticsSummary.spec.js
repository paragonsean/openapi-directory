/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonLookoutForEquipment);
  }
}(this, function(expect, AmazonLookoutForEquipment) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SensorStatisticsSummary', function() {
    it('should create an instance of SensorStatisticsSummary', function() {
      // uncomment below and update the code to test SensorStatisticsSummary
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be.a(AmazonLookoutForEquipment.SensorStatisticsSummary);
    });

    it('should have the property componentName (base name: "ComponentName")', function() {
      // uncomment below and update the code to test the property componentName
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

    it('should have the property sensorName (base name: "SensorName")', function() {
      // uncomment below and update the code to test the property sensorName
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

    it('should have the property dataExists (base name: "DataExists")', function() {
      // uncomment below and update the code to test the property dataExists
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

    it('should have the property missingValues (base name: "MissingValues")', function() {
      // uncomment below and update the code to test the property missingValues
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

    it('should have the property invalidValues (base name: "InvalidValues")', function() {
      // uncomment below and update the code to test the property invalidValues
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

    it('should have the property invalidDateEntries (base name: "InvalidDateEntries")', function() {
      // uncomment below and update the code to test the property invalidDateEntries
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

    it('should have the property duplicateTimestamps (base name: "DuplicateTimestamps")', function() {
      // uncomment below and update the code to test the property duplicateTimestamps
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

    it('should have the property categoricalValues (base name: "CategoricalValues")', function() {
      // uncomment below and update the code to test the property categoricalValues
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

    it('should have the property multipleOperatingModes (base name: "MultipleOperatingModes")', function() {
      // uncomment below and update the code to test the property multipleOperatingModes
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

    it('should have the property largeTimestampGaps (base name: "LargeTimestampGaps")', function() {
      // uncomment below and update the code to test the property largeTimestampGaps
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

    it('should have the property monotonicValues (base name: "MonotonicValues")', function() {
      // uncomment below and update the code to test the property monotonicValues
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

    it('should have the property dataStartTime (base name: "DataStartTime")', function() {
      // uncomment below and update the code to test the property dataStartTime
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

    it('should have the property dataEndTime (base name: "DataEndTime")', function() {
      // uncomment below and update the code to test the property dataEndTime
      //var instance = new AmazonLookoutForEquipment.SensorStatisticsSummary();
      //expect(instance).to.be();
    });

  });

}));
