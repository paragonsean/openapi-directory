/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonLookoutForEquipment);
  }
}(this, function(expect, AmazonLookoutForEquipment) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonLookoutForEquipment.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createDataset', function() {
      it('should call createDataset successfully', function(done) {
        //uncomment below and update the code to test createDataset
        //instance.createDataset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createInferenceScheduler', function() {
      it('should call createInferenceScheduler successfully', function(done) {
        //uncomment below and update the code to test createInferenceScheduler
        //instance.createInferenceScheduler(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLabel', function() {
      it('should call createLabel successfully', function(done) {
        //uncomment below and update the code to test createLabel
        //instance.createLabel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLabelGroup', function() {
      it('should call createLabelGroup successfully', function(done) {
        //uncomment below and update the code to test createLabelGroup
        //instance.createLabelGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModel', function() {
      it('should call createModel successfully', function(done) {
        //uncomment below and update the code to test createModel
        //instance.createModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDataset', function() {
      it('should call deleteDataset successfully', function(done) {
        //uncomment below and update the code to test deleteDataset
        //instance.deleteDataset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteInferenceScheduler', function() {
      it('should call deleteInferenceScheduler successfully', function(done) {
        //uncomment below and update the code to test deleteInferenceScheduler
        //instance.deleteInferenceScheduler(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLabel', function() {
      it('should call deleteLabel successfully', function(done) {
        //uncomment below and update the code to test deleteLabel
        //instance.deleteLabel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLabelGroup', function() {
      it('should call deleteLabelGroup successfully', function(done) {
        //uncomment below and update the code to test deleteLabelGroup
        //instance.deleteLabelGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteModel', function() {
      it('should call deleteModel successfully', function(done) {
        //uncomment below and update the code to test deleteModel
        //instance.deleteModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResourcePolicy', function() {
      it('should call deleteResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test deleteResourcePolicy
        //instance.deleteResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDataIngestionJob', function() {
      it('should call describeDataIngestionJob successfully', function(done) {
        //uncomment below and update the code to test describeDataIngestionJob
        //instance.describeDataIngestionJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDataset', function() {
      it('should call describeDataset successfully', function(done) {
        //uncomment below and update the code to test describeDataset
        //instance.describeDataset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInferenceScheduler', function() {
      it('should call describeInferenceScheduler successfully', function(done) {
        //uncomment below and update the code to test describeInferenceScheduler
        //instance.describeInferenceScheduler(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeLabel', function() {
      it('should call describeLabel successfully', function(done) {
        //uncomment below and update the code to test describeLabel
        //instance.describeLabel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeLabelGroup', function() {
      it('should call describeLabelGroup successfully', function(done) {
        //uncomment below and update the code to test describeLabelGroup
        //instance.describeLabelGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeModel', function() {
      it('should call describeModel successfully', function(done) {
        //uncomment below and update the code to test describeModel
        //instance.describeModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeModelVersion', function() {
      it('should call describeModelVersion successfully', function(done) {
        //uncomment below and update the code to test describeModelVersion
        //instance.describeModelVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeResourcePolicy', function() {
      it('should call describeResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test describeResourcePolicy
        //instance.describeResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importDataset', function() {
      it('should call importDataset successfully', function(done) {
        //uncomment below and update the code to test importDataset
        //instance.importDataset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importModelVersion', function() {
      it('should call importModelVersion successfully', function(done) {
        //uncomment below and update the code to test importModelVersion
        //instance.importModelVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDataIngestionJobs', function() {
      it('should call listDataIngestionJobs successfully', function(done) {
        //uncomment below and update the code to test listDataIngestionJobs
        //instance.listDataIngestionJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDatasets', function() {
      it('should call listDatasets successfully', function(done) {
        //uncomment below and update the code to test listDatasets
        //instance.listDatasets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInferenceEvents', function() {
      it('should call listInferenceEvents successfully', function(done) {
        //uncomment below and update the code to test listInferenceEvents
        //instance.listInferenceEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInferenceExecutions', function() {
      it('should call listInferenceExecutions successfully', function(done) {
        //uncomment below and update the code to test listInferenceExecutions
        //instance.listInferenceExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInferenceSchedulers', function() {
      it('should call listInferenceSchedulers successfully', function(done) {
        //uncomment below and update the code to test listInferenceSchedulers
        //instance.listInferenceSchedulers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLabelGroups', function() {
      it('should call listLabelGroups successfully', function(done) {
        //uncomment below and update the code to test listLabelGroups
        //instance.listLabelGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLabels', function() {
      it('should call listLabels successfully', function(done) {
        //uncomment below and update the code to test listLabels
        //instance.listLabels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listModelVersions', function() {
      it('should call listModelVersions successfully', function(done) {
        //uncomment below and update the code to test listModelVersions
        //instance.listModelVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listModels', function() {
      it('should call listModels successfully', function(done) {
        //uncomment below and update the code to test listModels
        //instance.listModels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSensorStatistics', function() {
      it('should call listSensorStatistics successfully', function(done) {
        //uncomment below and update the code to test listSensorStatistics
        //instance.listSensorStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putResourcePolicy', function() {
      it('should call putResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test putResourcePolicy
        //instance.putResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startDataIngestionJob', function() {
      it('should call startDataIngestionJob successfully', function(done) {
        //uncomment below and update the code to test startDataIngestionJob
        //instance.startDataIngestionJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startInferenceScheduler', function() {
      it('should call startInferenceScheduler successfully', function(done) {
        //uncomment below and update the code to test startInferenceScheduler
        //instance.startInferenceScheduler(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopInferenceScheduler', function() {
      it('should call stopInferenceScheduler successfully', function(done) {
        //uncomment below and update the code to test stopInferenceScheduler
        //instance.stopInferenceScheduler(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateActiveModelVersion', function() {
      it('should call updateActiveModelVersion successfully', function(done) {
        //uncomment below and update the code to test updateActiveModelVersion
        //instance.updateActiveModelVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInferenceScheduler', function() {
      it('should call updateInferenceScheduler successfully', function(done) {
        //uncomment below and update the code to test updateInferenceScheduler
        //instance.updateInferenceScheduler(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLabelGroup', function() {
      it('should call updateLabelGroup successfully', function(done) {
        //uncomment below and update the code to test updateLabelGroup
        //instance.updateLabelGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
