/*
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateDatasetRequest;
import org.openapitools.client.model.CreateDatasetResponse;
import org.openapitools.client.model.CreateInferenceSchedulerRequest;
import org.openapitools.client.model.CreateInferenceSchedulerResponse;
import org.openapitools.client.model.CreateLabelGroupRequest;
import org.openapitools.client.model.CreateLabelGroupResponse;
import org.openapitools.client.model.CreateLabelRequest;
import org.openapitools.client.model.CreateLabelResponse;
import org.openapitools.client.model.CreateModelRequest;
import org.openapitools.client.model.CreateModelResponse;
import org.openapitools.client.model.DeleteDatasetRequest;
import org.openapitools.client.model.DeleteInferenceSchedulerRequest;
import org.openapitools.client.model.DeleteLabelGroupRequest;
import org.openapitools.client.model.DeleteLabelRequest;
import org.openapitools.client.model.DeleteModelRequest;
import org.openapitools.client.model.DeleteResourcePolicyRequest;
import org.openapitools.client.model.DescribeDataIngestionJobRequest;
import org.openapitools.client.model.DescribeDataIngestionJobResponse;
import org.openapitools.client.model.DescribeDatasetRequest;
import org.openapitools.client.model.DescribeDatasetResponse;
import org.openapitools.client.model.DescribeInferenceSchedulerRequest;
import org.openapitools.client.model.DescribeInferenceSchedulerResponse;
import org.openapitools.client.model.DescribeLabelGroupRequest;
import org.openapitools.client.model.DescribeLabelGroupResponse;
import org.openapitools.client.model.DescribeLabelRequest;
import org.openapitools.client.model.DescribeLabelResponse;
import org.openapitools.client.model.DescribeModelRequest;
import org.openapitools.client.model.DescribeModelResponse;
import org.openapitools.client.model.DescribeModelVersionRequest;
import org.openapitools.client.model.DescribeModelVersionResponse;
import org.openapitools.client.model.DescribeResourcePolicyRequest;
import org.openapitools.client.model.DescribeResourcePolicyResponse;
import org.openapitools.client.model.ImportDatasetRequest;
import org.openapitools.client.model.ImportDatasetResponse;
import org.openapitools.client.model.ImportModelVersionRequest;
import org.openapitools.client.model.ImportModelVersionResponse;
import org.openapitools.client.model.ListDataIngestionJobsRequest;
import org.openapitools.client.model.ListDataIngestionJobsResponse;
import org.openapitools.client.model.ListDatasetsRequest;
import org.openapitools.client.model.ListDatasetsResponse;
import org.openapitools.client.model.ListInferenceEventsRequest;
import org.openapitools.client.model.ListInferenceEventsResponse;
import org.openapitools.client.model.ListInferenceExecutionsRequest;
import org.openapitools.client.model.ListInferenceExecutionsResponse;
import org.openapitools.client.model.ListInferenceSchedulersRequest;
import org.openapitools.client.model.ListInferenceSchedulersResponse;
import org.openapitools.client.model.ListLabelGroupsRequest;
import org.openapitools.client.model.ListLabelGroupsResponse;
import org.openapitools.client.model.ListLabelsRequest;
import org.openapitools.client.model.ListLabelsResponse;
import org.openapitools.client.model.ListModelVersionsRequest;
import org.openapitools.client.model.ListModelVersionsResponse;
import org.openapitools.client.model.ListModelsRequest;
import org.openapitools.client.model.ListModelsResponse;
import org.openapitools.client.model.ListSensorStatisticsRequest;
import org.openapitools.client.model.ListSensorStatisticsResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutResourcePolicyRequest;
import org.openapitools.client.model.PutResourcePolicyResponse;
import org.openapitools.client.model.StartDataIngestionJobRequest;
import org.openapitools.client.model.StartDataIngestionJobResponse;
import org.openapitools.client.model.StartInferenceSchedulerRequest;
import org.openapitools.client.model.StartInferenceSchedulerResponse;
import org.openapitools.client.model.StopInferenceSchedulerRequest;
import org.openapitools.client.model.StopInferenceSchedulerResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateActiveModelVersionRequest;
import org.openapitools.client.model.UpdateActiveModelVersionResponse;
import org.openapitools.client.model.UpdateInferenceSchedulerRequest;
import org.openapitools.client.model.UpdateLabelGroupRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a container for a collection of data being ingested for analysis. The dataset contains the metadata describing where the data is and what the data actually looks like. For example, it contains the location of the data source, the data schema, and other information. A dataset also contains any tags associated with the ingested data. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDatasetTest() throws ApiException {
        String xAmzTarget = null;
        CreateDatasetRequest createDatasetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDatasetResponse response = api.createDataset(xAmzTarget, createDatasetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Creates a scheduled inference. Scheduling an inference is setting up a continuous real-time inference plan to analyze new measurement data. When setting up the schedule, you provide an S3 bucket location for the input data, assign it a delimiter between separate entries in the data, set an offset delay if desired, and set the frequency of inferencing. You must also provide an S3 bucket location for the output data. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInferenceSchedulerTest() throws ApiException {
        String xAmzTarget = null;
        CreateInferenceSchedulerRequest createInferenceSchedulerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInferenceSchedulerResponse response = api.createInferenceScheduler(xAmzTarget, createInferenceSchedulerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Creates a label for an event. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLabelTest() throws ApiException {
        String xAmzTarget = null;
        CreateLabelRequest createLabelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLabelResponse response = api.createLabel(xAmzTarget, createLabelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Creates a group of labels. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLabelGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateLabelGroupRequest createLabelGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLabelGroupResponse response = api.createLabelGroup(xAmzTarget, createLabelGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an ML model for data inference. &lt;/p&gt; &lt;p&gt;A machine-learning (ML) model is a mathematical model that finds patterns in your data. In Amazon Lookout for Equipment, the model learns the patterns of normal behavior and detects abnormal behavior that could be potential equipment failure (or maintenance events). The models are made by analyzing normal data and abnormalities in machine behavior that have already occurred.&lt;/p&gt; &lt;p&gt;Your model is trained using a portion of the data from your dataset and uses that data to learn patterns of normal behavior and abnormal patterns that lead to equipment failure. Another portion of the data is used to evaluate the model&#39;s accuracy. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelTest() throws ApiException {
        String xAmzTarget = null;
        CreateModelRequest createModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateModelResponse response = api.createModel(xAmzTarget, createModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes a dataset and associated artifacts. The operation will check to see if any inference scheduler or data ingestion job is currently using the dataset, and if there isn&#39;t, the dataset, its metadata, and any associated data stored in S3 will be deleted. This does not affect any models that used this dataset for training and evaluation, but does prevent it from being used in the future. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDatasetTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDatasetRequest deleteDatasetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDataset(xAmzTarget, deleteDatasetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an inference scheduler that has been set up. Already processed output results are not affected. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInferenceSchedulerTest() throws ApiException {
        String xAmzTarget = null;
        DeleteInferenceSchedulerRequest deleteInferenceSchedulerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteInferenceScheduler(xAmzTarget, deleteInferenceSchedulerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes a label. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLabelTest() throws ApiException {
        String xAmzTarget = null;
        DeleteLabelRequest deleteLabelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteLabel(xAmzTarget, deleteLabelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes a group of labels. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLabelGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteLabelGroupRequest deleteLabelGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteLabelGroup(xAmzTarget, deleteLabelGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an ML model currently available for Amazon Lookout for Equipment. This will prevent it from being used with an inference scheduler, even one that is already set up. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelTest() throws ApiException {
        String xAmzTarget = null;
        DeleteModelRequest deleteModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteModel(xAmzTarget, deleteModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the resource policy attached to the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteResourcePolicyRequest deleteResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteResourcePolicy(xAmzTarget, deleteResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides information on a specific data ingestion job such as creation time, dataset ARN, and status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDataIngestionJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeDataIngestionJobRequest describeDataIngestionJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDataIngestionJobResponse response = api.describeDataIngestionJob(xAmzTarget, describeDataIngestionJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides a JSON description of the data in each time series dataset, including names, column names, and data types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDatasetTest() throws ApiException {
        String xAmzTarget = null;
        DescribeDatasetRequest describeDatasetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDatasetResponse response = api.describeDataset(xAmzTarget, describeDatasetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Specifies information about the inference scheduler being used, including name, model, status, and associated metadata 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInferenceSchedulerTest() throws ApiException {
        String xAmzTarget = null;
        DescribeInferenceSchedulerRequest describeInferenceSchedulerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInferenceSchedulerResponse response = api.describeInferenceScheduler(xAmzTarget, describeInferenceSchedulerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns the name of the label. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeLabelTest() throws ApiException {
        String xAmzTarget = null;
        DescribeLabelRequest describeLabelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLabelResponse response = api.describeLabel(xAmzTarget, describeLabelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns information about the label group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeLabelGroupTest() throws ApiException {
        String xAmzTarget = null;
        DescribeLabelGroupRequest describeLabelGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLabelGroupResponse response = api.describeLabelGroup(xAmzTarget, describeLabelGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides a JSON containing the overall information about a specific ML model, including model name and ARN, dataset, training and evaluation information, status, and so on. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeModelTest() throws ApiException {
        String xAmzTarget = null;
        DescribeModelRequest describeModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeModelResponse response = api.describeModel(xAmzTarget, describeModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about a specific machine learning model version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeModelVersionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeModelVersionRequest describeModelVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeModelVersionResponse response = api.describeModelVersion(xAmzTarget, describeModelVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides the details of a resource policy attached to a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        DescribeResourcePolicyRequest describeResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeResourcePolicyResponse response = api.describeResourcePolicy(xAmzTarget, describeResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Imports a dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importDatasetTest() throws ApiException {
        String xAmzTarget = null;
        ImportDatasetRequest importDatasetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportDatasetResponse response = api.importDataset(xAmzTarget, importDatasetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Imports a model that has been trained successfully.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importModelVersionTest() throws ApiException {
        String xAmzTarget = null;
        ImportModelVersionRequest importModelVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportModelVersionResponse response = api.importModelVersion(xAmzTarget, importModelVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides a list of all data ingestion jobs, including dataset name and ARN, S3 location of the input data, status, and so on. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataIngestionJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListDataIngestionJobsRequest listDataIngestionJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDataIngestionJobsResponse response = api.listDataIngestionJobs(xAmzTarget, listDataIngestionJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all datasets currently available in your account, filtering on the dataset name. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDatasetsTest() throws ApiException {
        String xAmzTarget = null;
        ListDatasetsRequest listDatasetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDatasetsResponse response = api.listDatasets(xAmzTarget, listDatasetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Lists all inference events that have been found for the specified inference scheduler. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInferenceEventsTest() throws ApiException {
        String xAmzTarget = null;
        ListInferenceEventsRequest listInferenceEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListInferenceEventsResponse response = api.listInferenceEvents(xAmzTarget, listInferenceEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Lists all inference executions that have been performed by the specified inference scheduler. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInferenceExecutionsTest() throws ApiException {
        String xAmzTarget = null;
        ListInferenceExecutionsRequest listInferenceExecutionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListInferenceExecutionsResponse response = api.listInferenceExecutions(xAmzTarget, listInferenceExecutionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of all inference schedulers currently available for your account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInferenceSchedulersTest() throws ApiException {
        String xAmzTarget = null;
        ListInferenceSchedulersRequest listInferenceSchedulersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListInferenceSchedulersResponse response = api.listInferenceSchedulers(xAmzTarget, listInferenceSchedulersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of the label groups. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLabelGroupsTest() throws ApiException {
        String xAmzTarget = null;
        ListLabelGroupsRequest listLabelGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListLabelGroupsResponse response = api.listLabelGroups(xAmzTarget, listLabelGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Provides a list of labels. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLabelsTest() throws ApiException {
        String xAmzTarget = null;
        ListLabelsRequest listLabelsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListLabelsResponse response = api.listLabels(xAmzTarget, listLabelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Generates a list of all model versions for a given model, including the model version, model version ARN, and status. To list a subset of versions, use the &lt;code&gt;MaxModelVersion&lt;/code&gt; and &lt;code&gt;MinModelVersion&lt;/code&gt; fields.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listModelVersionsTest() throws ApiException {
        String xAmzTarget = null;
        ListModelVersionsRequest listModelVersionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListModelVersionsResponse response = api.listModelVersions(xAmzTarget, listModelVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Generates a list of all models in the account, including model name and ARN, dataset, and status. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listModelsTest() throws ApiException {
        String xAmzTarget = null;
        ListModelsRequest listModelsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListModelsResponse response = api.listModels(xAmzTarget, listModelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Lists statistics about the data collected for each of the sensors that have been successfully ingested in the particular dataset. Can also be used to retreive Sensor Statistics for a previous ingestion job. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSensorStatisticsTest() throws ApiException {
        String xAmzTarget = null;
        ListSensorStatisticsRequest listSensorStatisticsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSensorStatisticsResponse response = api.listSensorStatistics(xAmzTarget, listSensorStatisticsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the tags for a specified resource, including key and value. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a resource control policy for a given resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutResourcePolicyRequest putResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutResourcePolicyResponse response = api.putResourcePolicy(xAmzTarget, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a data ingestion job. Amazon Lookout for Equipment returns the job status. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDataIngestionJobTest() throws ApiException {
        String xAmzTarget = null;
        StartDataIngestionJobRequest startDataIngestionJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartDataIngestionJobResponse response = api.startDataIngestionJob(xAmzTarget, startDataIngestionJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an inference scheduler. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startInferenceSchedulerTest() throws ApiException {
        String xAmzTarget = null;
        StartInferenceSchedulerRequest startInferenceSchedulerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartInferenceSchedulerResponse response = api.startInferenceScheduler(xAmzTarget, startInferenceSchedulerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops an inference scheduler. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopInferenceSchedulerTest() throws ApiException {
        String xAmzTarget = null;
        StopInferenceSchedulerRequest stopInferenceSchedulerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopInferenceSchedulerResponse response = api.stopInferenceScheduler(xAmzTarget, stopInferenceSchedulerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a given tag to a resource in your account. A tag is a key-value pair which can be added to an Amazon Lookout for Equipment resource as metadata. Tags can be used for organizing your resources as well as helping you to search and filter by tag. Multiple tags can be added to a resource, either when you create it, or later. Up to 50 tags can be associated with each resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a specific tag from a given resource. The tag is specified by its key. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets the active model version for a given machine learning model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateActiveModelVersionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateActiveModelVersionRequest updateActiveModelVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateActiveModelVersionResponse response = api.updateActiveModelVersion(xAmzTarget, updateActiveModelVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an inference scheduler. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInferenceSchedulerTest() throws ApiException {
        String xAmzTarget = null;
        UpdateInferenceSchedulerRequest updateInferenceSchedulerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateInferenceScheduler(xAmzTarget, updateInferenceSchedulerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates the label group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLabelGroupTest() throws ApiException {
        String xAmzTarget = null;
        UpdateLabelGroupRequest updateLabelGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateLabelGroup(xAmzTarget, updateLabelGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
