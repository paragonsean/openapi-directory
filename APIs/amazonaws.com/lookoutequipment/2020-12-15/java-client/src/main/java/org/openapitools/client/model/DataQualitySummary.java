/*
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataQualitySummaryDuplicateTimestamps;
import org.openapitools.client.model.DataQualitySummaryInsufficientSensorData;
import org.openapitools.client.model.DataQualitySummaryInvalidSensorData;
import org.openapitools.client.model.DataQualitySummaryMissingSensorData;
import org.openapitools.client.model.DataQualitySummaryUnsupportedTimestamps;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  DataQualitySummary gives aggregated statistics over all the sensors about a completed ingestion job. It primarily gives more information about statistics over different incorrect data like MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, DuplicateTimeStamps. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:18.043707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataQualitySummary {
  public static final String SERIALIZED_NAME_INSUFFICIENT_SENSOR_DATA = "InsufficientSensorData";
  @SerializedName(SERIALIZED_NAME_INSUFFICIENT_SENSOR_DATA)
  private DataQualitySummaryInsufficientSensorData insufficientSensorData;

  public static final String SERIALIZED_NAME_MISSING_SENSOR_DATA = "MissingSensorData";
  @SerializedName(SERIALIZED_NAME_MISSING_SENSOR_DATA)
  private DataQualitySummaryMissingSensorData missingSensorData;

  public static final String SERIALIZED_NAME_INVALID_SENSOR_DATA = "InvalidSensorData";
  @SerializedName(SERIALIZED_NAME_INVALID_SENSOR_DATA)
  private DataQualitySummaryInvalidSensorData invalidSensorData;

  public static final String SERIALIZED_NAME_UNSUPPORTED_TIMESTAMPS = "UnsupportedTimestamps";
  @SerializedName(SERIALIZED_NAME_UNSUPPORTED_TIMESTAMPS)
  private DataQualitySummaryUnsupportedTimestamps unsupportedTimestamps;

  public static final String SERIALIZED_NAME_DUPLICATE_TIMESTAMPS = "DuplicateTimestamps";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_TIMESTAMPS)
  private DataQualitySummaryDuplicateTimestamps duplicateTimestamps;

  public DataQualitySummary() {
  }

  public DataQualitySummary insufficientSensorData(DataQualitySummaryInsufficientSensorData insufficientSensorData) {
    this.insufficientSensorData = insufficientSensorData;
    return this;
  }

  /**
   * Get insufficientSensorData
   * @return insufficientSensorData
   */
  @javax.annotation.Nonnull
  public DataQualitySummaryInsufficientSensorData getInsufficientSensorData() {
    return insufficientSensorData;
  }

  public void setInsufficientSensorData(DataQualitySummaryInsufficientSensorData insufficientSensorData) {
    this.insufficientSensorData = insufficientSensorData;
  }


  public DataQualitySummary missingSensorData(DataQualitySummaryMissingSensorData missingSensorData) {
    this.missingSensorData = missingSensorData;
    return this;
  }

  /**
   * Get missingSensorData
   * @return missingSensorData
   */
  @javax.annotation.Nonnull
  public DataQualitySummaryMissingSensorData getMissingSensorData() {
    return missingSensorData;
  }

  public void setMissingSensorData(DataQualitySummaryMissingSensorData missingSensorData) {
    this.missingSensorData = missingSensorData;
  }


  public DataQualitySummary invalidSensorData(DataQualitySummaryInvalidSensorData invalidSensorData) {
    this.invalidSensorData = invalidSensorData;
    return this;
  }

  /**
   * Get invalidSensorData
   * @return invalidSensorData
   */
  @javax.annotation.Nonnull
  public DataQualitySummaryInvalidSensorData getInvalidSensorData() {
    return invalidSensorData;
  }

  public void setInvalidSensorData(DataQualitySummaryInvalidSensorData invalidSensorData) {
    this.invalidSensorData = invalidSensorData;
  }


  public DataQualitySummary unsupportedTimestamps(DataQualitySummaryUnsupportedTimestamps unsupportedTimestamps) {
    this.unsupportedTimestamps = unsupportedTimestamps;
    return this;
  }

  /**
   * Get unsupportedTimestamps
   * @return unsupportedTimestamps
   */
  @javax.annotation.Nonnull
  public DataQualitySummaryUnsupportedTimestamps getUnsupportedTimestamps() {
    return unsupportedTimestamps;
  }

  public void setUnsupportedTimestamps(DataQualitySummaryUnsupportedTimestamps unsupportedTimestamps) {
    this.unsupportedTimestamps = unsupportedTimestamps;
  }


  public DataQualitySummary duplicateTimestamps(DataQualitySummaryDuplicateTimestamps duplicateTimestamps) {
    this.duplicateTimestamps = duplicateTimestamps;
    return this;
  }

  /**
   * Get duplicateTimestamps
   * @return duplicateTimestamps
   */
  @javax.annotation.Nonnull
  public DataQualitySummaryDuplicateTimestamps getDuplicateTimestamps() {
    return duplicateTimestamps;
  }

  public void setDuplicateTimestamps(DataQualitySummaryDuplicateTimestamps duplicateTimestamps) {
    this.duplicateTimestamps = duplicateTimestamps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataQualitySummary dataQualitySummary = (DataQualitySummary) o;
    return Objects.equals(this.insufficientSensorData, dataQualitySummary.insufficientSensorData) &&
        Objects.equals(this.missingSensorData, dataQualitySummary.missingSensorData) &&
        Objects.equals(this.invalidSensorData, dataQualitySummary.invalidSensorData) &&
        Objects.equals(this.unsupportedTimestamps, dataQualitySummary.unsupportedTimestamps) &&
        Objects.equals(this.duplicateTimestamps, dataQualitySummary.duplicateTimestamps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insufficientSensorData, missingSensorData, invalidSensorData, unsupportedTimestamps, duplicateTimestamps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataQualitySummary {\n");
    sb.append("    insufficientSensorData: ").append(toIndentedString(insufficientSensorData)).append("\n");
    sb.append("    missingSensorData: ").append(toIndentedString(missingSensorData)).append("\n");
    sb.append("    invalidSensorData: ").append(toIndentedString(invalidSensorData)).append("\n");
    sb.append("    unsupportedTimestamps: ").append(toIndentedString(unsupportedTimestamps)).append("\n");
    sb.append("    duplicateTimestamps: ").append(toIndentedString(duplicateTimestamps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InsufficientSensorData");
    openapiFields.add("MissingSensorData");
    openapiFields.add("InvalidSensorData");
    openapiFields.add("UnsupportedTimestamps");
    openapiFields.add("DuplicateTimestamps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InsufficientSensorData");
    openapiRequiredFields.add("MissingSensorData");
    openapiRequiredFields.add("InvalidSensorData");
    openapiRequiredFields.add("UnsupportedTimestamps");
    openapiRequiredFields.add("DuplicateTimestamps");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataQualitySummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataQualitySummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataQualitySummary is not found in the empty JSON string", DataQualitySummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataQualitySummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataQualitySummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataQualitySummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `InsufficientSensorData`
      DataQualitySummaryInsufficientSensorData.validateJsonElement(jsonObj.get("InsufficientSensorData"));
      // validate the required field `MissingSensorData`
      DataQualitySummaryMissingSensorData.validateJsonElement(jsonObj.get("MissingSensorData"));
      // validate the required field `InvalidSensorData`
      DataQualitySummaryInvalidSensorData.validateJsonElement(jsonObj.get("InvalidSensorData"));
      // validate the required field `UnsupportedTimestamps`
      DataQualitySummaryUnsupportedTimestamps.validateJsonElement(jsonObj.get("UnsupportedTimestamps"));
      // validate the required field `DuplicateTimestamps`
      DataQualitySummaryDuplicateTimestamps.validateJsonElement(jsonObj.get("DuplicateTimestamps"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataQualitySummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataQualitySummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataQualitySummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataQualitySummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DataQualitySummary>() {
           @Override
           public void write(JsonWriter out, DataQualitySummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataQualitySummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataQualitySummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataQualitySummary
   * @throws IOException if the JSON string is invalid with respect to DataQualitySummary
   */
  public static DataQualitySummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataQualitySummary.class);
  }

  /**
   * Convert an instance of DataQualitySummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

