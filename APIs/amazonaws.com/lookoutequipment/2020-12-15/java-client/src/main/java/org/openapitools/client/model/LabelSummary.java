/*
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LabelRating;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Information about the label. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:18.043707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabelSummary {
  public static final String SERIALIZED_NAME_LABEL_GROUP_NAME = "LabelGroupName";
  @SerializedName(SERIALIZED_NAME_LABEL_GROUP_NAME)
  private String labelGroupName;

  public static final String SERIALIZED_NAME_LABEL_ID = "LabelId";
  @SerializedName(SERIALIZED_NAME_LABEL_ID)
  private String labelId;

  public static final String SERIALIZED_NAME_LABEL_GROUP_ARN = "LabelGroupArn";
  @SerializedName(SERIALIZED_NAME_LABEL_GROUP_ARN)
  private String labelGroupArn;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_RATING = "Rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private LabelRating rating;

  public static final String SERIALIZED_NAME_FAULT_CODE = "FaultCode";
  @SerializedName(SERIALIZED_NAME_FAULT_CODE)
  private String faultCode;

  public static final String SERIALIZED_NAME_EQUIPMENT = "Equipment";
  @SerializedName(SERIALIZED_NAME_EQUIPMENT)
  private String equipment;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public LabelSummary() {
  }

  public LabelSummary labelGroupName(String labelGroupName) {
    this.labelGroupName = labelGroupName;
    return this;
  }

  /**
   * Get labelGroupName
   * @return labelGroupName
   */
  @javax.annotation.Nullable
  public String getLabelGroupName() {
    return labelGroupName;
  }

  public void setLabelGroupName(String labelGroupName) {
    this.labelGroupName = labelGroupName;
  }


  public LabelSummary labelId(String labelId) {
    this.labelId = labelId;
    return this;
  }

  /**
   * Get labelId
   * @return labelId
   */
  @javax.annotation.Nullable
  public String getLabelId() {
    return labelId;
  }

  public void setLabelId(String labelId) {
    this.labelId = labelId;
  }


  public LabelSummary labelGroupArn(String labelGroupArn) {
    this.labelGroupArn = labelGroupArn;
    return this;
  }

  /**
   * Get labelGroupArn
   * @return labelGroupArn
   */
  @javax.annotation.Nullable
  public String getLabelGroupArn() {
    return labelGroupArn;
  }

  public void setLabelGroupArn(String labelGroupArn) {
    this.labelGroupArn = labelGroupArn;
  }


  public LabelSummary startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public LabelSummary endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public LabelSummary rating(LabelRating rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public LabelRating getRating() {
    return rating;
  }

  public void setRating(LabelRating rating) {
    this.rating = rating;
  }


  public LabelSummary faultCode(String faultCode) {
    this.faultCode = faultCode;
    return this;
  }

  /**
   * Get faultCode
   * @return faultCode
   */
  @javax.annotation.Nullable
  public String getFaultCode() {
    return faultCode;
  }

  public void setFaultCode(String faultCode) {
    this.faultCode = faultCode;
  }


  public LabelSummary equipment(String equipment) {
    this.equipment = equipment;
    return this;
  }

  /**
   * Get equipment
   * @return equipment
   */
  @javax.annotation.Nullable
  public String getEquipment() {
    return equipment;
  }

  public void setEquipment(String equipment) {
    this.equipment = equipment;
  }


  public LabelSummary createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabelSummary labelSummary = (LabelSummary) o;
    return Objects.equals(this.labelGroupName, labelSummary.labelGroupName) &&
        Objects.equals(this.labelId, labelSummary.labelId) &&
        Objects.equals(this.labelGroupArn, labelSummary.labelGroupArn) &&
        Objects.equals(this.startTime, labelSummary.startTime) &&
        Objects.equals(this.endTime, labelSummary.endTime) &&
        Objects.equals(this.rating, labelSummary.rating) &&
        Objects.equals(this.faultCode, labelSummary.faultCode) &&
        Objects.equals(this.equipment, labelSummary.equipment) &&
        Objects.equals(this.createdAt, labelSummary.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labelGroupName, labelId, labelGroupArn, startTime, endTime, rating, faultCode, equipment, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabelSummary {\n");
    sb.append("    labelGroupName: ").append(toIndentedString(labelGroupName)).append("\n");
    sb.append("    labelId: ").append(toIndentedString(labelId)).append("\n");
    sb.append("    labelGroupArn: ").append(toIndentedString(labelGroupArn)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    faultCode: ").append(toIndentedString(faultCode)).append("\n");
    sb.append("    equipment: ").append(toIndentedString(equipment)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LabelGroupName");
    openapiFields.add("LabelId");
    openapiFields.add("LabelGroupArn");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("Rating");
    openapiFields.add("FaultCode");
    openapiFields.add("Equipment");
    openapiFields.add("CreatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabelSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabelSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabelSummary is not found in the empty JSON string", LabelSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabelSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabelSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LabelGroupName`
      if (jsonObj.get("LabelGroupName") != null && !jsonObj.get("LabelGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LabelGroupName"));
      }
      // validate the optional field `LabelId`
      if (jsonObj.get("LabelId") != null && !jsonObj.get("LabelId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LabelId"));
      }
      // validate the optional field `LabelGroupArn`
      if (jsonObj.get("LabelGroupArn") != null && !jsonObj.get("LabelGroupArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LabelGroupArn"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `Rating`
      if (jsonObj.get("Rating") != null && !jsonObj.get("Rating").isJsonNull()) {
        LabelRating.validateJsonElement(jsonObj.get("Rating"));
      }
      // validate the optional field `FaultCode`
      if (jsonObj.get("FaultCode") != null && !jsonObj.get("FaultCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FaultCode"));
      }
      // validate the optional field `Equipment`
      if (jsonObj.get("Equipment") != null && !jsonObj.get("Equipment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Equipment"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabelSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabelSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabelSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabelSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<LabelSummary>() {
           @Override
           public void write(JsonWriter out, LabelSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabelSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabelSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabelSummary
   * @throws IOException if the JSON string is invalid with respect to LabelSummary
   */
  public static LabelSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabelSummary.class);
  }

  /**
   * Convert an instance of LabelSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

