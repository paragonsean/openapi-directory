/*
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImportDatasetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:18.043707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportDatasetRequest {
  public static final String SERIALIZED_NAME_SOURCE_DATASET_ARN = "SourceDatasetArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATASET_ARN)
  private String sourceDatasetArn;

  public static final String SERIALIZED_NAME_DATASET_NAME = "DatasetName";
  @SerializedName(SERIALIZED_NAME_DATASET_NAME)
  private String datasetName;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_SERVER_SIDE_KMS_KEY_ID = "ServerSideKmsKeyId";
  @SerializedName(SERIALIZED_NAME_SERVER_SIDE_KMS_KEY_ID)
  private String serverSideKmsKeyId;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public ImportDatasetRequest() {
  }

  public ImportDatasetRequest sourceDatasetArn(String sourceDatasetArn) {
    this.sourceDatasetArn = sourceDatasetArn;
    return this;
  }

  /**
   * Get sourceDatasetArn
   * @return sourceDatasetArn
   */
  @javax.annotation.Nonnull
  public String getSourceDatasetArn() {
    return sourceDatasetArn;
  }

  public void setSourceDatasetArn(String sourceDatasetArn) {
    this.sourceDatasetArn = sourceDatasetArn;
  }


  public ImportDatasetRequest datasetName(String datasetName) {
    this.datasetName = datasetName;
    return this;
  }

  /**
   * Get datasetName
   * @return datasetName
   */
  @javax.annotation.Nullable
  public String getDatasetName() {
    return datasetName;
  }

  public void setDatasetName(String datasetName) {
    this.datasetName = datasetName;
  }


  public ImportDatasetRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public ImportDatasetRequest serverSideKmsKeyId(String serverSideKmsKeyId) {
    this.serverSideKmsKeyId = serverSideKmsKeyId;
    return this;
  }

  /**
   * Get serverSideKmsKeyId
   * @return serverSideKmsKeyId
   */
  @javax.annotation.Nullable
  public String getServerSideKmsKeyId() {
    return serverSideKmsKeyId;
  }

  public void setServerSideKmsKeyId(String serverSideKmsKeyId) {
    this.serverSideKmsKeyId = serverSideKmsKeyId;
  }


  public ImportDatasetRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportDatasetRequest importDatasetRequest = (ImportDatasetRequest) o;
    return Objects.equals(this.sourceDatasetArn, importDatasetRequest.sourceDatasetArn) &&
        Objects.equals(this.datasetName, importDatasetRequest.datasetName) &&
        Objects.equals(this.clientToken, importDatasetRequest.clientToken) &&
        Objects.equals(this.serverSideKmsKeyId, importDatasetRequest.serverSideKmsKeyId) &&
        Objects.equals(this.tags, importDatasetRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceDatasetArn, datasetName, clientToken, serverSideKmsKeyId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportDatasetRequest {\n");
    sb.append("    sourceDatasetArn: ").append(toIndentedString(sourceDatasetArn)).append("\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    serverSideKmsKeyId: ").append(toIndentedString(serverSideKmsKeyId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceDatasetArn");
    openapiFields.add("DatasetName");
    openapiFields.add("ClientToken");
    openapiFields.add("ServerSideKmsKeyId");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceDatasetArn");
    openapiRequiredFields.add("ClientToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportDatasetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportDatasetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportDatasetRequest is not found in the empty JSON string", ImportDatasetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportDatasetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportDatasetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportDatasetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SourceDatasetArn`
      String.validateJsonElement(jsonObj.get("SourceDatasetArn"));
      // validate the optional field `DatasetName`
      if (jsonObj.get("DatasetName") != null && !jsonObj.get("DatasetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatasetName"));
      }
      // validate the required field `ClientToken`
      String.validateJsonElement(jsonObj.get("ClientToken"));
      // validate the optional field `ServerSideKmsKeyId`
      if (jsonObj.get("ServerSideKmsKeyId") != null && !jsonObj.get("ServerSideKmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerSideKmsKeyId"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportDatasetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportDatasetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportDatasetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportDatasetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportDatasetRequest>() {
           @Override
           public void write(JsonWriter out, ImportDatasetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportDatasetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportDatasetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportDatasetRequest
   * @throws IOException if the JSON string is invalid with respect to ImportDatasetRequest
   */
  public static ImportDatasetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportDatasetRequest.class);
  }

  /**
   * Convert an instance of ImportDatasetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

