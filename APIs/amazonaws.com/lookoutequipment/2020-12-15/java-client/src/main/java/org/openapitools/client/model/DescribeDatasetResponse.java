/*
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DatasetStatus;
import org.openapitools.client.model.DescribeDataIngestionJobResponseIngestionInputConfiguration;
import org.openapitools.client.model.DescribeDatasetResponseDataQualitySummary;
import org.openapitools.client.model.DescribeDatasetResponseIngestedFilesSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeDatasetResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:18.043707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDatasetResponse {
  public static final String SERIALIZED_NAME_DATASET_NAME = "DatasetName";
  @SerializedName(SERIALIZED_NAME_DATASET_NAME)
  private String datasetName;

  public static final String SERIALIZED_NAME_DATASET_ARN = "DatasetArn";
  @SerializedName(SERIALIZED_NAME_DATASET_ARN)
  private String datasetArn;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "LastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DatasetStatus status;

  public static final String SERIALIZED_NAME_SCHEMA = "Schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  public static final String SERIALIZED_NAME_SERVER_SIDE_KMS_KEY_ID = "ServerSideKmsKeyId";
  @SerializedName(SERIALIZED_NAME_SERVER_SIDE_KMS_KEY_ID)
  private String serverSideKmsKeyId;

  public static final String SERIALIZED_NAME_INGESTION_INPUT_CONFIGURATION = "IngestionInputConfiguration";
  @SerializedName(SERIALIZED_NAME_INGESTION_INPUT_CONFIGURATION)
  private DescribeDataIngestionJobResponseIngestionInputConfiguration ingestionInputConfiguration;

  public static final String SERIALIZED_NAME_DATA_QUALITY_SUMMARY = "DataQualitySummary";
  @SerializedName(SERIALIZED_NAME_DATA_QUALITY_SUMMARY)
  private DescribeDatasetResponseDataQualitySummary dataQualitySummary;

  public static final String SERIALIZED_NAME_INGESTED_FILES_SUMMARY = "IngestedFilesSummary";
  @SerializedName(SERIALIZED_NAME_INGESTED_FILES_SUMMARY)
  private DescribeDatasetResponseIngestedFilesSummary ingestedFilesSummary;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_DATA_START_TIME = "DataStartTime";
  @SerializedName(SERIALIZED_NAME_DATA_START_TIME)
  private OffsetDateTime dataStartTime;

  public static final String SERIALIZED_NAME_DATA_END_TIME = "DataEndTime";
  @SerializedName(SERIALIZED_NAME_DATA_END_TIME)
  private OffsetDateTime dataEndTime;

  public static final String SERIALIZED_NAME_SOURCE_DATASET_ARN = "SourceDatasetArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATASET_ARN)
  private String sourceDatasetArn;

  public DescribeDatasetResponse() {
  }

  public DescribeDatasetResponse datasetName(String datasetName) {
    this.datasetName = datasetName;
    return this;
  }

  /**
   * Get datasetName
   * @return datasetName
   */
  @javax.annotation.Nullable
  public String getDatasetName() {
    return datasetName;
  }

  public void setDatasetName(String datasetName) {
    this.datasetName = datasetName;
  }


  public DescribeDatasetResponse datasetArn(String datasetArn) {
    this.datasetArn = datasetArn;
    return this;
  }

  /**
   * Get datasetArn
   * @return datasetArn
   */
  @javax.annotation.Nullable
  public String getDatasetArn() {
    return datasetArn;
  }

  public void setDatasetArn(String datasetArn) {
    this.datasetArn = datasetArn;
  }


  public DescribeDatasetResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DescribeDatasetResponse lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public DescribeDatasetResponse status(DatasetStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public DatasetStatus getStatus() {
    return status;
  }

  public void setStatus(DatasetStatus status) {
    this.status = status;
  }


  public DescribeDatasetResponse schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }


  public DescribeDatasetResponse serverSideKmsKeyId(String serverSideKmsKeyId) {
    this.serverSideKmsKeyId = serverSideKmsKeyId;
    return this;
  }

  /**
   * Get serverSideKmsKeyId
   * @return serverSideKmsKeyId
   */
  @javax.annotation.Nullable
  public String getServerSideKmsKeyId() {
    return serverSideKmsKeyId;
  }

  public void setServerSideKmsKeyId(String serverSideKmsKeyId) {
    this.serverSideKmsKeyId = serverSideKmsKeyId;
  }


  public DescribeDatasetResponse ingestionInputConfiguration(DescribeDataIngestionJobResponseIngestionInputConfiguration ingestionInputConfiguration) {
    this.ingestionInputConfiguration = ingestionInputConfiguration;
    return this;
  }

  /**
   * Get ingestionInputConfiguration
   * @return ingestionInputConfiguration
   */
  @javax.annotation.Nullable
  public DescribeDataIngestionJobResponseIngestionInputConfiguration getIngestionInputConfiguration() {
    return ingestionInputConfiguration;
  }

  public void setIngestionInputConfiguration(DescribeDataIngestionJobResponseIngestionInputConfiguration ingestionInputConfiguration) {
    this.ingestionInputConfiguration = ingestionInputConfiguration;
  }


  public DescribeDatasetResponse dataQualitySummary(DescribeDatasetResponseDataQualitySummary dataQualitySummary) {
    this.dataQualitySummary = dataQualitySummary;
    return this;
  }

  /**
   * Get dataQualitySummary
   * @return dataQualitySummary
   */
  @javax.annotation.Nullable
  public DescribeDatasetResponseDataQualitySummary getDataQualitySummary() {
    return dataQualitySummary;
  }

  public void setDataQualitySummary(DescribeDatasetResponseDataQualitySummary dataQualitySummary) {
    this.dataQualitySummary = dataQualitySummary;
  }


  public DescribeDatasetResponse ingestedFilesSummary(DescribeDatasetResponseIngestedFilesSummary ingestedFilesSummary) {
    this.ingestedFilesSummary = ingestedFilesSummary;
    return this;
  }

  /**
   * Get ingestedFilesSummary
   * @return ingestedFilesSummary
   */
  @javax.annotation.Nullable
  public DescribeDatasetResponseIngestedFilesSummary getIngestedFilesSummary() {
    return ingestedFilesSummary;
  }

  public void setIngestedFilesSummary(DescribeDatasetResponseIngestedFilesSummary ingestedFilesSummary) {
    this.ingestedFilesSummary = ingestedFilesSummary;
  }


  public DescribeDatasetResponse roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public DescribeDatasetResponse dataStartTime(OffsetDateTime dataStartTime) {
    this.dataStartTime = dataStartTime;
    return this;
  }

  /**
   * Get dataStartTime
   * @return dataStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDataStartTime() {
    return dataStartTime;
  }

  public void setDataStartTime(OffsetDateTime dataStartTime) {
    this.dataStartTime = dataStartTime;
  }


  public DescribeDatasetResponse dataEndTime(OffsetDateTime dataEndTime) {
    this.dataEndTime = dataEndTime;
    return this;
  }

  /**
   * Get dataEndTime
   * @return dataEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDataEndTime() {
    return dataEndTime;
  }

  public void setDataEndTime(OffsetDateTime dataEndTime) {
    this.dataEndTime = dataEndTime;
  }


  public DescribeDatasetResponse sourceDatasetArn(String sourceDatasetArn) {
    this.sourceDatasetArn = sourceDatasetArn;
    return this;
  }

  /**
   * Get sourceDatasetArn
   * @return sourceDatasetArn
   */
  @javax.annotation.Nullable
  public String getSourceDatasetArn() {
    return sourceDatasetArn;
  }

  public void setSourceDatasetArn(String sourceDatasetArn) {
    this.sourceDatasetArn = sourceDatasetArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDatasetResponse describeDatasetResponse = (DescribeDatasetResponse) o;
    return Objects.equals(this.datasetName, describeDatasetResponse.datasetName) &&
        Objects.equals(this.datasetArn, describeDatasetResponse.datasetArn) &&
        Objects.equals(this.createdAt, describeDatasetResponse.createdAt) &&
        Objects.equals(this.lastUpdatedAt, describeDatasetResponse.lastUpdatedAt) &&
        Objects.equals(this.status, describeDatasetResponse.status) &&
        Objects.equals(this.schema, describeDatasetResponse.schema) &&
        Objects.equals(this.serverSideKmsKeyId, describeDatasetResponse.serverSideKmsKeyId) &&
        Objects.equals(this.ingestionInputConfiguration, describeDatasetResponse.ingestionInputConfiguration) &&
        Objects.equals(this.dataQualitySummary, describeDatasetResponse.dataQualitySummary) &&
        Objects.equals(this.ingestedFilesSummary, describeDatasetResponse.ingestedFilesSummary) &&
        Objects.equals(this.roleArn, describeDatasetResponse.roleArn) &&
        Objects.equals(this.dataStartTime, describeDatasetResponse.dataStartTime) &&
        Objects.equals(this.dataEndTime, describeDatasetResponse.dataEndTime) &&
        Objects.equals(this.sourceDatasetArn, describeDatasetResponse.sourceDatasetArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasetName, datasetArn, createdAt, lastUpdatedAt, status, schema, serverSideKmsKeyId, ingestionInputConfiguration, dataQualitySummary, ingestedFilesSummary, roleArn, dataStartTime, dataEndTime, sourceDatasetArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDatasetResponse {\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("    datasetArn: ").append(toIndentedString(datasetArn)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    serverSideKmsKeyId: ").append(toIndentedString(serverSideKmsKeyId)).append("\n");
    sb.append("    ingestionInputConfiguration: ").append(toIndentedString(ingestionInputConfiguration)).append("\n");
    sb.append("    dataQualitySummary: ").append(toIndentedString(dataQualitySummary)).append("\n");
    sb.append("    ingestedFilesSummary: ").append(toIndentedString(ingestedFilesSummary)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    dataStartTime: ").append(toIndentedString(dataStartTime)).append("\n");
    sb.append("    dataEndTime: ").append(toIndentedString(dataEndTime)).append("\n");
    sb.append("    sourceDatasetArn: ").append(toIndentedString(sourceDatasetArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DatasetName");
    openapiFields.add("DatasetArn");
    openapiFields.add("CreatedAt");
    openapiFields.add("LastUpdatedAt");
    openapiFields.add("Status");
    openapiFields.add("Schema");
    openapiFields.add("ServerSideKmsKeyId");
    openapiFields.add("IngestionInputConfiguration");
    openapiFields.add("DataQualitySummary");
    openapiFields.add("IngestedFilesSummary");
    openapiFields.add("RoleArn");
    openapiFields.add("DataStartTime");
    openapiFields.add("DataEndTime");
    openapiFields.add("SourceDatasetArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDatasetResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDatasetResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDatasetResponse is not found in the empty JSON string", DescribeDatasetResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDatasetResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDatasetResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DatasetName`
      if (jsonObj.get("DatasetName") != null && !jsonObj.get("DatasetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatasetName"));
      }
      // validate the optional field `DatasetArn`
      if (jsonObj.get("DatasetArn") != null && !jsonObj.get("DatasetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatasetArn"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `LastUpdatedAt`
      if (jsonObj.get("LastUpdatedAt") != null && !jsonObj.get("LastUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedAt"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        DatasetStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Schema`
      if (jsonObj.get("Schema") != null && !jsonObj.get("Schema").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Schema"));
      }
      // validate the optional field `ServerSideKmsKeyId`
      if (jsonObj.get("ServerSideKmsKeyId") != null && !jsonObj.get("ServerSideKmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerSideKmsKeyId"));
      }
      // validate the optional field `IngestionInputConfiguration`
      if (jsonObj.get("IngestionInputConfiguration") != null && !jsonObj.get("IngestionInputConfiguration").isJsonNull()) {
        DescribeDataIngestionJobResponseIngestionInputConfiguration.validateJsonElement(jsonObj.get("IngestionInputConfiguration"));
      }
      // validate the optional field `DataQualitySummary`
      if (jsonObj.get("DataQualitySummary") != null && !jsonObj.get("DataQualitySummary").isJsonNull()) {
        DescribeDatasetResponseDataQualitySummary.validateJsonElement(jsonObj.get("DataQualitySummary"));
      }
      // validate the optional field `IngestedFilesSummary`
      if (jsonObj.get("IngestedFilesSummary") != null && !jsonObj.get("IngestedFilesSummary").isJsonNull()) {
        DescribeDatasetResponseIngestedFilesSummary.validateJsonElement(jsonObj.get("IngestedFilesSummary"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `DataStartTime`
      if (jsonObj.get("DataStartTime") != null && !jsonObj.get("DataStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DataStartTime"));
      }
      // validate the optional field `DataEndTime`
      if (jsonObj.get("DataEndTime") != null && !jsonObj.get("DataEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DataEndTime"));
      }
      // validate the optional field `SourceDatasetArn`
      if (jsonObj.get("SourceDatasetArn") != null && !jsonObj.get("SourceDatasetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceDatasetArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDatasetResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDatasetResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDatasetResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDatasetResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDatasetResponse>() {
           @Override
           public void write(JsonWriter out, DescribeDatasetResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDatasetResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDatasetResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDatasetResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeDatasetResponse
   */
  public static DescribeDatasetResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDatasetResponse.class);
  }

  /**
   * Convert an instance of DescribeDatasetResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

