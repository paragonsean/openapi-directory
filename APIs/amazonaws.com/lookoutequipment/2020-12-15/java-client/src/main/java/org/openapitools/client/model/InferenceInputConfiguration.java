/*
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InferenceInputConfigurationInferenceInputNameConfiguration;
import org.openapitools.client.model.InferenceInputConfigurationS3InputConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies configuration information for the input data for the inference, including Amazon S3 location of input data.. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:18.043707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InferenceInputConfiguration {
  public static final String SERIALIZED_NAME_S3_INPUT_CONFIGURATION = "S3InputConfiguration";
  @SerializedName(SERIALIZED_NAME_S3_INPUT_CONFIGURATION)
  private InferenceInputConfigurationS3InputConfiguration s3InputConfiguration;

  public static final String SERIALIZED_NAME_INPUT_TIME_ZONE_OFFSET = "InputTimeZoneOffset";
  @SerializedName(SERIALIZED_NAME_INPUT_TIME_ZONE_OFFSET)
  private String inputTimeZoneOffset;

  public static final String SERIALIZED_NAME_INFERENCE_INPUT_NAME_CONFIGURATION = "InferenceInputNameConfiguration";
  @SerializedName(SERIALIZED_NAME_INFERENCE_INPUT_NAME_CONFIGURATION)
  private InferenceInputConfigurationInferenceInputNameConfiguration inferenceInputNameConfiguration;

  public InferenceInputConfiguration() {
  }

  public InferenceInputConfiguration s3InputConfiguration(InferenceInputConfigurationS3InputConfiguration s3InputConfiguration) {
    this.s3InputConfiguration = s3InputConfiguration;
    return this;
  }

  /**
   * Get s3InputConfiguration
   * @return s3InputConfiguration
   */
  @javax.annotation.Nullable
  public InferenceInputConfigurationS3InputConfiguration getS3InputConfiguration() {
    return s3InputConfiguration;
  }

  public void setS3InputConfiguration(InferenceInputConfigurationS3InputConfiguration s3InputConfiguration) {
    this.s3InputConfiguration = s3InputConfiguration;
  }


  public InferenceInputConfiguration inputTimeZoneOffset(String inputTimeZoneOffset) {
    this.inputTimeZoneOffset = inputTimeZoneOffset;
    return this;
  }

  /**
   * Get inputTimeZoneOffset
   * @return inputTimeZoneOffset
   */
  @javax.annotation.Nullable
  public String getInputTimeZoneOffset() {
    return inputTimeZoneOffset;
  }

  public void setInputTimeZoneOffset(String inputTimeZoneOffset) {
    this.inputTimeZoneOffset = inputTimeZoneOffset;
  }


  public InferenceInputConfiguration inferenceInputNameConfiguration(InferenceInputConfigurationInferenceInputNameConfiguration inferenceInputNameConfiguration) {
    this.inferenceInputNameConfiguration = inferenceInputNameConfiguration;
    return this;
  }

  /**
   * Get inferenceInputNameConfiguration
   * @return inferenceInputNameConfiguration
   */
  @javax.annotation.Nullable
  public InferenceInputConfigurationInferenceInputNameConfiguration getInferenceInputNameConfiguration() {
    return inferenceInputNameConfiguration;
  }

  public void setInferenceInputNameConfiguration(InferenceInputConfigurationInferenceInputNameConfiguration inferenceInputNameConfiguration) {
    this.inferenceInputNameConfiguration = inferenceInputNameConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InferenceInputConfiguration inferenceInputConfiguration = (InferenceInputConfiguration) o;
    return Objects.equals(this.s3InputConfiguration, inferenceInputConfiguration.s3InputConfiguration) &&
        Objects.equals(this.inputTimeZoneOffset, inferenceInputConfiguration.inputTimeZoneOffset) &&
        Objects.equals(this.inferenceInputNameConfiguration, inferenceInputConfiguration.inferenceInputNameConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3InputConfiguration, inputTimeZoneOffset, inferenceInputNameConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InferenceInputConfiguration {\n");
    sb.append("    s3InputConfiguration: ").append(toIndentedString(s3InputConfiguration)).append("\n");
    sb.append("    inputTimeZoneOffset: ").append(toIndentedString(inputTimeZoneOffset)).append("\n");
    sb.append("    inferenceInputNameConfiguration: ").append(toIndentedString(inferenceInputNameConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S3InputConfiguration");
    openapiFields.add("InputTimeZoneOffset");
    openapiFields.add("InferenceInputNameConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InferenceInputConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InferenceInputConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InferenceInputConfiguration is not found in the empty JSON string", InferenceInputConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InferenceInputConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InferenceInputConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `S3InputConfiguration`
      if (jsonObj.get("S3InputConfiguration") != null && !jsonObj.get("S3InputConfiguration").isJsonNull()) {
        InferenceInputConfigurationS3InputConfiguration.validateJsonElement(jsonObj.get("S3InputConfiguration"));
      }
      // validate the optional field `InputTimeZoneOffset`
      if (jsonObj.get("InputTimeZoneOffset") != null && !jsonObj.get("InputTimeZoneOffset").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InputTimeZoneOffset"));
      }
      // validate the optional field `InferenceInputNameConfiguration`
      if (jsonObj.get("InferenceInputNameConfiguration") != null && !jsonObj.get("InferenceInputNameConfiguration").isJsonNull()) {
        InferenceInputConfigurationInferenceInputNameConfiguration.validateJsonElement(jsonObj.get("InferenceInputNameConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InferenceInputConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InferenceInputConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InferenceInputConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InferenceInputConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<InferenceInputConfiguration>() {
           @Override
           public void write(JsonWriter out, InferenceInputConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InferenceInputConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InferenceInputConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InferenceInputConfiguration
   * @throws IOException if the JSON string is invalid with respect to InferenceInputConfiguration
   */
  public static InferenceInputConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InferenceInputConfiguration.class);
  }

  /**
   * Convert an instance of InferenceInputConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

