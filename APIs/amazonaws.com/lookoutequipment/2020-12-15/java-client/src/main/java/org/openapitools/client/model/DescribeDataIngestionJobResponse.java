/*
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DescribeDataIngestionJobResponseDataQualitySummary;
import org.openapitools.client.model.DescribeDataIngestionJobResponseIngestionInputConfiguration;
import org.openapitools.client.model.IngestedFilesSummary;
import org.openapitools.client.model.IngestionJobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeDataIngestionJobResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:18.043707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDataIngestionJobResponse {
  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_DATASET_ARN = "DatasetArn";
  @SerializedName(SERIALIZED_NAME_DATASET_ARN)
  private String datasetArn;

  public static final String SERIALIZED_NAME_INGESTION_INPUT_CONFIGURATION = "IngestionInputConfiguration";
  @SerializedName(SERIALIZED_NAME_INGESTION_INPUT_CONFIGURATION)
  private DescribeDataIngestionJobResponseIngestionInputConfiguration ingestionInputConfiguration;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private IngestionJobStatus status;

  public static final String SERIALIZED_NAME_FAILED_REASON = "FailedReason";
  @SerializedName(SERIALIZED_NAME_FAILED_REASON)
  private String failedReason;

  public static final String SERIALIZED_NAME_DATA_QUALITY_SUMMARY = "DataQualitySummary";
  @SerializedName(SERIALIZED_NAME_DATA_QUALITY_SUMMARY)
  private DescribeDataIngestionJobResponseDataQualitySummary dataQualitySummary;

  public static final String SERIALIZED_NAME_INGESTED_FILES_SUMMARY = "IngestedFilesSummary";
  @SerializedName(SERIALIZED_NAME_INGESTED_FILES_SUMMARY)
  private IngestedFilesSummary ingestedFilesSummary;

  public static final String SERIALIZED_NAME_STATUS_DETAIL = "StatusDetail";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAIL)
  private String statusDetail;

  public static final String SERIALIZED_NAME_INGESTED_DATA_SIZE = "IngestedDataSize";
  @SerializedName(SERIALIZED_NAME_INGESTED_DATA_SIZE)
  private Integer ingestedDataSize;

  public static final String SERIALIZED_NAME_DATA_START_TIME = "DataStartTime";
  @SerializedName(SERIALIZED_NAME_DATA_START_TIME)
  private OffsetDateTime dataStartTime;

  public static final String SERIALIZED_NAME_DATA_END_TIME = "DataEndTime";
  @SerializedName(SERIALIZED_NAME_DATA_END_TIME)
  private OffsetDateTime dataEndTime;

  public static final String SERIALIZED_NAME_SOURCE_DATASET_ARN = "SourceDatasetArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATASET_ARN)
  private String sourceDatasetArn;

  public DescribeDataIngestionJobResponse() {
  }

  public DescribeDataIngestionJobResponse jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public DescribeDataIngestionJobResponse datasetArn(String datasetArn) {
    this.datasetArn = datasetArn;
    return this;
  }

  /**
   * Get datasetArn
   * @return datasetArn
   */
  @javax.annotation.Nullable
  public String getDatasetArn() {
    return datasetArn;
  }

  public void setDatasetArn(String datasetArn) {
    this.datasetArn = datasetArn;
  }


  public DescribeDataIngestionJobResponse ingestionInputConfiguration(DescribeDataIngestionJobResponseIngestionInputConfiguration ingestionInputConfiguration) {
    this.ingestionInputConfiguration = ingestionInputConfiguration;
    return this;
  }

  /**
   * Get ingestionInputConfiguration
   * @return ingestionInputConfiguration
   */
  @javax.annotation.Nullable
  public DescribeDataIngestionJobResponseIngestionInputConfiguration getIngestionInputConfiguration() {
    return ingestionInputConfiguration;
  }

  public void setIngestionInputConfiguration(DescribeDataIngestionJobResponseIngestionInputConfiguration ingestionInputConfiguration) {
    this.ingestionInputConfiguration = ingestionInputConfiguration;
  }


  public DescribeDataIngestionJobResponse roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public DescribeDataIngestionJobResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DescribeDataIngestionJobResponse status(IngestionJobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public IngestionJobStatus getStatus() {
    return status;
  }

  public void setStatus(IngestionJobStatus status) {
    this.status = status;
  }


  public DescribeDataIngestionJobResponse failedReason(String failedReason) {
    this.failedReason = failedReason;
    return this;
  }

  /**
   * Get failedReason
   * @return failedReason
   */
  @javax.annotation.Nullable
  public String getFailedReason() {
    return failedReason;
  }

  public void setFailedReason(String failedReason) {
    this.failedReason = failedReason;
  }


  public DescribeDataIngestionJobResponse dataQualitySummary(DescribeDataIngestionJobResponseDataQualitySummary dataQualitySummary) {
    this.dataQualitySummary = dataQualitySummary;
    return this;
  }

  /**
   * Get dataQualitySummary
   * @return dataQualitySummary
   */
  @javax.annotation.Nullable
  public DescribeDataIngestionJobResponseDataQualitySummary getDataQualitySummary() {
    return dataQualitySummary;
  }

  public void setDataQualitySummary(DescribeDataIngestionJobResponseDataQualitySummary dataQualitySummary) {
    this.dataQualitySummary = dataQualitySummary;
  }


  public DescribeDataIngestionJobResponse ingestedFilesSummary(IngestedFilesSummary ingestedFilesSummary) {
    this.ingestedFilesSummary = ingestedFilesSummary;
    return this;
  }

  /**
   * Get ingestedFilesSummary
   * @return ingestedFilesSummary
   */
  @javax.annotation.Nullable
  public IngestedFilesSummary getIngestedFilesSummary() {
    return ingestedFilesSummary;
  }

  public void setIngestedFilesSummary(IngestedFilesSummary ingestedFilesSummary) {
    this.ingestedFilesSummary = ingestedFilesSummary;
  }


  public DescribeDataIngestionJobResponse statusDetail(String statusDetail) {
    this.statusDetail = statusDetail;
    return this;
  }

  /**
   * Get statusDetail
   * @return statusDetail
   */
  @javax.annotation.Nullable
  public String getStatusDetail() {
    return statusDetail;
  }

  public void setStatusDetail(String statusDetail) {
    this.statusDetail = statusDetail;
  }


  public DescribeDataIngestionJobResponse ingestedDataSize(Integer ingestedDataSize) {
    this.ingestedDataSize = ingestedDataSize;
    return this;
  }

  /**
   * Get ingestedDataSize
   * @return ingestedDataSize
   */
  @javax.annotation.Nullable
  public Integer getIngestedDataSize() {
    return ingestedDataSize;
  }

  public void setIngestedDataSize(Integer ingestedDataSize) {
    this.ingestedDataSize = ingestedDataSize;
  }


  public DescribeDataIngestionJobResponse dataStartTime(OffsetDateTime dataStartTime) {
    this.dataStartTime = dataStartTime;
    return this;
  }

  /**
   * Get dataStartTime
   * @return dataStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDataStartTime() {
    return dataStartTime;
  }

  public void setDataStartTime(OffsetDateTime dataStartTime) {
    this.dataStartTime = dataStartTime;
  }


  public DescribeDataIngestionJobResponse dataEndTime(OffsetDateTime dataEndTime) {
    this.dataEndTime = dataEndTime;
    return this;
  }

  /**
   * Get dataEndTime
   * @return dataEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDataEndTime() {
    return dataEndTime;
  }

  public void setDataEndTime(OffsetDateTime dataEndTime) {
    this.dataEndTime = dataEndTime;
  }


  public DescribeDataIngestionJobResponse sourceDatasetArn(String sourceDatasetArn) {
    this.sourceDatasetArn = sourceDatasetArn;
    return this;
  }

  /**
   * Get sourceDatasetArn
   * @return sourceDatasetArn
   */
  @javax.annotation.Nullable
  public String getSourceDatasetArn() {
    return sourceDatasetArn;
  }

  public void setSourceDatasetArn(String sourceDatasetArn) {
    this.sourceDatasetArn = sourceDatasetArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDataIngestionJobResponse describeDataIngestionJobResponse = (DescribeDataIngestionJobResponse) o;
    return Objects.equals(this.jobId, describeDataIngestionJobResponse.jobId) &&
        Objects.equals(this.datasetArn, describeDataIngestionJobResponse.datasetArn) &&
        Objects.equals(this.ingestionInputConfiguration, describeDataIngestionJobResponse.ingestionInputConfiguration) &&
        Objects.equals(this.roleArn, describeDataIngestionJobResponse.roleArn) &&
        Objects.equals(this.createdAt, describeDataIngestionJobResponse.createdAt) &&
        Objects.equals(this.status, describeDataIngestionJobResponse.status) &&
        Objects.equals(this.failedReason, describeDataIngestionJobResponse.failedReason) &&
        Objects.equals(this.dataQualitySummary, describeDataIngestionJobResponse.dataQualitySummary) &&
        Objects.equals(this.ingestedFilesSummary, describeDataIngestionJobResponse.ingestedFilesSummary) &&
        Objects.equals(this.statusDetail, describeDataIngestionJobResponse.statusDetail) &&
        Objects.equals(this.ingestedDataSize, describeDataIngestionJobResponse.ingestedDataSize) &&
        Objects.equals(this.dataStartTime, describeDataIngestionJobResponse.dataStartTime) &&
        Objects.equals(this.dataEndTime, describeDataIngestionJobResponse.dataEndTime) &&
        Objects.equals(this.sourceDatasetArn, describeDataIngestionJobResponse.sourceDatasetArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, datasetArn, ingestionInputConfiguration, roleArn, createdAt, status, failedReason, dataQualitySummary, ingestedFilesSummary, statusDetail, ingestedDataSize, dataStartTime, dataEndTime, sourceDatasetArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDataIngestionJobResponse {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    datasetArn: ").append(toIndentedString(datasetArn)).append("\n");
    sb.append("    ingestionInputConfiguration: ").append(toIndentedString(ingestionInputConfiguration)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    failedReason: ").append(toIndentedString(failedReason)).append("\n");
    sb.append("    dataQualitySummary: ").append(toIndentedString(dataQualitySummary)).append("\n");
    sb.append("    ingestedFilesSummary: ").append(toIndentedString(ingestedFilesSummary)).append("\n");
    sb.append("    statusDetail: ").append(toIndentedString(statusDetail)).append("\n");
    sb.append("    ingestedDataSize: ").append(toIndentedString(ingestedDataSize)).append("\n");
    sb.append("    dataStartTime: ").append(toIndentedString(dataStartTime)).append("\n");
    sb.append("    dataEndTime: ").append(toIndentedString(dataEndTime)).append("\n");
    sb.append("    sourceDatasetArn: ").append(toIndentedString(sourceDatasetArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobId");
    openapiFields.add("DatasetArn");
    openapiFields.add("IngestionInputConfiguration");
    openapiFields.add("RoleArn");
    openapiFields.add("CreatedAt");
    openapiFields.add("Status");
    openapiFields.add("FailedReason");
    openapiFields.add("DataQualitySummary");
    openapiFields.add("IngestedFilesSummary");
    openapiFields.add("StatusDetail");
    openapiFields.add("IngestedDataSize");
    openapiFields.add("DataStartTime");
    openapiFields.add("DataEndTime");
    openapiFields.add("SourceDatasetArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDataIngestionJobResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDataIngestionJobResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDataIngestionJobResponse is not found in the empty JSON string", DescribeDataIngestionJobResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDataIngestionJobResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDataIngestionJobResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JobId`
      if (jsonObj.get("JobId") != null && !jsonObj.get("JobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobId"));
      }
      // validate the optional field `DatasetArn`
      if (jsonObj.get("DatasetArn") != null && !jsonObj.get("DatasetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatasetArn"));
      }
      // validate the optional field `IngestionInputConfiguration`
      if (jsonObj.get("IngestionInputConfiguration") != null && !jsonObj.get("IngestionInputConfiguration").isJsonNull()) {
        DescribeDataIngestionJobResponseIngestionInputConfiguration.validateJsonElement(jsonObj.get("IngestionInputConfiguration"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        IngestionJobStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `FailedReason`
      if (jsonObj.get("FailedReason") != null && !jsonObj.get("FailedReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FailedReason"));
      }
      // validate the optional field `DataQualitySummary`
      if (jsonObj.get("DataQualitySummary") != null && !jsonObj.get("DataQualitySummary").isJsonNull()) {
        DescribeDataIngestionJobResponseDataQualitySummary.validateJsonElement(jsonObj.get("DataQualitySummary"));
      }
      // validate the optional field `IngestedFilesSummary`
      if (jsonObj.get("IngestedFilesSummary") != null && !jsonObj.get("IngestedFilesSummary").isJsonNull()) {
        IngestedFilesSummary.validateJsonElement(jsonObj.get("IngestedFilesSummary"));
      }
      // validate the optional field `StatusDetail`
      if (jsonObj.get("StatusDetail") != null && !jsonObj.get("StatusDetail").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusDetail"));
      }
      // validate the optional field `IngestedDataSize`
      if (jsonObj.get("IngestedDataSize") != null && !jsonObj.get("IngestedDataSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("IngestedDataSize"));
      }
      // validate the optional field `DataStartTime`
      if (jsonObj.get("DataStartTime") != null && !jsonObj.get("DataStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DataStartTime"));
      }
      // validate the optional field `DataEndTime`
      if (jsonObj.get("DataEndTime") != null && !jsonObj.get("DataEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DataEndTime"));
      }
      // validate the optional field `SourceDatasetArn`
      if (jsonObj.get("SourceDatasetArn") != null && !jsonObj.get("SourceDatasetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceDatasetArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDataIngestionJobResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDataIngestionJobResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDataIngestionJobResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDataIngestionJobResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDataIngestionJobResponse>() {
           @Override
           public void write(JsonWriter out, DescribeDataIngestionJobResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDataIngestionJobResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDataIngestionJobResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDataIngestionJobResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeDataIngestionJobResponse
   */
  public static DescribeDataIngestionJobResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDataIngestionJobResponse.class);
  }

  /**
   * Convert an instance of DescribeDataIngestionJobResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

