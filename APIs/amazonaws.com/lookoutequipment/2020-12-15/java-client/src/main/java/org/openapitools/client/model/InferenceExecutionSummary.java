/*
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DescribeInferenceSchedulerResponseDataInputConfiguration;
import org.openapitools.client.model.InferenceExecutionStatus;
import org.openapitools.client.model.InferenceExecutionSummaryCustomerResultObject;
import org.openapitools.client.model.InferenceExecutionSummaryDataOutputConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the specific inference execution, including input and output data configuration, inference scheduling information, status, and so on. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:18.043707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InferenceExecutionSummary {
  public static final String SERIALIZED_NAME_MODEL_NAME = "ModelName";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public static final String SERIALIZED_NAME_MODEL_ARN = "ModelArn";
  @SerializedName(SERIALIZED_NAME_MODEL_ARN)
  private String modelArn;

  public static final String SERIALIZED_NAME_INFERENCE_SCHEDULER_NAME = "InferenceSchedulerName";
  @SerializedName(SERIALIZED_NAME_INFERENCE_SCHEDULER_NAME)
  private String inferenceSchedulerName;

  public static final String SERIALIZED_NAME_INFERENCE_SCHEDULER_ARN = "InferenceSchedulerArn";
  @SerializedName(SERIALIZED_NAME_INFERENCE_SCHEDULER_ARN)
  private String inferenceSchedulerArn;

  public static final String SERIALIZED_NAME_SCHEDULED_START_TIME = "ScheduledStartTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_START_TIME)
  private OffsetDateTime scheduledStartTime;

  public static final String SERIALIZED_NAME_DATA_START_TIME = "DataStartTime";
  @SerializedName(SERIALIZED_NAME_DATA_START_TIME)
  private OffsetDateTime dataStartTime;

  public static final String SERIALIZED_NAME_DATA_END_TIME = "DataEndTime";
  @SerializedName(SERIALIZED_NAME_DATA_END_TIME)
  private OffsetDateTime dataEndTime;

  public static final String SERIALIZED_NAME_DATA_INPUT_CONFIGURATION = "DataInputConfiguration";
  @SerializedName(SERIALIZED_NAME_DATA_INPUT_CONFIGURATION)
  private DescribeInferenceSchedulerResponseDataInputConfiguration dataInputConfiguration;

  public static final String SERIALIZED_NAME_DATA_OUTPUT_CONFIGURATION = "DataOutputConfiguration";
  @SerializedName(SERIALIZED_NAME_DATA_OUTPUT_CONFIGURATION)
  private InferenceExecutionSummaryDataOutputConfiguration dataOutputConfiguration;

  public static final String SERIALIZED_NAME_CUSTOMER_RESULT_OBJECT = "CustomerResultObject";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_RESULT_OBJECT)
  private InferenceExecutionSummaryCustomerResultObject customerResultObject;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private InferenceExecutionStatus status;

  public static final String SERIALIZED_NAME_FAILED_REASON = "FailedReason";
  @SerializedName(SERIALIZED_NAME_FAILED_REASON)
  private String failedReason;

  public InferenceExecutionSummary() {
  }

  public InferenceExecutionSummary modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

  /**
   * Get modelName
   * @return modelName
   */
  @javax.annotation.Nullable
  public String getModelName() {
    return modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public InferenceExecutionSummary modelArn(String modelArn) {
    this.modelArn = modelArn;
    return this;
  }

  /**
   * Get modelArn
   * @return modelArn
   */
  @javax.annotation.Nullable
  public String getModelArn() {
    return modelArn;
  }

  public void setModelArn(String modelArn) {
    this.modelArn = modelArn;
  }


  public InferenceExecutionSummary inferenceSchedulerName(String inferenceSchedulerName) {
    this.inferenceSchedulerName = inferenceSchedulerName;
    return this;
  }

  /**
   * Get inferenceSchedulerName
   * @return inferenceSchedulerName
   */
  @javax.annotation.Nullable
  public String getInferenceSchedulerName() {
    return inferenceSchedulerName;
  }

  public void setInferenceSchedulerName(String inferenceSchedulerName) {
    this.inferenceSchedulerName = inferenceSchedulerName;
  }


  public InferenceExecutionSummary inferenceSchedulerArn(String inferenceSchedulerArn) {
    this.inferenceSchedulerArn = inferenceSchedulerArn;
    return this;
  }

  /**
   * Get inferenceSchedulerArn
   * @return inferenceSchedulerArn
   */
  @javax.annotation.Nullable
  public String getInferenceSchedulerArn() {
    return inferenceSchedulerArn;
  }

  public void setInferenceSchedulerArn(String inferenceSchedulerArn) {
    this.inferenceSchedulerArn = inferenceSchedulerArn;
  }


  public InferenceExecutionSummary scheduledStartTime(OffsetDateTime scheduledStartTime) {
    this.scheduledStartTime = scheduledStartTime;
    return this;
  }

  /**
   * Get scheduledStartTime
   * @return scheduledStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledStartTime() {
    return scheduledStartTime;
  }

  public void setScheduledStartTime(OffsetDateTime scheduledStartTime) {
    this.scheduledStartTime = scheduledStartTime;
  }


  public InferenceExecutionSummary dataStartTime(OffsetDateTime dataStartTime) {
    this.dataStartTime = dataStartTime;
    return this;
  }

  /**
   * Get dataStartTime
   * @return dataStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDataStartTime() {
    return dataStartTime;
  }

  public void setDataStartTime(OffsetDateTime dataStartTime) {
    this.dataStartTime = dataStartTime;
  }


  public InferenceExecutionSummary dataEndTime(OffsetDateTime dataEndTime) {
    this.dataEndTime = dataEndTime;
    return this;
  }

  /**
   * Get dataEndTime
   * @return dataEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDataEndTime() {
    return dataEndTime;
  }

  public void setDataEndTime(OffsetDateTime dataEndTime) {
    this.dataEndTime = dataEndTime;
  }


  public InferenceExecutionSummary dataInputConfiguration(DescribeInferenceSchedulerResponseDataInputConfiguration dataInputConfiguration) {
    this.dataInputConfiguration = dataInputConfiguration;
    return this;
  }

  /**
   * Get dataInputConfiguration
   * @return dataInputConfiguration
   */
  @javax.annotation.Nullable
  public DescribeInferenceSchedulerResponseDataInputConfiguration getDataInputConfiguration() {
    return dataInputConfiguration;
  }

  public void setDataInputConfiguration(DescribeInferenceSchedulerResponseDataInputConfiguration dataInputConfiguration) {
    this.dataInputConfiguration = dataInputConfiguration;
  }


  public InferenceExecutionSummary dataOutputConfiguration(InferenceExecutionSummaryDataOutputConfiguration dataOutputConfiguration) {
    this.dataOutputConfiguration = dataOutputConfiguration;
    return this;
  }

  /**
   * Get dataOutputConfiguration
   * @return dataOutputConfiguration
   */
  @javax.annotation.Nullable
  public InferenceExecutionSummaryDataOutputConfiguration getDataOutputConfiguration() {
    return dataOutputConfiguration;
  }

  public void setDataOutputConfiguration(InferenceExecutionSummaryDataOutputConfiguration dataOutputConfiguration) {
    this.dataOutputConfiguration = dataOutputConfiguration;
  }


  public InferenceExecutionSummary customerResultObject(InferenceExecutionSummaryCustomerResultObject customerResultObject) {
    this.customerResultObject = customerResultObject;
    return this;
  }

  /**
   * Get customerResultObject
   * @return customerResultObject
   */
  @javax.annotation.Nullable
  public InferenceExecutionSummaryCustomerResultObject getCustomerResultObject() {
    return customerResultObject;
  }

  public void setCustomerResultObject(InferenceExecutionSummaryCustomerResultObject customerResultObject) {
    this.customerResultObject = customerResultObject;
  }


  public InferenceExecutionSummary status(InferenceExecutionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public InferenceExecutionStatus getStatus() {
    return status;
  }

  public void setStatus(InferenceExecutionStatus status) {
    this.status = status;
  }


  public InferenceExecutionSummary failedReason(String failedReason) {
    this.failedReason = failedReason;
    return this;
  }

  /**
   * Get failedReason
   * @return failedReason
   */
  @javax.annotation.Nullable
  public String getFailedReason() {
    return failedReason;
  }

  public void setFailedReason(String failedReason) {
    this.failedReason = failedReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InferenceExecutionSummary inferenceExecutionSummary = (InferenceExecutionSummary) o;
    return Objects.equals(this.modelName, inferenceExecutionSummary.modelName) &&
        Objects.equals(this.modelArn, inferenceExecutionSummary.modelArn) &&
        Objects.equals(this.inferenceSchedulerName, inferenceExecutionSummary.inferenceSchedulerName) &&
        Objects.equals(this.inferenceSchedulerArn, inferenceExecutionSummary.inferenceSchedulerArn) &&
        Objects.equals(this.scheduledStartTime, inferenceExecutionSummary.scheduledStartTime) &&
        Objects.equals(this.dataStartTime, inferenceExecutionSummary.dataStartTime) &&
        Objects.equals(this.dataEndTime, inferenceExecutionSummary.dataEndTime) &&
        Objects.equals(this.dataInputConfiguration, inferenceExecutionSummary.dataInputConfiguration) &&
        Objects.equals(this.dataOutputConfiguration, inferenceExecutionSummary.dataOutputConfiguration) &&
        Objects.equals(this.customerResultObject, inferenceExecutionSummary.customerResultObject) &&
        Objects.equals(this.status, inferenceExecutionSummary.status) &&
        Objects.equals(this.failedReason, inferenceExecutionSummary.failedReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelName, modelArn, inferenceSchedulerName, inferenceSchedulerArn, scheduledStartTime, dataStartTime, dataEndTime, dataInputConfiguration, dataOutputConfiguration, customerResultObject, status, failedReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InferenceExecutionSummary {\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    modelArn: ").append(toIndentedString(modelArn)).append("\n");
    sb.append("    inferenceSchedulerName: ").append(toIndentedString(inferenceSchedulerName)).append("\n");
    sb.append("    inferenceSchedulerArn: ").append(toIndentedString(inferenceSchedulerArn)).append("\n");
    sb.append("    scheduledStartTime: ").append(toIndentedString(scheduledStartTime)).append("\n");
    sb.append("    dataStartTime: ").append(toIndentedString(dataStartTime)).append("\n");
    sb.append("    dataEndTime: ").append(toIndentedString(dataEndTime)).append("\n");
    sb.append("    dataInputConfiguration: ").append(toIndentedString(dataInputConfiguration)).append("\n");
    sb.append("    dataOutputConfiguration: ").append(toIndentedString(dataOutputConfiguration)).append("\n");
    sb.append("    customerResultObject: ").append(toIndentedString(customerResultObject)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    failedReason: ").append(toIndentedString(failedReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ModelName");
    openapiFields.add("ModelArn");
    openapiFields.add("InferenceSchedulerName");
    openapiFields.add("InferenceSchedulerArn");
    openapiFields.add("ScheduledStartTime");
    openapiFields.add("DataStartTime");
    openapiFields.add("DataEndTime");
    openapiFields.add("DataInputConfiguration");
    openapiFields.add("DataOutputConfiguration");
    openapiFields.add("CustomerResultObject");
    openapiFields.add("Status");
    openapiFields.add("FailedReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InferenceExecutionSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InferenceExecutionSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InferenceExecutionSummary is not found in the empty JSON string", InferenceExecutionSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InferenceExecutionSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InferenceExecutionSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ModelName`
      if (jsonObj.get("ModelName") != null && !jsonObj.get("ModelName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ModelName"));
      }
      // validate the optional field `ModelArn`
      if (jsonObj.get("ModelArn") != null && !jsonObj.get("ModelArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ModelArn"));
      }
      // validate the optional field `InferenceSchedulerName`
      if (jsonObj.get("InferenceSchedulerName") != null && !jsonObj.get("InferenceSchedulerName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InferenceSchedulerName"));
      }
      // validate the optional field `InferenceSchedulerArn`
      if (jsonObj.get("InferenceSchedulerArn") != null && !jsonObj.get("InferenceSchedulerArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InferenceSchedulerArn"));
      }
      // validate the optional field `ScheduledStartTime`
      if (jsonObj.get("ScheduledStartTime") != null && !jsonObj.get("ScheduledStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ScheduledStartTime"));
      }
      // validate the optional field `DataStartTime`
      if (jsonObj.get("DataStartTime") != null && !jsonObj.get("DataStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DataStartTime"));
      }
      // validate the optional field `DataEndTime`
      if (jsonObj.get("DataEndTime") != null && !jsonObj.get("DataEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DataEndTime"));
      }
      // validate the optional field `DataInputConfiguration`
      if (jsonObj.get("DataInputConfiguration") != null && !jsonObj.get("DataInputConfiguration").isJsonNull()) {
        DescribeInferenceSchedulerResponseDataInputConfiguration.validateJsonElement(jsonObj.get("DataInputConfiguration"));
      }
      // validate the optional field `DataOutputConfiguration`
      if (jsonObj.get("DataOutputConfiguration") != null && !jsonObj.get("DataOutputConfiguration").isJsonNull()) {
        InferenceExecutionSummaryDataOutputConfiguration.validateJsonElement(jsonObj.get("DataOutputConfiguration"));
      }
      // validate the optional field `CustomerResultObject`
      if (jsonObj.get("CustomerResultObject") != null && !jsonObj.get("CustomerResultObject").isJsonNull()) {
        InferenceExecutionSummaryCustomerResultObject.validateJsonElement(jsonObj.get("CustomerResultObject"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        InferenceExecutionStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `FailedReason`
      if (jsonObj.get("FailedReason") != null && !jsonObj.get("FailedReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FailedReason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InferenceExecutionSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InferenceExecutionSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InferenceExecutionSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InferenceExecutionSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<InferenceExecutionSummary>() {
           @Override
           public void write(JsonWriter out, InferenceExecutionSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InferenceExecutionSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InferenceExecutionSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InferenceExecutionSummary
   * @throws IOException if the JSON string is invalid with respect to InferenceExecutionSummary
   */
  public static InferenceExecutionSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InferenceExecutionSummary.class);
  }

  /**
   * Convert an instance of InferenceExecutionSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

