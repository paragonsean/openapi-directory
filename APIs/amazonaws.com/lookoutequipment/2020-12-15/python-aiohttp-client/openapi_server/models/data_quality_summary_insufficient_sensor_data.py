# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.insufficient_sensor_data_missing_complete_sensor_data import InsufficientSensorDataMissingCompleteSensorData
from openapi_server.models.insufficient_sensor_data_sensors_with_short_date_range import InsufficientSensorDataSensorsWithShortDateRange
from openapi_server import util


class DataQualitySummaryInsufficientSensorData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, missing_complete_sensor_data: InsufficientSensorDataMissingCompleteSensorData=None, sensors_with_short_date_range: InsufficientSensorDataSensorsWithShortDateRange=None):
        """DataQualitySummaryInsufficientSensorData - a model defined in OpenAPI

        :param missing_complete_sensor_data: The missing_complete_sensor_data of this DataQualitySummaryInsufficientSensorData.
        :param sensors_with_short_date_range: The sensors_with_short_date_range of this DataQualitySummaryInsufficientSensorData.
        """
        self.openapi_types = {
            'missing_complete_sensor_data': InsufficientSensorDataMissingCompleteSensorData,
            'sensors_with_short_date_range': InsufficientSensorDataSensorsWithShortDateRange
        }

        self.attribute_map = {
            'missing_complete_sensor_data': 'MissingCompleteSensorData',
            'sensors_with_short_date_range': 'SensorsWithShortDateRange'
        }

        self._missing_complete_sensor_data = missing_complete_sensor_data
        self._sensors_with_short_date_range = sensors_with_short_date_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataQualitySummaryInsufficientSensorData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataQualitySummary_InsufficientSensorData of this DataQualitySummaryInsufficientSensorData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def missing_complete_sensor_data(self):
        """Gets the missing_complete_sensor_data of this DataQualitySummaryInsufficientSensorData.


        :return: The missing_complete_sensor_data of this DataQualitySummaryInsufficientSensorData.
        :rtype: InsufficientSensorDataMissingCompleteSensorData
        """
        return self._missing_complete_sensor_data

    @missing_complete_sensor_data.setter
    def missing_complete_sensor_data(self, missing_complete_sensor_data):
        """Sets the missing_complete_sensor_data of this DataQualitySummaryInsufficientSensorData.


        :param missing_complete_sensor_data: The missing_complete_sensor_data of this DataQualitySummaryInsufficientSensorData.
        :type missing_complete_sensor_data: InsufficientSensorDataMissingCompleteSensorData
        """
        if missing_complete_sensor_data is None:
            raise ValueError("Invalid value for `missing_complete_sensor_data`, must not be `None`")

        self._missing_complete_sensor_data = missing_complete_sensor_data

    @property
    def sensors_with_short_date_range(self):
        """Gets the sensors_with_short_date_range of this DataQualitySummaryInsufficientSensorData.


        :return: The sensors_with_short_date_range of this DataQualitySummaryInsufficientSensorData.
        :rtype: InsufficientSensorDataSensorsWithShortDateRange
        """
        return self._sensors_with_short_date_range

    @sensors_with_short_date_range.setter
    def sensors_with_short_date_range(self, sensors_with_short_date_range):
        """Sets the sensors_with_short_date_range of this DataQualitySummaryInsufficientSensorData.


        :param sensors_with_short_date_range: The sensors_with_short_date_range of this DataQualitySummaryInsufficientSensorData.
        :type sensors_with_short_date_range: InsufficientSensorDataSensorsWithShortDateRange
        """
        if sensors_with_short_date_range is None:
            raise ValueError("Invalid value for `sensors_with_short_date_range`, must not be `None`")

        self._sensors_with_short_date_range = sensors_with_short_date_range
