# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monotonicity import Monotonicity
from openapi_server.models.statistical_issue_status import StatisticalIssueStatus
from openapi_server import util


class SensorStatisticsSummaryMonotonicValues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: StatisticalIssueStatus=None, monotonicity: Monotonicity=None):
        """SensorStatisticsSummaryMonotonicValues - a model defined in OpenAPI

        :param status: The status of this SensorStatisticsSummaryMonotonicValues.
        :param monotonicity: The monotonicity of this SensorStatisticsSummaryMonotonicValues.
        """
        self.openapi_types = {
            'status': StatisticalIssueStatus,
            'monotonicity': Monotonicity
        }

        self.attribute_map = {
            'status': 'Status',
            'monotonicity': 'Monotonicity'
        }

        self._status = status
        self._monotonicity = monotonicity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SensorStatisticsSummaryMonotonicValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SensorStatisticsSummary_MonotonicValues of this SensorStatisticsSummaryMonotonicValues.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this SensorStatisticsSummaryMonotonicValues.


        :return: The status of this SensorStatisticsSummaryMonotonicValues.
        :rtype: StatisticalIssueStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SensorStatisticsSummaryMonotonicValues.


        :param status: The status of this SensorStatisticsSummaryMonotonicValues.
        :type status: StatisticalIssueStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def monotonicity(self):
        """Gets the monotonicity of this SensorStatisticsSummaryMonotonicValues.


        :return: The monotonicity of this SensorStatisticsSummaryMonotonicValues.
        :rtype: Monotonicity
        """
        return self._monotonicity

    @monotonicity.setter
    def monotonicity(self, monotonicity):
        """Sets the monotonicity of this SensorStatisticsSummaryMonotonicValues.


        :param monotonicity: The monotonicity of this SensorStatisticsSummaryMonotonicValues.
        :type monotonicity: Monotonicity
        """

        self._monotonicity = monotonicity
