# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dataset_status import DatasetStatus
from openapi_server import util


class ImportDatasetResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_name: str=None, dataset_arn: str=None, status: DatasetStatus=None, job_id: str=None):
        """ImportDatasetResponse - a model defined in OpenAPI

        :param dataset_name: The dataset_name of this ImportDatasetResponse.
        :param dataset_arn: The dataset_arn of this ImportDatasetResponse.
        :param status: The status of this ImportDatasetResponse.
        :param job_id: The job_id of this ImportDatasetResponse.
        """
        self.openapi_types = {
            'dataset_name': str,
            'dataset_arn': str,
            'status': DatasetStatus,
            'job_id': str
        }

        self.attribute_map = {
            'dataset_name': 'DatasetName',
            'dataset_arn': 'DatasetArn',
            'status': 'Status',
            'job_id': 'JobId'
        }

        self._dataset_name = dataset_name
        self._dataset_arn = dataset_arn
        self._status = status
        self._job_id = job_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportDatasetResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportDatasetResponse of this ImportDatasetResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_name(self):
        """Gets the dataset_name of this ImportDatasetResponse.


        :return: The dataset_name of this ImportDatasetResponse.
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this ImportDatasetResponse.


        :param dataset_name: The dataset_name of this ImportDatasetResponse.
        :type dataset_name: str
        """

        self._dataset_name = dataset_name

    @property
    def dataset_arn(self):
        """Gets the dataset_arn of this ImportDatasetResponse.


        :return: The dataset_arn of this ImportDatasetResponse.
        :rtype: str
        """
        return self._dataset_arn

    @dataset_arn.setter
    def dataset_arn(self, dataset_arn):
        """Sets the dataset_arn of this ImportDatasetResponse.


        :param dataset_arn: The dataset_arn of this ImportDatasetResponse.
        :type dataset_arn: str
        """

        self._dataset_arn = dataset_arn

    @property
    def status(self):
        """Gets the status of this ImportDatasetResponse.


        :return: The status of this ImportDatasetResponse.
        :rtype: DatasetStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImportDatasetResponse.


        :param status: The status of this ImportDatasetResponse.
        :type status: DatasetStatus
        """

        self._status = status

    @property
    def job_id(self):
        """Gets the job_id of this ImportDatasetResponse.


        :return: The job_id of this ImportDatasetResponse.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ImportDatasetResponse.


        :param job_id: The job_id of this ImportDatasetResponse.
        :type job_id: str
        """

        self._job_id = job_id
