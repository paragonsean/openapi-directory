# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IngestedFilesSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_number_of_files: int=None, ingested_number_of_files: int=None, discarded_files: List=None):
        """IngestedFilesSummary - a model defined in OpenAPI

        :param total_number_of_files: The total_number_of_files of this IngestedFilesSummary.
        :param ingested_number_of_files: The ingested_number_of_files of this IngestedFilesSummary.
        :param discarded_files: The discarded_files of this IngestedFilesSummary.
        """
        self.openapi_types = {
            'total_number_of_files': int,
            'ingested_number_of_files': int,
            'discarded_files': List
        }

        self.attribute_map = {
            'total_number_of_files': 'TotalNumberOfFiles',
            'ingested_number_of_files': 'IngestedNumberOfFiles',
            'discarded_files': 'DiscardedFiles'
        }

        self._total_number_of_files = total_number_of_files
        self._ingested_number_of_files = ingested_number_of_files
        self._discarded_files = discarded_files

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IngestedFilesSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IngestedFilesSummary of this IngestedFilesSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_number_of_files(self):
        """Gets the total_number_of_files of this IngestedFilesSummary.


        :return: The total_number_of_files of this IngestedFilesSummary.
        :rtype: int
        """
        return self._total_number_of_files

    @total_number_of_files.setter
    def total_number_of_files(self, total_number_of_files):
        """Sets the total_number_of_files of this IngestedFilesSummary.


        :param total_number_of_files: The total_number_of_files of this IngestedFilesSummary.
        :type total_number_of_files: int
        """
        if total_number_of_files is None:
            raise ValueError("Invalid value for `total_number_of_files`, must not be `None`")

        self._total_number_of_files = total_number_of_files

    @property
    def ingested_number_of_files(self):
        """Gets the ingested_number_of_files of this IngestedFilesSummary.


        :return: The ingested_number_of_files of this IngestedFilesSummary.
        :rtype: int
        """
        return self._ingested_number_of_files

    @ingested_number_of_files.setter
    def ingested_number_of_files(self, ingested_number_of_files):
        """Sets the ingested_number_of_files of this IngestedFilesSummary.


        :param ingested_number_of_files: The ingested_number_of_files of this IngestedFilesSummary.
        :type ingested_number_of_files: int
        """
        if ingested_number_of_files is None:
            raise ValueError("Invalid value for `ingested_number_of_files`, must not be `None`")

        self._ingested_number_of_files = ingested_number_of_files

    @property
    def discarded_files(self):
        """Gets the discarded_files of this IngestedFilesSummary.


        :return: The discarded_files of this IngestedFilesSummary.
        :rtype: List
        """
        return self._discarded_files

    @discarded_files.setter
    def discarded_files(self, discarded_files):
        """Sets the discarded_files of this IngestedFilesSummary.


        :param discarded_files: The discarded_files of this IngestedFilesSummary.
        :type discarded_files: List
        """

        self._discarded_files = discarded_files
