# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_inference_scheduler_request_data_input_configuration import CreateInferenceSchedulerRequestDataInputConfiguration
from openapi_server.models.create_inference_scheduler_request_data_output_configuration import CreateInferenceSchedulerRequestDataOutputConfiguration
from openapi_server.models.data_upload_frequency import DataUploadFrequency
from openapi_server import util


class CreateInferenceSchedulerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_name: str=None, inference_scheduler_name: str=None, data_delay_offset_in_minutes: int=None, data_upload_frequency: DataUploadFrequency=None, data_input_configuration: CreateInferenceSchedulerRequestDataInputConfiguration=None, data_output_configuration: CreateInferenceSchedulerRequestDataOutputConfiguration=None, role_arn: str=None, server_side_kms_key_id: str=None, client_token: str=None, tags: List=None):
        """CreateInferenceSchedulerRequest - a model defined in OpenAPI

        :param model_name: The model_name of this CreateInferenceSchedulerRequest.
        :param inference_scheduler_name: The inference_scheduler_name of this CreateInferenceSchedulerRequest.
        :param data_delay_offset_in_minutes: The data_delay_offset_in_minutes of this CreateInferenceSchedulerRequest.
        :param data_upload_frequency: The data_upload_frequency of this CreateInferenceSchedulerRequest.
        :param data_input_configuration: The data_input_configuration of this CreateInferenceSchedulerRequest.
        :param data_output_configuration: The data_output_configuration of this CreateInferenceSchedulerRequest.
        :param role_arn: The role_arn of this CreateInferenceSchedulerRequest.
        :param server_side_kms_key_id: The server_side_kms_key_id of this CreateInferenceSchedulerRequest.
        :param client_token: The client_token of this CreateInferenceSchedulerRequest.
        :param tags: The tags of this CreateInferenceSchedulerRequest.
        """
        self.openapi_types = {
            'model_name': str,
            'inference_scheduler_name': str,
            'data_delay_offset_in_minutes': int,
            'data_upload_frequency': DataUploadFrequency,
            'data_input_configuration': CreateInferenceSchedulerRequestDataInputConfiguration,
            'data_output_configuration': CreateInferenceSchedulerRequestDataOutputConfiguration,
            'role_arn': str,
            'server_side_kms_key_id': str,
            'client_token': str,
            'tags': List
        }

        self.attribute_map = {
            'model_name': 'ModelName',
            'inference_scheduler_name': 'InferenceSchedulerName',
            'data_delay_offset_in_minutes': 'DataDelayOffsetInMinutes',
            'data_upload_frequency': 'DataUploadFrequency',
            'data_input_configuration': 'DataInputConfiguration',
            'data_output_configuration': 'DataOutputConfiguration',
            'role_arn': 'RoleArn',
            'server_side_kms_key_id': 'ServerSideKmsKeyId',
            'client_token': 'ClientToken',
            'tags': 'Tags'
        }

        self._model_name = model_name
        self._inference_scheduler_name = inference_scheduler_name
        self._data_delay_offset_in_minutes = data_delay_offset_in_minutes
        self._data_upload_frequency = data_upload_frequency
        self._data_input_configuration = data_input_configuration
        self._data_output_configuration = data_output_configuration
        self._role_arn = role_arn
        self._server_side_kms_key_id = server_side_kms_key_id
        self._client_token = client_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateInferenceSchedulerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateInferenceSchedulerRequest of this CreateInferenceSchedulerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_name(self):
        """Gets the model_name of this CreateInferenceSchedulerRequest.


        :return: The model_name of this CreateInferenceSchedulerRequest.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this CreateInferenceSchedulerRequest.


        :param model_name: The model_name of this CreateInferenceSchedulerRequest.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")

        self._model_name = model_name

    @property
    def inference_scheduler_name(self):
        """Gets the inference_scheduler_name of this CreateInferenceSchedulerRequest.


        :return: The inference_scheduler_name of this CreateInferenceSchedulerRequest.
        :rtype: str
        """
        return self._inference_scheduler_name

    @inference_scheduler_name.setter
    def inference_scheduler_name(self, inference_scheduler_name):
        """Sets the inference_scheduler_name of this CreateInferenceSchedulerRequest.


        :param inference_scheduler_name: The inference_scheduler_name of this CreateInferenceSchedulerRequest.
        :type inference_scheduler_name: str
        """
        if inference_scheduler_name is None:
            raise ValueError("Invalid value for `inference_scheduler_name`, must not be `None`")

        self._inference_scheduler_name = inference_scheduler_name

    @property
    def data_delay_offset_in_minutes(self):
        """Gets the data_delay_offset_in_minutes of this CreateInferenceSchedulerRequest.


        :return: The data_delay_offset_in_minutes of this CreateInferenceSchedulerRequest.
        :rtype: int
        """
        return self._data_delay_offset_in_minutes

    @data_delay_offset_in_minutes.setter
    def data_delay_offset_in_minutes(self, data_delay_offset_in_minutes):
        """Sets the data_delay_offset_in_minutes of this CreateInferenceSchedulerRequest.


        :param data_delay_offset_in_minutes: The data_delay_offset_in_minutes of this CreateInferenceSchedulerRequest.
        :type data_delay_offset_in_minutes: int
        """

        self._data_delay_offset_in_minutes = data_delay_offset_in_minutes

    @property
    def data_upload_frequency(self):
        """Gets the data_upload_frequency of this CreateInferenceSchedulerRequest.


        :return: The data_upload_frequency of this CreateInferenceSchedulerRequest.
        :rtype: DataUploadFrequency
        """
        return self._data_upload_frequency

    @data_upload_frequency.setter
    def data_upload_frequency(self, data_upload_frequency):
        """Sets the data_upload_frequency of this CreateInferenceSchedulerRequest.


        :param data_upload_frequency: The data_upload_frequency of this CreateInferenceSchedulerRequest.
        :type data_upload_frequency: DataUploadFrequency
        """
        if data_upload_frequency is None:
            raise ValueError("Invalid value for `data_upload_frequency`, must not be `None`")

        self._data_upload_frequency = data_upload_frequency

    @property
    def data_input_configuration(self):
        """Gets the data_input_configuration of this CreateInferenceSchedulerRequest.


        :return: The data_input_configuration of this CreateInferenceSchedulerRequest.
        :rtype: CreateInferenceSchedulerRequestDataInputConfiguration
        """
        return self._data_input_configuration

    @data_input_configuration.setter
    def data_input_configuration(self, data_input_configuration):
        """Sets the data_input_configuration of this CreateInferenceSchedulerRequest.


        :param data_input_configuration: The data_input_configuration of this CreateInferenceSchedulerRequest.
        :type data_input_configuration: CreateInferenceSchedulerRequestDataInputConfiguration
        """
        if data_input_configuration is None:
            raise ValueError("Invalid value for `data_input_configuration`, must not be `None`")

        self._data_input_configuration = data_input_configuration

    @property
    def data_output_configuration(self):
        """Gets the data_output_configuration of this CreateInferenceSchedulerRequest.


        :return: The data_output_configuration of this CreateInferenceSchedulerRequest.
        :rtype: CreateInferenceSchedulerRequestDataOutputConfiguration
        """
        return self._data_output_configuration

    @data_output_configuration.setter
    def data_output_configuration(self, data_output_configuration):
        """Sets the data_output_configuration of this CreateInferenceSchedulerRequest.


        :param data_output_configuration: The data_output_configuration of this CreateInferenceSchedulerRequest.
        :type data_output_configuration: CreateInferenceSchedulerRequestDataOutputConfiguration
        """
        if data_output_configuration is None:
            raise ValueError("Invalid value for `data_output_configuration`, must not be `None`")

        self._data_output_configuration = data_output_configuration

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateInferenceSchedulerRequest.


        :return: The role_arn of this CreateInferenceSchedulerRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateInferenceSchedulerRequest.


        :param role_arn: The role_arn of this CreateInferenceSchedulerRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def server_side_kms_key_id(self):
        """Gets the server_side_kms_key_id of this CreateInferenceSchedulerRequest.


        :return: The server_side_kms_key_id of this CreateInferenceSchedulerRequest.
        :rtype: str
        """
        return self._server_side_kms_key_id

    @server_side_kms_key_id.setter
    def server_side_kms_key_id(self, server_side_kms_key_id):
        """Sets the server_side_kms_key_id of this CreateInferenceSchedulerRequest.


        :param server_side_kms_key_id: The server_side_kms_key_id of this CreateInferenceSchedulerRequest.
        :type server_side_kms_key_id: str
        """

        self._server_side_kms_key_id = server_side_kms_key_id

    @property
    def client_token(self):
        """Gets the client_token of this CreateInferenceSchedulerRequest.


        :return: The client_token of this CreateInferenceSchedulerRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateInferenceSchedulerRequest.


        :param client_token: The client_token of this CreateInferenceSchedulerRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateInferenceSchedulerRequest.


        :return: The tags of this CreateInferenceSchedulerRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateInferenceSchedulerRequest.


        :param tags: The tags of this CreateInferenceSchedulerRequest.
        :type tags: List
        """

        self._tags = tags
