# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_data_ingestion_job_request_ingestion_input_configuration import StartDataIngestionJobRequestIngestionInputConfiguration
from openapi_server import util


class StartDataIngestionJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_name: str=None, ingestion_input_configuration: StartDataIngestionJobRequestIngestionInputConfiguration=None, role_arn: str=None, client_token: str=None):
        """StartDataIngestionJobRequest - a model defined in OpenAPI

        :param dataset_name: The dataset_name of this StartDataIngestionJobRequest.
        :param ingestion_input_configuration: The ingestion_input_configuration of this StartDataIngestionJobRequest.
        :param role_arn: The role_arn of this StartDataIngestionJobRequest.
        :param client_token: The client_token of this StartDataIngestionJobRequest.
        """
        self.openapi_types = {
            'dataset_name': str,
            'ingestion_input_configuration': StartDataIngestionJobRequestIngestionInputConfiguration,
            'role_arn': str,
            'client_token': str
        }

        self.attribute_map = {
            'dataset_name': 'DatasetName',
            'ingestion_input_configuration': 'IngestionInputConfiguration',
            'role_arn': 'RoleArn',
            'client_token': 'ClientToken'
        }

        self._dataset_name = dataset_name
        self._ingestion_input_configuration = ingestion_input_configuration
        self._role_arn = role_arn
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartDataIngestionJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartDataIngestionJobRequest of this StartDataIngestionJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_name(self):
        """Gets the dataset_name of this StartDataIngestionJobRequest.


        :return: The dataset_name of this StartDataIngestionJobRequest.
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this StartDataIngestionJobRequest.


        :param dataset_name: The dataset_name of this StartDataIngestionJobRequest.
        :type dataset_name: str
        """
        if dataset_name is None:
            raise ValueError("Invalid value for `dataset_name`, must not be `None`")

        self._dataset_name = dataset_name

    @property
    def ingestion_input_configuration(self):
        """Gets the ingestion_input_configuration of this StartDataIngestionJobRequest.


        :return: The ingestion_input_configuration of this StartDataIngestionJobRequest.
        :rtype: StartDataIngestionJobRequestIngestionInputConfiguration
        """
        return self._ingestion_input_configuration

    @ingestion_input_configuration.setter
    def ingestion_input_configuration(self, ingestion_input_configuration):
        """Sets the ingestion_input_configuration of this StartDataIngestionJobRequest.


        :param ingestion_input_configuration: The ingestion_input_configuration of this StartDataIngestionJobRequest.
        :type ingestion_input_configuration: StartDataIngestionJobRequestIngestionInputConfiguration
        """
        if ingestion_input_configuration is None:
            raise ValueError("Invalid value for `ingestion_input_configuration`, must not be `None`")

        self._ingestion_input_configuration = ingestion_input_configuration

    @property
    def role_arn(self):
        """Gets the role_arn of this StartDataIngestionJobRequest.


        :return: The role_arn of this StartDataIngestionJobRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this StartDataIngestionJobRequest.


        :param role_arn: The role_arn of this StartDataIngestionJobRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def client_token(self):
        """Gets the client_token of this StartDataIngestionJobRequest.


        :return: The client_token of this StartDataIngestionJobRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartDataIngestionJobRequest.


        :param client_token: The client_token of this StartDataIngestionJobRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token
