# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeDatasetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_name: str=None):
        """DescribeDatasetRequest - a model defined in OpenAPI

        :param dataset_name: The dataset_name of this DescribeDatasetRequest.
        """
        self.openapi_types = {
            'dataset_name': str
        }

        self.attribute_map = {
            'dataset_name': 'DatasetName'
        }

        self._dataset_name = dataset_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeDatasetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeDatasetRequest of this DescribeDatasetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_name(self):
        """Gets the dataset_name of this DescribeDatasetRequest.


        :return: The dataset_name of this DescribeDatasetRequest.
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this DescribeDatasetRequest.


        :param dataset_name: The dataset_name of this DescribeDatasetRequest.
        :type dataset_name: str
        """
        if dataset_name is None:
            raise ValueError("Invalid value for `dataset_name`, must not be `None`")

        self._dataset_name = dataset_name
