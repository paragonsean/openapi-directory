# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportDatasetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_dataset_arn: str=None, dataset_name: str=None, client_token: str=None, server_side_kms_key_id: str=None, tags: List=None):
        """ImportDatasetRequest - a model defined in OpenAPI

        :param source_dataset_arn: The source_dataset_arn of this ImportDatasetRequest.
        :param dataset_name: The dataset_name of this ImportDatasetRequest.
        :param client_token: The client_token of this ImportDatasetRequest.
        :param server_side_kms_key_id: The server_side_kms_key_id of this ImportDatasetRequest.
        :param tags: The tags of this ImportDatasetRequest.
        """
        self.openapi_types = {
            'source_dataset_arn': str,
            'dataset_name': str,
            'client_token': str,
            'server_side_kms_key_id': str,
            'tags': List
        }

        self.attribute_map = {
            'source_dataset_arn': 'SourceDatasetArn',
            'dataset_name': 'DatasetName',
            'client_token': 'ClientToken',
            'server_side_kms_key_id': 'ServerSideKmsKeyId',
            'tags': 'Tags'
        }

        self._source_dataset_arn = source_dataset_arn
        self._dataset_name = dataset_name
        self._client_token = client_token
        self._server_side_kms_key_id = server_side_kms_key_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportDatasetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportDatasetRequest of this ImportDatasetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_dataset_arn(self):
        """Gets the source_dataset_arn of this ImportDatasetRequest.


        :return: The source_dataset_arn of this ImportDatasetRequest.
        :rtype: str
        """
        return self._source_dataset_arn

    @source_dataset_arn.setter
    def source_dataset_arn(self, source_dataset_arn):
        """Sets the source_dataset_arn of this ImportDatasetRequest.


        :param source_dataset_arn: The source_dataset_arn of this ImportDatasetRequest.
        :type source_dataset_arn: str
        """
        if source_dataset_arn is None:
            raise ValueError("Invalid value for `source_dataset_arn`, must not be `None`")

        self._source_dataset_arn = source_dataset_arn

    @property
    def dataset_name(self):
        """Gets the dataset_name of this ImportDatasetRequest.


        :return: The dataset_name of this ImportDatasetRequest.
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this ImportDatasetRequest.


        :param dataset_name: The dataset_name of this ImportDatasetRequest.
        :type dataset_name: str
        """

        self._dataset_name = dataset_name

    @property
    def client_token(self):
        """Gets the client_token of this ImportDatasetRequest.


        :return: The client_token of this ImportDatasetRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this ImportDatasetRequest.


        :param client_token: The client_token of this ImportDatasetRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token

    @property
    def server_side_kms_key_id(self):
        """Gets the server_side_kms_key_id of this ImportDatasetRequest.


        :return: The server_side_kms_key_id of this ImportDatasetRequest.
        :rtype: str
        """
        return self._server_side_kms_key_id

    @server_side_kms_key_id.setter
    def server_side_kms_key_id(self, server_side_kms_key_id):
        """Sets the server_side_kms_key_id of this ImportDatasetRequest.


        :param server_side_kms_key_id: The server_side_kms_key_id of this ImportDatasetRequest.
        :type server_side_kms_key_id: str
        """

        self._server_side_kms_key_id = server_side_kms_key_id

    @property
    def tags(self):
        """Gets the tags of this ImportDatasetRequest.


        :return: The tags of this ImportDatasetRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ImportDatasetRequest.


        :param tags: The tags of this ImportDatasetRequest.
        :type tags: List
        """

        self._tags = tags
