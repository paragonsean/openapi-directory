# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InferenceEventSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inference_scheduler_arn: str=None, inference_scheduler_name: str=None, event_start_time: datetime=None, event_end_time: datetime=None, diagnostics: str=None, event_duration_in_seconds: int=None):
        """InferenceEventSummary - a model defined in OpenAPI

        :param inference_scheduler_arn: The inference_scheduler_arn of this InferenceEventSummary.
        :param inference_scheduler_name: The inference_scheduler_name of this InferenceEventSummary.
        :param event_start_time: The event_start_time of this InferenceEventSummary.
        :param event_end_time: The event_end_time of this InferenceEventSummary.
        :param diagnostics: The diagnostics of this InferenceEventSummary.
        :param event_duration_in_seconds: The event_duration_in_seconds of this InferenceEventSummary.
        """
        self.openapi_types = {
            'inference_scheduler_arn': str,
            'inference_scheduler_name': str,
            'event_start_time': datetime,
            'event_end_time': datetime,
            'diagnostics': str,
            'event_duration_in_seconds': int
        }

        self.attribute_map = {
            'inference_scheduler_arn': 'InferenceSchedulerArn',
            'inference_scheduler_name': 'InferenceSchedulerName',
            'event_start_time': 'EventStartTime',
            'event_end_time': 'EventEndTime',
            'diagnostics': 'Diagnostics',
            'event_duration_in_seconds': 'EventDurationInSeconds'
        }

        self._inference_scheduler_arn = inference_scheduler_arn
        self._inference_scheduler_name = inference_scheduler_name
        self._event_start_time = event_start_time
        self._event_end_time = event_end_time
        self._diagnostics = diagnostics
        self._event_duration_in_seconds = event_duration_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InferenceEventSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InferenceEventSummary of this InferenceEventSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inference_scheduler_arn(self):
        """Gets the inference_scheduler_arn of this InferenceEventSummary.


        :return: The inference_scheduler_arn of this InferenceEventSummary.
        :rtype: str
        """
        return self._inference_scheduler_arn

    @inference_scheduler_arn.setter
    def inference_scheduler_arn(self, inference_scheduler_arn):
        """Sets the inference_scheduler_arn of this InferenceEventSummary.


        :param inference_scheduler_arn: The inference_scheduler_arn of this InferenceEventSummary.
        :type inference_scheduler_arn: str
        """

        self._inference_scheduler_arn = inference_scheduler_arn

    @property
    def inference_scheduler_name(self):
        """Gets the inference_scheduler_name of this InferenceEventSummary.


        :return: The inference_scheduler_name of this InferenceEventSummary.
        :rtype: str
        """
        return self._inference_scheduler_name

    @inference_scheduler_name.setter
    def inference_scheduler_name(self, inference_scheduler_name):
        """Sets the inference_scheduler_name of this InferenceEventSummary.


        :param inference_scheduler_name: The inference_scheduler_name of this InferenceEventSummary.
        :type inference_scheduler_name: str
        """

        self._inference_scheduler_name = inference_scheduler_name

    @property
    def event_start_time(self):
        """Gets the event_start_time of this InferenceEventSummary.


        :return: The event_start_time of this InferenceEventSummary.
        :rtype: datetime
        """
        return self._event_start_time

    @event_start_time.setter
    def event_start_time(self, event_start_time):
        """Sets the event_start_time of this InferenceEventSummary.


        :param event_start_time: The event_start_time of this InferenceEventSummary.
        :type event_start_time: datetime
        """

        self._event_start_time = event_start_time

    @property
    def event_end_time(self):
        """Gets the event_end_time of this InferenceEventSummary.


        :return: The event_end_time of this InferenceEventSummary.
        :rtype: datetime
        """
        return self._event_end_time

    @event_end_time.setter
    def event_end_time(self, event_end_time):
        """Sets the event_end_time of this InferenceEventSummary.


        :param event_end_time: The event_end_time of this InferenceEventSummary.
        :type event_end_time: datetime
        """

        self._event_end_time = event_end_time

    @property
    def diagnostics(self):
        """Gets the diagnostics of this InferenceEventSummary.


        :return: The diagnostics of this InferenceEventSummary.
        :rtype: str
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this InferenceEventSummary.


        :param diagnostics: The diagnostics of this InferenceEventSummary.
        :type diagnostics: str
        """

        self._diagnostics = diagnostics

    @property
    def event_duration_in_seconds(self):
        """Gets the event_duration_in_seconds of this InferenceEventSummary.


        :return: The event_duration_in_seconds of this InferenceEventSummary.
        :rtype: int
        """
        return self._event_duration_in_seconds

    @event_duration_in_seconds.setter
    def event_duration_in_seconds(self, event_duration_in_seconds):
        """Sets the event_duration_in_seconds of this InferenceEventSummary.


        :param event_duration_in_seconds: The event_duration_in_seconds of this InferenceEventSummary.
        :type event_duration_in_seconds: int
        """

        self._event_duration_in_seconds = event_duration_in_seconds
