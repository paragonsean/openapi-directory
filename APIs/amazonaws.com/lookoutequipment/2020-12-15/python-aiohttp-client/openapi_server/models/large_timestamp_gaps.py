# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.statistical_issue_status import StatisticalIssueStatus
from openapi_server import util


class LargeTimestampGaps(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: StatisticalIssueStatus=None, number_of_large_timestamp_gaps: int=None, max_timestamp_gap_in_days: int=None):
        """LargeTimestampGaps - a model defined in OpenAPI

        :param status: The status of this LargeTimestampGaps.
        :param number_of_large_timestamp_gaps: The number_of_large_timestamp_gaps of this LargeTimestampGaps.
        :param max_timestamp_gap_in_days: The max_timestamp_gap_in_days of this LargeTimestampGaps.
        """
        self.openapi_types = {
            'status': StatisticalIssueStatus,
            'number_of_large_timestamp_gaps': int,
            'max_timestamp_gap_in_days': int
        }

        self.attribute_map = {
            'status': 'Status',
            'number_of_large_timestamp_gaps': 'NumberOfLargeTimestampGaps',
            'max_timestamp_gap_in_days': 'MaxTimestampGapInDays'
        }

        self._status = status
        self._number_of_large_timestamp_gaps = number_of_large_timestamp_gaps
        self._max_timestamp_gap_in_days = max_timestamp_gap_in_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LargeTimestampGaps':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LargeTimestampGaps of this LargeTimestampGaps.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this LargeTimestampGaps.


        :return: The status of this LargeTimestampGaps.
        :rtype: StatisticalIssueStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LargeTimestampGaps.


        :param status: The status of this LargeTimestampGaps.
        :type status: StatisticalIssueStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def number_of_large_timestamp_gaps(self):
        """Gets the number_of_large_timestamp_gaps of this LargeTimestampGaps.


        :return: The number_of_large_timestamp_gaps of this LargeTimestampGaps.
        :rtype: int
        """
        return self._number_of_large_timestamp_gaps

    @number_of_large_timestamp_gaps.setter
    def number_of_large_timestamp_gaps(self, number_of_large_timestamp_gaps):
        """Sets the number_of_large_timestamp_gaps of this LargeTimestampGaps.


        :param number_of_large_timestamp_gaps: The number_of_large_timestamp_gaps of this LargeTimestampGaps.
        :type number_of_large_timestamp_gaps: int
        """

        self._number_of_large_timestamp_gaps = number_of_large_timestamp_gaps

    @property
    def max_timestamp_gap_in_days(self):
        """Gets the max_timestamp_gap_in_days of this LargeTimestampGaps.


        :return: The max_timestamp_gap_in_days of this LargeTimestampGaps.
        :rtype: int
        """
        return self._max_timestamp_gap_in_days

    @max_timestamp_gap_in_days.setter
    def max_timestamp_gap_in_days(self, max_timestamp_gap_in_days):
        """Sets the max_timestamp_gap_in_days of this LargeTimestampGaps.


        :param max_timestamp_gap_in_days: The max_timestamp_gap_in_days of this LargeTimestampGaps.
        :type max_timestamp_gap_in_days: int
        """

        self._max_timestamp_gap_in_days = max_timestamp_gap_in_days
