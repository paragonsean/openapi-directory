# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_quality_summary_duplicate_timestamps import DataQualitySummaryDuplicateTimestamps
from openapi_server.models.data_quality_summary_insufficient_sensor_data import DataQualitySummaryInsufficientSensorData
from openapi_server.models.data_quality_summary_invalid_sensor_data import DataQualitySummaryInvalidSensorData
from openapi_server.models.data_quality_summary_missing_sensor_data import DataQualitySummaryMissingSensorData
from openapi_server.models.data_quality_summary_unsupported_timestamps import DataQualitySummaryUnsupportedTimestamps
from openapi_server import util


class DescribeDataIngestionJobResponseDataQualitySummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insufficient_sensor_data: DataQualitySummaryInsufficientSensorData=None, missing_sensor_data: DataQualitySummaryMissingSensorData=None, invalid_sensor_data: DataQualitySummaryInvalidSensorData=None, unsupported_timestamps: DataQualitySummaryUnsupportedTimestamps=None, duplicate_timestamps: DataQualitySummaryDuplicateTimestamps=None):
        """DescribeDataIngestionJobResponseDataQualitySummary - a model defined in OpenAPI

        :param insufficient_sensor_data: The insufficient_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.
        :param missing_sensor_data: The missing_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.
        :param invalid_sensor_data: The invalid_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.
        :param unsupported_timestamps: The unsupported_timestamps of this DescribeDataIngestionJobResponseDataQualitySummary.
        :param duplicate_timestamps: The duplicate_timestamps of this DescribeDataIngestionJobResponseDataQualitySummary.
        """
        self.openapi_types = {
            'insufficient_sensor_data': DataQualitySummaryInsufficientSensorData,
            'missing_sensor_data': DataQualitySummaryMissingSensorData,
            'invalid_sensor_data': DataQualitySummaryInvalidSensorData,
            'unsupported_timestamps': DataQualitySummaryUnsupportedTimestamps,
            'duplicate_timestamps': DataQualitySummaryDuplicateTimestamps
        }

        self.attribute_map = {
            'insufficient_sensor_data': 'InsufficientSensorData',
            'missing_sensor_data': 'MissingSensorData',
            'invalid_sensor_data': 'InvalidSensorData',
            'unsupported_timestamps': 'UnsupportedTimestamps',
            'duplicate_timestamps': 'DuplicateTimestamps'
        }

        self._insufficient_sensor_data = insufficient_sensor_data
        self._missing_sensor_data = missing_sensor_data
        self._invalid_sensor_data = invalid_sensor_data
        self._unsupported_timestamps = unsupported_timestamps
        self._duplicate_timestamps = duplicate_timestamps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeDataIngestionJobResponseDataQualitySummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeDataIngestionJobResponse_DataQualitySummary of this DescribeDataIngestionJobResponseDataQualitySummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insufficient_sensor_data(self):
        """Gets the insufficient_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.


        :return: The insufficient_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.
        :rtype: DataQualitySummaryInsufficientSensorData
        """
        return self._insufficient_sensor_data

    @insufficient_sensor_data.setter
    def insufficient_sensor_data(self, insufficient_sensor_data):
        """Sets the insufficient_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.


        :param insufficient_sensor_data: The insufficient_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.
        :type insufficient_sensor_data: DataQualitySummaryInsufficientSensorData
        """
        if insufficient_sensor_data is None:
            raise ValueError("Invalid value for `insufficient_sensor_data`, must not be `None`")

        self._insufficient_sensor_data = insufficient_sensor_data

    @property
    def missing_sensor_data(self):
        """Gets the missing_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.


        :return: The missing_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.
        :rtype: DataQualitySummaryMissingSensorData
        """
        return self._missing_sensor_data

    @missing_sensor_data.setter
    def missing_sensor_data(self, missing_sensor_data):
        """Sets the missing_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.


        :param missing_sensor_data: The missing_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.
        :type missing_sensor_data: DataQualitySummaryMissingSensorData
        """
        if missing_sensor_data is None:
            raise ValueError("Invalid value for `missing_sensor_data`, must not be `None`")

        self._missing_sensor_data = missing_sensor_data

    @property
    def invalid_sensor_data(self):
        """Gets the invalid_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.


        :return: The invalid_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.
        :rtype: DataQualitySummaryInvalidSensorData
        """
        return self._invalid_sensor_data

    @invalid_sensor_data.setter
    def invalid_sensor_data(self, invalid_sensor_data):
        """Sets the invalid_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.


        :param invalid_sensor_data: The invalid_sensor_data of this DescribeDataIngestionJobResponseDataQualitySummary.
        :type invalid_sensor_data: DataQualitySummaryInvalidSensorData
        """
        if invalid_sensor_data is None:
            raise ValueError("Invalid value for `invalid_sensor_data`, must not be `None`")

        self._invalid_sensor_data = invalid_sensor_data

    @property
    def unsupported_timestamps(self):
        """Gets the unsupported_timestamps of this DescribeDataIngestionJobResponseDataQualitySummary.


        :return: The unsupported_timestamps of this DescribeDataIngestionJobResponseDataQualitySummary.
        :rtype: DataQualitySummaryUnsupportedTimestamps
        """
        return self._unsupported_timestamps

    @unsupported_timestamps.setter
    def unsupported_timestamps(self, unsupported_timestamps):
        """Sets the unsupported_timestamps of this DescribeDataIngestionJobResponseDataQualitySummary.


        :param unsupported_timestamps: The unsupported_timestamps of this DescribeDataIngestionJobResponseDataQualitySummary.
        :type unsupported_timestamps: DataQualitySummaryUnsupportedTimestamps
        """
        if unsupported_timestamps is None:
            raise ValueError("Invalid value for `unsupported_timestamps`, must not be `None`")

        self._unsupported_timestamps = unsupported_timestamps

    @property
    def duplicate_timestamps(self):
        """Gets the duplicate_timestamps of this DescribeDataIngestionJobResponseDataQualitySummary.


        :return: The duplicate_timestamps of this DescribeDataIngestionJobResponseDataQualitySummary.
        :rtype: DataQualitySummaryDuplicateTimestamps
        """
        return self._duplicate_timestamps

    @duplicate_timestamps.setter
    def duplicate_timestamps(self, duplicate_timestamps):
        """Sets the duplicate_timestamps of this DescribeDataIngestionJobResponseDataQualitySummary.


        :param duplicate_timestamps: The duplicate_timestamps of this DescribeDataIngestionJobResponseDataQualitySummary.
        :type duplicate_timestamps: DataQualitySummaryDuplicateTimestamps
        """
        if duplicate_timestamps is None:
            raise ValueError("Invalid value for `duplicate_timestamps`, must not be `None`")

        self._duplicate_timestamps = duplicate_timestamps
