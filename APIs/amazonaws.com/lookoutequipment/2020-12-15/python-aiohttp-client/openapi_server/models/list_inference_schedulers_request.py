# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inference_scheduler_status import InferenceSchedulerStatus
from openapi_server import util


class ListInferenceSchedulersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, max_results: int=None, inference_scheduler_name_begins_with: str=None, model_name: str=None, status: InferenceSchedulerStatus=None):
        """ListInferenceSchedulersRequest - a model defined in OpenAPI

        :param next_token: The next_token of this ListInferenceSchedulersRequest.
        :param max_results: The max_results of this ListInferenceSchedulersRequest.
        :param inference_scheduler_name_begins_with: The inference_scheduler_name_begins_with of this ListInferenceSchedulersRequest.
        :param model_name: The model_name of this ListInferenceSchedulersRequest.
        :param status: The status of this ListInferenceSchedulersRequest.
        """
        self.openapi_types = {
            'next_token': str,
            'max_results': int,
            'inference_scheduler_name_begins_with': str,
            'model_name': str,
            'status': InferenceSchedulerStatus
        }

        self.attribute_map = {
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'inference_scheduler_name_begins_with': 'InferenceSchedulerNameBeginsWith',
            'model_name': 'ModelName',
            'status': 'Status'
        }

        self._next_token = next_token
        self._max_results = max_results
        self._inference_scheduler_name_begins_with = inference_scheduler_name_begins_with
        self._model_name = model_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListInferenceSchedulersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListInferenceSchedulersRequest of this ListInferenceSchedulersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListInferenceSchedulersRequest.


        :return: The next_token of this ListInferenceSchedulersRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListInferenceSchedulersRequest.


        :param next_token: The next_token of this ListInferenceSchedulersRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListInferenceSchedulersRequest.


        :return: The max_results of this ListInferenceSchedulersRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListInferenceSchedulersRequest.


        :param max_results: The max_results of this ListInferenceSchedulersRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def inference_scheduler_name_begins_with(self):
        """Gets the inference_scheduler_name_begins_with of this ListInferenceSchedulersRequest.


        :return: The inference_scheduler_name_begins_with of this ListInferenceSchedulersRequest.
        :rtype: str
        """
        return self._inference_scheduler_name_begins_with

    @inference_scheduler_name_begins_with.setter
    def inference_scheduler_name_begins_with(self, inference_scheduler_name_begins_with):
        """Sets the inference_scheduler_name_begins_with of this ListInferenceSchedulersRequest.


        :param inference_scheduler_name_begins_with: The inference_scheduler_name_begins_with of this ListInferenceSchedulersRequest.
        :type inference_scheduler_name_begins_with: str
        """

        self._inference_scheduler_name_begins_with = inference_scheduler_name_begins_with

    @property
    def model_name(self):
        """Gets the model_name of this ListInferenceSchedulersRequest.


        :return: The model_name of this ListInferenceSchedulersRequest.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this ListInferenceSchedulersRequest.


        :param model_name: The model_name of this ListInferenceSchedulersRequest.
        :type model_name: str
        """

        self._model_name = model_name

    @property
    def status(self):
        """Gets the status of this ListInferenceSchedulersRequest.


        :return: The status of this ListInferenceSchedulersRequest.
        :rtype: InferenceSchedulerStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListInferenceSchedulersRequest.


        :param status: The status of this ListInferenceSchedulersRequest.
        :type status: InferenceSchedulerStatus
        """

        self._status = status
