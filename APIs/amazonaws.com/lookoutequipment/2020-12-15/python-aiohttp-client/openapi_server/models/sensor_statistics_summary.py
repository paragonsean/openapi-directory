# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sensor_statistics_summary_categorical_values import SensorStatisticsSummaryCategoricalValues
from openapi_server.models.sensor_statistics_summary_duplicate_timestamps import SensorStatisticsSummaryDuplicateTimestamps
from openapi_server.models.sensor_statistics_summary_invalid_date_entries import SensorStatisticsSummaryInvalidDateEntries
from openapi_server.models.sensor_statistics_summary_invalid_values import SensorStatisticsSummaryInvalidValues
from openapi_server.models.sensor_statistics_summary_large_timestamp_gaps import SensorStatisticsSummaryLargeTimestampGaps
from openapi_server.models.sensor_statistics_summary_missing_values import SensorStatisticsSummaryMissingValues
from openapi_server.models.sensor_statistics_summary_monotonic_values import SensorStatisticsSummaryMonotonicValues
from openapi_server.models.sensor_statistics_summary_multiple_operating_modes import SensorStatisticsSummaryMultipleOperatingModes
from openapi_server import util


class SensorStatisticsSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_name: str=None, sensor_name: str=None, data_exists: bool=None, missing_values: SensorStatisticsSummaryMissingValues=None, invalid_values: SensorStatisticsSummaryInvalidValues=None, invalid_date_entries: SensorStatisticsSummaryInvalidDateEntries=None, duplicate_timestamps: SensorStatisticsSummaryDuplicateTimestamps=None, categorical_values: SensorStatisticsSummaryCategoricalValues=None, multiple_operating_modes: SensorStatisticsSummaryMultipleOperatingModes=None, large_timestamp_gaps: SensorStatisticsSummaryLargeTimestampGaps=None, monotonic_values: SensorStatisticsSummaryMonotonicValues=None, data_start_time: datetime=None, data_end_time: datetime=None):
        """SensorStatisticsSummary - a model defined in OpenAPI

        :param component_name: The component_name of this SensorStatisticsSummary.
        :param sensor_name: The sensor_name of this SensorStatisticsSummary.
        :param data_exists: The data_exists of this SensorStatisticsSummary.
        :param missing_values: The missing_values of this SensorStatisticsSummary.
        :param invalid_values: The invalid_values of this SensorStatisticsSummary.
        :param invalid_date_entries: The invalid_date_entries of this SensorStatisticsSummary.
        :param duplicate_timestamps: The duplicate_timestamps of this SensorStatisticsSummary.
        :param categorical_values: The categorical_values of this SensorStatisticsSummary.
        :param multiple_operating_modes: The multiple_operating_modes of this SensorStatisticsSummary.
        :param large_timestamp_gaps: The large_timestamp_gaps of this SensorStatisticsSummary.
        :param monotonic_values: The monotonic_values of this SensorStatisticsSummary.
        :param data_start_time: The data_start_time of this SensorStatisticsSummary.
        :param data_end_time: The data_end_time of this SensorStatisticsSummary.
        """
        self.openapi_types = {
            'component_name': str,
            'sensor_name': str,
            'data_exists': bool,
            'missing_values': SensorStatisticsSummaryMissingValues,
            'invalid_values': SensorStatisticsSummaryInvalidValues,
            'invalid_date_entries': SensorStatisticsSummaryInvalidDateEntries,
            'duplicate_timestamps': SensorStatisticsSummaryDuplicateTimestamps,
            'categorical_values': SensorStatisticsSummaryCategoricalValues,
            'multiple_operating_modes': SensorStatisticsSummaryMultipleOperatingModes,
            'large_timestamp_gaps': SensorStatisticsSummaryLargeTimestampGaps,
            'monotonic_values': SensorStatisticsSummaryMonotonicValues,
            'data_start_time': datetime,
            'data_end_time': datetime
        }

        self.attribute_map = {
            'component_name': 'ComponentName',
            'sensor_name': 'SensorName',
            'data_exists': 'DataExists',
            'missing_values': 'MissingValues',
            'invalid_values': 'InvalidValues',
            'invalid_date_entries': 'InvalidDateEntries',
            'duplicate_timestamps': 'DuplicateTimestamps',
            'categorical_values': 'CategoricalValues',
            'multiple_operating_modes': 'MultipleOperatingModes',
            'large_timestamp_gaps': 'LargeTimestampGaps',
            'monotonic_values': 'MonotonicValues',
            'data_start_time': 'DataStartTime',
            'data_end_time': 'DataEndTime'
        }

        self._component_name = component_name
        self._sensor_name = sensor_name
        self._data_exists = data_exists
        self._missing_values = missing_values
        self._invalid_values = invalid_values
        self._invalid_date_entries = invalid_date_entries
        self._duplicate_timestamps = duplicate_timestamps
        self._categorical_values = categorical_values
        self._multiple_operating_modes = multiple_operating_modes
        self._large_timestamp_gaps = large_timestamp_gaps
        self._monotonic_values = monotonic_values
        self._data_start_time = data_start_time
        self._data_end_time = data_end_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SensorStatisticsSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SensorStatisticsSummary of this SensorStatisticsSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_name(self):
        """Gets the component_name of this SensorStatisticsSummary.


        :return: The component_name of this SensorStatisticsSummary.
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this SensorStatisticsSummary.


        :param component_name: The component_name of this SensorStatisticsSummary.
        :type component_name: str
        """

        self._component_name = component_name

    @property
    def sensor_name(self):
        """Gets the sensor_name of this SensorStatisticsSummary.


        :return: The sensor_name of this SensorStatisticsSummary.
        :rtype: str
        """
        return self._sensor_name

    @sensor_name.setter
    def sensor_name(self, sensor_name):
        """Sets the sensor_name of this SensorStatisticsSummary.


        :param sensor_name: The sensor_name of this SensorStatisticsSummary.
        :type sensor_name: str
        """

        self._sensor_name = sensor_name

    @property
    def data_exists(self):
        """Gets the data_exists of this SensorStatisticsSummary.


        :return: The data_exists of this SensorStatisticsSummary.
        :rtype: bool
        """
        return self._data_exists

    @data_exists.setter
    def data_exists(self, data_exists):
        """Sets the data_exists of this SensorStatisticsSummary.


        :param data_exists: The data_exists of this SensorStatisticsSummary.
        :type data_exists: bool
        """

        self._data_exists = data_exists

    @property
    def missing_values(self):
        """Gets the missing_values of this SensorStatisticsSummary.


        :return: The missing_values of this SensorStatisticsSummary.
        :rtype: SensorStatisticsSummaryMissingValues
        """
        return self._missing_values

    @missing_values.setter
    def missing_values(self, missing_values):
        """Sets the missing_values of this SensorStatisticsSummary.


        :param missing_values: The missing_values of this SensorStatisticsSummary.
        :type missing_values: SensorStatisticsSummaryMissingValues
        """

        self._missing_values = missing_values

    @property
    def invalid_values(self):
        """Gets the invalid_values of this SensorStatisticsSummary.


        :return: The invalid_values of this SensorStatisticsSummary.
        :rtype: SensorStatisticsSummaryInvalidValues
        """
        return self._invalid_values

    @invalid_values.setter
    def invalid_values(self, invalid_values):
        """Sets the invalid_values of this SensorStatisticsSummary.


        :param invalid_values: The invalid_values of this SensorStatisticsSummary.
        :type invalid_values: SensorStatisticsSummaryInvalidValues
        """

        self._invalid_values = invalid_values

    @property
    def invalid_date_entries(self):
        """Gets the invalid_date_entries of this SensorStatisticsSummary.


        :return: The invalid_date_entries of this SensorStatisticsSummary.
        :rtype: SensorStatisticsSummaryInvalidDateEntries
        """
        return self._invalid_date_entries

    @invalid_date_entries.setter
    def invalid_date_entries(self, invalid_date_entries):
        """Sets the invalid_date_entries of this SensorStatisticsSummary.


        :param invalid_date_entries: The invalid_date_entries of this SensorStatisticsSummary.
        :type invalid_date_entries: SensorStatisticsSummaryInvalidDateEntries
        """

        self._invalid_date_entries = invalid_date_entries

    @property
    def duplicate_timestamps(self):
        """Gets the duplicate_timestamps of this SensorStatisticsSummary.


        :return: The duplicate_timestamps of this SensorStatisticsSummary.
        :rtype: SensorStatisticsSummaryDuplicateTimestamps
        """
        return self._duplicate_timestamps

    @duplicate_timestamps.setter
    def duplicate_timestamps(self, duplicate_timestamps):
        """Sets the duplicate_timestamps of this SensorStatisticsSummary.


        :param duplicate_timestamps: The duplicate_timestamps of this SensorStatisticsSummary.
        :type duplicate_timestamps: SensorStatisticsSummaryDuplicateTimestamps
        """

        self._duplicate_timestamps = duplicate_timestamps

    @property
    def categorical_values(self):
        """Gets the categorical_values of this SensorStatisticsSummary.


        :return: The categorical_values of this SensorStatisticsSummary.
        :rtype: SensorStatisticsSummaryCategoricalValues
        """
        return self._categorical_values

    @categorical_values.setter
    def categorical_values(self, categorical_values):
        """Sets the categorical_values of this SensorStatisticsSummary.


        :param categorical_values: The categorical_values of this SensorStatisticsSummary.
        :type categorical_values: SensorStatisticsSummaryCategoricalValues
        """

        self._categorical_values = categorical_values

    @property
    def multiple_operating_modes(self):
        """Gets the multiple_operating_modes of this SensorStatisticsSummary.


        :return: The multiple_operating_modes of this SensorStatisticsSummary.
        :rtype: SensorStatisticsSummaryMultipleOperatingModes
        """
        return self._multiple_operating_modes

    @multiple_operating_modes.setter
    def multiple_operating_modes(self, multiple_operating_modes):
        """Sets the multiple_operating_modes of this SensorStatisticsSummary.


        :param multiple_operating_modes: The multiple_operating_modes of this SensorStatisticsSummary.
        :type multiple_operating_modes: SensorStatisticsSummaryMultipleOperatingModes
        """

        self._multiple_operating_modes = multiple_operating_modes

    @property
    def large_timestamp_gaps(self):
        """Gets the large_timestamp_gaps of this SensorStatisticsSummary.


        :return: The large_timestamp_gaps of this SensorStatisticsSummary.
        :rtype: SensorStatisticsSummaryLargeTimestampGaps
        """
        return self._large_timestamp_gaps

    @large_timestamp_gaps.setter
    def large_timestamp_gaps(self, large_timestamp_gaps):
        """Sets the large_timestamp_gaps of this SensorStatisticsSummary.


        :param large_timestamp_gaps: The large_timestamp_gaps of this SensorStatisticsSummary.
        :type large_timestamp_gaps: SensorStatisticsSummaryLargeTimestampGaps
        """

        self._large_timestamp_gaps = large_timestamp_gaps

    @property
    def monotonic_values(self):
        """Gets the monotonic_values of this SensorStatisticsSummary.


        :return: The monotonic_values of this SensorStatisticsSummary.
        :rtype: SensorStatisticsSummaryMonotonicValues
        """
        return self._monotonic_values

    @monotonic_values.setter
    def monotonic_values(self, monotonic_values):
        """Sets the monotonic_values of this SensorStatisticsSummary.


        :param monotonic_values: The monotonic_values of this SensorStatisticsSummary.
        :type monotonic_values: SensorStatisticsSummaryMonotonicValues
        """

        self._monotonic_values = monotonic_values

    @property
    def data_start_time(self):
        """Gets the data_start_time of this SensorStatisticsSummary.


        :return: The data_start_time of this SensorStatisticsSummary.
        :rtype: datetime
        """
        return self._data_start_time

    @data_start_time.setter
    def data_start_time(self, data_start_time):
        """Sets the data_start_time of this SensorStatisticsSummary.


        :param data_start_time: The data_start_time of this SensorStatisticsSummary.
        :type data_start_time: datetime
        """

        self._data_start_time = data_start_time

    @property
    def data_end_time(self):
        """Gets the data_end_time of this SensorStatisticsSummary.


        :return: The data_end_time of this SensorStatisticsSummary.
        :rtype: datetime
        """
        return self._data_end_time

    @data_end_time.setter
    def data_end_time(self, data_end_time):
        """Sets the data_end_time of this SensorStatisticsSummary.


        :param data_end_time: The data_end_time of this SensorStatisticsSummary.
        :type data_end_time: datetime
        """

        self._data_end_time = data_end_time
