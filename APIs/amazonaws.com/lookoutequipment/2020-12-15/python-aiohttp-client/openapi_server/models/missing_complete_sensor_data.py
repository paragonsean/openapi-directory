# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MissingCompleteSensorData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affected_sensor_count: int=None):
        """MissingCompleteSensorData - a model defined in OpenAPI

        :param affected_sensor_count: The affected_sensor_count of this MissingCompleteSensorData.
        """
        self.openapi_types = {
            'affected_sensor_count': int
        }

        self.attribute_map = {
            'affected_sensor_count': 'AffectedSensorCount'
        }

        self._affected_sensor_count = affected_sensor_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MissingCompleteSensorData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MissingCompleteSensorData of this MissingCompleteSensorData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affected_sensor_count(self):
        """Gets the affected_sensor_count of this MissingCompleteSensorData.


        :return: The affected_sensor_count of this MissingCompleteSensorData.
        :rtype: int
        """
        return self._affected_sensor_count

    @affected_sensor_count.setter
    def affected_sensor_count(self, affected_sensor_count):
        """Sets the affected_sensor_count of this MissingCompleteSensorData.


        :param affected_sensor_count: The affected_sensor_count of this MissingCompleteSensorData.
        :type affected_sensor_count: int
        """
        if affected_sensor_count is None:
            raise ValueError("Invalid value for `affected_sensor_count`, must not be `None`")

        self._affected_sensor_count = affected_sensor_count
