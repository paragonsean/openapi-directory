# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteLabelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label_group_name: str=None, label_id: str=None):
        """DeleteLabelRequest - a model defined in OpenAPI

        :param label_group_name: The label_group_name of this DeleteLabelRequest.
        :param label_id: The label_id of this DeleteLabelRequest.
        """
        self.openapi_types = {
            'label_group_name': str,
            'label_id': str
        }

        self.attribute_map = {
            'label_group_name': 'LabelGroupName',
            'label_id': 'LabelId'
        }

        self._label_group_name = label_group_name
        self._label_id = label_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteLabelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteLabelRequest of this DeleteLabelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label_group_name(self):
        """Gets the label_group_name of this DeleteLabelRequest.


        :return: The label_group_name of this DeleteLabelRequest.
        :rtype: str
        """
        return self._label_group_name

    @label_group_name.setter
    def label_group_name(self, label_group_name):
        """Sets the label_group_name of this DeleteLabelRequest.


        :param label_group_name: The label_group_name of this DeleteLabelRequest.
        :type label_group_name: str
        """
        if label_group_name is None:
            raise ValueError("Invalid value for `label_group_name`, must not be `None`")

        self._label_group_name = label_group_name

    @property
    def label_id(self):
        """Gets the label_id of this DeleteLabelRequest.


        :return: The label_id of this DeleteLabelRequest.
        :rtype: str
        """
        return self._label_id

    @label_id.setter
    def label_id(self, label_id):
        """Sets the label_id of this DeleteLabelRequest.


        :param label_id: The label_id of this DeleteLabelRequest.
        :type label_id: str
        """
        if label_id is None:
            raise ValueError("Invalid value for `label_id`, must not be `None`")

        self._label_id = label_id
