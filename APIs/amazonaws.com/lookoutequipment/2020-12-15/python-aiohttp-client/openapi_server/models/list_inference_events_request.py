# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListInferenceEventsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, max_results: int=None, inference_scheduler_name: str=None, interval_start_time: datetime=None, interval_end_time: datetime=None):
        """ListInferenceEventsRequest - a model defined in OpenAPI

        :param next_token: The next_token of this ListInferenceEventsRequest.
        :param max_results: The max_results of this ListInferenceEventsRequest.
        :param inference_scheduler_name: The inference_scheduler_name of this ListInferenceEventsRequest.
        :param interval_start_time: The interval_start_time of this ListInferenceEventsRequest.
        :param interval_end_time: The interval_end_time of this ListInferenceEventsRequest.
        """
        self.openapi_types = {
            'next_token': str,
            'max_results': int,
            'inference_scheduler_name': str,
            'interval_start_time': datetime,
            'interval_end_time': datetime
        }

        self.attribute_map = {
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'inference_scheduler_name': 'InferenceSchedulerName',
            'interval_start_time': 'IntervalStartTime',
            'interval_end_time': 'IntervalEndTime'
        }

        self._next_token = next_token
        self._max_results = max_results
        self._inference_scheduler_name = inference_scheduler_name
        self._interval_start_time = interval_start_time
        self._interval_end_time = interval_end_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListInferenceEventsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListInferenceEventsRequest of this ListInferenceEventsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListInferenceEventsRequest.


        :return: The next_token of this ListInferenceEventsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListInferenceEventsRequest.


        :param next_token: The next_token of this ListInferenceEventsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListInferenceEventsRequest.


        :return: The max_results of this ListInferenceEventsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListInferenceEventsRequest.


        :param max_results: The max_results of this ListInferenceEventsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def inference_scheduler_name(self):
        """Gets the inference_scheduler_name of this ListInferenceEventsRequest.


        :return: The inference_scheduler_name of this ListInferenceEventsRequest.
        :rtype: str
        """
        return self._inference_scheduler_name

    @inference_scheduler_name.setter
    def inference_scheduler_name(self, inference_scheduler_name):
        """Sets the inference_scheduler_name of this ListInferenceEventsRequest.


        :param inference_scheduler_name: The inference_scheduler_name of this ListInferenceEventsRequest.
        :type inference_scheduler_name: str
        """
        if inference_scheduler_name is None:
            raise ValueError("Invalid value for `inference_scheduler_name`, must not be `None`")

        self._inference_scheduler_name = inference_scheduler_name

    @property
    def interval_start_time(self):
        """Gets the interval_start_time of this ListInferenceEventsRequest.


        :return: The interval_start_time of this ListInferenceEventsRequest.
        :rtype: datetime
        """
        return self._interval_start_time

    @interval_start_time.setter
    def interval_start_time(self, interval_start_time):
        """Sets the interval_start_time of this ListInferenceEventsRequest.


        :param interval_start_time: The interval_start_time of this ListInferenceEventsRequest.
        :type interval_start_time: datetime
        """
        if interval_start_time is None:
            raise ValueError("Invalid value for `interval_start_time`, must not be `None`")

        self._interval_start_time = interval_start_time

    @property
    def interval_end_time(self):
        """Gets the interval_end_time of this ListInferenceEventsRequest.


        :return: The interval_end_time of this ListInferenceEventsRequest.
        :rtype: datetime
        """
        return self._interval_end_time

    @interval_end_time.setter
    def interval_end_time(self, interval_end_time):
        """Sets the interval_end_time of this ListInferenceEventsRequest.


        :param interval_end_time: The interval_end_time of this ListInferenceEventsRequest.
        :type interval_end_time: datetime
        """
        if interval_end_time is None:
            raise ValueError("Invalid value for `interval_end_time`, must not be `None`")

        self._interval_end_time = interval_end_time
