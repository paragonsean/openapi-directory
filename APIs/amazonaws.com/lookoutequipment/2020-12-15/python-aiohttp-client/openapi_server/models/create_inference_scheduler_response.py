# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inference_scheduler_status import InferenceSchedulerStatus
from openapi_server import util


class CreateInferenceSchedulerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inference_scheduler_arn: str=None, inference_scheduler_name: str=None, status: InferenceSchedulerStatus=None):
        """CreateInferenceSchedulerResponse - a model defined in OpenAPI

        :param inference_scheduler_arn: The inference_scheduler_arn of this CreateInferenceSchedulerResponse.
        :param inference_scheduler_name: The inference_scheduler_name of this CreateInferenceSchedulerResponse.
        :param status: The status of this CreateInferenceSchedulerResponse.
        """
        self.openapi_types = {
            'inference_scheduler_arn': str,
            'inference_scheduler_name': str,
            'status': InferenceSchedulerStatus
        }

        self.attribute_map = {
            'inference_scheduler_arn': 'InferenceSchedulerArn',
            'inference_scheduler_name': 'InferenceSchedulerName',
            'status': 'Status'
        }

        self._inference_scheduler_arn = inference_scheduler_arn
        self._inference_scheduler_name = inference_scheduler_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateInferenceSchedulerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateInferenceSchedulerResponse of this CreateInferenceSchedulerResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inference_scheduler_arn(self):
        """Gets the inference_scheduler_arn of this CreateInferenceSchedulerResponse.


        :return: The inference_scheduler_arn of this CreateInferenceSchedulerResponse.
        :rtype: str
        """
        return self._inference_scheduler_arn

    @inference_scheduler_arn.setter
    def inference_scheduler_arn(self, inference_scheduler_arn):
        """Sets the inference_scheduler_arn of this CreateInferenceSchedulerResponse.


        :param inference_scheduler_arn: The inference_scheduler_arn of this CreateInferenceSchedulerResponse.
        :type inference_scheduler_arn: str
        """

        self._inference_scheduler_arn = inference_scheduler_arn

    @property
    def inference_scheduler_name(self):
        """Gets the inference_scheduler_name of this CreateInferenceSchedulerResponse.


        :return: The inference_scheduler_name of this CreateInferenceSchedulerResponse.
        :rtype: str
        """
        return self._inference_scheduler_name

    @inference_scheduler_name.setter
    def inference_scheduler_name(self, inference_scheduler_name):
        """Sets the inference_scheduler_name of this CreateInferenceSchedulerResponse.


        :param inference_scheduler_name: The inference_scheduler_name of this CreateInferenceSchedulerResponse.
        :type inference_scheduler_name: str
        """

        self._inference_scheduler_name = inference_scheduler_name

    @property
    def status(self):
        """Gets the status of this CreateInferenceSchedulerResponse.


        :return: The status of this CreateInferenceSchedulerResponse.
        :rtype: InferenceSchedulerStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateInferenceSchedulerResponse.


        :param status: The status of this CreateInferenceSchedulerResponse.
        :type status: InferenceSchedulerStatus
        """

        self._status = status
