/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListInferenceExecutionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListInferenceExecutionsRequest::OAIListInferenceExecutionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListInferenceExecutionsRequest::OAIListInferenceExecutionsRequest() {
    this->initializeModel();
}

OAIListInferenceExecutionsRequest::~OAIListInferenceExecutionsRequest() {}

void OAIListInferenceExecutionsRequest::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_inference_scheduler_name_isSet = false;
    m_inference_scheduler_name_isValid = false;

    m_data_start_time_after_isSet = false;
    m_data_start_time_after_isValid = false;

    m_data_end_time_before_isSet = false;
    m_data_end_time_before_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIListInferenceExecutionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListInferenceExecutionsRequest::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_inference_scheduler_name_isValid = ::OpenAPI::fromJsonValue(m_inference_scheduler_name, json[QString("InferenceSchedulerName")]);
    m_inference_scheduler_name_isSet = !json[QString("InferenceSchedulerName")].isNull() && m_inference_scheduler_name_isValid;

    m_data_start_time_after_isValid = ::OpenAPI::fromJsonValue(m_data_start_time_after, json[QString("DataStartTimeAfter")]);
    m_data_start_time_after_isSet = !json[QString("DataStartTimeAfter")].isNull() && m_data_start_time_after_isValid;

    m_data_end_time_before_isValid = ::OpenAPI::fromJsonValue(m_data_end_time_before, json[QString("DataEndTimeBefore")]);
    m_data_end_time_before_isSet = !json[QString("DataEndTimeBefore")].isNull() && m_data_end_time_before_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIListInferenceExecutionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListInferenceExecutionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_inference_scheduler_name_isSet) {
        obj.insert(QString("InferenceSchedulerName"), ::OpenAPI::toJsonValue(m_inference_scheduler_name));
    }
    if (m_data_start_time_after_isSet) {
        obj.insert(QString("DataStartTimeAfter"), ::OpenAPI::toJsonValue(m_data_start_time_after));
    }
    if (m_data_end_time_before_isSet) {
        obj.insert(QString("DataEndTimeBefore"), ::OpenAPI::toJsonValue(m_data_end_time_before));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIListInferenceExecutionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListInferenceExecutionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListInferenceExecutionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListInferenceExecutionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListInferenceExecutionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListInferenceExecutionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListInferenceExecutionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListInferenceExecutionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListInferenceExecutionsRequest::getInferenceSchedulerName() const {
    return m_inference_scheduler_name;
}
void OAIListInferenceExecutionsRequest::setInferenceSchedulerName(const QString &inference_scheduler_name) {
    m_inference_scheduler_name = inference_scheduler_name;
    m_inference_scheduler_name_isSet = true;
}

bool OAIListInferenceExecutionsRequest::is_inference_scheduler_name_Set() const{
    return m_inference_scheduler_name_isSet;
}

bool OAIListInferenceExecutionsRequest::is_inference_scheduler_name_Valid() const{
    return m_inference_scheduler_name_isValid;
}

QDateTime OAIListInferenceExecutionsRequest::getDataStartTimeAfter() const {
    return m_data_start_time_after;
}
void OAIListInferenceExecutionsRequest::setDataStartTimeAfter(const QDateTime &data_start_time_after) {
    m_data_start_time_after = data_start_time_after;
    m_data_start_time_after_isSet = true;
}

bool OAIListInferenceExecutionsRequest::is_data_start_time_after_Set() const{
    return m_data_start_time_after_isSet;
}

bool OAIListInferenceExecutionsRequest::is_data_start_time_after_Valid() const{
    return m_data_start_time_after_isValid;
}

QDateTime OAIListInferenceExecutionsRequest::getDataEndTimeBefore() const {
    return m_data_end_time_before;
}
void OAIListInferenceExecutionsRequest::setDataEndTimeBefore(const QDateTime &data_end_time_before) {
    m_data_end_time_before = data_end_time_before;
    m_data_end_time_before_isSet = true;
}

bool OAIListInferenceExecutionsRequest::is_data_end_time_before_Set() const{
    return m_data_end_time_before_isSet;
}

bool OAIListInferenceExecutionsRequest::is_data_end_time_before_Valid() const{
    return m_data_end_time_before_isValid;
}

OAIInferenceExecutionStatus OAIListInferenceExecutionsRequest::getStatus() const {
    return m_status;
}
void OAIListInferenceExecutionsRequest::setStatus(const OAIInferenceExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListInferenceExecutionsRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListInferenceExecutionsRequest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIListInferenceExecutionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_scheduler_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_start_time_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_end_time_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListInferenceExecutionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inference_scheduler_name_isValid && true;
}

} // namespace OpenAPI
