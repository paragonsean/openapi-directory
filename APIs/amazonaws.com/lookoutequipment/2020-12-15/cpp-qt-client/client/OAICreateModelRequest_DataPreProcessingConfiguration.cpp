/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateModelRequest_DataPreProcessingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateModelRequest_DataPreProcessingConfiguration::OAICreateModelRequest_DataPreProcessingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateModelRequest_DataPreProcessingConfiguration::OAICreateModelRequest_DataPreProcessingConfiguration() {
    this->initializeModel();
}

OAICreateModelRequest_DataPreProcessingConfiguration::~OAICreateModelRequest_DataPreProcessingConfiguration() {}

void OAICreateModelRequest_DataPreProcessingConfiguration::initializeModel() {

    m_target_sampling_rate_isSet = false;
    m_target_sampling_rate_isValid = false;
}

void OAICreateModelRequest_DataPreProcessingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateModelRequest_DataPreProcessingConfiguration::fromJsonObject(QJsonObject json) {

    m_target_sampling_rate_isValid = ::OpenAPI::fromJsonValue(m_target_sampling_rate, json[QString("TargetSamplingRate")]);
    m_target_sampling_rate_isSet = !json[QString("TargetSamplingRate")].isNull() && m_target_sampling_rate_isValid;
}

QString OAICreateModelRequest_DataPreProcessingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateModelRequest_DataPreProcessingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_target_sampling_rate.isSet()) {
        obj.insert(QString("TargetSamplingRate"), ::OpenAPI::toJsonValue(m_target_sampling_rate));
    }
    return obj;
}

OAITargetSamplingRate OAICreateModelRequest_DataPreProcessingConfiguration::getTargetSamplingRate() const {
    return m_target_sampling_rate;
}
void OAICreateModelRequest_DataPreProcessingConfiguration::setTargetSamplingRate(const OAITargetSamplingRate &target_sampling_rate) {
    m_target_sampling_rate = target_sampling_rate;
    m_target_sampling_rate_isSet = true;
}

bool OAICreateModelRequest_DataPreProcessingConfiguration::is_target_sampling_rate_Set() const{
    return m_target_sampling_rate_isSet;
}

bool OAICreateModelRequest_DataPreProcessingConfiguration::is_target_sampling_rate_Valid() const{
    return m_target_sampling_rate_isValid;
}

bool OAICreateModelRequest_DataPreProcessingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_sampling_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateModelRequest_DataPreProcessingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
