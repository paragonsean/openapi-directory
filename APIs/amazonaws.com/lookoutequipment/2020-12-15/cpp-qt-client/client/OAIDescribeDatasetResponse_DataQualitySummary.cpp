/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDatasetResponse_DataQualitySummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDatasetResponse_DataQualitySummary::OAIDescribeDatasetResponse_DataQualitySummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDatasetResponse_DataQualitySummary::OAIDescribeDatasetResponse_DataQualitySummary() {
    this->initializeModel();
}

OAIDescribeDatasetResponse_DataQualitySummary::~OAIDescribeDatasetResponse_DataQualitySummary() {}

void OAIDescribeDatasetResponse_DataQualitySummary::initializeModel() {

    m_insufficient_sensor_data_isSet = false;
    m_insufficient_sensor_data_isValid = false;

    m_missing_sensor_data_isSet = false;
    m_missing_sensor_data_isValid = false;

    m_invalid_sensor_data_isSet = false;
    m_invalid_sensor_data_isValid = false;

    m_unsupported_timestamps_isSet = false;
    m_unsupported_timestamps_isValid = false;

    m_duplicate_timestamps_isSet = false;
    m_duplicate_timestamps_isValid = false;
}

void OAIDescribeDatasetResponse_DataQualitySummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDatasetResponse_DataQualitySummary::fromJsonObject(QJsonObject json) {

    m_insufficient_sensor_data_isValid = ::OpenAPI::fromJsonValue(m_insufficient_sensor_data, json[QString("InsufficientSensorData")]);
    m_insufficient_sensor_data_isSet = !json[QString("InsufficientSensorData")].isNull() && m_insufficient_sensor_data_isValid;

    m_missing_sensor_data_isValid = ::OpenAPI::fromJsonValue(m_missing_sensor_data, json[QString("MissingSensorData")]);
    m_missing_sensor_data_isSet = !json[QString("MissingSensorData")].isNull() && m_missing_sensor_data_isValid;

    m_invalid_sensor_data_isValid = ::OpenAPI::fromJsonValue(m_invalid_sensor_data, json[QString("InvalidSensorData")]);
    m_invalid_sensor_data_isSet = !json[QString("InvalidSensorData")].isNull() && m_invalid_sensor_data_isValid;

    m_unsupported_timestamps_isValid = ::OpenAPI::fromJsonValue(m_unsupported_timestamps, json[QString("UnsupportedTimestamps")]);
    m_unsupported_timestamps_isSet = !json[QString("UnsupportedTimestamps")].isNull() && m_unsupported_timestamps_isValid;

    m_duplicate_timestamps_isValid = ::OpenAPI::fromJsonValue(m_duplicate_timestamps, json[QString("DuplicateTimestamps")]);
    m_duplicate_timestamps_isSet = !json[QString("DuplicateTimestamps")].isNull() && m_duplicate_timestamps_isValid;
}

QString OAIDescribeDatasetResponse_DataQualitySummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDatasetResponse_DataQualitySummary::asJsonObject() const {
    QJsonObject obj;
    if (m_insufficient_sensor_data.isSet()) {
        obj.insert(QString("InsufficientSensorData"), ::OpenAPI::toJsonValue(m_insufficient_sensor_data));
    }
    if (m_missing_sensor_data.isSet()) {
        obj.insert(QString("MissingSensorData"), ::OpenAPI::toJsonValue(m_missing_sensor_data));
    }
    if (m_invalid_sensor_data.isSet()) {
        obj.insert(QString("InvalidSensorData"), ::OpenAPI::toJsonValue(m_invalid_sensor_data));
    }
    if (m_unsupported_timestamps.isSet()) {
        obj.insert(QString("UnsupportedTimestamps"), ::OpenAPI::toJsonValue(m_unsupported_timestamps));
    }
    if (m_duplicate_timestamps.isSet()) {
        obj.insert(QString("DuplicateTimestamps"), ::OpenAPI::toJsonValue(m_duplicate_timestamps));
    }
    return obj;
}

OAIDataQualitySummary_InsufficientSensorData OAIDescribeDatasetResponse_DataQualitySummary::getInsufficientSensorData() const {
    return m_insufficient_sensor_data;
}
void OAIDescribeDatasetResponse_DataQualitySummary::setInsufficientSensorData(const OAIDataQualitySummary_InsufficientSensorData &insufficient_sensor_data) {
    m_insufficient_sensor_data = insufficient_sensor_data;
    m_insufficient_sensor_data_isSet = true;
}

bool OAIDescribeDatasetResponse_DataQualitySummary::is_insufficient_sensor_data_Set() const{
    return m_insufficient_sensor_data_isSet;
}

bool OAIDescribeDatasetResponse_DataQualitySummary::is_insufficient_sensor_data_Valid() const{
    return m_insufficient_sensor_data_isValid;
}

OAIDataQualitySummary_MissingSensorData OAIDescribeDatasetResponse_DataQualitySummary::getMissingSensorData() const {
    return m_missing_sensor_data;
}
void OAIDescribeDatasetResponse_DataQualitySummary::setMissingSensorData(const OAIDataQualitySummary_MissingSensorData &missing_sensor_data) {
    m_missing_sensor_data = missing_sensor_data;
    m_missing_sensor_data_isSet = true;
}

bool OAIDescribeDatasetResponse_DataQualitySummary::is_missing_sensor_data_Set() const{
    return m_missing_sensor_data_isSet;
}

bool OAIDescribeDatasetResponse_DataQualitySummary::is_missing_sensor_data_Valid() const{
    return m_missing_sensor_data_isValid;
}

OAIDataQualitySummary_InvalidSensorData OAIDescribeDatasetResponse_DataQualitySummary::getInvalidSensorData() const {
    return m_invalid_sensor_data;
}
void OAIDescribeDatasetResponse_DataQualitySummary::setInvalidSensorData(const OAIDataQualitySummary_InvalidSensorData &invalid_sensor_data) {
    m_invalid_sensor_data = invalid_sensor_data;
    m_invalid_sensor_data_isSet = true;
}

bool OAIDescribeDatasetResponse_DataQualitySummary::is_invalid_sensor_data_Set() const{
    return m_invalid_sensor_data_isSet;
}

bool OAIDescribeDatasetResponse_DataQualitySummary::is_invalid_sensor_data_Valid() const{
    return m_invalid_sensor_data_isValid;
}

OAIDataQualitySummary_UnsupportedTimestamps OAIDescribeDatasetResponse_DataQualitySummary::getUnsupportedTimestamps() const {
    return m_unsupported_timestamps;
}
void OAIDescribeDatasetResponse_DataQualitySummary::setUnsupportedTimestamps(const OAIDataQualitySummary_UnsupportedTimestamps &unsupported_timestamps) {
    m_unsupported_timestamps = unsupported_timestamps;
    m_unsupported_timestamps_isSet = true;
}

bool OAIDescribeDatasetResponse_DataQualitySummary::is_unsupported_timestamps_Set() const{
    return m_unsupported_timestamps_isSet;
}

bool OAIDescribeDatasetResponse_DataQualitySummary::is_unsupported_timestamps_Valid() const{
    return m_unsupported_timestamps_isValid;
}

OAIDataQualitySummary_DuplicateTimestamps OAIDescribeDatasetResponse_DataQualitySummary::getDuplicateTimestamps() const {
    return m_duplicate_timestamps;
}
void OAIDescribeDatasetResponse_DataQualitySummary::setDuplicateTimestamps(const OAIDataQualitySummary_DuplicateTimestamps &duplicate_timestamps) {
    m_duplicate_timestamps = duplicate_timestamps;
    m_duplicate_timestamps_isSet = true;
}

bool OAIDescribeDatasetResponse_DataQualitySummary::is_duplicate_timestamps_Set() const{
    return m_duplicate_timestamps_isSet;
}

bool OAIDescribeDatasetResponse_DataQualitySummary::is_duplicate_timestamps_Valid() const{
    return m_duplicate_timestamps_isValid;
}

bool OAIDescribeDatasetResponse_DataQualitySummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insufficient_sensor_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_sensor_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_sensor_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsupported_timestamps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_timestamps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDatasetResponse_DataQualitySummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_insufficient_sensor_data_isValid && m_missing_sensor_data_isValid && m_invalid_sensor_data_isValid && m_unsupported_timestamps_isValid && m_duplicate_timestamps_isValid && true;
}

} // namespace OpenAPI
