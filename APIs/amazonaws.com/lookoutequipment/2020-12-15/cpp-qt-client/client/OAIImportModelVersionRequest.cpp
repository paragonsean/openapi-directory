/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportModelVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportModelVersionRequest::OAIImportModelVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportModelVersionRequest::OAIImportModelVersionRequest() {
    this->initializeModel();
}

OAIImportModelVersionRequest::~OAIImportModelVersionRequest() {}

void OAIImportModelVersionRequest::initializeModel() {

    m_source_model_version_arn_isSet = false;
    m_source_model_version_arn_isValid = false;

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_labels_input_configuration_isSet = false;
    m_labels_input_configuration_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_server_side_kms_key_id_isSet = false;
    m_server_side_kms_key_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIImportModelVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportModelVersionRequest::fromJsonObject(QJsonObject json) {

    m_source_model_version_arn_isValid = ::OpenAPI::fromJsonValue(m_source_model_version_arn, json[QString("SourceModelVersionArn")]);
    m_source_model_version_arn_isSet = !json[QString("SourceModelVersionArn")].isNull() && m_source_model_version_arn_isValid;

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("DatasetName")]);
    m_dataset_name_isSet = !json[QString("DatasetName")].isNull() && m_dataset_name_isValid;

    m_labels_input_configuration_isValid = ::OpenAPI::fromJsonValue(m_labels_input_configuration, json[QString("LabelsInputConfiguration")]);
    m_labels_input_configuration_isSet = !json[QString("LabelsInputConfiguration")].isNull() && m_labels_input_configuration_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_server_side_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_server_side_kms_key_id, json[QString("ServerSideKmsKeyId")]);
    m_server_side_kms_key_id_isSet = !json[QString("ServerSideKmsKeyId")].isNull() && m_server_side_kms_key_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIImportModelVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportModelVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_source_model_version_arn_isSet) {
        obj.insert(QString("SourceModelVersionArn"), ::OpenAPI::toJsonValue(m_source_model_version_arn));
    }
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_dataset_name_isSet) {
        obj.insert(QString("DatasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_labels_input_configuration.isSet()) {
        obj.insert(QString("LabelsInputConfiguration"), ::OpenAPI::toJsonValue(m_labels_input_configuration));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_server_side_kms_key_id_isSet) {
        obj.insert(QString("ServerSideKmsKeyId"), ::OpenAPI::toJsonValue(m_server_side_kms_key_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIImportModelVersionRequest::getSourceModelVersionArn() const {
    return m_source_model_version_arn;
}
void OAIImportModelVersionRequest::setSourceModelVersionArn(const QString &source_model_version_arn) {
    m_source_model_version_arn = source_model_version_arn;
    m_source_model_version_arn_isSet = true;
}

bool OAIImportModelVersionRequest::is_source_model_version_arn_Set() const{
    return m_source_model_version_arn_isSet;
}

bool OAIImportModelVersionRequest::is_source_model_version_arn_Valid() const{
    return m_source_model_version_arn_isValid;
}

QString OAIImportModelVersionRequest::getModelName() const {
    return m_model_name;
}
void OAIImportModelVersionRequest::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIImportModelVersionRequest::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIImportModelVersionRequest::is_model_name_Valid() const{
    return m_model_name_isValid;
}

QString OAIImportModelVersionRequest::getDatasetName() const {
    return m_dataset_name;
}
void OAIImportModelVersionRequest::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIImportModelVersionRequest::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIImportModelVersionRequest::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

OAILabelsInputConfiguration OAIImportModelVersionRequest::getLabelsInputConfiguration() const {
    return m_labels_input_configuration;
}
void OAIImportModelVersionRequest::setLabelsInputConfiguration(const OAILabelsInputConfiguration &labels_input_configuration) {
    m_labels_input_configuration = labels_input_configuration;
    m_labels_input_configuration_isSet = true;
}

bool OAIImportModelVersionRequest::is_labels_input_configuration_Set() const{
    return m_labels_input_configuration_isSet;
}

bool OAIImportModelVersionRequest::is_labels_input_configuration_Valid() const{
    return m_labels_input_configuration_isValid;
}

QString OAIImportModelVersionRequest::getClientToken() const {
    return m_client_token;
}
void OAIImportModelVersionRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIImportModelVersionRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIImportModelVersionRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIImportModelVersionRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIImportModelVersionRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIImportModelVersionRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIImportModelVersionRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIImportModelVersionRequest::getServerSideKmsKeyId() const {
    return m_server_side_kms_key_id;
}
void OAIImportModelVersionRequest::setServerSideKmsKeyId(const QString &server_side_kms_key_id) {
    m_server_side_kms_key_id = server_side_kms_key_id;
    m_server_side_kms_key_id_isSet = true;
}

bool OAIImportModelVersionRequest::is_server_side_kms_key_id_Set() const{
    return m_server_side_kms_key_id_isSet;
}

bool OAIImportModelVersionRequest::is_server_side_kms_key_id_Valid() const{
    return m_server_side_kms_key_id_isValid;
}

QList OAIImportModelVersionRequest::getTags() const {
    return m_tags;
}
void OAIImportModelVersionRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIImportModelVersionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIImportModelVersionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIImportModelVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_model_version_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_input_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportModelVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_model_version_arn_isValid && m_dataset_name_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
