/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInferenceExecutionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInferenceExecutionSummary::OAIInferenceExecutionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInferenceExecutionSummary::OAIInferenceExecutionSummary() {
    this->initializeModel();
}

OAIInferenceExecutionSummary::~OAIInferenceExecutionSummary() {}

void OAIInferenceExecutionSummary::initializeModel() {

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_model_arn_isSet = false;
    m_model_arn_isValid = false;

    m_inference_scheduler_name_isSet = false;
    m_inference_scheduler_name_isValid = false;

    m_inference_scheduler_arn_isSet = false;
    m_inference_scheduler_arn_isValid = false;

    m_scheduled_start_time_isSet = false;
    m_scheduled_start_time_isValid = false;

    m_data_start_time_isSet = false;
    m_data_start_time_isValid = false;

    m_data_end_time_isSet = false;
    m_data_end_time_isValid = false;

    m_data_input_configuration_isSet = false;
    m_data_input_configuration_isValid = false;

    m_data_output_configuration_isSet = false;
    m_data_output_configuration_isValid = false;

    m_customer_result_object_isSet = false;
    m_customer_result_object_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_failed_reason_isSet = false;
    m_failed_reason_isValid = false;
}

void OAIInferenceExecutionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInferenceExecutionSummary::fromJsonObject(QJsonObject json) {

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_model_arn_isValid = ::OpenAPI::fromJsonValue(m_model_arn, json[QString("ModelArn")]);
    m_model_arn_isSet = !json[QString("ModelArn")].isNull() && m_model_arn_isValid;

    m_inference_scheduler_name_isValid = ::OpenAPI::fromJsonValue(m_inference_scheduler_name, json[QString("InferenceSchedulerName")]);
    m_inference_scheduler_name_isSet = !json[QString("InferenceSchedulerName")].isNull() && m_inference_scheduler_name_isValid;

    m_inference_scheduler_arn_isValid = ::OpenAPI::fromJsonValue(m_inference_scheduler_arn, json[QString("InferenceSchedulerArn")]);
    m_inference_scheduler_arn_isSet = !json[QString("InferenceSchedulerArn")].isNull() && m_inference_scheduler_arn_isValid;

    m_scheduled_start_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start_time, json[QString("ScheduledStartTime")]);
    m_scheduled_start_time_isSet = !json[QString("ScheduledStartTime")].isNull() && m_scheduled_start_time_isValid;

    m_data_start_time_isValid = ::OpenAPI::fromJsonValue(m_data_start_time, json[QString("DataStartTime")]);
    m_data_start_time_isSet = !json[QString("DataStartTime")].isNull() && m_data_start_time_isValid;

    m_data_end_time_isValid = ::OpenAPI::fromJsonValue(m_data_end_time, json[QString("DataEndTime")]);
    m_data_end_time_isSet = !json[QString("DataEndTime")].isNull() && m_data_end_time_isValid;

    m_data_input_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_input_configuration, json[QString("DataInputConfiguration")]);
    m_data_input_configuration_isSet = !json[QString("DataInputConfiguration")].isNull() && m_data_input_configuration_isValid;

    m_data_output_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_output_configuration, json[QString("DataOutputConfiguration")]);
    m_data_output_configuration_isSet = !json[QString("DataOutputConfiguration")].isNull() && m_data_output_configuration_isValid;

    m_customer_result_object_isValid = ::OpenAPI::fromJsonValue(m_customer_result_object, json[QString("CustomerResultObject")]);
    m_customer_result_object_isSet = !json[QString("CustomerResultObject")].isNull() && m_customer_result_object_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_failed_reason_isValid = ::OpenAPI::fromJsonValue(m_failed_reason, json[QString("FailedReason")]);
    m_failed_reason_isSet = !json[QString("FailedReason")].isNull() && m_failed_reason_isValid;
}

QString OAIInferenceExecutionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInferenceExecutionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_model_arn_isSet) {
        obj.insert(QString("ModelArn"), ::OpenAPI::toJsonValue(m_model_arn));
    }
    if (m_inference_scheduler_name_isSet) {
        obj.insert(QString("InferenceSchedulerName"), ::OpenAPI::toJsonValue(m_inference_scheduler_name));
    }
    if (m_inference_scheduler_arn_isSet) {
        obj.insert(QString("InferenceSchedulerArn"), ::OpenAPI::toJsonValue(m_inference_scheduler_arn));
    }
    if (m_scheduled_start_time_isSet) {
        obj.insert(QString("ScheduledStartTime"), ::OpenAPI::toJsonValue(m_scheduled_start_time));
    }
    if (m_data_start_time_isSet) {
        obj.insert(QString("DataStartTime"), ::OpenAPI::toJsonValue(m_data_start_time));
    }
    if (m_data_end_time_isSet) {
        obj.insert(QString("DataEndTime"), ::OpenAPI::toJsonValue(m_data_end_time));
    }
    if (m_data_input_configuration.isSet()) {
        obj.insert(QString("DataInputConfiguration"), ::OpenAPI::toJsonValue(m_data_input_configuration));
    }
    if (m_data_output_configuration.isSet()) {
        obj.insert(QString("DataOutputConfiguration"), ::OpenAPI::toJsonValue(m_data_output_configuration));
    }
    if (m_customer_result_object.isSet()) {
        obj.insert(QString("CustomerResultObject"), ::OpenAPI::toJsonValue(m_customer_result_object));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_failed_reason_isSet) {
        obj.insert(QString("FailedReason"), ::OpenAPI::toJsonValue(m_failed_reason));
    }
    return obj;
}

QString OAIInferenceExecutionSummary::getModelName() const {
    return m_model_name;
}
void OAIInferenceExecutionSummary::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIInferenceExecutionSummary::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIInferenceExecutionSummary::is_model_name_Valid() const{
    return m_model_name_isValid;
}

QString OAIInferenceExecutionSummary::getModelArn() const {
    return m_model_arn;
}
void OAIInferenceExecutionSummary::setModelArn(const QString &model_arn) {
    m_model_arn = model_arn;
    m_model_arn_isSet = true;
}

bool OAIInferenceExecutionSummary::is_model_arn_Set() const{
    return m_model_arn_isSet;
}

bool OAIInferenceExecutionSummary::is_model_arn_Valid() const{
    return m_model_arn_isValid;
}

QString OAIInferenceExecutionSummary::getInferenceSchedulerName() const {
    return m_inference_scheduler_name;
}
void OAIInferenceExecutionSummary::setInferenceSchedulerName(const QString &inference_scheduler_name) {
    m_inference_scheduler_name = inference_scheduler_name;
    m_inference_scheduler_name_isSet = true;
}

bool OAIInferenceExecutionSummary::is_inference_scheduler_name_Set() const{
    return m_inference_scheduler_name_isSet;
}

bool OAIInferenceExecutionSummary::is_inference_scheduler_name_Valid() const{
    return m_inference_scheduler_name_isValid;
}

QString OAIInferenceExecutionSummary::getInferenceSchedulerArn() const {
    return m_inference_scheduler_arn;
}
void OAIInferenceExecutionSummary::setInferenceSchedulerArn(const QString &inference_scheduler_arn) {
    m_inference_scheduler_arn = inference_scheduler_arn;
    m_inference_scheduler_arn_isSet = true;
}

bool OAIInferenceExecutionSummary::is_inference_scheduler_arn_Set() const{
    return m_inference_scheduler_arn_isSet;
}

bool OAIInferenceExecutionSummary::is_inference_scheduler_arn_Valid() const{
    return m_inference_scheduler_arn_isValid;
}

QDateTime OAIInferenceExecutionSummary::getScheduledStartTime() const {
    return m_scheduled_start_time;
}
void OAIInferenceExecutionSummary::setScheduledStartTime(const QDateTime &scheduled_start_time) {
    m_scheduled_start_time = scheduled_start_time;
    m_scheduled_start_time_isSet = true;
}

bool OAIInferenceExecutionSummary::is_scheduled_start_time_Set() const{
    return m_scheduled_start_time_isSet;
}

bool OAIInferenceExecutionSummary::is_scheduled_start_time_Valid() const{
    return m_scheduled_start_time_isValid;
}

QDateTime OAIInferenceExecutionSummary::getDataStartTime() const {
    return m_data_start_time;
}
void OAIInferenceExecutionSummary::setDataStartTime(const QDateTime &data_start_time) {
    m_data_start_time = data_start_time;
    m_data_start_time_isSet = true;
}

bool OAIInferenceExecutionSummary::is_data_start_time_Set() const{
    return m_data_start_time_isSet;
}

bool OAIInferenceExecutionSummary::is_data_start_time_Valid() const{
    return m_data_start_time_isValid;
}

QDateTime OAIInferenceExecutionSummary::getDataEndTime() const {
    return m_data_end_time;
}
void OAIInferenceExecutionSummary::setDataEndTime(const QDateTime &data_end_time) {
    m_data_end_time = data_end_time;
    m_data_end_time_isSet = true;
}

bool OAIInferenceExecutionSummary::is_data_end_time_Set() const{
    return m_data_end_time_isSet;
}

bool OAIInferenceExecutionSummary::is_data_end_time_Valid() const{
    return m_data_end_time_isValid;
}

OAIDescribeInferenceSchedulerResponse_DataInputConfiguration OAIInferenceExecutionSummary::getDataInputConfiguration() const {
    return m_data_input_configuration;
}
void OAIInferenceExecutionSummary::setDataInputConfiguration(const OAIDescribeInferenceSchedulerResponse_DataInputConfiguration &data_input_configuration) {
    m_data_input_configuration = data_input_configuration;
    m_data_input_configuration_isSet = true;
}

bool OAIInferenceExecutionSummary::is_data_input_configuration_Set() const{
    return m_data_input_configuration_isSet;
}

bool OAIInferenceExecutionSummary::is_data_input_configuration_Valid() const{
    return m_data_input_configuration_isValid;
}

OAIInferenceExecutionSummary_DataOutputConfiguration OAIInferenceExecutionSummary::getDataOutputConfiguration() const {
    return m_data_output_configuration;
}
void OAIInferenceExecutionSummary::setDataOutputConfiguration(const OAIInferenceExecutionSummary_DataOutputConfiguration &data_output_configuration) {
    m_data_output_configuration = data_output_configuration;
    m_data_output_configuration_isSet = true;
}

bool OAIInferenceExecutionSummary::is_data_output_configuration_Set() const{
    return m_data_output_configuration_isSet;
}

bool OAIInferenceExecutionSummary::is_data_output_configuration_Valid() const{
    return m_data_output_configuration_isValid;
}

OAIInferenceExecutionSummary_CustomerResultObject OAIInferenceExecutionSummary::getCustomerResultObject() const {
    return m_customer_result_object;
}
void OAIInferenceExecutionSummary::setCustomerResultObject(const OAIInferenceExecutionSummary_CustomerResultObject &customer_result_object) {
    m_customer_result_object = customer_result_object;
    m_customer_result_object_isSet = true;
}

bool OAIInferenceExecutionSummary::is_customer_result_object_Set() const{
    return m_customer_result_object_isSet;
}

bool OAIInferenceExecutionSummary::is_customer_result_object_Valid() const{
    return m_customer_result_object_isValid;
}

OAIInferenceExecutionStatus OAIInferenceExecutionSummary::getStatus() const {
    return m_status;
}
void OAIInferenceExecutionSummary::setStatus(const OAIInferenceExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInferenceExecutionSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInferenceExecutionSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIInferenceExecutionSummary::getFailedReason() const {
    return m_failed_reason;
}
void OAIInferenceExecutionSummary::setFailedReason(const QString &failed_reason) {
    m_failed_reason = failed_reason;
    m_failed_reason_isSet = true;
}

bool OAIInferenceExecutionSummary::is_failed_reason_Set() const{
    return m_failed_reason_isSet;
}

bool OAIInferenceExecutionSummary::is_failed_reason_Valid() const{
    return m_failed_reason_isValid;
}

bool OAIInferenceExecutionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_scheduler_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_scheduler_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_input_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_output_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_result_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInferenceExecutionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
