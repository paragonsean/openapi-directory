/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListInferenceEventsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListInferenceEventsResponse::OAIListInferenceEventsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListInferenceEventsResponse::OAIListInferenceEventsResponse() {
    this->initializeModel();
}

OAIListInferenceEventsResponse::~OAIListInferenceEventsResponse() {}

void OAIListInferenceEventsResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_inference_event_summaries_isSet = false;
    m_inference_event_summaries_isValid = false;
}

void OAIListInferenceEventsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListInferenceEventsResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_inference_event_summaries_isValid = ::OpenAPI::fromJsonValue(m_inference_event_summaries, json[QString("InferenceEventSummaries")]);
    m_inference_event_summaries_isSet = !json[QString("InferenceEventSummaries")].isNull() && m_inference_event_summaries_isValid;
}

QString OAIListInferenceEventsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListInferenceEventsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_inference_event_summaries.isSet()) {
        obj.insert(QString("InferenceEventSummaries"), ::OpenAPI::toJsonValue(m_inference_event_summaries));
    }
    return obj;
}

QString OAIListInferenceEventsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListInferenceEventsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListInferenceEventsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListInferenceEventsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListInferenceEventsResponse::getInferenceEventSummaries() const {
    return m_inference_event_summaries;
}
void OAIListInferenceEventsResponse::setInferenceEventSummaries(const QList &inference_event_summaries) {
    m_inference_event_summaries = inference_event_summaries;
    m_inference_event_summaries_isSet = true;
}

bool OAIListInferenceEventsResponse::is_inference_event_summaries_Set() const{
    return m_inference_event_summaries_isSet;
}

bool OAIListInferenceEventsResponse::is_inference_event_summaries_Valid() const{
    return m_inference_event_summaries_isValid;
}

bool OAIListInferenceEventsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_event_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListInferenceEventsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
