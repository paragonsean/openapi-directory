/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLabelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLabelRequest::OAICreateLabelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLabelRequest::OAICreateLabelRequest() {
    this->initializeModel();
}

OAICreateLabelRequest::~OAICreateLabelRequest() {}

void OAICreateLabelRequest::initializeModel() {

    m_label_group_name_isSet = false;
    m_label_group_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_fault_code_isSet = false;
    m_fault_code_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_equipment_isSet = false;
    m_equipment_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAICreateLabelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLabelRequest::fromJsonObject(QJsonObject json) {

    m_label_group_name_isValid = ::OpenAPI::fromJsonValue(m_label_group_name, json[QString("LabelGroupName")]);
    m_label_group_name_isSet = !json[QString("LabelGroupName")].isNull() && m_label_group_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("Rating")]);
    m_rating_isSet = !json[QString("Rating")].isNull() && m_rating_isValid;

    m_fault_code_isValid = ::OpenAPI::fromJsonValue(m_fault_code, json[QString("FaultCode")]);
    m_fault_code_isSet = !json[QString("FaultCode")].isNull() && m_fault_code_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_equipment_isValid = ::OpenAPI::fromJsonValue(m_equipment, json[QString("Equipment")]);
    m_equipment_isSet = !json[QString("Equipment")].isNull() && m_equipment_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAICreateLabelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLabelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_label_group_name_isSet) {
        obj.insert(QString("LabelGroupName"), ::OpenAPI::toJsonValue(m_label_group_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_rating.isSet()) {
        obj.insert(QString("Rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_fault_code_isSet) {
        obj.insert(QString("FaultCode"), ::OpenAPI::toJsonValue(m_fault_code));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_equipment_isSet) {
        obj.insert(QString("Equipment"), ::OpenAPI::toJsonValue(m_equipment));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAICreateLabelRequest::getLabelGroupName() const {
    return m_label_group_name;
}
void OAICreateLabelRequest::setLabelGroupName(const QString &label_group_name) {
    m_label_group_name = label_group_name;
    m_label_group_name_isSet = true;
}

bool OAICreateLabelRequest::is_label_group_name_Set() const{
    return m_label_group_name_isSet;
}

bool OAICreateLabelRequest::is_label_group_name_Valid() const{
    return m_label_group_name_isValid;
}

QDateTime OAICreateLabelRequest::getStartTime() const {
    return m_start_time;
}
void OAICreateLabelRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICreateLabelRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICreateLabelRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAICreateLabelRequest::getEndTime() const {
    return m_end_time;
}
void OAICreateLabelRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICreateLabelRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICreateLabelRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAILabelRating OAICreateLabelRequest::getRating() const {
    return m_rating;
}
void OAICreateLabelRequest::setRating(const OAILabelRating &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAICreateLabelRequest::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAICreateLabelRequest::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAICreateLabelRequest::getFaultCode() const {
    return m_fault_code;
}
void OAICreateLabelRequest::setFaultCode(const QString &fault_code) {
    m_fault_code = fault_code;
    m_fault_code_isSet = true;
}

bool OAICreateLabelRequest::is_fault_code_Set() const{
    return m_fault_code_isSet;
}

bool OAICreateLabelRequest::is_fault_code_Valid() const{
    return m_fault_code_isValid;
}

QString OAICreateLabelRequest::getNotes() const {
    return m_notes;
}
void OAICreateLabelRequest::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAICreateLabelRequest::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAICreateLabelRequest::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAICreateLabelRequest::getEquipment() const {
    return m_equipment;
}
void OAICreateLabelRequest::setEquipment(const QString &equipment) {
    m_equipment = equipment;
    m_equipment_isSet = true;
}

bool OAICreateLabelRequest::is_equipment_Set() const{
    return m_equipment_isSet;
}

bool OAICreateLabelRequest::is_equipment_Valid() const{
    return m_equipment_isValid;
}

QString OAICreateLabelRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateLabelRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateLabelRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateLabelRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICreateLabelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equipment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLabelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_label_group_name_isValid && m_start_time_isValid && m_end_time_isValid && m_rating_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
