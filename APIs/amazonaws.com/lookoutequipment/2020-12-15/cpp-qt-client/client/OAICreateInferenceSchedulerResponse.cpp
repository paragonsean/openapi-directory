/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInferenceSchedulerResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInferenceSchedulerResponse::OAICreateInferenceSchedulerResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInferenceSchedulerResponse::OAICreateInferenceSchedulerResponse() {
    this->initializeModel();
}

OAICreateInferenceSchedulerResponse::~OAICreateInferenceSchedulerResponse() {}

void OAICreateInferenceSchedulerResponse::initializeModel() {

    m_inference_scheduler_arn_isSet = false;
    m_inference_scheduler_arn_isValid = false;

    m_inference_scheduler_name_isSet = false;
    m_inference_scheduler_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICreateInferenceSchedulerResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInferenceSchedulerResponse::fromJsonObject(QJsonObject json) {

    m_inference_scheduler_arn_isValid = ::OpenAPI::fromJsonValue(m_inference_scheduler_arn, json[QString("InferenceSchedulerArn")]);
    m_inference_scheduler_arn_isSet = !json[QString("InferenceSchedulerArn")].isNull() && m_inference_scheduler_arn_isValid;

    m_inference_scheduler_name_isValid = ::OpenAPI::fromJsonValue(m_inference_scheduler_name, json[QString("InferenceSchedulerName")]);
    m_inference_scheduler_name_isSet = !json[QString("InferenceSchedulerName")].isNull() && m_inference_scheduler_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAICreateInferenceSchedulerResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInferenceSchedulerResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_inference_scheduler_arn_isSet) {
        obj.insert(QString("InferenceSchedulerArn"), ::OpenAPI::toJsonValue(m_inference_scheduler_arn));
    }
    if (m_inference_scheduler_name_isSet) {
        obj.insert(QString("InferenceSchedulerName"), ::OpenAPI::toJsonValue(m_inference_scheduler_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICreateInferenceSchedulerResponse::getInferenceSchedulerArn() const {
    return m_inference_scheduler_arn;
}
void OAICreateInferenceSchedulerResponse::setInferenceSchedulerArn(const QString &inference_scheduler_arn) {
    m_inference_scheduler_arn = inference_scheduler_arn;
    m_inference_scheduler_arn_isSet = true;
}

bool OAICreateInferenceSchedulerResponse::is_inference_scheduler_arn_Set() const{
    return m_inference_scheduler_arn_isSet;
}

bool OAICreateInferenceSchedulerResponse::is_inference_scheduler_arn_Valid() const{
    return m_inference_scheduler_arn_isValid;
}

QString OAICreateInferenceSchedulerResponse::getInferenceSchedulerName() const {
    return m_inference_scheduler_name;
}
void OAICreateInferenceSchedulerResponse::setInferenceSchedulerName(const QString &inference_scheduler_name) {
    m_inference_scheduler_name = inference_scheduler_name;
    m_inference_scheduler_name_isSet = true;
}

bool OAICreateInferenceSchedulerResponse::is_inference_scheduler_name_Set() const{
    return m_inference_scheduler_name_isSet;
}

bool OAICreateInferenceSchedulerResponse::is_inference_scheduler_name_Valid() const{
    return m_inference_scheduler_name_isValid;
}

OAIInferenceSchedulerStatus OAICreateInferenceSchedulerResponse::getStatus() const {
    return m_status;
}
void OAICreateInferenceSchedulerResponse::setStatus(const OAIInferenceSchedulerStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateInferenceSchedulerResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateInferenceSchedulerResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICreateInferenceSchedulerResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inference_scheduler_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_scheduler_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInferenceSchedulerResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
