/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDatasetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDatasetResponse::OAIDescribeDatasetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDatasetResponse::OAIDescribeDatasetResponse() {
    this->initializeModel();
}

OAIDescribeDatasetResponse::~OAIDescribeDatasetResponse() {}

void OAIDescribeDatasetResponse::initializeModel() {

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_dataset_arn_isSet = false;
    m_dataset_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_server_side_kms_key_id_isSet = false;
    m_server_side_kms_key_id_isValid = false;

    m_ingestion_input_configuration_isSet = false;
    m_ingestion_input_configuration_isValid = false;

    m_data_quality_summary_isSet = false;
    m_data_quality_summary_isValid = false;

    m_ingested_files_summary_isSet = false;
    m_ingested_files_summary_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_data_start_time_isSet = false;
    m_data_start_time_isValid = false;

    m_data_end_time_isSet = false;
    m_data_end_time_isValid = false;

    m_source_dataset_arn_isSet = false;
    m_source_dataset_arn_isValid = false;
}

void OAIDescribeDatasetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDatasetResponse::fromJsonObject(QJsonObject json) {

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("DatasetName")]);
    m_dataset_name_isSet = !json[QString("DatasetName")].isNull() && m_dataset_name_isValid;

    m_dataset_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_arn, json[QString("DatasetArn")]);
    m_dataset_arn_isSet = !json[QString("DatasetArn")].isNull() && m_dataset_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_server_side_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_server_side_kms_key_id, json[QString("ServerSideKmsKeyId")]);
    m_server_side_kms_key_id_isSet = !json[QString("ServerSideKmsKeyId")].isNull() && m_server_side_kms_key_id_isValid;

    m_ingestion_input_configuration_isValid = ::OpenAPI::fromJsonValue(m_ingestion_input_configuration, json[QString("IngestionInputConfiguration")]);
    m_ingestion_input_configuration_isSet = !json[QString("IngestionInputConfiguration")].isNull() && m_ingestion_input_configuration_isValid;

    m_data_quality_summary_isValid = ::OpenAPI::fromJsonValue(m_data_quality_summary, json[QString("DataQualitySummary")]);
    m_data_quality_summary_isSet = !json[QString("DataQualitySummary")].isNull() && m_data_quality_summary_isValid;

    m_ingested_files_summary_isValid = ::OpenAPI::fromJsonValue(m_ingested_files_summary, json[QString("IngestedFilesSummary")]);
    m_ingested_files_summary_isSet = !json[QString("IngestedFilesSummary")].isNull() && m_ingested_files_summary_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_data_start_time_isValid = ::OpenAPI::fromJsonValue(m_data_start_time, json[QString("DataStartTime")]);
    m_data_start_time_isSet = !json[QString("DataStartTime")].isNull() && m_data_start_time_isValid;

    m_data_end_time_isValid = ::OpenAPI::fromJsonValue(m_data_end_time, json[QString("DataEndTime")]);
    m_data_end_time_isSet = !json[QString("DataEndTime")].isNull() && m_data_end_time_isValid;

    m_source_dataset_arn_isValid = ::OpenAPI::fromJsonValue(m_source_dataset_arn, json[QString("SourceDatasetArn")]);
    m_source_dataset_arn_isSet = !json[QString("SourceDatasetArn")].isNull() && m_source_dataset_arn_isValid;
}

QString OAIDescribeDatasetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDatasetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_name_isSet) {
        obj.insert(QString("DatasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_dataset_arn_isSet) {
        obj.insert(QString("DatasetArn"), ::OpenAPI::toJsonValue(m_dataset_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_schema_isSet) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_server_side_kms_key_id_isSet) {
        obj.insert(QString("ServerSideKmsKeyId"), ::OpenAPI::toJsonValue(m_server_side_kms_key_id));
    }
    if (m_ingestion_input_configuration.isSet()) {
        obj.insert(QString("IngestionInputConfiguration"), ::OpenAPI::toJsonValue(m_ingestion_input_configuration));
    }
    if (m_data_quality_summary.isSet()) {
        obj.insert(QString("DataQualitySummary"), ::OpenAPI::toJsonValue(m_data_quality_summary));
    }
    if (m_ingested_files_summary.isSet()) {
        obj.insert(QString("IngestedFilesSummary"), ::OpenAPI::toJsonValue(m_ingested_files_summary));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_data_start_time_isSet) {
        obj.insert(QString("DataStartTime"), ::OpenAPI::toJsonValue(m_data_start_time));
    }
    if (m_data_end_time_isSet) {
        obj.insert(QString("DataEndTime"), ::OpenAPI::toJsonValue(m_data_end_time));
    }
    if (m_source_dataset_arn_isSet) {
        obj.insert(QString("SourceDatasetArn"), ::OpenAPI::toJsonValue(m_source_dataset_arn));
    }
    return obj;
}

QString OAIDescribeDatasetResponse::getDatasetName() const {
    return m_dataset_name;
}
void OAIDescribeDatasetResponse::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIDescribeDatasetResponse::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIDescribeDatasetResponse::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

QString OAIDescribeDatasetResponse::getDatasetArn() const {
    return m_dataset_arn;
}
void OAIDescribeDatasetResponse::setDatasetArn(const QString &dataset_arn) {
    m_dataset_arn = dataset_arn;
    m_dataset_arn_isSet = true;
}

bool OAIDescribeDatasetResponse::is_dataset_arn_Set() const{
    return m_dataset_arn_isSet;
}

bool OAIDescribeDatasetResponse::is_dataset_arn_Valid() const{
    return m_dataset_arn_isValid;
}

QDateTime OAIDescribeDatasetResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeDatasetResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeDatasetResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeDatasetResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIDescribeDatasetResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIDescribeDatasetResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIDescribeDatasetResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIDescribeDatasetResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

OAIDatasetStatus OAIDescribeDatasetResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDatasetResponse::setStatus(const OAIDatasetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDatasetResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDatasetResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeDatasetResponse::getSchema() const {
    return m_schema;
}
void OAIDescribeDatasetResponse::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIDescribeDatasetResponse::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIDescribeDatasetResponse::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIDescribeDatasetResponse::getServerSideKmsKeyId() const {
    return m_server_side_kms_key_id;
}
void OAIDescribeDatasetResponse::setServerSideKmsKeyId(const QString &server_side_kms_key_id) {
    m_server_side_kms_key_id = server_side_kms_key_id;
    m_server_side_kms_key_id_isSet = true;
}

bool OAIDescribeDatasetResponse::is_server_side_kms_key_id_Set() const{
    return m_server_side_kms_key_id_isSet;
}

bool OAIDescribeDatasetResponse::is_server_side_kms_key_id_Valid() const{
    return m_server_side_kms_key_id_isValid;
}

OAIDescribeDataIngestionJobResponse_IngestionInputConfiguration OAIDescribeDatasetResponse::getIngestionInputConfiguration() const {
    return m_ingestion_input_configuration;
}
void OAIDescribeDatasetResponse::setIngestionInputConfiguration(const OAIDescribeDataIngestionJobResponse_IngestionInputConfiguration &ingestion_input_configuration) {
    m_ingestion_input_configuration = ingestion_input_configuration;
    m_ingestion_input_configuration_isSet = true;
}

bool OAIDescribeDatasetResponse::is_ingestion_input_configuration_Set() const{
    return m_ingestion_input_configuration_isSet;
}

bool OAIDescribeDatasetResponse::is_ingestion_input_configuration_Valid() const{
    return m_ingestion_input_configuration_isValid;
}

OAIDescribeDatasetResponse_DataQualitySummary OAIDescribeDatasetResponse::getDataQualitySummary() const {
    return m_data_quality_summary;
}
void OAIDescribeDatasetResponse::setDataQualitySummary(const OAIDescribeDatasetResponse_DataQualitySummary &data_quality_summary) {
    m_data_quality_summary = data_quality_summary;
    m_data_quality_summary_isSet = true;
}

bool OAIDescribeDatasetResponse::is_data_quality_summary_Set() const{
    return m_data_quality_summary_isSet;
}

bool OAIDescribeDatasetResponse::is_data_quality_summary_Valid() const{
    return m_data_quality_summary_isValid;
}

OAIDescribeDatasetResponse_IngestedFilesSummary OAIDescribeDatasetResponse::getIngestedFilesSummary() const {
    return m_ingested_files_summary;
}
void OAIDescribeDatasetResponse::setIngestedFilesSummary(const OAIDescribeDatasetResponse_IngestedFilesSummary &ingested_files_summary) {
    m_ingested_files_summary = ingested_files_summary;
    m_ingested_files_summary_isSet = true;
}

bool OAIDescribeDatasetResponse::is_ingested_files_summary_Set() const{
    return m_ingested_files_summary_isSet;
}

bool OAIDescribeDatasetResponse::is_ingested_files_summary_Valid() const{
    return m_ingested_files_summary_isValid;
}

QString OAIDescribeDatasetResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeDatasetResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeDatasetResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeDatasetResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QDateTime OAIDescribeDatasetResponse::getDataStartTime() const {
    return m_data_start_time;
}
void OAIDescribeDatasetResponse::setDataStartTime(const QDateTime &data_start_time) {
    m_data_start_time = data_start_time;
    m_data_start_time_isSet = true;
}

bool OAIDescribeDatasetResponse::is_data_start_time_Set() const{
    return m_data_start_time_isSet;
}

bool OAIDescribeDatasetResponse::is_data_start_time_Valid() const{
    return m_data_start_time_isValid;
}

QDateTime OAIDescribeDatasetResponse::getDataEndTime() const {
    return m_data_end_time;
}
void OAIDescribeDatasetResponse::setDataEndTime(const QDateTime &data_end_time) {
    m_data_end_time = data_end_time;
    m_data_end_time_isSet = true;
}

bool OAIDescribeDatasetResponse::is_data_end_time_Set() const{
    return m_data_end_time_isSet;
}

bool OAIDescribeDatasetResponse::is_data_end_time_Valid() const{
    return m_data_end_time_isValid;
}

QString OAIDescribeDatasetResponse::getSourceDatasetArn() const {
    return m_source_dataset_arn;
}
void OAIDescribeDatasetResponse::setSourceDatasetArn(const QString &source_dataset_arn) {
    m_source_dataset_arn = source_dataset_arn;
    m_source_dataset_arn_isSet = true;
}

bool OAIDescribeDatasetResponse::is_source_dataset_arn_Set() const{
    return m_source_dataset_arn_isSet;
}

bool OAIDescribeDatasetResponse::is_source_dataset_arn_Valid() const{
    return m_source_dataset_arn_isValid;
}

bool OAIDescribeDatasetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingestion_input_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_quality_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingested_files_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_dataset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDatasetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
