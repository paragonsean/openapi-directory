/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISensorStatisticsSummary_InvalidDateEntries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISensorStatisticsSummary_InvalidDateEntries::OAISensorStatisticsSummary_InvalidDateEntries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISensorStatisticsSummary_InvalidDateEntries::OAISensorStatisticsSummary_InvalidDateEntries() {
    this->initializeModel();
}

OAISensorStatisticsSummary_InvalidDateEntries::~OAISensorStatisticsSummary_InvalidDateEntries() {}

void OAISensorStatisticsSummary_InvalidDateEntries::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;
}

void OAISensorStatisticsSummary_InvalidDateEntries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISensorStatisticsSummary_InvalidDateEntries::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("Percentage")]);
    m_percentage_isSet = !json[QString("Percentage")].isNull() && m_percentage_isValid;
}

QString OAISensorStatisticsSummary_InvalidDateEntries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISensorStatisticsSummary_InvalidDateEntries::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("Percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    return obj;
}

qint32 OAISensorStatisticsSummary_InvalidDateEntries::getCount() const {
    return m_count;
}
void OAISensorStatisticsSummary_InvalidDateEntries::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAISensorStatisticsSummary_InvalidDateEntries::is_count_Set() const{
    return m_count_isSet;
}

bool OAISensorStatisticsSummary_InvalidDateEntries::is_count_Valid() const{
    return m_count_isValid;
}

float OAISensorStatisticsSummary_InvalidDateEntries::getPercentage() const {
    return m_percentage;
}
void OAISensorStatisticsSummary_InvalidDateEntries::setPercentage(const float &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAISensorStatisticsSummary_InvalidDateEntries::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAISensorStatisticsSummary_InvalidDateEntries::is_percentage_Valid() const{
    return m_percentage_isValid;
}

bool OAISensorStatisticsSummary_InvalidDateEntries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISensorStatisticsSummary_InvalidDateEntries::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_percentage_isValid && true;
}

} // namespace OpenAPI
