/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInferenceInputNameConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInferenceInputNameConfiguration::OAIInferenceInputNameConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInferenceInputNameConfiguration::OAIInferenceInputNameConfiguration() {
    this->initializeModel();
}

OAIInferenceInputNameConfiguration::~OAIInferenceInputNameConfiguration() {}

void OAIInferenceInputNameConfiguration::initializeModel() {

    m_timestamp_format_isSet = false;
    m_timestamp_format_isValid = false;

    m_component_timestamp_delimiter_isSet = false;
    m_component_timestamp_delimiter_isValid = false;
}

void OAIInferenceInputNameConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInferenceInputNameConfiguration::fromJsonObject(QJsonObject json) {

    m_timestamp_format_isValid = ::OpenAPI::fromJsonValue(m_timestamp_format, json[QString("TimestampFormat")]);
    m_timestamp_format_isSet = !json[QString("TimestampFormat")].isNull() && m_timestamp_format_isValid;

    m_component_timestamp_delimiter_isValid = ::OpenAPI::fromJsonValue(m_component_timestamp_delimiter, json[QString("ComponentTimestampDelimiter")]);
    m_component_timestamp_delimiter_isSet = !json[QString("ComponentTimestampDelimiter")].isNull() && m_component_timestamp_delimiter_isValid;
}

QString OAIInferenceInputNameConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInferenceInputNameConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_format_isSet) {
        obj.insert(QString("TimestampFormat"), ::OpenAPI::toJsonValue(m_timestamp_format));
    }
    if (m_component_timestamp_delimiter_isSet) {
        obj.insert(QString("ComponentTimestampDelimiter"), ::OpenAPI::toJsonValue(m_component_timestamp_delimiter));
    }
    return obj;
}

QString OAIInferenceInputNameConfiguration::getTimestampFormat() const {
    return m_timestamp_format;
}
void OAIInferenceInputNameConfiguration::setTimestampFormat(const QString &timestamp_format) {
    m_timestamp_format = timestamp_format;
    m_timestamp_format_isSet = true;
}

bool OAIInferenceInputNameConfiguration::is_timestamp_format_Set() const{
    return m_timestamp_format_isSet;
}

bool OAIInferenceInputNameConfiguration::is_timestamp_format_Valid() const{
    return m_timestamp_format_isValid;
}

QString OAIInferenceInputNameConfiguration::getComponentTimestampDelimiter() const {
    return m_component_timestamp_delimiter;
}
void OAIInferenceInputNameConfiguration::setComponentTimestampDelimiter(const QString &component_timestamp_delimiter) {
    m_component_timestamp_delimiter = component_timestamp_delimiter;
    m_component_timestamp_delimiter_isSet = true;
}

bool OAIInferenceInputNameConfiguration::is_component_timestamp_delimiter_Set() const{
    return m_component_timestamp_delimiter_isSet;
}

bool OAIInferenceInputNameConfiguration::is_component_timestamp_delimiter_Valid() const{
    return m_component_timestamp_delimiter_isValid;
}

bool OAIInferenceInputNameConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_timestamp_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInferenceInputNameConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
