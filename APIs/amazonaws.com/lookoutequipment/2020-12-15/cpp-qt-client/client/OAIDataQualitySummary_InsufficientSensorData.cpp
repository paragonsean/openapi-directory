/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataQualitySummary_InsufficientSensorData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataQualitySummary_InsufficientSensorData::OAIDataQualitySummary_InsufficientSensorData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataQualitySummary_InsufficientSensorData::OAIDataQualitySummary_InsufficientSensorData() {
    this->initializeModel();
}

OAIDataQualitySummary_InsufficientSensorData::~OAIDataQualitySummary_InsufficientSensorData() {}

void OAIDataQualitySummary_InsufficientSensorData::initializeModel() {

    m_missing_complete_sensor_data_isSet = false;
    m_missing_complete_sensor_data_isValid = false;

    m_sensors_with_short_date_range_isSet = false;
    m_sensors_with_short_date_range_isValid = false;
}

void OAIDataQualitySummary_InsufficientSensorData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataQualitySummary_InsufficientSensorData::fromJsonObject(QJsonObject json) {

    m_missing_complete_sensor_data_isValid = ::OpenAPI::fromJsonValue(m_missing_complete_sensor_data, json[QString("MissingCompleteSensorData")]);
    m_missing_complete_sensor_data_isSet = !json[QString("MissingCompleteSensorData")].isNull() && m_missing_complete_sensor_data_isValid;

    m_sensors_with_short_date_range_isValid = ::OpenAPI::fromJsonValue(m_sensors_with_short_date_range, json[QString("SensorsWithShortDateRange")]);
    m_sensors_with_short_date_range_isSet = !json[QString("SensorsWithShortDateRange")].isNull() && m_sensors_with_short_date_range_isValid;
}

QString OAIDataQualitySummary_InsufficientSensorData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataQualitySummary_InsufficientSensorData::asJsonObject() const {
    QJsonObject obj;
    if (m_missing_complete_sensor_data.isSet()) {
        obj.insert(QString("MissingCompleteSensorData"), ::OpenAPI::toJsonValue(m_missing_complete_sensor_data));
    }
    if (m_sensors_with_short_date_range.isSet()) {
        obj.insert(QString("SensorsWithShortDateRange"), ::OpenAPI::toJsonValue(m_sensors_with_short_date_range));
    }
    return obj;
}

OAIInsufficientSensorData_MissingCompleteSensorData OAIDataQualitySummary_InsufficientSensorData::getMissingCompleteSensorData() const {
    return m_missing_complete_sensor_data;
}
void OAIDataQualitySummary_InsufficientSensorData::setMissingCompleteSensorData(const OAIInsufficientSensorData_MissingCompleteSensorData &missing_complete_sensor_data) {
    m_missing_complete_sensor_data = missing_complete_sensor_data;
    m_missing_complete_sensor_data_isSet = true;
}

bool OAIDataQualitySummary_InsufficientSensorData::is_missing_complete_sensor_data_Set() const{
    return m_missing_complete_sensor_data_isSet;
}

bool OAIDataQualitySummary_InsufficientSensorData::is_missing_complete_sensor_data_Valid() const{
    return m_missing_complete_sensor_data_isValid;
}

OAIInsufficientSensorData_SensorsWithShortDateRange OAIDataQualitySummary_InsufficientSensorData::getSensorsWithShortDateRange() const {
    return m_sensors_with_short_date_range;
}
void OAIDataQualitySummary_InsufficientSensorData::setSensorsWithShortDateRange(const OAIInsufficientSensorData_SensorsWithShortDateRange &sensors_with_short_date_range) {
    m_sensors_with_short_date_range = sensors_with_short_date_range;
    m_sensors_with_short_date_range_isSet = true;
}

bool OAIDataQualitySummary_InsufficientSensorData::is_sensors_with_short_date_range_Set() const{
    return m_sensors_with_short_date_range_isSet;
}

bool OAIDataQualitySummary_InsufficientSensorData::is_sensors_with_short_date_range_Valid() const{
    return m_sensors_with_short_date_range_isValid;
}

bool OAIDataQualitySummary_InsufficientSensorData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_missing_complete_sensor_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensors_with_short_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataQualitySummary_InsufficientSensorData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_missing_complete_sensor_data_isValid && m_sensors_with_short_date_range_isValid && true;
}

} // namespace OpenAPI
