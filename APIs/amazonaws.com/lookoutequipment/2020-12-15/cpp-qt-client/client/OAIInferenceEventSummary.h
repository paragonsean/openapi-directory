/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInferenceEventSummary.h
 *
 * Contains information about the specific inference event, including start and end time, diagnostics information, event duration and so on.
 */

#ifndef OAIInferenceEventSummary_H
#define OAIInferenceEventSummary_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInferenceEventSummary : public OAIObject {
public:
    OAIInferenceEventSummary();
    OAIInferenceEventSummary(QString json);
    ~OAIInferenceEventSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInferenceSchedulerArn() const;
    void setInferenceSchedulerArn(const QString &inference_scheduler_arn);
    bool is_inference_scheduler_arn_Set() const;
    bool is_inference_scheduler_arn_Valid() const;

    QString getInferenceSchedulerName() const;
    void setInferenceSchedulerName(const QString &inference_scheduler_name);
    bool is_inference_scheduler_name_Set() const;
    bool is_inference_scheduler_name_Valid() const;

    QDateTime getEventStartTime() const;
    void setEventStartTime(const QDateTime &event_start_time);
    bool is_event_start_time_Set() const;
    bool is_event_start_time_Valid() const;

    QDateTime getEventEndTime() const;
    void setEventEndTime(const QDateTime &event_end_time);
    bool is_event_end_time_Set() const;
    bool is_event_end_time_Valid() const;

    QString getDiagnostics() const;
    void setDiagnostics(const QString &diagnostics);
    bool is_diagnostics_Set() const;
    bool is_diagnostics_Valid() const;

    qint32 getEventDurationInSeconds() const;
    void setEventDurationInSeconds(const qint32 &event_duration_in_seconds);
    bool is_event_duration_in_seconds_Set() const;
    bool is_event_duration_in_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_inference_scheduler_arn;
    bool m_inference_scheduler_arn_isSet;
    bool m_inference_scheduler_arn_isValid;

    QString m_inference_scheduler_name;
    bool m_inference_scheduler_name_isSet;
    bool m_inference_scheduler_name_isValid;

    QDateTime m_event_start_time;
    bool m_event_start_time_isSet;
    bool m_event_start_time_isValid;

    QDateTime m_event_end_time;
    bool m_event_end_time_isSet;
    bool m_event_end_time_isValid;

    QString m_diagnostics;
    bool m_diagnostics_isSet;
    bool m_diagnostics_isValid;

    qint32 m_event_duration_in_seconds;
    bool m_event_duration_in_seconds_isSet;
    bool m_event_duration_in_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInferenceEventSummary)

#endif // OAIInferenceEventSummary_H
