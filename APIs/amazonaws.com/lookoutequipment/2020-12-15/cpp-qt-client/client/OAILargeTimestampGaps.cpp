/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILargeTimestampGaps.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILargeTimestampGaps::OAILargeTimestampGaps(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILargeTimestampGaps::OAILargeTimestampGaps() {
    this->initializeModel();
}

OAILargeTimestampGaps::~OAILargeTimestampGaps() {}

void OAILargeTimestampGaps::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_number_of_large_timestamp_gaps_isSet = false;
    m_number_of_large_timestamp_gaps_isValid = false;

    m_max_timestamp_gap_in_days_isSet = false;
    m_max_timestamp_gap_in_days_isValid = false;
}

void OAILargeTimestampGaps::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILargeTimestampGaps::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_number_of_large_timestamp_gaps_isValid = ::OpenAPI::fromJsonValue(m_number_of_large_timestamp_gaps, json[QString("NumberOfLargeTimestampGaps")]);
    m_number_of_large_timestamp_gaps_isSet = !json[QString("NumberOfLargeTimestampGaps")].isNull() && m_number_of_large_timestamp_gaps_isValid;

    m_max_timestamp_gap_in_days_isValid = ::OpenAPI::fromJsonValue(m_max_timestamp_gap_in_days, json[QString("MaxTimestampGapInDays")]);
    m_max_timestamp_gap_in_days_isSet = !json[QString("MaxTimestampGapInDays")].isNull() && m_max_timestamp_gap_in_days_isValid;
}

QString OAILargeTimestampGaps::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILargeTimestampGaps::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_number_of_large_timestamp_gaps_isSet) {
        obj.insert(QString("NumberOfLargeTimestampGaps"), ::OpenAPI::toJsonValue(m_number_of_large_timestamp_gaps));
    }
    if (m_max_timestamp_gap_in_days_isSet) {
        obj.insert(QString("MaxTimestampGapInDays"), ::OpenAPI::toJsonValue(m_max_timestamp_gap_in_days));
    }
    return obj;
}

OAIStatisticalIssueStatus OAILargeTimestampGaps::getStatus() const {
    return m_status;
}
void OAILargeTimestampGaps::setStatus(const OAIStatisticalIssueStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILargeTimestampGaps::is_status_Set() const{
    return m_status_isSet;
}

bool OAILargeTimestampGaps::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAILargeTimestampGaps::getNumberOfLargeTimestampGaps() const {
    return m_number_of_large_timestamp_gaps;
}
void OAILargeTimestampGaps::setNumberOfLargeTimestampGaps(const qint32 &number_of_large_timestamp_gaps) {
    m_number_of_large_timestamp_gaps = number_of_large_timestamp_gaps;
    m_number_of_large_timestamp_gaps_isSet = true;
}

bool OAILargeTimestampGaps::is_number_of_large_timestamp_gaps_Set() const{
    return m_number_of_large_timestamp_gaps_isSet;
}

bool OAILargeTimestampGaps::is_number_of_large_timestamp_gaps_Valid() const{
    return m_number_of_large_timestamp_gaps_isValid;
}

qint32 OAILargeTimestampGaps::getMaxTimestampGapInDays() const {
    return m_max_timestamp_gap_in_days;
}
void OAILargeTimestampGaps::setMaxTimestampGapInDays(const qint32 &max_timestamp_gap_in_days) {
    m_max_timestamp_gap_in_days = max_timestamp_gap_in_days;
    m_max_timestamp_gap_in_days_isSet = true;
}

bool OAILargeTimestampGaps::is_max_timestamp_gap_in_days_Set() const{
    return m_max_timestamp_gap_in_days_isSet;
}

bool OAILargeTimestampGaps::is_max_timestamp_gap_in_days_Valid() const{
    return m_max_timestamp_gap_in_days_isValid;
}

bool OAILargeTimestampGaps::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_large_timestamp_gaps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_timestamp_gap_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILargeTimestampGaps::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
