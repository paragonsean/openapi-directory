/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLabelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLabelResponse::OAIDescribeLabelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLabelResponse::OAIDescribeLabelResponse() {
    this->initializeModel();
}

OAIDescribeLabelResponse::~OAIDescribeLabelResponse() {}

void OAIDescribeLabelResponse::initializeModel() {

    m_label_group_name_isSet = false;
    m_label_group_name_isValid = false;

    m_label_group_arn_isSet = false;
    m_label_group_arn_isValid = false;

    m_label_id_isSet = false;
    m_label_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_fault_code_isSet = false;
    m_fault_code_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_equipment_isSet = false;
    m_equipment_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;
}

void OAIDescribeLabelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLabelResponse::fromJsonObject(QJsonObject json) {

    m_label_group_name_isValid = ::OpenAPI::fromJsonValue(m_label_group_name, json[QString("LabelGroupName")]);
    m_label_group_name_isSet = !json[QString("LabelGroupName")].isNull() && m_label_group_name_isValid;

    m_label_group_arn_isValid = ::OpenAPI::fromJsonValue(m_label_group_arn, json[QString("LabelGroupArn")]);
    m_label_group_arn_isSet = !json[QString("LabelGroupArn")].isNull() && m_label_group_arn_isValid;

    m_label_id_isValid = ::OpenAPI::fromJsonValue(m_label_id, json[QString("LabelId")]);
    m_label_id_isSet = !json[QString("LabelId")].isNull() && m_label_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("Rating")]);
    m_rating_isSet = !json[QString("Rating")].isNull() && m_rating_isValid;

    m_fault_code_isValid = ::OpenAPI::fromJsonValue(m_fault_code, json[QString("FaultCode")]);
    m_fault_code_isSet = !json[QString("FaultCode")].isNull() && m_fault_code_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_equipment_isValid = ::OpenAPI::fromJsonValue(m_equipment, json[QString("Equipment")]);
    m_equipment_isSet = !json[QString("Equipment")].isNull() && m_equipment_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;
}

QString OAIDescribeLabelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLabelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_label_group_name_isSet) {
        obj.insert(QString("LabelGroupName"), ::OpenAPI::toJsonValue(m_label_group_name));
    }
    if (m_label_group_arn_isSet) {
        obj.insert(QString("LabelGroupArn"), ::OpenAPI::toJsonValue(m_label_group_arn));
    }
    if (m_label_id_isSet) {
        obj.insert(QString("LabelId"), ::OpenAPI::toJsonValue(m_label_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_rating.isSet()) {
        obj.insert(QString("Rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_fault_code_isSet) {
        obj.insert(QString("FaultCode"), ::OpenAPI::toJsonValue(m_fault_code));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_equipment_isSet) {
        obj.insert(QString("Equipment"), ::OpenAPI::toJsonValue(m_equipment));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    return obj;
}

QString OAIDescribeLabelResponse::getLabelGroupName() const {
    return m_label_group_name;
}
void OAIDescribeLabelResponse::setLabelGroupName(const QString &label_group_name) {
    m_label_group_name = label_group_name;
    m_label_group_name_isSet = true;
}

bool OAIDescribeLabelResponse::is_label_group_name_Set() const{
    return m_label_group_name_isSet;
}

bool OAIDescribeLabelResponse::is_label_group_name_Valid() const{
    return m_label_group_name_isValid;
}

QString OAIDescribeLabelResponse::getLabelGroupArn() const {
    return m_label_group_arn;
}
void OAIDescribeLabelResponse::setLabelGroupArn(const QString &label_group_arn) {
    m_label_group_arn = label_group_arn;
    m_label_group_arn_isSet = true;
}

bool OAIDescribeLabelResponse::is_label_group_arn_Set() const{
    return m_label_group_arn_isSet;
}

bool OAIDescribeLabelResponse::is_label_group_arn_Valid() const{
    return m_label_group_arn_isValid;
}

QString OAIDescribeLabelResponse::getLabelId() const {
    return m_label_id;
}
void OAIDescribeLabelResponse::setLabelId(const QString &label_id) {
    m_label_id = label_id;
    m_label_id_isSet = true;
}

bool OAIDescribeLabelResponse::is_label_id_Set() const{
    return m_label_id_isSet;
}

bool OAIDescribeLabelResponse::is_label_id_Valid() const{
    return m_label_id_isValid;
}

QDateTime OAIDescribeLabelResponse::getStartTime() const {
    return m_start_time;
}
void OAIDescribeLabelResponse::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeLabelResponse::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeLabelResponse::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDescribeLabelResponse::getEndTime() const {
    return m_end_time;
}
void OAIDescribeLabelResponse::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeLabelResponse::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeLabelResponse::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAILabelRating OAIDescribeLabelResponse::getRating() const {
    return m_rating;
}
void OAIDescribeLabelResponse::setRating(const OAILabelRating &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIDescribeLabelResponse::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIDescribeLabelResponse::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAIDescribeLabelResponse::getFaultCode() const {
    return m_fault_code;
}
void OAIDescribeLabelResponse::setFaultCode(const QString &fault_code) {
    m_fault_code = fault_code;
    m_fault_code_isSet = true;
}

bool OAIDescribeLabelResponse::is_fault_code_Set() const{
    return m_fault_code_isSet;
}

bool OAIDescribeLabelResponse::is_fault_code_Valid() const{
    return m_fault_code_isValid;
}

QString OAIDescribeLabelResponse::getNotes() const {
    return m_notes;
}
void OAIDescribeLabelResponse::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIDescribeLabelResponse::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIDescribeLabelResponse::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIDescribeLabelResponse::getEquipment() const {
    return m_equipment;
}
void OAIDescribeLabelResponse::setEquipment(const QString &equipment) {
    m_equipment = equipment;
    m_equipment_isSet = true;
}

bool OAIDescribeLabelResponse::is_equipment_Set() const{
    return m_equipment_isSet;
}

bool OAIDescribeLabelResponse::is_equipment_Valid() const{
    return m_equipment_isValid;
}

QDateTime OAIDescribeLabelResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeLabelResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeLabelResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeLabelResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIDescribeLabelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equipment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLabelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
