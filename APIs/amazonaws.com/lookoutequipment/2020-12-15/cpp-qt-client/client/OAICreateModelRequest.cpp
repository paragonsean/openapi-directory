/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateModelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateModelRequest::OAICreateModelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateModelRequest::OAICreateModelRequest() {
    this->initializeModel();
}

OAICreateModelRequest::~OAICreateModelRequest() {}

void OAICreateModelRequest::initializeModel() {

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_dataset_schema_isSet = false;
    m_dataset_schema_isValid = false;

    m_labels_input_configuration_isSet = false;
    m_labels_input_configuration_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_training_data_start_time_isSet = false;
    m_training_data_start_time_isValid = false;

    m_training_data_end_time_isSet = false;
    m_training_data_end_time_isValid = false;

    m_evaluation_data_start_time_isSet = false;
    m_evaluation_data_start_time_isValid = false;

    m_evaluation_data_end_time_isSet = false;
    m_evaluation_data_end_time_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_data_pre_processing_configuration_isSet = false;
    m_data_pre_processing_configuration_isValid = false;

    m_server_side_kms_key_id_isSet = false;
    m_server_side_kms_key_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_off_condition_isSet = false;
    m_off_condition_isValid = false;
}

void OAICreateModelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateModelRequest::fromJsonObject(QJsonObject json) {

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("DatasetName")]);
    m_dataset_name_isSet = !json[QString("DatasetName")].isNull() && m_dataset_name_isValid;

    m_dataset_schema_isValid = ::OpenAPI::fromJsonValue(m_dataset_schema, json[QString("DatasetSchema")]);
    m_dataset_schema_isSet = !json[QString("DatasetSchema")].isNull() && m_dataset_schema_isValid;

    m_labels_input_configuration_isValid = ::OpenAPI::fromJsonValue(m_labels_input_configuration, json[QString("LabelsInputConfiguration")]);
    m_labels_input_configuration_isSet = !json[QString("LabelsInputConfiguration")].isNull() && m_labels_input_configuration_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_training_data_start_time_isValid = ::OpenAPI::fromJsonValue(m_training_data_start_time, json[QString("TrainingDataStartTime")]);
    m_training_data_start_time_isSet = !json[QString("TrainingDataStartTime")].isNull() && m_training_data_start_time_isValid;

    m_training_data_end_time_isValid = ::OpenAPI::fromJsonValue(m_training_data_end_time, json[QString("TrainingDataEndTime")]);
    m_training_data_end_time_isSet = !json[QString("TrainingDataEndTime")].isNull() && m_training_data_end_time_isValid;

    m_evaluation_data_start_time_isValid = ::OpenAPI::fromJsonValue(m_evaluation_data_start_time, json[QString("EvaluationDataStartTime")]);
    m_evaluation_data_start_time_isSet = !json[QString("EvaluationDataStartTime")].isNull() && m_evaluation_data_start_time_isValid;

    m_evaluation_data_end_time_isValid = ::OpenAPI::fromJsonValue(m_evaluation_data_end_time, json[QString("EvaluationDataEndTime")]);
    m_evaluation_data_end_time_isSet = !json[QString("EvaluationDataEndTime")].isNull() && m_evaluation_data_end_time_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_data_pre_processing_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_pre_processing_configuration, json[QString("DataPreProcessingConfiguration")]);
    m_data_pre_processing_configuration_isSet = !json[QString("DataPreProcessingConfiguration")].isNull() && m_data_pre_processing_configuration_isValid;

    m_server_side_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_server_side_kms_key_id, json[QString("ServerSideKmsKeyId")]);
    m_server_side_kms_key_id_isSet = !json[QString("ServerSideKmsKeyId")].isNull() && m_server_side_kms_key_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_off_condition_isValid = ::OpenAPI::fromJsonValue(m_off_condition, json[QString("OffCondition")]);
    m_off_condition_isSet = !json[QString("OffCondition")].isNull() && m_off_condition_isValid;
}

QString OAICreateModelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateModelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_dataset_name_isSet) {
        obj.insert(QString("DatasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_dataset_schema.isSet()) {
        obj.insert(QString("DatasetSchema"), ::OpenAPI::toJsonValue(m_dataset_schema));
    }
    if (m_labels_input_configuration.isSet()) {
        obj.insert(QString("LabelsInputConfiguration"), ::OpenAPI::toJsonValue(m_labels_input_configuration));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_training_data_start_time_isSet) {
        obj.insert(QString("TrainingDataStartTime"), ::OpenAPI::toJsonValue(m_training_data_start_time));
    }
    if (m_training_data_end_time_isSet) {
        obj.insert(QString("TrainingDataEndTime"), ::OpenAPI::toJsonValue(m_training_data_end_time));
    }
    if (m_evaluation_data_start_time_isSet) {
        obj.insert(QString("EvaluationDataStartTime"), ::OpenAPI::toJsonValue(m_evaluation_data_start_time));
    }
    if (m_evaluation_data_end_time_isSet) {
        obj.insert(QString("EvaluationDataEndTime"), ::OpenAPI::toJsonValue(m_evaluation_data_end_time));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_data_pre_processing_configuration.isSet()) {
        obj.insert(QString("DataPreProcessingConfiguration"), ::OpenAPI::toJsonValue(m_data_pre_processing_configuration));
    }
    if (m_server_side_kms_key_id_isSet) {
        obj.insert(QString("ServerSideKmsKeyId"), ::OpenAPI::toJsonValue(m_server_side_kms_key_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_off_condition_isSet) {
        obj.insert(QString("OffCondition"), ::OpenAPI::toJsonValue(m_off_condition));
    }
    return obj;
}

QString OAICreateModelRequest::getModelName() const {
    return m_model_name;
}
void OAICreateModelRequest::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAICreateModelRequest::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAICreateModelRequest::is_model_name_Valid() const{
    return m_model_name_isValid;
}

QString OAICreateModelRequest::getDatasetName() const {
    return m_dataset_name;
}
void OAICreateModelRequest::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAICreateModelRequest::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAICreateModelRequest::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

OAICreateModelRequest_DatasetSchema OAICreateModelRequest::getDatasetSchema() const {
    return m_dataset_schema;
}
void OAICreateModelRequest::setDatasetSchema(const OAICreateModelRequest_DatasetSchema &dataset_schema) {
    m_dataset_schema = dataset_schema;
    m_dataset_schema_isSet = true;
}

bool OAICreateModelRequest::is_dataset_schema_Set() const{
    return m_dataset_schema_isSet;
}

bool OAICreateModelRequest::is_dataset_schema_Valid() const{
    return m_dataset_schema_isValid;
}

OAICreateModelRequest_LabelsInputConfiguration OAICreateModelRequest::getLabelsInputConfiguration() const {
    return m_labels_input_configuration;
}
void OAICreateModelRequest::setLabelsInputConfiguration(const OAICreateModelRequest_LabelsInputConfiguration &labels_input_configuration) {
    m_labels_input_configuration = labels_input_configuration;
    m_labels_input_configuration_isSet = true;
}

bool OAICreateModelRequest::is_labels_input_configuration_Set() const{
    return m_labels_input_configuration_isSet;
}

bool OAICreateModelRequest::is_labels_input_configuration_Valid() const{
    return m_labels_input_configuration_isValid;
}

QString OAICreateModelRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateModelRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateModelRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateModelRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QDateTime OAICreateModelRequest::getTrainingDataStartTime() const {
    return m_training_data_start_time;
}
void OAICreateModelRequest::setTrainingDataStartTime(const QDateTime &training_data_start_time) {
    m_training_data_start_time = training_data_start_time;
    m_training_data_start_time_isSet = true;
}

bool OAICreateModelRequest::is_training_data_start_time_Set() const{
    return m_training_data_start_time_isSet;
}

bool OAICreateModelRequest::is_training_data_start_time_Valid() const{
    return m_training_data_start_time_isValid;
}

QDateTime OAICreateModelRequest::getTrainingDataEndTime() const {
    return m_training_data_end_time;
}
void OAICreateModelRequest::setTrainingDataEndTime(const QDateTime &training_data_end_time) {
    m_training_data_end_time = training_data_end_time;
    m_training_data_end_time_isSet = true;
}

bool OAICreateModelRequest::is_training_data_end_time_Set() const{
    return m_training_data_end_time_isSet;
}

bool OAICreateModelRequest::is_training_data_end_time_Valid() const{
    return m_training_data_end_time_isValid;
}

QDateTime OAICreateModelRequest::getEvaluationDataStartTime() const {
    return m_evaluation_data_start_time;
}
void OAICreateModelRequest::setEvaluationDataStartTime(const QDateTime &evaluation_data_start_time) {
    m_evaluation_data_start_time = evaluation_data_start_time;
    m_evaluation_data_start_time_isSet = true;
}

bool OAICreateModelRequest::is_evaluation_data_start_time_Set() const{
    return m_evaluation_data_start_time_isSet;
}

bool OAICreateModelRequest::is_evaluation_data_start_time_Valid() const{
    return m_evaluation_data_start_time_isValid;
}

QDateTime OAICreateModelRequest::getEvaluationDataEndTime() const {
    return m_evaluation_data_end_time;
}
void OAICreateModelRequest::setEvaluationDataEndTime(const QDateTime &evaluation_data_end_time) {
    m_evaluation_data_end_time = evaluation_data_end_time;
    m_evaluation_data_end_time_isSet = true;
}

bool OAICreateModelRequest::is_evaluation_data_end_time_Set() const{
    return m_evaluation_data_end_time_isSet;
}

bool OAICreateModelRequest::is_evaluation_data_end_time_Valid() const{
    return m_evaluation_data_end_time_isValid;
}

QString OAICreateModelRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateModelRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateModelRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateModelRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAICreateModelRequest_DataPreProcessingConfiguration OAICreateModelRequest::getDataPreProcessingConfiguration() const {
    return m_data_pre_processing_configuration;
}
void OAICreateModelRequest::setDataPreProcessingConfiguration(const OAICreateModelRequest_DataPreProcessingConfiguration &data_pre_processing_configuration) {
    m_data_pre_processing_configuration = data_pre_processing_configuration;
    m_data_pre_processing_configuration_isSet = true;
}

bool OAICreateModelRequest::is_data_pre_processing_configuration_Set() const{
    return m_data_pre_processing_configuration_isSet;
}

bool OAICreateModelRequest::is_data_pre_processing_configuration_Valid() const{
    return m_data_pre_processing_configuration_isValid;
}

QString OAICreateModelRequest::getServerSideKmsKeyId() const {
    return m_server_side_kms_key_id;
}
void OAICreateModelRequest::setServerSideKmsKeyId(const QString &server_side_kms_key_id) {
    m_server_side_kms_key_id = server_side_kms_key_id;
    m_server_side_kms_key_id_isSet = true;
}

bool OAICreateModelRequest::is_server_side_kms_key_id_Set() const{
    return m_server_side_kms_key_id_isSet;
}

bool OAICreateModelRequest::is_server_side_kms_key_id_Valid() const{
    return m_server_side_kms_key_id_isValid;
}

QList OAICreateModelRequest::getTags() const {
    return m_tags;
}
void OAICreateModelRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateModelRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateModelRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateModelRequest::getOffCondition() const {
    return m_off_condition;
}
void OAICreateModelRequest::setOffCondition(const QString &off_condition) {
    m_off_condition = off_condition;
    m_off_condition_isSet = true;
}

bool OAICreateModelRequest::is_off_condition_Set() const{
    return m_off_condition_isSet;
}

bool OAICreateModelRequest::is_off_condition_Valid() const{
    return m_off_condition_isValid;
}

bool OAICreateModelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_input_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_data_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_data_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_data_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_data_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pre_processing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_off_condition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateModelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_name_isValid && m_dataset_name_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
