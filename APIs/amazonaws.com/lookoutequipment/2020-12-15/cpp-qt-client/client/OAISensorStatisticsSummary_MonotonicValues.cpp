/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISensorStatisticsSummary_MonotonicValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISensorStatisticsSummary_MonotonicValues::OAISensorStatisticsSummary_MonotonicValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISensorStatisticsSummary_MonotonicValues::OAISensorStatisticsSummary_MonotonicValues() {
    this->initializeModel();
}

OAISensorStatisticsSummary_MonotonicValues::~OAISensorStatisticsSummary_MonotonicValues() {}

void OAISensorStatisticsSummary_MonotonicValues::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_monotonicity_isSet = false;
    m_monotonicity_isValid = false;
}

void OAISensorStatisticsSummary_MonotonicValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISensorStatisticsSummary_MonotonicValues::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_monotonicity_isValid = ::OpenAPI::fromJsonValue(m_monotonicity, json[QString("Monotonicity")]);
    m_monotonicity_isSet = !json[QString("Monotonicity")].isNull() && m_monotonicity_isValid;
}

QString OAISensorStatisticsSummary_MonotonicValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISensorStatisticsSummary_MonotonicValues::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_monotonicity.isSet()) {
        obj.insert(QString("Monotonicity"), ::OpenAPI::toJsonValue(m_monotonicity));
    }
    return obj;
}

OAIStatisticalIssueStatus OAISensorStatisticsSummary_MonotonicValues::getStatus() const {
    return m_status;
}
void OAISensorStatisticsSummary_MonotonicValues::setStatus(const OAIStatisticalIssueStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISensorStatisticsSummary_MonotonicValues::is_status_Set() const{
    return m_status_isSet;
}

bool OAISensorStatisticsSummary_MonotonicValues::is_status_Valid() const{
    return m_status_isValid;
}

OAIMonotonicity OAISensorStatisticsSummary_MonotonicValues::getMonotonicity() const {
    return m_monotonicity;
}
void OAISensorStatisticsSummary_MonotonicValues::setMonotonicity(const OAIMonotonicity &monotonicity) {
    m_monotonicity = monotonicity;
    m_monotonicity_isSet = true;
}

bool OAISensorStatisticsSummary_MonotonicValues::is_monotonicity_Set() const{
    return m_monotonicity_isSet;
}

bool OAISensorStatisticsSummary_MonotonicValues::is_monotonicity_Valid() const{
    return m_monotonicity_isValid;
}

bool OAISensorStatisticsSummary_MonotonicValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monotonicity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISensorStatisticsSummary_MonotonicValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
