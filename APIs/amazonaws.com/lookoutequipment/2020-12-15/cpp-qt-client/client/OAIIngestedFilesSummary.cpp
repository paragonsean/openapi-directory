/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIngestedFilesSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIngestedFilesSummary::OAIIngestedFilesSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIngestedFilesSummary::OAIIngestedFilesSummary() {
    this->initializeModel();
}

OAIIngestedFilesSummary::~OAIIngestedFilesSummary() {}

void OAIIngestedFilesSummary::initializeModel() {

    m_total_number_of_files_isSet = false;
    m_total_number_of_files_isValid = false;

    m_ingested_number_of_files_isSet = false;
    m_ingested_number_of_files_isValid = false;

    m_discarded_files_isSet = false;
    m_discarded_files_isValid = false;
}

void OAIIngestedFilesSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIngestedFilesSummary::fromJsonObject(QJsonObject json) {

    m_total_number_of_files_isValid = ::OpenAPI::fromJsonValue(m_total_number_of_files, json[QString("TotalNumberOfFiles")]);
    m_total_number_of_files_isSet = !json[QString("TotalNumberOfFiles")].isNull() && m_total_number_of_files_isValid;

    m_ingested_number_of_files_isValid = ::OpenAPI::fromJsonValue(m_ingested_number_of_files, json[QString("IngestedNumberOfFiles")]);
    m_ingested_number_of_files_isSet = !json[QString("IngestedNumberOfFiles")].isNull() && m_ingested_number_of_files_isValid;

    m_discarded_files_isValid = ::OpenAPI::fromJsonValue(m_discarded_files, json[QString("DiscardedFiles")]);
    m_discarded_files_isSet = !json[QString("DiscardedFiles")].isNull() && m_discarded_files_isValid;
}

QString OAIIngestedFilesSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIngestedFilesSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_total_number_of_files_isSet) {
        obj.insert(QString("TotalNumberOfFiles"), ::OpenAPI::toJsonValue(m_total_number_of_files));
    }
    if (m_ingested_number_of_files_isSet) {
        obj.insert(QString("IngestedNumberOfFiles"), ::OpenAPI::toJsonValue(m_ingested_number_of_files));
    }
    if (m_discarded_files.isSet()) {
        obj.insert(QString("DiscardedFiles"), ::OpenAPI::toJsonValue(m_discarded_files));
    }
    return obj;
}

qint32 OAIIngestedFilesSummary::getTotalNumberOfFiles() const {
    return m_total_number_of_files;
}
void OAIIngestedFilesSummary::setTotalNumberOfFiles(const qint32 &total_number_of_files) {
    m_total_number_of_files = total_number_of_files;
    m_total_number_of_files_isSet = true;
}

bool OAIIngestedFilesSummary::is_total_number_of_files_Set() const{
    return m_total_number_of_files_isSet;
}

bool OAIIngestedFilesSummary::is_total_number_of_files_Valid() const{
    return m_total_number_of_files_isValid;
}

qint32 OAIIngestedFilesSummary::getIngestedNumberOfFiles() const {
    return m_ingested_number_of_files;
}
void OAIIngestedFilesSummary::setIngestedNumberOfFiles(const qint32 &ingested_number_of_files) {
    m_ingested_number_of_files = ingested_number_of_files;
    m_ingested_number_of_files_isSet = true;
}

bool OAIIngestedFilesSummary::is_ingested_number_of_files_Set() const{
    return m_ingested_number_of_files_isSet;
}

bool OAIIngestedFilesSummary::is_ingested_number_of_files_Valid() const{
    return m_ingested_number_of_files_isValid;
}

QList OAIIngestedFilesSummary::getDiscardedFiles() const {
    return m_discarded_files;
}
void OAIIngestedFilesSummary::setDiscardedFiles(const QList &discarded_files) {
    m_discarded_files = discarded_files;
    m_discarded_files_isSet = true;
}

bool OAIIngestedFilesSummary::is_discarded_files_Set() const{
    return m_discarded_files_isSet;
}

bool OAIIngestedFilesSummary::is_discarded_files_Valid() const{
    return m_discarded_files_isValid;
}

bool OAIIngestedFilesSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_number_of_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingested_number_of_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discarded_files.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIngestedFilesSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_total_number_of_files_isValid && m_ingested_number_of_files_isValid && true;
}

} // namespace OpenAPI
