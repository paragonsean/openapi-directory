/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInferenceExecutionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInferenceExecutionStatus::OAIInferenceExecutionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInferenceExecutionStatus::OAIInferenceExecutionStatus() {
    this->initializeModel();
}

OAIInferenceExecutionStatus::~OAIInferenceExecutionStatus() {}

void OAIInferenceExecutionStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInferenceExecutionStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInferenceExecutionStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInferenceExecutionStatus::IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInferenceExecutionStatus::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInferenceExecutionStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInferenceExecutionStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInferenceExecutionStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInferenceExecutionStatus::IN_PROGRESS:
            val = "IN_PROGRESS";
            break;
        case eOAIInferenceExecutionStatus::SUCCESS:
            val = "SUCCESS";
            break;
        case eOAIInferenceExecutionStatus::FAILED:
            val = "FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInferenceExecutionStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInferenceExecutionStatus::eOAIInferenceExecutionStatus OAIInferenceExecutionStatus::getValue() const {
    return m_value;
}

void OAIInferenceExecutionStatus::setValue(const OAIInferenceExecutionStatus::eOAIInferenceExecutionStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInferenceExecutionStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIInferenceExecutionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
