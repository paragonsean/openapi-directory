/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDataIngestionJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDataIngestionJobResponse::OAIDescribeDataIngestionJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDataIngestionJobResponse::OAIDescribeDataIngestionJobResponse() {
    this->initializeModel();
}

OAIDescribeDataIngestionJobResponse::~OAIDescribeDataIngestionJobResponse() {}

void OAIDescribeDataIngestionJobResponse::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_dataset_arn_isSet = false;
    m_dataset_arn_isValid = false;

    m_ingestion_input_configuration_isSet = false;
    m_ingestion_input_configuration_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_failed_reason_isSet = false;
    m_failed_reason_isValid = false;

    m_data_quality_summary_isSet = false;
    m_data_quality_summary_isValid = false;

    m_ingested_files_summary_isSet = false;
    m_ingested_files_summary_isValid = false;

    m_status_detail_isSet = false;
    m_status_detail_isValid = false;

    m_ingested_data_size_isSet = false;
    m_ingested_data_size_isValid = false;

    m_data_start_time_isSet = false;
    m_data_start_time_isValid = false;

    m_data_end_time_isSet = false;
    m_data_end_time_isValid = false;

    m_source_dataset_arn_isSet = false;
    m_source_dataset_arn_isValid = false;
}

void OAIDescribeDataIngestionJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDataIngestionJobResponse::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_dataset_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_arn, json[QString("DatasetArn")]);
    m_dataset_arn_isSet = !json[QString("DatasetArn")].isNull() && m_dataset_arn_isValid;

    m_ingestion_input_configuration_isValid = ::OpenAPI::fromJsonValue(m_ingestion_input_configuration, json[QString("IngestionInputConfiguration")]);
    m_ingestion_input_configuration_isSet = !json[QString("IngestionInputConfiguration")].isNull() && m_ingestion_input_configuration_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_failed_reason_isValid = ::OpenAPI::fromJsonValue(m_failed_reason, json[QString("FailedReason")]);
    m_failed_reason_isSet = !json[QString("FailedReason")].isNull() && m_failed_reason_isValid;

    m_data_quality_summary_isValid = ::OpenAPI::fromJsonValue(m_data_quality_summary, json[QString("DataQualitySummary")]);
    m_data_quality_summary_isSet = !json[QString("DataQualitySummary")].isNull() && m_data_quality_summary_isValid;

    m_ingested_files_summary_isValid = ::OpenAPI::fromJsonValue(m_ingested_files_summary, json[QString("IngestedFilesSummary")]);
    m_ingested_files_summary_isSet = !json[QString("IngestedFilesSummary")].isNull() && m_ingested_files_summary_isValid;

    m_status_detail_isValid = ::OpenAPI::fromJsonValue(m_status_detail, json[QString("StatusDetail")]);
    m_status_detail_isSet = !json[QString("StatusDetail")].isNull() && m_status_detail_isValid;

    m_ingested_data_size_isValid = ::OpenAPI::fromJsonValue(m_ingested_data_size, json[QString("IngestedDataSize")]);
    m_ingested_data_size_isSet = !json[QString("IngestedDataSize")].isNull() && m_ingested_data_size_isValid;

    m_data_start_time_isValid = ::OpenAPI::fromJsonValue(m_data_start_time, json[QString("DataStartTime")]);
    m_data_start_time_isSet = !json[QString("DataStartTime")].isNull() && m_data_start_time_isValid;

    m_data_end_time_isValid = ::OpenAPI::fromJsonValue(m_data_end_time, json[QString("DataEndTime")]);
    m_data_end_time_isSet = !json[QString("DataEndTime")].isNull() && m_data_end_time_isValid;

    m_source_dataset_arn_isValid = ::OpenAPI::fromJsonValue(m_source_dataset_arn, json[QString("SourceDatasetArn")]);
    m_source_dataset_arn_isSet = !json[QString("SourceDatasetArn")].isNull() && m_source_dataset_arn_isValid;
}

QString OAIDescribeDataIngestionJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDataIngestionJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_dataset_arn_isSet) {
        obj.insert(QString("DatasetArn"), ::OpenAPI::toJsonValue(m_dataset_arn));
    }
    if (m_ingestion_input_configuration.isSet()) {
        obj.insert(QString("IngestionInputConfiguration"), ::OpenAPI::toJsonValue(m_ingestion_input_configuration));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_failed_reason_isSet) {
        obj.insert(QString("FailedReason"), ::OpenAPI::toJsonValue(m_failed_reason));
    }
    if (m_data_quality_summary.isSet()) {
        obj.insert(QString("DataQualitySummary"), ::OpenAPI::toJsonValue(m_data_quality_summary));
    }
    if (m_ingested_files_summary.isSet()) {
        obj.insert(QString("IngestedFilesSummary"), ::OpenAPI::toJsonValue(m_ingested_files_summary));
    }
    if (m_status_detail_isSet) {
        obj.insert(QString("StatusDetail"), ::OpenAPI::toJsonValue(m_status_detail));
    }
    if (m_ingested_data_size_isSet) {
        obj.insert(QString("IngestedDataSize"), ::OpenAPI::toJsonValue(m_ingested_data_size));
    }
    if (m_data_start_time_isSet) {
        obj.insert(QString("DataStartTime"), ::OpenAPI::toJsonValue(m_data_start_time));
    }
    if (m_data_end_time_isSet) {
        obj.insert(QString("DataEndTime"), ::OpenAPI::toJsonValue(m_data_end_time));
    }
    if (m_source_dataset_arn_isSet) {
        obj.insert(QString("SourceDatasetArn"), ::OpenAPI::toJsonValue(m_source_dataset_arn));
    }
    return obj;
}

QString OAIDescribeDataIngestionJobResponse::getJobId() const {
    return m_job_id;
}
void OAIDescribeDataIngestionJobResponse::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIDescribeDataIngestionJobResponse::getDatasetArn() const {
    return m_dataset_arn;
}
void OAIDescribeDataIngestionJobResponse::setDatasetArn(const QString &dataset_arn) {
    m_dataset_arn = dataset_arn;
    m_dataset_arn_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_dataset_arn_Set() const{
    return m_dataset_arn_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_dataset_arn_Valid() const{
    return m_dataset_arn_isValid;
}

OAIDescribeDataIngestionJobResponse_IngestionInputConfiguration OAIDescribeDataIngestionJobResponse::getIngestionInputConfiguration() const {
    return m_ingestion_input_configuration;
}
void OAIDescribeDataIngestionJobResponse::setIngestionInputConfiguration(const OAIDescribeDataIngestionJobResponse_IngestionInputConfiguration &ingestion_input_configuration) {
    m_ingestion_input_configuration = ingestion_input_configuration;
    m_ingestion_input_configuration_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_ingestion_input_configuration_Set() const{
    return m_ingestion_input_configuration_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_ingestion_input_configuration_Valid() const{
    return m_ingestion_input_configuration_isValid;
}

QString OAIDescribeDataIngestionJobResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeDataIngestionJobResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QDateTime OAIDescribeDataIngestionJobResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeDataIngestionJobResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIIngestionJobStatus OAIDescribeDataIngestionJobResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDataIngestionJobResponse::setStatus(const OAIIngestionJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeDataIngestionJobResponse::getFailedReason() const {
    return m_failed_reason;
}
void OAIDescribeDataIngestionJobResponse::setFailedReason(const QString &failed_reason) {
    m_failed_reason = failed_reason;
    m_failed_reason_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_failed_reason_Set() const{
    return m_failed_reason_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_failed_reason_Valid() const{
    return m_failed_reason_isValid;
}

OAIDescribeDataIngestionJobResponse_DataQualitySummary OAIDescribeDataIngestionJobResponse::getDataQualitySummary() const {
    return m_data_quality_summary;
}
void OAIDescribeDataIngestionJobResponse::setDataQualitySummary(const OAIDescribeDataIngestionJobResponse_DataQualitySummary &data_quality_summary) {
    m_data_quality_summary = data_quality_summary;
    m_data_quality_summary_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_data_quality_summary_Set() const{
    return m_data_quality_summary_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_data_quality_summary_Valid() const{
    return m_data_quality_summary_isValid;
}

OAIIngestedFilesSummary OAIDescribeDataIngestionJobResponse::getIngestedFilesSummary() const {
    return m_ingested_files_summary;
}
void OAIDescribeDataIngestionJobResponse::setIngestedFilesSummary(const OAIIngestedFilesSummary &ingested_files_summary) {
    m_ingested_files_summary = ingested_files_summary;
    m_ingested_files_summary_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_ingested_files_summary_Set() const{
    return m_ingested_files_summary_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_ingested_files_summary_Valid() const{
    return m_ingested_files_summary_isValid;
}

QString OAIDescribeDataIngestionJobResponse::getStatusDetail() const {
    return m_status_detail;
}
void OAIDescribeDataIngestionJobResponse::setStatusDetail(const QString &status_detail) {
    m_status_detail = status_detail;
    m_status_detail_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_status_detail_Set() const{
    return m_status_detail_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_status_detail_Valid() const{
    return m_status_detail_isValid;
}

qint32 OAIDescribeDataIngestionJobResponse::getIngestedDataSize() const {
    return m_ingested_data_size;
}
void OAIDescribeDataIngestionJobResponse::setIngestedDataSize(const qint32 &ingested_data_size) {
    m_ingested_data_size = ingested_data_size;
    m_ingested_data_size_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_ingested_data_size_Set() const{
    return m_ingested_data_size_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_ingested_data_size_Valid() const{
    return m_ingested_data_size_isValid;
}

QDateTime OAIDescribeDataIngestionJobResponse::getDataStartTime() const {
    return m_data_start_time;
}
void OAIDescribeDataIngestionJobResponse::setDataStartTime(const QDateTime &data_start_time) {
    m_data_start_time = data_start_time;
    m_data_start_time_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_data_start_time_Set() const{
    return m_data_start_time_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_data_start_time_Valid() const{
    return m_data_start_time_isValid;
}

QDateTime OAIDescribeDataIngestionJobResponse::getDataEndTime() const {
    return m_data_end_time;
}
void OAIDescribeDataIngestionJobResponse::setDataEndTime(const QDateTime &data_end_time) {
    m_data_end_time = data_end_time;
    m_data_end_time_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_data_end_time_Set() const{
    return m_data_end_time_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_data_end_time_Valid() const{
    return m_data_end_time_isValid;
}

QString OAIDescribeDataIngestionJobResponse::getSourceDatasetArn() const {
    return m_source_dataset_arn;
}
void OAIDescribeDataIngestionJobResponse::setSourceDatasetArn(const QString &source_dataset_arn) {
    m_source_dataset_arn = source_dataset_arn;
    m_source_dataset_arn_isSet = true;
}

bool OAIDescribeDataIngestionJobResponse::is_source_dataset_arn_Set() const{
    return m_source_dataset_arn_isSet;
}

bool OAIDescribeDataIngestionJobResponse::is_source_dataset_arn_Valid() const{
    return m_source_dataset_arn_isValid;
}

bool OAIDescribeDataIngestionJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingestion_input_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_quality_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingested_files_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingested_data_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_dataset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDataIngestionJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
