/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateInferenceSchedulerRequest.h
 *
 * 
 */

#ifndef OAIUpdateInferenceSchedulerRequest_H
#define OAIUpdateInferenceSchedulerRequest_H

#include <QJsonObject>

#include "OAIDataUploadFrequency.h"
#include "OAIUpdateInferenceSchedulerRequest_DataInputConfiguration.h"
#include "OAIUpdateInferenceSchedulerRequest_DataOutputConfiguration.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateInferenceSchedulerRequest_DataInputConfiguration;
class OAIUpdateInferenceSchedulerRequest_DataOutputConfiguration;

class OAIUpdateInferenceSchedulerRequest : public OAIObject {
public:
    OAIUpdateInferenceSchedulerRequest();
    OAIUpdateInferenceSchedulerRequest(QString json);
    ~OAIUpdateInferenceSchedulerRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInferenceSchedulerName() const;
    void setInferenceSchedulerName(const QString &inference_scheduler_name);
    bool is_inference_scheduler_name_Set() const;
    bool is_inference_scheduler_name_Valid() const;

    qint32 getDataDelayOffsetInMinutes() const;
    void setDataDelayOffsetInMinutes(const qint32 &data_delay_offset_in_minutes);
    bool is_data_delay_offset_in_minutes_Set() const;
    bool is_data_delay_offset_in_minutes_Valid() const;

    OAIDataUploadFrequency getDataUploadFrequency() const;
    void setDataUploadFrequency(const OAIDataUploadFrequency &data_upload_frequency);
    bool is_data_upload_frequency_Set() const;
    bool is_data_upload_frequency_Valid() const;

    OAIUpdateInferenceSchedulerRequest_DataInputConfiguration getDataInputConfiguration() const;
    void setDataInputConfiguration(const OAIUpdateInferenceSchedulerRequest_DataInputConfiguration &data_input_configuration);
    bool is_data_input_configuration_Set() const;
    bool is_data_input_configuration_Valid() const;

    OAIUpdateInferenceSchedulerRequest_DataOutputConfiguration getDataOutputConfiguration() const;
    void setDataOutputConfiguration(const OAIUpdateInferenceSchedulerRequest_DataOutputConfiguration &data_output_configuration);
    bool is_data_output_configuration_Set() const;
    bool is_data_output_configuration_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_inference_scheduler_name;
    bool m_inference_scheduler_name_isSet;
    bool m_inference_scheduler_name_isValid;

    qint32 m_data_delay_offset_in_minutes;
    bool m_data_delay_offset_in_minutes_isSet;
    bool m_data_delay_offset_in_minutes_isValid;

    OAIDataUploadFrequency m_data_upload_frequency;
    bool m_data_upload_frequency_isSet;
    bool m_data_upload_frequency_isValid;

    OAIUpdateInferenceSchedulerRequest_DataInputConfiguration m_data_input_configuration;
    bool m_data_input_configuration_isSet;
    bool m_data_input_configuration_isValid;

    OAIUpdateInferenceSchedulerRequest_DataOutputConfiguration m_data_output_configuration;
    bool m_data_output_configuration_isSet;
    bool m_data_output_configuration_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateInferenceSchedulerRequest)

#endif // OAIUpdateInferenceSchedulerRequest_H
