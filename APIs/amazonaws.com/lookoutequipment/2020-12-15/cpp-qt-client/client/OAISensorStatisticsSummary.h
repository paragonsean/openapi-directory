/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISensorStatisticsSummary.h
 *
 *  Summary of ingestion statistics like whether data exists, number of missing values, number of invalid values and so on related to the particular sensor. 
 */

#ifndef OAISensorStatisticsSummary_H
#define OAISensorStatisticsSummary_H

#include <QJsonObject>

#include "OAISensorStatisticsSummary_CategoricalValues.h"
#include "OAISensorStatisticsSummary_DuplicateTimestamps.h"
#include "OAISensorStatisticsSummary_InvalidDateEntries.h"
#include "OAISensorStatisticsSummary_InvalidValues.h"
#include "OAISensorStatisticsSummary_LargeTimestampGaps.h"
#include "OAISensorStatisticsSummary_MissingValues.h"
#include "OAISensorStatisticsSummary_MonotonicValues.h"
#include "OAISensorStatisticsSummary_MultipleOperatingModes.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISensorStatisticsSummary_MissingValues;
class OAISensorStatisticsSummary_InvalidValues;
class OAISensorStatisticsSummary_InvalidDateEntries;
class OAISensorStatisticsSummary_DuplicateTimestamps;
class OAISensorStatisticsSummary_CategoricalValues;
class OAISensorStatisticsSummary_MultipleOperatingModes;
class OAISensorStatisticsSummary_LargeTimestampGaps;
class OAISensorStatisticsSummary_MonotonicValues;

class OAISensorStatisticsSummary : public OAIObject {
public:
    OAISensorStatisticsSummary();
    OAISensorStatisticsSummary(QString json);
    ~OAISensorStatisticsSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComponentName() const;
    void setComponentName(const QString &component_name);
    bool is_component_name_Set() const;
    bool is_component_name_Valid() const;

    QString getSensorName() const;
    void setSensorName(const QString &sensor_name);
    bool is_sensor_name_Set() const;
    bool is_sensor_name_Valid() const;

    bool getDataExists() const;
    void setDataExists(const bool &data_exists);
    bool is_data_exists_Set() const;
    bool is_data_exists_Valid() const;

    OAISensorStatisticsSummary_MissingValues getMissingValues() const;
    void setMissingValues(const OAISensorStatisticsSummary_MissingValues &missing_values);
    bool is_missing_values_Set() const;
    bool is_missing_values_Valid() const;

    OAISensorStatisticsSummary_InvalidValues getInvalidValues() const;
    void setInvalidValues(const OAISensorStatisticsSummary_InvalidValues &invalid_values);
    bool is_invalid_values_Set() const;
    bool is_invalid_values_Valid() const;

    OAISensorStatisticsSummary_InvalidDateEntries getInvalidDateEntries() const;
    void setInvalidDateEntries(const OAISensorStatisticsSummary_InvalidDateEntries &invalid_date_entries);
    bool is_invalid_date_entries_Set() const;
    bool is_invalid_date_entries_Valid() const;

    OAISensorStatisticsSummary_DuplicateTimestamps getDuplicateTimestamps() const;
    void setDuplicateTimestamps(const OAISensorStatisticsSummary_DuplicateTimestamps &duplicate_timestamps);
    bool is_duplicate_timestamps_Set() const;
    bool is_duplicate_timestamps_Valid() const;

    OAISensorStatisticsSummary_CategoricalValues getCategoricalValues() const;
    void setCategoricalValues(const OAISensorStatisticsSummary_CategoricalValues &categorical_values);
    bool is_categorical_values_Set() const;
    bool is_categorical_values_Valid() const;

    OAISensorStatisticsSummary_MultipleOperatingModes getMultipleOperatingModes() const;
    void setMultipleOperatingModes(const OAISensorStatisticsSummary_MultipleOperatingModes &multiple_operating_modes);
    bool is_multiple_operating_modes_Set() const;
    bool is_multiple_operating_modes_Valid() const;

    OAISensorStatisticsSummary_LargeTimestampGaps getLargeTimestampGaps() const;
    void setLargeTimestampGaps(const OAISensorStatisticsSummary_LargeTimestampGaps &large_timestamp_gaps);
    bool is_large_timestamp_gaps_Set() const;
    bool is_large_timestamp_gaps_Valid() const;

    OAISensorStatisticsSummary_MonotonicValues getMonotonicValues() const;
    void setMonotonicValues(const OAISensorStatisticsSummary_MonotonicValues &monotonic_values);
    bool is_monotonic_values_Set() const;
    bool is_monotonic_values_Valid() const;

    QDateTime getDataStartTime() const;
    void setDataStartTime(const QDateTime &data_start_time);
    bool is_data_start_time_Set() const;
    bool is_data_start_time_Valid() const;

    QDateTime getDataEndTime() const;
    void setDataEndTime(const QDateTime &data_end_time);
    bool is_data_end_time_Set() const;
    bool is_data_end_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_component_name;
    bool m_component_name_isSet;
    bool m_component_name_isValid;

    QString m_sensor_name;
    bool m_sensor_name_isSet;
    bool m_sensor_name_isValid;

    bool m_data_exists;
    bool m_data_exists_isSet;
    bool m_data_exists_isValid;

    OAISensorStatisticsSummary_MissingValues m_missing_values;
    bool m_missing_values_isSet;
    bool m_missing_values_isValid;

    OAISensorStatisticsSummary_InvalidValues m_invalid_values;
    bool m_invalid_values_isSet;
    bool m_invalid_values_isValid;

    OAISensorStatisticsSummary_InvalidDateEntries m_invalid_date_entries;
    bool m_invalid_date_entries_isSet;
    bool m_invalid_date_entries_isValid;

    OAISensorStatisticsSummary_DuplicateTimestamps m_duplicate_timestamps;
    bool m_duplicate_timestamps_isSet;
    bool m_duplicate_timestamps_isValid;

    OAISensorStatisticsSummary_CategoricalValues m_categorical_values;
    bool m_categorical_values_isSet;
    bool m_categorical_values_isValid;

    OAISensorStatisticsSummary_MultipleOperatingModes m_multiple_operating_modes;
    bool m_multiple_operating_modes_isSet;
    bool m_multiple_operating_modes_isValid;

    OAISensorStatisticsSummary_LargeTimestampGaps m_large_timestamp_gaps;
    bool m_large_timestamp_gaps_isSet;
    bool m_large_timestamp_gaps_isValid;

    OAISensorStatisticsSummary_MonotonicValues m_monotonic_values;
    bool m_monotonic_values_isSet;
    bool m_monotonic_values_isValid;

    QDateTime m_data_start_time;
    bool m_data_start_time_isSet;
    bool m_data_start_time_isValid;

    QDateTime m_data_end_time;
    bool m_data_end_time_isSet;
    bool m_data_end_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISensorStatisticsSummary)

#endif // OAISensorStatisticsSummary_H
