/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelVersionSourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelVersionSourceType::OAIModelVersionSourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelVersionSourceType::OAIModelVersionSourceType() {
    this->initializeModel();
}

OAIModelVersionSourceType::~OAIModelVersionSourceType() {}

void OAIModelVersionSourceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIModelVersionSourceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIModelVersionSourceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TRAINING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIModelVersionSourceType::TRAINING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RETRAINING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIModelVersionSourceType::RETRAINING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIModelVersionSourceType::IMPORT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIModelVersionSourceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIModelVersionSourceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIModelVersionSourceType::TRAINING:
            val = "TRAINING";
            break;
        case eOAIModelVersionSourceType::RETRAINING:
            val = "RETRAINING";
            break;
        case eOAIModelVersionSourceType::IMPORT:
            val = "IMPORT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIModelVersionSourceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIModelVersionSourceType::eOAIModelVersionSourceType OAIModelVersionSourceType::getValue() const {
    return m_value;
}

void OAIModelVersionSourceType::setValue(const OAIModelVersionSourceType::eOAIModelVersionSourceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIModelVersionSourceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIModelVersionSourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
