/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetSchema::OAIDatasetSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetSchema::OAIDatasetSchema() {
    this->initializeModel();
}

OAIDatasetSchema::~OAIDatasetSchema() {}

void OAIDatasetSchema::initializeModel() {

    m_inline_data_schema_isSet = false;
    m_inline_data_schema_isValid = false;
}

void OAIDatasetSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetSchema::fromJsonObject(QJsonObject json) {

    m_inline_data_schema_isValid = ::OpenAPI::fromJsonValue(m_inline_data_schema, json[QString("InlineDataSchema")]);
    m_inline_data_schema_isSet = !json[QString("InlineDataSchema")].isNull() && m_inline_data_schema_isValid;
}

QString OAIDatasetSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_inline_data_schema_isSet) {
        obj.insert(QString("InlineDataSchema"), ::OpenAPI::toJsonValue(m_inline_data_schema));
    }
    return obj;
}

QString OAIDatasetSchema::getInlineDataSchema() const {
    return m_inline_data_schema;
}
void OAIDatasetSchema::setInlineDataSchema(const QString &inline_data_schema) {
    m_inline_data_schema = inline_data_schema;
    m_inline_data_schema_isSet = true;
}

bool OAIDatasetSchema::is_inline_data_schema_Set() const{
    return m_inline_data_schema_isSet;
}

bool OAIDatasetSchema::is_inline_data_schema_Valid() const{
    return m_inline_data_schema_isValid;
}

bool OAIDatasetSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inline_data_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
