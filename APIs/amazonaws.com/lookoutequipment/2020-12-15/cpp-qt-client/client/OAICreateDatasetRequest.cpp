/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDatasetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDatasetRequest::OAICreateDatasetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDatasetRequest::OAICreateDatasetRequest() {
    this->initializeModel();
}

OAICreateDatasetRequest::~OAICreateDatasetRequest() {}

void OAICreateDatasetRequest::initializeModel() {

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_dataset_schema_isSet = false;
    m_dataset_schema_isValid = false;

    m_server_side_kms_key_id_isSet = false;
    m_server_side_kms_key_id_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateDatasetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDatasetRequest::fromJsonObject(QJsonObject json) {

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("DatasetName")]);
    m_dataset_name_isSet = !json[QString("DatasetName")].isNull() && m_dataset_name_isValid;

    m_dataset_schema_isValid = ::OpenAPI::fromJsonValue(m_dataset_schema, json[QString("DatasetSchema")]);
    m_dataset_schema_isSet = !json[QString("DatasetSchema")].isNull() && m_dataset_schema_isValid;

    m_server_side_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_server_side_kms_key_id, json[QString("ServerSideKmsKeyId")]);
    m_server_side_kms_key_id_isSet = !json[QString("ServerSideKmsKeyId")].isNull() && m_server_side_kms_key_id_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateDatasetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDatasetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_name_isSet) {
        obj.insert(QString("DatasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_dataset_schema.isSet()) {
        obj.insert(QString("DatasetSchema"), ::OpenAPI::toJsonValue(m_dataset_schema));
    }
    if (m_server_side_kms_key_id_isSet) {
        obj.insert(QString("ServerSideKmsKeyId"), ::OpenAPI::toJsonValue(m_server_side_kms_key_id));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateDatasetRequest::getDatasetName() const {
    return m_dataset_name;
}
void OAICreateDatasetRequest::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAICreateDatasetRequest::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAICreateDatasetRequest::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

OAICreateDatasetRequest_DatasetSchema OAICreateDatasetRequest::getDatasetSchema() const {
    return m_dataset_schema;
}
void OAICreateDatasetRequest::setDatasetSchema(const OAICreateDatasetRequest_DatasetSchema &dataset_schema) {
    m_dataset_schema = dataset_schema;
    m_dataset_schema_isSet = true;
}

bool OAICreateDatasetRequest::is_dataset_schema_Set() const{
    return m_dataset_schema_isSet;
}

bool OAICreateDatasetRequest::is_dataset_schema_Valid() const{
    return m_dataset_schema_isValid;
}

QString OAICreateDatasetRequest::getServerSideKmsKeyId() const {
    return m_server_side_kms_key_id;
}
void OAICreateDatasetRequest::setServerSideKmsKeyId(const QString &server_side_kms_key_id) {
    m_server_side_kms_key_id = server_side_kms_key_id;
    m_server_side_kms_key_id_isSet = true;
}

bool OAICreateDatasetRequest::is_server_side_kms_key_id_Set() const{
    return m_server_side_kms_key_id_isSet;
}

bool OAICreateDatasetRequest::is_server_side_kms_key_id_Valid() const{
    return m_server_side_kms_key_id_isValid;
}

QString OAICreateDatasetRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateDatasetRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateDatasetRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateDatasetRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList OAICreateDatasetRequest::getTags() const {
    return m_tags;
}
void OAICreateDatasetRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDatasetRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDatasetRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateDatasetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDatasetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_name_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
