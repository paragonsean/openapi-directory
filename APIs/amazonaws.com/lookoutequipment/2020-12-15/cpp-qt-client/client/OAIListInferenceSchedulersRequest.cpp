/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListInferenceSchedulersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListInferenceSchedulersRequest::OAIListInferenceSchedulersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListInferenceSchedulersRequest::OAIListInferenceSchedulersRequest() {
    this->initializeModel();
}

OAIListInferenceSchedulersRequest::~OAIListInferenceSchedulersRequest() {}

void OAIListInferenceSchedulersRequest::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_inference_scheduler_name_begins_with_isSet = false;
    m_inference_scheduler_name_begins_with_isValid = false;

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIListInferenceSchedulersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListInferenceSchedulersRequest::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_inference_scheduler_name_begins_with_isValid = ::OpenAPI::fromJsonValue(m_inference_scheduler_name_begins_with, json[QString("InferenceSchedulerNameBeginsWith")]);
    m_inference_scheduler_name_begins_with_isSet = !json[QString("InferenceSchedulerNameBeginsWith")].isNull() && m_inference_scheduler_name_begins_with_isValid;

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIListInferenceSchedulersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListInferenceSchedulersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_inference_scheduler_name_begins_with_isSet) {
        obj.insert(QString("InferenceSchedulerNameBeginsWith"), ::OpenAPI::toJsonValue(m_inference_scheduler_name_begins_with));
    }
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIListInferenceSchedulersRequest::getNextToken() const {
    return m_next_token;
}
void OAIListInferenceSchedulersRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListInferenceSchedulersRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListInferenceSchedulersRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListInferenceSchedulersRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListInferenceSchedulersRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListInferenceSchedulersRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListInferenceSchedulersRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListInferenceSchedulersRequest::getInferenceSchedulerNameBeginsWith() const {
    return m_inference_scheduler_name_begins_with;
}
void OAIListInferenceSchedulersRequest::setInferenceSchedulerNameBeginsWith(const QString &inference_scheduler_name_begins_with) {
    m_inference_scheduler_name_begins_with = inference_scheduler_name_begins_with;
    m_inference_scheduler_name_begins_with_isSet = true;
}

bool OAIListInferenceSchedulersRequest::is_inference_scheduler_name_begins_with_Set() const{
    return m_inference_scheduler_name_begins_with_isSet;
}

bool OAIListInferenceSchedulersRequest::is_inference_scheduler_name_begins_with_Valid() const{
    return m_inference_scheduler_name_begins_with_isValid;
}

QString OAIListInferenceSchedulersRequest::getModelName() const {
    return m_model_name;
}
void OAIListInferenceSchedulersRequest::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIListInferenceSchedulersRequest::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIListInferenceSchedulersRequest::is_model_name_Valid() const{
    return m_model_name_isValid;
}

OAIInferenceSchedulerStatus OAIListInferenceSchedulersRequest::getStatus() const {
    return m_status;
}
void OAIListInferenceSchedulersRequest::setStatus(const OAIInferenceSchedulerStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListInferenceSchedulersRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListInferenceSchedulersRequest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIListInferenceSchedulersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_scheduler_name_begins_with_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListInferenceSchedulersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
