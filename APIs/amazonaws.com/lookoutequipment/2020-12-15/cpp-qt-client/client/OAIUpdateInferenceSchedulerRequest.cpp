/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateInferenceSchedulerRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateInferenceSchedulerRequest::OAIUpdateInferenceSchedulerRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateInferenceSchedulerRequest::OAIUpdateInferenceSchedulerRequest() {
    this->initializeModel();
}

OAIUpdateInferenceSchedulerRequest::~OAIUpdateInferenceSchedulerRequest() {}

void OAIUpdateInferenceSchedulerRequest::initializeModel() {

    m_inference_scheduler_name_isSet = false;
    m_inference_scheduler_name_isValid = false;

    m_data_delay_offset_in_minutes_isSet = false;
    m_data_delay_offset_in_minutes_isValid = false;

    m_data_upload_frequency_isSet = false;
    m_data_upload_frequency_isValid = false;

    m_data_input_configuration_isSet = false;
    m_data_input_configuration_isValid = false;

    m_data_output_configuration_isSet = false;
    m_data_output_configuration_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIUpdateInferenceSchedulerRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateInferenceSchedulerRequest::fromJsonObject(QJsonObject json) {

    m_inference_scheduler_name_isValid = ::OpenAPI::fromJsonValue(m_inference_scheduler_name, json[QString("InferenceSchedulerName")]);
    m_inference_scheduler_name_isSet = !json[QString("InferenceSchedulerName")].isNull() && m_inference_scheduler_name_isValid;

    m_data_delay_offset_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_data_delay_offset_in_minutes, json[QString("DataDelayOffsetInMinutes")]);
    m_data_delay_offset_in_minutes_isSet = !json[QString("DataDelayOffsetInMinutes")].isNull() && m_data_delay_offset_in_minutes_isValid;

    m_data_upload_frequency_isValid = ::OpenAPI::fromJsonValue(m_data_upload_frequency, json[QString("DataUploadFrequency")]);
    m_data_upload_frequency_isSet = !json[QString("DataUploadFrequency")].isNull() && m_data_upload_frequency_isValid;

    m_data_input_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_input_configuration, json[QString("DataInputConfiguration")]);
    m_data_input_configuration_isSet = !json[QString("DataInputConfiguration")].isNull() && m_data_input_configuration_isValid;

    m_data_output_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_output_configuration, json[QString("DataOutputConfiguration")]);
    m_data_output_configuration_isSet = !json[QString("DataOutputConfiguration")].isNull() && m_data_output_configuration_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAIUpdateInferenceSchedulerRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateInferenceSchedulerRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_inference_scheduler_name_isSet) {
        obj.insert(QString("InferenceSchedulerName"), ::OpenAPI::toJsonValue(m_inference_scheduler_name));
    }
    if (m_data_delay_offset_in_minutes_isSet) {
        obj.insert(QString("DataDelayOffsetInMinutes"), ::OpenAPI::toJsonValue(m_data_delay_offset_in_minutes));
    }
    if (m_data_upload_frequency.isSet()) {
        obj.insert(QString("DataUploadFrequency"), ::OpenAPI::toJsonValue(m_data_upload_frequency));
    }
    if (m_data_input_configuration.isSet()) {
        obj.insert(QString("DataInputConfiguration"), ::OpenAPI::toJsonValue(m_data_input_configuration));
    }
    if (m_data_output_configuration.isSet()) {
        obj.insert(QString("DataOutputConfiguration"), ::OpenAPI::toJsonValue(m_data_output_configuration));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIUpdateInferenceSchedulerRequest::getInferenceSchedulerName() const {
    return m_inference_scheduler_name;
}
void OAIUpdateInferenceSchedulerRequest::setInferenceSchedulerName(const QString &inference_scheduler_name) {
    m_inference_scheduler_name = inference_scheduler_name;
    m_inference_scheduler_name_isSet = true;
}

bool OAIUpdateInferenceSchedulerRequest::is_inference_scheduler_name_Set() const{
    return m_inference_scheduler_name_isSet;
}

bool OAIUpdateInferenceSchedulerRequest::is_inference_scheduler_name_Valid() const{
    return m_inference_scheduler_name_isValid;
}

qint32 OAIUpdateInferenceSchedulerRequest::getDataDelayOffsetInMinutes() const {
    return m_data_delay_offset_in_minutes;
}
void OAIUpdateInferenceSchedulerRequest::setDataDelayOffsetInMinutes(const qint32 &data_delay_offset_in_minutes) {
    m_data_delay_offset_in_minutes = data_delay_offset_in_minutes;
    m_data_delay_offset_in_minutes_isSet = true;
}

bool OAIUpdateInferenceSchedulerRequest::is_data_delay_offset_in_minutes_Set() const{
    return m_data_delay_offset_in_minutes_isSet;
}

bool OAIUpdateInferenceSchedulerRequest::is_data_delay_offset_in_minutes_Valid() const{
    return m_data_delay_offset_in_minutes_isValid;
}

OAIDataUploadFrequency OAIUpdateInferenceSchedulerRequest::getDataUploadFrequency() const {
    return m_data_upload_frequency;
}
void OAIUpdateInferenceSchedulerRequest::setDataUploadFrequency(const OAIDataUploadFrequency &data_upload_frequency) {
    m_data_upload_frequency = data_upload_frequency;
    m_data_upload_frequency_isSet = true;
}

bool OAIUpdateInferenceSchedulerRequest::is_data_upload_frequency_Set() const{
    return m_data_upload_frequency_isSet;
}

bool OAIUpdateInferenceSchedulerRequest::is_data_upload_frequency_Valid() const{
    return m_data_upload_frequency_isValid;
}

OAIUpdateInferenceSchedulerRequest_DataInputConfiguration OAIUpdateInferenceSchedulerRequest::getDataInputConfiguration() const {
    return m_data_input_configuration;
}
void OAIUpdateInferenceSchedulerRequest::setDataInputConfiguration(const OAIUpdateInferenceSchedulerRequest_DataInputConfiguration &data_input_configuration) {
    m_data_input_configuration = data_input_configuration;
    m_data_input_configuration_isSet = true;
}

bool OAIUpdateInferenceSchedulerRequest::is_data_input_configuration_Set() const{
    return m_data_input_configuration_isSet;
}

bool OAIUpdateInferenceSchedulerRequest::is_data_input_configuration_Valid() const{
    return m_data_input_configuration_isValid;
}

OAIUpdateInferenceSchedulerRequest_DataOutputConfiguration OAIUpdateInferenceSchedulerRequest::getDataOutputConfiguration() const {
    return m_data_output_configuration;
}
void OAIUpdateInferenceSchedulerRequest::setDataOutputConfiguration(const OAIUpdateInferenceSchedulerRequest_DataOutputConfiguration &data_output_configuration) {
    m_data_output_configuration = data_output_configuration;
    m_data_output_configuration_isSet = true;
}

bool OAIUpdateInferenceSchedulerRequest::is_data_output_configuration_Set() const{
    return m_data_output_configuration_isSet;
}

bool OAIUpdateInferenceSchedulerRequest::is_data_output_configuration_Valid() const{
    return m_data_output_configuration_isValid;
}

QString OAIUpdateInferenceSchedulerRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateInferenceSchedulerRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateInferenceSchedulerRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateInferenceSchedulerRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIUpdateInferenceSchedulerRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inference_scheduler_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_delay_offset_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_upload_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_input_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_output_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateInferenceSchedulerRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inference_scheduler_name_isValid && true;
}

} // namespace OpenAPI
