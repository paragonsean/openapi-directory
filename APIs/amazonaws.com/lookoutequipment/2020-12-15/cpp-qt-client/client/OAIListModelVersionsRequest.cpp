/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListModelVersionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListModelVersionsRequest::OAIListModelVersionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListModelVersionsRequest::OAIListModelVersionsRequest() {
    this->initializeModel();
}

OAIListModelVersionsRequest::~OAIListModelVersionsRequest() {}

void OAIListModelVersionsRequest::initializeModel() {

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_created_at_end_time_isSet = false;
    m_created_at_end_time_isValid = false;

    m_created_at_start_time_isSet = false;
    m_created_at_start_time_isValid = false;

    m_max_model_version_isSet = false;
    m_max_model_version_isValid = false;

    m_min_model_version_isSet = false;
    m_min_model_version_isValid = false;
}

void OAIListModelVersionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListModelVersionsRequest::fromJsonObject(QJsonObject json) {

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_created_at_end_time_isValid = ::OpenAPI::fromJsonValue(m_created_at_end_time, json[QString("CreatedAtEndTime")]);
    m_created_at_end_time_isSet = !json[QString("CreatedAtEndTime")].isNull() && m_created_at_end_time_isValid;

    m_created_at_start_time_isValid = ::OpenAPI::fromJsonValue(m_created_at_start_time, json[QString("CreatedAtStartTime")]);
    m_created_at_start_time_isSet = !json[QString("CreatedAtStartTime")].isNull() && m_created_at_start_time_isValid;

    m_max_model_version_isValid = ::OpenAPI::fromJsonValue(m_max_model_version, json[QString("MaxModelVersion")]);
    m_max_model_version_isSet = !json[QString("MaxModelVersion")].isNull() && m_max_model_version_isValid;

    m_min_model_version_isValid = ::OpenAPI::fromJsonValue(m_min_model_version, json[QString("MinModelVersion")]);
    m_min_model_version_isSet = !json[QString("MinModelVersion")].isNull() && m_min_model_version_isValid;
}

QString OAIListModelVersionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListModelVersionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_source_type.isSet()) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_created_at_end_time_isSet) {
        obj.insert(QString("CreatedAtEndTime"), ::OpenAPI::toJsonValue(m_created_at_end_time));
    }
    if (m_created_at_start_time_isSet) {
        obj.insert(QString("CreatedAtStartTime"), ::OpenAPI::toJsonValue(m_created_at_start_time));
    }
    if (m_max_model_version_isSet) {
        obj.insert(QString("MaxModelVersion"), ::OpenAPI::toJsonValue(m_max_model_version));
    }
    if (m_min_model_version_isSet) {
        obj.insert(QString("MinModelVersion"), ::OpenAPI::toJsonValue(m_min_model_version));
    }
    return obj;
}

QString OAIListModelVersionsRequest::getModelName() const {
    return m_model_name;
}
void OAIListModelVersionsRequest::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIListModelVersionsRequest::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIListModelVersionsRequest::is_model_name_Valid() const{
    return m_model_name_isValid;
}

QString OAIListModelVersionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListModelVersionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListModelVersionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListModelVersionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListModelVersionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListModelVersionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListModelVersionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListModelVersionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAIModelVersionStatus OAIListModelVersionsRequest::getStatus() const {
    return m_status;
}
void OAIListModelVersionsRequest::setStatus(const OAIModelVersionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListModelVersionsRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListModelVersionsRequest::is_status_Valid() const{
    return m_status_isValid;
}

OAIModelVersionSourceType OAIListModelVersionsRequest::getSourceType() const {
    return m_source_type;
}
void OAIListModelVersionsRequest::setSourceType(const OAIModelVersionSourceType &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIListModelVersionsRequest::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIListModelVersionsRequest::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QDateTime OAIListModelVersionsRequest::getCreatedAtEndTime() const {
    return m_created_at_end_time;
}
void OAIListModelVersionsRequest::setCreatedAtEndTime(const QDateTime &created_at_end_time) {
    m_created_at_end_time = created_at_end_time;
    m_created_at_end_time_isSet = true;
}

bool OAIListModelVersionsRequest::is_created_at_end_time_Set() const{
    return m_created_at_end_time_isSet;
}

bool OAIListModelVersionsRequest::is_created_at_end_time_Valid() const{
    return m_created_at_end_time_isValid;
}

QDateTime OAIListModelVersionsRequest::getCreatedAtStartTime() const {
    return m_created_at_start_time;
}
void OAIListModelVersionsRequest::setCreatedAtStartTime(const QDateTime &created_at_start_time) {
    m_created_at_start_time = created_at_start_time;
    m_created_at_start_time_isSet = true;
}

bool OAIListModelVersionsRequest::is_created_at_start_time_Set() const{
    return m_created_at_start_time_isSet;
}

bool OAIListModelVersionsRequest::is_created_at_start_time_Valid() const{
    return m_created_at_start_time_isValid;
}

qint32 OAIListModelVersionsRequest::getMaxModelVersion() const {
    return m_max_model_version;
}
void OAIListModelVersionsRequest::setMaxModelVersion(const qint32 &max_model_version) {
    m_max_model_version = max_model_version;
    m_max_model_version_isSet = true;
}

bool OAIListModelVersionsRequest::is_max_model_version_Set() const{
    return m_max_model_version_isSet;
}

bool OAIListModelVersionsRequest::is_max_model_version_Valid() const{
    return m_max_model_version_isValid;
}

qint32 OAIListModelVersionsRequest::getMinModelVersion() const {
    return m_min_model_version;
}
void OAIListModelVersionsRequest::setMinModelVersion(const qint32 &min_model_version) {
    m_min_model_version = min_model_version;
    m_min_model_version_isSet = true;
}

bool OAIListModelVersionsRequest::is_min_model_version_Set() const{
    return m_min_model_version_isSet;
}

bool OAIListModelVersionsRequest::is_min_model_version_Valid() const{
    return m_min_model_version_isValid;
}

bool OAIListModelVersionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListModelVersionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_name_isValid && true;
}

} // namespace OpenAPI
