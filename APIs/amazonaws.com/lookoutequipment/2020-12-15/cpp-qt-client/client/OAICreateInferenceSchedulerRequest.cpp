/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInferenceSchedulerRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInferenceSchedulerRequest::OAICreateInferenceSchedulerRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInferenceSchedulerRequest::OAICreateInferenceSchedulerRequest() {
    this->initializeModel();
}

OAICreateInferenceSchedulerRequest::~OAICreateInferenceSchedulerRequest() {}

void OAICreateInferenceSchedulerRequest::initializeModel() {

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_inference_scheduler_name_isSet = false;
    m_inference_scheduler_name_isValid = false;

    m_data_delay_offset_in_minutes_isSet = false;
    m_data_delay_offset_in_minutes_isValid = false;

    m_data_upload_frequency_isSet = false;
    m_data_upload_frequency_isValid = false;

    m_data_input_configuration_isSet = false;
    m_data_input_configuration_isValid = false;

    m_data_output_configuration_isSet = false;
    m_data_output_configuration_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_server_side_kms_key_id_isSet = false;
    m_server_side_kms_key_id_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateInferenceSchedulerRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInferenceSchedulerRequest::fromJsonObject(QJsonObject json) {

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_inference_scheduler_name_isValid = ::OpenAPI::fromJsonValue(m_inference_scheduler_name, json[QString("InferenceSchedulerName")]);
    m_inference_scheduler_name_isSet = !json[QString("InferenceSchedulerName")].isNull() && m_inference_scheduler_name_isValid;

    m_data_delay_offset_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_data_delay_offset_in_minutes, json[QString("DataDelayOffsetInMinutes")]);
    m_data_delay_offset_in_minutes_isSet = !json[QString("DataDelayOffsetInMinutes")].isNull() && m_data_delay_offset_in_minutes_isValid;

    m_data_upload_frequency_isValid = ::OpenAPI::fromJsonValue(m_data_upload_frequency, json[QString("DataUploadFrequency")]);
    m_data_upload_frequency_isSet = !json[QString("DataUploadFrequency")].isNull() && m_data_upload_frequency_isValid;

    m_data_input_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_input_configuration, json[QString("DataInputConfiguration")]);
    m_data_input_configuration_isSet = !json[QString("DataInputConfiguration")].isNull() && m_data_input_configuration_isValid;

    m_data_output_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_output_configuration, json[QString("DataOutputConfiguration")]);
    m_data_output_configuration_isSet = !json[QString("DataOutputConfiguration")].isNull() && m_data_output_configuration_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_server_side_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_server_side_kms_key_id, json[QString("ServerSideKmsKeyId")]);
    m_server_side_kms_key_id_isSet = !json[QString("ServerSideKmsKeyId")].isNull() && m_server_side_kms_key_id_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateInferenceSchedulerRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInferenceSchedulerRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_inference_scheduler_name_isSet) {
        obj.insert(QString("InferenceSchedulerName"), ::OpenAPI::toJsonValue(m_inference_scheduler_name));
    }
    if (m_data_delay_offset_in_minutes_isSet) {
        obj.insert(QString("DataDelayOffsetInMinutes"), ::OpenAPI::toJsonValue(m_data_delay_offset_in_minutes));
    }
    if (m_data_upload_frequency.isSet()) {
        obj.insert(QString("DataUploadFrequency"), ::OpenAPI::toJsonValue(m_data_upload_frequency));
    }
    if (m_data_input_configuration.isSet()) {
        obj.insert(QString("DataInputConfiguration"), ::OpenAPI::toJsonValue(m_data_input_configuration));
    }
    if (m_data_output_configuration.isSet()) {
        obj.insert(QString("DataOutputConfiguration"), ::OpenAPI::toJsonValue(m_data_output_configuration));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_server_side_kms_key_id_isSet) {
        obj.insert(QString("ServerSideKmsKeyId"), ::OpenAPI::toJsonValue(m_server_side_kms_key_id));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateInferenceSchedulerRequest::getModelName() const {
    return m_model_name;
}
void OAICreateInferenceSchedulerRequest::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAICreateInferenceSchedulerRequest::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAICreateInferenceSchedulerRequest::is_model_name_Valid() const{
    return m_model_name_isValid;
}

QString OAICreateInferenceSchedulerRequest::getInferenceSchedulerName() const {
    return m_inference_scheduler_name;
}
void OAICreateInferenceSchedulerRequest::setInferenceSchedulerName(const QString &inference_scheduler_name) {
    m_inference_scheduler_name = inference_scheduler_name;
    m_inference_scheduler_name_isSet = true;
}

bool OAICreateInferenceSchedulerRequest::is_inference_scheduler_name_Set() const{
    return m_inference_scheduler_name_isSet;
}

bool OAICreateInferenceSchedulerRequest::is_inference_scheduler_name_Valid() const{
    return m_inference_scheduler_name_isValid;
}

qint32 OAICreateInferenceSchedulerRequest::getDataDelayOffsetInMinutes() const {
    return m_data_delay_offset_in_minutes;
}
void OAICreateInferenceSchedulerRequest::setDataDelayOffsetInMinutes(const qint32 &data_delay_offset_in_minutes) {
    m_data_delay_offset_in_minutes = data_delay_offset_in_minutes;
    m_data_delay_offset_in_minutes_isSet = true;
}

bool OAICreateInferenceSchedulerRequest::is_data_delay_offset_in_minutes_Set() const{
    return m_data_delay_offset_in_minutes_isSet;
}

bool OAICreateInferenceSchedulerRequest::is_data_delay_offset_in_minutes_Valid() const{
    return m_data_delay_offset_in_minutes_isValid;
}

OAIDataUploadFrequency OAICreateInferenceSchedulerRequest::getDataUploadFrequency() const {
    return m_data_upload_frequency;
}
void OAICreateInferenceSchedulerRequest::setDataUploadFrequency(const OAIDataUploadFrequency &data_upload_frequency) {
    m_data_upload_frequency = data_upload_frequency;
    m_data_upload_frequency_isSet = true;
}

bool OAICreateInferenceSchedulerRequest::is_data_upload_frequency_Set() const{
    return m_data_upload_frequency_isSet;
}

bool OAICreateInferenceSchedulerRequest::is_data_upload_frequency_Valid() const{
    return m_data_upload_frequency_isValid;
}

OAICreateInferenceSchedulerRequest_DataInputConfiguration OAICreateInferenceSchedulerRequest::getDataInputConfiguration() const {
    return m_data_input_configuration;
}
void OAICreateInferenceSchedulerRequest::setDataInputConfiguration(const OAICreateInferenceSchedulerRequest_DataInputConfiguration &data_input_configuration) {
    m_data_input_configuration = data_input_configuration;
    m_data_input_configuration_isSet = true;
}

bool OAICreateInferenceSchedulerRequest::is_data_input_configuration_Set() const{
    return m_data_input_configuration_isSet;
}

bool OAICreateInferenceSchedulerRequest::is_data_input_configuration_Valid() const{
    return m_data_input_configuration_isValid;
}

OAICreateInferenceSchedulerRequest_DataOutputConfiguration OAICreateInferenceSchedulerRequest::getDataOutputConfiguration() const {
    return m_data_output_configuration;
}
void OAICreateInferenceSchedulerRequest::setDataOutputConfiguration(const OAICreateInferenceSchedulerRequest_DataOutputConfiguration &data_output_configuration) {
    m_data_output_configuration = data_output_configuration;
    m_data_output_configuration_isSet = true;
}

bool OAICreateInferenceSchedulerRequest::is_data_output_configuration_Set() const{
    return m_data_output_configuration_isSet;
}

bool OAICreateInferenceSchedulerRequest::is_data_output_configuration_Valid() const{
    return m_data_output_configuration_isValid;
}

QString OAICreateInferenceSchedulerRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateInferenceSchedulerRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateInferenceSchedulerRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateInferenceSchedulerRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAICreateInferenceSchedulerRequest::getServerSideKmsKeyId() const {
    return m_server_side_kms_key_id;
}
void OAICreateInferenceSchedulerRequest::setServerSideKmsKeyId(const QString &server_side_kms_key_id) {
    m_server_side_kms_key_id = server_side_kms_key_id;
    m_server_side_kms_key_id_isSet = true;
}

bool OAICreateInferenceSchedulerRequest::is_server_side_kms_key_id_Set() const{
    return m_server_side_kms_key_id_isSet;
}

bool OAICreateInferenceSchedulerRequest::is_server_side_kms_key_id_Valid() const{
    return m_server_side_kms_key_id_isValid;
}

QString OAICreateInferenceSchedulerRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateInferenceSchedulerRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateInferenceSchedulerRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateInferenceSchedulerRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList OAICreateInferenceSchedulerRequest::getTags() const {
    return m_tags;
}
void OAICreateInferenceSchedulerRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateInferenceSchedulerRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateInferenceSchedulerRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateInferenceSchedulerRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_scheduler_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_delay_offset_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_upload_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_input_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_output_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInferenceSchedulerRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_name_isValid && m_inference_scheduler_name_isValid && m_data_upload_frequency_isValid && m_data_input_configuration_isValid && m_data_output_configuration_isValid && m_role_arn_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
