/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISensorStatisticsSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISensorStatisticsSummary::OAISensorStatisticsSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISensorStatisticsSummary::OAISensorStatisticsSummary() {
    this->initializeModel();
}

OAISensorStatisticsSummary::~OAISensorStatisticsSummary() {}

void OAISensorStatisticsSummary::initializeModel() {

    m_component_name_isSet = false;
    m_component_name_isValid = false;

    m_sensor_name_isSet = false;
    m_sensor_name_isValid = false;

    m_data_exists_isSet = false;
    m_data_exists_isValid = false;

    m_missing_values_isSet = false;
    m_missing_values_isValid = false;

    m_invalid_values_isSet = false;
    m_invalid_values_isValid = false;

    m_invalid_date_entries_isSet = false;
    m_invalid_date_entries_isValid = false;

    m_duplicate_timestamps_isSet = false;
    m_duplicate_timestamps_isValid = false;

    m_categorical_values_isSet = false;
    m_categorical_values_isValid = false;

    m_multiple_operating_modes_isSet = false;
    m_multiple_operating_modes_isValid = false;

    m_large_timestamp_gaps_isSet = false;
    m_large_timestamp_gaps_isValid = false;

    m_monotonic_values_isSet = false;
    m_monotonic_values_isValid = false;

    m_data_start_time_isSet = false;
    m_data_start_time_isValid = false;

    m_data_end_time_isSet = false;
    m_data_end_time_isValid = false;
}

void OAISensorStatisticsSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISensorStatisticsSummary::fromJsonObject(QJsonObject json) {

    m_component_name_isValid = ::OpenAPI::fromJsonValue(m_component_name, json[QString("ComponentName")]);
    m_component_name_isSet = !json[QString("ComponentName")].isNull() && m_component_name_isValid;

    m_sensor_name_isValid = ::OpenAPI::fromJsonValue(m_sensor_name, json[QString("SensorName")]);
    m_sensor_name_isSet = !json[QString("SensorName")].isNull() && m_sensor_name_isValid;

    m_data_exists_isValid = ::OpenAPI::fromJsonValue(m_data_exists, json[QString("DataExists")]);
    m_data_exists_isSet = !json[QString("DataExists")].isNull() && m_data_exists_isValid;

    m_missing_values_isValid = ::OpenAPI::fromJsonValue(m_missing_values, json[QString("MissingValues")]);
    m_missing_values_isSet = !json[QString("MissingValues")].isNull() && m_missing_values_isValid;

    m_invalid_values_isValid = ::OpenAPI::fromJsonValue(m_invalid_values, json[QString("InvalidValues")]);
    m_invalid_values_isSet = !json[QString("InvalidValues")].isNull() && m_invalid_values_isValid;

    m_invalid_date_entries_isValid = ::OpenAPI::fromJsonValue(m_invalid_date_entries, json[QString("InvalidDateEntries")]);
    m_invalid_date_entries_isSet = !json[QString("InvalidDateEntries")].isNull() && m_invalid_date_entries_isValid;

    m_duplicate_timestamps_isValid = ::OpenAPI::fromJsonValue(m_duplicate_timestamps, json[QString("DuplicateTimestamps")]);
    m_duplicate_timestamps_isSet = !json[QString("DuplicateTimestamps")].isNull() && m_duplicate_timestamps_isValid;

    m_categorical_values_isValid = ::OpenAPI::fromJsonValue(m_categorical_values, json[QString("CategoricalValues")]);
    m_categorical_values_isSet = !json[QString("CategoricalValues")].isNull() && m_categorical_values_isValid;

    m_multiple_operating_modes_isValid = ::OpenAPI::fromJsonValue(m_multiple_operating_modes, json[QString("MultipleOperatingModes")]);
    m_multiple_operating_modes_isSet = !json[QString("MultipleOperatingModes")].isNull() && m_multiple_operating_modes_isValid;

    m_large_timestamp_gaps_isValid = ::OpenAPI::fromJsonValue(m_large_timestamp_gaps, json[QString("LargeTimestampGaps")]);
    m_large_timestamp_gaps_isSet = !json[QString("LargeTimestampGaps")].isNull() && m_large_timestamp_gaps_isValid;

    m_monotonic_values_isValid = ::OpenAPI::fromJsonValue(m_monotonic_values, json[QString("MonotonicValues")]);
    m_monotonic_values_isSet = !json[QString("MonotonicValues")].isNull() && m_monotonic_values_isValid;

    m_data_start_time_isValid = ::OpenAPI::fromJsonValue(m_data_start_time, json[QString("DataStartTime")]);
    m_data_start_time_isSet = !json[QString("DataStartTime")].isNull() && m_data_start_time_isValid;

    m_data_end_time_isValid = ::OpenAPI::fromJsonValue(m_data_end_time, json[QString("DataEndTime")]);
    m_data_end_time_isSet = !json[QString("DataEndTime")].isNull() && m_data_end_time_isValid;
}

QString OAISensorStatisticsSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISensorStatisticsSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_component_name_isSet) {
        obj.insert(QString("ComponentName"), ::OpenAPI::toJsonValue(m_component_name));
    }
    if (m_sensor_name_isSet) {
        obj.insert(QString("SensorName"), ::OpenAPI::toJsonValue(m_sensor_name));
    }
    if (m_data_exists_isSet) {
        obj.insert(QString("DataExists"), ::OpenAPI::toJsonValue(m_data_exists));
    }
    if (m_missing_values.isSet()) {
        obj.insert(QString("MissingValues"), ::OpenAPI::toJsonValue(m_missing_values));
    }
    if (m_invalid_values.isSet()) {
        obj.insert(QString("InvalidValues"), ::OpenAPI::toJsonValue(m_invalid_values));
    }
    if (m_invalid_date_entries.isSet()) {
        obj.insert(QString("InvalidDateEntries"), ::OpenAPI::toJsonValue(m_invalid_date_entries));
    }
    if (m_duplicate_timestamps.isSet()) {
        obj.insert(QString("DuplicateTimestamps"), ::OpenAPI::toJsonValue(m_duplicate_timestamps));
    }
    if (m_categorical_values.isSet()) {
        obj.insert(QString("CategoricalValues"), ::OpenAPI::toJsonValue(m_categorical_values));
    }
    if (m_multiple_operating_modes.isSet()) {
        obj.insert(QString("MultipleOperatingModes"), ::OpenAPI::toJsonValue(m_multiple_operating_modes));
    }
    if (m_large_timestamp_gaps.isSet()) {
        obj.insert(QString("LargeTimestampGaps"), ::OpenAPI::toJsonValue(m_large_timestamp_gaps));
    }
    if (m_monotonic_values.isSet()) {
        obj.insert(QString("MonotonicValues"), ::OpenAPI::toJsonValue(m_monotonic_values));
    }
    if (m_data_start_time_isSet) {
        obj.insert(QString("DataStartTime"), ::OpenAPI::toJsonValue(m_data_start_time));
    }
    if (m_data_end_time_isSet) {
        obj.insert(QString("DataEndTime"), ::OpenAPI::toJsonValue(m_data_end_time));
    }
    return obj;
}

QString OAISensorStatisticsSummary::getComponentName() const {
    return m_component_name;
}
void OAISensorStatisticsSummary::setComponentName(const QString &component_name) {
    m_component_name = component_name;
    m_component_name_isSet = true;
}

bool OAISensorStatisticsSummary::is_component_name_Set() const{
    return m_component_name_isSet;
}

bool OAISensorStatisticsSummary::is_component_name_Valid() const{
    return m_component_name_isValid;
}

QString OAISensorStatisticsSummary::getSensorName() const {
    return m_sensor_name;
}
void OAISensorStatisticsSummary::setSensorName(const QString &sensor_name) {
    m_sensor_name = sensor_name;
    m_sensor_name_isSet = true;
}

bool OAISensorStatisticsSummary::is_sensor_name_Set() const{
    return m_sensor_name_isSet;
}

bool OAISensorStatisticsSummary::is_sensor_name_Valid() const{
    return m_sensor_name_isValid;
}

bool OAISensorStatisticsSummary::getDataExists() const {
    return m_data_exists;
}
void OAISensorStatisticsSummary::setDataExists(const bool &data_exists) {
    m_data_exists = data_exists;
    m_data_exists_isSet = true;
}

bool OAISensorStatisticsSummary::is_data_exists_Set() const{
    return m_data_exists_isSet;
}

bool OAISensorStatisticsSummary::is_data_exists_Valid() const{
    return m_data_exists_isValid;
}

OAISensorStatisticsSummary_MissingValues OAISensorStatisticsSummary::getMissingValues() const {
    return m_missing_values;
}
void OAISensorStatisticsSummary::setMissingValues(const OAISensorStatisticsSummary_MissingValues &missing_values) {
    m_missing_values = missing_values;
    m_missing_values_isSet = true;
}

bool OAISensorStatisticsSummary::is_missing_values_Set() const{
    return m_missing_values_isSet;
}

bool OAISensorStatisticsSummary::is_missing_values_Valid() const{
    return m_missing_values_isValid;
}

OAISensorStatisticsSummary_InvalidValues OAISensorStatisticsSummary::getInvalidValues() const {
    return m_invalid_values;
}
void OAISensorStatisticsSummary::setInvalidValues(const OAISensorStatisticsSummary_InvalidValues &invalid_values) {
    m_invalid_values = invalid_values;
    m_invalid_values_isSet = true;
}

bool OAISensorStatisticsSummary::is_invalid_values_Set() const{
    return m_invalid_values_isSet;
}

bool OAISensorStatisticsSummary::is_invalid_values_Valid() const{
    return m_invalid_values_isValid;
}

OAISensorStatisticsSummary_InvalidDateEntries OAISensorStatisticsSummary::getInvalidDateEntries() const {
    return m_invalid_date_entries;
}
void OAISensorStatisticsSummary::setInvalidDateEntries(const OAISensorStatisticsSummary_InvalidDateEntries &invalid_date_entries) {
    m_invalid_date_entries = invalid_date_entries;
    m_invalid_date_entries_isSet = true;
}

bool OAISensorStatisticsSummary::is_invalid_date_entries_Set() const{
    return m_invalid_date_entries_isSet;
}

bool OAISensorStatisticsSummary::is_invalid_date_entries_Valid() const{
    return m_invalid_date_entries_isValid;
}

OAISensorStatisticsSummary_DuplicateTimestamps OAISensorStatisticsSummary::getDuplicateTimestamps() const {
    return m_duplicate_timestamps;
}
void OAISensorStatisticsSummary::setDuplicateTimestamps(const OAISensorStatisticsSummary_DuplicateTimestamps &duplicate_timestamps) {
    m_duplicate_timestamps = duplicate_timestamps;
    m_duplicate_timestamps_isSet = true;
}

bool OAISensorStatisticsSummary::is_duplicate_timestamps_Set() const{
    return m_duplicate_timestamps_isSet;
}

bool OAISensorStatisticsSummary::is_duplicate_timestamps_Valid() const{
    return m_duplicate_timestamps_isValid;
}

OAISensorStatisticsSummary_CategoricalValues OAISensorStatisticsSummary::getCategoricalValues() const {
    return m_categorical_values;
}
void OAISensorStatisticsSummary::setCategoricalValues(const OAISensorStatisticsSummary_CategoricalValues &categorical_values) {
    m_categorical_values = categorical_values;
    m_categorical_values_isSet = true;
}

bool OAISensorStatisticsSummary::is_categorical_values_Set() const{
    return m_categorical_values_isSet;
}

bool OAISensorStatisticsSummary::is_categorical_values_Valid() const{
    return m_categorical_values_isValid;
}

OAISensorStatisticsSummary_MultipleOperatingModes OAISensorStatisticsSummary::getMultipleOperatingModes() const {
    return m_multiple_operating_modes;
}
void OAISensorStatisticsSummary::setMultipleOperatingModes(const OAISensorStatisticsSummary_MultipleOperatingModes &multiple_operating_modes) {
    m_multiple_operating_modes = multiple_operating_modes;
    m_multiple_operating_modes_isSet = true;
}

bool OAISensorStatisticsSummary::is_multiple_operating_modes_Set() const{
    return m_multiple_operating_modes_isSet;
}

bool OAISensorStatisticsSummary::is_multiple_operating_modes_Valid() const{
    return m_multiple_operating_modes_isValid;
}

OAISensorStatisticsSummary_LargeTimestampGaps OAISensorStatisticsSummary::getLargeTimestampGaps() const {
    return m_large_timestamp_gaps;
}
void OAISensorStatisticsSummary::setLargeTimestampGaps(const OAISensorStatisticsSummary_LargeTimestampGaps &large_timestamp_gaps) {
    m_large_timestamp_gaps = large_timestamp_gaps;
    m_large_timestamp_gaps_isSet = true;
}

bool OAISensorStatisticsSummary::is_large_timestamp_gaps_Set() const{
    return m_large_timestamp_gaps_isSet;
}

bool OAISensorStatisticsSummary::is_large_timestamp_gaps_Valid() const{
    return m_large_timestamp_gaps_isValid;
}

OAISensorStatisticsSummary_MonotonicValues OAISensorStatisticsSummary::getMonotonicValues() const {
    return m_monotonic_values;
}
void OAISensorStatisticsSummary::setMonotonicValues(const OAISensorStatisticsSummary_MonotonicValues &monotonic_values) {
    m_monotonic_values = monotonic_values;
    m_monotonic_values_isSet = true;
}

bool OAISensorStatisticsSummary::is_monotonic_values_Set() const{
    return m_monotonic_values_isSet;
}

bool OAISensorStatisticsSummary::is_monotonic_values_Valid() const{
    return m_monotonic_values_isValid;
}

QDateTime OAISensorStatisticsSummary::getDataStartTime() const {
    return m_data_start_time;
}
void OAISensorStatisticsSummary::setDataStartTime(const QDateTime &data_start_time) {
    m_data_start_time = data_start_time;
    m_data_start_time_isSet = true;
}

bool OAISensorStatisticsSummary::is_data_start_time_Set() const{
    return m_data_start_time_isSet;
}

bool OAISensorStatisticsSummary::is_data_start_time_Valid() const{
    return m_data_start_time_isValid;
}

QDateTime OAISensorStatisticsSummary::getDataEndTime() const {
    return m_data_end_time;
}
void OAISensorStatisticsSummary::setDataEndTime(const QDateTime &data_end_time) {
    m_data_end_time = data_end_time;
    m_data_end_time_isSet = true;
}

bool OAISensorStatisticsSummary::is_data_end_time_Set() const{
    return m_data_end_time_isSet;
}

bool OAISensorStatisticsSummary::is_data_end_time_Valid() const{
    return m_data_end_time_isValid;
}

bool OAISensorStatisticsSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_exists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_date_entries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_timestamps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categorical_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_operating_modes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_timestamp_gaps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monotonic_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISensorStatisticsSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
