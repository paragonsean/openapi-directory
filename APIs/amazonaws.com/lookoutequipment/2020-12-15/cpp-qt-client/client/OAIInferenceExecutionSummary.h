/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInferenceExecutionSummary.h
 *
 * Contains information about the specific inference execution, including input and output data configuration, inference scheduling information, status, and so on. 
 */

#ifndef OAIInferenceExecutionSummary_H
#define OAIInferenceExecutionSummary_H

#include <QJsonObject>

#include "OAIDescribeInferenceSchedulerResponse_DataInputConfiguration.h"
#include "OAIInferenceExecutionStatus.h"
#include "OAIInferenceExecutionSummary_CustomerResultObject.h"
#include "OAIInferenceExecutionSummary_DataOutputConfiguration.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeInferenceSchedulerResponse_DataInputConfiguration;
class OAIInferenceExecutionSummary_DataOutputConfiguration;
class OAIInferenceExecutionSummary_CustomerResultObject;

class OAIInferenceExecutionSummary : public OAIObject {
public:
    OAIInferenceExecutionSummary();
    OAIInferenceExecutionSummary(QString json);
    ~OAIInferenceExecutionSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getModelName() const;
    void setModelName(const QString &model_name);
    bool is_model_name_Set() const;
    bool is_model_name_Valid() const;

    QString getModelArn() const;
    void setModelArn(const QString &model_arn);
    bool is_model_arn_Set() const;
    bool is_model_arn_Valid() const;

    QString getInferenceSchedulerName() const;
    void setInferenceSchedulerName(const QString &inference_scheduler_name);
    bool is_inference_scheduler_name_Set() const;
    bool is_inference_scheduler_name_Valid() const;

    QString getInferenceSchedulerArn() const;
    void setInferenceSchedulerArn(const QString &inference_scheduler_arn);
    bool is_inference_scheduler_arn_Set() const;
    bool is_inference_scheduler_arn_Valid() const;

    QDateTime getScheduledStartTime() const;
    void setScheduledStartTime(const QDateTime &scheduled_start_time);
    bool is_scheduled_start_time_Set() const;
    bool is_scheduled_start_time_Valid() const;

    QDateTime getDataStartTime() const;
    void setDataStartTime(const QDateTime &data_start_time);
    bool is_data_start_time_Set() const;
    bool is_data_start_time_Valid() const;

    QDateTime getDataEndTime() const;
    void setDataEndTime(const QDateTime &data_end_time);
    bool is_data_end_time_Set() const;
    bool is_data_end_time_Valid() const;

    OAIDescribeInferenceSchedulerResponse_DataInputConfiguration getDataInputConfiguration() const;
    void setDataInputConfiguration(const OAIDescribeInferenceSchedulerResponse_DataInputConfiguration &data_input_configuration);
    bool is_data_input_configuration_Set() const;
    bool is_data_input_configuration_Valid() const;

    OAIInferenceExecutionSummary_DataOutputConfiguration getDataOutputConfiguration() const;
    void setDataOutputConfiguration(const OAIInferenceExecutionSummary_DataOutputConfiguration &data_output_configuration);
    bool is_data_output_configuration_Set() const;
    bool is_data_output_configuration_Valid() const;

    OAIInferenceExecutionSummary_CustomerResultObject getCustomerResultObject() const;
    void setCustomerResultObject(const OAIInferenceExecutionSummary_CustomerResultObject &customer_result_object);
    bool is_customer_result_object_Set() const;
    bool is_customer_result_object_Valid() const;

    OAIInferenceExecutionStatus getStatus() const;
    void setStatus(const OAIInferenceExecutionStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getFailedReason() const;
    void setFailedReason(const QString &failed_reason);
    bool is_failed_reason_Set() const;
    bool is_failed_reason_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_model_name;
    bool m_model_name_isSet;
    bool m_model_name_isValid;

    QString m_model_arn;
    bool m_model_arn_isSet;
    bool m_model_arn_isValid;

    QString m_inference_scheduler_name;
    bool m_inference_scheduler_name_isSet;
    bool m_inference_scheduler_name_isValid;

    QString m_inference_scheduler_arn;
    bool m_inference_scheduler_arn_isSet;
    bool m_inference_scheduler_arn_isValid;

    QDateTime m_scheduled_start_time;
    bool m_scheduled_start_time_isSet;
    bool m_scheduled_start_time_isValid;

    QDateTime m_data_start_time;
    bool m_data_start_time_isSet;
    bool m_data_start_time_isValid;

    QDateTime m_data_end_time;
    bool m_data_end_time_isSet;
    bool m_data_end_time_isValid;

    OAIDescribeInferenceSchedulerResponse_DataInputConfiguration m_data_input_configuration;
    bool m_data_input_configuration_isSet;
    bool m_data_input_configuration_isValid;

    OAIInferenceExecutionSummary_DataOutputConfiguration m_data_output_configuration;
    bool m_data_output_configuration_isSet;
    bool m_data_output_configuration_isValid;

    OAIInferenceExecutionSummary_CustomerResultObject m_customer_result_object;
    bool m_customer_result_object_isSet;
    bool m_customer_result_object_isValid;

    OAIInferenceExecutionStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_failed_reason;
    bool m_failed_reason_isSet;
    bool m_failed_reason_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInferenceExecutionSummary)

#endif // OAIInferenceExecutionSummary_H
