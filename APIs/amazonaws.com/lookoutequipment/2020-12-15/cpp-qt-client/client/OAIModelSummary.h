/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIModelSummary.h
 *
 * Provides information about the specified ML model, including dataset and model names and ARNs, as well as status. 
 */

#ifndef OAIModelSummary_H
#define OAIModelSummary_H

#include <QJsonObject>

#include "OAIModelStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIModelSummary : public OAIObject {
public:
    OAIModelSummary();
    OAIModelSummary(QString json);
    ~OAIModelSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getModelName() const;
    void setModelName(const QString &model_name);
    bool is_model_name_Set() const;
    bool is_model_name_Valid() const;

    QString getModelArn() const;
    void setModelArn(const QString &model_arn);
    bool is_model_arn_Set() const;
    bool is_model_arn_Valid() const;

    QString getDatasetName() const;
    void setDatasetName(const QString &dataset_name);
    bool is_dataset_name_Set() const;
    bool is_dataset_name_Valid() const;

    QString getDatasetArn() const;
    void setDatasetArn(const QString &dataset_arn);
    bool is_dataset_arn_Set() const;
    bool is_dataset_arn_Valid() const;

    OAIModelStatus getStatus() const;
    void setStatus(const OAIModelStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    qint32 getActiveModelVersion() const;
    void setActiveModelVersion(const qint32 &active_model_version);
    bool is_active_model_version_Set() const;
    bool is_active_model_version_Valid() const;

    QString getActiveModelVersionArn() const;
    void setActiveModelVersionArn(const QString &active_model_version_arn);
    bool is_active_model_version_arn_Set() const;
    bool is_active_model_version_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_model_name;
    bool m_model_name_isSet;
    bool m_model_name_isValid;

    QString m_model_arn;
    bool m_model_arn_isSet;
    bool m_model_arn_isValid;

    QString m_dataset_name;
    bool m_dataset_name_isSet;
    bool m_dataset_name_isValid;

    QString m_dataset_arn;
    bool m_dataset_arn_isSet;
    bool m_dataset_arn_isValid;

    OAIModelStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    qint32 m_active_model_version;
    bool m_active_model_version_isSet;
    bool m_active_model_version_isValid;

    QString m_active_model_version_arn;
    bool m_active_model_version_arn_isSet;
    bool m_active_model_version_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIModelSummary)

#endif // OAIModelSummary_H
