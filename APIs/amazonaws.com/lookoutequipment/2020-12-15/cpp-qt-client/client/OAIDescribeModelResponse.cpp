/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeModelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeModelResponse::OAIDescribeModelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeModelResponse::OAIDescribeModelResponse() {
    this->initializeModel();
}

OAIDescribeModelResponse::~OAIDescribeModelResponse() {}

void OAIDescribeModelResponse::initializeModel() {

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_model_arn_isSet = false;
    m_model_arn_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_dataset_arn_isSet = false;
    m_dataset_arn_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_labels_input_configuration_isSet = false;
    m_labels_input_configuration_isValid = false;

    m_training_data_start_time_isSet = false;
    m_training_data_start_time_isValid = false;

    m_training_data_end_time_isSet = false;
    m_training_data_end_time_isValid = false;

    m_evaluation_data_start_time_isSet = false;
    m_evaluation_data_start_time_isValid = false;

    m_evaluation_data_end_time_isSet = false;
    m_evaluation_data_end_time_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_data_pre_processing_configuration_isSet = false;
    m_data_pre_processing_configuration_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_training_execution_start_time_isSet = false;
    m_training_execution_start_time_isValid = false;

    m_training_execution_end_time_isSet = false;
    m_training_execution_end_time_isValid = false;

    m_failed_reason_isSet = false;
    m_failed_reason_isValid = false;

    m_model_metrics_isSet = false;
    m_model_metrics_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_server_side_kms_key_id_isSet = false;
    m_server_side_kms_key_id_isValid = false;

    m_off_condition_isSet = false;
    m_off_condition_isValid = false;

    m_source_model_version_arn_isSet = false;
    m_source_model_version_arn_isValid = false;

    m_import_job_start_time_isSet = false;
    m_import_job_start_time_isValid = false;

    m_import_job_end_time_isSet = false;
    m_import_job_end_time_isValid = false;

    m_active_model_version_isSet = false;
    m_active_model_version_isValid = false;

    m_active_model_version_arn_isSet = false;
    m_active_model_version_arn_isValid = false;

    m_model_version_activated_at_isSet = false;
    m_model_version_activated_at_isValid = false;

    m_previous_active_model_version_isSet = false;
    m_previous_active_model_version_isValid = false;

    m_previous_active_model_version_arn_isSet = false;
    m_previous_active_model_version_arn_isValid = false;

    m_previous_model_version_activated_at_isSet = false;
    m_previous_model_version_activated_at_isValid = false;
}

void OAIDescribeModelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeModelResponse::fromJsonObject(QJsonObject json) {

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_model_arn_isValid = ::OpenAPI::fromJsonValue(m_model_arn, json[QString("ModelArn")]);
    m_model_arn_isSet = !json[QString("ModelArn")].isNull() && m_model_arn_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("DatasetName")]);
    m_dataset_name_isSet = !json[QString("DatasetName")].isNull() && m_dataset_name_isValid;

    m_dataset_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_arn, json[QString("DatasetArn")]);
    m_dataset_arn_isSet = !json[QString("DatasetArn")].isNull() && m_dataset_arn_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_labels_input_configuration_isValid = ::OpenAPI::fromJsonValue(m_labels_input_configuration, json[QString("LabelsInputConfiguration")]);
    m_labels_input_configuration_isSet = !json[QString("LabelsInputConfiguration")].isNull() && m_labels_input_configuration_isValid;

    m_training_data_start_time_isValid = ::OpenAPI::fromJsonValue(m_training_data_start_time, json[QString("TrainingDataStartTime")]);
    m_training_data_start_time_isSet = !json[QString("TrainingDataStartTime")].isNull() && m_training_data_start_time_isValid;

    m_training_data_end_time_isValid = ::OpenAPI::fromJsonValue(m_training_data_end_time, json[QString("TrainingDataEndTime")]);
    m_training_data_end_time_isSet = !json[QString("TrainingDataEndTime")].isNull() && m_training_data_end_time_isValid;

    m_evaluation_data_start_time_isValid = ::OpenAPI::fromJsonValue(m_evaluation_data_start_time, json[QString("EvaluationDataStartTime")]);
    m_evaluation_data_start_time_isSet = !json[QString("EvaluationDataStartTime")].isNull() && m_evaluation_data_start_time_isValid;

    m_evaluation_data_end_time_isValid = ::OpenAPI::fromJsonValue(m_evaluation_data_end_time, json[QString("EvaluationDataEndTime")]);
    m_evaluation_data_end_time_isSet = !json[QString("EvaluationDataEndTime")].isNull() && m_evaluation_data_end_time_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_data_pre_processing_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_pre_processing_configuration, json[QString("DataPreProcessingConfiguration")]);
    m_data_pre_processing_configuration_isSet = !json[QString("DataPreProcessingConfiguration")].isNull() && m_data_pre_processing_configuration_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_training_execution_start_time_isValid = ::OpenAPI::fromJsonValue(m_training_execution_start_time, json[QString("TrainingExecutionStartTime")]);
    m_training_execution_start_time_isSet = !json[QString("TrainingExecutionStartTime")].isNull() && m_training_execution_start_time_isValid;

    m_training_execution_end_time_isValid = ::OpenAPI::fromJsonValue(m_training_execution_end_time, json[QString("TrainingExecutionEndTime")]);
    m_training_execution_end_time_isSet = !json[QString("TrainingExecutionEndTime")].isNull() && m_training_execution_end_time_isValid;

    m_failed_reason_isValid = ::OpenAPI::fromJsonValue(m_failed_reason, json[QString("FailedReason")]);
    m_failed_reason_isSet = !json[QString("FailedReason")].isNull() && m_failed_reason_isValid;

    m_model_metrics_isValid = ::OpenAPI::fromJsonValue(m_model_metrics, json[QString("ModelMetrics")]);
    m_model_metrics_isSet = !json[QString("ModelMetrics")].isNull() && m_model_metrics_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_server_side_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_server_side_kms_key_id, json[QString("ServerSideKmsKeyId")]);
    m_server_side_kms_key_id_isSet = !json[QString("ServerSideKmsKeyId")].isNull() && m_server_side_kms_key_id_isValid;

    m_off_condition_isValid = ::OpenAPI::fromJsonValue(m_off_condition, json[QString("OffCondition")]);
    m_off_condition_isSet = !json[QString("OffCondition")].isNull() && m_off_condition_isValid;

    m_source_model_version_arn_isValid = ::OpenAPI::fromJsonValue(m_source_model_version_arn, json[QString("SourceModelVersionArn")]);
    m_source_model_version_arn_isSet = !json[QString("SourceModelVersionArn")].isNull() && m_source_model_version_arn_isValid;

    m_import_job_start_time_isValid = ::OpenAPI::fromJsonValue(m_import_job_start_time, json[QString("ImportJobStartTime")]);
    m_import_job_start_time_isSet = !json[QString("ImportJobStartTime")].isNull() && m_import_job_start_time_isValid;

    m_import_job_end_time_isValid = ::OpenAPI::fromJsonValue(m_import_job_end_time, json[QString("ImportJobEndTime")]);
    m_import_job_end_time_isSet = !json[QString("ImportJobEndTime")].isNull() && m_import_job_end_time_isValid;

    m_active_model_version_isValid = ::OpenAPI::fromJsonValue(m_active_model_version, json[QString("ActiveModelVersion")]);
    m_active_model_version_isSet = !json[QString("ActiveModelVersion")].isNull() && m_active_model_version_isValid;

    m_active_model_version_arn_isValid = ::OpenAPI::fromJsonValue(m_active_model_version_arn, json[QString("ActiveModelVersionArn")]);
    m_active_model_version_arn_isSet = !json[QString("ActiveModelVersionArn")].isNull() && m_active_model_version_arn_isValid;

    m_model_version_activated_at_isValid = ::OpenAPI::fromJsonValue(m_model_version_activated_at, json[QString("ModelVersionActivatedAt")]);
    m_model_version_activated_at_isSet = !json[QString("ModelVersionActivatedAt")].isNull() && m_model_version_activated_at_isValid;

    m_previous_active_model_version_isValid = ::OpenAPI::fromJsonValue(m_previous_active_model_version, json[QString("PreviousActiveModelVersion")]);
    m_previous_active_model_version_isSet = !json[QString("PreviousActiveModelVersion")].isNull() && m_previous_active_model_version_isValid;

    m_previous_active_model_version_arn_isValid = ::OpenAPI::fromJsonValue(m_previous_active_model_version_arn, json[QString("PreviousActiveModelVersionArn")]);
    m_previous_active_model_version_arn_isSet = !json[QString("PreviousActiveModelVersionArn")].isNull() && m_previous_active_model_version_arn_isValid;

    m_previous_model_version_activated_at_isValid = ::OpenAPI::fromJsonValue(m_previous_model_version_activated_at, json[QString("PreviousModelVersionActivatedAt")]);
    m_previous_model_version_activated_at_isSet = !json[QString("PreviousModelVersionActivatedAt")].isNull() && m_previous_model_version_activated_at_isValid;
}

QString OAIDescribeModelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeModelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_model_arn_isSet) {
        obj.insert(QString("ModelArn"), ::OpenAPI::toJsonValue(m_model_arn));
    }
    if (m_dataset_name_isSet) {
        obj.insert(QString("DatasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_dataset_arn_isSet) {
        obj.insert(QString("DatasetArn"), ::OpenAPI::toJsonValue(m_dataset_arn));
    }
    if (m_schema_isSet) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_labels_input_configuration.isSet()) {
        obj.insert(QString("LabelsInputConfiguration"), ::OpenAPI::toJsonValue(m_labels_input_configuration));
    }
    if (m_training_data_start_time_isSet) {
        obj.insert(QString("TrainingDataStartTime"), ::OpenAPI::toJsonValue(m_training_data_start_time));
    }
    if (m_training_data_end_time_isSet) {
        obj.insert(QString("TrainingDataEndTime"), ::OpenAPI::toJsonValue(m_training_data_end_time));
    }
    if (m_evaluation_data_start_time_isSet) {
        obj.insert(QString("EvaluationDataStartTime"), ::OpenAPI::toJsonValue(m_evaluation_data_start_time));
    }
    if (m_evaluation_data_end_time_isSet) {
        obj.insert(QString("EvaluationDataEndTime"), ::OpenAPI::toJsonValue(m_evaluation_data_end_time));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_data_pre_processing_configuration.isSet()) {
        obj.insert(QString("DataPreProcessingConfiguration"), ::OpenAPI::toJsonValue(m_data_pre_processing_configuration));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_training_execution_start_time_isSet) {
        obj.insert(QString("TrainingExecutionStartTime"), ::OpenAPI::toJsonValue(m_training_execution_start_time));
    }
    if (m_training_execution_end_time_isSet) {
        obj.insert(QString("TrainingExecutionEndTime"), ::OpenAPI::toJsonValue(m_training_execution_end_time));
    }
    if (m_failed_reason_isSet) {
        obj.insert(QString("FailedReason"), ::OpenAPI::toJsonValue(m_failed_reason));
    }
    if (m_model_metrics_isSet) {
        obj.insert(QString("ModelMetrics"), ::OpenAPI::toJsonValue(m_model_metrics));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_server_side_kms_key_id_isSet) {
        obj.insert(QString("ServerSideKmsKeyId"), ::OpenAPI::toJsonValue(m_server_side_kms_key_id));
    }
    if (m_off_condition_isSet) {
        obj.insert(QString("OffCondition"), ::OpenAPI::toJsonValue(m_off_condition));
    }
    if (m_source_model_version_arn_isSet) {
        obj.insert(QString("SourceModelVersionArn"), ::OpenAPI::toJsonValue(m_source_model_version_arn));
    }
    if (m_import_job_start_time_isSet) {
        obj.insert(QString("ImportJobStartTime"), ::OpenAPI::toJsonValue(m_import_job_start_time));
    }
    if (m_import_job_end_time_isSet) {
        obj.insert(QString("ImportJobEndTime"), ::OpenAPI::toJsonValue(m_import_job_end_time));
    }
    if (m_active_model_version_isSet) {
        obj.insert(QString("ActiveModelVersion"), ::OpenAPI::toJsonValue(m_active_model_version));
    }
    if (m_active_model_version_arn_isSet) {
        obj.insert(QString("ActiveModelVersionArn"), ::OpenAPI::toJsonValue(m_active_model_version_arn));
    }
    if (m_model_version_activated_at_isSet) {
        obj.insert(QString("ModelVersionActivatedAt"), ::OpenAPI::toJsonValue(m_model_version_activated_at));
    }
    if (m_previous_active_model_version_isSet) {
        obj.insert(QString("PreviousActiveModelVersion"), ::OpenAPI::toJsonValue(m_previous_active_model_version));
    }
    if (m_previous_active_model_version_arn_isSet) {
        obj.insert(QString("PreviousActiveModelVersionArn"), ::OpenAPI::toJsonValue(m_previous_active_model_version_arn));
    }
    if (m_previous_model_version_activated_at_isSet) {
        obj.insert(QString("PreviousModelVersionActivatedAt"), ::OpenAPI::toJsonValue(m_previous_model_version_activated_at));
    }
    return obj;
}

QString OAIDescribeModelResponse::getModelName() const {
    return m_model_name;
}
void OAIDescribeModelResponse::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIDescribeModelResponse::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIDescribeModelResponse::is_model_name_Valid() const{
    return m_model_name_isValid;
}

QString OAIDescribeModelResponse::getModelArn() const {
    return m_model_arn;
}
void OAIDescribeModelResponse::setModelArn(const QString &model_arn) {
    m_model_arn = model_arn;
    m_model_arn_isSet = true;
}

bool OAIDescribeModelResponse::is_model_arn_Set() const{
    return m_model_arn_isSet;
}

bool OAIDescribeModelResponse::is_model_arn_Valid() const{
    return m_model_arn_isValid;
}

QString OAIDescribeModelResponse::getDatasetName() const {
    return m_dataset_name;
}
void OAIDescribeModelResponse::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIDescribeModelResponse::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIDescribeModelResponse::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

QString OAIDescribeModelResponse::getDatasetArn() const {
    return m_dataset_arn;
}
void OAIDescribeModelResponse::setDatasetArn(const QString &dataset_arn) {
    m_dataset_arn = dataset_arn;
    m_dataset_arn_isSet = true;
}

bool OAIDescribeModelResponse::is_dataset_arn_Set() const{
    return m_dataset_arn_isSet;
}

bool OAIDescribeModelResponse::is_dataset_arn_Valid() const{
    return m_dataset_arn_isValid;
}

QString OAIDescribeModelResponse::getSchema() const {
    return m_schema;
}
void OAIDescribeModelResponse::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIDescribeModelResponse::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIDescribeModelResponse::is_schema_Valid() const{
    return m_schema_isValid;
}

OAIDescribeModelResponse_LabelsInputConfiguration OAIDescribeModelResponse::getLabelsInputConfiguration() const {
    return m_labels_input_configuration;
}
void OAIDescribeModelResponse::setLabelsInputConfiguration(const OAIDescribeModelResponse_LabelsInputConfiguration &labels_input_configuration) {
    m_labels_input_configuration = labels_input_configuration;
    m_labels_input_configuration_isSet = true;
}

bool OAIDescribeModelResponse::is_labels_input_configuration_Set() const{
    return m_labels_input_configuration_isSet;
}

bool OAIDescribeModelResponse::is_labels_input_configuration_Valid() const{
    return m_labels_input_configuration_isValid;
}

QDateTime OAIDescribeModelResponse::getTrainingDataStartTime() const {
    return m_training_data_start_time;
}
void OAIDescribeModelResponse::setTrainingDataStartTime(const QDateTime &training_data_start_time) {
    m_training_data_start_time = training_data_start_time;
    m_training_data_start_time_isSet = true;
}

bool OAIDescribeModelResponse::is_training_data_start_time_Set() const{
    return m_training_data_start_time_isSet;
}

bool OAIDescribeModelResponse::is_training_data_start_time_Valid() const{
    return m_training_data_start_time_isValid;
}

QDateTime OAIDescribeModelResponse::getTrainingDataEndTime() const {
    return m_training_data_end_time;
}
void OAIDescribeModelResponse::setTrainingDataEndTime(const QDateTime &training_data_end_time) {
    m_training_data_end_time = training_data_end_time;
    m_training_data_end_time_isSet = true;
}

bool OAIDescribeModelResponse::is_training_data_end_time_Set() const{
    return m_training_data_end_time_isSet;
}

bool OAIDescribeModelResponse::is_training_data_end_time_Valid() const{
    return m_training_data_end_time_isValid;
}

QDateTime OAIDescribeModelResponse::getEvaluationDataStartTime() const {
    return m_evaluation_data_start_time;
}
void OAIDescribeModelResponse::setEvaluationDataStartTime(const QDateTime &evaluation_data_start_time) {
    m_evaluation_data_start_time = evaluation_data_start_time;
    m_evaluation_data_start_time_isSet = true;
}

bool OAIDescribeModelResponse::is_evaluation_data_start_time_Set() const{
    return m_evaluation_data_start_time_isSet;
}

bool OAIDescribeModelResponse::is_evaluation_data_start_time_Valid() const{
    return m_evaluation_data_start_time_isValid;
}

QDateTime OAIDescribeModelResponse::getEvaluationDataEndTime() const {
    return m_evaluation_data_end_time;
}
void OAIDescribeModelResponse::setEvaluationDataEndTime(const QDateTime &evaluation_data_end_time) {
    m_evaluation_data_end_time = evaluation_data_end_time;
    m_evaluation_data_end_time_isSet = true;
}

bool OAIDescribeModelResponse::is_evaluation_data_end_time_Set() const{
    return m_evaluation_data_end_time_isSet;
}

bool OAIDescribeModelResponse::is_evaluation_data_end_time_Valid() const{
    return m_evaluation_data_end_time_isValid;
}

QString OAIDescribeModelResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeModelResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeModelResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeModelResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAICreateModelRequest_DataPreProcessingConfiguration OAIDescribeModelResponse::getDataPreProcessingConfiguration() const {
    return m_data_pre_processing_configuration;
}
void OAIDescribeModelResponse::setDataPreProcessingConfiguration(const OAICreateModelRequest_DataPreProcessingConfiguration &data_pre_processing_configuration) {
    m_data_pre_processing_configuration = data_pre_processing_configuration;
    m_data_pre_processing_configuration_isSet = true;
}

bool OAIDescribeModelResponse::is_data_pre_processing_configuration_Set() const{
    return m_data_pre_processing_configuration_isSet;
}

bool OAIDescribeModelResponse::is_data_pre_processing_configuration_Valid() const{
    return m_data_pre_processing_configuration_isValid;
}

OAIModelStatus OAIDescribeModelResponse::getStatus() const {
    return m_status;
}
void OAIDescribeModelResponse::setStatus(const OAIModelStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeModelResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeModelResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeModelResponse::getTrainingExecutionStartTime() const {
    return m_training_execution_start_time;
}
void OAIDescribeModelResponse::setTrainingExecutionStartTime(const QDateTime &training_execution_start_time) {
    m_training_execution_start_time = training_execution_start_time;
    m_training_execution_start_time_isSet = true;
}

bool OAIDescribeModelResponse::is_training_execution_start_time_Set() const{
    return m_training_execution_start_time_isSet;
}

bool OAIDescribeModelResponse::is_training_execution_start_time_Valid() const{
    return m_training_execution_start_time_isValid;
}

QDateTime OAIDescribeModelResponse::getTrainingExecutionEndTime() const {
    return m_training_execution_end_time;
}
void OAIDescribeModelResponse::setTrainingExecutionEndTime(const QDateTime &training_execution_end_time) {
    m_training_execution_end_time = training_execution_end_time;
    m_training_execution_end_time_isSet = true;
}

bool OAIDescribeModelResponse::is_training_execution_end_time_Set() const{
    return m_training_execution_end_time_isSet;
}

bool OAIDescribeModelResponse::is_training_execution_end_time_Valid() const{
    return m_training_execution_end_time_isValid;
}

QString OAIDescribeModelResponse::getFailedReason() const {
    return m_failed_reason;
}
void OAIDescribeModelResponse::setFailedReason(const QString &failed_reason) {
    m_failed_reason = failed_reason;
    m_failed_reason_isSet = true;
}

bool OAIDescribeModelResponse::is_failed_reason_Set() const{
    return m_failed_reason_isSet;
}

bool OAIDescribeModelResponse::is_failed_reason_Valid() const{
    return m_failed_reason_isValid;
}

QString OAIDescribeModelResponse::getModelMetrics() const {
    return m_model_metrics;
}
void OAIDescribeModelResponse::setModelMetrics(const QString &model_metrics) {
    m_model_metrics = model_metrics;
    m_model_metrics_isSet = true;
}

bool OAIDescribeModelResponse::is_model_metrics_Set() const{
    return m_model_metrics_isSet;
}

bool OAIDescribeModelResponse::is_model_metrics_Valid() const{
    return m_model_metrics_isValid;
}

QDateTime OAIDescribeModelResponse::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDescribeModelResponse::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDescribeModelResponse::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDescribeModelResponse::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QDateTime OAIDescribeModelResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeModelResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeModelResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeModelResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDescribeModelResponse::getServerSideKmsKeyId() const {
    return m_server_side_kms_key_id;
}
void OAIDescribeModelResponse::setServerSideKmsKeyId(const QString &server_side_kms_key_id) {
    m_server_side_kms_key_id = server_side_kms_key_id;
    m_server_side_kms_key_id_isSet = true;
}

bool OAIDescribeModelResponse::is_server_side_kms_key_id_Set() const{
    return m_server_side_kms_key_id_isSet;
}

bool OAIDescribeModelResponse::is_server_side_kms_key_id_Valid() const{
    return m_server_side_kms_key_id_isValid;
}

QString OAIDescribeModelResponse::getOffCondition() const {
    return m_off_condition;
}
void OAIDescribeModelResponse::setOffCondition(const QString &off_condition) {
    m_off_condition = off_condition;
    m_off_condition_isSet = true;
}

bool OAIDescribeModelResponse::is_off_condition_Set() const{
    return m_off_condition_isSet;
}

bool OAIDescribeModelResponse::is_off_condition_Valid() const{
    return m_off_condition_isValid;
}

QString OAIDescribeModelResponse::getSourceModelVersionArn() const {
    return m_source_model_version_arn;
}
void OAIDescribeModelResponse::setSourceModelVersionArn(const QString &source_model_version_arn) {
    m_source_model_version_arn = source_model_version_arn;
    m_source_model_version_arn_isSet = true;
}

bool OAIDescribeModelResponse::is_source_model_version_arn_Set() const{
    return m_source_model_version_arn_isSet;
}

bool OAIDescribeModelResponse::is_source_model_version_arn_Valid() const{
    return m_source_model_version_arn_isValid;
}

QDateTime OAIDescribeModelResponse::getImportJobStartTime() const {
    return m_import_job_start_time;
}
void OAIDescribeModelResponse::setImportJobStartTime(const QDateTime &import_job_start_time) {
    m_import_job_start_time = import_job_start_time;
    m_import_job_start_time_isSet = true;
}

bool OAIDescribeModelResponse::is_import_job_start_time_Set() const{
    return m_import_job_start_time_isSet;
}

bool OAIDescribeModelResponse::is_import_job_start_time_Valid() const{
    return m_import_job_start_time_isValid;
}

QDateTime OAIDescribeModelResponse::getImportJobEndTime() const {
    return m_import_job_end_time;
}
void OAIDescribeModelResponse::setImportJobEndTime(const QDateTime &import_job_end_time) {
    m_import_job_end_time = import_job_end_time;
    m_import_job_end_time_isSet = true;
}

bool OAIDescribeModelResponse::is_import_job_end_time_Set() const{
    return m_import_job_end_time_isSet;
}

bool OAIDescribeModelResponse::is_import_job_end_time_Valid() const{
    return m_import_job_end_time_isValid;
}

qint32 OAIDescribeModelResponse::getActiveModelVersion() const {
    return m_active_model_version;
}
void OAIDescribeModelResponse::setActiveModelVersion(const qint32 &active_model_version) {
    m_active_model_version = active_model_version;
    m_active_model_version_isSet = true;
}

bool OAIDescribeModelResponse::is_active_model_version_Set() const{
    return m_active_model_version_isSet;
}

bool OAIDescribeModelResponse::is_active_model_version_Valid() const{
    return m_active_model_version_isValid;
}

QString OAIDescribeModelResponse::getActiveModelVersionArn() const {
    return m_active_model_version_arn;
}
void OAIDescribeModelResponse::setActiveModelVersionArn(const QString &active_model_version_arn) {
    m_active_model_version_arn = active_model_version_arn;
    m_active_model_version_arn_isSet = true;
}

bool OAIDescribeModelResponse::is_active_model_version_arn_Set() const{
    return m_active_model_version_arn_isSet;
}

bool OAIDescribeModelResponse::is_active_model_version_arn_Valid() const{
    return m_active_model_version_arn_isValid;
}

QDateTime OAIDescribeModelResponse::getModelVersionActivatedAt() const {
    return m_model_version_activated_at;
}
void OAIDescribeModelResponse::setModelVersionActivatedAt(const QDateTime &model_version_activated_at) {
    m_model_version_activated_at = model_version_activated_at;
    m_model_version_activated_at_isSet = true;
}

bool OAIDescribeModelResponse::is_model_version_activated_at_Set() const{
    return m_model_version_activated_at_isSet;
}

bool OAIDescribeModelResponse::is_model_version_activated_at_Valid() const{
    return m_model_version_activated_at_isValid;
}

qint32 OAIDescribeModelResponse::getPreviousActiveModelVersion() const {
    return m_previous_active_model_version;
}
void OAIDescribeModelResponse::setPreviousActiveModelVersion(const qint32 &previous_active_model_version) {
    m_previous_active_model_version = previous_active_model_version;
    m_previous_active_model_version_isSet = true;
}

bool OAIDescribeModelResponse::is_previous_active_model_version_Set() const{
    return m_previous_active_model_version_isSet;
}

bool OAIDescribeModelResponse::is_previous_active_model_version_Valid() const{
    return m_previous_active_model_version_isValid;
}

QString OAIDescribeModelResponse::getPreviousActiveModelVersionArn() const {
    return m_previous_active_model_version_arn;
}
void OAIDescribeModelResponse::setPreviousActiveModelVersionArn(const QString &previous_active_model_version_arn) {
    m_previous_active_model_version_arn = previous_active_model_version_arn;
    m_previous_active_model_version_arn_isSet = true;
}

bool OAIDescribeModelResponse::is_previous_active_model_version_arn_Set() const{
    return m_previous_active_model_version_arn_isSet;
}

bool OAIDescribeModelResponse::is_previous_active_model_version_arn_Valid() const{
    return m_previous_active_model_version_arn_isValid;
}

QDateTime OAIDescribeModelResponse::getPreviousModelVersionActivatedAt() const {
    return m_previous_model_version_activated_at;
}
void OAIDescribeModelResponse::setPreviousModelVersionActivatedAt(const QDateTime &previous_model_version_activated_at) {
    m_previous_model_version_activated_at = previous_model_version_activated_at;
    m_previous_model_version_activated_at_isSet = true;
}

bool OAIDescribeModelResponse::is_previous_model_version_activated_at_Set() const{
    return m_previous_model_version_activated_at_isSet;
}

bool OAIDescribeModelResponse::is_previous_model_version_activated_at_Valid() const{
    return m_previous_model_version_activated_at_isValid;
}

bool OAIDescribeModelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_input_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_data_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_data_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_data_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_data_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pre_processing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_execution_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_execution_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_metrics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_off_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_model_version_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_job_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_job_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_model_version_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version_activated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_active_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_active_model_version_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_model_version_activated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeModelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
