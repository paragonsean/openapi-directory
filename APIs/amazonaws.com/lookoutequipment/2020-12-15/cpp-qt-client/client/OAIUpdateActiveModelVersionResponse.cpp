/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateActiveModelVersionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateActiveModelVersionResponse::OAIUpdateActiveModelVersionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateActiveModelVersionResponse::OAIUpdateActiveModelVersionResponse() {
    this->initializeModel();
}

OAIUpdateActiveModelVersionResponse::~OAIUpdateActiveModelVersionResponse() {}

void OAIUpdateActiveModelVersionResponse::initializeModel() {

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_model_arn_isSet = false;
    m_model_arn_isValid = false;

    m_current_active_version_isSet = false;
    m_current_active_version_isValid = false;

    m_previous_active_version_isSet = false;
    m_previous_active_version_isValid = false;

    m_current_active_version_arn_isSet = false;
    m_current_active_version_arn_isValid = false;

    m_previous_active_version_arn_isSet = false;
    m_previous_active_version_arn_isValid = false;
}

void OAIUpdateActiveModelVersionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateActiveModelVersionResponse::fromJsonObject(QJsonObject json) {

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_model_arn_isValid = ::OpenAPI::fromJsonValue(m_model_arn, json[QString("ModelArn")]);
    m_model_arn_isSet = !json[QString("ModelArn")].isNull() && m_model_arn_isValid;

    m_current_active_version_isValid = ::OpenAPI::fromJsonValue(m_current_active_version, json[QString("CurrentActiveVersion")]);
    m_current_active_version_isSet = !json[QString("CurrentActiveVersion")].isNull() && m_current_active_version_isValid;

    m_previous_active_version_isValid = ::OpenAPI::fromJsonValue(m_previous_active_version, json[QString("PreviousActiveVersion")]);
    m_previous_active_version_isSet = !json[QString("PreviousActiveVersion")].isNull() && m_previous_active_version_isValid;

    m_current_active_version_arn_isValid = ::OpenAPI::fromJsonValue(m_current_active_version_arn, json[QString("CurrentActiveVersionArn")]);
    m_current_active_version_arn_isSet = !json[QString("CurrentActiveVersionArn")].isNull() && m_current_active_version_arn_isValid;

    m_previous_active_version_arn_isValid = ::OpenAPI::fromJsonValue(m_previous_active_version_arn, json[QString("PreviousActiveVersionArn")]);
    m_previous_active_version_arn_isSet = !json[QString("PreviousActiveVersionArn")].isNull() && m_previous_active_version_arn_isValid;
}

QString OAIUpdateActiveModelVersionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateActiveModelVersionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_model_arn_isSet) {
        obj.insert(QString("ModelArn"), ::OpenAPI::toJsonValue(m_model_arn));
    }
    if (m_current_active_version_isSet) {
        obj.insert(QString("CurrentActiveVersion"), ::OpenAPI::toJsonValue(m_current_active_version));
    }
    if (m_previous_active_version_isSet) {
        obj.insert(QString("PreviousActiveVersion"), ::OpenAPI::toJsonValue(m_previous_active_version));
    }
    if (m_current_active_version_arn_isSet) {
        obj.insert(QString("CurrentActiveVersionArn"), ::OpenAPI::toJsonValue(m_current_active_version_arn));
    }
    if (m_previous_active_version_arn_isSet) {
        obj.insert(QString("PreviousActiveVersionArn"), ::OpenAPI::toJsonValue(m_previous_active_version_arn));
    }
    return obj;
}

QString OAIUpdateActiveModelVersionResponse::getModelName() const {
    return m_model_name;
}
void OAIUpdateActiveModelVersionResponse::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIUpdateActiveModelVersionResponse::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIUpdateActiveModelVersionResponse::is_model_name_Valid() const{
    return m_model_name_isValid;
}

QString OAIUpdateActiveModelVersionResponse::getModelArn() const {
    return m_model_arn;
}
void OAIUpdateActiveModelVersionResponse::setModelArn(const QString &model_arn) {
    m_model_arn = model_arn;
    m_model_arn_isSet = true;
}

bool OAIUpdateActiveModelVersionResponse::is_model_arn_Set() const{
    return m_model_arn_isSet;
}

bool OAIUpdateActiveModelVersionResponse::is_model_arn_Valid() const{
    return m_model_arn_isValid;
}

qint32 OAIUpdateActiveModelVersionResponse::getCurrentActiveVersion() const {
    return m_current_active_version;
}
void OAIUpdateActiveModelVersionResponse::setCurrentActiveVersion(const qint32 &current_active_version) {
    m_current_active_version = current_active_version;
    m_current_active_version_isSet = true;
}

bool OAIUpdateActiveModelVersionResponse::is_current_active_version_Set() const{
    return m_current_active_version_isSet;
}

bool OAIUpdateActiveModelVersionResponse::is_current_active_version_Valid() const{
    return m_current_active_version_isValid;
}

qint32 OAIUpdateActiveModelVersionResponse::getPreviousActiveVersion() const {
    return m_previous_active_version;
}
void OAIUpdateActiveModelVersionResponse::setPreviousActiveVersion(const qint32 &previous_active_version) {
    m_previous_active_version = previous_active_version;
    m_previous_active_version_isSet = true;
}

bool OAIUpdateActiveModelVersionResponse::is_previous_active_version_Set() const{
    return m_previous_active_version_isSet;
}

bool OAIUpdateActiveModelVersionResponse::is_previous_active_version_Valid() const{
    return m_previous_active_version_isValid;
}

QString OAIUpdateActiveModelVersionResponse::getCurrentActiveVersionArn() const {
    return m_current_active_version_arn;
}
void OAIUpdateActiveModelVersionResponse::setCurrentActiveVersionArn(const QString &current_active_version_arn) {
    m_current_active_version_arn = current_active_version_arn;
    m_current_active_version_arn_isSet = true;
}

bool OAIUpdateActiveModelVersionResponse::is_current_active_version_arn_Set() const{
    return m_current_active_version_arn_isSet;
}

bool OAIUpdateActiveModelVersionResponse::is_current_active_version_arn_Valid() const{
    return m_current_active_version_arn_isValid;
}

QString OAIUpdateActiveModelVersionResponse::getPreviousActiveVersionArn() const {
    return m_previous_active_version_arn;
}
void OAIUpdateActiveModelVersionResponse::setPreviousActiveVersionArn(const QString &previous_active_version_arn) {
    m_previous_active_version_arn = previous_active_version_arn;
    m_previous_active_version_arn_isSet = true;
}

bool OAIUpdateActiveModelVersionResponse::is_previous_active_version_arn_Set() const{
    return m_previous_active_version_arn_isSet;
}

bool OAIUpdateActiveModelVersionResponse::is_previous_active_version_arn_Valid() const{
    return m_previous_active_version_arn_isValid;
}

bool OAIUpdateActiveModelVersionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_active_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_active_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_active_version_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_active_version_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateActiveModelVersionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
