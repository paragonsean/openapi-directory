/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataUploadFrequency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataUploadFrequency::OAIDataUploadFrequency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataUploadFrequency::OAIDataUploadFrequency() {
    this->initializeModel();
}

OAIDataUploadFrequency::~OAIDataUploadFrequency() {}

void OAIDataUploadFrequency::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataUploadFrequency::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataUploadFrequency::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PT5M", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataUploadFrequency::PT5M;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PT10M", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataUploadFrequency::PT10M;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PT15M", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataUploadFrequency::PT15M;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PT30M", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataUploadFrequency::PT30M;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PT1H", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataUploadFrequency::PT1H;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataUploadFrequency::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataUploadFrequency::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataUploadFrequency::PT5M:
            val = "PT5M";
            break;
        case eOAIDataUploadFrequency::PT10M:
            val = "PT10M";
            break;
        case eOAIDataUploadFrequency::PT15M:
            val = "PT15M";
            break;
        case eOAIDataUploadFrequency::PT30M:
            val = "PT30M";
            break;
        case eOAIDataUploadFrequency::PT1H:
            val = "PT1H";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataUploadFrequency::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataUploadFrequency::eOAIDataUploadFrequency OAIDataUploadFrequency::getValue() const {
    return m_value;
}

void OAIDataUploadFrequency::setValue(const OAIDataUploadFrequency::eOAIDataUploadFrequency& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataUploadFrequency::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataUploadFrequency::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
