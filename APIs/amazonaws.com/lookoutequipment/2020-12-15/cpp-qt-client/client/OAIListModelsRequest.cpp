/**
 * Amazon Lookout for Equipment
 * Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance. 
 *
 * The version of the OpenAPI document: 2020-12-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListModelsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListModelsRequest::OAIListModelsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListModelsRequest::OAIListModelsRequest() {
    this->initializeModel();
}

OAIListModelsRequest::~OAIListModelsRequest() {}

void OAIListModelsRequest::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_model_name_begins_with_isSet = false;
    m_model_name_begins_with_isValid = false;

    m_dataset_name_begins_with_isSet = false;
    m_dataset_name_begins_with_isValid = false;
}

void OAIListModelsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListModelsRequest::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_model_name_begins_with_isValid = ::OpenAPI::fromJsonValue(m_model_name_begins_with, json[QString("ModelNameBeginsWith")]);
    m_model_name_begins_with_isSet = !json[QString("ModelNameBeginsWith")].isNull() && m_model_name_begins_with_isValid;

    m_dataset_name_begins_with_isValid = ::OpenAPI::fromJsonValue(m_dataset_name_begins_with, json[QString("DatasetNameBeginsWith")]);
    m_dataset_name_begins_with_isSet = !json[QString("DatasetNameBeginsWith")].isNull() && m_dataset_name_begins_with_isValid;
}

QString OAIListModelsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListModelsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_model_name_begins_with_isSet) {
        obj.insert(QString("ModelNameBeginsWith"), ::OpenAPI::toJsonValue(m_model_name_begins_with));
    }
    if (m_dataset_name_begins_with_isSet) {
        obj.insert(QString("DatasetNameBeginsWith"), ::OpenAPI::toJsonValue(m_dataset_name_begins_with));
    }
    return obj;
}

QString OAIListModelsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListModelsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListModelsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListModelsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListModelsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListModelsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListModelsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListModelsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAIModelStatus OAIListModelsRequest::getStatus() const {
    return m_status;
}
void OAIListModelsRequest::setStatus(const OAIModelStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListModelsRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListModelsRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIListModelsRequest::getModelNameBeginsWith() const {
    return m_model_name_begins_with;
}
void OAIListModelsRequest::setModelNameBeginsWith(const QString &model_name_begins_with) {
    m_model_name_begins_with = model_name_begins_with;
    m_model_name_begins_with_isSet = true;
}

bool OAIListModelsRequest::is_model_name_begins_with_Set() const{
    return m_model_name_begins_with_isSet;
}

bool OAIListModelsRequest::is_model_name_begins_with_Valid() const{
    return m_model_name_begins_with_isValid;
}

QString OAIListModelsRequest::getDatasetNameBeginsWith() const {
    return m_dataset_name_begins_with;
}
void OAIListModelsRequest::setDatasetNameBeginsWith(const QString &dataset_name_begins_with) {
    m_dataset_name_begins_with = dataset_name_begins_with;
    m_dataset_name_begins_with_isSet = true;
}

bool OAIListModelsRequest::is_dataset_name_begins_with_Set() const{
    return m_dataset_name_begins_with_isSet;
}

bool OAIListModelsRequest::is_dataset_name_begins_with_Valid() const{
    return m_dataset_name_begins_with_isValid;
}

bool OAIListModelsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_name_begins_with_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_begins_with_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListModelsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
