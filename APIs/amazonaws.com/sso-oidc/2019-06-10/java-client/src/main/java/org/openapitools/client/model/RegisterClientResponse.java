/*
 * AWS SSO OIDC
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) OpenID Connect (OIDC) is a web service that enables a client (such as AWS CLI or a native application) to register with IAM Identity Center. The service also enables the client to fetch the user’s access token upon successful authentication and authorization with IAM Identity Center.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p> <b>Considerations for Using This Guide</b> </p> <p>Before you begin using this guide, we recommend that you first review the following important information about how the IAM Identity Center OIDC service works.</p> <ul> <li> <p>The IAM Identity Center OIDC service currently implements only the portions of the OAuth 2.0 Device Authorization Grant standard (<a href=\"https://tools.ietf.org/html/rfc8628\">https://tools.ietf.org/html/rfc8628</a>) that are necessary to enable single sign-on authentication with the AWS CLI. Support for other OIDC flows frequently needed for native applications, such as Authorization Code Flow (+ PKCE), will be addressed in future releases.</p> </li> <li> <p>The service emits only OIDC access tokens, such that obtaining a new token (For example, token refresh) requires explicit user re-authentication.</p> </li> <li> <p>The access tokens provided by this service grant access to all AWS account entitlements assigned to an IAM Identity Center user, not just a particular application.</p> </li> <li> <p>The documentation in this guide does not describe the mechanism to convert the access token into AWS Auth (“sigv4”) credentials for use with IAM-protected AWS service endpoints. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/PortalAPIReference/API_GetRoleCredentials.html\">GetRoleCredentials</a> in the <i>IAM Identity Center Portal API Reference Guide</i>.</p> </li> </ul> <p>For general information about IAM Identity Center, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">What is IAM Identity Center?</a> in the <i>IAM Identity Center User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterClientResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:27.005935-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterClientResponse {
  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_CLIENT_ID_ISSUED_AT = "clientIdIssuedAt";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID_ISSUED_AT)
  private Integer clientIdIssuedAt;

  public static final String SERIALIZED_NAME_CLIENT_SECRET_EXPIRES_AT = "clientSecretExpiresAt";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET_EXPIRES_AT)
  private Integer clientSecretExpiresAt;

  public static final String SERIALIZED_NAME_AUTHORIZATION_ENDPOINT = "authorizationEndpoint";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ENDPOINT)
  private String authorizationEndpoint;

  public static final String SERIALIZED_NAME_TOKEN_ENDPOINT = "tokenEndpoint";
  @SerializedName(SERIALIZED_NAME_TOKEN_ENDPOINT)
  private String tokenEndpoint;

  public RegisterClientResponse() {
  }

  public RegisterClientResponse clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public RegisterClientResponse clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Get clientSecret
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public RegisterClientResponse clientIdIssuedAt(Integer clientIdIssuedAt) {
    this.clientIdIssuedAt = clientIdIssuedAt;
    return this;
  }

  /**
   * Get clientIdIssuedAt
   * @return clientIdIssuedAt
   */
  @javax.annotation.Nullable
  public Integer getClientIdIssuedAt() {
    return clientIdIssuedAt;
  }

  public void setClientIdIssuedAt(Integer clientIdIssuedAt) {
    this.clientIdIssuedAt = clientIdIssuedAt;
  }


  public RegisterClientResponse clientSecretExpiresAt(Integer clientSecretExpiresAt) {
    this.clientSecretExpiresAt = clientSecretExpiresAt;
    return this;
  }

  /**
   * Get clientSecretExpiresAt
   * @return clientSecretExpiresAt
   */
  @javax.annotation.Nullable
  public Integer getClientSecretExpiresAt() {
    return clientSecretExpiresAt;
  }

  public void setClientSecretExpiresAt(Integer clientSecretExpiresAt) {
    this.clientSecretExpiresAt = clientSecretExpiresAt;
  }


  public RegisterClientResponse authorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
    return this;
  }

  /**
   * Get authorizationEndpoint
   * @return authorizationEndpoint
   */
  @javax.annotation.Nullable
  public String getAuthorizationEndpoint() {
    return authorizationEndpoint;
  }

  public void setAuthorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
  }


  public RegisterClientResponse tokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
    return this;
  }

  /**
   * Get tokenEndpoint
   * @return tokenEndpoint
   */
  @javax.annotation.Nullable
  public String getTokenEndpoint() {
    return tokenEndpoint;
  }

  public void setTokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterClientResponse registerClientResponse = (RegisterClientResponse) o;
    return Objects.equals(this.clientId, registerClientResponse.clientId) &&
        Objects.equals(this.clientSecret, registerClientResponse.clientSecret) &&
        Objects.equals(this.clientIdIssuedAt, registerClientResponse.clientIdIssuedAt) &&
        Objects.equals(this.clientSecretExpiresAt, registerClientResponse.clientSecretExpiresAt) &&
        Objects.equals(this.authorizationEndpoint, registerClientResponse.authorizationEndpoint) &&
        Objects.equals(this.tokenEndpoint, registerClientResponse.tokenEndpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientSecret, clientIdIssuedAt, clientSecretExpiresAt, authorizationEndpoint, tokenEndpoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterClientResponse {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    clientIdIssuedAt: ").append(toIndentedString(clientIdIssuedAt)).append("\n");
    sb.append("    clientSecretExpiresAt: ").append(toIndentedString(clientSecretExpiresAt)).append("\n");
    sb.append("    authorizationEndpoint: ").append(toIndentedString(authorizationEndpoint)).append("\n");
    sb.append("    tokenEndpoint: ").append(toIndentedString(tokenEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("clientIdIssuedAt");
    openapiFields.add("clientSecretExpiresAt");
    openapiFields.add("authorizationEndpoint");
    openapiFields.add("tokenEndpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterClientResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterClientResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterClientResponse is not found in the empty JSON string", RegisterClientResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterClientResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterClientResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clientId`
      if (jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clientId"));
      }
      // validate the optional field `clientSecret`
      if (jsonObj.get("clientSecret") != null && !jsonObj.get("clientSecret").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clientSecret"));
      }
      // validate the optional field `clientIdIssuedAt`
      if (jsonObj.get("clientIdIssuedAt") != null && !jsonObj.get("clientIdIssuedAt").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("clientIdIssuedAt"));
      }
      // validate the optional field `clientSecretExpiresAt`
      if (jsonObj.get("clientSecretExpiresAt") != null && !jsonObj.get("clientSecretExpiresAt").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("clientSecretExpiresAt"));
      }
      // validate the optional field `authorizationEndpoint`
      if (jsonObj.get("authorizationEndpoint") != null && !jsonObj.get("authorizationEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("authorizationEndpoint"));
      }
      // validate the optional field `tokenEndpoint`
      if (jsonObj.get("tokenEndpoint") != null && !jsonObj.get("tokenEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("tokenEndpoint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterClientResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterClientResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterClientResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterClientResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterClientResponse>() {
           @Override
           public void write(JsonWriter out, RegisterClientResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterClientResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterClientResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterClientResponse
   * @throws IOException if the JSON string is invalid with respect to RegisterClientResponse
   */
  public static RegisterClientResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterClientResponse.class);
  }

  /**
   * Convert an instance of RegisterClientResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

