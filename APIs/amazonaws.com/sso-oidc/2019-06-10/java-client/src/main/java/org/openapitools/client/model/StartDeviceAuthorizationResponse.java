/*
 * AWS SSO OIDC
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) OpenID Connect (OIDC) is a web service that enables a client (such as AWS CLI or a native application) to register with IAM Identity Center. The service also enables the client to fetch the user’s access token upon successful authentication and authorization with IAM Identity Center.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p> <b>Considerations for Using This Guide</b> </p> <p>Before you begin using this guide, we recommend that you first review the following important information about how the IAM Identity Center OIDC service works.</p> <ul> <li> <p>The IAM Identity Center OIDC service currently implements only the portions of the OAuth 2.0 Device Authorization Grant standard (<a href=\"https://tools.ietf.org/html/rfc8628\">https://tools.ietf.org/html/rfc8628</a>) that are necessary to enable single sign-on authentication with the AWS CLI. Support for other OIDC flows frequently needed for native applications, such as Authorization Code Flow (+ PKCE), will be addressed in future releases.</p> </li> <li> <p>The service emits only OIDC access tokens, such that obtaining a new token (For example, token refresh) requires explicit user re-authentication.</p> </li> <li> <p>The access tokens provided by this service grant access to all AWS account entitlements assigned to an IAM Identity Center user, not just a particular application.</p> </li> <li> <p>The documentation in this guide does not describe the mechanism to convert the access token into AWS Auth (“sigv4”) credentials for use with IAM-protected AWS service endpoints. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/PortalAPIReference/API_GetRoleCredentials.html\">GetRoleCredentials</a> in the <i>IAM Identity Center Portal API Reference Guide</i>.</p> </li> </ul> <p>For general information about IAM Identity Center, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">What is IAM Identity Center?</a> in the <i>IAM Identity Center User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartDeviceAuthorizationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:27.005935-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartDeviceAuthorizationResponse {
  public static final String SERIALIZED_NAME_DEVICE_CODE = "deviceCode";
  @SerializedName(SERIALIZED_NAME_DEVICE_CODE)
  private String deviceCode;

  public static final String SERIALIZED_NAME_USER_CODE = "userCode";
  @SerializedName(SERIALIZED_NAME_USER_CODE)
  private String userCode;

  public static final String SERIALIZED_NAME_VERIFICATION_URI = "verificationUri";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_URI)
  private String verificationUri;

  public static final String SERIALIZED_NAME_VERIFICATION_URI_COMPLETE = "verificationUriComplete";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_URI_COMPLETE)
  private String verificationUriComplete;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expiresIn";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private Integer expiresIn;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Integer interval;

  public StartDeviceAuthorizationResponse() {
  }

  public StartDeviceAuthorizationResponse deviceCode(String deviceCode) {
    this.deviceCode = deviceCode;
    return this;
  }

  /**
   * Get deviceCode
   * @return deviceCode
   */
  @javax.annotation.Nullable
  public String getDeviceCode() {
    return deviceCode;
  }

  public void setDeviceCode(String deviceCode) {
    this.deviceCode = deviceCode;
  }


  public StartDeviceAuthorizationResponse userCode(String userCode) {
    this.userCode = userCode;
    return this;
  }

  /**
   * Get userCode
   * @return userCode
   */
  @javax.annotation.Nullable
  public String getUserCode() {
    return userCode;
  }

  public void setUserCode(String userCode) {
    this.userCode = userCode;
  }


  public StartDeviceAuthorizationResponse verificationUri(String verificationUri) {
    this.verificationUri = verificationUri;
    return this;
  }

  /**
   * Get verificationUri
   * @return verificationUri
   */
  @javax.annotation.Nullable
  public String getVerificationUri() {
    return verificationUri;
  }

  public void setVerificationUri(String verificationUri) {
    this.verificationUri = verificationUri;
  }


  public StartDeviceAuthorizationResponse verificationUriComplete(String verificationUriComplete) {
    this.verificationUriComplete = verificationUriComplete;
    return this;
  }

  /**
   * Get verificationUriComplete
   * @return verificationUriComplete
   */
  @javax.annotation.Nullable
  public String getVerificationUriComplete() {
    return verificationUriComplete;
  }

  public void setVerificationUriComplete(String verificationUriComplete) {
    this.verificationUriComplete = verificationUriComplete;
  }


  public StartDeviceAuthorizationResponse expiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * Get expiresIn
   * @return expiresIn
   */
  @javax.annotation.Nullable
  public Integer getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
  }


  public StartDeviceAuthorizationResponse interval(Integer interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Get interval
   * @return interval
   */
  @javax.annotation.Nullable
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartDeviceAuthorizationResponse startDeviceAuthorizationResponse = (StartDeviceAuthorizationResponse) o;
    return Objects.equals(this.deviceCode, startDeviceAuthorizationResponse.deviceCode) &&
        Objects.equals(this.userCode, startDeviceAuthorizationResponse.userCode) &&
        Objects.equals(this.verificationUri, startDeviceAuthorizationResponse.verificationUri) &&
        Objects.equals(this.verificationUriComplete, startDeviceAuthorizationResponse.verificationUriComplete) &&
        Objects.equals(this.expiresIn, startDeviceAuthorizationResponse.expiresIn) &&
        Objects.equals(this.interval, startDeviceAuthorizationResponse.interval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceCode, userCode, verificationUri, verificationUriComplete, expiresIn, interval);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartDeviceAuthorizationResponse {\n");
    sb.append("    deviceCode: ").append(toIndentedString(deviceCode)).append("\n");
    sb.append("    userCode: ").append(toIndentedString(userCode)).append("\n");
    sb.append("    verificationUri: ").append(toIndentedString(verificationUri)).append("\n");
    sb.append("    verificationUriComplete: ").append(toIndentedString(verificationUriComplete)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceCode");
    openapiFields.add("userCode");
    openapiFields.add("verificationUri");
    openapiFields.add("verificationUriComplete");
    openapiFields.add("expiresIn");
    openapiFields.add("interval");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartDeviceAuthorizationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartDeviceAuthorizationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartDeviceAuthorizationResponse is not found in the empty JSON string", StartDeviceAuthorizationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartDeviceAuthorizationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartDeviceAuthorizationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deviceCode`
      if (jsonObj.get("deviceCode") != null && !jsonObj.get("deviceCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("deviceCode"));
      }
      // validate the optional field `userCode`
      if (jsonObj.get("userCode") != null && !jsonObj.get("userCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("userCode"));
      }
      // validate the optional field `verificationUri`
      if (jsonObj.get("verificationUri") != null && !jsonObj.get("verificationUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("verificationUri"));
      }
      // validate the optional field `verificationUriComplete`
      if (jsonObj.get("verificationUriComplete") != null && !jsonObj.get("verificationUriComplete").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("verificationUriComplete"));
      }
      // validate the optional field `expiresIn`
      if (jsonObj.get("expiresIn") != null && !jsonObj.get("expiresIn").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("expiresIn"));
      }
      // validate the optional field `interval`
      if (jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("interval"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartDeviceAuthorizationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartDeviceAuthorizationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartDeviceAuthorizationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartDeviceAuthorizationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<StartDeviceAuthorizationResponse>() {
           @Override
           public void write(JsonWriter out, StartDeviceAuthorizationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartDeviceAuthorizationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartDeviceAuthorizationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartDeviceAuthorizationResponse
   * @throws IOException if the JSON string is invalid with respect to StartDeviceAuthorizationResponse
   */
  public static StartDeviceAuthorizationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartDeviceAuthorizationResponse.class);
  }

  /**
   * Convert an instance of StartDeviceAuthorizationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

