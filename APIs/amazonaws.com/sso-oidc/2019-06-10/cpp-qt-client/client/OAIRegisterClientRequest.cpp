/**
 * AWS SSO OIDC
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) OpenID Connect (OIDC) is a web service that enables a client (such as AWS CLI or a native application) to register with IAM Identity Center. The service also enables the client to fetch the user’s access token upon successful authentication and authorization with IAM Identity Center.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p> <b>Considerations for Using This Guide</b> </p> <p>Before you begin using this guide, we recommend that you first review the following important information about how the IAM Identity Center OIDC service works.</p> <ul> <li> <p>The IAM Identity Center OIDC service currently implements only the portions of the OAuth 2.0 Device Authorization Grant standard (<a href=\"https://tools.ietf.org/html/rfc8628\">https://tools.ietf.org/html/rfc8628</a>) that are necessary to enable single sign-on authentication with the AWS CLI. Support for other OIDC flows frequently needed for native applications, such as Authorization Code Flow (+ PKCE), will be addressed in future releases.</p> </li> <li> <p>The service emits only OIDC access tokens, such that obtaining a new token (For example, token refresh) requires explicit user re-authentication.</p> </li> <li> <p>The access tokens provided by this service grant access to all AWS account entitlements assigned to an IAM Identity Center user, not just a particular application.</p> </li> <li> <p>The documentation in this guide does not describe the mechanism to convert the access token into AWS Auth (“sigv4”) credentials for use with IAM-protected AWS service endpoints. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/PortalAPIReference/API_GetRoleCredentials.html\">GetRoleCredentials</a> in the <i>IAM Identity Center Portal API Reference Guide</i>.</p> </li> </ul> <p>For general information about IAM Identity Center, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">What is IAM Identity Center?</a> in the <i>IAM Identity Center User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterClientRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterClientRequest::OAIRegisterClientRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterClientRequest::OAIRegisterClientRequest() {
    this->initializeModel();
}

OAIRegisterClientRequest::~OAIRegisterClientRequest() {}

void OAIRegisterClientRequest::initializeModel() {

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_client_type_isSet = false;
    m_client_type_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIRegisterClientRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterClientRequest::fromJsonObject(QJsonObject json) {

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("clientName")]);
    m_client_name_isSet = !json[QString("clientName")].isNull() && m_client_name_isValid;

    m_client_type_isValid = ::OpenAPI::fromJsonValue(m_client_type, json[QString("clientType")]);
    m_client_type_isSet = !json[QString("clientType")].isNull() && m_client_type_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAIRegisterClientRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterClientRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_name_isSet) {
        obj.insert(QString("clientName"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_client_type_isSet) {
        obj.insert(QString("clientType"), ::OpenAPI::toJsonValue(m_client_type));
    }
    if (m_scopes.isSet()) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

QString OAIRegisterClientRequest::getClientName() const {
    return m_client_name;
}
void OAIRegisterClientRequest::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAIRegisterClientRequest::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAIRegisterClientRequest::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QString OAIRegisterClientRequest::getClientType() const {
    return m_client_type;
}
void OAIRegisterClientRequest::setClientType(const QString &client_type) {
    m_client_type = client_type;
    m_client_type_isSet = true;
}

bool OAIRegisterClientRequest::is_client_type_Set() const{
    return m_client_type_isSet;
}

bool OAIRegisterClientRequest::is_client_type_Valid() const{
    return m_client_type_isValid;
}

QList OAIRegisterClientRequest::getScopes() const {
    return m_scopes;
}
void OAIRegisterClientRequest::setScopes(const QList &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIRegisterClientRequest::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIRegisterClientRequest::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIRegisterClientRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterClientRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_name_isValid && m_client_type_isValid && true;
}

} // namespace OpenAPI
