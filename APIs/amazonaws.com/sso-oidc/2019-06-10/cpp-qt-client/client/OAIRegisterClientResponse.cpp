/**
 * AWS SSO OIDC
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) OpenID Connect (OIDC) is a web service that enables a client (such as AWS CLI or a native application) to register with IAM Identity Center. The service also enables the client to fetch the user’s access token upon successful authentication and authorization with IAM Identity Center.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p> <b>Considerations for Using This Guide</b> </p> <p>Before you begin using this guide, we recommend that you first review the following important information about how the IAM Identity Center OIDC service works.</p> <ul> <li> <p>The IAM Identity Center OIDC service currently implements only the portions of the OAuth 2.0 Device Authorization Grant standard (<a href=\"https://tools.ietf.org/html/rfc8628\">https://tools.ietf.org/html/rfc8628</a>) that are necessary to enable single sign-on authentication with the AWS CLI. Support for other OIDC flows frequently needed for native applications, such as Authorization Code Flow (+ PKCE), will be addressed in future releases.</p> </li> <li> <p>The service emits only OIDC access tokens, such that obtaining a new token (For example, token refresh) requires explicit user re-authentication.</p> </li> <li> <p>The access tokens provided by this service grant access to all AWS account entitlements assigned to an IAM Identity Center user, not just a particular application.</p> </li> <li> <p>The documentation in this guide does not describe the mechanism to convert the access token into AWS Auth (“sigv4”) credentials for use with IAM-protected AWS service endpoints. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/PortalAPIReference/API_GetRoleCredentials.html\">GetRoleCredentials</a> in the <i>IAM Identity Center Portal API Reference Guide</i>.</p> </li> </ul> <p>For general information about IAM Identity Center, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">What is IAM Identity Center?</a> in the <i>IAM Identity Center User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterClientResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterClientResponse::OAIRegisterClientResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterClientResponse::OAIRegisterClientResponse() {
    this->initializeModel();
}

OAIRegisterClientResponse::~OAIRegisterClientResponse() {}

void OAIRegisterClientResponse::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_client_id_issued_at_isSet = false;
    m_client_id_issued_at_isValid = false;

    m_client_secret_expires_at_isSet = false;
    m_client_secret_expires_at_isValid = false;

    m_authorization_endpoint_isSet = false;
    m_authorization_endpoint_isValid = false;

    m_token_endpoint_isSet = false;
    m_token_endpoint_isValid = false;
}

void OAIRegisterClientResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterClientResponse::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_client_id_issued_at_isValid = ::OpenAPI::fromJsonValue(m_client_id_issued_at, json[QString("clientIdIssuedAt")]);
    m_client_id_issued_at_isSet = !json[QString("clientIdIssuedAt")].isNull() && m_client_id_issued_at_isValid;

    m_client_secret_expires_at_isValid = ::OpenAPI::fromJsonValue(m_client_secret_expires_at, json[QString("clientSecretExpiresAt")]);
    m_client_secret_expires_at_isSet = !json[QString("clientSecretExpiresAt")].isNull() && m_client_secret_expires_at_isValid;

    m_authorization_endpoint_isValid = ::OpenAPI::fromJsonValue(m_authorization_endpoint, json[QString("authorizationEndpoint")]);
    m_authorization_endpoint_isSet = !json[QString("authorizationEndpoint")].isNull() && m_authorization_endpoint_isValid;

    m_token_endpoint_isValid = ::OpenAPI::fromJsonValue(m_token_endpoint, json[QString("tokenEndpoint")]);
    m_token_endpoint_isSet = !json[QString("tokenEndpoint")].isNull() && m_token_endpoint_isValid;
}

QString OAIRegisterClientResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterClientResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_client_id_issued_at_isSet) {
        obj.insert(QString("clientIdIssuedAt"), ::OpenAPI::toJsonValue(m_client_id_issued_at));
    }
    if (m_client_secret_expires_at_isSet) {
        obj.insert(QString("clientSecretExpiresAt"), ::OpenAPI::toJsonValue(m_client_secret_expires_at));
    }
    if (m_authorization_endpoint_isSet) {
        obj.insert(QString("authorizationEndpoint"), ::OpenAPI::toJsonValue(m_authorization_endpoint));
    }
    if (m_token_endpoint_isSet) {
        obj.insert(QString("tokenEndpoint"), ::OpenAPI::toJsonValue(m_token_endpoint));
    }
    return obj;
}

QString OAIRegisterClientResponse::getClientId() const {
    return m_client_id;
}
void OAIRegisterClientResponse::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIRegisterClientResponse::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIRegisterClientResponse::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIRegisterClientResponse::getClientSecret() const {
    return m_client_secret;
}
void OAIRegisterClientResponse::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIRegisterClientResponse::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIRegisterClientResponse::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

qint32 OAIRegisterClientResponse::getClientIdIssuedAt() const {
    return m_client_id_issued_at;
}
void OAIRegisterClientResponse::setClientIdIssuedAt(const qint32 &client_id_issued_at) {
    m_client_id_issued_at = client_id_issued_at;
    m_client_id_issued_at_isSet = true;
}

bool OAIRegisterClientResponse::is_client_id_issued_at_Set() const{
    return m_client_id_issued_at_isSet;
}

bool OAIRegisterClientResponse::is_client_id_issued_at_Valid() const{
    return m_client_id_issued_at_isValid;
}

qint32 OAIRegisterClientResponse::getClientSecretExpiresAt() const {
    return m_client_secret_expires_at;
}
void OAIRegisterClientResponse::setClientSecretExpiresAt(const qint32 &client_secret_expires_at) {
    m_client_secret_expires_at = client_secret_expires_at;
    m_client_secret_expires_at_isSet = true;
}

bool OAIRegisterClientResponse::is_client_secret_expires_at_Set() const{
    return m_client_secret_expires_at_isSet;
}

bool OAIRegisterClientResponse::is_client_secret_expires_at_Valid() const{
    return m_client_secret_expires_at_isValid;
}

QString OAIRegisterClientResponse::getAuthorizationEndpoint() const {
    return m_authorization_endpoint;
}
void OAIRegisterClientResponse::setAuthorizationEndpoint(const QString &authorization_endpoint) {
    m_authorization_endpoint = authorization_endpoint;
    m_authorization_endpoint_isSet = true;
}

bool OAIRegisterClientResponse::is_authorization_endpoint_Set() const{
    return m_authorization_endpoint_isSet;
}

bool OAIRegisterClientResponse::is_authorization_endpoint_Valid() const{
    return m_authorization_endpoint_isValid;
}

QString OAIRegisterClientResponse::getTokenEndpoint() const {
    return m_token_endpoint;
}
void OAIRegisterClientResponse::setTokenEndpoint(const QString &token_endpoint) {
    m_token_endpoint = token_endpoint;
    m_token_endpoint_isSet = true;
}

bool OAIRegisterClientResponse::is_token_endpoint_Set() const{
    return m_token_endpoint_isSet;
}

bool OAIRegisterClientResponse::is_token_endpoint_Valid() const{
    return m_token_endpoint_isValid;
}

bool OAIRegisterClientResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_issued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterClientResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
