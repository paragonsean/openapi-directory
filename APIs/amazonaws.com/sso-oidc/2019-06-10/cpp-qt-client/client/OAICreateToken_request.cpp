/**
 * AWS SSO OIDC
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) OpenID Connect (OIDC) is a web service that enables a client (such as AWS CLI or a native application) to register with IAM Identity Center. The service also enables the client to fetch the user’s access token upon successful authentication and authorization with IAM Identity Center.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p> <b>Considerations for Using This Guide</b> </p> <p>Before you begin using this guide, we recommend that you first review the following important information about how the IAM Identity Center OIDC service works.</p> <ul> <li> <p>The IAM Identity Center OIDC service currently implements only the portions of the OAuth 2.0 Device Authorization Grant standard (<a href=\"https://tools.ietf.org/html/rfc8628\">https://tools.ietf.org/html/rfc8628</a>) that are necessary to enable single sign-on authentication with the AWS CLI. Support for other OIDC flows frequently needed for native applications, such as Authorization Code Flow (+ PKCE), will be addressed in future releases.</p> </li> <li> <p>The service emits only OIDC access tokens, such that obtaining a new token (For example, token refresh) requires explicit user re-authentication.</p> </li> <li> <p>The access tokens provided by this service grant access to all AWS account entitlements assigned to an IAM Identity Center user, not just a particular application.</p> </li> <li> <p>The documentation in this guide does not describe the mechanism to convert the access token into AWS Auth (“sigv4”) credentials for use with IAM-protected AWS service endpoints. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/PortalAPIReference/API_GetRoleCredentials.html\">GetRoleCredentials</a> in the <i>IAM Identity Center Portal API Reference Guide</i>.</p> </li> </ul> <p>For general information about IAM Identity Center, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">What is IAM Identity Center?</a> in the <i>IAM Identity Center User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateToken_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateToken_request::OAICreateToken_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateToken_request::OAICreateToken_request() {
    this->initializeModel();
}

OAICreateToken_request::~OAICreateToken_request() {}

void OAICreateToken_request::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_device_code_isSet = false;
    m_device_code_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;
}

void OAICreateToken_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateToken_request::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grantType")]);
    m_grant_type_isSet = !json[QString("grantType")].isNull() && m_grant_type_isValid;

    m_device_code_isValid = ::OpenAPI::fromJsonValue(m_device_code, json[QString("deviceCode")]);
    m_device_code_isSet = !json[QString("deviceCode")].isNull() && m_device_code_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refreshToken")]);
    m_refresh_token_isSet = !json[QString("refreshToken")].isNull() && m_refresh_token_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirectUri")]);
    m_redirect_uri_isSet = !json[QString("redirectUri")].isNull() && m_redirect_uri_isValid;
}

QString OAICreateToken_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateToken_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_grant_type_isSet) {
        obj.insert(QString("grantType"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    if (m_device_code_isSet) {
        obj.insert(QString("deviceCode"), ::OpenAPI::toJsonValue(m_device_code));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refreshToken"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_scope.size() > 0) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirectUri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    return obj;
}

QString OAICreateToken_request::getClientId() const {
    return m_client_id;
}
void OAICreateToken_request::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAICreateToken_request::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAICreateToken_request::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAICreateToken_request::getClientSecret() const {
    return m_client_secret;
}
void OAICreateToken_request::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAICreateToken_request::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAICreateToken_request::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAICreateToken_request::getGrantType() const {
    return m_grant_type;
}
void OAICreateToken_request::setGrantType(const QString &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAICreateToken_request::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAICreateToken_request::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAICreateToken_request::getDeviceCode() const {
    return m_device_code;
}
void OAICreateToken_request::setDeviceCode(const QString &device_code) {
    m_device_code = device_code;
    m_device_code_isSet = true;
}

bool OAICreateToken_request::is_device_code_Set() const{
    return m_device_code_isSet;
}

bool OAICreateToken_request::is_device_code_Valid() const{
    return m_device_code_isValid;
}

QString OAICreateToken_request::getCode() const {
    return m_code;
}
void OAICreateToken_request::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICreateToken_request::is_code_Set() const{
    return m_code_isSet;
}

bool OAICreateToken_request::is_code_Valid() const{
    return m_code_isValid;
}

QString OAICreateToken_request::getRefreshToken() const {
    return m_refresh_token;
}
void OAICreateToken_request::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAICreateToken_request::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAICreateToken_request::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

QList<QString> OAICreateToken_request::getScope() const {
    return m_scope;
}
void OAICreateToken_request::setScope(const QList<QString> &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAICreateToken_request::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAICreateToken_request::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAICreateToken_request::getRedirectUri() const {
    return m_redirect_uri;
}
void OAICreateToken_request::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAICreateToken_request::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAICreateToken_request::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

bool OAICreateToken_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateToken_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_client_secret_isValid && m_grant_type_isValid && true;
}

} // namespace OpenAPI
