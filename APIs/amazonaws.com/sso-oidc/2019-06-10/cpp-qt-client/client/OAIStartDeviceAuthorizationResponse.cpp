/**
 * AWS SSO OIDC
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) OpenID Connect (OIDC) is a web service that enables a client (such as AWS CLI or a native application) to register with IAM Identity Center. The service also enables the client to fetch the user’s access token upon successful authentication and authorization with IAM Identity Center.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p> <b>Considerations for Using This Guide</b> </p> <p>Before you begin using this guide, we recommend that you first review the following important information about how the IAM Identity Center OIDC service works.</p> <ul> <li> <p>The IAM Identity Center OIDC service currently implements only the portions of the OAuth 2.0 Device Authorization Grant standard (<a href=\"https://tools.ietf.org/html/rfc8628\">https://tools.ietf.org/html/rfc8628</a>) that are necessary to enable single sign-on authentication with the AWS CLI. Support for other OIDC flows frequently needed for native applications, such as Authorization Code Flow (+ PKCE), will be addressed in future releases.</p> </li> <li> <p>The service emits only OIDC access tokens, such that obtaining a new token (For example, token refresh) requires explicit user re-authentication.</p> </li> <li> <p>The access tokens provided by this service grant access to all AWS account entitlements assigned to an IAM Identity Center user, not just a particular application.</p> </li> <li> <p>The documentation in this guide does not describe the mechanism to convert the access token into AWS Auth (“sigv4”) credentials for use with IAM-protected AWS service endpoints. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/PortalAPIReference/API_GetRoleCredentials.html\">GetRoleCredentials</a> in the <i>IAM Identity Center Portal API Reference Guide</i>.</p> </li> </ul> <p>For general information about IAM Identity Center, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">What is IAM Identity Center?</a> in the <i>IAM Identity Center User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartDeviceAuthorizationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartDeviceAuthorizationResponse::OAIStartDeviceAuthorizationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartDeviceAuthorizationResponse::OAIStartDeviceAuthorizationResponse() {
    this->initializeModel();
}

OAIStartDeviceAuthorizationResponse::~OAIStartDeviceAuthorizationResponse() {}

void OAIStartDeviceAuthorizationResponse::initializeModel() {

    m_device_code_isSet = false;
    m_device_code_isValid = false;

    m_user_code_isSet = false;
    m_user_code_isValid = false;

    m_verification_uri_isSet = false;
    m_verification_uri_isValid = false;

    m_verification_uri_complete_isSet = false;
    m_verification_uri_complete_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;
}

void OAIStartDeviceAuthorizationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartDeviceAuthorizationResponse::fromJsonObject(QJsonObject json) {

    m_device_code_isValid = ::OpenAPI::fromJsonValue(m_device_code, json[QString("deviceCode")]);
    m_device_code_isSet = !json[QString("deviceCode")].isNull() && m_device_code_isValid;

    m_user_code_isValid = ::OpenAPI::fromJsonValue(m_user_code, json[QString("userCode")]);
    m_user_code_isSet = !json[QString("userCode")].isNull() && m_user_code_isValid;

    m_verification_uri_isValid = ::OpenAPI::fromJsonValue(m_verification_uri, json[QString("verificationUri")]);
    m_verification_uri_isSet = !json[QString("verificationUri")].isNull() && m_verification_uri_isValid;

    m_verification_uri_complete_isValid = ::OpenAPI::fromJsonValue(m_verification_uri_complete, json[QString("verificationUriComplete")]);
    m_verification_uri_complete_isSet = !json[QString("verificationUriComplete")].isNull() && m_verification_uri_complete_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expiresIn")]);
    m_expires_in_isSet = !json[QString("expiresIn")].isNull() && m_expires_in_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;
}

QString OAIStartDeviceAuthorizationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartDeviceAuthorizationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_device_code_isSet) {
        obj.insert(QString("deviceCode"), ::OpenAPI::toJsonValue(m_device_code));
    }
    if (m_user_code_isSet) {
        obj.insert(QString("userCode"), ::OpenAPI::toJsonValue(m_user_code));
    }
    if (m_verification_uri_isSet) {
        obj.insert(QString("verificationUri"), ::OpenAPI::toJsonValue(m_verification_uri));
    }
    if (m_verification_uri_complete_isSet) {
        obj.insert(QString("verificationUriComplete"), ::OpenAPI::toJsonValue(m_verification_uri_complete));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expiresIn"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    return obj;
}

QString OAIStartDeviceAuthorizationResponse::getDeviceCode() const {
    return m_device_code;
}
void OAIStartDeviceAuthorizationResponse::setDeviceCode(const QString &device_code) {
    m_device_code = device_code;
    m_device_code_isSet = true;
}

bool OAIStartDeviceAuthorizationResponse::is_device_code_Set() const{
    return m_device_code_isSet;
}

bool OAIStartDeviceAuthorizationResponse::is_device_code_Valid() const{
    return m_device_code_isValid;
}

QString OAIStartDeviceAuthorizationResponse::getUserCode() const {
    return m_user_code;
}
void OAIStartDeviceAuthorizationResponse::setUserCode(const QString &user_code) {
    m_user_code = user_code;
    m_user_code_isSet = true;
}

bool OAIStartDeviceAuthorizationResponse::is_user_code_Set() const{
    return m_user_code_isSet;
}

bool OAIStartDeviceAuthorizationResponse::is_user_code_Valid() const{
    return m_user_code_isValid;
}

QString OAIStartDeviceAuthorizationResponse::getVerificationUri() const {
    return m_verification_uri;
}
void OAIStartDeviceAuthorizationResponse::setVerificationUri(const QString &verification_uri) {
    m_verification_uri = verification_uri;
    m_verification_uri_isSet = true;
}

bool OAIStartDeviceAuthorizationResponse::is_verification_uri_Set() const{
    return m_verification_uri_isSet;
}

bool OAIStartDeviceAuthorizationResponse::is_verification_uri_Valid() const{
    return m_verification_uri_isValid;
}

QString OAIStartDeviceAuthorizationResponse::getVerificationUriComplete() const {
    return m_verification_uri_complete;
}
void OAIStartDeviceAuthorizationResponse::setVerificationUriComplete(const QString &verification_uri_complete) {
    m_verification_uri_complete = verification_uri_complete;
    m_verification_uri_complete_isSet = true;
}

bool OAIStartDeviceAuthorizationResponse::is_verification_uri_complete_Set() const{
    return m_verification_uri_complete_isSet;
}

bool OAIStartDeviceAuthorizationResponse::is_verification_uri_complete_Valid() const{
    return m_verification_uri_complete_isValid;
}

qint32 OAIStartDeviceAuthorizationResponse::getExpiresIn() const {
    return m_expires_in;
}
void OAIStartDeviceAuthorizationResponse::setExpiresIn(const qint32 &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIStartDeviceAuthorizationResponse::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIStartDeviceAuthorizationResponse::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

qint32 OAIStartDeviceAuthorizationResponse::getInterval() const {
    return m_interval;
}
void OAIStartDeviceAuthorizationResponse::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIStartDeviceAuthorizationResponse::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIStartDeviceAuthorizationResponse::is_interval_Valid() const{
    return m_interval_isValid;
}

bool OAIStartDeviceAuthorizationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_uri_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartDeviceAuthorizationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
