# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, grant_type: str=None, device_code: str=None, code: str=None, refresh_token: str=None, scope: List[str]=None, redirect_uri: str=None):
        """CreateTokenRequest - a model defined in OpenAPI

        :param client_id: The client_id of this CreateTokenRequest.
        :param client_secret: The client_secret of this CreateTokenRequest.
        :param grant_type: The grant_type of this CreateTokenRequest.
        :param device_code: The device_code of this CreateTokenRequest.
        :param code: The code of this CreateTokenRequest.
        :param refresh_token: The refresh_token of this CreateTokenRequest.
        :param scope: The scope of this CreateTokenRequest.
        :param redirect_uri: The redirect_uri of this CreateTokenRequest.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'grant_type': str,
            'device_code': str,
            'code': str,
            'refresh_token': str,
            'scope': List[str],
            'redirect_uri': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'grant_type': 'grantType',
            'device_code': 'deviceCode',
            'code': 'code',
            'refresh_token': 'refreshToken',
            'scope': 'scope',
            'redirect_uri': 'redirectUri'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._grant_type = grant_type
        self._device_code = device_code
        self._code = code
        self._refresh_token = refresh_token
        self._scope = scope
        self._redirect_uri = redirect_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateToken_request of this CreateTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this CreateTokenRequest.

        The unique identifier string for each client. This value should come from the persisted result of the <a>RegisterClient</a> API.

        :return: The client_id of this CreateTokenRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CreateTokenRequest.

        The unique identifier string for each client. This value should come from the persisted result of the <a>RegisterClient</a> API.

        :param client_id: The client_id of this CreateTokenRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this CreateTokenRequest.

        A secret string generated for the client. This value should come from the persisted result of the <a>RegisterClient</a> API.

        :return: The client_secret of this CreateTokenRequest.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this CreateTokenRequest.

        A secret string generated for the client. This value should come from the persisted result of the <a>RegisterClient</a> API.

        :param client_secret: The client_secret of this CreateTokenRequest.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")

        self._client_secret = client_secret

    @property
    def grant_type(self):
        """Gets the grant_type of this CreateTokenRequest.

        <p>Supports grant types for the authorization code, refresh token, and device code request. For device code requests, specify the following value:</p> <p> <code>urn:ietf:params:oauth:grant-type:<i>device_code</i> </code> </p> <p>For information about how to obtain the device code, see the <a>StartDeviceAuthorization</a> topic.</p>

        :return: The grant_type of this CreateTokenRequest.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this CreateTokenRequest.

        <p>Supports grant types for the authorization code, refresh token, and device code request. For device code requests, specify the following value:</p> <p> <code>urn:ietf:params:oauth:grant-type:<i>device_code</i> </code> </p> <p>For information about how to obtain the device code, see the <a>StartDeviceAuthorization</a> topic.</p>

        :param grant_type: The grant_type of this CreateTokenRequest.
        :type grant_type: str
        """
        if grant_type is None:
            raise ValueError("Invalid value for `grant_type`, must not be `None`")

        self._grant_type = grant_type

    @property
    def device_code(self):
        """Gets the device_code of this CreateTokenRequest.

        Used only when calling this API for the device code grant type. This short-term code is used to identify this authentication attempt. This should come from an in-memory reference to the result of the <a>StartDeviceAuthorization</a> API.

        :return: The device_code of this CreateTokenRequest.
        :rtype: str
        """
        return self._device_code

    @device_code.setter
    def device_code(self, device_code):
        """Sets the device_code of this CreateTokenRequest.

        Used only when calling this API for the device code grant type. This short-term code is used to identify this authentication attempt. This should come from an in-memory reference to the result of the <a>StartDeviceAuthorization</a> API.

        :param device_code: The device_code of this CreateTokenRequest.
        :type device_code: str
        """

        self._device_code = device_code

    @property
    def code(self):
        """Gets the code of this CreateTokenRequest.

        The authorization code received from the authorization service. This parameter is required to perform an authorization grant request to get access to a token.

        :return: The code of this CreateTokenRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CreateTokenRequest.

        The authorization code received from the authorization service. This parameter is required to perform an authorization grant request to get access to a token.

        :param code: The code of this CreateTokenRequest.
        :type code: str
        """

        self._code = code

    @property
    def refresh_token(self):
        """Gets the refresh_token of this CreateTokenRequest.

        <p>Currently, <code>refreshToken</code> is not yet implemented and is not supported. For more information about the features and limitations of the current IAM Identity Center OIDC implementation, see <i>Considerations for Using this Guide</i> in the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/Welcome.html\">IAM Identity Center OIDC API Reference</a>.</p> <p>The token used to obtain an access token in the event that the access token is invalid or expired.</p>

        :return: The refresh_token of this CreateTokenRequest.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this CreateTokenRequest.

        <p>Currently, <code>refreshToken</code> is not yet implemented and is not supported. For more information about the features and limitations of the current IAM Identity Center OIDC implementation, see <i>Considerations for Using this Guide</i> in the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/Welcome.html\">IAM Identity Center OIDC API Reference</a>.</p> <p>The token used to obtain an access token in the event that the access token is invalid or expired.</p>

        :param refresh_token: The refresh_token of this CreateTokenRequest.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def scope(self):
        """Gets the scope of this CreateTokenRequest.

        The list of scopes that is defined by the client. Upon authorization, this list is used to restrict permissions when granting an access token.

        :return: The scope of this CreateTokenRequest.
        :rtype: List[str]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CreateTokenRequest.

        The list of scopes that is defined by the client. Upon authorization, this list is used to restrict permissions when granting an access token.

        :param scope: The scope of this CreateTokenRequest.
        :type scope: List[str]
        """

        self._scope = scope

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this CreateTokenRequest.

        The location of the application that will receive the authorization code. Users authorize the service to send the request to this location.

        :return: The redirect_uri of this CreateTokenRequest.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this CreateTokenRequest.

        The location of the application that will receive the authorization code. Users authorize the service to send the request to this location.

        :param redirect_uri: The redirect_uri of this CreateTokenRequest.
        :type redirect_uri: str
        """

        self._redirect_uri = redirect_uri
