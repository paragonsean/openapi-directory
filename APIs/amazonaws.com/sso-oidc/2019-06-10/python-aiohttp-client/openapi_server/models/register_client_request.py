# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisterClientRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_name: str=None, client_type: str=None, scopes: List[str]=None):
        """RegisterClientRequest - a model defined in OpenAPI

        :param client_name: The client_name of this RegisterClientRequest.
        :param client_type: The client_type of this RegisterClientRequest.
        :param scopes: The scopes of this RegisterClientRequest.
        """
        self.openapi_types = {
            'client_name': str,
            'client_type': str,
            'scopes': List[str]
        }

        self.attribute_map = {
            'client_name': 'clientName',
            'client_type': 'clientType',
            'scopes': 'scopes'
        }

        self._client_name = client_name
        self._client_type = client_type
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterClientRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterClient_request of this RegisterClientRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_name(self):
        """Gets the client_name of this RegisterClientRequest.

        The friendly name of the client.

        :return: The client_name of this RegisterClientRequest.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this RegisterClientRequest.

        The friendly name of the client.

        :param client_name: The client_name of this RegisterClientRequest.
        :type client_name: str
        """
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")

        self._client_name = client_name

    @property
    def client_type(self):
        """Gets the client_type of this RegisterClientRequest.

        The type of client. The service supports only <code>public</code> as a client type. Anything other than public will be rejected by the service.

        :return: The client_type of this RegisterClientRequest.
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this RegisterClientRequest.

        The type of client. The service supports only <code>public</code> as a client type. Anything other than public will be rejected by the service.

        :param client_type: The client_type of this RegisterClientRequest.
        :type client_type: str
        """
        if client_type is None:
            raise ValueError("Invalid value for `client_type`, must not be `None`")

        self._client_type = client_type

    @property
    def scopes(self):
        """Gets the scopes of this RegisterClientRequest.

        The list of scopes that are defined by the client. Upon authorization, this list is used to restrict permissions when granting an access token.

        :return: The scopes of this RegisterClientRequest.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this RegisterClientRequest.

        The list of scopes that are defined by the client. Upon authorization, this list is used to restrict permissions when granting an access token.

        :param scopes: The scopes of this RegisterClientRequest.
        :type scopes: List[str]
        """

        self._scopes = scopes
