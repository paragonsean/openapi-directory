/**
 * AWS SSO OIDC
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) OpenID Connect (OIDC) is a web service that enables a client (such as AWS CLI or a native application) to register with IAM Identity Center. The service also enables the client to fetch the user’s access token upon successful authentication and authorization with IAM Identity Center.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p> <b>Considerations for Using This Guide</b> </p> <p>Before you begin using this guide, we recommend that you first review the following important information about how the IAM Identity Center OIDC service works.</p> <ul> <li> <p>The IAM Identity Center OIDC service currently implements only the portions of the OAuth 2.0 Device Authorization Grant standard (<a href=\"https://tools.ietf.org/html/rfc8628\">https://tools.ietf.org/html/rfc8628</a>) that are necessary to enable single sign-on authentication with the AWS CLI. Support for other OIDC flows frequently needed for native applications, such as Authorization Code Flow (+ PKCE), will be addressed in future releases.</p> </li> <li> <p>The service emits only OIDC access tokens, such that obtaining a new token (For example, token refresh) requires explicit user re-authentication.</p> </li> <li> <p>The access tokens provided by this service grant access to all AWS account entitlements assigned to an IAM Identity Center user, not just a particular application.</p> </li> <li> <p>The documentation in this guide does not describe the mechanism to convert the access token into AWS Auth (“sigv4”) credentials for use with IAM-protected AWS service endpoints. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/PortalAPIReference/API_GetRoleCredentials.html\">GetRoleCredentials</a> in the <i>IAM Identity Center Portal API Reference Guide</i>.</p> </li> </ul> <p>For general information about IAM Identity Center, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">What is IAM Identity Center?</a> in the <i>IAM Identity Center User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import CreateTokenRequest from './model/CreateTokenRequest';
import CreateTokenResponse from './model/CreateTokenResponse';
import RegisterClientRequest from './model/RegisterClientRequest';
import RegisterClientResponse from './model/RegisterClientResponse';
import StartDeviceAuthorizationRequest from './model/StartDeviceAuthorizationRequest';
import StartDeviceAuthorizationResponse from './model/StartDeviceAuthorizationResponse';
import DefaultApi from './api/DefaultApi';


/**
* &lt;p&gt;AWS IAM Identity Center (successor to AWS Single Sign-On) OpenID Connect (OIDC) is a web service that enables a client (such as AWS CLI or a native application) to register with IAM Identity Center. The service also enables the client to fetch the user’s access token upon successful authentication and authorization with IAM Identity Center.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Although AWS Single Sign-On was renamed, the &lt;code&gt;sso&lt;/code&gt; and &lt;code&gt;identitystore&lt;/code&gt; API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\&quot;&gt;IAM Identity Center rename&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;Considerations for Using This Guide&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Before you begin using this guide, we recommend that you first review the following important information about how the IAM Identity Center OIDC service works.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The IAM Identity Center OIDC service currently implements only the portions of the OAuth 2.0 Device Authorization Grant standard (&lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc8628\&quot;&gt;https://tools.ietf.org/html/rfc8628&lt;/a&gt;) that are necessary to enable single sign-on authentication with the AWS CLI. Support for other OIDC flows frequently needed for native applications, such as Authorization Code Flow (+ PKCE), will be addressed in future releases.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The service emits only OIDC access tokens, such that obtaining a new token (For example, token refresh) requires explicit user re-authentication.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The access tokens provided by this service grant access to all AWS account entitlements assigned to an IAM Identity Center user, not just a particular application.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The documentation in this guide does not describe the mechanism to convert the access token into AWS Auth (“sigv4”) credentials for use with IAM-protected AWS service endpoints. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/PortalAPIReference/API_GetRoleCredentials.html\&quot;&gt;GetRoleCredentials&lt;/a&gt; in the &lt;i&gt;IAM Identity Center Portal API Reference Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For general information about IAM Identity Center, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\&quot;&gt;What is IAM Identity Center?&lt;/a&gt; in the &lt;i&gt;IAM Identity Center User Guide&lt;/i&gt;.&lt;/p&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AwsSsoOidc = require('index'); // See note below*.
* var xxxSvc = new AwsSsoOidc.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AwsSsoOidc.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AwsSsoOidc.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AwsSsoOidc.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2019-06-10
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CreateTokenRequest model constructor.
     * @property {module:model/CreateTokenRequest}
     */
    CreateTokenRequest,

    /**
     * The CreateTokenResponse model constructor.
     * @property {module:model/CreateTokenResponse}
     */
    CreateTokenResponse,

    /**
     * The RegisterClientRequest model constructor.
     * @property {module:model/RegisterClientRequest}
     */
    RegisterClientRequest,

    /**
     * The RegisterClientResponse model constructor.
     * @property {module:model/RegisterClientResponse}
     */
    RegisterClientResponse,

    /**
     * The StartDeviceAuthorizationRequest model constructor.
     * @property {module:model/StartDeviceAuthorizationRequest}
     */
    StartDeviceAuthorizationRequest,

    /**
     * The StartDeviceAuthorizationResponse model constructor.
     * @property {module:model/StartDeviceAuthorizationResponse}
     */
    StartDeviceAuthorizationResponse,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
