/**
 * AWS SSO OIDC
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) OpenID Connect (OIDC) is a web service that enables a client (such as AWS CLI or a native application) to register with IAM Identity Center. The service also enables the client to fetch the user’s access token upon successful authentication and authorization with IAM Identity Center.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p> <b>Considerations for Using This Guide</b> </p> <p>Before you begin using this guide, we recommend that you first review the following important information about how the IAM Identity Center OIDC service works.</p> <ul> <li> <p>The IAM Identity Center OIDC service currently implements only the portions of the OAuth 2.0 Device Authorization Grant standard (<a href=\"https://tools.ietf.org/html/rfc8628\">https://tools.ietf.org/html/rfc8628</a>) that are necessary to enable single sign-on authentication with the AWS CLI. Support for other OIDC flows frequently needed for native applications, such as Authorization Code Flow (+ PKCE), will be addressed in future releases.</p> </li> <li> <p>The service emits only OIDC access tokens, such that obtaining a new token (For example, token refresh) requires explicit user re-authentication.</p> </li> <li> <p>The access tokens provided by this service grant access to all AWS account entitlements assigned to an IAM Identity Center user, not just a particular application.</p> </li> <li> <p>The documentation in this guide does not describe the mechanism to convert the access token into AWS Auth (“sigv4”) credentials for use with IAM-protected AWS service endpoints. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/PortalAPIReference/API_GetRoleCredentials.html\">GetRoleCredentials</a> in the <i>IAM Identity Center Portal API Reference Guide</i>.</p> </li> </ul> <p>For general information about IAM Identity Center, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">What is IAM Identity Center?</a> in the <i>IAM Identity Center User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateTokenRequest model module.
 * @module model/CreateTokenRequest
 * @version 2019-06-10
 */
class CreateTokenRequest {
    /**
     * Constructs a new <code>CreateTokenRequest</code>.
     * @alias module:model/CreateTokenRequest
     * @param clientId {String} The unique identifier string for each client. This value should come from the persisted result of the <a>RegisterClient</a> API.
     * @param clientSecret {String} A secret string generated for the client. This value should come from the persisted result of the <a>RegisterClient</a> API.
     * @param grantType {String} <p>Supports grant types for the authorization code, refresh token, and device code request. For device code requests, specify the following value:</p> <p> <code>urn:ietf:params:oauth:grant-type:<i>device_code</i> </code> </p> <p>For information about how to obtain the device code, see the <a>StartDeviceAuthorization</a> topic.</p>
     */
    constructor(clientId, clientSecret, grantType) { 
        
        CreateTokenRequest.initialize(this, clientId, clientSecret, grantType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientId, clientSecret, grantType) { 
        obj['clientId'] = clientId;
        obj['clientSecret'] = clientSecret;
        obj['grantType'] = grantType;
    }

    /**
     * Constructs a <code>CreateTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateTokenRequest} obj Optional instance to populate.
     * @return {module:model/CreateTokenRequest} The populated <code>CreateTokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateTokenRequest();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientSecret')) {
                obj['clientSecret'] = ApiClient.convertToType(data['clientSecret'], 'String');
            }
            if (data.hasOwnProperty('grantType')) {
                obj['grantType'] = ApiClient.convertToType(data['grantType'], 'String');
            }
            if (data.hasOwnProperty('deviceCode')) {
                obj['deviceCode'] = ApiClient.convertToType(data['deviceCode'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('refreshToken')) {
                obj['refreshToken'] = ApiClient.convertToType(data['refreshToken'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], ['String']);
            }
            if (data.hasOwnProperty('redirectUri')) {
                obj['redirectUri'] = ApiClient.convertToType(data['redirectUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateTokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateTokenRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateTokenRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientSecret'] && !(typeof data['clientSecret'] === 'string' || data['clientSecret'] instanceof String)) {
            throw new Error("Expected the field `clientSecret` to be a primitive type in the JSON string but got " + data['clientSecret']);
        }
        // ensure the json data is a string
        if (data['grantType'] && !(typeof data['grantType'] === 'string' || data['grantType'] instanceof String)) {
            throw new Error("Expected the field `grantType` to be a primitive type in the JSON string but got " + data['grantType']);
        }
        // ensure the json data is a string
        if (data['deviceCode'] && !(typeof data['deviceCode'] === 'string' || data['deviceCode'] instanceof String)) {
            throw new Error("Expected the field `deviceCode` to be a primitive type in the JSON string but got " + data['deviceCode']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['refreshToken'] && !(typeof data['refreshToken'] === 'string' || data['refreshToken'] instanceof String)) {
            throw new Error("Expected the field `refreshToken` to be a primitive type in the JSON string but got " + data['refreshToken']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scope'])) {
            throw new Error("Expected the field `scope` to be an array in the JSON data but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['redirectUri'] && !(typeof data['redirectUri'] === 'string' || data['redirectUri'] instanceof String)) {
            throw new Error("Expected the field `redirectUri` to be a primitive type in the JSON string but got " + data['redirectUri']);
        }

        return true;
    }


}

CreateTokenRequest.RequiredProperties = ["clientId", "clientSecret", "grantType"];

/**
 * The unique identifier string for each client. This value should come from the persisted result of the <a>RegisterClient</a> API.
 * @member {String} clientId
 */
CreateTokenRequest.prototype['clientId'] = undefined;

/**
 * A secret string generated for the client. This value should come from the persisted result of the <a>RegisterClient</a> API.
 * @member {String} clientSecret
 */
CreateTokenRequest.prototype['clientSecret'] = undefined;

/**
 * <p>Supports grant types for the authorization code, refresh token, and device code request. For device code requests, specify the following value:</p> <p> <code>urn:ietf:params:oauth:grant-type:<i>device_code</i> </code> </p> <p>For information about how to obtain the device code, see the <a>StartDeviceAuthorization</a> topic.</p>
 * @member {String} grantType
 */
CreateTokenRequest.prototype['grantType'] = undefined;

/**
 * Used only when calling this API for the device code grant type. This short-term code is used to identify this authentication attempt. This should come from an in-memory reference to the result of the <a>StartDeviceAuthorization</a> API.
 * @member {String} deviceCode
 */
CreateTokenRequest.prototype['deviceCode'] = undefined;

/**
 * The authorization code received from the authorization service. This parameter is required to perform an authorization grant request to get access to a token.
 * @member {String} code
 */
CreateTokenRequest.prototype['code'] = undefined;

/**
 * <p>Currently, <code>refreshToken</code> is not yet implemented and is not supported. For more information about the features and limitations of the current IAM Identity Center OIDC implementation, see <i>Considerations for Using this Guide</i> in the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/Welcome.html\">IAM Identity Center OIDC API Reference</a>.</p> <p>The token used to obtain an access token in the event that the access token is invalid or expired.</p>
 * @member {String} refreshToken
 */
CreateTokenRequest.prototype['refreshToken'] = undefined;

/**
 * The list of scopes that is defined by the client. Upon authorization, this list is used to restrict permissions when granting an access token.
 * @member {Array.<String>} scope
 */
CreateTokenRequest.prototype['scope'] = undefined;

/**
 * The location of the application that will receive the authorization code. Users authorize the service to send the request to this location.
 * @member {String} redirectUri
 */
CreateTokenRequest.prototype['redirectUri'] = undefined;






export default CreateTokenRequest;

