/*
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateHealthCheckRequestHealthCheckConfigAlarmIdentifier;
import org.openapitools.client.model.HealthCheckType;
import org.openapitools.client.model.InsufficientDataHealthStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateHealthCheckRequestHealthCheckConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:28.020907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateHealthCheckRequestHealthCheckConfig {
  public static final String SERIALIZED_NAME_IP_ADDRESS = "IPAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private HealthCheckType type;

  public static final String SERIALIZED_NAME_RESOURCE_PATH = "ResourcePath";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PATH)
  private String resourcePath;

  public static final String SERIALIZED_NAME_FULLY_QUALIFIED_DOMAIN_NAME = "FullyQualifiedDomainName";
  @SerializedName(SERIALIZED_NAME_FULLY_QUALIFIED_DOMAIN_NAME)
  private String fullyQualifiedDomainName;

  public static final String SERIALIZED_NAME_SEARCH_STRING = "SearchString";
  @SerializedName(SERIALIZED_NAME_SEARCH_STRING)
  private String searchString;

  public static final String SERIALIZED_NAME_REQUEST_INTERVAL = "RequestInterval";
  @SerializedName(SERIALIZED_NAME_REQUEST_INTERVAL)
  private Integer requestInterval;

  public static final String SERIALIZED_NAME_FAILURE_THRESHOLD = "FailureThreshold";
  @SerializedName(SERIALIZED_NAME_FAILURE_THRESHOLD)
  private Integer failureThreshold;

  public static final String SERIALIZED_NAME_MEASURE_LATENCY = "MeasureLatency";
  @SerializedName(SERIALIZED_NAME_MEASURE_LATENCY)
  private Boolean measureLatency;

  public static final String SERIALIZED_NAME_INVERTED = "Inverted";
  @SerializedName(SERIALIZED_NAME_INVERTED)
  private Boolean inverted;

  public static final String SERIALIZED_NAME_DISABLED = "Disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_HEALTH_THRESHOLD = "HealthThreshold";
  @SerializedName(SERIALIZED_NAME_HEALTH_THRESHOLD)
  private Integer healthThreshold;

  public static final String SERIALIZED_NAME_CHILD_HEALTH_CHECKS = "ChildHealthChecks";
  @SerializedName(SERIALIZED_NAME_CHILD_HEALTH_CHECKS)
  private List childHealthChecks;

  public static final String SERIALIZED_NAME_ENABLE_S_N_I = "EnableSNI";
  @SerializedName(SERIALIZED_NAME_ENABLE_S_N_I)
  private Boolean enableSNI;

  public static final String SERIALIZED_NAME_REGIONS = "Regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List regions;

  public static final String SERIALIZED_NAME_ALARM_IDENTIFIER = "AlarmIdentifier";
  @SerializedName(SERIALIZED_NAME_ALARM_IDENTIFIER)
  private CreateHealthCheckRequestHealthCheckConfigAlarmIdentifier alarmIdentifier;

  public static final String SERIALIZED_NAME_INSUFFICIENT_DATA_HEALTH_STATUS = "InsufficientDataHealthStatus";
  @SerializedName(SERIALIZED_NAME_INSUFFICIENT_DATA_HEALTH_STATUS)
  private InsufficientDataHealthStatus insufficientDataHealthStatus;

  public static final String SERIALIZED_NAME_ROUTING_CONTROL_ARN = "RoutingControlArn";
  @SerializedName(SERIALIZED_NAME_ROUTING_CONTROL_ARN)
  private String routingControlArn;

  public CreateHealthCheckRequestHealthCheckConfig() {
  }

  public CreateHealthCheckRequestHealthCheckConfig ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public CreateHealthCheckRequestHealthCheckConfig port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public CreateHealthCheckRequestHealthCheckConfig type(HealthCheckType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public HealthCheckType getType() {
    return type;
  }

  public void setType(HealthCheckType type) {
    this.type = type;
  }


  public CreateHealthCheckRequestHealthCheckConfig resourcePath(String resourcePath) {
    this.resourcePath = resourcePath;
    return this;
  }

  /**
   * Get resourcePath
   * @return resourcePath
   */
  @javax.annotation.Nullable
  public String getResourcePath() {
    return resourcePath;
  }

  public void setResourcePath(String resourcePath) {
    this.resourcePath = resourcePath;
  }


  public CreateHealthCheckRequestHealthCheckConfig fullyQualifiedDomainName(String fullyQualifiedDomainName) {
    this.fullyQualifiedDomainName = fullyQualifiedDomainName;
    return this;
  }

  /**
   * Get fullyQualifiedDomainName
   * @return fullyQualifiedDomainName
   */
  @javax.annotation.Nullable
  public String getFullyQualifiedDomainName() {
    return fullyQualifiedDomainName;
  }

  public void setFullyQualifiedDomainName(String fullyQualifiedDomainName) {
    this.fullyQualifiedDomainName = fullyQualifiedDomainName;
  }


  public CreateHealthCheckRequestHealthCheckConfig searchString(String searchString) {
    this.searchString = searchString;
    return this;
  }

  /**
   * Get searchString
   * @return searchString
   */
  @javax.annotation.Nullable
  public String getSearchString() {
    return searchString;
  }

  public void setSearchString(String searchString) {
    this.searchString = searchString;
  }


  public CreateHealthCheckRequestHealthCheckConfig requestInterval(Integer requestInterval) {
    this.requestInterval = requestInterval;
    return this;
  }

  /**
   * Get requestInterval
   * @return requestInterval
   */
  @javax.annotation.Nullable
  public Integer getRequestInterval() {
    return requestInterval;
  }

  public void setRequestInterval(Integer requestInterval) {
    this.requestInterval = requestInterval;
  }


  public CreateHealthCheckRequestHealthCheckConfig failureThreshold(Integer failureThreshold) {
    this.failureThreshold = failureThreshold;
    return this;
  }

  /**
   * Get failureThreshold
   * @return failureThreshold
   */
  @javax.annotation.Nullable
  public Integer getFailureThreshold() {
    return failureThreshold;
  }

  public void setFailureThreshold(Integer failureThreshold) {
    this.failureThreshold = failureThreshold;
  }


  public CreateHealthCheckRequestHealthCheckConfig measureLatency(Boolean measureLatency) {
    this.measureLatency = measureLatency;
    return this;
  }

  /**
   * Get measureLatency
   * @return measureLatency
   */
  @javax.annotation.Nullable
  public Boolean getMeasureLatency() {
    return measureLatency;
  }

  public void setMeasureLatency(Boolean measureLatency) {
    this.measureLatency = measureLatency;
  }


  public CreateHealthCheckRequestHealthCheckConfig inverted(Boolean inverted) {
    this.inverted = inverted;
    return this;
  }

  /**
   * Get inverted
   * @return inverted
   */
  @javax.annotation.Nullable
  public Boolean getInverted() {
    return inverted;
  }

  public void setInverted(Boolean inverted) {
    this.inverted = inverted;
  }


  public CreateHealthCheckRequestHealthCheckConfig disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Get disabled
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public CreateHealthCheckRequestHealthCheckConfig healthThreshold(Integer healthThreshold) {
    this.healthThreshold = healthThreshold;
    return this;
  }

  /**
   * Get healthThreshold
   * @return healthThreshold
   */
  @javax.annotation.Nullable
  public Integer getHealthThreshold() {
    return healthThreshold;
  }

  public void setHealthThreshold(Integer healthThreshold) {
    this.healthThreshold = healthThreshold;
  }


  public CreateHealthCheckRequestHealthCheckConfig childHealthChecks(List childHealthChecks) {
    this.childHealthChecks = childHealthChecks;
    return this;
  }

  /**
   * Get childHealthChecks
   * @return childHealthChecks
   */
  @javax.annotation.Nullable
  public List getChildHealthChecks() {
    return childHealthChecks;
  }

  public void setChildHealthChecks(List childHealthChecks) {
    this.childHealthChecks = childHealthChecks;
  }


  public CreateHealthCheckRequestHealthCheckConfig enableSNI(Boolean enableSNI) {
    this.enableSNI = enableSNI;
    return this;
  }

  /**
   * Get enableSNI
   * @return enableSNI
   */
  @javax.annotation.Nullable
  public Boolean getEnableSNI() {
    return enableSNI;
  }

  public void setEnableSNI(Boolean enableSNI) {
    this.enableSNI = enableSNI;
  }


  public CreateHealthCheckRequestHealthCheckConfig regions(List regions) {
    this.regions = regions;
    return this;
  }

  /**
   * Get regions
   * @return regions
   */
  @javax.annotation.Nullable
  public List getRegions() {
    return regions;
  }

  public void setRegions(List regions) {
    this.regions = regions;
  }


  public CreateHealthCheckRequestHealthCheckConfig alarmIdentifier(CreateHealthCheckRequestHealthCheckConfigAlarmIdentifier alarmIdentifier) {
    this.alarmIdentifier = alarmIdentifier;
    return this;
  }

  /**
   * Get alarmIdentifier
   * @return alarmIdentifier
   */
  @javax.annotation.Nullable
  public CreateHealthCheckRequestHealthCheckConfigAlarmIdentifier getAlarmIdentifier() {
    return alarmIdentifier;
  }

  public void setAlarmIdentifier(CreateHealthCheckRequestHealthCheckConfigAlarmIdentifier alarmIdentifier) {
    this.alarmIdentifier = alarmIdentifier;
  }


  public CreateHealthCheckRequestHealthCheckConfig insufficientDataHealthStatus(InsufficientDataHealthStatus insufficientDataHealthStatus) {
    this.insufficientDataHealthStatus = insufficientDataHealthStatus;
    return this;
  }

  /**
   * Get insufficientDataHealthStatus
   * @return insufficientDataHealthStatus
   */
  @javax.annotation.Nullable
  public InsufficientDataHealthStatus getInsufficientDataHealthStatus() {
    return insufficientDataHealthStatus;
  }

  public void setInsufficientDataHealthStatus(InsufficientDataHealthStatus insufficientDataHealthStatus) {
    this.insufficientDataHealthStatus = insufficientDataHealthStatus;
  }


  public CreateHealthCheckRequestHealthCheckConfig routingControlArn(String routingControlArn) {
    this.routingControlArn = routingControlArn;
    return this;
  }

  /**
   * Get routingControlArn
   * @return routingControlArn
   */
  @javax.annotation.Nullable
  public String getRoutingControlArn() {
    return routingControlArn;
  }

  public void setRoutingControlArn(String routingControlArn) {
    this.routingControlArn = routingControlArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateHealthCheckRequestHealthCheckConfig createHealthCheckRequestHealthCheckConfig = (CreateHealthCheckRequestHealthCheckConfig) o;
    return Objects.equals(this.ipAddress, createHealthCheckRequestHealthCheckConfig.ipAddress) &&
        Objects.equals(this.port, createHealthCheckRequestHealthCheckConfig.port) &&
        Objects.equals(this.type, createHealthCheckRequestHealthCheckConfig.type) &&
        Objects.equals(this.resourcePath, createHealthCheckRequestHealthCheckConfig.resourcePath) &&
        Objects.equals(this.fullyQualifiedDomainName, createHealthCheckRequestHealthCheckConfig.fullyQualifiedDomainName) &&
        Objects.equals(this.searchString, createHealthCheckRequestHealthCheckConfig.searchString) &&
        Objects.equals(this.requestInterval, createHealthCheckRequestHealthCheckConfig.requestInterval) &&
        Objects.equals(this.failureThreshold, createHealthCheckRequestHealthCheckConfig.failureThreshold) &&
        Objects.equals(this.measureLatency, createHealthCheckRequestHealthCheckConfig.measureLatency) &&
        Objects.equals(this.inverted, createHealthCheckRequestHealthCheckConfig.inverted) &&
        Objects.equals(this.disabled, createHealthCheckRequestHealthCheckConfig.disabled) &&
        Objects.equals(this.healthThreshold, createHealthCheckRequestHealthCheckConfig.healthThreshold) &&
        Objects.equals(this.childHealthChecks, createHealthCheckRequestHealthCheckConfig.childHealthChecks) &&
        Objects.equals(this.enableSNI, createHealthCheckRequestHealthCheckConfig.enableSNI) &&
        Objects.equals(this.regions, createHealthCheckRequestHealthCheckConfig.regions) &&
        Objects.equals(this.alarmIdentifier, createHealthCheckRequestHealthCheckConfig.alarmIdentifier) &&
        Objects.equals(this.insufficientDataHealthStatus, createHealthCheckRequestHealthCheckConfig.insufficientDataHealthStatus) &&
        Objects.equals(this.routingControlArn, createHealthCheckRequestHealthCheckConfig.routingControlArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipAddress, port, type, resourcePath, fullyQualifiedDomainName, searchString, requestInterval, failureThreshold, measureLatency, inverted, disabled, healthThreshold, childHealthChecks, enableSNI, regions, alarmIdentifier, insufficientDataHealthStatus, routingControlArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateHealthCheckRequestHealthCheckConfig {\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    resourcePath: ").append(toIndentedString(resourcePath)).append("\n");
    sb.append("    fullyQualifiedDomainName: ").append(toIndentedString(fullyQualifiedDomainName)).append("\n");
    sb.append("    searchString: ").append(toIndentedString(searchString)).append("\n");
    sb.append("    requestInterval: ").append(toIndentedString(requestInterval)).append("\n");
    sb.append("    failureThreshold: ").append(toIndentedString(failureThreshold)).append("\n");
    sb.append("    measureLatency: ").append(toIndentedString(measureLatency)).append("\n");
    sb.append("    inverted: ").append(toIndentedString(inverted)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    healthThreshold: ").append(toIndentedString(healthThreshold)).append("\n");
    sb.append("    childHealthChecks: ").append(toIndentedString(childHealthChecks)).append("\n");
    sb.append("    enableSNI: ").append(toIndentedString(enableSNI)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    alarmIdentifier: ").append(toIndentedString(alarmIdentifier)).append("\n");
    sb.append("    insufficientDataHealthStatus: ").append(toIndentedString(insufficientDataHealthStatus)).append("\n");
    sb.append("    routingControlArn: ").append(toIndentedString(routingControlArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IPAddress");
    openapiFields.add("Port");
    openapiFields.add("Type");
    openapiFields.add("ResourcePath");
    openapiFields.add("FullyQualifiedDomainName");
    openapiFields.add("SearchString");
    openapiFields.add("RequestInterval");
    openapiFields.add("FailureThreshold");
    openapiFields.add("MeasureLatency");
    openapiFields.add("Inverted");
    openapiFields.add("Disabled");
    openapiFields.add("HealthThreshold");
    openapiFields.add("ChildHealthChecks");
    openapiFields.add("EnableSNI");
    openapiFields.add("Regions");
    openapiFields.add("AlarmIdentifier");
    openapiFields.add("InsufficientDataHealthStatus");
    openapiFields.add("RoutingControlArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateHealthCheckRequestHealthCheckConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateHealthCheckRequestHealthCheckConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateHealthCheckRequestHealthCheckConfig is not found in the empty JSON string", CreateHealthCheckRequestHealthCheckConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateHealthCheckRequestHealthCheckConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateHealthCheckRequestHealthCheckConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateHealthCheckRequestHealthCheckConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `IPAddress`
      if (jsonObj.get("IPAddress") != null && !jsonObj.get("IPAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IPAddress"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the required field `Type`
      HealthCheckType.validateJsonElement(jsonObj.get("Type"));
      // validate the optional field `ResourcePath`
      if (jsonObj.get("ResourcePath") != null && !jsonObj.get("ResourcePath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourcePath"));
      }
      // validate the optional field `FullyQualifiedDomainName`
      if (jsonObj.get("FullyQualifiedDomainName") != null && !jsonObj.get("FullyQualifiedDomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FullyQualifiedDomainName"));
      }
      // validate the optional field `SearchString`
      if (jsonObj.get("SearchString") != null && !jsonObj.get("SearchString").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SearchString"));
      }
      // validate the optional field `RequestInterval`
      if (jsonObj.get("RequestInterval") != null && !jsonObj.get("RequestInterval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RequestInterval"));
      }
      // validate the optional field `FailureThreshold`
      if (jsonObj.get("FailureThreshold") != null && !jsonObj.get("FailureThreshold").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailureThreshold"));
      }
      // validate the optional field `MeasureLatency`
      if (jsonObj.get("MeasureLatency") != null && !jsonObj.get("MeasureLatency").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("MeasureLatency"));
      }
      // validate the optional field `Inverted`
      if (jsonObj.get("Inverted") != null && !jsonObj.get("Inverted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Inverted"));
      }
      // validate the optional field `Disabled`
      if (jsonObj.get("Disabled") != null && !jsonObj.get("Disabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Disabled"));
      }
      // validate the optional field `HealthThreshold`
      if (jsonObj.get("HealthThreshold") != null && !jsonObj.get("HealthThreshold").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HealthThreshold"));
      }
      // validate the optional field `ChildHealthChecks`
      if (jsonObj.get("ChildHealthChecks") != null && !jsonObj.get("ChildHealthChecks").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ChildHealthChecks"));
      }
      // validate the optional field `EnableSNI`
      if (jsonObj.get("EnableSNI") != null && !jsonObj.get("EnableSNI").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableSNI"));
      }
      // validate the optional field `Regions`
      if (jsonObj.get("Regions") != null && !jsonObj.get("Regions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Regions"));
      }
      // validate the optional field `AlarmIdentifier`
      if (jsonObj.get("AlarmIdentifier") != null && !jsonObj.get("AlarmIdentifier").isJsonNull()) {
        CreateHealthCheckRequestHealthCheckConfigAlarmIdentifier.validateJsonElement(jsonObj.get("AlarmIdentifier"));
      }
      // validate the optional field `InsufficientDataHealthStatus`
      if (jsonObj.get("InsufficientDataHealthStatus") != null && !jsonObj.get("InsufficientDataHealthStatus").isJsonNull()) {
        InsufficientDataHealthStatus.validateJsonElement(jsonObj.get("InsufficientDataHealthStatus"));
      }
      // validate the optional field `RoutingControlArn`
      if (jsonObj.get("RoutingControlArn") != null && !jsonObj.get("RoutingControlArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoutingControlArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateHealthCheckRequestHealthCheckConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateHealthCheckRequestHealthCheckConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateHealthCheckRequestHealthCheckConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateHealthCheckRequestHealthCheckConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateHealthCheckRequestHealthCheckConfig>() {
           @Override
           public void write(JsonWriter out, CreateHealthCheckRequestHealthCheckConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateHealthCheckRequestHealthCheckConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateHealthCheckRequestHealthCheckConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateHealthCheckRequestHealthCheckConfig
   * @throws IOException if the JSON string is invalid with respect to CreateHealthCheckRequestHealthCheckConfig
   */
  public static CreateHealthCheckRequestHealthCheckConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateHealthCheckRequestHealthCheckConfig.class);
  }

  /**
   * Convert an instance of CreateHealthCheckRequestHealthCheckConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

