/*
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateTrafficPolicyInstanceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:28.020907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateTrafficPolicyInstanceRequest {
  public static final String SERIALIZED_NAME_HOSTED_ZONE_ID = "HostedZoneId";
  @SerializedName(SERIALIZED_NAME_HOSTED_ZONE_ID)
  private String hostedZoneId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_T_T_L = "TTL";
  @SerializedName(SERIALIZED_NAME_T_T_L)
  private Integer TTL;

  public static final String SERIALIZED_NAME_TRAFFIC_POLICY_ID = "TrafficPolicyId";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_POLICY_ID)
  private String trafficPolicyId;

  public static final String SERIALIZED_NAME_TRAFFIC_POLICY_VERSION = "TrafficPolicyVersion";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_POLICY_VERSION)
  private Integer trafficPolicyVersion;

  public CreateTrafficPolicyInstanceRequest() {
  }

  public CreateTrafficPolicyInstanceRequest hostedZoneId(String hostedZoneId) {
    this.hostedZoneId = hostedZoneId;
    return this;
  }

  /**
   * The ID of the hosted zone that you want Amazon Route 53 to create resource record sets in by using the configuration in a traffic policy.
   * @return hostedZoneId
   */
  @javax.annotation.Nonnull
  public String getHostedZoneId() {
    return hostedZoneId;
  }

  public void setHostedZoneId(String hostedZoneId) {
    this.hostedZoneId = hostedZoneId;
  }


  public CreateTrafficPolicyInstanceRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The domain name (such as example.com) or subdomain name (such as www.example.com) for which Amazon Route 53 responds to DNS queries by using the resource record sets that Route 53 creates for this traffic policy instance.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateTrafficPolicyInstanceRequest TTL(Integer TTL) {
    this.TTL = TTL;
    return this;
  }

  /**
   * (Optional) The TTL that you want Amazon Route 53 to assign to all of the resource record sets that it creates in the specified hosted zone.
   * minimum: 0
   * maximum: 2147483647
   * @return TTL
   */
  @javax.annotation.Nonnull
  public Integer getTTL() {
    return TTL;
  }

  public void setTTL(Integer TTL) {
    this.TTL = TTL;
  }


  public CreateTrafficPolicyInstanceRequest trafficPolicyId(String trafficPolicyId) {
    this.trafficPolicyId = trafficPolicyId;
    return this;
  }

  /**
   * The ID of the traffic policy that you want to use to create resource record sets in the specified hosted zone.
   * @return trafficPolicyId
   */
  @javax.annotation.Nonnull
  public String getTrafficPolicyId() {
    return trafficPolicyId;
  }

  public void setTrafficPolicyId(String trafficPolicyId) {
    this.trafficPolicyId = trafficPolicyId;
  }


  public CreateTrafficPolicyInstanceRequest trafficPolicyVersion(Integer trafficPolicyVersion) {
    this.trafficPolicyVersion = trafficPolicyVersion;
    return this;
  }

  /**
   * The version of the traffic policy that you want to use to create resource record sets in the specified hosted zone.
   * minimum: 1
   * maximum: 1000
   * @return trafficPolicyVersion
   */
  @javax.annotation.Nonnull
  public Integer getTrafficPolicyVersion() {
    return trafficPolicyVersion;
  }

  public void setTrafficPolicyVersion(Integer trafficPolicyVersion) {
    this.trafficPolicyVersion = trafficPolicyVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTrafficPolicyInstanceRequest createTrafficPolicyInstanceRequest = (CreateTrafficPolicyInstanceRequest) o;
    return Objects.equals(this.hostedZoneId, createTrafficPolicyInstanceRequest.hostedZoneId) &&
        Objects.equals(this.name, createTrafficPolicyInstanceRequest.name) &&
        Objects.equals(this.TTL, createTrafficPolicyInstanceRequest.TTL) &&
        Objects.equals(this.trafficPolicyId, createTrafficPolicyInstanceRequest.trafficPolicyId) &&
        Objects.equals(this.trafficPolicyVersion, createTrafficPolicyInstanceRequest.trafficPolicyVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostedZoneId, name, TTL, trafficPolicyId, trafficPolicyVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTrafficPolicyInstanceRequest {\n");
    sb.append("    hostedZoneId: ").append(toIndentedString(hostedZoneId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    TTL: ").append(toIndentedString(TTL)).append("\n");
    sb.append("    trafficPolicyId: ").append(toIndentedString(trafficPolicyId)).append("\n");
    sb.append("    trafficPolicyVersion: ").append(toIndentedString(trafficPolicyVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HostedZoneId");
    openapiFields.add("Name");
    openapiFields.add("TTL");
    openapiFields.add("TrafficPolicyId");
    openapiFields.add("TrafficPolicyVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HostedZoneId");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("TTL");
    openapiRequiredFields.add("TrafficPolicyId");
    openapiRequiredFields.add("TrafficPolicyVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTrafficPolicyInstanceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTrafficPolicyInstanceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTrafficPolicyInstanceRequest is not found in the empty JSON string", CreateTrafficPolicyInstanceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateTrafficPolicyInstanceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTrafficPolicyInstanceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTrafficPolicyInstanceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("HostedZoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HostedZoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HostedZoneId").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("TrafficPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrafficPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrafficPolicyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTrafficPolicyInstanceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTrafficPolicyInstanceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTrafficPolicyInstanceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTrafficPolicyInstanceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTrafficPolicyInstanceRequest>() {
           @Override
           public void write(JsonWriter out, CreateTrafficPolicyInstanceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTrafficPolicyInstanceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTrafficPolicyInstanceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTrafficPolicyInstanceRequest
   * @throws IOException if the JSON string is invalid with respect to CreateTrafficPolicyInstanceRequest
   */
  public static CreateTrafficPolicyInstanceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTrafficPolicyInstanceRequest.class);
  }

  /**
   * Convert an instance of CreateTrafficPolicyInstanceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

