/*
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CidrCollectionChange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChangeCidrCollectionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:28.020907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChangeCidrCollectionRequest {
  public static final String SERIALIZED_NAME_COLLECTION_VERSION = "CollectionVersion";
  @SerializedName(SERIALIZED_NAME_COLLECTION_VERSION)
  private Integer collectionVersion;

  public static final String SERIALIZED_NAME_CHANGES = "Changes";
  @SerializedName(SERIALIZED_NAME_CHANGES)
  private List<CidrCollectionChange> changes = new ArrayList<>();

  public ChangeCidrCollectionRequest() {
  }

  public ChangeCidrCollectionRequest collectionVersion(Integer collectionVersion) {
    this.collectionVersion = collectionVersion;
    return this;
  }

  /**
   * &lt;p&gt;A sequential counter that Amazon Route 53 sets to 1 when you create a collection and increments it by 1 each time you update the collection.&lt;/p&gt; &lt;p&gt;We recommend that you use &lt;code&gt;ListCidrCollection&lt;/code&gt; to get the current value of &lt;code&gt;CollectionVersion&lt;/code&gt; for the collection that you want to update, and then include that value with the change request. This prevents Route 53 from overwriting an intervening update: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the value in the request matches the value of &lt;code&gt;CollectionVersion&lt;/code&gt; in the collection, Route 53 updates the collection.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value of &lt;code&gt;CollectionVersion&lt;/code&gt; in the collection is greater than the value in the request, the collection was changed after you got the version number. Route 53 does not update the collection, and it returns a &lt;code&gt;CidrCollectionVersionMismatch&lt;/code&gt; error. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * minimum: 1
   * @return collectionVersion
   */
  @javax.annotation.Nullable
  public Integer getCollectionVersion() {
    return collectionVersion;
  }

  public void setCollectionVersion(Integer collectionVersion) {
    this.collectionVersion = collectionVersion;
  }


  public ChangeCidrCollectionRequest changes(List<CidrCollectionChange> changes) {
    this.changes = changes;
    return this;
  }

  public ChangeCidrCollectionRequest addChangesItem(CidrCollectionChange changesItem) {
    if (this.changes == null) {
      this.changes = new ArrayList<>();
    }
    this.changes.add(changesItem);
    return this;
  }

  /**
   *  Information about changes to a CIDR collection.
   * @return changes
   */
  @javax.annotation.Nonnull
  public List<CidrCollectionChange> getChanges() {
    return changes;
  }

  public void setChanges(List<CidrCollectionChange> changes) {
    this.changes = changes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeCidrCollectionRequest changeCidrCollectionRequest = (ChangeCidrCollectionRequest) o;
    return Objects.equals(this.collectionVersion, changeCidrCollectionRequest.collectionVersion) &&
        Objects.equals(this.changes, changeCidrCollectionRequest.changes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionVersion, changes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeCidrCollectionRequest {\n");
    sb.append("    collectionVersion: ").append(toIndentedString(collectionVersion)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CollectionVersion");
    openapiFields.add("Changes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Changes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangeCidrCollectionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangeCidrCollectionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangeCidrCollectionRequest is not found in the empty JSON string", ChangeCidrCollectionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangeCidrCollectionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangeCidrCollectionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChangeCidrCollectionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("Changes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Changes` to be an array in the JSON string but got `%s`", jsonObj.get("Changes").toString()));
      }

      JsonArray jsonArraychanges = jsonObj.getAsJsonArray("Changes");
      // validate the required field `Changes` (array)
      for (int i = 0; i < jsonArraychanges.size(); i++) {
        CidrCollectionChange.validateJsonElement(jsonArraychanges.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangeCidrCollectionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangeCidrCollectionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangeCidrCollectionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangeCidrCollectionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangeCidrCollectionRequest>() {
           @Override
           public void write(JsonWriter out, ChangeCidrCollectionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangeCidrCollectionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangeCidrCollectionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangeCidrCollectionRequest
   * @throws IOException if the JSON string is invalid with respect to ChangeCidrCollectionRequest
   */
  public static ChangeCidrCollectionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangeCidrCollectionRequest.class);
  }

  /**
   * Convert an instance of ChangeCidrCollectionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

