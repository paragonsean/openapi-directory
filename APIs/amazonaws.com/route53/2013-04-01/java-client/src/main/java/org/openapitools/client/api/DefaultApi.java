/*
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivateKeySigningKeyResponse;
import org.openapitools.client.model.AssociateVPCWithHostedZoneRequest;
import org.openapitools.client.model.AssociateVPCWithHostedZoneResponse;
import org.openapitools.client.model.ChangeCidrCollectionRequest;
import org.openapitools.client.model.ChangeCidrCollectionResponse;
import org.openapitools.client.model.ChangeResourceRecordSetsRequest;
import org.openapitools.client.model.ChangeResourceRecordSetsResponse;
import org.openapitools.client.model.ChangeTagsForResourceRequest;
import org.openapitools.client.model.CreateCidrCollectionRequest;
import org.openapitools.client.model.CreateCidrCollectionResponse;
import org.openapitools.client.model.CreateHealthCheckRequest;
import org.openapitools.client.model.CreateHealthCheckResponse;
import org.openapitools.client.model.CreateHostedZoneRequest;
import org.openapitools.client.model.CreateHostedZoneResponse;
import org.openapitools.client.model.CreateKeySigningKeyRequest;
import org.openapitools.client.model.CreateKeySigningKeyResponse;
import org.openapitools.client.model.CreateQueryLoggingConfigRequest;
import org.openapitools.client.model.CreateQueryLoggingConfigResponse;
import org.openapitools.client.model.CreateReusableDelegationSetRequest;
import org.openapitools.client.model.CreateReusableDelegationSetResponse;
import org.openapitools.client.model.CreateTrafficPolicyInstanceRequest;
import org.openapitools.client.model.CreateTrafficPolicyInstanceResponse;
import org.openapitools.client.model.CreateTrafficPolicyRequest;
import org.openapitools.client.model.CreateTrafficPolicyResponse;
import org.openapitools.client.model.CreateTrafficPolicyVersionRequest;
import org.openapitools.client.model.CreateTrafficPolicyVersionResponse;
import org.openapitools.client.model.CreateVPCAssociationAuthorizationRequest;
import org.openapitools.client.model.CreateVPCAssociationAuthorizationResponse;
import org.openapitools.client.model.DeactivateKeySigningKeyResponse;
import org.openapitools.client.model.DeleteHostedZoneResponse;
import org.openapitools.client.model.DeleteKeySigningKeyResponse;
import org.openapitools.client.model.DisableHostedZoneDNSSECResponse;
import org.openapitools.client.model.DisassociateVPCFromHostedZoneRequest;
import org.openapitools.client.model.DisassociateVPCFromHostedZoneResponse;
import org.openapitools.client.model.EnableHostedZoneDNSSECResponse;
import org.openapitools.client.model.GetAccountLimitResponse;
import org.openapitools.client.model.GetChangeResponse;
import org.openapitools.client.model.GetCheckerIpRangesResponse;
import org.openapitools.client.model.GetDNSSECResponse;
import org.openapitools.client.model.GetGeoLocationResponse;
import org.openapitools.client.model.GetHealthCheckCountResponse;
import org.openapitools.client.model.GetHealthCheckLastFailureReasonResponse;
import org.openapitools.client.model.GetHealthCheckResponse;
import org.openapitools.client.model.GetHealthCheckStatusResponse;
import org.openapitools.client.model.GetHostedZoneCountResponse;
import org.openapitools.client.model.GetHostedZoneLimitResponse;
import org.openapitools.client.model.GetHostedZoneResponse;
import org.openapitools.client.model.GetQueryLoggingConfigResponse;
import org.openapitools.client.model.GetReusableDelegationSetLimitResponse;
import org.openapitools.client.model.GetReusableDelegationSetResponse;
import org.openapitools.client.model.GetTrafficPolicyInstanceCountResponse;
import org.openapitools.client.model.GetTrafficPolicyInstanceResponse;
import org.openapitools.client.model.GetTrafficPolicyResponse;
import org.openapitools.client.model.ListCidrBlocksResponse;
import org.openapitools.client.model.ListCidrCollectionsResponse;
import org.openapitools.client.model.ListCidrLocationsResponse;
import org.openapitools.client.model.ListGeoLocationsResponse;
import org.openapitools.client.model.ListHealthChecksResponse;
import org.openapitools.client.model.ListHostedZonesByNameResponse;
import org.openapitools.client.model.ListHostedZonesByVPCResponse;
import org.openapitools.client.model.ListHostedZonesResponse;
import org.openapitools.client.model.ListQueryLoggingConfigsResponse;
import org.openapitools.client.model.ListResourceRecordSetsResponse;
import org.openapitools.client.model.ListReusableDelegationSetsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTagsForResourcesRequest;
import org.openapitools.client.model.ListTagsForResourcesResponse;
import org.openapitools.client.model.ListTrafficPoliciesResponse;
import org.openapitools.client.model.ListTrafficPolicyInstancesByHostedZoneResponse;
import org.openapitools.client.model.ListTrafficPolicyInstancesByPolicyResponse;
import org.openapitools.client.model.ListTrafficPolicyInstancesResponse;
import org.openapitools.client.model.ListTrafficPolicyVersionsResponse;
import org.openapitools.client.model.ListVPCAssociationAuthorizationsResponse;
import org.openapitools.client.model.TestDNSAnswerResponse;
import org.openapitools.client.model.UpdateHealthCheckRequest;
import org.openapitools.client.model.UpdateHealthCheckResponse;
import org.openapitools.client.model.UpdateHostedZoneCommentRequest;
import org.openapitools.client.model.UpdateHostedZoneCommentResponse;
import org.openapitools.client.model.UpdateTrafficPolicyCommentRequest;
import org.openapitools.client.model.UpdateTrafficPolicyCommentResponse;
import org.openapitools.client.model.UpdateTrafficPolicyInstanceRequest;
import org.openapitools.client.model.UpdateTrafficPolicyInstanceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateKeySigningKey
     * @param hostedZoneId A unique string used to identify a hosted zone. (required)
     * @param name A string used to identify a key-signing key (KSK). &lt;code&gt;Name&lt;/code&gt; can include numbers, letters, and underscores (_). &lt;code&gt;Name&lt;/code&gt; must be unique for each key-signing key in the same hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchKeySigningKey </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateKeySigningKeyCall(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/activate"
            .replace("{" + "HostedZoneId" + "}", localVarApiClient.escapeString(hostedZoneId.toString()))
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateKeySigningKeyValidateBeforeCall(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostedZoneId' is set
        if (hostedZoneId == null) {
            throw new ApiException("Missing the required parameter 'hostedZoneId' when calling activateKeySigningKey(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling activateKeySigningKey(Async)");
        }

        return activateKeySigningKeyCall(hostedZoneId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Activates a key-signing key (KSK) so that it can be used for signing by DNSSEC. This operation changes the KSK status to &lt;code&gt;ACTIVE&lt;/code&gt;.
     * @param hostedZoneId A unique string used to identify a hosted zone. (required)
     * @param name A string used to identify a key-signing key (KSK). &lt;code&gt;Name&lt;/code&gt; can include numbers, letters, and underscores (_). &lt;code&gt;Name&lt;/code&gt; must be unique for each key-signing key in the same hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ActivateKeySigningKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchKeySigningKey </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ActivateKeySigningKeyResponse activateKeySigningKey(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ActivateKeySigningKeyResponse> localVarResp = activateKeySigningKeyWithHttpInfo(hostedZoneId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Activates a key-signing key (KSK) so that it can be used for signing by DNSSEC. This operation changes the KSK status to &lt;code&gt;ACTIVE&lt;/code&gt;.
     * @param hostedZoneId A unique string used to identify a hosted zone. (required)
     * @param name A string used to identify a key-signing key (KSK). &lt;code&gt;Name&lt;/code&gt; can include numbers, letters, and underscores (_). &lt;code&gt;Name&lt;/code&gt; must be unique for each key-signing key in the same hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ActivateKeySigningKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchKeySigningKey </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivateKeySigningKeyResponse> activateKeySigningKeyWithHttpInfo(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = activateKeySigningKeyValidateBeforeCall(hostedZoneId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ActivateKeySigningKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Activates a key-signing key (KSK) so that it can be used for signing by DNSSEC. This operation changes the KSK status to &lt;code&gt;ACTIVE&lt;/code&gt;.
     * @param hostedZoneId A unique string used to identify a hosted zone. (required)
     * @param name A string used to identify a key-signing key (KSK). &lt;code&gt;Name&lt;/code&gt; can include numbers, letters, and underscores (_). &lt;code&gt;Name&lt;/code&gt; must be unique for each key-signing key in the same hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchKeySigningKey </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateKeySigningKeyAsync(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ActivateKeySigningKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateKeySigningKeyValidateBeforeCall(hostedZoneId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ActivateKeySigningKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for associateVPCWithHostedZone
     * @param id &lt;p&gt;The ID of the private hosted zone that you want to associate an Amazon VPC with.&lt;/p&gt; &lt;p&gt;Note that you can&#39;t associate a VPC with a hosted zone that doesn&#39;t have an existing VPC association.&lt;/p&gt; (required)
     * @param associateVPCWithHostedZoneRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PublicZoneVPCAssociation </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictingDomainExists </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateVPCWithHostedZoneCall(String id, AssociateVPCWithHostedZoneRequest associateVPCWithHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateVPCWithHostedZoneRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}/associatevpc"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateVPCWithHostedZoneValidateBeforeCall(String id, AssociateVPCWithHostedZoneRequest associateVPCWithHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling associateVPCWithHostedZone(Async)");
        }

        // verify the required parameter 'associateVPCWithHostedZoneRequest' is set
        if (associateVPCWithHostedZoneRequest == null) {
            throw new ApiException("Missing the required parameter 'associateVPCWithHostedZoneRequest' when calling associateVPCWithHostedZone(Async)");
        }

        return associateVPCWithHostedZoneCall(id, associateVPCWithHostedZoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Associates an Amazon VPC with a private hosted zone. &lt;/p&gt; &lt;important&gt; &lt;p&gt;To perform the association, the VPC and the private hosted zone must already exist. You can&#39;t convert a public hosted zone into a private hosted zone.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;If you want to associate a VPC that was created by using one Amazon Web Services account with a private hosted zone that was created by using a different account, the Amazon Web Services account that created the private hosted zone must first submit a &lt;code&gt;CreateVPCAssociationAuthorization&lt;/code&gt; request. Then the account that created the VPC must submit an &lt;code&gt;AssociateVPCWithHostedZone&lt;/code&gt; request.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;When granting access, the hosted zone and the Amazon VPC must belong to the same partition. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.&lt;/p&gt; &lt;p&gt;The following are the supported partitions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws&lt;/code&gt; - Amazon Web Services Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-cn&lt;/code&gt; - China Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-us-gov&lt;/code&gt; - Amazon Web Services GovCloud (US) Region&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Access Management&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param id &lt;p&gt;The ID of the private hosted zone that you want to associate an Amazon VPC with.&lt;/p&gt; &lt;p&gt;Note that you can&#39;t associate a VPC with a hosted zone that doesn&#39;t have an existing VPC association.&lt;/p&gt; (required)
     * @param associateVPCWithHostedZoneRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AssociateVPCWithHostedZoneResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PublicZoneVPCAssociation </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictingDomainExists </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public AssociateVPCWithHostedZoneResponse associateVPCWithHostedZone(String id, AssociateVPCWithHostedZoneRequest associateVPCWithHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AssociateVPCWithHostedZoneResponse> localVarResp = associateVPCWithHostedZoneWithHttpInfo(id, associateVPCWithHostedZoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Associates an Amazon VPC with a private hosted zone. &lt;/p&gt; &lt;important&gt; &lt;p&gt;To perform the association, the VPC and the private hosted zone must already exist. You can&#39;t convert a public hosted zone into a private hosted zone.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;If you want to associate a VPC that was created by using one Amazon Web Services account with a private hosted zone that was created by using a different account, the Amazon Web Services account that created the private hosted zone must first submit a &lt;code&gt;CreateVPCAssociationAuthorization&lt;/code&gt; request. Then the account that created the VPC must submit an &lt;code&gt;AssociateVPCWithHostedZone&lt;/code&gt; request.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;When granting access, the hosted zone and the Amazon VPC must belong to the same partition. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.&lt;/p&gt; &lt;p&gt;The following are the supported partitions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws&lt;/code&gt; - Amazon Web Services Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-cn&lt;/code&gt; - China Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-us-gov&lt;/code&gt; - Amazon Web Services GovCloud (US) Region&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Access Management&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param id &lt;p&gt;The ID of the private hosted zone that you want to associate an Amazon VPC with.&lt;/p&gt; &lt;p&gt;Note that you can&#39;t associate a VPC with a hosted zone that doesn&#39;t have an existing VPC association.&lt;/p&gt; (required)
     * @param associateVPCWithHostedZoneRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AssociateVPCWithHostedZoneResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PublicZoneVPCAssociation </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictingDomainExists </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociateVPCWithHostedZoneResponse> associateVPCWithHostedZoneWithHttpInfo(String id, AssociateVPCWithHostedZoneRequest associateVPCWithHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateVPCWithHostedZoneValidateBeforeCall(id, associateVPCWithHostedZoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AssociateVPCWithHostedZoneResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Associates an Amazon VPC with a private hosted zone. &lt;/p&gt; &lt;important&gt; &lt;p&gt;To perform the association, the VPC and the private hosted zone must already exist. You can&#39;t convert a public hosted zone into a private hosted zone.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;If you want to associate a VPC that was created by using one Amazon Web Services account with a private hosted zone that was created by using a different account, the Amazon Web Services account that created the private hosted zone must first submit a &lt;code&gt;CreateVPCAssociationAuthorization&lt;/code&gt; request. Then the account that created the VPC must submit an &lt;code&gt;AssociateVPCWithHostedZone&lt;/code&gt; request.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;When granting access, the hosted zone and the Amazon VPC must belong to the same partition. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.&lt;/p&gt; &lt;p&gt;The following are the supported partitions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws&lt;/code&gt; - Amazon Web Services Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-cn&lt;/code&gt; - China Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-us-gov&lt;/code&gt; - Amazon Web Services GovCloud (US) Region&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Access Management&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param id &lt;p&gt;The ID of the private hosted zone that you want to associate an Amazon VPC with.&lt;/p&gt; &lt;p&gt;Note that you can&#39;t associate a VPC with a hosted zone that doesn&#39;t have an existing VPC association.&lt;/p&gt; (required)
     * @param associateVPCWithHostedZoneRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PublicZoneVPCAssociation </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictingDomainExists </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateVPCWithHostedZoneAsync(String id, AssociateVPCWithHostedZoneRequest associateVPCWithHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AssociateVPCWithHostedZoneResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateVPCWithHostedZoneValidateBeforeCall(id, associateVPCWithHostedZoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AssociateVPCWithHostedZoneResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeCidrCollection
     * @param cidrCollectionId The UUID of the CIDR collection to update. (required)
     * @param changeCidrCollectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CidrCollectionVersionMismatchException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CidrBlockInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeCidrCollectionCall(String cidrCollectionId, ChangeCidrCollectionRequest changeCidrCollectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeCidrCollectionRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/cidrcollection/{CidrCollectionId}"
            .replace("{" + "CidrCollectionId" + "}", localVarApiClient.escapeString(cidrCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeCidrCollectionValidateBeforeCall(String cidrCollectionId, ChangeCidrCollectionRequest changeCidrCollectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cidrCollectionId' is set
        if (cidrCollectionId == null) {
            throw new ApiException("Missing the required parameter 'cidrCollectionId' when calling changeCidrCollection(Async)");
        }

        // verify the required parameter 'changeCidrCollectionRequest' is set
        if (changeCidrCollectionRequest == null) {
            throw new ApiException("Missing the required parameter 'changeCidrCollectionRequest' when calling changeCidrCollection(Async)");
        }

        return changeCidrCollectionCall(cidrCollectionId, changeCidrCollectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates, changes, or deletes CIDR blocks within a collection. Contains authoritative IP information mapping blocks to one or multiple locations.&lt;/p&gt; &lt;p&gt;A change request can update multiple locations in a collection at a time, which is helpful if you want to move one or more CIDR blocks from one location to another in one transaction, without downtime. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Limits&lt;/b&gt; &lt;/p&gt; &lt;p&gt;The max number of CIDR blocks included in the request is 1000. As a result, big updates require multiple API calls.&lt;/p&gt; &lt;p&gt; &lt;b&gt; PUT and DELETE_IF_EXISTS&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Use &lt;code&gt;ChangeCidrCollection&lt;/code&gt; to perform the following actions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PUT&lt;/code&gt;: Create a CIDR block within the specified collection.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; DELETE_IF_EXISTS&lt;/code&gt;: Delete an existing CIDR block from the collection.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param cidrCollectionId The UUID of the CIDR collection to update. (required)
     * @param changeCidrCollectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ChangeCidrCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CidrCollectionVersionMismatchException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CidrBlockInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public ChangeCidrCollectionResponse changeCidrCollection(String cidrCollectionId, ChangeCidrCollectionRequest changeCidrCollectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ChangeCidrCollectionResponse> localVarResp = changeCidrCollectionWithHttpInfo(cidrCollectionId, changeCidrCollectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates, changes, or deletes CIDR blocks within a collection. Contains authoritative IP information mapping blocks to one or multiple locations.&lt;/p&gt; &lt;p&gt;A change request can update multiple locations in a collection at a time, which is helpful if you want to move one or more CIDR blocks from one location to another in one transaction, without downtime. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Limits&lt;/b&gt; &lt;/p&gt; &lt;p&gt;The max number of CIDR blocks included in the request is 1000. As a result, big updates require multiple API calls.&lt;/p&gt; &lt;p&gt; &lt;b&gt; PUT and DELETE_IF_EXISTS&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Use &lt;code&gt;ChangeCidrCollection&lt;/code&gt; to perform the following actions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PUT&lt;/code&gt;: Create a CIDR block within the specified collection.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; DELETE_IF_EXISTS&lt;/code&gt;: Delete an existing CIDR block from the collection.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param cidrCollectionId The UUID of the CIDR collection to update. (required)
     * @param changeCidrCollectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ChangeCidrCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CidrCollectionVersionMismatchException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CidrBlockInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChangeCidrCollectionResponse> changeCidrCollectionWithHttpInfo(String cidrCollectionId, ChangeCidrCollectionRequest changeCidrCollectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = changeCidrCollectionValidateBeforeCall(cidrCollectionId, changeCidrCollectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ChangeCidrCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates, changes, or deletes CIDR blocks within a collection. Contains authoritative IP information mapping blocks to one or multiple locations.&lt;/p&gt; &lt;p&gt;A change request can update multiple locations in a collection at a time, which is helpful if you want to move one or more CIDR blocks from one location to another in one transaction, without downtime. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Limits&lt;/b&gt; &lt;/p&gt; &lt;p&gt;The max number of CIDR blocks included in the request is 1000. As a result, big updates require multiple API calls.&lt;/p&gt; &lt;p&gt; &lt;b&gt; PUT and DELETE_IF_EXISTS&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Use &lt;code&gt;ChangeCidrCollection&lt;/code&gt; to perform the following actions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PUT&lt;/code&gt;: Create a CIDR block within the specified collection.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; DELETE_IF_EXISTS&lt;/code&gt;: Delete an existing CIDR block from the collection.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param cidrCollectionId The UUID of the CIDR collection to update. (required)
     * @param changeCidrCollectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CidrCollectionVersionMismatchException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CidrBlockInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeCidrCollectionAsync(String cidrCollectionId, ChangeCidrCollectionRequest changeCidrCollectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ChangeCidrCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeCidrCollectionValidateBeforeCall(cidrCollectionId, changeCidrCollectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ChangeCidrCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeResourceRecordSets
     * @param id The ID of the hosted zone that contains the resource record sets that you want to change. (required)
     * @param changeResourceRecordSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidChangeBatch </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeResourceRecordSetsCall(String id, ChangeResourceRecordSetsRequest changeResourceRecordSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeResourceRecordSetsRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}/rrset/"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeResourceRecordSetsValidateBeforeCall(String id, ChangeResourceRecordSetsRequest changeResourceRecordSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling changeResourceRecordSets(Async)");
        }

        // verify the required parameter 'changeResourceRecordSetsRequest' is set
        if (changeResourceRecordSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'changeResourceRecordSetsRequest' when calling changeResourceRecordSets(Async)");
        }

        return changeResourceRecordSetsCall(id, changeResourceRecordSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates, changes, or deletes a resource record set, which contains authoritative DNS information for a specified domain name or subdomain name. For example, you can use &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; to create a resource record set that routes traffic for test.example.com to a web server that has an IP address of 192.0.2.44.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Deleting Resource Record Sets&lt;/b&gt; &lt;/p&gt; &lt;p&gt;To delete a resource record set, you must specify all the same values that you specified when you created it.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Change Batches and Transactional Changes&lt;/b&gt; &lt;/p&gt; &lt;p&gt;The request body must include a document with a &lt;code&gt;ChangeResourceRecordSetsRequest&lt;/code&gt; element. The request body contains a list of change items, known as a change batch. Change batches are considered transactional changes. Route 53 validates the changes in the request and then either makes all or none of the changes in the change batch request. This ensures that DNS routing isn&#39;t adversely affected by partial changes to the resource record sets in a hosted zone. &lt;/p&gt; &lt;p&gt;For example, suppose a change batch request contains two changes: it deletes the &lt;code&gt;CNAME&lt;/code&gt; resource record set for www.example.com and creates an alias resource record set for www.example.com. If validation for both records succeeds, Route 53 deletes the first resource record set and creates the second resource record set in a single operation. If validation for either the &lt;code&gt;DELETE&lt;/code&gt; or the &lt;code&gt;CREATE&lt;/code&gt; action fails, then the request is canceled, and the original &lt;code&gt;CNAME&lt;/code&gt; record continues to exist.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you try to delete the same resource record set more than once in a single change batch, Route 53 returns an &lt;code&gt;InvalidChangeBatch&lt;/code&gt; error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;Traffic Flow&lt;/b&gt; &lt;/p&gt; &lt;p&gt;To create resource record sets for complex routing configurations, use either the traffic flow visual editor in the Route 53 console or the API actions for traffic policies and traffic policy instances. Save the configuration as a traffic policy, then associate the traffic policy with one or more domain names (such as example.com) or subdomain names (such as www.example.com), in the same hosted zone or in multiple hosted zones. You can roll back the updates if the new configuration isn&#39;t performing as expected. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/traffic-flow.html\&quot;&gt;Using Traffic Flow to Route DNS Traffic&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Create, Delete, and Upsert&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Use &lt;code&gt;ChangeResourceRecordsSetsRequest&lt;/code&gt; to perform the following actions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATE&lt;/code&gt;: Creates a resource record set that has the specified values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETE&lt;/code&gt;: Deletes an existing resource record set that has the specified values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPSERT&lt;/code&gt;: If a resource set exists Route 53 updates it with the values in the request. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Syntaxes for Creating, Updating, and Deleting Resource Record Sets&lt;/b&gt; &lt;/p&gt; &lt;p&gt;The syntax for a request depends on the type of resource record set that you want to create, delete, or update, such as weighted, alias, or failover. The XML elements in your request must appear in the order listed in the syntax. &lt;/p&gt; &lt;p&gt;For an example for each type of resource record set, see \&quot;Examples.\&quot;&lt;/p&gt; &lt;p&gt;Don&#39;t refer to the syntax in the \&quot;Parameter Syntax\&quot; section, which includes all of the elements for every kind of resource record set that you can create, delete, or update by using &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Change Propagation to Route 53 DNS Servers&lt;/b&gt; &lt;/p&gt; &lt;p&gt;When you submit a &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; request, Route 53 propagates your changes to all of the Route 53 authoritative DNS servers managing the hosted zone. While your changes are propagating, &lt;code&gt;GetChange&lt;/code&gt; returns a status of &lt;code&gt;PENDING&lt;/code&gt;. When propagation is complete, &lt;code&gt;GetChange&lt;/code&gt; returns a status of &lt;code&gt;INSYNC&lt;/code&gt;. Changes generally propagate to all Route 53 name servers managing the hosted zone within 60 seconds. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetChange.html\&quot;&gt;GetChange&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Limits on ChangeResourceRecordSets Requests&lt;/b&gt; &lt;/p&gt; &lt;p&gt;For information about the limits on a &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; request, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html\&quot;&gt;Limits&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param id The ID of the hosted zone that contains the resource record sets that you want to change. (required)
     * @param changeResourceRecordSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ChangeResourceRecordSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidChangeBatch </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public ChangeResourceRecordSetsResponse changeResourceRecordSets(String id, ChangeResourceRecordSetsRequest changeResourceRecordSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ChangeResourceRecordSetsResponse> localVarResp = changeResourceRecordSetsWithHttpInfo(id, changeResourceRecordSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates, changes, or deletes a resource record set, which contains authoritative DNS information for a specified domain name or subdomain name. For example, you can use &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; to create a resource record set that routes traffic for test.example.com to a web server that has an IP address of 192.0.2.44.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Deleting Resource Record Sets&lt;/b&gt; &lt;/p&gt; &lt;p&gt;To delete a resource record set, you must specify all the same values that you specified when you created it.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Change Batches and Transactional Changes&lt;/b&gt; &lt;/p&gt; &lt;p&gt;The request body must include a document with a &lt;code&gt;ChangeResourceRecordSetsRequest&lt;/code&gt; element. The request body contains a list of change items, known as a change batch. Change batches are considered transactional changes. Route 53 validates the changes in the request and then either makes all or none of the changes in the change batch request. This ensures that DNS routing isn&#39;t adversely affected by partial changes to the resource record sets in a hosted zone. &lt;/p&gt; &lt;p&gt;For example, suppose a change batch request contains two changes: it deletes the &lt;code&gt;CNAME&lt;/code&gt; resource record set for www.example.com and creates an alias resource record set for www.example.com. If validation for both records succeeds, Route 53 deletes the first resource record set and creates the second resource record set in a single operation. If validation for either the &lt;code&gt;DELETE&lt;/code&gt; or the &lt;code&gt;CREATE&lt;/code&gt; action fails, then the request is canceled, and the original &lt;code&gt;CNAME&lt;/code&gt; record continues to exist.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you try to delete the same resource record set more than once in a single change batch, Route 53 returns an &lt;code&gt;InvalidChangeBatch&lt;/code&gt; error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;Traffic Flow&lt;/b&gt; &lt;/p&gt; &lt;p&gt;To create resource record sets for complex routing configurations, use either the traffic flow visual editor in the Route 53 console or the API actions for traffic policies and traffic policy instances. Save the configuration as a traffic policy, then associate the traffic policy with one or more domain names (such as example.com) or subdomain names (such as www.example.com), in the same hosted zone or in multiple hosted zones. You can roll back the updates if the new configuration isn&#39;t performing as expected. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/traffic-flow.html\&quot;&gt;Using Traffic Flow to Route DNS Traffic&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Create, Delete, and Upsert&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Use &lt;code&gt;ChangeResourceRecordsSetsRequest&lt;/code&gt; to perform the following actions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATE&lt;/code&gt;: Creates a resource record set that has the specified values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETE&lt;/code&gt;: Deletes an existing resource record set that has the specified values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPSERT&lt;/code&gt;: If a resource set exists Route 53 updates it with the values in the request. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Syntaxes for Creating, Updating, and Deleting Resource Record Sets&lt;/b&gt; &lt;/p&gt; &lt;p&gt;The syntax for a request depends on the type of resource record set that you want to create, delete, or update, such as weighted, alias, or failover. The XML elements in your request must appear in the order listed in the syntax. &lt;/p&gt; &lt;p&gt;For an example for each type of resource record set, see \&quot;Examples.\&quot;&lt;/p&gt; &lt;p&gt;Don&#39;t refer to the syntax in the \&quot;Parameter Syntax\&quot; section, which includes all of the elements for every kind of resource record set that you can create, delete, or update by using &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Change Propagation to Route 53 DNS Servers&lt;/b&gt; &lt;/p&gt; &lt;p&gt;When you submit a &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; request, Route 53 propagates your changes to all of the Route 53 authoritative DNS servers managing the hosted zone. While your changes are propagating, &lt;code&gt;GetChange&lt;/code&gt; returns a status of &lt;code&gt;PENDING&lt;/code&gt;. When propagation is complete, &lt;code&gt;GetChange&lt;/code&gt; returns a status of &lt;code&gt;INSYNC&lt;/code&gt;. Changes generally propagate to all Route 53 name servers managing the hosted zone within 60 seconds. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetChange.html\&quot;&gt;GetChange&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Limits on ChangeResourceRecordSets Requests&lt;/b&gt; &lt;/p&gt; &lt;p&gt;For information about the limits on a &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; request, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html\&quot;&gt;Limits&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param id The ID of the hosted zone that contains the resource record sets that you want to change. (required)
     * @param changeResourceRecordSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ChangeResourceRecordSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidChangeBatch </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChangeResourceRecordSetsResponse> changeResourceRecordSetsWithHttpInfo(String id, ChangeResourceRecordSetsRequest changeResourceRecordSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = changeResourceRecordSetsValidateBeforeCall(id, changeResourceRecordSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ChangeResourceRecordSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates, changes, or deletes a resource record set, which contains authoritative DNS information for a specified domain name or subdomain name. For example, you can use &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; to create a resource record set that routes traffic for test.example.com to a web server that has an IP address of 192.0.2.44.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Deleting Resource Record Sets&lt;/b&gt; &lt;/p&gt; &lt;p&gt;To delete a resource record set, you must specify all the same values that you specified when you created it.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Change Batches and Transactional Changes&lt;/b&gt; &lt;/p&gt; &lt;p&gt;The request body must include a document with a &lt;code&gt;ChangeResourceRecordSetsRequest&lt;/code&gt; element. The request body contains a list of change items, known as a change batch. Change batches are considered transactional changes. Route 53 validates the changes in the request and then either makes all or none of the changes in the change batch request. This ensures that DNS routing isn&#39;t adversely affected by partial changes to the resource record sets in a hosted zone. &lt;/p&gt; &lt;p&gt;For example, suppose a change batch request contains two changes: it deletes the &lt;code&gt;CNAME&lt;/code&gt; resource record set for www.example.com and creates an alias resource record set for www.example.com. If validation for both records succeeds, Route 53 deletes the first resource record set and creates the second resource record set in a single operation. If validation for either the &lt;code&gt;DELETE&lt;/code&gt; or the &lt;code&gt;CREATE&lt;/code&gt; action fails, then the request is canceled, and the original &lt;code&gt;CNAME&lt;/code&gt; record continues to exist.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you try to delete the same resource record set more than once in a single change batch, Route 53 returns an &lt;code&gt;InvalidChangeBatch&lt;/code&gt; error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;Traffic Flow&lt;/b&gt; &lt;/p&gt; &lt;p&gt;To create resource record sets for complex routing configurations, use either the traffic flow visual editor in the Route 53 console or the API actions for traffic policies and traffic policy instances. Save the configuration as a traffic policy, then associate the traffic policy with one or more domain names (such as example.com) or subdomain names (such as www.example.com), in the same hosted zone or in multiple hosted zones. You can roll back the updates if the new configuration isn&#39;t performing as expected. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/traffic-flow.html\&quot;&gt;Using Traffic Flow to Route DNS Traffic&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Create, Delete, and Upsert&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Use &lt;code&gt;ChangeResourceRecordsSetsRequest&lt;/code&gt; to perform the following actions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATE&lt;/code&gt;: Creates a resource record set that has the specified values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETE&lt;/code&gt;: Deletes an existing resource record set that has the specified values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPSERT&lt;/code&gt;: If a resource set exists Route 53 updates it with the values in the request. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Syntaxes for Creating, Updating, and Deleting Resource Record Sets&lt;/b&gt; &lt;/p&gt; &lt;p&gt;The syntax for a request depends on the type of resource record set that you want to create, delete, or update, such as weighted, alias, or failover. The XML elements in your request must appear in the order listed in the syntax. &lt;/p&gt; &lt;p&gt;For an example for each type of resource record set, see \&quot;Examples.\&quot;&lt;/p&gt; &lt;p&gt;Don&#39;t refer to the syntax in the \&quot;Parameter Syntax\&quot; section, which includes all of the elements for every kind of resource record set that you can create, delete, or update by using &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Change Propagation to Route 53 DNS Servers&lt;/b&gt; &lt;/p&gt; &lt;p&gt;When you submit a &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; request, Route 53 propagates your changes to all of the Route 53 authoritative DNS servers managing the hosted zone. While your changes are propagating, &lt;code&gt;GetChange&lt;/code&gt; returns a status of &lt;code&gt;PENDING&lt;/code&gt;. When propagation is complete, &lt;code&gt;GetChange&lt;/code&gt; returns a status of &lt;code&gt;INSYNC&lt;/code&gt;. Changes generally propagate to all Route 53 name servers managing the hosted zone within 60 seconds. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetChange.html\&quot;&gt;GetChange&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Limits on ChangeResourceRecordSets Requests&lt;/b&gt; &lt;/p&gt; &lt;p&gt;For information about the limits on a &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; request, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html\&quot;&gt;Limits&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param id The ID of the hosted zone that contains the resource record sets that you want to change. (required)
     * @param changeResourceRecordSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidChangeBatch </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeResourceRecordSetsAsync(String id, ChangeResourceRecordSetsRequest changeResourceRecordSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ChangeResourceRecordSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeResourceRecordSetsValidateBeforeCall(id, changeResourceRecordSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ChangeResourceRecordSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeTagsForResource
     * @param resourceType &lt;p&gt;The type of the resource.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The resource type for health checks is &lt;code&gt;healthcheck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The resource type for hosted zones is &lt;code&gt;hostedzone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param resourceId The ID of the resource for which you want to add, change, or delete tags. (required)
     * @param changeTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeTagsForResourceCall(String resourceType, String resourceId, ChangeTagsForResourceRequest changeTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeTagsForResourceRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/tags/{ResourceType}/{ResourceId}"
            .replace("{" + "ResourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "ResourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeTagsForResourceValidateBeforeCall(String resourceType, String resourceId, ChangeTagsForResourceRequest changeTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling changeTagsForResource(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling changeTagsForResource(Async)");
        }

        // verify the required parameter 'changeTagsForResourceRequest' is set
        if (changeTagsForResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'changeTagsForResourceRequest' when calling changeTagsForResource(Async)");
        }

        return changeTagsForResourceCall(resourceType, resourceId, changeTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds, edits, or deletes tags for a health check or a hosted zone.&lt;/p&gt; &lt;p&gt;For information about using tags for cost allocation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param resourceType &lt;p&gt;The type of the resource.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The resource type for health checks is &lt;code&gt;healthcheck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The resource type for hosted zones is &lt;code&gt;hostedzone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param resourceId The ID of the resource for which you want to add, change, or delete tags. (required)
     * @param changeTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public Object changeTagsForResource(String resourceType, String resourceId, ChangeTagsForResourceRequest changeTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = changeTagsForResourceWithHttpInfo(resourceType, resourceId, changeTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds, edits, or deletes tags for a health check or a hosted zone.&lt;/p&gt; &lt;p&gt;For information about using tags for cost allocation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param resourceType &lt;p&gt;The type of the resource.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The resource type for health checks is &lt;code&gt;healthcheck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The resource type for hosted zones is &lt;code&gt;hostedzone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param resourceId The ID of the resource for which you want to add, change, or delete tags. (required)
     * @param changeTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> changeTagsForResourceWithHttpInfo(String resourceType, String resourceId, ChangeTagsForResourceRequest changeTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = changeTagsForResourceValidateBeforeCall(resourceType, resourceId, changeTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds, edits, or deletes tags for a health check or a hosted zone.&lt;/p&gt; &lt;p&gt;For information about using tags for cost allocation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param resourceType &lt;p&gt;The type of the resource.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The resource type for health checks is &lt;code&gt;healthcheck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The resource type for hosted zones is &lt;code&gt;hostedzone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param resourceId The ID of the resource for which you want to add, change, or delete tags. (required)
     * @param changeTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeTagsForResourceAsync(String resourceType, String resourceId, ChangeTagsForResourceRequest changeTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeTagsForResourceValidateBeforeCall(resourceType, resourceId, changeTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCidrCollection
     * @param createCidrCollectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CidrCollectionAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCidrCollectionCall(CreateCidrCollectionRequest createCidrCollectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCidrCollectionRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/cidrcollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCidrCollectionValidateBeforeCall(CreateCidrCollectionRequest createCidrCollectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCidrCollectionRequest' is set
        if (createCidrCollectionRequest == null) {
            throw new ApiException("Missing the required parameter 'createCidrCollectionRequest' when calling createCidrCollection(Async)");
        }

        return createCidrCollectionCall(createCidrCollectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a CIDR collection in the current Amazon Web Services account.
     * @param createCidrCollectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateCidrCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CidrCollectionAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public CreateCidrCollectionResponse createCidrCollection(CreateCidrCollectionRequest createCidrCollectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateCidrCollectionResponse> localVarResp = createCidrCollectionWithHttpInfo(createCidrCollectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a CIDR collection in the current Amazon Web Services account.
     * @param createCidrCollectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateCidrCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CidrCollectionAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCidrCollectionResponse> createCidrCollectionWithHttpInfo(CreateCidrCollectionRequest createCidrCollectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createCidrCollectionValidateBeforeCall(createCidrCollectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateCidrCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a CIDR collection in the current Amazon Web Services account.
     * @param createCidrCollectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CidrCollectionAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCidrCollectionAsync(CreateCidrCollectionRequest createCidrCollectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateCidrCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCidrCollectionValidateBeforeCall(createCidrCollectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateCidrCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createHealthCheck
     * @param createHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyHealthChecks </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HealthCheckAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHealthCheckCall(CreateHealthCheckRequest createHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createHealthCheckRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/healthcheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHealthCheckValidateBeforeCall(CreateHealthCheckRequest createHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createHealthCheckRequest' is set
        if (createHealthCheckRequest == null) {
            throw new ApiException("Missing the required parameter 'createHealthCheckRequest' when calling createHealthCheck(Async)");
        }

        return createHealthCheckCall(createHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new health check.&lt;/p&gt; &lt;p&gt;For information about adding health checks to resource record sets, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ResourceRecordSet.html#Route53-Type-ResourceRecordSet-HealthCheckId\&quot;&gt;HealthCheckId&lt;/a&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ChangeResourceRecordSets.html\&quot;&gt;ChangeResourceRecordSets&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; &lt;b&gt;ELB Load Balancers&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If you&#39;re registering EC2 instances with an Elastic Load Balancing (ELB) load balancer, do not create Amazon Route 53 health checks for the EC2 instances. When you register an EC2 instance with a load balancer, you configure settings for an ELB health check, which performs a similar function to a Route 53 health check.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Private Hosted Zones&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can associate health checks with failover resource record sets in a private hosted zone. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Route 53 health checkers are outside the VPC. To check the health of an endpoint within a VPC by IP address, you must assign a public IP address to the instance in the VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can configure a health checker to check the health of an external resource that the instance relies on, such as a database server.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can create a CloudWatch metric, associate an alarm with the metric, and then create a health check that is based on the state of the alarm. For example, you might create a CloudWatch metric that checks the status of the Amazon EC2 &lt;code&gt;StatusCheckFailed&lt;/code&gt; metric, add an alarm to the metric, and then create a health check that is based on the state of the alarm. For information about creating CloudWatch metrics and alarms by using the CloudWatch console, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/WhatIsCloudWatch.html\&quot;&gt;Amazon CloudWatch User Guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param createHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateHealthCheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyHealthChecks </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HealthCheckAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public CreateHealthCheckResponse createHealthCheck(CreateHealthCheckRequest createHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateHealthCheckResponse> localVarResp = createHealthCheckWithHttpInfo(createHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new health check.&lt;/p&gt; &lt;p&gt;For information about adding health checks to resource record sets, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ResourceRecordSet.html#Route53-Type-ResourceRecordSet-HealthCheckId\&quot;&gt;HealthCheckId&lt;/a&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ChangeResourceRecordSets.html\&quot;&gt;ChangeResourceRecordSets&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; &lt;b&gt;ELB Load Balancers&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If you&#39;re registering EC2 instances with an Elastic Load Balancing (ELB) load balancer, do not create Amazon Route 53 health checks for the EC2 instances. When you register an EC2 instance with a load balancer, you configure settings for an ELB health check, which performs a similar function to a Route 53 health check.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Private Hosted Zones&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can associate health checks with failover resource record sets in a private hosted zone. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Route 53 health checkers are outside the VPC. To check the health of an endpoint within a VPC by IP address, you must assign a public IP address to the instance in the VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can configure a health checker to check the health of an external resource that the instance relies on, such as a database server.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can create a CloudWatch metric, associate an alarm with the metric, and then create a health check that is based on the state of the alarm. For example, you might create a CloudWatch metric that checks the status of the Amazon EC2 &lt;code&gt;StatusCheckFailed&lt;/code&gt; metric, add an alarm to the metric, and then create a health check that is based on the state of the alarm. For information about creating CloudWatch metrics and alarms by using the CloudWatch console, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/WhatIsCloudWatch.html\&quot;&gt;Amazon CloudWatch User Guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param createHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateHealthCheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyHealthChecks </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HealthCheckAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateHealthCheckResponse> createHealthCheckWithHttpInfo(CreateHealthCheckRequest createHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createHealthCheckValidateBeforeCall(createHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateHealthCheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new health check.&lt;/p&gt; &lt;p&gt;For information about adding health checks to resource record sets, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ResourceRecordSet.html#Route53-Type-ResourceRecordSet-HealthCheckId\&quot;&gt;HealthCheckId&lt;/a&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ChangeResourceRecordSets.html\&quot;&gt;ChangeResourceRecordSets&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; &lt;b&gt;ELB Load Balancers&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If you&#39;re registering EC2 instances with an Elastic Load Balancing (ELB) load balancer, do not create Amazon Route 53 health checks for the EC2 instances. When you register an EC2 instance with a load balancer, you configure settings for an ELB health check, which performs a similar function to a Route 53 health check.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Private Hosted Zones&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can associate health checks with failover resource record sets in a private hosted zone. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Route 53 health checkers are outside the VPC. To check the health of an endpoint within a VPC by IP address, you must assign a public IP address to the instance in the VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can configure a health checker to check the health of an external resource that the instance relies on, such as a database server.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can create a CloudWatch metric, associate an alarm with the metric, and then create a health check that is based on the state of the alarm. For example, you might create a CloudWatch metric that checks the status of the Amazon EC2 &lt;code&gt;StatusCheckFailed&lt;/code&gt; metric, add an alarm to the metric, and then create a health check that is based on the state of the alarm. For information about creating CloudWatch metrics and alarms by using the CloudWatch console, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/WhatIsCloudWatch.html\&quot;&gt;Amazon CloudWatch User Guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param createHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyHealthChecks </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HealthCheckAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHealthCheckAsync(CreateHealthCheckRequest createHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateHealthCheckResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHealthCheckValidateBeforeCall(createHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateHealthCheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createHostedZone
     * @param createHostedZoneRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDomainName </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HostedZoneAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyHostedZones </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DelegationSetNotAvailable </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictingDomainExists </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHostedZoneCall(CreateHostedZoneRequest createHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createHostedZoneRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHostedZoneValidateBeforeCall(CreateHostedZoneRequest createHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createHostedZoneRequest' is set
        if (createHostedZoneRequest == null) {
            throw new ApiException("Missing the required parameter 'createHostedZoneRequest' when calling createHostedZone(Async)");
        }

        return createHostedZoneCall(createHostedZoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new public or private hosted zone. You create records in a public hosted zone to define how you want to route traffic on the internet for a domain, such as example.com, and its subdomains (apex.example.com, acme.example.com). You create records in a private hosted zone to define how you want to route traffic for a domain and its subdomains within one or more Amazon Virtual Private Clouds (Amazon VPCs). &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can&#39;t convert a public hosted zone to a private hosted zone or vice versa. Instead, you must create a new hosted zone with the same name and create new resource record sets.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information about charges for hosted zones, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/pricing/\&quot;&gt;Amazon Route 53 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can&#39;t create a hosted zone for a top-level domain (TLD) such as .com.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For public hosted zones, Route 53 automatically creates a default SOA record and four NS records for the zone. For more information about SOA and NS records, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/SOA-NSrecords.html\&quot;&gt;NS and SOA Records that Route 53 Creates for a Hosted Zone&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you want to use the same name servers for multiple public hosted zones, you can optionally associate a reusable delegation set with the hosted zone. See the &lt;code&gt;DelegationSetId&lt;/code&gt; element.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If your domain is registered with a registrar other than Route 53, you must update the name servers with your registrar to make Route 53 the DNS service for the domain. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/MigratingDNS.html\&quot;&gt;Migrating DNS Service for an Existing Domain to Amazon Route 53&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you submit a &lt;code&gt;CreateHostedZone&lt;/code&gt; request, the initial status of the hosted zone is &lt;code&gt;PENDING&lt;/code&gt;. For public hosted zones, this means that the NS and SOA records are not yet available on all Route 53 DNS servers. When the NS and SOA records are available, the status of the zone changes to &lt;code&gt;INSYNC&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;CreateHostedZone&lt;/code&gt; request requires the caller to have an &lt;code&gt;ec2:DescribeVpcs&lt;/code&gt; permission.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When creating private hosted zones, the Amazon VPC must belong to the same partition where the hosted zone is created. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.&lt;/p&gt; &lt;p&gt;The following are the supported partitions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws&lt;/code&gt; - Amazon Web Services Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-cn&lt;/code&gt; - China Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-us-gov&lt;/code&gt; - Amazon Web Services GovCloud (US) Region&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Access Management&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param createHostedZoneRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateHostedZoneResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDomainName </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HostedZoneAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyHostedZones </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DelegationSetNotAvailable </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictingDomainExists </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
     </table>
     */
    public CreateHostedZoneResponse createHostedZone(CreateHostedZoneRequest createHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateHostedZoneResponse> localVarResp = createHostedZoneWithHttpInfo(createHostedZoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new public or private hosted zone. You create records in a public hosted zone to define how you want to route traffic on the internet for a domain, such as example.com, and its subdomains (apex.example.com, acme.example.com). You create records in a private hosted zone to define how you want to route traffic for a domain and its subdomains within one or more Amazon Virtual Private Clouds (Amazon VPCs). &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can&#39;t convert a public hosted zone to a private hosted zone or vice versa. Instead, you must create a new hosted zone with the same name and create new resource record sets.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information about charges for hosted zones, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/pricing/\&quot;&gt;Amazon Route 53 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can&#39;t create a hosted zone for a top-level domain (TLD) such as .com.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For public hosted zones, Route 53 automatically creates a default SOA record and four NS records for the zone. For more information about SOA and NS records, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/SOA-NSrecords.html\&quot;&gt;NS and SOA Records that Route 53 Creates for a Hosted Zone&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you want to use the same name servers for multiple public hosted zones, you can optionally associate a reusable delegation set with the hosted zone. See the &lt;code&gt;DelegationSetId&lt;/code&gt; element.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If your domain is registered with a registrar other than Route 53, you must update the name servers with your registrar to make Route 53 the DNS service for the domain. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/MigratingDNS.html\&quot;&gt;Migrating DNS Service for an Existing Domain to Amazon Route 53&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you submit a &lt;code&gt;CreateHostedZone&lt;/code&gt; request, the initial status of the hosted zone is &lt;code&gt;PENDING&lt;/code&gt;. For public hosted zones, this means that the NS and SOA records are not yet available on all Route 53 DNS servers. When the NS and SOA records are available, the status of the zone changes to &lt;code&gt;INSYNC&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;CreateHostedZone&lt;/code&gt; request requires the caller to have an &lt;code&gt;ec2:DescribeVpcs&lt;/code&gt; permission.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When creating private hosted zones, the Amazon VPC must belong to the same partition where the hosted zone is created. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.&lt;/p&gt; &lt;p&gt;The following are the supported partitions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws&lt;/code&gt; - Amazon Web Services Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-cn&lt;/code&gt; - China Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-us-gov&lt;/code&gt; - Amazon Web Services GovCloud (US) Region&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Access Management&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param createHostedZoneRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateHostedZoneResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDomainName </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HostedZoneAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyHostedZones </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DelegationSetNotAvailable </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictingDomainExists </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateHostedZoneResponse> createHostedZoneWithHttpInfo(CreateHostedZoneRequest createHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createHostedZoneValidateBeforeCall(createHostedZoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateHostedZoneResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new public or private hosted zone. You create records in a public hosted zone to define how you want to route traffic on the internet for a domain, such as example.com, and its subdomains (apex.example.com, acme.example.com). You create records in a private hosted zone to define how you want to route traffic for a domain and its subdomains within one or more Amazon Virtual Private Clouds (Amazon VPCs). &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can&#39;t convert a public hosted zone to a private hosted zone or vice versa. Instead, you must create a new hosted zone with the same name and create new resource record sets.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information about charges for hosted zones, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/pricing/\&quot;&gt;Amazon Route 53 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can&#39;t create a hosted zone for a top-level domain (TLD) such as .com.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For public hosted zones, Route 53 automatically creates a default SOA record and four NS records for the zone. For more information about SOA and NS records, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/SOA-NSrecords.html\&quot;&gt;NS and SOA Records that Route 53 Creates for a Hosted Zone&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you want to use the same name servers for multiple public hosted zones, you can optionally associate a reusable delegation set with the hosted zone. See the &lt;code&gt;DelegationSetId&lt;/code&gt; element.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If your domain is registered with a registrar other than Route 53, you must update the name servers with your registrar to make Route 53 the DNS service for the domain. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/MigratingDNS.html\&quot;&gt;Migrating DNS Service for an Existing Domain to Amazon Route 53&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you submit a &lt;code&gt;CreateHostedZone&lt;/code&gt; request, the initial status of the hosted zone is &lt;code&gt;PENDING&lt;/code&gt;. For public hosted zones, this means that the NS and SOA records are not yet available on all Route 53 DNS servers. When the NS and SOA records are available, the status of the zone changes to &lt;code&gt;INSYNC&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;CreateHostedZone&lt;/code&gt; request requires the caller to have an &lt;code&gt;ec2:DescribeVpcs&lt;/code&gt; permission.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When creating private hosted zones, the Amazon VPC must belong to the same partition where the hosted zone is created. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.&lt;/p&gt; &lt;p&gt;The following are the supported partitions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws&lt;/code&gt; - Amazon Web Services Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-cn&lt;/code&gt; - China Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-us-gov&lt;/code&gt; - Amazon Web Services GovCloud (US) Region&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Access Management&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param createHostedZoneRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDomainName </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HostedZoneAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyHostedZones </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DelegationSetNotAvailable </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictingDomainExists </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHostedZoneAsync(CreateHostedZoneRequest createHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateHostedZoneResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHostedZoneValidateBeforeCall(createHostedZoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateHostedZoneResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createKeySigningKey
     * @param createKeySigningKeyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKeySigningKeyName </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KeySigningKeyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyKeySigningKeys </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKeySigningKeyCall(CreateKeySigningKeyRequest createKeySigningKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createKeySigningKeyRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/keysigningkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createKeySigningKeyValidateBeforeCall(CreateKeySigningKeyRequest createKeySigningKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createKeySigningKeyRequest' is set
        if (createKeySigningKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'createKeySigningKeyRequest' when calling createKeySigningKey(Async)");
        }

        return createKeySigningKeyCall(createKeySigningKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a new key-signing key (KSK) associated with a hosted zone. You can only have two KSKs per hosted zone.
     * @param createKeySigningKeyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateKeySigningKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKeySigningKeyName </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KeySigningKeyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyKeySigningKeys </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public CreateKeySigningKeyResponse createKeySigningKey(CreateKeySigningKeyRequest createKeySigningKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateKeySigningKeyResponse> localVarResp = createKeySigningKeyWithHttpInfo(createKeySigningKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new key-signing key (KSK) associated with a hosted zone. You can only have two KSKs per hosted zone.
     * @param createKeySigningKeyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateKeySigningKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKeySigningKeyName </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KeySigningKeyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyKeySigningKeys </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateKeySigningKeyResponse> createKeySigningKeyWithHttpInfo(CreateKeySigningKeyRequest createKeySigningKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createKeySigningKeyValidateBeforeCall(createKeySigningKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateKeySigningKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new key-signing key (KSK) associated with a hosted zone. You can only have two KSKs per hosted zone.
     * @param createKeySigningKeyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKeySigningKeyName </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KeySigningKeyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyKeySigningKeys </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKeySigningKeyAsync(CreateKeySigningKeyRequest createKeySigningKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateKeySigningKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createKeySigningKeyValidateBeforeCall(createKeySigningKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateKeySigningKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createQueryLoggingConfig
     * @param createQueryLoggingConfigRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudWatchLogsLogGroup </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> QueryLoggingConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientCloudWatchLogsResourcePolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQueryLoggingConfigCall(CreateQueryLoggingConfigRequest createQueryLoggingConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createQueryLoggingConfigRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/queryloggingconfig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createQueryLoggingConfigValidateBeforeCall(CreateQueryLoggingConfigRequest createQueryLoggingConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createQueryLoggingConfigRequest' is set
        if (createQueryLoggingConfigRequest == null) {
            throw new ApiException("Missing the required parameter 'createQueryLoggingConfigRequest' when calling createQueryLoggingConfig(Async)");
        }

        return createQueryLoggingConfigCall(createQueryLoggingConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a configuration for DNS query logging. After you create a query logging configuration, Amazon Route 53 begins to publish log data to an Amazon CloudWatch Logs log group.&lt;/p&gt; &lt;p&gt;DNS query logs contain information about the queries that Route 53 receives for a specified public hosted zone, such as the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Route 53 edge location that responded to the DNS query&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Domain or subdomain that was requested&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;DNS record type, such as A or AAAA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;DNS response code, such as &lt;code&gt;NoError&lt;/code&gt; or &lt;code&gt;ServFail&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;dl&gt; &lt;dt&gt;Log Group and Resource Policy&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Before you create a query logging configuration, perform the following operations.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you create a query logging configuration using the Route 53 console, Route 53 performs these operations automatically.&lt;/p&gt; &lt;/note&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a CloudWatch Logs log group, and make note of the ARN, which you specify when you create a query logging configuration. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must create the log group in the us-east-1 region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You must use the same Amazon Web Services account to create the log group and the hosted zone that you want to configure query logging for.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you create log groups for query logging, we recommend that you use a consistent prefix, for example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;/aws/route53/&lt;i&gt;hosted zone name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;In the next step, you&#39;ll create a resource policy, which controls access to one or more log groups and the associated Amazon Web Services resources, such as Route 53 hosted zones. There&#39;s a limit on the number of resource policies that you can create, so we recommend that you use a consistent prefix so you can use the same resource policy for all the log groups that you create for query logging.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a CloudWatch Logs resource policy, and give it the permissions that Route 53 needs to create log streams and to send query logs to log streams. For the value of &lt;code&gt;Resource&lt;/code&gt;, specify the ARN for the log group that you created in the previous step. To use the same resource policy for all the CloudWatch Logs log groups that you created for query logging configurations, replace the hosted zone name with &lt;code&gt;*&lt;/code&gt;, for example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:aws:logs:us-east-1:123412341234:log-group:/aws/route53/_*&lt;/code&gt; &lt;/p&gt; &lt;p&gt;To avoid the confused deputy problem, a security issue where an entity without a permission for an action can coerce a more-privileged entity to perform it, you can optionally limit the permissions that a service has to a resource in a resource-based policy by supplying the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;aws:SourceArn&lt;/code&gt;, supply the hosted zone ARN used in creating the query logging configuration. For example, &lt;code&gt;aws:SourceArn: arn:aws:route53:::hostedzone/hosted zone ID&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;aws:SourceAccount&lt;/code&gt;, supply the account ID for the account that creates the query logging configuration. For example, &lt;code&gt;aws:SourceAccount:111111111111&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/confused-deputy.html\&quot;&gt;The confused deputy problem&lt;/a&gt; in the &lt;i&gt;Amazon Web Services IAM User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t use the CloudWatch console to create or edit a resource policy. You must use the CloudWatch API, one of the Amazon Web Services SDKs, or the CLI.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/dd&gt; &lt;dt&gt;Log Streams and Edge Locations&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;When Route 53 finishes creating the configuration for DNS query logging, it does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a log stream for an edge location the first time that the edge location responds to DNS queries for the specified hosted zone. That log stream is used to log all queries that Route 53 responds to for that edge location.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Begins to send query logs to the applicable log stream.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The name of each log stream is in the following format:&lt;/p&gt; &lt;p&gt; &lt;code&gt; &lt;i&gt;hosted zone ID&lt;/i&gt;/&lt;i&gt;edge location code&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The edge location code is a three-letter code and an arbitrarily assigned number, for example, DFW3. The three-letter code typically corresponds with the International Air Transport Association airport code for an airport near the edge location. (These abbreviations might change in the future.) For a list of edge locations, see \&quot;The Route 53 Global Network\&quot; on the &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/details/\&quot;&gt;Route 53 Product Details&lt;/a&gt; page.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Queries That Are Logged&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Query logs contain only the queries that DNS resolvers forward to Route 53. If a DNS resolver has already cached the response to a query (such as the IP address for a load balancer for example.com), the resolver will continue to return the cached response. It doesn&#39;t forward another query to Route 53 until the TTL for the corresponding resource record set expires. Depending on how many DNS queries are submitted for a resource record set, and depending on the TTL for that resource record set, query logs might contain information about only one query out of every several thousand queries that are submitted to DNS. For more information about how DNS works, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\&quot;&gt;Routing Internet Traffic to Your Website or Web Application&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Log File Format&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;For a list of the values in each query log and the format of each value, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html\&quot;&gt;Logging DNS Queries&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Pricing&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;For information about charges for query logs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;How to Stop Logging&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;If you want Route 53 to stop sending query logs to CloudWatch Logs, delete the query logging configuration. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeleteQueryLoggingConfig.html\&quot;&gt;DeleteQueryLoggingConfig&lt;/a&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
     * @param createQueryLoggingConfigRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateQueryLoggingConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudWatchLogsLogGroup </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> QueryLoggingConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientCloudWatchLogsResourcePolicy </td><td>  -  </td></tr>
     </table>
     */
    public CreateQueryLoggingConfigResponse createQueryLoggingConfig(CreateQueryLoggingConfigRequest createQueryLoggingConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateQueryLoggingConfigResponse> localVarResp = createQueryLoggingConfigWithHttpInfo(createQueryLoggingConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a configuration for DNS query logging. After you create a query logging configuration, Amazon Route 53 begins to publish log data to an Amazon CloudWatch Logs log group.&lt;/p&gt; &lt;p&gt;DNS query logs contain information about the queries that Route 53 receives for a specified public hosted zone, such as the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Route 53 edge location that responded to the DNS query&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Domain or subdomain that was requested&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;DNS record type, such as A or AAAA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;DNS response code, such as &lt;code&gt;NoError&lt;/code&gt; or &lt;code&gt;ServFail&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;dl&gt; &lt;dt&gt;Log Group and Resource Policy&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Before you create a query logging configuration, perform the following operations.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you create a query logging configuration using the Route 53 console, Route 53 performs these operations automatically.&lt;/p&gt; &lt;/note&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a CloudWatch Logs log group, and make note of the ARN, which you specify when you create a query logging configuration. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must create the log group in the us-east-1 region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You must use the same Amazon Web Services account to create the log group and the hosted zone that you want to configure query logging for.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you create log groups for query logging, we recommend that you use a consistent prefix, for example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;/aws/route53/&lt;i&gt;hosted zone name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;In the next step, you&#39;ll create a resource policy, which controls access to one or more log groups and the associated Amazon Web Services resources, such as Route 53 hosted zones. There&#39;s a limit on the number of resource policies that you can create, so we recommend that you use a consistent prefix so you can use the same resource policy for all the log groups that you create for query logging.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a CloudWatch Logs resource policy, and give it the permissions that Route 53 needs to create log streams and to send query logs to log streams. For the value of &lt;code&gt;Resource&lt;/code&gt;, specify the ARN for the log group that you created in the previous step. To use the same resource policy for all the CloudWatch Logs log groups that you created for query logging configurations, replace the hosted zone name with &lt;code&gt;*&lt;/code&gt;, for example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:aws:logs:us-east-1:123412341234:log-group:/aws/route53/_*&lt;/code&gt; &lt;/p&gt; &lt;p&gt;To avoid the confused deputy problem, a security issue where an entity without a permission for an action can coerce a more-privileged entity to perform it, you can optionally limit the permissions that a service has to a resource in a resource-based policy by supplying the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;aws:SourceArn&lt;/code&gt;, supply the hosted zone ARN used in creating the query logging configuration. For example, &lt;code&gt;aws:SourceArn: arn:aws:route53:::hostedzone/hosted zone ID&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;aws:SourceAccount&lt;/code&gt;, supply the account ID for the account that creates the query logging configuration. For example, &lt;code&gt;aws:SourceAccount:111111111111&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/confused-deputy.html\&quot;&gt;The confused deputy problem&lt;/a&gt; in the &lt;i&gt;Amazon Web Services IAM User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t use the CloudWatch console to create or edit a resource policy. You must use the CloudWatch API, one of the Amazon Web Services SDKs, or the CLI.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/dd&gt; &lt;dt&gt;Log Streams and Edge Locations&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;When Route 53 finishes creating the configuration for DNS query logging, it does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a log stream for an edge location the first time that the edge location responds to DNS queries for the specified hosted zone. That log stream is used to log all queries that Route 53 responds to for that edge location.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Begins to send query logs to the applicable log stream.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The name of each log stream is in the following format:&lt;/p&gt; &lt;p&gt; &lt;code&gt; &lt;i&gt;hosted zone ID&lt;/i&gt;/&lt;i&gt;edge location code&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The edge location code is a three-letter code and an arbitrarily assigned number, for example, DFW3. The three-letter code typically corresponds with the International Air Transport Association airport code for an airport near the edge location. (These abbreviations might change in the future.) For a list of edge locations, see \&quot;The Route 53 Global Network\&quot; on the &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/details/\&quot;&gt;Route 53 Product Details&lt;/a&gt; page.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Queries That Are Logged&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Query logs contain only the queries that DNS resolvers forward to Route 53. If a DNS resolver has already cached the response to a query (such as the IP address for a load balancer for example.com), the resolver will continue to return the cached response. It doesn&#39;t forward another query to Route 53 until the TTL for the corresponding resource record set expires. Depending on how many DNS queries are submitted for a resource record set, and depending on the TTL for that resource record set, query logs might contain information about only one query out of every several thousand queries that are submitted to DNS. For more information about how DNS works, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\&quot;&gt;Routing Internet Traffic to Your Website or Web Application&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Log File Format&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;For a list of the values in each query log and the format of each value, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html\&quot;&gt;Logging DNS Queries&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Pricing&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;For information about charges for query logs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;How to Stop Logging&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;If you want Route 53 to stop sending query logs to CloudWatch Logs, delete the query logging configuration. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeleteQueryLoggingConfig.html\&quot;&gt;DeleteQueryLoggingConfig&lt;/a&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
     * @param createQueryLoggingConfigRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateQueryLoggingConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudWatchLogsLogGroup </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> QueryLoggingConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientCloudWatchLogsResourcePolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateQueryLoggingConfigResponse> createQueryLoggingConfigWithHttpInfo(CreateQueryLoggingConfigRequest createQueryLoggingConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createQueryLoggingConfigValidateBeforeCall(createQueryLoggingConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateQueryLoggingConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a configuration for DNS query logging. After you create a query logging configuration, Amazon Route 53 begins to publish log data to an Amazon CloudWatch Logs log group.&lt;/p&gt; &lt;p&gt;DNS query logs contain information about the queries that Route 53 receives for a specified public hosted zone, such as the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Route 53 edge location that responded to the DNS query&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Domain or subdomain that was requested&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;DNS record type, such as A or AAAA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;DNS response code, such as &lt;code&gt;NoError&lt;/code&gt; or &lt;code&gt;ServFail&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;dl&gt; &lt;dt&gt;Log Group and Resource Policy&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Before you create a query logging configuration, perform the following operations.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you create a query logging configuration using the Route 53 console, Route 53 performs these operations automatically.&lt;/p&gt; &lt;/note&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a CloudWatch Logs log group, and make note of the ARN, which you specify when you create a query logging configuration. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must create the log group in the us-east-1 region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You must use the same Amazon Web Services account to create the log group and the hosted zone that you want to configure query logging for.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you create log groups for query logging, we recommend that you use a consistent prefix, for example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;/aws/route53/&lt;i&gt;hosted zone name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;In the next step, you&#39;ll create a resource policy, which controls access to one or more log groups and the associated Amazon Web Services resources, such as Route 53 hosted zones. There&#39;s a limit on the number of resource policies that you can create, so we recommend that you use a consistent prefix so you can use the same resource policy for all the log groups that you create for query logging.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a CloudWatch Logs resource policy, and give it the permissions that Route 53 needs to create log streams and to send query logs to log streams. For the value of &lt;code&gt;Resource&lt;/code&gt;, specify the ARN for the log group that you created in the previous step. To use the same resource policy for all the CloudWatch Logs log groups that you created for query logging configurations, replace the hosted zone name with &lt;code&gt;*&lt;/code&gt;, for example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:aws:logs:us-east-1:123412341234:log-group:/aws/route53/_*&lt;/code&gt; &lt;/p&gt; &lt;p&gt;To avoid the confused deputy problem, a security issue where an entity without a permission for an action can coerce a more-privileged entity to perform it, you can optionally limit the permissions that a service has to a resource in a resource-based policy by supplying the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;aws:SourceArn&lt;/code&gt;, supply the hosted zone ARN used in creating the query logging configuration. For example, &lt;code&gt;aws:SourceArn: arn:aws:route53:::hostedzone/hosted zone ID&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;aws:SourceAccount&lt;/code&gt;, supply the account ID for the account that creates the query logging configuration. For example, &lt;code&gt;aws:SourceAccount:111111111111&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/confused-deputy.html\&quot;&gt;The confused deputy problem&lt;/a&gt; in the &lt;i&gt;Amazon Web Services IAM User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t use the CloudWatch console to create or edit a resource policy. You must use the CloudWatch API, one of the Amazon Web Services SDKs, or the CLI.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/dd&gt; &lt;dt&gt;Log Streams and Edge Locations&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;When Route 53 finishes creating the configuration for DNS query logging, it does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a log stream for an edge location the first time that the edge location responds to DNS queries for the specified hosted zone. That log stream is used to log all queries that Route 53 responds to for that edge location.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Begins to send query logs to the applicable log stream.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The name of each log stream is in the following format:&lt;/p&gt; &lt;p&gt; &lt;code&gt; &lt;i&gt;hosted zone ID&lt;/i&gt;/&lt;i&gt;edge location code&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The edge location code is a three-letter code and an arbitrarily assigned number, for example, DFW3. The three-letter code typically corresponds with the International Air Transport Association airport code for an airport near the edge location. (These abbreviations might change in the future.) For a list of edge locations, see \&quot;The Route 53 Global Network\&quot; on the &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/details/\&quot;&gt;Route 53 Product Details&lt;/a&gt; page.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Queries That Are Logged&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Query logs contain only the queries that DNS resolvers forward to Route 53. If a DNS resolver has already cached the response to a query (such as the IP address for a load balancer for example.com), the resolver will continue to return the cached response. It doesn&#39;t forward another query to Route 53 until the TTL for the corresponding resource record set expires. Depending on how many DNS queries are submitted for a resource record set, and depending on the TTL for that resource record set, query logs might contain information about only one query out of every several thousand queries that are submitted to DNS. For more information about how DNS works, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\&quot;&gt;Routing Internet Traffic to Your Website or Web Application&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Log File Format&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;For a list of the values in each query log and the format of each value, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html\&quot;&gt;Logging DNS Queries&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Pricing&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;For information about charges for query logs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;How to Stop Logging&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;If you want Route 53 to stop sending query logs to CloudWatch Logs, delete the query logging configuration. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeleteQueryLoggingConfig.html\&quot;&gt;DeleteQueryLoggingConfig&lt;/a&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
     * @param createQueryLoggingConfigRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudWatchLogsLogGroup </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> QueryLoggingConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientCloudWatchLogsResourcePolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQueryLoggingConfigAsync(CreateQueryLoggingConfigRequest createQueryLoggingConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateQueryLoggingConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createQueryLoggingConfigValidateBeforeCall(createQueryLoggingConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateQueryLoggingConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReusableDelegationSet
     * @param createReusableDelegationSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DelegationSetAlreadyCreated </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HostedZoneNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DelegationSetNotAvailable </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DelegationSetAlreadyReusable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReusableDelegationSetCall(CreateReusableDelegationSetRequest createReusableDelegationSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReusableDelegationSetRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/delegationset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReusableDelegationSetValidateBeforeCall(CreateReusableDelegationSetRequest createReusableDelegationSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createReusableDelegationSetRequest' is set
        if (createReusableDelegationSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createReusableDelegationSetRequest' when calling createReusableDelegationSet(Async)");
        }

        return createReusableDelegationSetCall(createReusableDelegationSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a delegation set (a group of four name servers) that can be reused by multiple hosted zones that were created by the same Amazon Web Services account. &lt;/p&gt; &lt;p&gt;You can also create a reusable delegation set that uses the four name servers that are associated with an existing hosted zone. Specify the hosted zone ID in the &lt;code&gt;CreateReusableDelegationSet&lt;/code&gt; request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t associate a reusable delegation set with a private hosted zone.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For information about using a reusable delegation set to configure white label name servers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/white-label-name-servers.html\&quot;&gt;Configuring White Label Name Servers&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The process for migrating existing hosted zones to use a reusable delegation set is comparable to the process for configuring white label name servers. You need to perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a reusable delegation set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Recreate hosted zones, and reduce the TTL to 60 seconds or less.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Recreate resource record sets in the new hosted zones.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the registrar&#39;s name servers to use the name servers for the new hosted zones.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Monitor traffic for the website or application.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change TTLs back to their original values.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you want to migrate existing hosted zones to use a reusable delegation set, the existing hosted zones can&#39;t use any of the name servers that are assigned to the reusable delegation set. If one or more hosted zones do use one or more name servers that are assigned to the reusable delegation set, you can do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For small numbers of hosted zones—up to a few hundred—it&#39;s relatively easy to create reusable delegation sets until you get one that has four name servers that don&#39;t overlap with any of the name servers in your hosted zones.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For larger numbers of hosted zones, the easiest solution is to use more than one reusable delegation set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For larger numbers of hosted zones, you can also migrate hosted zones that have overlapping name servers to hosted zones that don&#39;t have overlapping name servers, then migrate the hosted zones again to use the reusable delegation set.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param createReusableDelegationSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateReusableDelegationSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DelegationSetAlreadyCreated </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HostedZoneNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DelegationSetNotAvailable </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DelegationSetAlreadyReusable </td><td>  -  </td></tr>
     </table>
     */
    public CreateReusableDelegationSetResponse createReusableDelegationSet(CreateReusableDelegationSetRequest createReusableDelegationSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateReusableDelegationSetResponse> localVarResp = createReusableDelegationSetWithHttpInfo(createReusableDelegationSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a delegation set (a group of four name servers) that can be reused by multiple hosted zones that were created by the same Amazon Web Services account. &lt;/p&gt; &lt;p&gt;You can also create a reusable delegation set that uses the four name servers that are associated with an existing hosted zone. Specify the hosted zone ID in the &lt;code&gt;CreateReusableDelegationSet&lt;/code&gt; request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t associate a reusable delegation set with a private hosted zone.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For information about using a reusable delegation set to configure white label name servers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/white-label-name-servers.html\&quot;&gt;Configuring White Label Name Servers&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The process for migrating existing hosted zones to use a reusable delegation set is comparable to the process for configuring white label name servers. You need to perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a reusable delegation set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Recreate hosted zones, and reduce the TTL to 60 seconds or less.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Recreate resource record sets in the new hosted zones.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the registrar&#39;s name servers to use the name servers for the new hosted zones.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Monitor traffic for the website or application.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change TTLs back to their original values.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you want to migrate existing hosted zones to use a reusable delegation set, the existing hosted zones can&#39;t use any of the name servers that are assigned to the reusable delegation set. If one or more hosted zones do use one or more name servers that are assigned to the reusable delegation set, you can do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For small numbers of hosted zones—up to a few hundred—it&#39;s relatively easy to create reusable delegation sets until you get one that has four name servers that don&#39;t overlap with any of the name servers in your hosted zones.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For larger numbers of hosted zones, the easiest solution is to use more than one reusable delegation set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For larger numbers of hosted zones, you can also migrate hosted zones that have overlapping name servers to hosted zones that don&#39;t have overlapping name servers, then migrate the hosted zones again to use the reusable delegation set.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param createReusableDelegationSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateReusableDelegationSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DelegationSetAlreadyCreated </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HostedZoneNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DelegationSetNotAvailable </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DelegationSetAlreadyReusable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateReusableDelegationSetResponse> createReusableDelegationSetWithHttpInfo(CreateReusableDelegationSetRequest createReusableDelegationSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createReusableDelegationSetValidateBeforeCall(createReusableDelegationSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateReusableDelegationSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a delegation set (a group of four name servers) that can be reused by multiple hosted zones that were created by the same Amazon Web Services account. &lt;/p&gt; &lt;p&gt;You can also create a reusable delegation set that uses the four name servers that are associated with an existing hosted zone. Specify the hosted zone ID in the &lt;code&gt;CreateReusableDelegationSet&lt;/code&gt; request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t associate a reusable delegation set with a private hosted zone.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For information about using a reusable delegation set to configure white label name servers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/white-label-name-servers.html\&quot;&gt;Configuring White Label Name Servers&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The process for migrating existing hosted zones to use a reusable delegation set is comparable to the process for configuring white label name servers. You need to perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a reusable delegation set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Recreate hosted zones, and reduce the TTL to 60 seconds or less.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Recreate resource record sets in the new hosted zones.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the registrar&#39;s name servers to use the name servers for the new hosted zones.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Monitor traffic for the website or application.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change TTLs back to their original values.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you want to migrate existing hosted zones to use a reusable delegation set, the existing hosted zones can&#39;t use any of the name servers that are assigned to the reusable delegation set. If one or more hosted zones do use one or more name servers that are assigned to the reusable delegation set, you can do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For small numbers of hosted zones—up to a few hundred—it&#39;s relatively easy to create reusable delegation sets until you get one that has four name servers that don&#39;t overlap with any of the name servers in your hosted zones.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For larger numbers of hosted zones, the easiest solution is to use more than one reusable delegation set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For larger numbers of hosted zones, you can also migrate hosted zones that have overlapping name servers to hosted zones that don&#39;t have overlapping name servers, then migrate the hosted zones again to use the reusable delegation set.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param createReusableDelegationSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DelegationSetAlreadyCreated </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitsExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HostedZoneNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DelegationSetNotAvailable </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DelegationSetAlreadyReusable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReusableDelegationSetAsync(CreateReusableDelegationSetRequest createReusableDelegationSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateReusableDelegationSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReusableDelegationSetValidateBeforeCall(createReusableDelegationSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateReusableDelegationSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrafficPolicy
     * @param createTrafficPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTrafficPolicies </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TrafficPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTrafficPolicyDocument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrafficPolicyCall(CreateTrafficPolicyRequest createTrafficPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTrafficPolicyRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrafficPolicyValidateBeforeCall(CreateTrafficPolicyRequest createTrafficPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTrafficPolicyRequest' is set
        if (createTrafficPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'createTrafficPolicyRequest' when calling createTrafficPolicy(Async)");
        }

        return createTrafficPolicyCall(createTrafficPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a traffic policy, which you use to create multiple DNS resource record sets for one domain name (such as example.com) or one subdomain name (such as www.example.com).
     * @param createTrafficPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateTrafficPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTrafficPolicies </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TrafficPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTrafficPolicyDocument </td><td>  -  </td></tr>
     </table>
     */
    public CreateTrafficPolicyResponse createTrafficPolicy(CreateTrafficPolicyRequest createTrafficPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateTrafficPolicyResponse> localVarResp = createTrafficPolicyWithHttpInfo(createTrafficPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a traffic policy, which you use to create multiple DNS resource record sets for one domain name (such as example.com) or one subdomain name (such as www.example.com).
     * @param createTrafficPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateTrafficPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTrafficPolicies </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TrafficPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTrafficPolicyDocument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTrafficPolicyResponse> createTrafficPolicyWithHttpInfo(CreateTrafficPolicyRequest createTrafficPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createTrafficPolicyValidateBeforeCall(createTrafficPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateTrafficPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a traffic policy, which you use to create multiple DNS resource record sets for one domain name (such as example.com) or one subdomain name (such as www.example.com).
     * @param createTrafficPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTrafficPolicies </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TrafficPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTrafficPolicyDocument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrafficPolicyAsync(CreateTrafficPolicyRequest createTrafficPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateTrafficPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrafficPolicyValidateBeforeCall(createTrafficPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateTrafficPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrafficPolicyInstance
     * @param createTrafficPolicyInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTrafficPolicyInstances </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TrafficPolicyInstanceAlreadyExists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrafficPolicyInstanceCall(CreateTrafficPolicyInstanceRequest createTrafficPolicyInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTrafficPolicyInstanceRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicyinstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrafficPolicyInstanceValidateBeforeCall(CreateTrafficPolicyInstanceRequest createTrafficPolicyInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTrafficPolicyInstanceRequest' is set
        if (createTrafficPolicyInstanceRequest == null) {
            throw new ApiException("Missing the required parameter 'createTrafficPolicyInstanceRequest' when calling createTrafficPolicyInstance(Async)");
        }

        return createTrafficPolicyInstanceCall(createTrafficPolicyInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates resource record sets in a specified hosted zone based on the settings in a specified traffic policy version. In addition, &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; associates the resource record sets with a specified domain name (such as example.com) or subdomain name (such as www.example.com). Amazon Route 53 responds to DNS queries for the domain or subdomain name by using the resource record sets that &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; created.
     * @param createTrafficPolicyInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateTrafficPolicyInstanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTrafficPolicyInstances </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TrafficPolicyInstanceAlreadyExists </td><td>  -  </td></tr>
     </table>
     */
    public CreateTrafficPolicyInstanceResponse createTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest createTrafficPolicyInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateTrafficPolicyInstanceResponse> localVarResp = createTrafficPolicyInstanceWithHttpInfo(createTrafficPolicyInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates resource record sets in a specified hosted zone based on the settings in a specified traffic policy version. In addition, &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; associates the resource record sets with a specified domain name (such as example.com) or subdomain name (such as www.example.com). Amazon Route 53 responds to DNS queries for the domain or subdomain name by using the resource record sets that &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; created.
     * @param createTrafficPolicyInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateTrafficPolicyInstanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTrafficPolicyInstances </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TrafficPolicyInstanceAlreadyExists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTrafficPolicyInstanceResponse> createTrafficPolicyInstanceWithHttpInfo(CreateTrafficPolicyInstanceRequest createTrafficPolicyInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createTrafficPolicyInstanceValidateBeforeCall(createTrafficPolicyInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateTrafficPolicyInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates resource record sets in a specified hosted zone based on the settings in a specified traffic policy version. In addition, &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; associates the resource record sets with a specified domain name (such as example.com) or subdomain name (such as www.example.com). Amazon Route 53 responds to DNS queries for the domain or subdomain name by using the resource record sets that &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; created.
     * @param createTrafficPolicyInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTrafficPolicyInstances </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TrafficPolicyInstanceAlreadyExists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrafficPolicyInstanceAsync(CreateTrafficPolicyInstanceRequest createTrafficPolicyInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateTrafficPolicyInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrafficPolicyInstanceValidateBeforeCall(createTrafficPolicyInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateTrafficPolicyInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrafficPolicyVersion
     * @param id The ID of the traffic policy for which you want to create a new version. (required)
     * @param createTrafficPolicyVersionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTrafficPolicyVersionsForCurrentPolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTrafficPolicyDocument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrafficPolicyVersionCall(String id, CreateTrafficPolicyVersionRequest createTrafficPolicyVersionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTrafficPolicyVersionRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrafficPolicyVersionValidateBeforeCall(String id, CreateTrafficPolicyVersionRequest createTrafficPolicyVersionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createTrafficPolicyVersion(Async)");
        }

        // verify the required parameter 'createTrafficPolicyVersionRequest' is set
        if (createTrafficPolicyVersionRequest == null) {
            throw new ApiException("Missing the required parameter 'createTrafficPolicyVersionRequest' when calling createTrafficPolicyVersion(Async)");
        }

        return createTrafficPolicyVersionCall(id, createTrafficPolicyVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a new version of an existing traffic policy. When you create a new version of a traffic policy, you specify the ID of the traffic policy that you want to update and a JSON-formatted document that describes the new version. You use traffic policies to create multiple DNS resource record sets for one domain name (such as example.com) or one subdomain name (such as www.example.com). You can create a maximum of 1000 versions of a traffic policy. If you reach the limit and need to create another version, you&#39;ll need to start a new traffic policy.
     * @param id The ID of the traffic policy for which you want to create a new version. (required)
     * @param createTrafficPolicyVersionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateTrafficPolicyVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTrafficPolicyVersionsForCurrentPolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTrafficPolicyDocument </td><td>  -  </td></tr>
     </table>
     */
    public CreateTrafficPolicyVersionResponse createTrafficPolicyVersion(String id, CreateTrafficPolicyVersionRequest createTrafficPolicyVersionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateTrafficPolicyVersionResponse> localVarResp = createTrafficPolicyVersionWithHttpInfo(id, createTrafficPolicyVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new version of an existing traffic policy. When you create a new version of a traffic policy, you specify the ID of the traffic policy that you want to update and a JSON-formatted document that describes the new version. You use traffic policies to create multiple DNS resource record sets for one domain name (such as example.com) or one subdomain name (such as www.example.com). You can create a maximum of 1000 versions of a traffic policy. If you reach the limit and need to create another version, you&#39;ll need to start a new traffic policy.
     * @param id The ID of the traffic policy for which you want to create a new version. (required)
     * @param createTrafficPolicyVersionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateTrafficPolicyVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTrafficPolicyVersionsForCurrentPolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTrafficPolicyDocument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTrafficPolicyVersionResponse> createTrafficPolicyVersionWithHttpInfo(String id, CreateTrafficPolicyVersionRequest createTrafficPolicyVersionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createTrafficPolicyVersionValidateBeforeCall(id, createTrafficPolicyVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateTrafficPolicyVersionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new version of an existing traffic policy. When you create a new version of a traffic policy, you specify the ID of the traffic policy that you want to update and a JSON-formatted document that describes the new version. You use traffic policies to create multiple DNS resource record sets for one domain name (such as example.com) or one subdomain name (such as www.example.com). You can create a maximum of 1000 versions of a traffic policy. If you reach the limit and need to create another version, you&#39;ll need to start a new traffic policy.
     * @param id The ID of the traffic policy for which you want to create a new version. (required)
     * @param createTrafficPolicyVersionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTrafficPolicyVersionsForCurrentPolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTrafficPolicyDocument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrafficPolicyVersionAsync(String id, CreateTrafficPolicyVersionRequest createTrafficPolicyVersionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateTrafficPolicyVersionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrafficPolicyVersionValidateBeforeCall(id, createTrafficPolicyVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateTrafficPolicyVersionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVPCAssociationAuthorization
     * @param id The ID of the private hosted zone that you want to authorize associating a VPC with. (required)
     * @param createVPCAssociationAuthorizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyVPCAssociationAuthorizations </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVPCAssociationAuthorizationCall(String id, CreateVPCAssociationAuthorizationRequest createVPCAssociationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVPCAssociationAuthorizationRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}/authorizevpcassociation"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVPCAssociationAuthorizationValidateBeforeCall(String id, CreateVPCAssociationAuthorizationRequest createVPCAssociationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createVPCAssociationAuthorization(Async)");
        }

        // verify the required parameter 'createVPCAssociationAuthorizationRequest' is set
        if (createVPCAssociationAuthorizationRequest == null) {
            throw new ApiException("Missing the required parameter 'createVPCAssociationAuthorizationRequest' when calling createVPCAssociationAuthorization(Async)");
        }

        return createVPCAssociationAuthorizationCall(id, createVPCAssociationAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Authorizes the Amazon Web Services account that created a specified VPC to submit an &lt;code&gt;AssociateVPCWithHostedZone&lt;/code&gt; request to associate the VPC with a specified hosted zone that was created by a different account. To submit a &lt;code&gt;CreateVPCAssociationAuthorization&lt;/code&gt; request, you must use the account that created the hosted zone. After you authorize the association, use the account that created the VPC to submit an &lt;code&gt;AssociateVPCWithHostedZone&lt;/code&gt; request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you want to associate multiple VPCs that you created by using one account with a hosted zone that you created by using a different account, you must submit one authorization request for each VPC.&lt;/p&gt; &lt;/note&gt;
     * @param id The ID of the private hosted zone that you want to authorize associating a VPC with. (required)
     * @param createVPCAssociationAuthorizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateVPCAssociationAuthorizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyVPCAssociationAuthorizations </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public CreateVPCAssociationAuthorizationResponse createVPCAssociationAuthorization(String id, CreateVPCAssociationAuthorizationRequest createVPCAssociationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateVPCAssociationAuthorizationResponse> localVarResp = createVPCAssociationAuthorizationWithHttpInfo(id, createVPCAssociationAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Authorizes the Amazon Web Services account that created a specified VPC to submit an &lt;code&gt;AssociateVPCWithHostedZone&lt;/code&gt; request to associate the VPC with a specified hosted zone that was created by a different account. To submit a &lt;code&gt;CreateVPCAssociationAuthorization&lt;/code&gt; request, you must use the account that created the hosted zone. After you authorize the association, use the account that created the VPC to submit an &lt;code&gt;AssociateVPCWithHostedZone&lt;/code&gt; request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you want to associate multiple VPCs that you created by using one account with a hosted zone that you created by using a different account, you must submit one authorization request for each VPC.&lt;/p&gt; &lt;/note&gt;
     * @param id The ID of the private hosted zone that you want to authorize associating a VPC with. (required)
     * @param createVPCAssociationAuthorizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateVPCAssociationAuthorizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyVPCAssociationAuthorizations </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateVPCAssociationAuthorizationResponse> createVPCAssociationAuthorizationWithHttpInfo(String id, CreateVPCAssociationAuthorizationRequest createVPCAssociationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createVPCAssociationAuthorizationValidateBeforeCall(id, createVPCAssociationAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateVPCAssociationAuthorizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Authorizes the Amazon Web Services account that created a specified VPC to submit an &lt;code&gt;AssociateVPCWithHostedZone&lt;/code&gt; request to associate the VPC with a specified hosted zone that was created by a different account. To submit a &lt;code&gt;CreateVPCAssociationAuthorization&lt;/code&gt; request, you must use the account that created the hosted zone. After you authorize the association, use the account that created the VPC to submit an &lt;code&gt;AssociateVPCWithHostedZone&lt;/code&gt; request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you want to associate multiple VPCs that you created by using one account with a hosted zone that you created by using a different account, you must submit one authorization request for each VPC.&lt;/p&gt; &lt;/note&gt;
     * @param id The ID of the private hosted zone that you want to authorize associating a VPC with. (required)
     * @param createVPCAssociationAuthorizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyVPCAssociationAuthorizations </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVPCAssociationAuthorizationAsync(String id, CreateVPCAssociationAuthorizationRequest createVPCAssociationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateVPCAssociationAuthorizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVPCAssociationAuthorizationValidateBeforeCall(id, createVPCAssociationAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateVPCAssociationAuthorizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deactivateKeySigningKey
     * @param hostedZoneId A unique string used to identify a hosted zone. (required)
     * @param name A string used to identify a key-signing key (KSK). (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchKeySigningKey </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KeySigningKeyInUse </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KeySigningKeyInParentDSRecord </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivateKeySigningKeyCall(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/deactivate"
            .replace("{" + "HostedZoneId" + "}", localVarApiClient.escapeString(hostedZoneId.toString()))
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateKeySigningKeyValidateBeforeCall(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostedZoneId' is set
        if (hostedZoneId == null) {
            throw new ApiException("Missing the required parameter 'hostedZoneId' when calling deactivateKeySigningKey(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deactivateKeySigningKey(Async)");
        }

        return deactivateKeySigningKeyCall(hostedZoneId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deactivates a key-signing key (KSK) so that it will not be used for signing by DNSSEC. This operation changes the KSK status to &lt;code&gt;INACTIVE&lt;/code&gt;.
     * @param hostedZoneId A unique string used to identify a hosted zone. (required)
     * @param name A string used to identify a key-signing key (KSK). (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeactivateKeySigningKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchKeySigningKey </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KeySigningKeyInUse </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KeySigningKeyInParentDSRecord </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateKeySigningKeyResponse deactivateKeySigningKey(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeactivateKeySigningKeyResponse> localVarResp = deactivateKeySigningKeyWithHttpInfo(hostedZoneId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deactivates a key-signing key (KSK) so that it will not be used for signing by DNSSEC. This operation changes the KSK status to &lt;code&gt;INACTIVE&lt;/code&gt;.
     * @param hostedZoneId A unique string used to identify a hosted zone. (required)
     * @param name A string used to identify a key-signing key (KSK). (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeactivateKeySigningKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchKeySigningKey </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KeySigningKeyInUse </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KeySigningKeyInParentDSRecord </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeactivateKeySigningKeyResponse> deactivateKeySigningKeyWithHttpInfo(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deactivateKeySigningKeyValidateBeforeCall(hostedZoneId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeactivateKeySigningKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deactivates a key-signing key (KSK) so that it will not be used for signing by DNSSEC. This operation changes the KSK status to &lt;code&gt;INACTIVE&lt;/code&gt;.
     * @param hostedZoneId A unique string used to identify a hosted zone. (required)
     * @param name A string used to identify a key-signing key (KSK). (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchKeySigningKey </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KeySigningKeyInUse </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KeySigningKeyInParentDSRecord </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivateKeySigningKeyAsync(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeactivateKeySigningKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateKeySigningKeyValidateBeforeCall(hostedZoneId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeactivateKeySigningKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCidrCollection
     * @param cidrCollectionId The UUID of the collection to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CidrCollectionInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCidrCollectionCall(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/cidrcollection/{CidrCollectionId}"
            .replace("{" + "CidrCollectionId" + "}", localVarApiClient.escapeString(cidrCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCidrCollectionValidateBeforeCall(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cidrCollectionId' is set
        if (cidrCollectionId == null) {
            throw new ApiException("Missing the required parameter 'cidrCollectionId' when calling deleteCidrCollection(Async)");
        }

        return deleteCidrCollectionCall(cidrCollectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a CIDR collection in the current Amazon Web Services account. The collection must be empty before it can be deleted.
     * @param cidrCollectionId The UUID of the collection to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CidrCollectionInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteCidrCollection(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteCidrCollectionWithHttpInfo(cidrCollectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a CIDR collection in the current Amazon Web Services account. The collection must be empty before it can be deleted.
     * @param cidrCollectionId The UUID of the collection to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CidrCollectionInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteCidrCollectionWithHttpInfo(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteCidrCollectionValidateBeforeCall(cidrCollectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a CIDR collection in the current Amazon Web Services account. The collection must be empty before it can be deleted.
     * @param cidrCollectionId The UUID of the collection to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CidrCollectionInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCidrCollectionAsync(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCidrCollectionValidateBeforeCall(cidrCollectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteHealthCheck
     * @param healthCheckId The ID of the health check that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HealthCheckInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHealthCheckCall(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/healthcheck/{HealthCheckId}"
            .replace("{" + "HealthCheckId" + "}", localVarApiClient.escapeString(healthCheckId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHealthCheckValidateBeforeCall(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'healthCheckId' is set
        if (healthCheckId == null) {
            throw new ApiException("Missing the required parameter 'healthCheckId' when calling deleteHealthCheck(Async)");
        }

        return deleteHealthCheckCall(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a health check.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Amazon Route 53 does not prevent you from deleting a health check even if the health check is associated with one or more resource record sets. If you delete a health check and you don&#39;t update the associated resource record sets, the future status of the health check can&#39;t be predicted and may change. This will affect the routing of DNS queries for your DNS failover configuration. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/health-checks-creating-deleting.html#health-checks-deleting.html\&quot;&gt;Replacing and Deleting Health Checks&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you&#39;re using Cloud Map and you configured Cloud Map to create a Route 53 health check when you register an instance, you can&#39;t use the Route 53 &lt;code&gt;DeleteHealthCheck&lt;/code&gt; command to delete the health check. The health check is deleted automatically when you deregister the instance; there can be a delay of several hours before the health check is deleted from Route 53. &lt;/p&gt;
     * @param healthCheckId The ID of the health check that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HealthCheckInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteHealthCheck(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteHealthCheckWithHttpInfo(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a health check.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Amazon Route 53 does not prevent you from deleting a health check even if the health check is associated with one or more resource record sets. If you delete a health check and you don&#39;t update the associated resource record sets, the future status of the health check can&#39;t be predicted and may change. This will affect the routing of DNS queries for your DNS failover configuration. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/health-checks-creating-deleting.html#health-checks-deleting.html\&quot;&gt;Replacing and Deleting Health Checks&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you&#39;re using Cloud Map and you configured Cloud Map to create a Route 53 health check when you register an instance, you can&#39;t use the Route 53 &lt;code&gt;DeleteHealthCheck&lt;/code&gt; command to delete the health check. The health check is deleted automatically when you deregister the instance; there can be a delay of several hours before the health check is deleted from Route 53. &lt;/p&gt;
     * @param healthCheckId The ID of the health check that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HealthCheckInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteHealthCheckWithHttpInfo(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteHealthCheckValidateBeforeCall(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a health check.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Amazon Route 53 does not prevent you from deleting a health check even if the health check is associated with one or more resource record sets. If you delete a health check and you don&#39;t update the associated resource record sets, the future status of the health check can&#39;t be predicted and may change. This will affect the routing of DNS queries for your DNS failover configuration. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/health-checks-creating-deleting.html#health-checks-deleting.html\&quot;&gt;Replacing and Deleting Health Checks&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you&#39;re using Cloud Map and you configured Cloud Map to create a Route 53 health check when you register an instance, you can&#39;t use the Route 53 &lt;code&gt;DeleteHealthCheck&lt;/code&gt; command to delete the health check. The health check is deleted automatically when you deregister the instance; there can be a delay of several hours before the health check is deleted from Route 53. &lt;/p&gt;
     * @param healthCheckId The ID of the health check that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HealthCheckInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHealthCheckAsync(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHealthCheckValidateBeforeCall(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteHostedZone
     * @param id The ID of the hosted zone you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HostedZoneNotEmpty </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDomainName </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHostedZoneCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHostedZoneValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteHostedZone(Async)");
        }

        return deleteHostedZoneCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a hosted zone.&lt;/p&gt; &lt;p&gt;If the hosted zone was created by another service, such as Cloud Map, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DeleteHostedZone.html#delete-public-hosted-zone-created-by-another-service\&quot;&gt;Deleting Public Hosted Zones That Were Created by Another Service&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt; for information about how to delete it. (The process is the same for public and private hosted zones that were created by another service.)&lt;/p&gt; &lt;p&gt;If you want to keep your domain registration but you want to stop routing internet traffic to your website or web application, we recommend that you delete resource record sets in the hosted zone instead of deleting the hosted zone.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you delete a hosted zone, you can&#39;t undelete it. You must create a new hosted zone and update the name servers for your domain registration, which can require up to 48 hours to take effect. (If you delegated responsibility for a subdomain to a hosted zone and you delete the child hosted zone, you must update the name servers in the parent hosted zone.) In addition, if you delete a hosted zone, someone could hijack the domain and route traffic to their own resources using your domain name.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you want to avoid the monthly charge for the hosted zone, you can transfer DNS service for the domain to a free DNS service. When you transfer DNS service, you have to update the name servers for the domain registration. If the domain is registered with Route 53, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_UpdateDomainNameservers.html\&quot;&gt;UpdateDomainNameservers&lt;/a&gt; for information about how to replace Route 53 name servers with name servers for the new DNS service. If the domain is registered with another registrar, use the method provided by the registrar to update name servers for the domain registration. For more information, perform an internet search on \&quot;free DNS service.\&quot;&lt;/p&gt; &lt;p&gt;You can delete a hosted zone only if it contains only the default SOA record and NS resource record sets. If the hosted zone contains other resource record sets, you must delete them before you can delete the hosted zone. If you try to delete a hosted zone that contains other resource record sets, the request fails, and Route 53 returns a &lt;code&gt;HostedZoneNotEmpty&lt;/code&gt; error. For information about deleting records from your hosted zone, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ChangeResourceRecordSets.html\&quot;&gt;ChangeResourceRecordSets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To verify that the hosted zone has been deleted, do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;GetHostedZone&lt;/code&gt; action to request information about the hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;ListHostedZones&lt;/code&gt; action to get a list of the hosted zones associated with the current Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param id The ID of the hosted zone you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteHostedZoneResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HostedZoneNotEmpty </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDomainName </td><td>  -  </td></tr>
     </table>
     */
    public DeleteHostedZoneResponse deleteHostedZone(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteHostedZoneResponse> localVarResp = deleteHostedZoneWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a hosted zone.&lt;/p&gt; &lt;p&gt;If the hosted zone was created by another service, such as Cloud Map, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DeleteHostedZone.html#delete-public-hosted-zone-created-by-another-service\&quot;&gt;Deleting Public Hosted Zones That Were Created by Another Service&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt; for information about how to delete it. (The process is the same for public and private hosted zones that were created by another service.)&lt;/p&gt; &lt;p&gt;If you want to keep your domain registration but you want to stop routing internet traffic to your website or web application, we recommend that you delete resource record sets in the hosted zone instead of deleting the hosted zone.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you delete a hosted zone, you can&#39;t undelete it. You must create a new hosted zone and update the name servers for your domain registration, which can require up to 48 hours to take effect. (If you delegated responsibility for a subdomain to a hosted zone and you delete the child hosted zone, you must update the name servers in the parent hosted zone.) In addition, if you delete a hosted zone, someone could hijack the domain and route traffic to their own resources using your domain name.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you want to avoid the monthly charge for the hosted zone, you can transfer DNS service for the domain to a free DNS service. When you transfer DNS service, you have to update the name servers for the domain registration. If the domain is registered with Route 53, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_UpdateDomainNameservers.html\&quot;&gt;UpdateDomainNameservers&lt;/a&gt; for information about how to replace Route 53 name servers with name servers for the new DNS service. If the domain is registered with another registrar, use the method provided by the registrar to update name servers for the domain registration. For more information, perform an internet search on \&quot;free DNS service.\&quot;&lt;/p&gt; &lt;p&gt;You can delete a hosted zone only if it contains only the default SOA record and NS resource record sets. If the hosted zone contains other resource record sets, you must delete them before you can delete the hosted zone. If you try to delete a hosted zone that contains other resource record sets, the request fails, and Route 53 returns a &lt;code&gt;HostedZoneNotEmpty&lt;/code&gt; error. For information about deleting records from your hosted zone, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ChangeResourceRecordSets.html\&quot;&gt;ChangeResourceRecordSets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To verify that the hosted zone has been deleted, do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;GetHostedZone&lt;/code&gt; action to request information about the hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;ListHostedZones&lt;/code&gt; action to get a list of the hosted zones associated with the current Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param id The ID of the hosted zone you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteHostedZoneResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HostedZoneNotEmpty </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDomainName </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteHostedZoneResponse> deleteHostedZoneWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteHostedZoneValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteHostedZoneResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a hosted zone.&lt;/p&gt; &lt;p&gt;If the hosted zone was created by another service, such as Cloud Map, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DeleteHostedZone.html#delete-public-hosted-zone-created-by-another-service\&quot;&gt;Deleting Public Hosted Zones That Were Created by Another Service&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt; for information about how to delete it. (The process is the same for public and private hosted zones that were created by another service.)&lt;/p&gt; &lt;p&gt;If you want to keep your domain registration but you want to stop routing internet traffic to your website or web application, we recommend that you delete resource record sets in the hosted zone instead of deleting the hosted zone.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you delete a hosted zone, you can&#39;t undelete it. You must create a new hosted zone and update the name servers for your domain registration, which can require up to 48 hours to take effect. (If you delegated responsibility for a subdomain to a hosted zone and you delete the child hosted zone, you must update the name servers in the parent hosted zone.) In addition, if you delete a hosted zone, someone could hijack the domain and route traffic to their own resources using your domain name.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you want to avoid the monthly charge for the hosted zone, you can transfer DNS service for the domain to a free DNS service. When you transfer DNS service, you have to update the name servers for the domain registration. If the domain is registered with Route 53, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_UpdateDomainNameservers.html\&quot;&gt;UpdateDomainNameservers&lt;/a&gt; for information about how to replace Route 53 name servers with name servers for the new DNS service. If the domain is registered with another registrar, use the method provided by the registrar to update name servers for the domain registration. For more information, perform an internet search on \&quot;free DNS service.\&quot;&lt;/p&gt; &lt;p&gt;You can delete a hosted zone only if it contains only the default SOA record and NS resource record sets. If the hosted zone contains other resource record sets, you must delete them before you can delete the hosted zone. If you try to delete a hosted zone that contains other resource record sets, the request fails, and Route 53 returns a &lt;code&gt;HostedZoneNotEmpty&lt;/code&gt; error. For information about deleting records from your hosted zone, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ChangeResourceRecordSets.html\&quot;&gt;ChangeResourceRecordSets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To verify that the hosted zone has been deleted, do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;GetHostedZone&lt;/code&gt; action to request information about the hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;ListHostedZones&lt;/code&gt; action to get a list of the hosted zones associated with the current Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param id The ID of the hosted zone you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> HostedZoneNotEmpty </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDomainName </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHostedZoneAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteHostedZoneResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHostedZoneValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteHostedZoneResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteKeySigningKey
     * @param hostedZoneId A unique string used to identify a hosted zone. (required)
     * @param name A string used to identify a key-signing key (KSK). (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchKeySigningKey </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeySigningKeyCall(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}"
            .replace("{" + "HostedZoneId" + "}", localVarApiClient.escapeString(hostedZoneId.toString()))
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteKeySigningKeyValidateBeforeCall(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostedZoneId' is set
        if (hostedZoneId == null) {
            throw new ApiException("Missing the required parameter 'hostedZoneId' when calling deleteKeySigningKey(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteKeySigningKey(Async)");
        }

        return deleteKeySigningKeyCall(hostedZoneId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a key-signing key (KSK). Before you can delete a KSK, you must deactivate it. The KSK must be deactivated before you can delete it regardless of whether the hosted zone is enabled for DNSSEC signing.&lt;/p&gt; &lt;p&gt;You can use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeactivateKeySigningKey.html\&quot;&gt;DeactivateKeySigningKey&lt;/a&gt; to deactivate the key before you delete it.&lt;/p&gt; &lt;p&gt;Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetDNSSEC.html\&quot;&gt;GetDNSSEC&lt;/a&gt; to verify that the KSK is in an &lt;code&gt;INACTIVE&lt;/code&gt; status.&lt;/p&gt;
     * @param hostedZoneId A unique string used to identify a hosted zone. (required)
     * @param name A string used to identify a key-signing key (KSK). (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteKeySigningKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchKeySigningKey </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public DeleteKeySigningKeyResponse deleteKeySigningKey(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteKeySigningKeyResponse> localVarResp = deleteKeySigningKeyWithHttpInfo(hostedZoneId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a key-signing key (KSK). Before you can delete a KSK, you must deactivate it. The KSK must be deactivated before you can delete it regardless of whether the hosted zone is enabled for DNSSEC signing.&lt;/p&gt; &lt;p&gt;You can use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeactivateKeySigningKey.html\&quot;&gt;DeactivateKeySigningKey&lt;/a&gt; to deactivate the key before you delete it.&lt;/p&gt; &lt;p&gt;Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetDNSSEC.html\&quot;&gt;GetDNSSEC&lt;/a&gt; to verify that the KSK is in an &lt;code&gt;INACTIVE&lt;/code&gt; status.&lt;/p&gt;
     * @param hostedZoneId A unique string used to identify a hosted zone. (required)
     * @param name A string used to identify a key-signing key (KSK). (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteKeySigningKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchKeySigningKey </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteKeySigningKeyResponse> deleteKeySigningKeyWithHttpInfo(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteKeySigningKeyValidateBeforeCall(hostedZoneId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteKeySigningKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a key-signing key (KSK). Before you can delete a KSK, you must deactivate it. The KSK must be deactivated before you can delete it regardless of whether the hosted zone is enabled for DNSSEC signing.&lt;/p&gt; &lt;p&gt;You can use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeactivateKeySigningKey.html\&quot;&gt;DeactivateKeySigningKey&lt;/a&gt; to deactivate the key before you delete it.&lt;/p&gt; &lt;p&gt;Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetDNSSEC.html\&quot;&gt;GetDNSSEC&lt;/a&gt; to verify that the KSK is in an &lt;code&gt;INACTIVE&lt;/code&gt; status.&lt;/p&gt;
     * @param hostedZoneId A unique string used to identify a hosted zone. (required)
     * @param name A string used to identify a key-signing key (KSK). (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchKeySigningKey </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSigningStatus </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeySigningKeyAsync(String hostedZoneId, String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteKeySigningKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteKeySigningKeyValidateBeforeCall(hostedZoneId, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteKeySigningKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteQueryLoggingConfig
     * @param id The ID of the configuration that you want to delete.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchQueryLoggingConfig </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteQueryLoggingConfigCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/queryloggingconfig/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteQueryLoggingConfigValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteQueryLoggingConfig(Async)");
        }

        return deleteQueryLoggingConfigCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a configuration for DNS query logging. If you delete a configuration, Amazon Route 53 stops sending query logs to CloudWatch Logs. Route 53 doesn&#39;t delete any logs that are already in CloudWatch Logs.&lt;/p&gt; &lt;p&gt;For more information about DNS query logs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateQueryLoggingConfig.html\&quot;&gt;CreateQueryLoggingConfig&lt;/a&gt;.&lt;/p&gt;
     * @param id The ID of the configuration that you want to delete.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchQueryLoggingConfig </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteQueryLoggingConfig(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteQueryLoggingConfigWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a configuration for DNS query logging. If you delete a configuration, Amazon Route 53 stops sending query logs to CloudWatch Logs. Route 53 doesn&#39;t delete any logs that are already in CloudWatch Logs.&lt;/p&gt; &lt;p&gt;For more information about DNS query logs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateQueryLoggingConfig.html\&quot;&gt;CreateQueryLoggingConfig&lt;/a&gt;.&lt;/p&gt;
     * @param id The ID of the configuration that you want to delete.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchQueryLoggingConfig </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteQueryLoggingConfigWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteQueryLoggingConfigValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a configuration for DNS query logging. If you delete a configuration, Amazon Route 53 stops sending query logs to CloudWatch Logs. Route 53 doesn&#39;t delete any logs that are already in CloudWatch Logs.&lt;/p&gt; &lt;p&gt;For more information about DNS query logs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateQueryLoggingConfig.html\&quot;&gt;CreateQueryLoggingConfig&lt;/a&gt;.&lt;/p&gt;
     * @param id The ID of the configuration that you want to delete.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchQueryLoggingConfig </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteQueryLoggingConfigAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteQueryLoggingConfigValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReusableDelegationSet
     * @param id The ID of the reusable delegation set that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DelegationSetInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReusableDelegationSetCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/delegationset/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReusableDelegationSetValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteReusableDelegationSet(Async)");
        }

        return deleteReusableDelegationSetCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a reusable delegation set.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You can delete a reusable delegation set only if it isn&#39;t associated with any hosted zones.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;To verify that the reusable delegation set is not associated with any hosted zones, submit a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetReusableDelegationSet.html\&quot;&gt;GetReusableDelegationSet&lt;/a&gt; request and specify the ID of the reusable delegation set that you want to delete.&lt;/p&gt;
     * @param id The ID of the reusable delegation set that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DelegationSetInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteReusableDelegationSet(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteReusableDelegationSetWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a reusable delegation set.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You can delete a reusable delegation set only if it isn&#39;t associated with any hosted zones.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;To verify that the reusable delegation set is not associated with any hosted zones, submit a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetReusableDelegationSet.html\&quot;&gt;GetReusableDelegationSet&lt;/a&gt; request and specify the ID of the reusable delegation set that you want to delete.&lt;/p&gt;
     * @param id The ID of the reusable delegation set that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DelegationSetInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteReusableDelegationSetWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteReusableDelegationSetValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a reusable delegation set.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You can delete a reusable delegation set only if it isn&#39;t associated with any hosted zones.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;To verify that the reusable delegation set is not associated with any hosted zones, submit a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetReusableDelegationSet.html\&quot;&gt;GetReusableDelegationSet&lt;/a&gt; request and specify the ID of the reusable delegation set that you want to delete.&lt;/p&gt;
     * @param id The ID of the reusable delegation set that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DelegationSetInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReusableDelegationSetAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReusableDelegationSetValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrafficPolicy
     * @param id The ID of the traffic policy that you want to delete. (required)
     * @param version The version number of the traffic policy that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TrafficPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrafficPolicyCall(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicy/{Id}/{Version}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "Version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrafficPolicyValidateBeforeCall(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTrafficPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteTrafficPolicy(Async)");
        }

        return deleteTrafficPolicyCall(id, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a traffic policy.&lt;/p&gt; &lt;p&gt;When you delete a traffic policy, Route 53 sets a flag on the policy to indicate that it has been deleted. However, Route 53 never fully deletes the traffic policy. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Deleted traffic policies aren&#39;t listed if you run &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListTrafficPolicies.html\&quot;&gt;ListTrafficPolicies&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; There&#39;s no way to get a list of deleted policies.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you retain the ID of the policy, you can get information about the policy, including the traffic policy document, by running &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetTrafficPolicy.html\&quot;&gt;GetTrafficPolicy&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param id The ID of the traffic policy that you want to delete. (required)
     * @param version The version number of the traffic policy that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TrafficPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteTrafficPolicy(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteTrafficPolicyWithHttpInfo(id, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a traffic policy.&lt;/p&gt; &lt;p&gt;When you delete a traffic policy, Route 53 sets a flag on the policy to indicate that it has been deleted. However, Route 53 never fully deletes the traffic policy. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Deleted traffic policies aren&#39;t listed if you run &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListTrafficPolicies.html\&quot;&gt;ListTrafficPolicies&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; There&#39;s no way to get a list of deleted policies.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you retain the ID of the policy, you can get information about the policy, including the traffic policy document, by running &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetTrafficPolicy.html\&quot;&gt;GetTrafficPolicy&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param id The ID of the traffic policy that you want to delete. (required)
     * @param version The version number of the traffic policy that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TrafficPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteTrafficPolicyWithHttpInfo(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteTrafficPolicyValidateBeforeCall(id, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a traffic policy.&lt;/p&gt; &lt;p&gt;When you delete a traffic policy, Route 53 sets a flag on the policy to indicate that it has been deleted. However, Route 53 never fully deletes the traffic policy. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Deleted traffic policies aren&#39;t listed if you run &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListTrafficPolicies.html\&quot;&gt;ListTrafficPolicies&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; There&#39;s no way to get a list of deleted policies.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you retain the ID of the policy, you can get information about the policy, including the traffic policy document, by running &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetTrafficPolicy.html\&quot;&gt;GetTrafficPolicy&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param id The ID of the traffic policy that you want to delete. (required)
     * @param version The version number of the traffic policy that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TrafficPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrafficPolicyAsync(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrafficPolicyValidateBeforeCall(id, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrafficPolicyInstance
     * @param id &lt;p&gt;The ID of the traffic policy instance that you want to delete. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you delete a traffic policy instance, Amazon Route 53 also deletes all of the resource record sets that were created when you created the traffic policy instance.&lt;/p&gt; &lt;/important&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrafficPolicyInstanceCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicyinstance/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrafficPolicyInstanceValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTrafficPolicyInstance(Async)");
        }

        return deleteTrafficPolicyInstanceCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a traffic policy instance and all of the resource record sets that Amazon Route 53 created when you created the instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the Route 53 console, traffic policy instances are known as policy records.&lt;/p&gt; &lt;/note&gt;
     * @param id &lt;p&gt;The ID of the traffic policy instance that you want to delete. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you delete a traffic policy instance, Amazon Route 53 also deletes all of the resource record sets that were created when you created the traffic policy instance.&lt;/p&gt; &lt;/important&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteTrafficPolicyInstance(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteTrafficPolicyInstanceWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a traffic policy instance and all of the resource record sets that Amazon Route 53 created when you created the instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the Route 53 console, traffic policy instances are known as policy records.&lt;/p&gt; &lt;/note&gt;
     * @param id &lt;p&gt;The ID of the traffic policy instance that you want to delete. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you delete a traffic policy instance, Amazon Route 53 also deletes all of the resource record sets that were created when you created the traffic policy instance.&lt;/p&gt; &lt;/important&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteTrafficPolicyInstanceWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteTrafficPolicyInstanceValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a traffic policy instance and all of the resource record sets that Amazon Route 53 created when you created the instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the Route 53 console, traffic policy instances are known as policy records.&lt;/p&gt; &lt;/note&gt;
     * @param id &lt;p&gt;The ID of the traffic policy instance that you want to delete. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you delete a traffic policy instance, Amazon Route 53 also deletes all of the resource record sets that were created when you created the traffic policy instance.&lt;/p&gt; &lt;/important&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrafficPolicyInstanceAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrafficPolicyInstanceValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVPCAssociationAuthorization
     * @param id When removing authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account, the ID of the hosted zone. (required)
     * @param createVPCAssociationAuthorizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> VPCAssociationAuthorizationNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVPCAssociationAuthorizationCall(String id, CreateVPCAssociationAuthorizationRequest createVPCAssociationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVPCAssociationAuthorizationRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}/deauthorizevpcassociation"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVPCAssociationAuthorizationValidateBeforeCall(String id, CreateVPCAssociationAuthorizationRequest createVPCAssociationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteVPCAssociationAuthorization(Async)");
        }

        // verify the required parameter 'createVPCAssociationAuthorizationRequest' is set
        if (createVPCAssociationAuthorizationRequest == null) {
            throw new ApiException("Missing the required parameter 'createVPCAssociationAuthorizationRequest' when calling deleteVPCAssociationAuthorization(Async)");
        }

        return deleteVPCAssociationAuthorizationCall(id, createVPCAssociationAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes authorization to submit an &lt;code&gt;AssociateVPCWithHostedZone&lt;/code&gt; request to associate a specified VPC with a hosted zone that was created by a different account. You must use the account that created the hosted zone to submit a &lt;code&gt;DeleteVPCAssociationAuthorization&lt;/code&gt; request.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Sending this request only prevents the Amazon Web Services account that created the VPC from associating the VPC with the Amazon Route 53 hosted zone in the future. If the VPC is already associated with the hosted zone, &lt;code&gt;DeleteVPCAssociationAuthorization&lt;/code&gt; won&#39;t disassociate the VPC from the hosted zone. If you want to delete an existing association, use &lt;code&gt;DisassociateVPCFromHostedZone&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param id When removing authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account, the ID of the hosted zone. (required)
     * @param createVPCAssociationAuthorizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> VPCAssociationAuthorizationNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteVPCAssociationAuthorization(String id, CreateVPCAssociationAuthorizationRequest createVPCAssociationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteVPCAssociationAuthorizationWithHttpInfo(id, createVPCAssociationAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Removes authorization to submit an &lt;code&gt;AssociateVPCWithHostedZone&lt;/code&gt; request to associate a specified VPC with a hosted zone that was created by a different account. You must use the account that created the hosted zone to submit a &lt;code&gt;DeleteVPCAssociationAuthorization&lt;/code&gt; request.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Sending this request only prevents the Amazon Web Services account that created the VPC from associating the VPC with the Amazon Route 53 hosted zone in the future. If the VPC is already associated with the hosted zone, &lt;code&gt;DeleteVPCAssociationAuthorization&lt;/code&gt; won&#39;t disassociate the VPC from the hosted zone. If you want to delete an existing association, use &lt;code&gt;DisassociateVPCFromHostedZone&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param id When removing authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account, the ID of the hosted zone. (required)
     * @param createVPCAssociationAuthorizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> VPCAssociationAuthorizationNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteVPCAssociationAuthorizationWithHttpInfo(String id, CreateVPCAssociationAuthorizationRequest createVPCAssociationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteVPCAssociationAuthorizationValidateBeforeCall(id, createVPCAssociationAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes authorization to submit an &lt;code&gt;AssociateVPCWithHostedZone&lt;/code&gt; request to associate a specified VPC with a hosted zone that was created by a different account. You must use the account that created the hosted zone to submit a &lt;code&gt;DeleteVPCAssociationAuthorization&lt;/code&gt; request.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Sending this request only prevents the Amazon Web Services account that created the VPC from associating the VPC with the Amazon Route 53 hosted zone in the future. If the VPC is already associated with the hosted zone, &lt;code&gt;DeleteVPCAssociationAuthorization&lt;/code&gt; won&#39;t disassociate the VPC from the hosted zone. If you want to delete an existing association, use &lt;code&gt;DisassociateVPCFromHostedZone&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param id When removing authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account, the ID of the hosted zone. (required)
     * @param createVPCAssociationAuthorizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> VPCAssociationAuthorizationNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVPCAssociationAuthorizationAsync(String id, CreateVPCAssociationAuthorizationRequest createVPCAssociationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVPCAssociationAuthorizationValidateBeforeCall(id, createVPCAssociationAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableHostedZoneDNSSEC
     * @param id A unique string used to identify a hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KeySigningKeyInParentDSRecord </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DNSSECNotFound </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableHostedZoneDNSSECCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}/disable-dnssec"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableHostedZoneDNSSECValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling disableHostedZoneDNSSEC(Async)");
        }

        return disableHostedZoneDNSSECCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Disables DNSSEC signing in a specific hosted zone. This action does not deactivate any key-signing keys (KSKs) that are active in the hosted zone.
     * @param id A unique string used to identify a hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DisableHostedZoneDNSSECResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KeySigningKeyInParentDSRecord </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DNSSECNotFound </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public DisableHostedZoneDNSSECResponse disableHostedZoneDNSSEC(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DisableHostedZoneDNSSECResponse> localVarResp = disableHostedZoneDNSSECWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Disables DNSSEC signing in a specific hosted zone. This action does not deactivate any key-signing keys (KSKs) that are active in the hosted zone.
     * @param id A unique string used to identify a hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DisableHostedZoneDNSSECResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KeySigningKeyInParentDSRecord </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DNSSECNotFound </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisableHostedZoneDNSSECResponse> disableHostedZoneDNSSECWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disableHostedZoneDNSSECValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DisableHostedZoneDNSSECResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disables DNSSEC signing in a specific hosted zone. This action does not deactivate any key-signing keys (KSKs) that are active in the hosted zone.
     * @param id A unique string used to identify a hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KeySigningKeyInParentDSRecord </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DNSSECNotFound </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableHostedZoneDNSSECAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DisableHostedZoneDNSSECResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableHostedZoneDNSSECValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DisableHostedZoneDNSSECResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociateVPCFromHostedZone
     * @param id The ID of the private hosted zone that you want to disassociate a VPC from. (required)
     * @param disassociateVPCFromHostedZoneRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VPCAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LastVPCAssociation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateVPCFromHostedZoneCall(String id, DisassociateVPCFromHostedZoneRequest disassociateVPCFromHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disassociateVPCFromHostedZoneRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}/disassociatevpc"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociateVPCFromHostedZoneValidateBeforeCall(String id, DisassociateVPCFromHostedZoneRequest disassociateVPCFromHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling disassociateVPCFromHostedZone(Async)");
        }

        // verify the required parameter 'disassociateVPCFromHostedZoneRequest' is set
        if (disassociateVPCFromHostedZoneRequest == null) {
            throw new ApiException("Missing the required parameter 'disassociateVPCFromHostedZoneRequest' when calling disassociateVPCFromHostedZone(Async)");
        }

        return disassociateVPCFromHostedZoneCall(id, disassociateVPCFromHostedZoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Disassociates an Amazon Virtual Private Cloud (Amazon VPC) from an Amazon Route 53 private hosted zone. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can&#39;t disassociate the last Amazon VPC from a private hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t convert a private hosted zone into a public hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can submit a &lt;code&gt;DisassociateVPCFromHostedZone&lt;/code&gt; request using either the account that created the hosted zone or the account that created the Amazon VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Some services, such as Cloud Map and Amazon Elastic File System (Amazon EFS) automatically create hosted zones and associate VPCs with the hosted zones. A service can create a hosted zone using your account or using its own account. You can disassociate a VPC from a hosted zone only if the service created the hosted zone using your account.&lt;/p&gt; &lt;p&gt;When you run &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListHostedZonesByVPC.html\&quot;&gt;DisassociateVPCFromHostedZone&lt;/a&gt;, if the hosted zone has a value for &lt;code&gt;OwningAccount&lt;/code&gt;, you can use &lt;code&gt;DisassociateVPCFromHostedZone&lt;/code&gt;. If the hosted zone has a value for &lt;code&gt;OwningService&lt;/code&gt;, you can&#39;t use &lt;code&gt;DisassociateVPCFromHostedZone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;When revoking access, the hosted zone and the Amazon VPC must belong to the same partition. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.&lt;/p&gt; &lt;p&gt;The following are the supported partitions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws&lt;/code&gt; - Amazon Web Services Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-cn&lt;/code&gt; - China Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-us-gov&lt;/code&gt; - Amazon Web Services GovCloud (US) Region&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Access Management&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param id The ID of the private hosted zone that you want to disassociate a VPC from. (required)
     * @param disassociateVPCFromHostedZoneRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DisassociateVPCFromHostedZoneResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VPCAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LastVPCAssociation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public DisassociateVPCFromHostedZoneResponse disassociateVPCFromHostedZone(String id, DisassociateVPCFromHostedZoneRequest disassociateVPCFromHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DisassociateVPCFromHostedZoneResponse> localVarResp = disassociateVPCFromHostedZoneWithHttpInfo(id, disassociateVPCFromHostedZoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Disassociates an Amazon Virtual Private Cloud (Amazon VPC) from an Amazon Route 53 private hosted zone. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can&#39;t disassociate the last Amazon VPC from a private hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t convert a private hosted zone into a public hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can submit a &lt;code&gt;DisassociateVPCFromHostedZone&lt;/code&gt; request using either the account that created the hosted zone or the account that created the Amazon VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Some services, such as Cloud Map and Amazon Elastic File System (Amazon EFS) automatically create hosted zones and associate VPCs with the hosted zones. A service can create a hosted zone using your account or using its own account. You can disassociate a VPC from a hosted zone only if the service created the hosted zone using your account.&lt;/p&gt; &lt;p&gt;When you run &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListHostedZonesByVPC.html\&quot;&gt;DisassociateVPCFromHostedZone&lt;/a&gt;, if the hosted zone has a value for &lt;code&gt;OwningAccount&lt;/code&gt;, you can use &lt;code&gt;DisassociateVPCFromHostedZone&lt;/code&gt;. If the hosted zone has a value for &lt;code&gt;OwningService&lt;/code&gt;, you can&#39;t use &lt;code&gt;DisassociateVPCFromHostedZone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;When revoking access, the hosted zone and the Amazon VPC must belong to the same partition. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.&lt;/p&gt; &lt;p&gt;The following are the supported partitions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws&lt;/code&gt; - Amazon Web Services Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-cn&lt;/code&gt; - China Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-us-gov&lt;/code&gt; - Amazon Web Services GovCloud (US) Region&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Access Management&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param id The ID of the private hosted zone that you want to disassociate a VPC from. (required)
     * @param disassociateVPCFromHostedZoneRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DisassociateVPCFromHostedZoneResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VPCAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LastVPCAssociation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisassociateVPCFromHostedZoneResponse> disassociateVPCFromHostedZoneWithHttpInfo(String id, DisassociateVPCFromHostedZoneRequest disassociateVPCFromHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociateVPCFromHostedZoneValidateBeforeCall(id, disassociateVPCFromHostedZoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DisassociateVPCFromHostedZoneResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Disassociates an Amazon Virtual Private Cloud (Amazon VPC) from an Amazon Route 53 private hosted zone. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can&#39;t disassociate the last Amazon VPC from a private hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t convert a private hosted zone into a public hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can submit a &lt;code&gt;DisassociateVPCFromHostedZone&lt;/code&gt; request using either the account that created the hosted zone or the account that created the Amazon VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Some services, such as Cloud Map and Amazon Elastic File System (Amazon EFS) automatically create hosted zones and associate VPCs with the hosted zones. A service can create a hosted zone using your account or using its own account. You can disassociate a VPC from a hosted zone only if the service created the hosted zone using your account.&lt;/p&gt; &lt;p&gt;When you run &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListHostedZonesByVPC.html\&quot;&gt;DisassociateVPCFromHostedZone&lt;/a&gt;, if the hosted zone has a value for &lt;code&gt;OwningAccount&lt;/code&gt;, you can use &lt;code&gt;DisassociateVPCFromHostedZone&lt;/code&gt;. If the hosted zone has a value for &lt;code&gt;OwningService&lt;/code&gt;, you can&#39;t use &lt;code&gt;DisassociateVPCFromHostedZone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;When revoking access, the hosted zone and the Amazon VPC must belong to the same partition. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.&lt;/p&gt; &lt;p&gt;The following are the supported partitions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws&lt;/code&gt; - Amazon Web Services Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-cn&lt;/code&gt; - China Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-us-gov&lt;/code&gt; - Amazon Web Services GovCloud (US) Region&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Access Management&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param id The ID of the private hosted zone that you want to disassociate a VPC from. (required)
     * @param disassociateVPCFromHostedZoneRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidVPCId </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VPCAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LastVPCAssociation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateVPCFromHostedZoneAsync(String id, DisassociateVPCFromHostedZoneRequest disassociateVPCFromHostedZoneRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DisassociateVPCFromHostedZoneResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociateVPCFromHostedZoneValidateBeforeCall(id, disassociateVPCFromHostedZoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DisassociateVPCFromHostedZoneResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableHostedZoneDNSSEC
     * @param id A unique string used to identify a hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KeySigningKeyWithActiveStatusNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> HostedZonePartiallyDelegated </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DNSSECNotFound </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableHostedZoneDNSSECCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}/enable-dnssec"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableHostedZoneDNSSECValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling enableHostedZoneDNSSEC(Async)");
        }

        return enableHostedZoneDNSSECCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Enables DNSSEC signing in a specific hosted zone.
     * @param id A unique string used to identify a hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return EnableHostedZoneDNSSECResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KeySigningKeyWithActiveStatusNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> HostedZonePartiallyDelegated </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DNSSECNotFound </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public EnableHostedZoneDNSSECResponse enableHostedZoneDNSSEC(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<EnableHostedZoneDNSSECResponse> localVarResp = enableHostedZoneDNSSECWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Enables DNSSEC signing in a specific hosted zone.
     * @param id A unique string used to identify a hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;EnableHostedZoneDNSSECResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KeySigningKeyWithActiveStatusNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> HostedZonePartiallyDelegated </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DNSSECNotFound </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnableHostedZoneDNSSECResponse> enableHostedZoneDNSSECWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = enableHostedZoneDNSSECValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<EnableHostedZoneDNSSECResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Enables DNSSEC signing in a specific hosted zone.
     * @param id A unique string used to identify a hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModification </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KeySigningKeyWithActiveStatusNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidKMSArn </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> HostedZonePartiallyDelegated </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DNSSECNotFound </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKeySigningKeyStatus </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableHostedZoneDNSSECAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<EnableHostedZoneDNSSECResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableHostedZoneDNSSECValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<EnableHostedZoneDNSSECResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountLimit
     * @param type &lt;p&gt;The limit that you want to get. Valid values include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_HEALTH_CHECKS_BY_OWNER&lt;/b&gt;: The maximum number of health checks that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_HOSTED_ZONES_BY_OWNER&lt;/b&gt;: The maximum number of hosted zones that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_REUSABLE_DELEGATION_SETS_BY_OWNER&lt;/b&gt;: The maximum number of reusable delegation sets that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_TRAFFIC_POLICIES_BY_OWNER&lt;/b&gt;: The maximum number of traffic policies that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER&lt;/b&gt;: The maximum number of traffic policy instances that you can create using the current account. (Traffic policy instances are referred to as traffic flow policy records in the Amazon Route 53 console.)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountLimitCall(String type, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/accountlimit/{Type}"
            .replace("{" + "Type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountLimitValidateBeforeCall(String type, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getAccountLimit(Async)");
        }

        return getAccountLimitCall(type, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the specified limit for the current account, for example, the maximum number of health checks that you can create using the account.&lt;/p&gt; &lt;p&gt;For the default limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html\&quot;&gt;Limits&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. To request a higher limit, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-route53\&quot;&gt;open a case&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can also view account limits in Amazon Web Services Trusted Advisor. Sign in to the Amazon Web Services Management Console and open the Trusted Advisor console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/trustedadvisor\&quot;&gt;https://console.aws.amazon.com/trustedadvisor/&lt;/a&gt;. Then choose &lt;b&gt;Service limits&lt;/b&gt; in the navigation pane.&lt;/p&gt; &lt;/note&gt;
     * @param type &lt;p&gt;The limit that you want to get. Valid values include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_HEALTH_CHECKS_BY_OWNER&lt;/b&gt;: The maximum number of health checks that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_HOSTED_ZONES_BY_OWNER&lt;/b&gt;: The maximum number of hosted zones that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_REUSABLE_DELEGATION_SETS_BY_OWNER&lt;/b&gt;: The maximum number of reusable delegation sets that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_TRAFFIC_POLICIES_BY_OWNER&lt;/b&gt;: The maximum number of traffic policies that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER&lt;/b&gt;: The maximum number of traffic policy instances that you can create using the current account. (Traffic policy instances are referred to as traffic flow policy records in the Amazon Route 53 console.)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetAccountLimitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountLimitResponse getAccountLimit(String type, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetAccountLimitResponse> localVarResp = getAccountLimitWithHttpInfo(type, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the specified limit for the current account, for example, the maximum number of health checks that you can create using the account.&lt;/p&gt; &lt;p&gt;For the default limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html\&quot;&gt;Limits&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. To request a higher limit, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-route53\&quot;&gt;open a case&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can also view account limits in Amazon Web Services Trusted Advisor. Sign in to the Amazon Web Services Management Console and open the Trusted Advisor console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/trustedadvisor\&quot;&gt;https://console.aws.amazon.com/trustedadvisor/&lt;/a&gt;. Then choose &lt;b&gt;Service limits&lt;/b&gt; in the navigation pane.&lt;/p&gt; &lt;/note&gt;
     * @param type &lt;p&gt;The limit that you want to get. Valid values include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_HEALTH_CHECKS_BY_OWNER&lt;/b&gt;: The maximum number of health checks that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_HOSTED_ZONES_BY_OWNER&lt;/b&gt;: The maximum number of hosted zones that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_REUSABLE_DELEGATION_SETS_BY_OWNER&lt;/b&gt;: The maximum number of reusable delegation sets that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_TRAFFIC_POLICIES_BY_OWNER&lt;/b&gt;: The maximum number of traffic policies that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER&lt;/b&gt;: The maximum number of traffic policy instances that you can create using the current account. (Traffic policy instances are referred to as traffic flow policy records in the Amazon Route 53 console.)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetAccountLimitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAccountLimitResponse> getAccountLimitWithHttpInfo(String type, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getAccountLimitValidateBeforeCall(type, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetAccountLimitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the specified limit for the current account, for example, the maximum number of health checks that you can create using the account.&lt;/p&gt; &lt;p&gt;For the default limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html\&quot;&gt;Limits&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. To request a higher limit, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-route53\&quot;&gt;open a case&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can also view account limits in Amazon Web Services Trusted Advisor. Sign in to the Amazon Web Services Management Console and open the Trusted Advisor console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/trustedadvisor\&quot;&gt;https://console.aws.amazon.com/trustedadvisor/&lt;/a&gt;. Then choose &lt;b&gt;Service limits&lt;/b&gt; in the navigation pane.&lt;/p&gt; &lt;/note&gt;
     * @param type &lt;p&gt;The limit that you want to get. Valid values include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_HEALTH_CHECKS_BY_OWNER&lt;/b&gt;: The maximum number of health checks that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_HOSTED_ZONES_BY_OWNER&lt;/b&gt;: The maximum number of hosted zones that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_REUSABLE_DELEGATION_SETS_BY_OWNER&lt;/b&gt;: The maximum number of reusable delegation sets that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_TRAFFIC_POLICIES_BY_OWNER&lt;/b&gt;: The maximum number of traffic policies that you can create using the current account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER&lt;/b&gt;: The maximum number of traffic policy instances that you can create using the current account. (Traffic policy instances are referred to as traffic flow policy records in the Amazon Route 53 console.)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountLimitAsync(String type, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetAccountLimitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountLimitValidateBeforeCall(type, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetAccountLimitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChange
     * @param id The ID of the change batch request. The value that you specify here is the value that &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; returned in the &lt;code&gt;Id&lt;/code&gt; element when you submitted the request. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchChange </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChangeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/change/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChangeValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChange(Async)");
        }

        return getChangeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the current status of a change batch request. The status is one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PENDING&lt;/code&gt; indicates that the changes in this request have not propagated to all Amazon Route 53 DNS servers managing the hosted zone. This is the initial status of all change batch requests.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INSYNC&lt;/code&gt; indicates that the changes have propagated to all Route 53 DNS servers managing the hosted zone. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param id The ID of the change batch request. The value that you specify here is the value that &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; returned in the &lt;code&gt;Id&lt;/code&gt; element when you submitted the request. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetChangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchChange </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetChangeResponse getChange(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetChangeResponse> localVarResp = getChangeWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the current status of a change batch request. The status is one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PENDING&lt;/code&gt; indicates that the changes in this request have not propagated to all Amazon Route 53 DNS servers managing the hosted zone. This is the initial status of all change batch requests.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INSYNC&lt;/code&gt; indicates that the changes have propagated to all Route 53 DNS servers managing the hosted zone. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param id The ID of the change batch request. The value that you specify here is the value that &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; returned in the &lt;code&gt;Id&lt;/code&gt; element when you submitted the request. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetChangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchChange </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChangeResponse> getChangeWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getChangeValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetChangeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the current status of a change batch request. The status is one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PENDING&lt;/code&gt; indicates that the changes in this request have not propagated to all Amazon Route 53 DNS servers managing the hosted zone. This is the initial status of all change batch requests.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INSYNC&lt;/code&gt; indicates that the changes have propagated to all Route 53 DNS servers managing the hosted zone. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param id The ID of the change batch request. The value that you specify here is the value that &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; returned in the &lt;code&gt;Id&lt;/code&gt; element when you submitted the request. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchChange </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChangeAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetChangeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChangeValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetChangeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCheckerIpRanges
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCheckerIpRangesCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/checkeripranges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckerIpRangesValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        return getCheckerIpRangesCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Route 53 does not perform authorization for this API because it retrieves information that is already available to the public.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;GetCheckerIpRanges&lt;/code&gt; still works, but we recommend that you download ip-ranges.json, which includes IP address ranges for all Amazon Web Services services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/route-53-ip-addresses.html\&quot;&gt;IP Address Ranges of Amazon Route 53 Servers&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCheckerIpRangesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCheckerIpRangesResponse getCheckerIpRanges(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCheckerIpRangesResponse> localVarResp = getCheckerIpRangesWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Route 53 does not perform authorization for this API because it retrieves information that is already available to the public.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;GetCheckerIpRanges&lt;/code&gt; still works, but we recommend that you download ip-ranges.json, which includes IP address ranges for all Amazon Web Services services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/route-53-ip-addresses.html\&quot;&gt;IP Address Ranges of Amazon Route 53 Servers&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCheckerIpRangesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCheckerIpRangesResponse> getCheckerIpRangesWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCheckerIpRangesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCheckerIpRangesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Route 53 does not perform authorization for this API because it retrieves information that is already available to the public.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;GetCheckerIpRanges&lt;/code&gt; still works, but we recommend that you download ip-ranges.json, which includes IP address ranges for all Amazon Web Services services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/route-53-ip-addresses.html\&quot;&gt;IP Address Ranges of Amazon Route 53 Servers&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCheckerIpRangesAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCheckerIpRangesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckerIpRangesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCheckerIpRangesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDNSSEC
     * @param id A unique string used to identify a hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDNSSECCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}/dnssec"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDNSSECValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDNSSEC(Async)");
        }

        return getDNSSECCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about DNSSEC for a specific hosted zone, including the key-signing keys (KSKs) in the hosted zone.
     * @param id A unique string used to identify a hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDNSSECResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetDNSSECResponse getDNSSEC(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDNSSECResponse> localVarResp = getDNSSECWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about DNSSEC for a specific hosted zone, including the key-signing keys (KSKs) in the hosted zone.
     * @param id A unique string used to identify a hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDNSSECResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDNSSECResponse> getDNSSECWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDNSSECValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDNSSECResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about DNSSEC for a specific hosted zone, including the key-signing keys (KSKs) in the hosted zone.
     * @param id A unique string used to identify a hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDNSSECAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDNSSECResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDNSSECValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDNSSECResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeoLocation
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param continentcode &lt;p&gt;For geolocation resource record sets, a two-letter abbreviation that identifies a continent. Amazon Route 53 supports the following continent codes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AF&lt;/b&gt;: Africa&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AN&lt;/b&gt;: Antarctica&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AS&lt;/b&gt;: Asia&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;EU&lt;/b&gt;: Europe&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;OC&lt;/b&gt;: Oceania&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;NA&lt;/b&gt;: North America&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;SA&lt;/b&gt;: South America&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param countrycode Amazon Route 53 uses the two-letter country codes that are specified in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\&quot;&gt;ISO standard 3166-1 alpha-2&lt;/a&gt;. (optional)
     * @param subdivisioncode The code for the subdivision, such as a particular state within the United States. For a list of US state abbreviations, see &lt;a href&#x3D;\&quot;https://pe.usps.com/text/pub28/28apb.htm\&quot;&gt;Appendix B: Two–Letter State and Possession Abbreviations&lt;/a&gt; on the United States Postal Service website. For a list of all supported subdivision codes, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListGeoLocations.html\&quot;&gt;ListGeoLocations&lt;/a&gt; API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchGeoLocation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeoLocationCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String continentcode, String countrycode, String subdivisioncode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/geolocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continentcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continentcode", continentcode));
        }

        if (countrycode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrycode", countrycode));
        }

        if (subdivisioncode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subdivisioncode", subdivisioncode));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeoLocationValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String continentcode, String countrycode, String subdivisioncode, final ApiCallback _callback) throws ApiException {
        return getGeoLocationCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, continentcode, countrycode, subdivisioncode, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about whether a specified geographic location is supported for Amazon Route 53 geolocation resource record sets.&lt;/p&gt; &lt;p&gt;Route 53 does not perform authorization for this API because it retrieves information that is already available to the public.&lt;/p&gt; &lt;p&gt;Use the following syntax to determine whether a continent is supported for geolocation:&lt;/p&gt; &lt;p&gt; &lt;code&gt;GET /2013-04-01/geolocation?continentcode&#x3D;&lt;i&gt;two-letter abbreviation for a continent&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;Use the following syntax to determine whether a country is supported for geolocation:&lt;/p&gt; &lt;p&gt; &lt;code&gt;GET /2013-04-01/geolocation?countrycode&#x3D;&lt;i&gt;two-character country code&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;Use the following syntax to determine whether a subdivision of a country is supported for geolocation:&lt;/p&gt; &lt;p&gt; &lt;code&gt;GET /2013-04-01/geolocation?countrycode&#x3D;&lt;i&gt;two-character country code&lt;/i&gt;&amp;amp;subdivisioncode&#x3D;&lt;i&gt;subdivision code&lt;/i&gt; &lt;/code&gt; &lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param continentcode &lt;p&gt;For geolocation resource record sets, a two-letter abbreviation that identifies a continent. Amazon Route 53 supports the following continent codes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AF&lt;/b&gt;: Africa&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AN&lt;/b&gt;: Antarctica&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AS&lt;/b&gt;: Asia&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;EU&lt;/b&gt;: Europe&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;OC&lt;/b&gt;: Oceania&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;NA&lt;/b&gt;: North America&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;SA&lt;/b&gt;: South America&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param countrycode Amazon Route 53 uses the two-letter country codes that are specified in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\&quot;&gt;ISO standard 3166-1 alpha-2&lt;/a&gt;. (optional)
     * @param subdivisioncode The code for the subdivision, such as a particular state within the United States. For a list of US state abbreviations, see &lt;a href&#x3D;\&quot;https://pe.usps.com/text/pub28/28apb.htm\&quot;&gt;Appendix B: Two–Letter State and Possession Abbreviations&lt;/a&gt; on the United States Postal Service website. For a list of all supported subdivision codes, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListGeoLocations.html\&quot;&gt;ListGeoLocations&lt;/a&gt; API. (optional)
     * @return GetGeoLocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchGeoLocation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetGeoLocationResponse getGeoLocation(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String continentcode, String countrycode, String subdivisioncode) throws ApiException {
        ApiResponse<GetGeoLocationResponse> localVarResp = getGeoLocationWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, continentcode, countrycode, subdivisioncode);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about whether a specified geographic location is supported for Amazon Route 53 geolocation resource record sets.&lt;/p&gt; &lt;p&gt;Route 53 does not perform authorization for this API because it retrieves information that is already available to the public.&lt;/p&gt; &lt;p&gt;Use the following syntax to determine whether a continent is supported for geolocation:&lt;/p&gt; &lt;p&gt; &lt;code&gt;GET /2013-04-01/geolocation?continentcode&#x3D;&lt;i&gt;two-letter abbreviation for a continent&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;Use the following syntax to determine whether a country is supported for geolocation:&lt;/p&gt; &lt;p&gt; &lt;code&gt;GET /2013-04-01/geolocation?countrycode&#x3D;&lt;i&gt;two-character country code&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;Use the following syntax to determine whether a subdivision of a country is supported for geolocation:&lt;/p&gt; &lt;p&gt; &lt;code&gt;GET /2013-04-01/geolocation?countrycode&#x3D;&lt;i&gt;two-character country code&lt;/i&gt;&amp;amp;subdivisioncode&#x3D;&lt;i&gt;subdivision code&lt;/i&gt; &lt;/code&gt; &lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param continentcode &lt;p&gt;For geolocation resource record sets, a two-letter abbreviation that identifies a continent. Amazon Route 53 supports the following continent codes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AF&lt;/b&gt;: Africa&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AN&lt;/b&gt;: Antarctica&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AS&lt;/b&gt;: Asia&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;EU&lt;/b&gt;: Europe&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;OC&lt;/b&gt;: Oceania&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;NA&lt;/b&gt;: North America&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;SA&lt;/b&gt;: South America&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param countrycode Amazon Route 53 uses the two-letter country codes that are specified in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\&quot;&gt;ISO standard 3166-1 alpha-2&lt;/a&gt;. (optional)
     * @param subdivisioncode The code for the subdivision, such as a particular state within the United States. For a list of US state abbreviations, see &lt;a href&#x3D;\&quot;https://pe.usps.com/text/pub28/28apb.htm\&quot;&gt;Appendix B: Two–Letter State and Possession Abbreviations&lt;/a&gt; on the United States Postal Service website. For a list of all supported subdivision codes, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListGeoLocations.html\&quot;&gt;ListGeoLocations&lt;/a&gt; API. (optional)
     * @return ApiResponse&lt;GetGeoLocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchGeoLocation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGeoLocationResponse> getGeoLocationWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String continentcode, String countrycode, String subdivisioncode) throws ApiException {
        okhttp3.Call localVarCall = getGeoLocationValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, continentcode, countrycode, subdivisioncode, null);
        Type localVarReturnType = new TypeToken<GetGeoLocationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about whether a specified geographic location is supported for Amazon Route 53 geolocation resource record sets.&lt;/p&gt; &lt;p&gt;Route 53 does not perform authorization for this API because it retrieves information that is already available to the public.&lt;/p&gt; &lt;p&gt;Use the following syntax to determine whether a continent is supported for geolocation:&lt;/p&gt; &lt;p&gt; &lt;code&gt;GET /2013-04-01/geolocation?continentcode&#x3D;&lt;i&gt;two-letter abbreviation for a continent&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;Use the following syntax to determine whether a country is supported for geolocation:&lt;/p&gt; &lt;p&gt; &lt;code&gt;GET /2013-04-01/geolocation?countrycode&#x3D;&lt;i&gt;two-character country code&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;Use the following syntax to determine whether a subdivision of a country is supported for geolocation:&lt;/p&gt; &lt;p&gt; &lt;code&gt;GET /2013-04-01/geolocation?countrycode&#x3D;&lt;i&gt;two-character country code&lt;/i&gt;&amp;amp;subdivisioncode&#x3D;&lt;i&gt;subdivision code&lt;/i&gt; &lt;/code&gt; &lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param continentcode &lt;p&gt;For geolocation resource record sets, a two-letter abbreviation that identifies a continent. Amazon Route 53 supports the following continent codes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AF&lt;/b&gt;: Africa&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AN&lt;/b&gt;: Antarctica&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AS&lt;/b&gt;: Asia&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;EU&lt;/b&gt;: Europe&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;OC&lt;/b&gt;: Oceania&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;NA&lt;/b&gt;: North America&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;SA&lt;/b&gt;: South America&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param countrycode Amazon Route 53 uses the two-letter country codes that are specified in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\&quot;&gt;ISO standard 3166-1 alpha-2&lt;/a&gt;. (optional)
     * @param subdivisioncode The code for the subdivision, such as a particular state within the United States. For a list of US state abbreviations, see &lt;a href&#x3D;\&quot;https://pe.usps.com/text/pub28/28apb.htm\&quot;&gt;Appendix B: Two–Letter State and Possession Abbreviations&lt;/a&gt; on the United States Postal Service website. For a list of all supported subdivision codes, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListGeoLocations.html\&quot;&gt;ListGeoLocations&lt;/a&gt; API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchGeoLocation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeoLocationAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String continentcode, String countrycode, String subdivisioncode, final ApiCallback<GetGeoLocationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeoLocationValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, continentcode, countrycode, subdivisioncode, _callback);
        Type localVarReturnType = new TypeToken<GetGeoLocationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHealthCheck
     * @param healthCheckId The identifier that Amazon Route 53 assigned to the health check when you created it. When you add or update a resource record set, you use this value to specify which health check to use. The value can be up to 64 characters long. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleVersion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHealthCheckCall(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/healthcheck/{HealthCheckId}"
            .replace("{" + "HealthCheckId" + "}", localVarApiClient.escapeString(healthCheckId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHealthCheckValidateBeforeCall(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'healthCheckId' is set
        if (healthCheckId == null) {
            throw new ApiException("Missing the required parameter 'healthCheckId' when calling getHealthCheck(Async)");
        }

        return getHealthCheckCall(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about a specified health check.
     * @param healthCheckId The identifier that Amazon Route 53 assigned to the health check when you created it. When you add or update a resource record set, you use this value to specify which health check to use. The value can be up to 64 characters long. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetHealthCheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleVersion </td><td>  -  </td></tr>
     </table>
     */
    public GetHealthCheckResponse getHealthCheck(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetHealthCheckResponse> localVarResp = getHealthCheckWithHttpInfo(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a specified health check.
     * @param healthCheckId The identifier that Amazon Route 53 assigned to the health check when you created it. When you add or update a resource record set, you use this value to specify which health check to use. The value can be up to 64 characters long. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetHealthCheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleVersion </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHealthCheckResponse> getHealthCheckWithHttpInfo(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getHealthCheckValidateBeforeCall(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetHealthCheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a specified health check.
     * @param healthCheckId The identifier that Amazon Route 53 assigned to the health check when you created it. When you add or update a resource record set, you use this value to specify which health check to use. The value can be up to 64 characters long. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleVersion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHealthCheckAsync(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetHealthCheckResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHealthCheckValidateBeforeCall(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetHealthCheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHealthCheckCount
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHealthCheckCountCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/healthcheckcount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHealthCheckCountValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        return getHealthCheckCountCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves the number of health checks that are associated with the current Amazon Web Services account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetHealthCheckCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetHealthCheckCountResponse getHealthCheckCount(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetHealthCheckCountResponse> localVarResp = getHealthCheckCountWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the number of health checks that are associated with the current Amazon Web Services account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetHealthCheckCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHealthCheckCountResponse> getHealthCheckCountWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getHealthCheckCountValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetHealthCheckCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the number of health checks that are associated with the current Amazon Web Services account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHealthCheckCountAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetHealthCheckCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHealthCheckCountValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetHealthCheckCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHealthCheckLastFailureReason
     * @param healthCheckId &lt;p&gt;The ID for the health check for which you want the last failure reason. When you created the health check, &lt;code&gt;CreateHealthCheck&lt;/code&gt; returned the ID in the response, in the &lt;code&gt;HealthCheckId&lt;/code&gt; element.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you want to get the last failure reason for a calculated health check, you must use the Amazon Route 53 console or the CloudWatch console. You can&#39;t use &lt;code&gt;GetHealthCheckLastFailureReason&lt;/code&gt; for a calculated health check.&lt;/p&gt; &lt;/note&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHealthCheckLastFailureReasonCall(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason"
            .replace("{" + "HealthCheckId" + "}", localVarApiClient.escapeString(healthCheckId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHealthCheckLastFailureReasonValidateBeforeCall(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'healthCheckId' is set
        if (healthCheckId == null) {
            throw new ApiException("Missing the required parameter 'healthCheckId' when calling getHealthCheckLastFailureReason(Async)");
        }

        return getHealthCheckLastFailureReasonCall(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets the reason that a specified health check failed most recently.
     * @param healthCheckId &lt;p&gt;The ID for the health check for which you want the last failure reason. When you created the health check, &lt;code&gt;CreateHealthCheck&lt;/code&gt; returned the ID in the response, in the &lt;code&gt;HealthCheckId&lt;/code&gt; element.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you want to get the last failure reason for a calculated health check, you must use the Amazon Route 53 console or the CloudWatch console. You can&#39;t use &lt;code&gt;GetHealthCheckLastFailureReason&lt;/code&gt; for a calculated health check.&lt;/p&gt; &lt;/note&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetHealthCheckLastFailureReasonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetHealthCheckLastFailureReasonResponse getHealthCheckLastFailureReason(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetHealthCheckLastFailureReasonResponse> localVarResp = getHealthCheckLastFailureReasonWithHttpInfo(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the reason that a specified health check failed most recently.
     * @param healthCheckId &lt;p&gt;The ID for the health check for which you want the last failure reason. When you created the health check, &lt;code&gt;CreateHealthCheck&lt;/code&gt; returned the ID in the response, in the &lt;code&gt;HealthCheckId&lt;/code&gt; element.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you want to get the last failure reason for a calculated health check, you must use the Amazon Route 53 console or the CloudWatch console. You can&#39;t use &lt;code&gt;GetHealthCheckLastFailureReason&lt;/code&gt; for a calculated health check.&lt;/p&gt; &lt;/note&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetHealthCheckLastFailureReasonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHealthCheckLastFailureReasonResponse> getHealthCheckLastFailureReasonWithHttpInfo(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getHealthCheckLastFailureReasonValidateBeforeCall(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetHealthCheckLastFailureReasonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the reason that a specified health check failed most recently.
     * @param healthCheckId &lt;p&gt;The ID for the health check for which you want the last failure reason. When you created the health check, &lt;code&gt;CreateHealthCheck&lt;/code&gt; returned the ID in the response, in the &lt;code&gt;HealthCheckId&lt;/code&gt; element.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you want to get the last failure reason for a calculated health check, you must use the Amazon Route 53 console or the CloudWatch console. You can&#39;t use &lt;code&gt;GetHealthCheckLastFailureReason&lt;/code&gt; for a calculated health check.&lt;/p&gt; &lt;/note&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHealthCheckLastFailureReasonAsync(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetHealthCheckLastFailureReasonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHealthCheckLastFailureReasonValidateBeforeCall(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetHealthCheckLastFailureReasonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHealthCheckStatus
     * @param healthCheckId &lt;p&gt;The ID for the health check that you want the current status for. When you created the health check, &lt;code&gt;CreateHealthCheck&lt;/code&gt; returned the ID in the response, in the &lt;code&gt;HealthCheckId&lt;/code&gt; element.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you want to check the status of a calculated health check, you must use the Amazon Route 53 console or the CloudWatch console. You can&#39;t use &lt;code&gt;GetHealthCheckStatus&lt;/code&gt; to get the status of a calculated health check.&lt;/p&gt; &lt;/note&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHealthCheckStatusCall(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/healthcheck/{HealthCheckId}/status"
            .replace("{" + "HealthCheckId" + "}", localVarApiClient.escapeString(healthCheckId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHealthCheckStatusValidateBeforeCall(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'healthCheckId' is set
        if (healthCheckId == null) {
            throw new ApiException("Missing the required parameter 'healthCheckId' when calling getHealthCheckStatus(Async)");
        }

        return getHealthCheckStatusCall(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets status of a specified health check. &lt;/p&gt; &lt;important&gt; &lt;p&gt;This API is intended for use during development to diagnose behavior. It doesn’t support production use-cases with high query rates that require immediate and actionable responses.&lt;/p&gt; &lt;/important&gt;
     * @param healthCheckId &lt;p&gt;The ID for the health check that you want the current status for. When you created the health check, &lt;code&gt;CreateHealthCheck&lt;/code&gt; returned the ID in the response, in the &lt;code&gt;HealthCheckId&lt;/code&gt; element.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you want to check the status of a calculated health check, you must use the Amazon Route 53 console or the CloudWatch console. You can&#39;t use &lt;code&gt;GetHealthCheckStatus&lt;/code&gt; to get the status of a calculated health check.&lt;/p&gt; &lt;/note&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetHealthCheckStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetHealthCheckStatusResponse getHealthCheckStatus(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetHealthCheckStatusResponse> localVarResp = getHealthCheckStatusWithHttpInfo(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets status of a specified health check. &lt;/p&gt; &lt;important&gt; &lt;p&gt;This API is intended for use during development to diagnose behavior. It doesn’t support production use-cases with high query rates that require immediate and actionable responses.&lt;/p&gt; &lt;/important&gt;
     * @param healthCheckId &lt;p&gt;The ID for the health check that you want the current status for. When you created the health check, &lt;code&gt;CreateHealthCheck&lt;/code&gt; returned the ID in the response, in the &lt;code&gt;HealthCheckId&lt;/code&gt; element.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you want to check the status of a calculated health check, you must use the Amazon Route 53 console or the CloudWatch console. You can&#39;t use &lt;code&gt;GetHealthCheckStatus&lt;/code&gt; to get the status of a calculated health check.&lt;/p&gt; &lt;/note&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetHealthCheckStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHealthCheckStatusResponse> getHealthCheckStatusWithHttpInfo(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getHealthCheckStatusValidateBeforeCall(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetHealthCheckStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets status of a specified health check. &lt;/p&gt; &lt;important&gt; &lt;p&gt;This API is intended for use during development to diagnose behavior. It doesn’t support production use-cases with high query rates that require immediate and actionable responses.&lt;/p&gt; &lt;/important&gt;
     * @param healthCheckId &lt;p&gt;The ID for the health check that you want the current status for. When you created the health check, &lt;code&gt;CreateHealthCheck&lt;/code&gt; returned the ID in the response, in the &lt;code&gt;HealthCheckId&lt;/code&gt; element.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you want to check the status of a calculated health check, you must use the Amazon Route 53 console or the CloudWatch console. You can&#39;t use &lt;code&gt;GetHealthCheckStatus&lt;/code&gt; to get the status of a calculated health check.&lt;/p&gt; &lt;/note&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHealthCheckStatusAsync(String healthCheckId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetHealthCheckStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHealthCheckStatusValidateBeforeCall(healthCheckId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetHealthCheckStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHostedZone
     * @param id The ID of the hosted zone that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostedZoneCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHostedZoneValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getHostedZone(Async)");
        }

        return getHostedZoneCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about a specified hosted zone including the four name servers assigned to the hosted zone.
     * @param id The ID of the hosted zone that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetHostedZoneResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetHostedZoneResponse getHostedZone(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetHostedZoneResponse> localVarResp = getHostedZoneWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a specified hosted zone including the four name servers assigned to the hosted zone.
     * @param id The ID of the hosted zone that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetHostedZoneResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHostedZoneResponse> getHostedZoneWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getHostedZoneValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetHostedZoneResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a specified hosted zone including the four name servers assigned to the hosted zone.
     * @param id The ID of the hosted zone that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostedZoneAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetHostedZoneResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHostedZoneValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetHostedZoneResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHostedZoneCount
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostedZoneCountCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzonecount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHostedZoneCountValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        return getHostedZoneCountCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves the number of hosted zones that are associated with the current Amazon Web Services account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetHostedZoneCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetHostedZoneCountResponse getHostedZoneCount(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetHostedZoneCountResponse> localVarResp = getHostedZoneCountWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the number of hosted zones that are associated with the current Amazon Web Services account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetHostedZoneCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHostedZoneCountResponse> getHostedZoneCountWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getHostedZoneCountValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetHostedZoneCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the number of hosted zones that are associated with the current Amazon Web Services account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostedZoneCountAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetHostedZoneCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHostedZoneCountValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetHostedZoneCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHostedZoneLimit
     * @param type &lt;p&gt;The limit that you want to get. Valid values include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_RRSETS_BY_ZONE&lt;/b&gt;: The maximum number of records that you can create in the specified hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_VPCS_ASSOCIATED_BY_ZONE&lt;/b&gt;: The maximum number of Amazon VPCs that you can associate with the specified private hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param id The ID of the hosted zone that you want to get a limit for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HostedZoneNotPrivate </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostedZoneLimitCall(String type, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzonelimit/{Id}/{Type}"
            .replace("{" + "Type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHostedZoneLimitValidateBeforeCall(String type, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getHostedZoneLimit(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getHostedZoneLimit(Async)");
        }

        return getHostedZoneLimitCall(type, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the specified limit for a specified hosted zone, for example, the maximum number of records that you can create in the hosted zone. &lt;/p&gt; &lt;p&gt;For the default limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html\&quot;&gt;Limits&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. To request a higher limit, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-route53\&quot;&gt;open a case&lt;/a&gt;.&lt;/p&gt;
     * @param type &lt;p&gt;The limit that you want to get. Valid values include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_RRSETS_BY_ZONE&lt;/b&gt;: The maximum number of records that you can create in the specified hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_VPCS_ASSOCIATED_BY_ZONE&lt;/b&gt;: The maximum number of Amazon VPCs that you can associate with the specified private hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param id The ID of the hosted zone that you want to get a limit for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetHostedZoneLimitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HostedZoneNotPrivate </td><td>  -  </td></tr>
     </table>
     */
    public GetHostedZoneLimitResponse getHostedZoneLimit(String type, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetHostedZoneLimitResponse> localVarResp = getHostedZoneLimitWithHttpInfo(type, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the specified limit for a specified hosted zone, for example, the maximum number of records that you can create in the hosted zone. &lt;/p&gt; &lt;p&gt;For the default limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html\&quot;&gt;Limits&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. To request a higher limit, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-route53\&quot;&gt;open a case&lt;/a&gt;.&lt;/p&gt;
     * @param type &lt;p&gt;The limit that you want to get. Valid values include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_RRSETS_BY_ZONE&lt;/b&gt;: The maximum number of records that you can create in the specified hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_VPCS_ASSOCIATED_BY_ZONE&lt;/b&gt;: The maximum number of Amazon VPCs that you can associate with the specified private hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param id The ID of the hosted zone that you want to get a limit for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetHostedZoneLimitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HostedZoneNotPrivate </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHostedZoneLimitResponse> getHostedZoneLimitWithHttpInfo(String type, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getHostedZoneLimitValidateBeforeCall(type, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetHostedZoneLimitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the specified limit for a specified hosted zone, for example, the maximum number of records that you can create in the hosted zone. &lt;/p&gt; &lt;p&gt;For the default limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html\&quot;&gt;Limits&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. To request a higher limit, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-route53\&quot;&gt;open a case&lt;/a&gt;.&lt;/p&gt;
     * @param type &lt;p&gt;The limit that you want to get. Valid values include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_RRSETS_BY_ZONE&lt;/b&gt;: The maximum number of records that you can create in the specified hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;MAX_VPCS_ASSOCIATED_BY_ZONE&lt;/b&gt;: The maximum number of Amazon VPCs that you can associate with the specified private hosted zone.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param id The ID of the hosted zone that you want to get a limit for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HostedZoneNotPrivate </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostedZoneLimitAsync(String type, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetHostedZoneLimitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHostedZoneLimitValidateBeforeCall(type, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetHostedZoneLimitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQueryLoggingConfig
     * @param id The ID of the configuration for DNS query logging that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchQueryLoggingConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryLoggingConfigCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/queryloggingconfig/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryLoggingConfigValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getQueryLoggingConfig(Async)");
        }

        return getQueryLoggingConfigCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about a specified configuration for DNS query logging.&lt;/p&gt; &lt;p&gt;For more information about DNS query logs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateQueryLoggingConfig.html\&quot;&gt;CreateQueryLoggingConfig&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html\&quot;&gt;Logging DNS Queries&lt;/a&gt;.&lt;/p&gt;
     * @param id The ID of the configuration for DNS query logging that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetQueryLoggingConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchQueryLoggingConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetQueryLoggingConfigResponse getQueryLoggingConfig(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetQueryLoggingConfigResponse> localVarResp = getQueryLoggingConfigWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about a specified configuration for DNS query logging.&lt;/p&gt; &lt;p&gt;For more information about DNS query logs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateQueryLoggingConfig.html\&quot;&gt;CreateQueryLoggingConfig&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html\&quot;&gt;Logging DNS Queries&lt;/a&gt;.&lt;/p&gt;
     * @param id The ID of the configuration for DNS query logging that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetQueryLoggingConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchQueryLoggingConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetQueryLoggingConfigResponse> getQueryLoggingConfigWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getQueryLoggingConfigValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetQueryLoggingConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about a specified configuration for DNS query logging.&lt;/p&gt; &lt;p&gt;For more information about DNS query logs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateQueryLoggingConfig.html\&quot;&gt;CreateQueryLoggingConfig&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html\&quot;&gt;Logging DNS Queries&lt;/a&gt;.&lt;/p&gt;
     * @param id The ID of the configuration for DNS query logging that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchQueryLoggingConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryLoggingConfigAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetQueryLoggingConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryLoggingConfigValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetQueryLoggingConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReusableDelegationSet
     * @param id The ID of the reusable delegation set that you want to get a list of name servers for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReusableDelegationSetCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/delegationset/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReusableDelegationSetValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getReusableDelegationSet(Async)");
        }

        return getReusableDelegationSetCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves information about a specified reusable delegation set, including the four name servers that are assigned to the delegation set.
     * @param id The ID of the reusable delegation set that you want to get a list of name servers for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetReusableDelegationSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetReusableDelegationSetResponse getReusableDelegationSet(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetReusableDelegationSetResponse> localVarResp = getReusableDelegationSetWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves information about a specified reusable delegation set, including the four name servers that are assigned to the delegation set.
     * @param id The ID of the reusable delegation set that you want to get a list of name servers for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetReusableDelegationSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetReusableDelegationSetResponse> getReusableDelegationSetWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getReusableDelegationSetValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetReusableDelegationSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves information about a specified reusable delegation set, including the four name servers that are assigned to the delegation set.
     * @param id The ID of the reusable delegation set that you want to get a list of name servers for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReusableDelegationSetAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetReusableDelegationSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReusableDelegationSetValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetReusableDelegationSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReusableDelegationSetLimit
     * @param type Specify &lt;code&gt;MAX_ZONES_BY_REUSABLE_DELEGATION_SET&lt;/code&gt; to get the maximum number of hosted zones that you can associate with the specified reusable delegation set. (required)
     * @param id The ID of the delegation set that you want to get the limit for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReusableDelegationSetLimitCall(String type, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/reusabledelegationsetlimit/{Id}/{Type}"
            .replace("{" + "Type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReusableDelegationSetLimitValidateBeforeCall(String type, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getReusableDelegationSetLimit(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getReusableDelegationSetLimit(Async)");
        }

        return getReusableDelegationSetLimitCall(type, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the maximum number of hosted zones that you can associate with the specified reusable delegation set.&lt;/p&gt; &lt;p&gt;For the default limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html\&quot;&gt;Limits&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. To request a higher limit, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-route53\&quot;&gt;open a case&lt;/a&gt;.&lt;/p&gt;
     * @param type Specify &lt;code&gt;MAX_ZONES_BY_REUSABLE_DELEGATION_SET&lt;/code&gt; to get the maximum number of hosted zones that you can associate with the specified reusable delegation set. (required)
     * @param id The ID of the delegation set that you want to get the limit for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetReusableDelegationSetLimitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
     </table>
     */
    public GetReusableDelegationSetLimitResponse getReusableDelegationSetLimit(String type, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetReusableDelegationSetLimitResponse> localVarResp = getReusableDelegationSetLimitWithHttpInfo(type, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the maximum number of hosted zones that you can associate with the specified reusable delegation set.&lt;/p&gt; &lt;p&gt;For the default limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html\&quot;&gt;Limits&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. To request a higher limit, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-route53\&quot;&gt;open a case&lt;/a&gt;.&lt;/p&gt;
     * @param type Specify &lt;code&gt;MAX_ZONES_BY_REUSABLE_DELEGATION_SET&lt;/code&gt; to get the maximum number of hosted zones that you can associate with the specified reusable delegation set. (required)
     * @param id The ID of the delegation set that you want to get the limit for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetReusableDelegationSetLimitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetReusableDelegationSetLimitResponse> getReusableDelegationSetLimitWithHttpInfo(String type, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getReusableDelegationSetLimitValidateBeforeCall(type, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetReusableDelegationSetLimitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the maximum number of hosted zones that you can associate with the specified reusable delegation set.&lt;/p&gt; &lt;p&gt;For the default limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html\&quot;&gt;Limits&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. To request a higher limit, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-route53\&quot;&gt;open a case&lt;/a&gt;.&lt;/p&gt;
     * @param type Specify &lt;code&gt;MAX_ZONES_BY_REUSABLE_DELEGATION_SET&lt;/code&gt; to get the maximum number of hosted zones that you can associate with the specified reusable delegation set. (required)
     * @param id The ID of the delegation set that you want to get the limit for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReusableDelegationSetLimitAsync(String type, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetReusableDelegationSetLimitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReusableDelegationSetLimitValidateBeforeCall(type, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetReusableDelegationSetLimitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrafficPolicy
     * @param id The ID of the traffic policy that you want to get information about. (required)
     * @param version The version number of the traffic policy that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrafficPolicyCall(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicy/{Id}/{Version}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "Version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrafficPolicyValidateBeforeCall(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTrafficPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getTrafficPolicy(Async)");
        }

        return getTrafficPolicyCall(id, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about a specific traffic policy version.&lt;/p&gt; &lt;p&gt;For information about how of deleting a traffic policy affects the response from &lt;code&gt;GetTrafficPolicy&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeleteTrafficPolicy.html\&quot;&gt;DeleteTrafficPolicy&lt;/a&gt;. &lt;/p&gt;
     * @param id The ID of the traffic policy that you want to get information about. (required)
     * @param version The version number of the traffic policy that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetTrafficPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetTrafficPolicyResponse getTrafficPolicy(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetTrafficPolicyResponse> localVarResp = getTrafficPolicyWithHttpInfo(id, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about a specific traffic policy version.&lt;/p&gt; &lt;p&gt;For information about how of deleting a traffic policy affects the response from &lt;code&gt;GetTrafficPolicy&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeleteTrafficPolicy.html\&quot;&gt;DeleteTrafficPolicy&lt;/a&gt;. &lt;/p&gt;
     * @param id The ID of the traffic policy that you want to get information about. (required)
     * @param version The version number of the traffic policy that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetTrafficPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTrafficPolicyResponse> getTrafficPolicyWithHttpInfo(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getTrafficPolicyValidateBeforeCall(id, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetTrafficPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about a specific traffic policy version.&lt;/p&gt; &lt;p&gt;For information about how of deleting a traffic policy affects the response from &lt;code&gt;GetTrafficPolicy&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeleteTrafficPolicy.html\&quot;&gt;DeleteTrafficPolicy&lt;/a&gt;. &lt;/p&gt;
     * @param id The ID of the traffic policy that you want to get information about. (required)
     * @param version The version number of the traffic policy that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrafficPolicyAsync(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetTrafficPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrafficPolicyValidateBeforeCall(id, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetTrafficPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrafficPolicyInstance
     * @param id The ID of the traffic policy instance that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrafficPolicyInstanceCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicyinstance/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrafficPolicyInstanceValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTrafficPolicyInstance(Async)");
        }

        return getTrafficPolicyInstanceCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about a specified traffic policy instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you submit a &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; or an &lt;code&gt;UpdateTrafficPolicyInstance&lt;/code&gt; request, there&#39;s a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the &lt;code&gt;State&lt;/code&gt; response element.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;In the Route 53 console, traffic policy instances are known as policy records.&lt;/p&gt; &lt;/note&gt;
     * @param id The ID of the traffic policy instance that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetTrafficPolicyInstanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetTrafficPolicyInstanceResponse getTrafficPolicyInstance(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetTrafficPolicyInstanceResponse> localVarResp = getTrafficPolicyInstanceWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about a specified traffic policy instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you submit a &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; or an &lt;code&gt;UpdateTrafficPolicyInstance&lt;/code&gt; request, there&#39;s a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the &lt;code&gt;State&lt;/code&gt; response element.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;In the Route 53 console, traffic policy instances are known as policy records.&lt;/p&gt; &lt;/note&gt;
     * @param id The ID of the traffic policy instance that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetTrafficPolicyInstanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTrafficPolicyInstanceResponse> getTrafficPolicyInstanceWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getTrafficPolicyInstanceValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetTrafficPolicyInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about a specified traffic policy instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you submit a &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; or an &lt;code&gt;UpdateTrafficPolicyInstance&lt;/code&gt; request, there&#39;s a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the &lt;code&gt;State&lt;/code&gt; response element.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;In the Route 53 console, traffic policy instances are known as policy records.&lt;/p&gt; &lt;/note&gt;
     * @param id The ID of the traffic policy instance that you want to get information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrafficPolicyInstanceAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetTrafficPolicyInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrafficPolicyInstanceValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetTrafficPolicyInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrafficPolicyInstanceCount
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrafficPolicyInstanceCountCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicyinstancecount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrafficPolicyInstanceCountValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        return getTrafficPolicyInstanceCountCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets the number of traffic policy instances that are associated with the current Amazon Web Services account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetTrafficPolicyInstanceCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetTrafficPolicyInstanceCountResponse getTrafficPolicyInstanceCount(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetTrafficPolicyInstanceCountResponse> localVarResp = getTrafficPolicyInstanceCountWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the number of traffic policy instances that are associated with the current Amazon Web Services account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetTrafficPolicyInstanceCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTrafficPolicyInstanceCountResponse> getTrafficPolicyInstanceCountWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getTrafficPolicyInstanceCountValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetTrafficPolicyInstanceCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the number of traffic policy instances that are associated with the current Amazon Web Services account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrafficPolicyInstanceCountAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetTrafficPolicyInstanceCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrafficPolicyInstanceCountValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetTrafficPolicyInstanceCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCidrBlocks
     * @param cidrCollectionId The UUID of the CIDR collection. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param location The name of the CIDR collection location. (optional)
     * @param nexttoken An opaque pagination token to indicate where the service is to begin enumerating results. (optional)
     * @param maxresults Maximum number of results you want returned. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCidrLocationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCidrBlocksCall(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String location, String nexttoken, String maxresults, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/cidrcollection/{CidrCollectionId}/cidrblocks"
            .replace("{" + "CidrCollectionId" + "}", localVarApiClient.escapeString(cidrCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (nexttoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nexttoken", nexttoken));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCidrBlocksValidateBeforeCall(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String location, String nexttoken, String maxresults, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cidrCollectionId' is set
        if (cidrCollectionId == null) {
            throw new ApiException("Missing the required parameter 'cidrCollectionId' when calling listCidrBlocks(Async)");
        }

        return listCidrBlocksCall(cidrCollectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, location, nexttoken, maxresults, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a paginated list of location objects and their CIDR blocks.
     * @param cidrCollectionId The UUID of the CIDR collection. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param location The name of the CIDR collection location. (optional)
     * @param nexttoken An opaque pagination token to indicate where the service is to begin enumerating results. (optional)
     * @param maxresults Maximum number of results you want returned. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListCidrBlocksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCidrLocationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ListCidrBlocksResponse listCidrBlocks(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String location, String nexttoken, String maxresults, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListCidrBlocksResponse> localVarResp = listCidrBlocksWithHttpInfo(cidrCollectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, location, nexttoken, maxresults, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated list of location objects and their CIDR blocks.
     * @param cidrCollectionId The UUID of the CIDR collection. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param location The name of the CIDR collection location. (optional)
     * @param nexttoken An opaque pagination token to indicate where the service is to begin enumerating results. (optional)
     * @param maxresults Maximum number of results you want returned. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListCidrBlocksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCidrLocationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCidrBlocksResponse> listCidrBlocksWithHttpInfo(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String location, String nexttoken, String maxresults, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listCidrBlocksValidateBeforeCall(cidrCollectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, location, nexttoken, maxresults, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListCidrBlocksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated list of location objects and their CIDR blocks.
     * @param cidrCollectionId The UUID of the CIDR collection. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param location The name of the CIDR collection location. (optional)
     * @param nexttoken An opaque pagination token to indicate where the service is to begin enumerating results. (optional)
     * @param maxresults Maximum number of results you want returned. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCidrLocationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCidrBlocksAsync(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String location, String nexttoken, String maxresults, String maxResults, String nextToken, final ApiCallback<ListCidrBlocksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCidrBlocksValidateBeforeCall(cidrCollectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, location, nexttoken, maxresults, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListCidrBlocksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCidrCollections
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nexttoken &lt;p&gt;An opaque pagination token to indicate where the service is to begin enumerating results.&lt;/p&gt; &lt;p&gt;If no value is provided, the listing of results starts from the beginning.&lt;/p&gt; (optional)
     * @param maxresults The maximum number of CIDR collections to return in the response. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCidrCollectionsCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/cidrcollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nexttoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nexttoken", nexttoken));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCidrCollectionsValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        return listCidrCollectionsCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nexttoken, maxresults, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a paginated list of CIDR collections in the Amazon Web Services account (metadata only).
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nexttoken &lt;p&gt;An opaque pagination token to indicate where the service is to begin enumerating results.&lt;/p&gt; &lt;p&gt;If no value is provided, the listing of results starts from the beginning.&lt;/p&gt; (optional)
     * @param maxresults The maximum number of CIDR collections to return in the response. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListCidrCollectionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ListCidrCollectionsResponse listCidrCollections(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListCidrCollectionsResponse> localVarResp = listCidrCollectionsWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nexttoken, maxresults, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated list of CIDR collections in the Amazon Web Services account (metadata only).
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nexttoken &lt;p&gt;An opaque pagination token to indicate where the service is to begin enumerating results.&lt;/p&gt; &lt;p&gt;If no value is provided, the listing of results starts from the beginning.&lt;/p&gt; (optional)
     * @param maxresults The maximum number of CIDR collections to return in the response. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListCidrCollectionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCidrCollectionsResponse> listCidrCollectionsWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listCidrCollectionsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nexttoken, maxresults, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListCidrCollectionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated list of CIDR collections in the Amazon Web Services account (metadata only).
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nexttoken &lt;p&gt;An opaque pagination token to indicate where the service is to begin enumerating results.&lt;/p&gt; &lt;p&gt;If no value is provided, the listing of results starts from the beginning.&lt;/p&gt; (optional)
     * @param maxresults The maximum number of CIDR collections to return in the response. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCidrCollectionsAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, String maxResults, String nextToken, final ApiCallback<ListCidrCollectionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCidrCollectionsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nexttoken, maxresults, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListCidrCollectionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCidrLocations
     * @param cidrCollectionId The CIDR collection ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nexttoken &lt;p&gt;An opaque pagination token to indicate where the service is to begin enumerating results.&lt;/p&gt; &lt;p&gt;If no value is provided, the listing of results starts from the beginning.&lt;/p&gt; (optional)
     * @param maxresults The maximum number of CIDR collection locations to return in the response. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCidrLocationsCall(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/cidrcollection/{CidrCollectionId}"
            .replace("{" + "CidrCollectionId" + "}", localVarApiClient.escapeString(cidrCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nexttoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nexttoken", nexttoken));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCidrLocationsValidateBeforeCall(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cidrCollectionId' is set
        if (cidrCollectionId == null) {
            throw new ApiException("Missing the required parameter 'cidrCollectionId' when calling listCidrLocations(Async)");
        }

        return listCidrLocationsCall(cidrCollectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nexttoken, maxresults, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a paginated list of CIDR locations for the given collection (metadata only, does not include CIDR blocks).
     * @param cidrCollectionId The CIDR collection ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nexttoken &lt;p&gt;An opaque pagination token to indicate where the service is to begin enumerating results.&lt;/p&gt; &lt;p&gt;If no value is provided, the listing of results starts from the beginning.&lt;/p&gt; (optional)
     * @param maxresults The maximum number of CIDR collection locations to return in the response. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListCidrLocationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ListCidrLocationsResponse listCidrLocations(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListCidrLocationsResponse> localVarResp = listCidrLocationsWithHttpInfo(cidrCollectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nexttoken, maxresults, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated list of CIDR locations for the given collection (metadata only, does not include CIDR blocks).
     * @param cidrCollectionId The CIDR collection ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nexttoken &lt;p&gt;An opaque pagination token to indicate where the service is to begin enumerating results.&lt;/p&gt; &lt;p&gt;If no value is provided, the listing of results starts from the beginning.&lt;/p&gt; (optional)
     * @param maxresults The maximum number of CIDR collection locations to return in the response. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListCidrLocationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCidrLocationsResponse> listCidrLocationsWithHttpInfo(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listCidrLocationsValidateBeforeCall(cidrCollectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nexttoken, maxresults, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListCidrLocationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated list of CIDR locations for the given collection (metadata only, does not include CIDR blocks).
     * @param cidrCollectionId The CIDR collection ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nexttoken &lt;p&gt;An opaque pagination token to indicate where the service is to begin enumerating results.&lt;/p&gt; &lt;p&gt;If no value is provided, the listing of results starts from the beginning.&lt;/p&gt; (optional)
     * @param maxresults The maximum number of CIDR collection locations to return in the response. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCidrCollectionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCidrLocationsAsync(String cidrCollectionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, String maxResults, String nextToken, final ApiCallback<ListCidrLocationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCidrLocationsValidateBeforeCall(cidrCollectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nexttoken, maxresults, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListCidrLocationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listGeoLocations
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startcontinentcode &lt;p&gt;The code for the continent with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already returned a page or more of results, if &lt;code&gt;IsTruncated&lt;/code&gt; is true, and if &lt;code&gt;NextContinentCode&lt;/code&gt; from the previous response has a value, enter that value in &lt;code&gt;startcontinentcode&lt;/code&gt; to return the next page of results.&lt;/p&gt; &lt;p&gt;Include &lt;code&gt;startcontinentcode&lt;/code&gt; only if you want to list continents. Don&#39;t include &lt;code&gt;startcontinentcode&lt;/code&gt; when you&#39;re listing countries or countries with their subdivisions.&lt;/p&gt; (optional)
     * @param startcountrycode The code for the country with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already returned a page or more of results, if &lt;code&gt;IsTruncated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and if &lt;code&gt;NextCountryCode&lt;/code&gt; from the previous response has a value, enter that value in &lt;code&gt;startcountrycode&lt;/code&gt; to return the next page of results. (optional)
     * @param startsubdivisioncode &lt;p&gt;The code for the state of the United States with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already returned a page or more of results, if &lt;code&gt;IsTruncated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and if &lt;code&gt;NextSubdivisionCode&lt;/code&gt; from the previous response has a value, enter that value in &lt;code&gt;startsubdivisioncode&lt;/code&gt; to return the next page of results.&lt;/p&gt; &lt;p&gt;To list subdivisions (U.S. states), you must include both &lt;code&gt;startcountrycode&lt;/code&gt; and &lt;code&gt;startsubdivisioncode&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxitems (Optional) The maximum number of geolocations to be included in the response body for this request. If more than &lt;code&gt;maxitems&lt;/code&gt; geolocations remain to be listed, then the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGeoLocationsCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String startcontinentcode, String startcountrycode, String startsubdivisioncode, String maxitems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/geolocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startcontinentcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startcontinentcode", startcontinentcode));
        }

        if (startcountrycode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startcountrycode", startcountrycode));
        }

        if (startsubdivisioncode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startsubdivisioncode", startsubdivisioncode));
        }

        if (maxitems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxitems", maxitems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGeoLocationsValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String startcontinentcode, String startcountrycode, String startsubdivisioncode, String maxitems, final ApiCallback _callback) throws ApiException {
        return listGeoLocationsCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startcontinentcode, startcountrycode, startsubdivisioncode, maxitems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves a list of supported geographic locations.&lt;/p&gt; &lt;p&gt;Countries are listed first, and continents are listed last. If Amazon Route 53 supports subdivisions for a country (for example, states or provinces), the subdivisions for that country are listed in alphabetical order immediately after the corresponding country.&lt;/p&gt; &lt;p&gt;Route 53 does not perform authorization for this API because it retrieves information that is already available to the public.&lt;/p&gt; &lt;p&gt;For a list of supported geolocation codes, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GeoLocation.html\&quot;&gt;GeoLocation&lt;/a&gt; data type.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startcontinentcode &lt;p&gt;The code for the continent with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already returned a page or more of results, if &lt;code&gt;IsTruncated&lt;/code&gt; is true, and if &lt;code&gt;NextContinentCode&lt;/code&gt; from the previous response has a value, enter that value in &lt;code&gt;startcontinentcode&lt;/code&gt; to return the next page of results.&lt;/p&gt; &lt;p&gt;Include &lt;code&gt;startcontinentcode&lt;/code&gt; only if you want to list continents. Don&#39;t include &lt;code&gt;startcontinentcode&lt;/code&gt; when you&#39;re listing countries or countries with their subdivisions.&lt;/p&gt; (optional)
     * @param startcountrycode The code for the country with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already returned a page or more of results, if &lt;code&gt;IsTruncated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and if &lt;code&gt;NextCountryCode&lt;/code&gt; from the previous response has a value, enter that value in &lt;code&gt;startcountrycode&lt;/code&gt; to return the next page of results. (optional)
     * @param startsubdivisioncode &lt;p&gt;The code for the state of the United States with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already returned a page or more of results, if &lt;code&gt;IsTruncated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and if &lt;code&gt;NextSubdivisionCode&lt;/code&gt; from the previous response has a value, enter that value in &lt;code&gt;startsubdivisioncode&lt;/code&gt; to return the next page of results.&lt;/p&gt; &lt;p&gt;To list subdivisions (U.S. states), you must include both &lt;code&gt;startcountrycode&lt;/code&gt; and &lt;code&gt;startsubdivisioncode&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxitems (Optional) The maximum number of geolocations to be included in the response body for this request. If more than &lt;code&gt;maxitems&lt;/code&gt; geolocations remain to be listed, then the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;. (optional)
     * @return ListGeoLocationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ListGeoLocationsResponse listGeoLocations(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String startcontinentcode, String startcountrycode, String startsubdivisioncode, String maxitems) throws ApiException {
        ApiResponse<ListGeoLocationsResponse> localVarResp = listGeoLocationsWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startcontinentcode, startcountrycode, startsubdivisioncode, maxitems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves a list of supported geographic locations.&lt;/p&gt; &lt;p&gt;Countries are listed first, and continents are listed last. If Amazon Route 53 supports subdivisions for a country (for example, states or provinces), the subdivisions for that country are listed in alphabetical order immediately after the corresponding country.&lt;/p&gt; &lt;p&gt;Route 53 does not perform authorization for this API because it retrieves information that is already available to the public.&lt;/p&gt; &lt;p&gt;For a list of supported geolocation codes, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GeoLocation.html\&quot;&gt;GeoLocation&lt;/a&gt; data type.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startcontinentcode &lt;p&gt;The code for the continent with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already returned a page or more of results, if &lt;code&gt;IsTruncated&lt;/code&gt; is true, and if &lt;code&gt;NextContinentCode&lt;/code&gt; from the previous response has a value, enter that value in &lt;code&gt;startcontinentcode&lt;/code&gt; to return the next page of results.&lt;/p&gt; &lt;p&gt;Include &lt;code&gt;startcontinentcode&lt;/code&gt; only if you want to list continents. Don&#39;t include &lt;code&gt;startcontinentcode&lt;/code&gt; when you&#39;re listing countries or countries with their subdivisions.&lt;/p&gt; (optional)
     * @param startcountrycode The code for the country with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already returned a page or more of results, if &lt;code&gt;IsTruncated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and if &lt;code&gt;NextCountryCode&lt;/code&gt; from the previous response has a value, enter that value in &lt;code&gt;startcountrycode&lt;/code&gt; to return the next page of results. (optional)
     * @param startsubdivisioncode &lt;p&gt;The code for the state of the United States with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already returned a page or more of results, if &lt;code&gt;IsTruncated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and if &lt;code&gt;NextSubdivisionCode&lt;/code&gt; from the previous response has a value, enter that value in &lt;code&gt;startsubdivisioncode&lt;/code&gt; to return the next page of results.&lt;/p&gt; &lt;p&gt;To list subdivisions (U.S. states), you must include both &lt;code&gt;startcountrycode&lt;/code&gt; and &lt;code&gt;startsubdivisioncode&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxitems (Optional) The maximum number of geolocations to be included in the response body for this request. If more than &lt;code&gt;maxitems&lt;/code&gt; geolocations remain to be listed, then the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;ListGeoLocationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListGeoLocationsResponse> listGeoLocationsWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String startcontinentcode, String startcountrycode, String startsubdivisioncode, String maxitems) throws ApiException {
        okhttp3.Call localVarCall = listGeoLocationsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startcontinentcode, startcountrycode, startsubdivisioncode, maxitems, null);
        Type localVarReturnType = new TypeToken<ListGeoLocationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves a list of supported geographic locations.&lt;/p&gt; &lt;p&gt;Countries are listed first, and continents are listed last. If Amazon Route 53 supports subdivisions for a country (for example, states or provinces), the subdivisions for that country are listed in alphabetical order immediately after the corresponding country.&lt;/p&gt; &lt;p&gt;Route 53 does not perform authorization for this API because it retrieves information that is already available to the public.&lt;/p&gt; &lt;p&gt;For a list of supported geolocation codes, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_GeoLocation.html\&quot;&gt;GeoLocation&lt;/a&gt; data type.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startcontinentcode &lt;p&gt;The code for the continent with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already returned a page or more of results, if &lt;code&gt;IsTruncated&lt;/code&gt; is true, and if &lt;code&gt;NextContinentCode&lt;/code&gt; from the previous response has a value, enter that value in &lt;code&gt;startcontinentcode&lt;/code&gt; to return the next page of results.&lt;/p&gt; &lt;p&gt;Include &lt;code&gt;startcontinentcode&lt;/code&gt; only if you want to list continents. Don&#39;t include &lt;code&gt;startcontinentcode&lt;/code&gt; when you&#39;re listing countries or countries with their subdivisions.&lt;/p&gt; (optional)
     * @param startcountrycode The code for the country with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already returned a page or more of results, if &lt;code&gt;IsTruncated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and if &lt;code&gt;NextCountryCode&lt;/code&gt; from the previous response has a value, enter that value in &lt;code&gt;startcountrycode&lt;/code&gt; to return the next page of results. (optional)
     * @param startsubdivisioncode &lt;p&gt;The code for the state of the United States with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already returned a page or more of results, if &lt;code&gt;IsTruncated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and if &lt;code&gt;NextSubdivisionCode&lt;/code&gt; from the previous response has a value, enter that value in &lt;code&gt;startsubdivisioncode&lt;/code&gt; to return the next page of results.&lt;/p&gt; &lt;p&gt;To list subdivisions (U.S. states), you must include both &lt;code&gt;startcountrycode&lt;/code&gt; and &lt;code&gt;startsubdivisioncode&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxitems (Optional) The maximum number of geolocations to be included in the response body for this request. If more than &lt;code&gt;maxitems&lt;/code&gt; geolocations remain to be listed, then the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGeoLocationsAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String startcontinentcode, String startcountrycode, String startsubdivisioncode, String maxitems, final ApiCallback<ListGeoLocationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGeoLocationsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startcontinentcode, startcountrycode, startsubdivisioncode, maxitems, _callback);
        Type localVarReturnType = new TypeToken<ListGeoLocationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHealthChecks
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more health checks. To get another group, submit another &lt;code&gt;ListHealthChecks&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the previous response, which is the ID of the first health check that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more health checks to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of health checks that you want &lt;code&gt;ListHealthChecks&lt;/code&gt; to return in response to the current request. Amazon Route 53 returns a maximum of 100 items. If you set &lt;code&gt;MaxItems&lt;/code&gt; to a value greater than 100, Route 53 returns only the first 100 health checks.  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleVersion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHealthChecksCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, String maxItems, String marker2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/healthcheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (maxitems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxitems", maxitems));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (marker2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHealthChecksValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, String maxItems, String marker2, final ApiCallback _callback) throws ApiException {
        return listHealthChecksCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxitems, maxItems, marker2, _callback);

    }

    /**
     * 
     * Retrieve a list of the health checks that are associated with the current Amazon Web Services account. 
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more health checks. To get another group, submit another &lt;code&gt;ListHealthChecks&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the previous response, which is the ID of the first health check that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more health checks to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of health checks that you want &lt;code&gt;ListHealthChecks&lt;/code&gt; to return in response to the current request. Amazon Route 53 returns a maximum of 100 items. If you set &lt;code&gt;MaxItems&lt;/code&gt; to a value greater than 100, Route 53 returns only the first 100 health checks.  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker2 Pagination token (optional)
     * @return ListHealthChecksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleVersion </td><td>  -  </td></tr>
     </table>
     */
    public ListHealthChecksResponse listHealthChecks(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, String maxItems, String marker2) throws ApiException {
        ApiResponse<ListHealthChecksResponse> localVarResp = listHealthChecksWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxitems, maxItems, marker2);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of the health checks that are associated with the current Amazon Web Services account. 
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more health checks. To get another group, submit another &lt;code&gt;ListHealthChecks&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the previous response, which is the ID of the first health check that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more health checks to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of health checks that you want &lt;code&gt;ListHealthChecks&lt;/code&gt; to return in response to the current request. Amazon Route 53 returns a maximum of 100 items. If you set &lt;code&gt;MaxItems&lt;/code&gt; to a value greater than 100, Route 53 returns only the first 100 health checks.  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker2 Pagination token (optional)
     * @return ApiResponse&lt;ListHealthChecksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleVersion </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHealthChecksResponse> listHealthChecksWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, String maxItems, String marker2) throws ApiException {
        okhttp3.Call localVarCall = listHealthChecksValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxitems, maxItems, marker2, null);
        Type localVarReturnType = new TypeToken<ListHealthChecksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of the health checks that are associated with the current Amazon Web Services account. 
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more health checks. To get another group, submit another &lt;code&gt;ListHealthChecks&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the previous response, which is the ID of the first health check that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more health checks to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of health checks that you want &lt;code&gt;ListHealthChecks&lt;/code&gt; to return in response to the current request. Amazon Route 53 returns a maximum of 100 items. If you set &lt;code&gt;MaxItems&lt;/code&gt; to a value greater than 100, Route 53 returns only the first 100 health checks.  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleVersion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHealthChecksAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, String maxItems, String marker2, final ApiCallback<ListHealthChecksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHealthChecksValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxitems, maxItems, marker2, _callback);
        Type localVarReturnType = new TypeToken<ListHealthChecksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHostedZones
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more hosted zones. To get more hosted zones, submit another &lt;code&gt;ListHostedZones&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the previous response, which is the ID of the first hosted zone that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more hosted zones to get.&lt;/p&gt; (optional)
     * @param maxitems (Optional) The maximum number of hosted zones that you want Amazon Route 53 to return. If you have more than &lt;code&gt;maxitems&lt;/code&gt; hosted zones, the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is &lt;code&gt;true&lt;/code&gt;, and the value of &lt;code&gt;NextMarker&lt;/code&gt; is the hosted zone ID of the first hosted zone that Route 53 will return if you submit another request. (optional)
     * @param delegationsetid If you&#39;re using reusable delegation sets and you want to list all of the hosted zones that are associated with a reusable delegation set, specify the ID of that reusable delegation set.  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostedZonesCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, String delegationsetid, String maxItems, String marker2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (maxitems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxitems", maxitems));
        }

        if (delegationsetid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delegationsetid", delegationsetid));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (marker2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHostedZonesValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, String delegationsetid, String maxItems, String marker2, final ApiCallback _callback) throws ApiException {
        return listHostedZonesCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxitems, delegationsetid, maxItems, marker2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves a list of the public and private hosted zones that are associated with the current Amazon Web Services account. The response includes a &lt;code&gt;HostedZones&lt;/code&gt; child element for each hosted zone.&lt;/p&gt; &lt;p&gt;Amazon Route 53 returns a maximum of 100 items in each response. If you have a lot of hosted zones, you can use the &lt;code&gt;maxitems&lt;/code&gt; parameter to list them in groups of up to 100.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more hosted zones. To get more hosted zones, submit another &lt;code&gt;ListHostedZones&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the previous response, which is the ID of the first hosted zone that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more hosted zones to get.&lt;/p&gt; (optional)
     * @param maxitems (Optional) The maximum number of hosted zones that you want Amazon Route 53 to return. If you have more than &lt;code&gt;maxitems&lt;/code&gt; hosted zones, the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is &lt;code&gt;true&lt;/code&gt;, and the value of &lt;code&gt;NextMarker&lt;/code&gt; is the hosted zone ID of the first hosted zone that Route 53 will return if you submit another request. (optional)
     * @param delegationsetid If you&#39;re using reusable delegation sets and you want to list all of the hosted zones that are associated with a reusable delegation set, specify the ID of that reusable delegation set.  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker2 Pagination token (optional)
     * @return ListHostedZonesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
     </table>
     */
    public ListHostedZonesResponse listHostedZones(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, String delegationsetid, String maxItems, String marker2) throws ApiException {
        ApiResponse<ListHostedZonesResponse> localVarResp = listHostedZonesWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxitems, delegationsetid, maxItems, marker2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves a list of the public and private hosted zones that are associated with the current Amazon Web Services account. The response includes a &lt;code&gt;HostedZones&lt;/code&gt; child element for each hosted zone.&lt;/p&gt; &lt;p&gt;Amazon Route 53 returns a maximum of 100 items in each response. If you have a lot of hosted zones, you can use the &lt;code&gt;maxitems&lt;/code&gt; parameter to list them in groups of up to 100.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more hosted zones. To get more hosted zones, submit another &lt;code&gt;ListHostedZones&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the previous response, which is the ID of the first hosted zone that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more hosted zones to get.&lt;/p&gt; (optional)
     * @param maxitems (Optional) The maximum number of hosted zones that you want Amazon Route 53 to return. If you have more than &lt;code&gt;maxitems&lt;/code&gt; hosted zones, the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is &lt;code&gt;true&lt;/code&gt;, and the value of &lt;code&gt;NextMarker&lt;/code&gt; is the hosted zone ID of the first hosted zone that Route 53 will return if you submit another request. (optional)
     * @param delegationsetid If you&#39;re using reusable delegation sets and you want to list all of the hosted zones that are associated with a reusable delegation set, specify the ID of that reusable delegation set.  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker2 Pagination token (optional)
     * @return ApiResponse&lt;ListHostedZonesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHostedZonesResponse> listHostedZonesWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, String delegationsetid, String maxItems, String marker2) throws ApiException {
        okhttp3.Call localVarCall = listHostedZonesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxitems, delegationsetid, maxItems, marker2, null);
        Type localVarReturnType = new TypeToken<ListHostedZonesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves a list of the public and private hosted zones that are associated with the current Amazon Web Services account. The response includes a &lt;code&gt;HostedZones&lt;/code&gt; child element for each hosted zone.&lt;/p&gt; &lt;p&gt;Amazon Route 53 returns a maximum of 100 items in each response. If you have a lot of hosted zones, you can use the &lt;code&gt;maxitems&lt;/code&gt; parameter to list them in groups of up to 100.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more hosted zones. To get more hosted zones, submit another &lt;code&gt;ListHostedZones&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the previous response, which is the ID of the first hosted zone that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more hosted zones to get.&lt;/p&gt; (optional)
     * @param maxitems (Optional) The maximum number of hosted zones that you want Amazon Route 53 to return. If you have more than &lt;code&gt;maxitems&lt;/code&gt; hosted zones, the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is &lt;code&gt;true&lt;/code&gt;, and the value of &lt;code&gt;NextMarker&lt;/code&gt; is the hosted zone ID of the first hosted zone that Route 53 will return if you submit another request. (optional)
     * @param delegationsetid If you&#39;re using reusable delegation sets and you want to list all of the hosted zones that are associated with a reusable delegation set, specify the ID of that reusable delegation set.  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDelegationSet </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DelegationSetNotReusable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostedZonesAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, String delegationsetid, String maxItems, String marker2, final ApiCallback<ListHostedZonesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHostedZonesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxitems, delegationsetid, maxItems, marker2, _callback);
        Type localVarReturnType = new TypeToken<ListHostedZonesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHostedZonesByName
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dnsname (Optional) For your first request to &lt;code&gt;ListHostedZonesByName&lt;/code&gt;, include the &lt;code&gt;dnsname&lt;/code&gt; parameter only if you want to specify the name of the first hosted zone in the response. If you don&#39;t include the &lt;code&gt;dnsname&lt;/code&gt; parameter, Amazon Route 53 returns all of the hosted zones that were created by the current Amazon Web Services account, in ASCII order. For subsequent requests, include both &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters. For &lt;code&gt;dnsname&lt;/code&gt;, specify the value of &lt;code&gt;NextDNSName&lt;/code&gt; from the previous response. (optional)
     * @param hostedzoneid &lt;p&gt;(Optional) For your first request to &lt;code&gt;ListHostedZonesByName&lt;/code&gt;, do not include the &lt;code&gt;hostedzoneid&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have more hosted zones than the value of &lt;code&gt;maxitems&lt;/code&gt;, &lt;code&gt;ListHostedZonesByName&lt;/code&gt; returns only the first &lt;code&gt;maxitems&lt;/code&gt; hosted zones. To get the next group of &lt;code&gt;maxitems&lt;/code&gt; hosted zones, submit another request to &lt;code&gt;ListHostedZonesByName&lt;/code&gt; and include both &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters. For the value of &lt;code&gt;hostedzoneid&lt;/code&gt;, specify the value of the &lt;code&gt;NextHostedZoneId&lt;/code&gt; element from the previous response.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of hosted zones to be included in the response body for this request. If you have more than &lt;code&gt;maxitems&lt;/code&gt; hosted zones, then the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is true, and the values of &lt;code&gt;NextDNSName&lt;/code&gt; and &lt;code&gt;NextHostedZoneId&lt;/code&gt; specify the first hosted zone in the next group of &lt;code&gt;maxitems&lt;/code&gt; hosted zones.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDomainName </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostedZonesByNameCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dnsname, String hostedzoneid, String maxitems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzonesbyname";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dnsname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dnsname", dnsname));
        }

        if (hostedzoneid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hostedzoneid", hostedzoneid));
        }

        if (maxitems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxitems", maxitems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHostedZonesByNameValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dnsname, String hostedzoneid, String maxitems, final ApiCallback _callback) throws ApiException {
        return listHostedZonesByNameCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dnsname, hostedzoneid, maxitems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves a list of your hosted zones in lexicographic order. The response includes a &lt;code&gt;HostedZones&lt;/code&gt; child element for each hosted zone created by the current Amazon Web Services account. &lt;/p&gt; &lt;p&gt; &lt;code&gt;ListHostedZonesByName&lt;/code&gt; sorts hosted zones by name with the labels reversed. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;com.example.www.&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Note the trailing dot, which can change the sort order in some circumstances.&lt;/p&gt; &lt;p&gt;If the domain name includes escape characters or Punycode, &lt;code&gt;ListHostedZonesByName&lt;/code&gt; alphabetizes the domain name using the escaped or Punycoded value, which is the format that Amazon Route 53 saves in its database. For example, to create a hosted zone for exämple.com, you specify ex\\344mple.com for the domain name. &lt;code&gt;ListHostedZonesByName&lt;/code&gt; alphabetizes it as:&lt;/p&gt; &lt;p&gt; &lt;code&gt;com.ex\\344mple.&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The labels are reversed and alphabetized using the escaped value. For more information about valid domain name formats, including internationalized domain names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html\&quot;&gt;DNS Domain Name Format&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Route 53 returns up to 100 items in each response. If you have a lot of hosted zones, use the &lt;code&gt;MaxItems&lt;/code&gt; parameter to list them in groups of up to 100. The response includes values that help navigate from one group of &lt;code&gt;MaxItems&lt;/code&gt; hosted zones to the next:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;DNSName&lt;/code&gt; and &lt;code&gt;HostedZoneId&lt;/code&gt; elements in the response contain the values, if any, specified for the &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters in the request that produced the current response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;MaxItems&lt;/code&gt; element in the response contains the value, if any, that you specified for the &lt;code&gt;maxitems&lt;/code&gt; parameter in the request that produced the current response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is true, there are more hosted zones associated with the current Amazon Web Services account. &lt;/p&gt; &lt;p&gt;If &lt;code&gt;IsTruncated&lt;/code&gt; is false, this response includes the last hosted zone that is associated with the current account. The &lt;code&gt;NextDNSName&lt;/code&gt; element and &lt;code&gt;NextHostedZoneId&lt;/code&gt; elements are omitted from the response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;NextDNSName&lt;/code&gt; and &lt;code&gt;NextHostedZoneId&lt;/code&gt; elements in the response contain the domain name and the hosted zone ID of the next hosted zone that is associated with the current Amazon Web Services account. If you want to list more hosted zones, make another call to &lt;code&gt;ListHostedZonesByName&lt;/code&gt;, and specify the value of &lt;code&gt;NextDNSName&lt;/code&gt; and &lt;code&gt;NextHostedZoneId&lt;/code&gt; in the &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters, respectively.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dnsname (Optional) For your first request to &lt;code&gt;ListHostedZonesByName&lt;/code&gt;, include the &lt;code&gt;dnsname&lt;/code&gt; parameter only if you want to specify the name of the first hosted zone in the response. If you don&#39;t include the &lt;code&gt;dnsname&lt;/code&gt; parameter, Amazon Route 53 returns all of the hosted zones that were created by the current Amazon Web Services account, in ASCII order. For subsequent requests, include both &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters. For &lt;code&gt;dnsname&lt;/code&gt;, specify the value of &lt;code&gt;NextDNSName&lt;/code&gt; from the previous response. (optional)
     * @param hostedzoneid &lt;p&gt;(Optional) For your first request to &lt;code&gt;ListHostedZonesByName&lt;/code&gt;, do not include the &lt;code&gt;hostedzoneid&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have more hosted zones than the value of &lt;code&gt;maxitems&lt;/code&gt;, &lt;code&gt;ListHostedZonesByName&lt;/code&gt; returns only the first &lt;code&gt;maxitems&lt;/code&gt; hosted zones. To get the next group of &lt;code&gt;maxitems&lt;/code&gt; hosted zones, submit another request to &lt;code&gt;ListHostedZonesByName&lt;/code&gt; and include both &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters. For the value of &lt;code&gt;hostedzoneid&lt;/code&gt;, specify the value of the &lt;code&gt;NextHostedZoneId&lt;/code&gt; element from the previous response.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of hosted zones to be included in the response body for this request. If you have more than &lt;code&gt;maxitems&lt;/code&gt; hosted zones, then the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is true, and the values of &lt;code&gt;NextDNSName&lt;/code&gt; and &lt;code&gt;NextHostedZoneId&lt;/code&gt; specify the first hosted zone in the next group of &lt;code&gt;maxitems&lt;/code&gt; hosted zones.  (optional)
     * @return ListHostedZonesByNameResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDomainName </td><td>  -  </td></tr>
     </table>
     */
    public ListHostedZonesByNameResponse listHostedZonesByName(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dnsname, String hostedzoneid, String maxitems) throws ApiException {
        ApiResponse<ListHostedZonesByNameResponse> localVarResp = listHostedZonesByNameWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dnsname, hostedzoneid, maxitems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves a list of your hosted zones in lexicographic order. The response includes a &lt;code&gt;HostedZones&lt;/code&gt; child element for each hosted zone created by the current Amazon Web Services account. &lt;/p&gt; &lt;p&gt; &lt;code&gt;ListHostedZonesByName&lt;/code&gt; sorts hosted zones by name with the labels reversed. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;com.example.www.&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Note the trailing dot, which can change the sort order in some circumstances.&lt;/p&gt; &lt;p&gt;If the domain name includes escape characters or Punycode, &lt;code&gt;ListHostedZonesByName&lt;/code&gt; alphabetizes the domain name using the escaped or Punycoded value, which is the format that Amazon Route 53 saves in its database. For example, to create a hosted zone for exämple.com, you specify ex\\344mple.com for the domain name. &lt;code&gt;ListHostedZonesByName&lt;/code&gt; alphabetizes it as:&lt;/p&gt; &lt;p&gt; &lt;code&gt;com.ex\\344mple.&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The labels are reversed and alphabetized using the escaped value. For more information about valid domain name formats, including internationalized domain names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html\&quot;&gt;DNS Domain Name Format&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Route 53 returns up to 100 items in each response. If you have a lot of hosted zones, use the &lt;code&gt;MaxItems&lt;/code&gt; parameter to list them in groups of up to 100. The response includes values that help navigate from one group of &lt;code&gt;MaxItems&lt;/code&gt; hosted zones to the next:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;DNSName&lt;/code&gt; and &lt;code&gt;HostedZoneId&lt;/code&gt; elements in the response contain the values, if any, specified for the &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters in the request that produced the current response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;MaxItems&lt;/code&gt; element in the response contains the value, if any, that you specified for the &lt;code&gt;maxitems&lt;/code&gt; parameter in the request that produced the current response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is true, there are more hosted zones associated with the current Amazon Web Services account. &lt;/p&gt; &lt;p&gt;If &lt;code&gt;IsTruncated&lt;/code&gt; is false, this response includes the last hosted zone that is associated with the current account. The &lt;code&gt;NextDNSName&lt;/code&gt; element and &lt;code&gt;NextHostedZoneId&lt;/code&gt; elements are omitted from the response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;NextDNSName&lt;/code&gt; and &lt;code&gt;NextHostedZoneId&lt;/code&gt; elements in the response contain the domain name and the hosted zone ID of the next hosted zone that is associated with the current Amazon Web Services account. If you want to list more hosted zones, make another call to &lt;code&gt;ListHostedZonesByName&lt;/code&gt;, and specify the value of &lt;code&gt;NextDNSName&lt;/code&gt; and &lt;code&gt;NextHostedZoneId&lt;/code&gt; in the &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters, respectively.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dnsname (Optional) For your first request to &lt;code&gt;ListHostedZonesByName&lt;/code&gt;, include the &lt;code&gt;dnsname&lt;/code&gt; parameter only if you want to specify the name of the first hosted zone in the response. If you don&#39;t include the &lt;code&gt;dnsname&lt;/code&gt; parameter, Amazon Route 53 returns all of the hosted zones that were created by the current Amazon Web Services account, in ASCII order. For subsequent requests, include both &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters. For &lt;code&gt;dnsname&lt;/code&gt;, specify the value of &lt;code&gt;NextDNSName&lt;/code&gt; from the previous response. (optional)
     * @param hostedzoneid &lt;p&gt;(Optional) For your first request to &lt;code&gt;ListHostedZonesByName&lt;/code&gt;, do not include the &lt;code&gt;hostedzoneid&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have more hosted zones than the value of &lt;code&gt;maxitems&lt;/code&gt;, &lt;code&gt;ListHostedZonesByName&lt;/code&gt; returns only the first &lt;code&gt;maxitems&lt;/code&gt; hosted zones. To get the next group of &lt;code&gt;maxitems&lt;/code&gt; hosted zones, submit another request to &lt;code&gt;ListHostedZonesByName&lt;/code&gt; and include both &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters. For the value of &lt;code&gt;hostedzoneid&lt;/code&gt;, specify the value of the &lt;code&gt;NextHostedZoneId&lt;/code&gt; element from the previous response.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of hosted zones to be included in the response body for this request. If you have more than &lt;code&gt;maxitems&lt;/code&gt; hosted zones, then the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is true, and the values of &lt;code&gt;NextDNSName&lt;/code&gt; and &lt;code&gt;NextHostedZoneId&lt;/code&gt; specify the first hosted zone in the next group of &lt;code&gt;maxitems&lt;/code&gt; hosted zones.  (optional)
     * @return ApiResponse&lt;ListHostedZonesByNameResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDomainName </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHostedZonesByNameResponse> listHostedZonesByNameWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dnsname, String hostedzoneid, String maxitems) throws ApiException {
        okhttp3.Call localVarCall = listHostedZonesByNameValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dnsname, hostedzoneid, maxitems, null);
        Type localVarReturnType = new TypeToken<ListHostedZonesByNameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves a list of your hosted zones in lexicographic order. The response includes a &lt;code&gt;HostedZones&lt;/code&gt; child element for each hosted zone created by the current Amazon Web Services account. &lt;/p&gt; &lt;p&gt; &lt;code&gt;ListHostedZonesByName&lt;/code&gt; sorts hosted zones by name with the labels reversed. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;com.example.www.&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Note the trailing dot, which can change the sort order in some circumstances.&lt;/p&gt; &lt;p&gt;If the domain name includes escape characters or Punycode, &lt;code&gt;ListHostedZonesByName&lt;/code&gt; alphabetizes the domain name using the escaped or Punycoded value, which is the format that Amazon Route 53 saves in its database. For example, to create a hosted zone for exämple.com, you specify ex\\344mple.com for the domain name. &lt;code&gt;ListHostedZonesByName&lt;/code&gt; alphabetizes it as:&lt;/p&gt; &lt;p&gt; &lt;code&gt;com.ex\\344mple.&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The labels are reversed and alphabetized using the escaped value. For more information about valid domain name formats, including internationalized domain names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html\&quot;&gt;DNS Domain Name Format&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Route 53 returns up to 100 items in each response. If you have a lot of hosted zones, use the &lt;code&gt;MaxItems&lt;/code&gt; parameter to list them in groups of up to 100. The response includes values that help navigate from one group of &lt;code&gt;MaxItems&lt;/code&gt; hosted zones to the next:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;DNSName&lt;/code&gt; and &lt;code&gt;HostedZoneId&lt;/code&gt; elements in the response contain the values, if any, specified for the &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters in the request that produced the current response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;MaxItems&lt;/code&gt; element in the response contains the value, if any, that you specified for the &lt;code&gt;maxitems&lt;/code&gt; parameter in the request that produced the current response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is true, there are more hosted zones associated with the current Amazon Web Services account. &lt;/p&gt; &lt;p&gt;If &lt;code&gt;IsTruncated&lt;/code&gt; is false, this response includes the last hosted zone that is associated with the current account. The &lt;code&gt;NextDNSName&lt;/code&gt; element and &lt;code&gt;NextHostedZoneId&lt;/code&gt; elements are omitted from the response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;NextDNSName&lt;/code&gt; and &lt;code&gt;NextHostedZoneId&lt;/code&gt; elements in the response contain the domain name and the hosted zone ID of the next hosted zone that is associated with the current Amazon Web Services account. If you want to list more hosted zones, make another call to &lt;code&gt;ListHostedZonesByName&lt;/code&gt;, and specify the value of &lt;code&gt;NextDNSName&lt;/code&gt; and &lt;code&gt;NextHostedZoneId&lt;/code&gt; in the &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters, respectively.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dnsname (Optional) For your first request to &lt;code&gt;ListHostedZonesByName&lt;/code&gt;, include the &lt;code&gt;dnsname&lt;/code&gt; parameter only if you want to specify the name of the first hosted zone in the response. If you don&#39;t include the &lt;code&gt;dnsname&lt;/code&gt; parameter, Amazon Route 53 returns all of the hosted zones that were created by the current Amazon Web Services account, in ASCII order. For subsequent requests, include both &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters. For &lt;code&gt;dnsname&lt;/code&gt;, specify the value of &lt;code&gt;NextDNSName&lt;/code&gt; from the previous response. (optional)
     * @param hostedzoneid &lt;p&gt;(Optional) For your first request to &lt;code&gt;ListHostedZonesByName&lt;/code&gt;, do not include the &lt;code&gt;hostedzoneid&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have more hosted zones than the value of &lt;code&gt;maxitems&lt;/code&gt;, &lt;code&gt;ListHostedZonesByName&lt;/code&gt; returns only the first &lt;code&gt;maxitems&lt;/code&gt; hosted zones. To get the next group of &lt;code&gt;maxitems&lt;/code&gt; hosted zones, submit another request to &lt;code&gt;ListHostedZonesByName&lt;/code&gt; and include both &lt;code&gt;dnsname&lt;/code&gt; and &lt;code&gt;hostedzoneid&lt;/code&gt; parameters. For the value of &lt;code&gt;hostedzoneid&lt;/code&gt;, specify the value of the &lt;code&gt;NextHostedZoneId&lt;/code&gt; element from the previous response.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of hosted zones to be included in the response body for this request. If you have more than &lt;code&gt;maxitems&lt;/code&gt; hosted zones, then the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is true, and the values of &lt;code&gt;NextDNSName&lt;/code&gt; and &lt;code&gt;NextHostedZoneId&lt;/code&gt; specify the first hosted zone in the next group of &lt;code&gt;maxitems&lt;/code&gt; hosted zones.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDomainName </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostedZonesByNameAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dnsname, String hostedzoneid, String maxitems, final ApiCallback<ListHostedZonesByNameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHostedZonesByNameValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dnsname, hostedzoneid, maxitems, _callback);
        Type localVarReturnType = new TypeToken<ListHostedZonesByNameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHostedZonesByVPC
     * @param vpcid The ID of the Amazon VPC that you want to list hosted zones for. (required)
     * @param vpcregion For the Amazon VPC that you specified for &lt;code&gt;VPCId&lt;/code&gt;, the Amazon Web Services Region that you created the VPC in.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxitems (Optional) The maximum number of hosted zones that you want Amazon Route 53 to return. If the specified VPC is associated with more than &lt;code&gt;MaxItems&lt;/code&gt; hosted zones, the response includes a &lt;code&gt;NextToken&lt;/code&gt; element. &lt;code&gt;NextToken&lt;/code&gt; contains an encrypted token that identifies the first hosted zone that Route 53 will return if you submit another request. (optional)
     * @param nexttoken &lt;p&gt;If the previous response included a &lt;code&gt;NextToken&lt;/code&gt; element, the specified VPC is associated with more hosted zones. To get more hosted zones, submit another &lt;code&gt;ListHostedZonesByVPC&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;NextToken&lt;/code&gt;, specify the value of &lt;code&gt;NextToken&lt;/code&gt; from the previous response.&lt;/p&gt; &lt;p&gt;If the previous response didn&#39;t include a &lt;code&gt;NextToken&lt;/code&gt; element, there are no more hosted zones to get.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPaginationToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostedZonesByVPCCall(String vpcid, String vpcregion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxitems, String nexttoken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzonesbyvpc#vpcid&vpcregion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vpcid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vpcid", vpcid));
        }

        if (vpcregion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vpcregion", vpcregion));
        }

        if (maxitems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxitems", maxitems));
        }

        if (nexttoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nexttoken", nexttoken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHostedZonesByVPCValidateBeforeCall(String vpcid, String vpcregion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxitems, String nexttoken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vpcid' is set
        if (vpcid == null) {
            throw new ApiException("Missing the required parameter 'vpcid' when calling listHostedZonesByVPC(Async)");
        }

        // verify the required parameter 'vpcregion' is set
        if (vpcregion == null) {
            throw new ApiException("Missing the required parameter 'vpcregion' when calling listHostedZonesByVPC(Async)");
        }

        return listHostedZonesByVPCCall(vpcid, vpcregion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxitems, nexttoken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all the private hosted zones that a specified VPC is associated with, regardless of which Amazon Web Services account or Amazon Web Services service owns the hosted zones. The &lt;code&gt;HostedZoneOwner&lt;/code&gt; structure in the response contains one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;OwningAccount&lt;/code&gt; element, which contains the account number of either the current Amazon Web Services account or another Amazon Web Services account. Some services, such as Cloud Map, create hosted zones using the current account. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;OwningService&lt;/code&gt; element, which identifies the Amazon Web Services service that created and owns the hosted zone. For example, if a hosted zone was created by Amazon Elastic File System (Amazon EFS), the value of &lt;code&gt;Owner&lt;/code&gt; is &lt;code&gt;efs.amazonaws.com&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;When listing private hosted zones, the hosted zone and the Amazon VPC must belong to the same partition where the hosted zones were created. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.&lt;/p&gt; &lt;p&gt;The following are the supported partitions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws&lt;/code&gt; - Amazon Web Services Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-cn&lt;/code&gt; - China Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-us-gov&lt;/code&gt; - Amazon Web Services GovCloud (US) Region&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Access Management&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param vpcid The ID of the Amazon VPC that you want to list hosted zones for. (required)
     * @param vpcregion For the Amazon VPC that you specified for &lt;code&gt;VPCId&lt;/code&gt;, the Amazon Web Services Region that you created the VPC in.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxitems (Optional) The maximum number of hosted zones that you want Amazon Route 53 to return. If the specified VPC is associated with more than &lt;code&gt;MaxItems&lt;/code&gt; hosted zones, the response includes a &lt;code&gt;NextToken&lt;/code&gt; element. &lt;code&gt;NextToken&lt;/code&gt; contains an encrypted token that identifies the first hosted zone that Route 53 will return if you submit another request. (optional)
     * @param nexttoken &lt;p&gt;If the previous response included a &lt;code&gt;NextToken&lt;/code&gt; element, the specified VPC is associated with more hosted zones. To get more hosted zones, submit another &lt;code&gt;ListHostedZonesByVPC&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;NextToken&lt;/code&gt;, specify the value of &lt;code&gt;NextToken&lt;/code&gt; from the previous response.&lt;/p&gt; &lt;p&gt;If the previous response didn&#39;t include a &lt;code&gt;NextToken&lt;/code&gt; element, there are no more hosted zones to get.&lt;/p&gt; (optional)
     * @return ListHostedZonesByVPCResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPaginationToken </td><td>  -  </td></tr>
     </table>
     */
    public ListHostedZonesByVPCResponse listHostedZonesByVPC(String vpcid, String vpcregion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxitems, String nexttoken) throws ApiException {
        ApiResponse<ListHostedZonesByVPCResponse> localVarResp = listHostedZonesByVPCWithHttpInfo(vpcid, vpcregion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxitems, nexttoken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all the private hosted zones that a specified VPC is associated with, regardless of which Amazon Web Services account or Amazon Web Services service owns the hosted zones. The &lt;code&gt;HostedZoneOwner&lt;/code&gt; structure in the response contains one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;OwningAccount&lt;/code&gt; element, which contains the account number of either the current Amazon Web Services account or another Amazon Web Services account. Some services, such as Cloud Map, create hosted zones using the current account. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;OwningService&lt;/code&gt; element, which identifies the Amazon Web Services service that created and owns the hosted zone. For example, if a hosted zone was created by Amazon Elastic File System (Amazon EFS), the value of &lt;code&gt;Owner&lt;/code&gt; is &lt;code&gt;efs.amazonaws.com&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;When listing private hosted zones, the hosted zone and the Amazon VPC must belong to the same partition where the hosted zones were created. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.&lt;/p&gt; &lt;p&gt;The following are the supported partitions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws&lt;/code&gt; - Amazon Web Services Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-cn&lt;/code&gt; - China Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-us-gov&lt;/code&gt; - Amazon Web Services GovCloud (US) Region&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Access Management&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param vpcid The ID of the Amazon VPC that you want to list hosted zones for. (required)
     * @param vpcregion For the Amazon VPC that you specified for &lt;code&gt;VPCId&lt;/code&gt;, the Amazon Web Services Region that you created the VPC in.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxitems (Optional) The maximum number of hosted zones that you want Amazon Route 53 to return. If the specified VPC is associated with more than &lt;code&gt;MaxItems&lt;/code&gt; hosted zones, the response includes a &lt;code&gt;NextToken&lt;/code&gt; element. &lt;code&gt;NextToken&lt;/code&gt; contains an encrypted token that identifies the first hosted zone that Route 53 will return if you submit another request. (optional)
     * @param nexttoken &lt;p&gt;If the previous response included a &lt;code&gt;NextToken&lt;/code&gt; element, the specified VPC is associated with more hosted zones. To get more hosted zones, submit another &lt;code&gt;ListHostedZonesByVPC&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;NextToken&lt;/code&gt;, specify the value of &lt;code&gt;NextToken&lt;/code&gt; from the previous response.&lt;/p&gt; &lt;p&gt;If the previous response didn&#39;t include a &lt;code&gt;NextToken&lt;/code&gt; element, there are no more hosted zones to get.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ListHostedZonesByVPCResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPaginationToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHostedZonesByVPCResponse> listHostedZonesByVPCWithHttpInfo(String vpcid, String vpcregion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxitems, String nexttoken) throws ApiException {
        okhttp3.Call localVarCall = listHostedZonesByVPCValidateBeforeCall(vpcid, vpcregion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxitems, nexttoken, null);
        Type localVarReturnType = new TypeToken<ListHostedZonesByVPCResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all the private hosted zones that a specified VPC is associated with, regardless of which Amazon Web Services account or Amazon Web Services service owns the hosted zones. The &lt;code&gt;HostedZoneOwner&lt;/code&gt; structure in the response contains one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;OwningAccount&lt;/code&gt; element, which contains the account number of either the current Amazon Web Services account or another Amazon Web Services account. Some services, such as Cloud Map, create hosted zones using the current account. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;OwningService&lt;/code&gt; element, which identifies the Amazon Web Services service that created and owns the hosted zone. For example, if a hosted zone was created by Amazon Elastic File System (Amazon EFS), the value of &lt;code&gt;Owner&lt;/code&gt; is &lt;code&gt;efs.amazonaws.com&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;When listing private hosted zones, the hosted zone and the Amazon VPC must belong to the same partition where the hosted zones were created. A partition is a group of Amazon Web Services Regions. Each Amazon Web Services account is scoped to one partition.&lt;/p&gt; &lt;p&gt;The following are the supported partitions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws&lt;/code&gt; - Amazon Web Services Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-cn&lt;/code&gt; - China Regions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;aws-us-gov&lt;/code&gt; - Amazon Web Services GovCloud (US) Region&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Access Management&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param vpcid The ID of the Amazon VPC that you want to list hosted zones for. (required)
     * @param vpcregion For the Amazon VPC that you specified for &lt;code&gt;VPCId&lt;/code&gt;, the Amazon Web Services Region that you created the VPC in.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxitems (Optional) The maximum number of hosted zones that you want Amazon Route 53 to return. If the specified VPC is associated with more than &lt;code&gt;MaxItems&lt;/code&gt; hosted zones, the response includes a &lt;code&gt;NextToken&lt;/code&gt; element. &lt;code&gt;NextToken&lt;/code&gt; contains an encrypted token that identifies the first hosted zone that Route 53 will return if you submit another request. (optional)
     * @param nexttoken &lt;p&gt;If the previous response included a &lt;code&gt;NextToken&lt;/code&gt; element, the specified VPC is associated with more hosted zones. To get more hosted zones, submit another &lt;code&gt;ListHostedZonesByVPC&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;NextToken&lt;/code&gt;, specify the value of &lt;code&gt;NextToken&lt;/code&gt; from the previous response.&lt;/p&gt; &lt;p&gt;If the previous response didn&#39;t include a &lt;code&gt;NextToken&lt;/code&gt; element, there are no more hosted zones to get.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPaginationToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostedZonesByVPCAsync(String vpcid, String vpcregion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxitems, String nexttoken, final ApiCallback<ListHostedZonesByVPCResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHostedZonesByVPCValidateBeforeCall(vpcid, vpcregion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxitems, nexttoken, _callback);
        Type localVarReturnType = new TypeToken<ListHostedZonesByVPCResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listQueryLoggingConfigs
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param hostedzoneid &lt;p&gt;(Optional) If you want to list the query logging configuration that is associated with a hosted zone, specify the ID in &lt;code&gt;HostedZoneId&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If you don&#39;t specify a hosted zone ID, &lt;code&gt;ListQueryLoggingConfigs&lt;/code&gt; returns all of the configurations that are associated with the current Amazon Web Services account.&lt;/p&gt; (optional)
     * @param nexttoken &lt;p&gt;(Optional) If the current Amazon Web Services account has more than &lt;code&gt;MaxResults&lt;/code&gt; query logging configurations, use &lt;code&gt;NextToken&lt;/code&gt; to get the second and subsequent pages of results.&lt;/p&gt; &lt;p&gt;For the first &lt;code&gt;ListQueryLoggingConfigs&lt;/code&gt; request, omit this value.&lt;/p&gt; &lt;p&gt;For the second and subsequent requests, get the value of &lt;code&gt;NextToken&lt;/code&gt; from the previous response and specify that value for &lt;code&gt;NextToken&lt;/code&gt; in the request.&lt;/p&gt; (optional)
     * @param maxresults &lt;p&gt;(Optional) The maximum number of query logging configurations that you want Amazon Route 53 to return in response to the current request. If the current Amazon Web Services account has more than &lt;code&gt;MaxResults&lt;/code&gt; configurations, use the value of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListQueryLoggingConfigs.html#API_ListQueryLoggingConfigs_RequestSyntax\&quot;&gt;NextToken&lt;/a&gt; in the response to get the next page of results.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value for &lt;code&gt;MaxResults&lt;/code&gt;, Route 53 returns up to 100 configurations.&lt;/p&gt; (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPaginationToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listQueryLoggingConfigsCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String nexttoken, String maxresults, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/queryloggingconfig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hostedzoneid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hostedzoneid", hostedzoneid));
        }

        if (nexttoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nexttoken", nexttoken));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listQueryLoggingConfigsValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String nexttoken, String maxresults, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        return listQueryLoggingConfigsCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hostedzoneid, nexttoken, maxresults, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the configurations for DNS query logging that are associated with the current Amazon Web Services account or the configuration that is associated with a specified hosted zone.&lt;/p&gt; &lt;p&gt;For more information about DNS query logs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateQueryLoggingConfig.html\&quot;&gt;CreateQueryLoggingConfig&lt;/a&gt;. Additional information, including the format of DNS query logs, appears in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html\&quot;&gt;Logging DNS Queries&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param hostedzoneid &lt;p&gt;(Optional) If you want to list the query logging configuration that is associated with a hosted zone, specify the ID in &lt;code&gt;HostedZoneId&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If you don&#39;t specify a hosted zone ID, &lt;code&gt;ListQueryLoggingConfigs&lt;/code&gt; returns all of the configurations that are associated with the current Amazon Web Services account.&lt;/p&gt; (optional)
     * @param nexttoken &lt;p&gt;(Optional) If the current Amazon Web Services account has more than &lt;code&gt;MaxResults&lt;/code&gt; query logging configurations, use &lt;code&gt;NextToken&lt;/code&gt; to get the second and subsequent pages of results.&lt;/p&gt; &lt;p&gt;For the first &lt;code&gt;ListQueryLoggingConfigs&lt;/code&gt; request, omit this value.&lt;/p&gt; &lt;p&gt;For the second and subsequent requests, get the value of &lt;code&gt;NextToken&lt;/code&gt; from the previous response and specify that value for &lt;code&gt;NextToken&lt;/code&gt; in the request.&lt;/p&gt; (optional)
     * @param maxresults &lt;p&gt;(Optional) The maximum number of query logging configurations that you want Amazon Route 53 to return in response to the current request. If the current Amazon Web Services account has more than &lt;code&gt;MaxResults&lt;/code&gt; configurations, use the value of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListQueryLoggingConfigs.html#API_ListQueryLoggingConfigs_RequestSyntax\&quot;&gt;NextToken&lt;/a&gt; in the response to get the next page of results.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value for &lt;code&gt;MaxResults&lt;/code&gt;, Route 53 returns up to 100 configurations.&lt;/p&gt; (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListQueryLoggingConfigsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPaginationToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
     </table>
     */
    public ListQueryLoggingConfigsResponse listQueryLoggingConfigs(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String nexttoken, String maxresults, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListQueryLoggingConfigsResponse> localVarResp = listQueryLoggingConfigsWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hostedzoneid, nexttoken, maxresults, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the configurations for DNS query logging that are associated with the current Amazon Web Services account or the configuration that is associated with a specified hosted zone.&lt;/p&gt; &lt;p&gt;For more information about DNS query logs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateQueryLoggingConfig.html\&quot;&gt;CreateQueryLoggingConfig&lt;/a&gt;. Additional information, including the format of DNS query logs, appears in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html\&quot;&gt;Logging DNS Queries&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param hostedzoneid &lt;p&gt;(Optional) If you want to list the query logging configuration that is associated with a hosted zone, specify the ID in &lt;code&gt;HostedZoneId&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If you don&#39;t specify a hosted zone ID, &lt;code&gt;ListQueryLoggingConfigs&lt;/code&gt; returns all of the configurations that are associated with the current Amazon Web Services account.&lt;/p&gt; (optional)
     * @param nexttoken &lt;p&gt;(Optional) If the current Amazon Web Services account has more than &lt;code&gt;MaxResults&lt;/code&gt; query logging configurations, use &lt;code&gt;NextToken&lt;/code&gt; to get the second and subsequent pages of results.&lt;/p&gt; &lt;p&gt;For the first &lt;code&gt;ListQueryLoggingConfigs&lt;/code&gt; request, omit this value.&lt;/p&gt; &lt;p&gt;For the second and subsequent requests, get the value of &lt;code&gt;NextToken&lt;/code&gt; from the previous response and specify that value for &lt;code&gt;NextToken&lt;/code&gt; in the request.&lt;/p&gt; (optional)
     * @param maxresults &lt;p&gt;(Optional) The maximum number of query logging configurations that you want Amazon Route 53 to return in response to the current request. If the current Amazon Web Services account has more than &lt;code&gt;MaxResults&lt;/code&gt; configurations, use the value of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListQueryLoggingConfigs.html#API_ListQueryLoggingConfigs_RequestSyntax\&quot;&gt;NextToken&lt;/a&gt; in the response to get the next page of results.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value for &lt;code&gt;MaxResults&lt;/code&gt;, Route 53 returns up to 100 configurations.&lt;/p&gt; (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListQueryLoggingConfigsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPaginationToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListQueryLoggingConfigsResponse> listQueryLoggingConfigsWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String nexttoken, String maxresults, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listQueryLoggingConfigsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hostedzoneid, nexttoken, maxresults, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListQueryLoggingConfigsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the configurations for DNS query logging that are associated with the current Amazon Web Services account or the configuration that is associated with a specified hosted zone.&lt;/p&gt; &lt;p&gt;For more information about DNS query logs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateQueryLoggingConfig.html\&quot;&gt;CreateQueryLoggingConfig&lt;/a&gt;. Additional information, including the format of DNS query logs, appears in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html\&quot;&gt;Logging DNS Queries&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param hostedzoneid &lt;p&gt;(Optional) If you want to list the query logging configuration that is associated with a hosted zone, specify the ID in &lt;code&gt;HostedZoneId&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If you don&#39;t specify a hosted zone ID, &lt;code&gt;ListQueryLoggingConfigs&lt;/code&gt; returns all of the configurations that are associated with the current Amazon Web Services account.&lt;/p&gt; (optional)
     * @param nexttoken &lt;p&gt;(Optional) If the current Amazon Web Services account has more than &lt;code&gt;MaxResults&lt;/code&gt; query logging configurations, use &lt;code&gt;NextToken&lt;/code&gt; to get the second and subsequent pages of results.&lt;/p&gt; &lt;p&gt;For the first &lt;code&gt;ListQueryLoggingConfigs&lt;/code&gt; request, omit this value.&lt;/p&gt; &lt;p&gt;For the second and subsequent requests, get the value of &lt;code&gt;NextToken&lt;/code&gt; from the previous response and specify that value for &lt;code&gt;NextToken&lt;/code&gt; in the request.&lt;/p&gt; (optional)
     * @param maxresults &lt;p&gt;(Optional) The maximum number of query logging configurations that you want Amazon Route 53 to return in response to the current request. If the current Amazon Web Services account has more than &lt;code&gt;MaxResults&lt;/code&gt; configurations, use the value of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListQueryLoggingConfigs.html#API_ListQueryLoggingConfigs_RequestSyntax\&quot;&gt;NextToken&lt;/a&gt; in the response to get the next page of results.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value for &lt;code&gt;MaxResults&lt;/code&gt;, Route 53 returns up to 100 configurations.&lt;/p&gt; (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPaginationToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listQueryLoggingConfigsAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String nexttoken, String maxresults, String maxResults, String nextToken, final ApiCallback<ListQueryLoggingConfigsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listQueryLoggingConfigsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hostedzoneid, nexttoken, maxresults, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListQueryLoggingConfigsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listResourceRecordSets
     * @param id The ID of the hosted zone that contains the resource record sets that you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The first name in the lexicographic ordering of resource record sets that you want to list. If the specified record name doesn&#39;t exist, the results begin with the first resource record set that has a name greater than the value of &lt;code&gt;name&lt;/code&gt;. (optional)
     * @param type &lt;p&gt;The type of resource record set to begin the record listing from.&lt;/p&gt; &lt;p&gt;Valid values for basic resource record sets: &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt; | &lt;code&gt;CAA&lt;/code&gt; | &lt;code&gt;CNAME&lt;/code&gt; | &lt;code&gt;MX&lt;/code&gt; | &lt;code&gt;NAPTR&lt;/code&gt; | &lt;code&gt;NS&lt;/code&gt; | &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SOA&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; | &lt;code&gt;SRV&lt;/code&gt; | &lt;code&gt;TXT&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Values for weighted, latency, geolocation, and failover resource record sets: &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt; | &lt;code&gt;CAA&lt;/code&gt; | &lt;code&gt;CNAME&lt;/code&gt; | &lt;code&gt;MX&lt;/code&gt; | &lt;code&gt;NAPTR&lt;/code&gt; | &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; | &lt;code&gt;SRV&lt;/code&gt; | &lt;code&gt;TXT&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Values for alias resource record sets: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;API Gateway custom regional API or edge-optimized API&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;CloudFront distribution&lt;/b&gt;: A or AAAA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Elastic Beanstalk environment that has a regionalized subdomain&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Elastic Load Balancing load balancer&lt;/b&gt;: A | AAAA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;S3 bucket&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;VPC interface VPC endpoint&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Another resource record set in this hosted zone:&lt;/b&gt; The type of the resource record set that the alias references.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Constraint: Specifying &lt;code&gt;type&lt;/code&gt; without specifying &lt;code&gt;name&lt;/code&gt; returns an &lt;code&gt;InvalidInput&lt;/code&gt; error.&lt;/p&gt; (optional)
     * @param identifier  &lt;i&gt;Resource record sets that have a routing policy other than simple:&lt;/i&gt; If results were truncated for a given DNS name and type, specify the value of &lt;code&gt;NextRecordIdentifier&lt;/code&gt; from the previous response to get the next resource record set that has the current DNS name and type. (optional)
     * @param maxitems (Optional) The maximum number of resource records sets to include in the response body for this request. If the response includes more than &lt;code&gt;maxitems&lt;/code&gt; resource record sets, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of the &lt;code&gt;NextRecordName&lt;/code&gt; and &lt;code&gt;NextRecordType&lt;/code&gt; elements in the response identify the first resource record set in the next group of &lt;code&gt;maxitems&lt;/code&gt; resource record sets. (optional)
     * @param maxItems Pagination limit (optional)
     * @param startRecordName Pagination token (optional)
     * @param startRecordType Pagination token (optional)
     * @param startRecordIdentifier Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourceRecordSetsCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, String type, String identifier, String maxitems, String maxItems, String startRecordName, String startRecordType, String startRecordIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}/rrset"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (identifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier", identifier));
        }

        if (maxitems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxitems", maxitems));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (startRecordName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRecordName", startRecordName));
        }

        if (startRecordType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRecordType", startRecordType));
        }

        if (startRecordIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartRecordIdentifier", startRecordIdentifier));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listResourceRecordSetsValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, String type, String identifier, String maxitems, String maxItems, String startRecordName, String startRecordType, String startRecordIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listResourceRecordSets(Async)");
        }

        return listResourceRecordSetsCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, type, identifier, maxitems, maxItems, startRecordName, startRecordType, startRecordIdentifier, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the resource record sets in a specified hosted zone.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ListResourceRecordSets&lt;/code&gt; returns up to 300 resource record sets at a time in ASCII order, beginning at a position specified by the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; elements.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Sort order&lt;/b&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;ListResourceRecordSets&lt;/code&gt; sorts results first by DNS name with the labels reversed, for example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;com.example.www.&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Note the trailing dot, which can change the sort order when the record name contains characters that appear before &lt;code&gt;.&lt;/code&gt; (decimal 46) in the ASCII table. These characters include the following: &lt;code&gt;! \&quot; # $ % &amp;amp; &#39; ( ) * + , -&lt;/code&gt; &lt;/p&gt; &lt;p&gt;When multiple records have the same DNS name, &lt;code&gt;ListResourceRecordSets&lt;/code&gt; sorts results by the record type.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Specifying where to start listing records&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can use the name and type elements to specify the resource record set that the list begins with:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;If you do not specify Name or Type&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The results begin with the first resource record set that the hosted zone contains.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;If you specify Name but not Type&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The results begin with the first resource record set in the list whose name is greater than or equal to &lt;code&gt;Name&lt;/code&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;If you specify Type but not Name&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Amazon Route 53 returns the &lt;code&gt;InvalidInput&lt;/code&gt; error.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;If you specify both Name and Type&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The results begin with the first resource record set in the list whose name is greater than or equal to &lt;code&gt;Name&lt;/code&gt;, and whose type is greater than or equal to &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;p&gt; &lt;b&gt;Resource record sets that are PENDING&lt;/b&gt; &lt;/p&gt; &lt;p&gt;This action returns the most current version of the records. This includes records that are &lt;code&gt;PENDING&lt;/code&gt;, and that are not yet available on all Route 53 DNS servers.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Changing resource record sets&lt;/b&gt; &lt;/p&gt; &lt;p&gt;To ensure that you get an accurate listing of the resource record sets for a hosted zone at a point in time, do not submit a &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; request while you&#39;re paging through the results of a &lt;code&gt;ListResourceRecordSets&lt;/code&gt; request. If you do, some pages may display results without the latest changes while other pages display results with the latest changes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Displaying the next page of results&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If a &lt;code&gt;ListResourceRecordSets&lt;/code&gt; command returns more than one page of results, the value of &lt;code&gt;IsTruncated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. To display the next page of results, get the values of &lt;code&gt;NextRecordName&lt;/code&gt;, &lt;code&gt;NextRecordType&lt;/code&gt;, and &lt;code&gt;NextRecordIdentifier&lt;/code&gt; (if any) from the response. Then submit another &lt;code&gt;ListResourceRecordSets&lt;/code&gt; request, and specify those values for &lt;code&gt;StartRecordName&lt;/code&gt;, &lt;code&gt;StartRecordType&lt;/code&gt;, and &lt;code&gt;StartRecordIdentifier&lt;/code&gt;.&lt;/p&gt;
     * @param id The ID of the hosted zone that contains the resource record sets that you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The first name in the lexicographic ordering of resource record sets that you want to list. If the specified record name doesn&#39;t exist, the results begin with the first resource record set that has a name greater than the value of &lt;code&gt;name&lt;/code&gt;. (optional)
     * @param type &lt;p&gt;The type of resource record set to begin the record listing from.&lt;/p&gt; &lt;p&gt;Valid values for basic resource record sets: &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt; | &lt;code&gt;CAA&lt;/code&gt; | &lt;code&gt;CNAME&lt;/code&gt; | &lt;code&gt;MX&lt;/code&gt; | &lt;code&gt;NAPTR&lt;/code&gt; | &lt;code&gt;NS&lt;/code&gt; | &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SOA&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; | &lt;code&gt;SRV&lt;/code&gt; | &lt;code&gt;TXT&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Values for weighted, latency, geolocation, and failover resource record sets: &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt; | &lt;code&gt;CAA&lt;/code&gt; | &lt;code&gt;CNAME&lt;/code&gt; | &lt;code&gt;MX&lt;/code&gt; | &lt;code&gt;NAPTR&lt;/code&gt; | &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; | &lt;code&gt;SRV&lt;/code&gt; | &lt;code&gt;TXT&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Values for alias resource record sets: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;API Gateway custom regional API or edge-optimized API&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;CloudFront distribution&lt;/b&gt;: A or AAAA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Elastic Beanstalk environment that has a regionalized subdomain&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Elastic Load Balancing load balancer&lt;/b&gt;: A | AAAA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;S3 bucket&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;VPC interface VPC endpoint&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Another resource record set in this hosted zone:&lt;/b&gt; The type of the resource record set that the alias references.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Constraint: Specifying &lt;code&gt;type&lt;/code&gt; without specifying &lt;code&gt;name&lt;/code&gt; returns an &lt;code&gt;InvalidInput&lt;/code&gt; error.&lt;/p&gt; (optional)
     * @param identifier  &lt;i&gt;Resource record sets that have a routing policy other than simple:&lt;/i&gt; If results were truncated for a given DNS name and type, specify the value of &lt;code&gt;NextRecordIdentifier&lt;/code&gt; from the previous response to get the next resource record set that has the current DNS name and type. (optional)
     * @param maxitems (Optional) The maximum number of resource records sets to include in the response body for this request. If the response includes more than &lt;code&gt;maxitems&lt;/code&gt; resource record sets, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of the &lt;code&gt;NextRecordName&lt;/code&gt; and &lt;code&gt;NextRecordType&lt;/code&gt; elements in the response identify the first resource record set in the next group of &lt;code&gt;maxitems&lt;/code&gt; resource record sets. (optional)
     * @param maxItems Pagination limit (optional)
     * @param startRecordName Pagination token (optional)
     * @param startRecordType Pagination token (optional)
     * @param startRecordIdentifier Pagination token (optional)
     * @return ListResourceRecordSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ListResourceRecordSetsResponse listResourceRecordSets(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, String type, String identifier, String maxitems, String maxItems, String startRecordName, String startRecordType, String startRecordIdentifier) throws ApiException {
        ApiResponse<ListResourceRecordSetsResponse> localVarResp = listResourceRecordSetsWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, type, identifier, maxitems, maxItems, startRecordName, startRecordType, startRecordIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the resource record sets in a specified hosted zone.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ListResourceRecordSets&lt;/code&gt; returns up to 300 resource record sets at a time in ASCII order, beginning at a position specified by the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; elements.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Sort order&lt;/b&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;ListResourceRecordSets&lt;/code&gt; sorts results first by DNS name with the labels reversed, for example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;com.example.www.&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Note the trailing dot, which can change the sort order when the record name contains characters that appear before &lt;code&gt;.&lt;/code&gt; (decimal 46) in the ASCII table. These characters include the following: &lt;code&gt;! \&quot; # $ % &amp;amp; &#39; ( ) * + , -&lt;/code&gt; &lt;/p&gt; &lt;p&gt;When multiple records have the same DNS name, &lt;code&gt;ListResourceRecordSets&lt;/code&gt; sorts results by the record type.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Specifying where to start listing records&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can use the name and type elements to specify the resource record set that the list begins with:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;If you do not specify Name or Type&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The results begin with the first resource record set that the hosted zone contains.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;If you specify Name but not Type&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The results begin with the first resource record set in the list whose name is greater than or equal to &lt;code&gt;Name&lt;/code&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;If you specify Type but not Name&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Amazon Route 53 returns the &lt;code&gt;InvalidInput&lt;/code&gt; error.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;If you specify both Name and Type&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The results begin with the first resource record set in the list whose name is greater than or equal to &lt;code&gt;Name&lt;/code&gt;, and whose type is greater than or equal to &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;p&gt; &lt;b&gt;Resource record sets that are PENDING&lt;/b&gt; &lt;/p&gt; &lt;p&gt;This action returns the most current version of the records. This includes records that are &lt;code&gt;PENDING&lt;/code&gt;, and that are not yet available on all Route 53 DNS servers.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Changing resource record sets&lt;/b&gt; &lt;/p&gt; &lt;p&gt;To ensure that you get an accurate listing of the resource record sets for a hosted zone at a point in time, do not submit a &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; request while you&#39;re paging through the results of a &lt;code&gt;ListResourceRecordSets&lt;/code&gt; request. If you do, some pages may display results without the latest changes while other pages display results with the latest changes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Displaying the next page of results&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If a &lt;code&gt;ListResourceRecordSets&lt;/code&gt; command returns more than one page of results, the value of &lt;code&gt;IsTruncated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. To display the next page of results, get the values of &lt;code&gt;NextRecordName&lt;/code&gt;, &lt;code&gt;NextRecordType&lt;/code&gt;, and &lt;code&gt;NextRecordIdentifier&lt;/code&gt; (if any) from the response. Then submit another &lt;code&gt;ListResourceRecordSets&lt;/code&gt; request, and specify those values for &lt;code&gt;StartRecordName&lt;/code&gt;, &lt;code&gt;StartRecordType&lt;/code&gt;, and &lt;code&gt;StartRecordIdentifier&lt;/code&gt;.&lt;/p&gt;
     * @param id The ID of the hosted zone that contains the resource record sets that you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The first name in the lexicographic ordering of resource record sets that you want to list. If the specified record name doesn&#39;t exist, the results begin with the first resource record set that has a name greater than the value of &lt;code&gt;name&lt;/code&gt;. (optional)
     * @param type &lt;p&gt;The type of resource record set to begin the record listing from.&lt;/p&gt; &lt;p&gt;Valid values for basic resource record sets: &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt; | &lt;code&gt;CAA&lt;/code&gt; | &lt;code&gt;CNAME&lt;/code&gt; | &lt;code&gt;MX&lt;/code&gt; | &lt;code&gt;NAPTR&lt;/code&gt; | &lt;code&gt;NS&lt;/code&gt; | &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SOA&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; | &lt;code&gt;SRV&lt;/code&gt; | &lt;code&gt;TXT&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Values for weighted, latency, geolocation, and failover resource record sets: &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt; | &lt;code&gt;CAA&lt;/code&gt; | &lt;code&gt;CNAME&lt;/code&gt; | &lt;code&gt;MX&lt;/code&gt; | &lt;code&gt;NAPTR&lt;/code&gt; | &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; | &lt;code&gt;SRV&lt;/code&gt; | &lt;code&gt;TXT&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Values for alias resource record sets: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;API Gateway custom regional API or edge-optimized API&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;CloudFront distribution&lt;/b&gt;: A or AAAA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Elastic Beanstalk environment that has a regionalized subdomain&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Elastic Load Balancing load balancer&lt;/b&gt;: A | AAAA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;S3 bucket&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;VPC interface VPC endpoint&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Another resource record set in this hosted zone:&lt;/b&gt; The type of the resource record set that the alias references.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Constraint: Specifying &lt;code&gt;type&lt;/code&gt; without specifying &lt;code&gt;name&lt;/code&gt; returns an &lt;code&gt;InvalidInput&lt;/code&gt; error.&lt;/p&gt; (optional)
     * @param identifier  &lt;i&gt;Resource record sets that have a routing policy other than simple:&lt;/i&gt; If results were truncated for a given DNS name and type, specify the value of &lt;code&gt;NextRecordIdentifier&lt;/code&gt; from the previous response to get the next resource record set that has the current DNS name and type. (optional)
     * @param maxitems (Optional) The maximum number of resource records sets to include in the response body for this request. If the response includes more than &lt;code&gt;maxitems&lt;/code&gt; resource record sets, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of the &lt;code&gt;NextRecordName&lt;/code&gt; and &lt;code&gt;NextRecordType&lt;/code&gt; elements in the response identify the first resource record set in the next group of &lt;code&gt;maxitems&lt;/code&gt; resource record sets. (optional)
     * @param maxItems Pagination limit (optional)
     * @param startRecordName Pagination token (optional)
     * @param startRecordType Pagination token (optional)
     * @param startRecordIdentifier Pagination token (optional)
     * @return ApiResponse&lt;ListResourceRecordSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResourceRecordSetsResponse> listResourceRecordSetsWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, String type, String identifier, String maxitems, String maxItems, String startRecordName, String startRecordType, String startRecordIdentifier) throws ApiException {
        okhttp3.Call localVarCall = listResourceRecordSetsValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, type, identifier, maxitems, maxItems, startRecordName, startRecordType, startRecordIdentifier, null);
        Type localVarReturnType = new TypeToken<ListResourceRecordSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the resource record sets in a specified hosted zone.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ListResourceRecordSets&lt;/code&gt; returns up to 300 resource record sets at a time in ASCII order, beginning at a position specified by the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; elements.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Sort order&lt;/b&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;ListResourceRecordSets&lt;/code&gt; sorts results first by DNS name with the labels reversed, for example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;com.example.www.&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Note the trailing dot, which can change the sort order when the record name contains characters that appear before &lt;code&gt;.&lt;/code&gt; (decimal 46) in the ASCII table. These characters include the following: &lt;code&gt;! \&quot; # $ % &amp;amp; &#39; ( ) * + , -&lt;/code&gt; &lt;/p&gt; &lt;p&gt;When multiple records have the same DNS name, &lt;code&gt;ListResourceRecordSets&lt;/code&gt; sorts results by the record type.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Specifying where to start listing records&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can use the name and type elements to specify the resource record set that the list begins with:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;If you do not specify Name or Type&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The results begin with the first resource record set that the hosted zone contains.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;If you specify Name but not Type&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The results begin with the first resource record set in the list whose name is greater than or equal to &lt;code&gt;Name&lt;/code&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;If you specify Type but not Name&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Amazon Route 53 returns the &lt;code&gt;InvalidInput&lt;/code&gt; error.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;If you specify both Name and Type&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The results begin with the first resource record set in the list whose name is greater than or equal to &lt;code&gt;Name&lt;/code&gt;, and whose type is greater than or equal to &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;p&gt; &lt;b&gt;Resource record sets that are PENDING&lt;/b&gt; &lt;/p&gt; &lt;p&gt;This action returns the most current version of the records. This includes records that are &lt;code&gt;PENDING&lt;/code&gt;, and that are not yet available on all Route 53 DNS servers.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Changing resource record sets&lt;/b&gt; &lt;/p&gt; &lt;p&gt;To ensure that you get an accurate listing of the resource record sets for a hosted zone at a point in time, do not submit a &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; request while you&#39;re paging through the results of a &lt;code&gt;ListResourceRecordSets&lt;/code&gt; request. If you do, some pages may display results without the latest changes while other pages display results with the latest changes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Displaying the next page of results&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If a &lt;code&gt;ListResourceRecordSets&lt;/code&gt; command returns more than one page of results, the value of &lt;code&gt;IsTruncated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. To display the next page of results, get the values of &lt;code&gt;NextRecordName&lt;/code&gt;, &lt;code&gt;NextRecordType&lt;/code&gt;, and &lt;code&gt;NextRecordIdentifier&lt;/code&gt; (if any) from the response. Then submit another &lt;code&gt;ListResourceRecordSets&lt;/code&gt; request, and specify those values for &lt;code&gt;StartRecordName&lt;/code&gt;, &lt;code&gt;StartRecordType&lt;/code&gt;, and &lt;code&gt;StartRecordIdentifier&lt;/code&gt;.&lt;/p&gt;
     * @param id The ID of the hosted zone that contains the resource record sets that you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The first name in the lexicographic ordering of resource record sets that you want to list. If the specified record name doesn&#39;t exist, the results begin with the first resource record set that has a name greater than the value of &lt;code&gt;name&lt;/code&gt;. (optional)
     * @param type &lt;p&gt;The type of resource record set to begin the record listing from.&lt;/p&gt; &lt;p&gt;Valid values for basic resource record sets: &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt; | &lt;code&gt;CAA&lt;/code&gt; | &lt;code&gt;CNAME&lt;/code&gt; | &lt;code&gt;MX&lt;/code&gt; | &lt;code&gt;NAPTR&lt;/code&gt; | &lt;code&gt;NS&lt;/code&gt; | &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SOA&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; | &lt;code&gt;SRV&lt;/code&gt; | &lt;code&gt;TXT&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Values for weighted, latency, geolocation, and failover resource record sets: &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt; | &lt;code&gt;CAA&lt;/code&gt; | &lt;code&gt;CNAME&lt;/code&gt; | &lt;code&gt;MX&lt;/code&gt; | &lt;code&gt;NAPTR&lt;/code&gt; | &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; | &lt;code&gt;SRV&lt;/code&gt; | &lt;code&gt;TXT&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Values for alias resource record sets: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;API Gateway custom regional API or edge-optimized API&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;CloudFront distribution&lt;/b&gt;: A or AAAA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Elastic Beanstalk environment that has a regionalized subdomain&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Elastic Load Balancing load balancer&lt;/b&gt;: A | AAAA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;S3 bucket&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;VPC interface VPC endpoint&lt;/b&gt;: A&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Another resource record set in this hosted zone:&lt;/b&gt; The type of the resource record set that the alias references.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Constraint: Specifying &lt;code&gt;type&lt;/code&gt; without specifying &lt;code&gt;name&lt;/code&gt; returns an &lt;code&gt;InvalidInput&lt;/code&gt; error.&lt;/p&gt; (optional)
     * @param identifier  &lt;i&gt;Resource record sets that have a routing policy other than simple:&lt;/i&gt; If results were truncated for a given DNS name and type, specify the value of &lt;code&gt;NextRecordIdentifier&lt;/code&gt; from the previous response to get the next resource record set that has the current DNS name and type. (optional)
     * @param maxitems (Optional) The maximum number of resource records sets to include in the response body for this request. If the response includes more than &lt;code&gt;maxitems&lt;/code&gt; resource record sets, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of the &lt;code&gt;NextRecordName&lt;/code&gt; and &lt;code&gt;NextRecordType&lt;/code&gt; elements in the response identify the first resource record set in the next group of &lt;code&gt;maxitems&lt;/code&gt; resource record sets. (optional)
     * @param maxItems Pagination limit (optional)
     * @param startRecordName Pagination token (optional)
     * @param startRecordType Pagination token (optional)
     * @param startRecordIdentifier Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourceRecordSetsAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, String type, String identifier, String maxitems, String maxItems, String startRecordName, String startRecordType, String startRecordIdentifier, final ApiCallback<ListResourceRecordSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listResourceRecordSetsValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, type, identifier, maxitems, maxItems, startRecordName, startRecordType, startRecordIdentifier, _callback);
        Type localVarReturnType = new TypeToken<ListResourceRecordSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listReusableDelegationSets
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more reusable delegation sets. To get another group, submit another &lt;code&gt;ListReusableDelegationSets&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the previous response, which is the ID of the first reusable delegation set that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more reusable delegation sets to get.&lt;/p&gt; (optional)
     * @param maxitems The number of reusable delegation sets that you want Amazon Route 53 to return in the response to this request. If you specify a value greater than 100, Route 53 returns only the first 100 reusable delegation sets. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listReusableDelegationSetsCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/delegationset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (maxitems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxitems", maxitems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listReusableDelegationSetsValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, final ApiCallback _callback) throws ApiException {
        return listReusableDelegationSetsCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxitems, _callback);

    }

    /**
     * 
     * Retrieves a list of the reusable delegation sets that are associated with the current Amazon Web Services account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more reusable delegation sets. To get another group, submit another &lt;code&gt;ListReusableDelegationSets&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the previous response, which is the ID of the first reusable delegation set that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more reusable delegation sets to get.&lt;/p&gt; (optional)
     * @param maxitems The number of reusable delegation sets that you want Amazon Route 53 to return in the response to this request. If you specify a value greater than 100, Route 53 returns only the first 100 reusable delegation sets. (optional)
     * @return ListReusableDelegationSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ListReusableDelegationSetsResponse listReusableDelegationSets(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems) throws ApiException {
        ApiResponse<ListReusableDelegationSetsResponse> localVarResp = listReusableDelegationSetsWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxitems);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a list of the reusable delegation sets that are associated with the current Amazon Web Services account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more reusable delegation sets. To get another group, submit another &lt;code&gt;ListReusableDelegationSets&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the previous response, which is the ID of the first reusable delegation set that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more reusable delegation sets to get.&lt;/p&gt; (optional)
     * @param maxitems The number of reusable delegation sets that you want Amazon Route 53 to return in the response to this request. If you specify a value greater than 100, Route 53 returns only the first 100 reusable delegation sets. (optional)
     * @return ApiResponse&lt;ListReusableDelegationSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListReusableDelegationSetsResponse> listReusableDelegationSetsWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems) throws ApiException {
        okhttp3.Call localVarCall = listReusableDelegationSetsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxitems, null);
        Type localVarReturnType = new TypeToken<ListReusableDelegationSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a list of the reusable delegation sets that are associated with the current Amazon Web Services account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more reusable delegation sets. To get another group, submit another &lt;code&gt;ListReusableDelegationSets&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the previous response, which is the ID of the first reusable delegation set that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more reusable delegation sets to get.&lt;/p&gt; (optional)
     * @param maxitems The number of reusable delegation sets that you want Amazon Route 53 to return in the response to this request. If you specify a value greater than 100, Route 53 returns only the first 100 reusable delegation sets. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listReusableDelegationSetsAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxitems, final ApiCallback<ListReusableDelegationSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listReusableDelegationSetsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxitems, _callback);
        Type localVarReturnType = new TypeToken<ListReusableDelegationSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param resourceType &lt;p&gt;The type of the resource.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The resource type for health checks is &lt;code&gt;healthcheck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The resource type for hosted zones is &lt;code&gt;hostedzone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param resourceId The ID of the resource for which you want to retrieve tags. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String resourceType, String resourceId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/tags/{ResourceType}/{ResourceId}"
            .replace("{" + "ResourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "ResourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String resourceType, String resourceId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling listTagsForResource(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(resourceType, resourceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists tags for one health check or hosted zone. &lt;/p&gt; &lt;p&gt;For information about using tags for cost allocation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param resourceType &lt;p&gt;The type of the resource.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The resource type for health checks is &lt;code&gt;healthcheck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The resource type for hosted zones is &lt;code&gt;hostedzone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param resourceId The ID of the resource for which you want to retrieve tags. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse listTagsForResource(String resourceType, String resourceId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(resourceType, resourceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists tags for one health check or hosted zone. &lt;/p&gt; &lt;p&gt;For information about using tags for cost allocation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param resourceType &lt;p&gt;The type of the resource.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The resource type for health checks is &lt;code&gt;healthcheck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The resource type for hosted zones is &lt;code&gt;hostedzone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param resourceId The ID of the resource for which you want to retrieve tags. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(String resourceType, String resourceId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(resourceType, resourceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists tags for one health check or hosted zone. &lt;/p&gt; &lt;p&gt;For information about using tags for cost allocation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param resourceType &lt;p&gt;The type of the resource.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The resource type for health checks is &lt;code&gt;healthcheck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The resource type for hosted zones is &lt;code&gt;hostedzone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param resourceId The ID of the resource for which you want to retrieve tags. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String resourceType, String resourceId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(resourceType, resourceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResources
     * @param resourceType &lt;p&gt;The type of the resources.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The resource type for health checks is &lt;code&gt;healthcheck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The resource type for hosted zones is &lt;code&gt;hostedzone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param listTagsForResourcesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourcesCall(String resourceType, ListTagsForResourcesRequest listTagsForResourcesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourcesRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/tags/{ResourceType}"
            .replace("{" + "ResourceType" + "}", localVarApiClient.escapeString(resourceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourcesValidateBeforeCall(String resourceType, ListTagsForResourcesRequest listTagsForResourcesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling listTagsForResources(Async)");
        }

        // verify the required parameter 'listTagsForResourcesRequest' is set
        if (listTagsForResourcesRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsForResourcesRequest' when calling listTagsForResources(Async)");
        }

        return listTagsForResourcesCall(resourceType, listTagsForResourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists tags for up to 10 health checks or hosted zones.&lt;/p&gt; &lt;p&gt;For information about using tags for cost allocation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param resourceType &lt;p&gt;The type of the resources.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The resource type for health checks is &lt;code&gt;healthcheck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The resource type for hosted zones is &lt;code&gt;hostedzone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param listTagsForResourcesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourcesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourcesResponse listTagsForResources(String resourceType, ListTagsForResourcesRequest listTagsForResourcesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourcesResponse> localVarResp = listTagsForResourcesWithHttpInfo(resourceType, listTagsForResourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists tags for up to 10 health checks or hosted zones.&lt;/p&gt; &lt;p&gt;For information about using tags for cost allocation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param resourceType &lt;p&gt;The type of the resources.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The resource type for health checks is &lt;code&gt;healthcheck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The resource type for hosted zones is &lt;code&gt;hostedzone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param listTagsForResourcesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourcesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourcesResponse> listTagsForResourcesWithHttpInfo(String resourceType, ListTagsForResourcesRequest listTagsForResourcesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourcesValidateBeforeCall(resourceType, listTagsForResourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourcesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists tags for up to 10 health checks or hosted zones.&lt;/p&gt; &lt;p&gt;For information about using tags for cost allocation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param resourceType &lt;p&gt;The type of the resources.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The resource type for health checks is &lt;code&gt;healthcheck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The resource type for hosted zones is &lt;code&gt;hostedzone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param listTagsForResourcesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourcesAsync(String resourceType, ListTagsForResourcesRequest listTagsForResourcesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourcesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourcesValidateBeforeCall(resourceType, listTagsForResourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourcesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTrafficPolicies
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficpolicyid &lt;p&gt;(Conditional) For your first request to &lt;code&gt;ListTrafficPolicies&lt;/code&gt;, don&#39;t include the &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have more traffic policies than the value of &lt;code&gt;MaxItems&lt;/code&gt;, &lt;code&gt;ListTrafficPolicies&lt;/code&gt; returns only the first &lt;code&gt;MaxItems&lt;/code&gt; traffic policies. To get the next group of policies, submit another request to &lt;code&gt;ListTrafficPolicies&lt;/code&gt;. For the value of &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt; that was returned in the previous response.&lt;/p&gt; (optional)
     * @param maxitems (Optional) The maximum number of traffic policies that you want Amazon Route 53 to return in response to this request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policies, the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is &lt;code&gt;true&lt;/code&gt;, and the value of &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt; is the ID of the first traffic policy that Route 53 will return if you submit another request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrafficPoliciesCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyid, String maxitems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trafficpolicyid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trafficpolicyid", trafficpolicyid));
        }

        if (maxitems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxitems", maxitems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrafficPoliciesValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyid, String maxitems, final ApiCallback _callback) throws ApiException {
        return listTrafficPoliciesCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficpolicyid, maxitems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the latest version for every traffic policy that is associated with the current Amazon Web Services account. Policies are listed in the order that they were created in. &lt;/p&gt; &lt;p&gt;For information about how of deleting a traffic policy affects the response from &lt;code&gt;ListTrafficPolicies&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeleteTrafficPolicy.html\&quot;&gt;DeleteTrafficPolicy&lt;/a&gt;. &lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficpolicyid &lt;p&gt;(Conditional) For your first request to &lt;code&gt;ListTrafficPolicies&lt;/code&gt;, don&#39;t include the &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have more traffic policies than the value of &lt;code&gt;MaxItems&lt;/code&gt;, &lt;code&gt;ListTrafficPolicies&lt;/code&gt; returns only the first &lt;code&gt;MaxItems&lt;/code&gt; traffic policies. To get the next group of policies, submit another request to &lt;code&gt;ListTrafficPolicies&lt;/code&gt;. For the value of &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt; that was returned in the previous response.&lt;/p&gt; (optional)
     * @param maxitems (Optional) The maximum number of traffic policies that you want Amazon Route 53 to return in response to this request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policies, the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is &lt;code&gt;true&lt;/code&gt;, and the value of &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt; is the ID of the first traffic policy that Route 53 will return if you submit another request. (optional)
     * @return ListTrafficPoliciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ListTrafficPoliciesResponse listTrafficPolicies(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyid, String maxitems) throws ApiException {
        ApiResponse<ListTrafficPoliciesResponse> localVarResp = listTrafficPoliciesWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficpolicyid, maxitems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the latest version for every traffic policy that is associated with the current Amazon Web Services account. Policies are listed in the order that they were created in. &lt;/p&gt; &lt;p&gt;For information about how of deleting a traffic policy affects the response from &lt;code&gt;ListTrafficPolicies&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeleteTrafficPolicy.html\&quot;&gt;DeleteTrafficPolicy&lt;/a&gt;. &lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficpolicyid &lt;p&gt;(Conditional) For your first request to &lt;code&gt;ListTrafficPolicies&lt;/code&gt;, don&#39;t include the &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have more traffic policies than the value of &lt;code&gt;MaxItems&lt;/code&gt;, &lt;code&gt;ListTrafficPolicies&lt;/code&gt; returns only the first &lt;code&gt;MaxItems&lt;/code&gt; traffic policies. To get the next group of policies, submit another request to &lt;code&gt;ListTrafficPolicies&lt;/code&gt;. For the value of &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt; that was returned in the previous response.&lt;/p&gt; (optional)
     * @param maxitems (Optional) The maximum number of traffic policies that you want Amazon Route 53 to return in response to this request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policies, the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is &lt;code&gt;true&lt;/code&gt;, and the value of &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt; is the ID of the first traffic policy that Route 53 will return if you submit another request. (optional)
     * @return ApiResponse&lt;ListTrafficPoliciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTrafficPoliciesResponse> listTrafficPoliciesWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyid, String maxitems) throws ApiException {
        okhttp3.Call localVarCall = listTrafficPoliciesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficpolicyid, maxitems, null);
        Type localVarReturnType = new TypeToken<ListTrafficPoliciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the latest version for every traffic policy that is associated with the current Amazon Web Services account. Policies are listed in the order that they were created in. &lt;/p&gt; &lt;p&gt;For information about how of deleting a traffic policy affects the response from &lt;code&gt;ListTrafficPolicies&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeleteTrafficPolicy.html\&quot;&gt;DeleteTrafficPolicy&lt;/a&gt;. &lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficpolicyid &lt;p&gt;(Conditional) For your first request to &lt;code&gt;ListTrafficPolicies&lt;/code&gt;, don&#39;t include the &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have more traffic policies than the value of &lt;code&gt;MaxItems&lt;/code&gt;, &lt;code&gt;ListTrafficPolicies&lt;/code&gt; returns only the first &lt;code&gt;MaxItems&lt;/code&gt; traffic policies. To get the next group of policies, submit another request to &lt;code&gt;ListTrafficPolicies&lt;/code&gt;. For the value of &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt; that was returned in the previous response.&lt;/p&gt; (optional)
     * @param maxitems (Optional) The maximum number of traffic policies that you want Amazon Route 53 to return in response to this request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policies, the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is &lt;code&gt;true&lt;/code&gt;, and the value of &lt;code&gt;TrafficPolicyIdMarker&lt;/code&gt; is the ID of the first traffic policy that Route 53 will return if you submit another request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrafficPoliciesAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyid, String maxitems, final ApiCallback<ListTrafficPoliciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrafficPoliciesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficpolicyid, maxitems, _callback);
        Type localVarReturnType = new TypeToken<ListTrafficPoliciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTrafficPolicyInstances
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param hostedzoneid &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;HostedZoneId&lt;/code&gt;, specify the value of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt; from the previous response, which is the hosted zone ID of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancename &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancename&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancetype &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancetype&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; from the previous response, which is the type of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy instances that you want Amazon Route 53 to return in response to a &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt;, &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt;, and &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; represent the first traffic policy instance in the next group of &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrafficPolicyInstancesCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicyinstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hostedzoneid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hostedzoneid", hostedzoneid));
        }

        if (trafficpolicyinstancename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trafficpolicyinstancename", trafficpolicyinstancename));
        }

        if (trafficpolicyinstancetype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trafficpolicyinstancetype", trafficpolicyinstancetype));
        }

        if (maxitems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxitems", maxitems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrafficPolicyInstancesValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems, final ApiCallback _callback) throws ApiException {
        return listTrafficPolicyInstancesCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hostedzoneid, trafficpolicyinstancename, trafficpolicyinstancetype, maxitems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the traffic policy instances that you created by using the current Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you submit an &lt;code&gt;UpdateTrafficPolicyInstance&lt;/code&gt; request, there&#39;s a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the &lt;code&gt;State&lt;/code&gt; response element.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Route 53 returns a maximum of 100 items in each response. If you have a lot of traffic policy instances, you can use the &lt;code&gt;MaxItems&lt;/code&gt; parameter to list them in groups of up to 100.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param hostedzoneid &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;HostedZoneId&lt;/code&gt;, specify the value of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt; from the previous response, which is the hosted zone ID of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancename &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancename&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancetype &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancetype&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; from the previous response, which is the type of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy instances that you want Amazon Route 53 to return in response to a &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt;, &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt;, and &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; represent the first traffic policy instance in the next group of &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances. (optional)
     * @return ListTrafficPolicyInstancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
     </table>
     */
    public ListTrafficPolicyInstancesResponse listTrafficPolicyInstances(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems) throws ApiException {
        ApiResponse<ListTrafficPolicyInstancesResponse> localVarResp = listTrafficPolicyInstancesWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hostedzoneid, trafficpolicyinstancename, trafficpolicyinstancetype, maxitems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the traffic policy instances that you created by using the current Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you submit an &lt;code&gt;UpdateTrafficPolicyInstance&lt;/code&gt; request, there&#39;s a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the &lt;code&gt;State&lt;/code&gt; response element.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Route 53 returns a maximum of 100 items in each response. If you have a lot of traffic policy instances, you can use the &lt;code&gt;MaxItems&lt;/code&gt; parameter to list them in groups of up to 100.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param hostedzoneid &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;HostedZoneId&lt;/code&gt;, specify the value of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt; from the previous response, which is the hosted zone ID of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancename &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancename&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancetype &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancetype&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; from the previous response, which is the type of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy instances that you want Amazon Route 53 to return in response to a &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt;, &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt;, and &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; represent the first traffic policy instance in the next group of &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances. (optional)
     * @return ApiResponse&lt;ListTrafficPolicyInstancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTrafficPolicyInstancesResponse> listTrafficPolicyInstancesWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems) throws ApiException {
        okhttp3.Call localVarCall = listTrafficPolicyInstancesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hostedzoneid, trafficpolicyinstancename, trafficpolicyinstancetype, maxitems, null);
        Type localVarReturnType = new TypeToken<ListTrafficPolicyInstancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the traffic policy instances that you created by using the current Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you submit an &lt;code&gt;UpdateTrafficPolicyInstance&lt;/code&gt; request, there&#39;s a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the &lt;code&gt;State&lt;/code&gt; response element.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Route 53 returns a maximum of 100 items in each response. If you have a lot of traffic policy instances, you can use the &lt;code&gt;MaxItems&lt;/code&gt; parameter to list them in groups of up to 100.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param hostedzoneid &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;HostedZoneId&lt;/code&gt;, specify the value of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt; from the previous response, which is the hosted zone ID of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancename &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancename&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancetype &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancetype&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; from the previous response, which is the type of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy instances that you want Amazon Route 53 to return in response to a &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt;, &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt;, and &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; represent the first traffic policy instance in the next group of &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrafficPolicyInstancesAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems, final ApiCallback<ListTrafficPolicyInstancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrafficPolicyInstancesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hostedzoneid, trafficpolicyinstancename, trafficpolicyinstancetype, maxitems, _callback);
        Type localVarReturnType = new TypeToken<ListTrafficPolicyInstancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTrafficPolicyInstancesByHostedZone
     * @param id The ID of the hosted zone that you want to list traffic policy instances for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficpolicyinstancename &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response is true, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancename&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancetype &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response is true, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancetype&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; from the previous response, which is the type of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy instances to be included in the response body for this request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt;, &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt;, and &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; represent the first traffic policy instance that Amazon Route 53 will return if you submit another request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrafficPolicyInstancesByHostedZoneCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicyinstances/hostedzone#id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (trafficpolicyinstancename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trafficpolicyinstancename", trafficpolicyinstancename));
        }

        if (trafficpolicyinstancetype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trafficpolicyinstancetype", trafficpolicyinstancetype));
        }

        if (maxitems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxitems", maxitems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrafficPolicyInstancesByHostedZoneValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTrafficPolicyInstancesByHostedZone(Async)");
        }

        return listTrafficPolicyInstancesByHostedZoneCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficpolicyinstancename, trafficpolicyinstancetype, maxitems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the traffic policy instances that you created in a specified hosted zone.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you submit a &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; or an &lt;code&gt;UpdateTrafficPolicyInstance&lt;/code&gt; request, there&#39;s a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the &lt;code&gt;State&lt;/code&gt; response element.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Route 53 returns a maximum of 100 items in each response. If you have a lot of traffic policy instances, you can use the &lt;code&gt;MaxItems&lt;/code&gt; parameter to list them in groups of up to 100.&lt;/p&gt;
     * @param id The ID of the hosted zone that you want to list traffic policy instances for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficpolicyinstancename &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response is true, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancename&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancetype &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response is true, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancetype&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; from the previous response, which is the type of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy instances to be included in the response body for this request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt;, &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt;, and &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; represent the first traffic policy instance that Amazon Route 53 will return if you submit another request. (optional)
     * @return ListTrafficPolicyInstancesByHostedZoneResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
     </table>
     */
    public ListTrafficPolicyInstancesByHostedZoneResponse listTrafficPolicyInstancesByHostedZone(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems) throws ApiException {
        ApiResponse<ListTrafficPolicyInstancesByHostedZoneResponse> localVarResp = listTrafficPolicyInstancesByHostedZoneWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficpolicyinstancename, trafficpolicyinstancetype, maxitems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the traffic policy instances that you created in a specified hosted zone.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you submit a &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; or an &lt;code&gt;UpdateTrafficPolicyInstance&lt;/code&gt; request, there&#39;s a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the &lt;code&gt;State&lt;/code&gt; response element.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Route 53 returns a maximum of 100 items in each response. If you have a lot of traffic policy instances, you can use the &lt;code&gt;MaxItems&lt;/code&gt; parameter to list them in groups of up to 100.&lt;/p&gt;
     * @param id The ID of the hosted zone that you want to list traffic policy instances for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficpolicyinstancename &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response is true, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancename&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancetype &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response is true, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancetype&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; from the previous response, which is the type of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy instances to be included in the response body for this request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt;, &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt;, and &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; represent the first traffic policy instance that Amazon Route 53 will return if you submit another request. (optional)
     * @return ApiResponse&lt;ListTrafficPolicyInstancesByHostedZoneResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTrafficPolicyInstancesByHostedZoneResponse> listTrafficPolicyInstancesByHostedZoneWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems) throws ApiException {
        okhttp3.Call localVarCall = listTrafficPolicyInstancesByHostedZoneValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficpolicyinstancename, trafficpolicyinstancetype, maxitems, null);
        Type localVarReturnType = new TypeToken<ListTrafficPolicyInstancesByHostedZoneResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the traffic policy instances that you created in a specified hosted zone.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you submit a &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; or an &lt;code&gt;UpdateTrafficPolicyInstance&lt;/code&gt; request, there&#39;s a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the &lt;code&gt;State&lt;/code&gt; response element.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Route 53 returns a maximum of 100 items in each response. If you have a lot of traffic policy instances, you can use the &lt;code&gt;MaxItems&lt;/code&gt; parameter to list them in groups of up to 100.&lt;/p&gt;
     * @param id The ID of the hosted zone that you want to list traffic policy instances for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficpolicyinstancename &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response is true, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancename&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancetype &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response is true, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstances&lt;/code&gt; request. For the value of &lt;code&gt;trafficpolicyinstancetype&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; from the previous response, which is the type of the first traffic policy instance in the next group of traffic policy instances.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy instances to be included in the response body for this request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt;, &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt;, and &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; represent the first traffic policy instance that Amazon Route 53 will return if you submit another request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrafficPolicyInstancesByHostedZoneAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems, final ApiCallback<ListTrafficPolicyInstancesByHostedZoneResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrafficPolicyInstancesByHostedZoneValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficpolicyinstancename, trafficpolicyinstancetype, maxitems, _callback);
        Type localVarReturnType = new TypeToken<ListTrafficPolicyInstancesByHostedZoneResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTrafficPolicyInstancesByPolicy
     * @param id The ID of the traffic policy for which you want to list traffic policy instances. (required)
     * @param version The version of the traffic policy for which you want to list traffic policy instances. The version must be associated with the traffic policy that is specified by &lt;code&gt;TrafficPolicyId&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param hostedzoneid &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstancesByPolicy&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;hostedzoneid&lt;/code&gt;, specify the value of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt; from the previous response, which is the hosted zone ID of the first traffic policy instance that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancename &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstancesByPolicy&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;trafficpolicyinstancename&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancetype &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstancesByPolicy&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;trafficpolicyinstancetype&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy instances to be included in the response body for this request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt;, &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt;, and &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; represent the first traffic policy instance that Amazon Route 53 will return if you submit another request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrafficPolicyInstancesByPolicyCall(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicyinstances/trafficpolicy#id&version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (hostedzoneid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hostedzoneid", hostedzoneid));
        }

        if (trafficpolicyinstancename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trafficpolicyinstancename", trafficpolicyinstancename));
        }

        if (trafficpolicyinstancetype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trafficpolicyinstancetype", trafficpolicyinstancetype));
        }

        if (maxitems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxitems", maxitems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrafficPolicyInstancesByPolicyValidateBeforeCall(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTrafficPolicyInstancesByPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listTrafficPolicyInstancesByPolicy(Async)");
        }

        return listTrafficPolicyInstancesByPolicyCall(id, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hostedzoneid, trafficpolicyinstancename, trafficpolicyinstancetype, maxitems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the traffic policy instances that you created by using a specify traffic policy version.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you submit a &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; or an &lt;code&gt;UpdateTrafficPolicyInstance&lt;/code&gt; request, there&#39;s a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the &lt;code&gt;State&lt;/code&gt; response element.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Route 53 returns a maximum of 100 items in each response. If you have a lot of traffic policy instances, you can use the &lt;code&gt;MaxItems&lt;/code&gt; parameter to list them in groups of up to 100.&lt;/p&gt;
     * @param id The ID of the traffic policy for which you want to list traffic policy instances. (required)
     * @param version The version of the traffic policy for which you want to list traffic policy instances. The version must be associated with the traffic policy that is specified by &lt;code&gt;TrafficPolicyId&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param hostedzoneid &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstancesByPolicy&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;hostedzoneid&lt;/code&gt;, specify the value of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt; from the previous response, which is the hosted zone ID of the first traffic policy instance that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancename &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstancesByPolicy&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;trafficpolicyinstancename&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancetype &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstancesByPolicy&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;trafficpolicyinstancetype&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy instances to be included in the response body for this request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt;, &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt;, and &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; represent the first traffic policy instance that Amazon Route 53 will return if you submit another request. (optional)
     * @return ListTrafficPolicyInstancesByPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ListTrafficPolicyInstancesByPolicyResponse listTrafficPolicyInstancesByPolicy(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems) throws ApiException {
        ApiResponse<ListTrafficPolicyInstancesByPolicyResponse> localVarResp = listTrafficPolicyInstancesByPolicyWithHttpInfo(id, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hostedzoneid, trafficpolicyinstancename, trafficpolicyinstancetype, maxitems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the traffic policy instances that you created by using a specify traffic policy version.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you submit a &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; or an &lt;code&gt;UpdateTrafficPolicyInstance&lt;/code&gt; request, there&#39;s a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the &lt;code&gt;State&lt;/code&gt; response element.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Route 53 returns a maximum of 100 items in each response. If you have a lot of traffic policy instances, you can use the &lt;code&gt;MaxItems&lt;/code&gt; parameter to list them in groups of up to 100.&lt;/p&gt;
     * @param id The ID of the traffic policy for which you want to list traffic policy instances. (required)
     * @param version The version of the traffic policy for which you want to list traffic policy instances. The version must be associated with the traffic policy that is specified by &lt;code&gt;TrafficPolicyId&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param hostedzoneid &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstancesByPolicy&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;hostedzoneid&lt;/code&gt;, specify the value of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt; from the previous response, which is the hosted zone ID of the first traffic policy instance that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancename &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstancesByPolicy&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;trafficpolicyinstancename&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancetype &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstancesByPolicy&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;trafficpolicyinstancetype&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy instances to be included in the response body for this request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt;, &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt;, and &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; represent the first traffic policy instance that Amazon Route 53 will return if you submit another request. (optional)
     * @return ApiResponse&lt;ListTrafficPolicyInstancesByPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTrafficPolicyInstancesByPolicyResponse> listTrafficPolicyInstancesByPolicyWithHttpInfo(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems) throws ApiException {
        okhttp3.Call localVarCall = listTrafficPolicyInstancesByPolicyValidateBeforeCall(id, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hostedzoneid, trafficpolicyinstancename, trafficpolicyinstancetype, maxitems, null);
        Type localVarReturnType = new TypeToken<ListTrafficPolicyInstancesByPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the traffic policy instances that you created by using a specify traffic policy version.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you submit a &lt;code&gt;CreateTrafficPolicyInstance&lt;/code&gt; or an &lt;code&gt;UpdateTrafficPolicyInstance&lt;/code&gt; request, there&#39;s a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the &lt;code&gt;State&lt;/code&gt; response element.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Route 53 returns a maximum of 100 items in each response. If you have a lot of traffic policy instances, you can use the &lt;code&gt;MaxItems&lt;/code&gt; parameter to list them in groups of up to 100.&lt;/p&gt;
     * @param id The ID of the traffic policy for which you want to list traffic policy instances. (required)
     * @param version The version of the traffic policy for which you want to list traffic policy instances. The version must be associated with the traffic policy that is specified by &lt;code&gt;TrafficPolicyId&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param hostedzoneid &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstancesByPolicy&lt;/code&gt; request. &lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;hostedzoneid&lt;/code&gt;, specify the value of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt; from the previous response, which is the hosted zone ID of the first traffic policy instance that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancename &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstancesByPolicy&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;trafficpolicyinstancename&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param trafficpolicyinstancetype &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;true&lt;/code&gt;, you have more traffic policy instances. To get more traffic policy instances, submit another &lt;code&gt;ListTrafficPolicyInstancesByPolicy&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;For the value of &lt;code&gt;trafficpolicyinstancetype&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; from the previous response, which is the name of the first traffic policy instance that Amazon Route 53 will return if you submit another request.&lt;/p&gt; &lt;p&gt;If the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the previous response was &lt;code&gt;false&lt;/code&gt;, there are no more traffic policy instances to get.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy instances to be included in the response body for this request. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; traffic policy instances, the value of the &lt;code&gt;IsTruncated&lt;/code&gt; element in the response is &lt;code&gt;true&lt;/code&gt;, and the values of &lt;code&gt;HostedZoneIdMarker&lt;/code&gt;, &lt;code&gt;TrafficPolicyInstanceNameMarker&lt;/code&gt;, and &lt;code&gt;TrafficPolicyInstanceTypeMarker&lt;/code&gt; represent the first traffic policy instance that Amazon Route 53 will return if you submit another request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrafficPolicyInstancesByPolicyAsync(String id, Integer version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String hostedzoneid, String trafficpolicyinstancename, String trafficpolicyinstancetype, String maxitems, final ApiCallback<ListTrafficPolicyInstancesByPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrafficPolicyInstancesByPolicyValidateBeforeCall(id, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hostedzoneid, trafficpolicyinstancename, trafficpolicyinstancetype, maxitems, _callback);
        Type localVarReturnType = new TypeToken<ListTrafficPolicyInstancesByPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTrafficPolicyVersions
     * @param id Specify the value of &lt;code&gt;Id&lt;/code&gt; of the traffic policy for which you want to list all versions. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficpolicyversion &lt;p&gt;For your first request to &lt;code&gt;ListTrafficPolicyVersions&lt;/code&gt;, don&#39;t include the &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have more traffic policy versions than the value of &lt;code&gt;MaxItems&lt;/code&gt;, &lt;code&gt;ListTrafficPolicyVersions&lt;/code&gt; returns only the first group of &lt;code&gt;MaxItems&lt;/code&gt; versions. To get more traffic policy versions, submit another &lt;code&gt;ListTrafficPolicyVersions&lt;/code&gt; request. For the value of &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt; in the previous response.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy versions that you want Amazon Route 53 to include in the response body for this request. If the specified traffic policy has more than &lt;code&gt;MaxItems&lt;/code&gt; versions, the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is &lt;code&gt;true&lt;/code&gt;, and the value of the &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt; element is the ID of the first version that Route 53 will return if you submit another request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrafficPolicyVersionsCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyversion, String maxitems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicies/{Id}/versions"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trafficpolicyversion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trafficpolicyversion", trafficpolicyversion));
        }

        if (maxitems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxitems", maxitems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrafficPolicyVersionsValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyversion, String maxitems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTrafficPolicyVersions(Async)");
        }

        return listTrafficPolicyVersionsCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficpolicyversion, maxitems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about all of the versions for a specified traffic policy.&lt;/p&gt; &lt;p&gt;Traffic policy versions are listed in numerical order by &lt;code&gt;VersionNumber&lt;/code&gt;.&lt;/p&gt;
     * @param id Specify the value of &lt;code&gt;Id&lt;/code&gt; of the traffic policy for which you want to list all versions. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficpolicyversion &lt;p&gt;For your first request to &lt;code&gt;ListTrafficPolicyVersions&lt;/code&gt;, don&#39;t include the &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have more traffic policy versions than the value of &lt;code&gt;MaxItems&lt;/code&gt;, &lt;code&gt;ListTrafficPolicyVersions&lt;/code&gt; returns only the first group of &lt;code&gt;MaxItems&lt;/code&gt; versions. To get more traffic policy versions, submit another &lt;code&gt;ListTrafficPolicyVersions&lt;/code&gt; request. For the value of &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt; in the previous response.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy versions that you want Amazon Route 53 to include in the response body for this request. If the specified traffic policy has more than &lt;code&gt;MaxItems&lt;/code&gt; versions, the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is &lt;code&gt;true&lt;/code&gt;, and the value of the &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt; element is the ID of the first version that Route 53 will return if you submit another request. (optional)
     * @return ListTrafficPolicyVersionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ListTrafficPolicyVersionsResponse listTrafficPolicyVersions(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyversion, String maxitems) throws ApiException {
        ApiResponse<ListTrafficPolicyVersionsResponse> localVarResp = listTrafficPolicyVersionsWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficpolicyversion, maxitems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about all of the versions for a specified traffic policy.&lt;/p&gt; &lt;p&gt;Traffic policy versions are listed in numerical order by &lt;code&gt;VersionNumber&lt;/code&gt;.&lt;/p&gt;
     * @param id Specify the value of &lt;code&gt;Id&lt;/code&gt; of the traffic policy for which you want to list all versions. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficpolicyversion &lt;p&gt;For your first request to &lt;code&gt;ListTrafficPolicyVersions&lt;/code&gt;, don&#39;t include the &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have more traffic policy versions than the value of &lt;code&gt;MaxItems&lt;/code&gt;, &lt;code&gt;ListTrafficPolicyVersions&lt;/code&gt; returns only the first group of &lt;code&gt;MaxItems&lt;/code&gt; versions. To get more traffic policy versions, submit another &lt;code&gt;ListTrafficPolicyVersions&lt;/code&gt; request. For the value of &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt; in the previous response.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy versions that you want Amazon Route 53 to include in the response body for this request. If the specified traffic policy has more than &lt;code&gt;MaxItems&lt;/code&gt; versions, the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is &lt;code&gt;true&lt;/code&gt;, and the value of the &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt; element is the ID of the first version that Route 53 will return if you submit another request. (optional)
     * @return ApiResponse&lt;ListTrafficPolicyVersionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTrafficPolicyVersionsResponse> listTrafficPolicyVersionsWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyversion, String maxitems) throws ApiException {
        okhttp3.Call localVarCall = listTrafficPolicyVersionsValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficpolicyversion, maxitems, null);
        Type localVarReturnType = new TypeToken<ListTrafficPolicyVersionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about all of the versions for a specified traffic policy.&lt;/p&gt; &lt;p&gt;Traffic policy versions are listed in numerical order by &lt;code&gt;VersionNumber&lt;/code&gt;.&lt;/p&gt;
     * @param id Specify the value of &lt;code&gt;Id&lt;/code&gt; of the traffic policy for which you want to list all versions. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficpolicyversion &lt;p&gt;For your first request to &lt;code&gt;ListTrafficPolicyVersions&lt;/code&gt;, don&#39;t include the &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have more traffic policy versions than the value of &lt;code&gt;MaxItems&lt;/code&gt;, &lt;code&gt;ListTrafficPolicyVersions&lt;/code&gt; returns only the first group of &lt;code&gt;MaxItems&lt;/code&gt; versions. To get more traffic policy versions, submit another &lt;code&gt;ListTrafficPolicyVersions&lt;/code&gt; request. For the value of &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt;, specify the value of &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt; in the previous response.&lt;/p&gt; (optional)
     * @param maxitems The maximum number of traffic policy versions that you want Amazon Route 53 to include in the response body for this request. If the specified traffic policy has more than &lt;code&gt;MaxItems&lt;/code&gt; versions, the value of &lt;code&gt;IsTruncated&lt;/code&gt; in the response is &lt;code&gt;true&lt;/code&gt;, and the value of the &lt;code&gt;TrafficPolicyVersionMarker&lt;/code&gt; element is the ID of the first version that Route 53 will return if you submit another request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrafficPolicyVersionsAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficpolicyversion, String maxitems, final ApiCallback<ListTrafficPolicyVersionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrafficPolicyVersionsValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficpolicyversion, maxitems, _callback);
        Type localVarReturnType = new TypeToken<ListTrafficPolicyVersionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVPCAssociationAuthorizations
     * @param id The ID of the hosted zone for which you want a list of VPCs that can be associated with the hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nexttoken  &lt;i&gt;Optional&lt;/i&gt;: If a response includes a &lt;code&gt;NextToken&lt;/code&gt; element, there are more VPCs that can be associated with the specified hosted zone. To get the next page of results, submit another request, and include the value of &lt;code&gt;NextToken&lt;/code&gt; from the response in the &lt;code&gt;nexttoken&lt;/code&gt; parameter in another &lt;code&gt;ListVPCAssociationAuthorizations&lt;/code&gt; request. (optional)
     * @param maxresults  &lt;i&gt;Optional&lt;/i&gt;: An integer that specifies the maximum number of VPCs that you want Amazon Route 53 to return. If you don&#39;t specify a value for &lt;code&gt;MaxResults&lt;/code&gt;, Route 53 returns up to 50 VPCs per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVPCAssociationAuthorizationsCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}/authorizevpcassociation"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nexttoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nexttoken", nexttoken));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVPCAssociationAuthorizationsValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listVPCAssociationAuthorizations(Async)");
        }

        return listVPCAssociationAuthorizationsCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nexttoken, maxresults, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of the VPCs that were created by other accounts and that can be associated with a specified hosted zone because you&#39;ve submitted one or more &lt;code&gt;CreateVPCAssociationAuthorization&lt;/code&gt; requests. &lt;/p&gt; &lt;p&gt;The response includes a &lt;code&gt;VPCs&lt;/code&gt; element with a &lt;code&gt;VPC&lt;/code&gt; child element for each VPC that can be associated with the hosted zone.&lt;/p&gt;
     * @param id The ID of the hosted zone for which you want a list of VPCs that can be associated with the hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nexttoken  &lt;i&gt;Optional&lt;/i&gt;: If a response includes a &lt;code&gt;NextToken&lt;/code&gt; element, there are more VPCs that can be associated with the specified hosted zone. To get the next page of results, submit another request, and include the value of &lt;code&gt;NextToken&lt;/code&gt; from the response in the &lt;code&gt;nexttoken&lt;/code&gt; parameter in another &lt;code&gt;ListVPCAssociationAuthorizations&lt;/code&gt; request. (optional)
     * @param maxresults  &lt;i&gt;Optional&lt;/i&gt;: An integer that specifies the maximum number of VPCs that you want Amazon Route 53 to return. If you don&#39;t specify a value for &lt;code&gt;MaxResults&lt;/code&gt;, Route 53 returns up to 50 VPCs per page. (optional)
     * @return ListVPCAssociationAuthorizationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationToken </td><td>  -  </td></tr>
     </table>
     */
    public ListVPCAssociationAuthorizationsResponse listVPCAssociationAuthorizations(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults) throws ApiException {
        ApiResponse<ListVPCAssociationAuthorizationsResponse> localVarResp = listVPCAssociationAuthorizationsWithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nexttoken, maxresults);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of the VPCs that were created by other accounts and that can be associated with a specified hosted zone because you&#39;ve submitted one or more &lt;code&gt;CreateVPCAssociationAuthorization&lt;/code&gt; requests. &lt;/p&gt; &lt;p&gt;The response includes a &lt;code&gt;VPCs&lt;/code&gt; element with a &lt;code&gt;VPC&lt;/code&gt; child element for each VPC that can be associated with the hosted zone.&lt;/p&gt;
     * @param id The ID of the hosted zone for which you want a list of VPCs that can be associated with the hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nexttoken  &lt;i&gt;Optional&lt;/i&gt;: If a response includes a &lt;code&gt;NextToken&lt;/code&gt; element, there are more VPCs that can be associated with the specified hosted zone. To get the next page of results, submit another request, and include the value of &lt;code&gt;NextToken&lt;/code&gt; from the response in the &lt;code&gt;nexttoken&lt;/code&gt; parameter in another &lt;code&gt;ListVPCAssociationAuthorizations&lt;/code&gt; request. (optional)
     * @param maxresults  &lt;i&gt;Optional&lt;/i&gt;: An integer that specifies the maximum number of VPCs that you want Amazon Route 53 to return. If you don&#39;t specify a value for &lt;code&gt;MaxResults&lt;/code&gt;, Route 53 returns up to 50 VPCs per page. (optional)
     * @return ApiResponse&lt;ListVPCAssociationAuthorizationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVPCAssociationAuthorizationsResponse> listVPCAssociationAuthorizationsWithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults) throws ApiException {
        okhttp3.Call localVarCall = listVPCAssociationAuthorizationsValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nexttoken, maxresults, null);
        Type localVarReturnType = new TypeToken<ListVPCAssociationAuthorizationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of the VPCs that were created by other accounts and that can be associated with a specified hosted zone because you&#39;ve submitted one or more &lt;code&gt;CreateVPCAssociationAuthorization&lt;/code&gt; requests. &lt;/p&gt; &lt;p&gt;The response includes a &lt;code&gt;VPCs&lt;/code&gt; element with a &lt;code&gt;VPC&lt;/code&gt; child element for each VPC that can be associated with the hosted zone.&lt;/p&gt;
     * @param id The ID of the hosted zone for which you want a list of VPCs that can be associated with the hosted zone. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nexttoken  &lt;i&gt;Optional&lt;/i&gt;: If a response includes a &lt;code&gt;NextToken&lt;/code&gt; element, there are more VPCs that can be associated with the specified hosted zone. To get the next page of results, submit another request, and include the value of &lt;code&gt;NextToken&lt;/code&gt; from the response in the &lt;code&gt;nexttoken&lt;/code&gt; parameter in another &lt;code&gt;ListVPCAssociationAuthorizations&lt;/code&gt; request. (optional)
     * @param maxresults  &lt;i&gt;Optional&lt;/i&gt;: An integer that specifies the maximum number of VPCs that you want Amazon Route 53 to return. If you don&#39;t specify a value for &lt;code&gt;MaxResults&lt;/code&gt;, Route 53 returns up to 50 VPCs per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVPCAssociationAuthorizationsAsync(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nexttoken, String maxresults, final ApiCallback<ListVPCAssociationAuthorizationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVPCAssociationAuthorizationsValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nexttoken, maxresults, _callback);
        Type localVarReturnType = new TypeToken<ListVPCAssociationAuthorizationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testDNSAnswer
     * @param hostedzoneid The ID of the hosted zone that you want Amazon Route 53 to simulate a query for. (required)
     * @param recordname The name of the resource record set that you want Amazon Route 53 to simulate a query for. (required)
     * @param recordtype The type of the resource record set. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resolverip If you want to simulate a request from a specific DNS resolver, specify the IP address for that resolver. If you omit this value, &lt;code&gt;TestDnsAnswer&lt;/code&gt; uses the IP address of a DNS resolver in the Amazon Web Services US East (N. Virginia) Region (&lt;code&gt;us-east-1&lt;/code&gt;). (optional)
     * @param edns0clientsubnetip If the resolver that you specified for resolverip supports EDNS0, specify the IPv4 or IPv6 address of a client in the applicable location, for example, &lt;code&gt;192.0.2.44&lt;/code&gt; or &lt;code&gt;2001:db8:85a3::8a2e:370:7334&lt;/code&gt;. (optional)
     * @param edns0clientsubnetmask &lt;p&gt;If you specify an IP address for &lt;code&gt;edns0clientsubnetip&lt;/code&gt;, you can optionally specify the number of bits of the IP address that you want the checking tool to include in the DNS query. For example, if you specify &lt;code&gt;192.0.2.44&lt;/code&gt; for &lt;code&gt;edns0clientsubnetip&lt;/code&gt; and &lt;code&gt;24&lt;/code&gt; for &lt;code&gt;edns0clientsubnetmask&lt;/code&gt;, the checking tool will simulate a request from 192.0.2.0/24. The default value is 24 bits for IPv4 addresses and 64 bits for IPv6 addresses.&lt;/p&gt; &lt;p&gt;The range of valid values depends on whether &lt;code&gt;edns0clientsubnetip&lt;/code&gt; is an IPv4 or an IPv6 address:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;IPv4&lt;/b&gt;: Specify a value between 0 and 32&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;IPv6&lt;/b&gt;: Specify a value between 0 and 128&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testDNSAnswerCall(String hostedzoneid, String recordname, String recordtype, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resolverip, String edns0clientsubnetip, String edns0clientsubnetmask, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2013-04-01/testdnsanswer#hostedzoneid&recordname&recordtype";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hostedzoneid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hostedzoneid", hostedzoneid));
        }

        if (recordname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recordname", recordname));
        }

        if (recordtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recordtype", recordtype));
        }

        if (resolverip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolverip", resolverip));
        }

        if (edns0clientsubnetip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("edns0clientsubnetip", edns0clientsubnetip));
        }

        if (edns0clientsubnetmask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("edns0clientsubnetmask", edns0clientsubnetmask));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testDNSAnswerValidateBeforeCall(String hostedzoneid, String recordname, String recordtype, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resolverip, String edns0clientsubnetip, String edns0clientsubnetmask, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostedzoneid' is set
        if (hostedzoneid == null) {
            throw new ApiException("Missing the required parameter 'hostedzoneid' when calling testDNSAnswer(Async)");
        }

        // verify the required parameter 'recordname' is set
        if (recordname == null) {
            throw new ApiException("Missing the required parameter 'recordname' when calling testDNSAnswer(Async)");
        }

        // verify the required parameter 'recordtype' is set
        if (recordtype == null) {
            throw new ApiException("Missing the required parameter 'recordtype' when calling testDNSAnswer(Async)");
        }

        return testDNSAnswerCall(hostedzoneid, recordname, recordtype, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resolverip, edns0clientsubnetip, edns0clientsubnetmask, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the value that Amazon Route 53 returns in response to a DNS request for a specified record name and type. You can optionally specify the IP address of a DNS resolver, an EDNS0 client subnet IP address, and a subnet mask. &lt;/p&gt; &lt;p&gt;This call only supports querying public hosted zones.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;TestDnsAnswer &lt;/code&gt; returns information similar to what you would expect from the answer section of the &lt;code&gt;dig&lt;/code&gt; command. Therefore, if you query for the name servers of a subdomain that point to the parent name servers, those will not be returned.&lt;/p&gt; &lt;/note&gt;
     * @param hostedzoneid The ID of the hosted zone that you want Amazon Route 53 to simulate a query for. (required)
     * @param recordname The name of the resource record set that you want Amazon Route 53 to simulate a query for. (required)
     * @param recordtype The type of the resource record set. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resolverip If you want to simulate a request from a specific DNS resolver, specify the IP address for that resolver. If you omit this value, &lt;code&gt;TestDnsAnswer&lt;/code&gt; uses the IP address of a DNS resolver in the Amazon Web Services US East (N. Virginia) Region (&lt;code&gt;us-east-1&lt;/code&gt;). (optional)
     * @param edns0clientsubnetip If the resolver that you specified for resolverip supports EDNS0, specify the IPv4 or IPv6 address of a client in the applicable location, for example, &lt;code&gt;192.0.2.44&lt;/code&gt; or &lt;code&gt;2001:db8:85a3::8a2e:370:7334&lt;/code&gt;. (optional)
     * @param edns0clientsubnetmask &lt;p&gt;If you specify an IP address for &lt;code&gt;edns0clientsubnetip&lt;/code&gt;, you can optionally specify the number of bits of the IP address that you want the checking tool to include in the DNS query. For example, if you specify &lt;code&gt;192.0.2.44&lt;/code&gt; for &lt;code&gt;edns0clientsubnetip&lt;/code&gt; and &lt;code&gt;24&lt;/code&gt; for &lt;code&gt;edns0clientsubnetmask&lt;/code&gt;, the checking tool will simulate a request from 192.0.2.0/24. The default value is 24 bits for IPv4 addresses and 64 bits for IPv6 addresses.&lt;/p&gt; &lt;p&gt;The range of valid values depends on whether &lt;code&gt;edns0clientsubnetip&lt;/code&gt; is an IPv4 or an IPv6 address:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;IPv4&lt;/b&gt;: Specify a value between 0 and 32&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;IPv6&lt;/b&gt;: Specify a value between 0 and 128&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return TestDNSAnswerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public TestDNSAnswerResponse testDNSAnswer(String hostedzoneid, String recordname, String recordtype, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resolverip, String edns0clientsubnetip, String edns0clientsubnetmask) throws ApiException {
        ApiResponse<TestDNSAnswerResponse> localVarResp = testDNSAnswerWithHttpInfo(hostedzoneid, recordname, recordtype, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resolverip, edns0clientsubnetip, edns0clientsubnetmask);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the value that Amazon Route 53 returns in response to a DNS request for a specified record name and type. You can optionally specify the IP address of a DNS resolver, an EDNS0 client subnet IP address, and a subnet mask. &lt;/p&gt; &lt;p&gt;This call only supports querying public hosted zones.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;TestDnsAnswer &lt;/code&gt; returns information similar to what you would expect from the answer section of the &lt;code&gt;dig&lt;/code&gt; command. Therefore, if you query for the name servers of a subdomain that point to the parent name servers, those will not be returned.&lt;/p&gt; &lt;/note&gt;
     * @param hostedzoneid The ID of the hosted zone that you want Amazon Route 53 to simulate a query for. (required)
     * @param recordname The name of the resource record set that you want Amazon Route 53 to simulate a query for. (required)
     * @param recordtype The type of the resource record set. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resolverip If you want to simulate a request from a specific DNS resolver, specify the IP address for that resolver. If you omit this value, &lt;code&gt;TestDnsAnswer&lt;/code&gt; uses the IP address of a DNS resolver in the Amazon Web Services US East (N. Virginia) Region (&lt;code&gt;us-east-1&lt;/code&gt;). (optional)
     * @param edns0clientsubnetip If the resolver that you specified for resolverip supports EDNS0, specify the IPv4 or IPv6 address of a client in the applicable location, for example, &lt;code&gt;192.0.2.44&lt;/code&gt; or &lt;code&gt;2001:db8:85a3::8a2e:370:7334&lt;/code&gt;. (optional)
     * @param edns0clientsubnetmask &lt;p&gt;If you specify an IP address for &lt;code&gt;edns0clientsubnetip&lt;/code&gt;, you can optionally specify the number of bits of the IP address that you want the checking tool to include in the DNS query. For example, if you specify &lt;code&gt;192.0.2.44&lt;/code&gt; for &lt;code&gt;edns0clientsubnetip&lt;/code&gt; and &lt;code&gt;24&lt;/code&gt; for &lt;code&gt;edns0clientsubnetmask&lt;/code&gt;, the checking tool will simulate a request from 192.0.2.0/24. The default value is 24 bits for IPv4 addresses and 64 bits for IPv6 addresses.&lt;/p&gt; &lt;p&gt;The range of valid values depends on whether &lt;code&gt;edns0clientsubnetip&lt;/code&gt; is an IPv4 or an IPv6 address:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;IPv4&lt;/b&gt;: Specify a value between 0 and 32&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;IPv6&lt;/b&gt;: Specify a value between 0 and 128&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;TestDNSAnswerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestDNSAnswerResponse> testDNSAnswerWithHttpInfo(String hostedzoneid, String recordname, String recordtype, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resolverip, String edns0clientsubnetip, String edns0clientsubnetmask) throws ApiException {
        okhttp3.Call localVarCall = testDNSAnswerValidateBeforeCall(hostedzoneid, recordname, recordtype, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resolverip, edns0clientsubnetip, edns0clientsubnetmask, null);
        Type localVarReturnType = new TypeToken<TestDNSAnswerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the value that Amazon Route 53 returns in response to a DNS request for a specified record name and type. You can optionally specify the IP address of a DNS resolver, an EDNS0 client subnet IP address, and a subnet mask. &lt;/p&gt; &lt;p&gt;This call only supports querying public hosted zones.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;TestDnsAnswer &lt;/code&gt; returns information similar to what you would expect from the answer section of the &lt;code&gt;dig&lt;/code&gt; command. Therefore, if you query for the name servers of a subdomain that point to the parent name servers, those will not be returned.&lt;/p&gt; &lt;/note&gt;
     * @param hostedzoneid The ID of the hosted zone that you want Amazon Route 53 to simulate a query for. (required)
     * @param recordname The name of the resource record set that you want Amazon Route 53 to simulate a query for. (required)
     * @param recordtype The type of the resource record set. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resolverip If you want to simulate a request from a specific DNS resolver, specify the IP address for that resolver. If you omit this value, &lt;code&gt;TestDnsAnswer&lt;/code&gt; uses the IP address of a DNS resolver in the Amazon Web Services US East (N. Virginia) Region (&lt;code&gt;us-east-1&lt;/code&gt;). (optional)
     * @param edns0clientsubnetip If the resolver that you specified for resolverip supports EDNS0, specify the IPv4 or IPv6 address of a client in the applicable location, for example, &lt;code&gt;192.0.2.44&lt;/code&gt; or &lt;code&gt;2001:db8:85a3::8a2e:370:7334&lt;/code&gt;. (optional)
     * @param edns0clientsubnetmask &lt;p&gt;If you specify an IP address for &lt;code&gt;edns0clientsubnetip&lt;/code&gt;, you can optionally specify the number of bits of the IP address that you want the checking tool to include in the DNS query. For example, if you specify &lt;code&gt;192.0.2.44&lt;/code&gt; for &lt;code&gt;edns0clientsubnetip&lt;/code&gt; and &lt;code&gt;24&lt;/code&gt; for &lt;code&gt;edns0clientsubnetmask&lt;/code&gt;, the checking tool will simulate a request from 192.0.2.0/24. The default value is 24 bits for IPv4 addresses and 64 bits for IPv6 addresses.&lt;/p&gt; &lt;p&gt;The range of valid values depends on whether &lt;code&gt;edns0clientsubnetip&lt;/code&gt; is an IPv4 or an IPv6 address:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;IPv4&lt;/b&gt;: Specify a value between 0 and 32&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;IPv6&lt;/b&gt;: Specify a value between 0 and 128&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testDNSAnswerAsync(String hostedzoneid, String recordname, String recordtype, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resolverip, String edns0clientsubnetip, String edns0clientsubnetmask, final ApiCallback<TestDNSAnswerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testDNSAnswerValidateBeforeCall(hostedzoneid, recordname, recordtype, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resolverip, edns0clientsubnetip, edns0clientsubnetmask, _callback);
        Type localVarReturnType = new TypeToken<TestDNSAnswerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHealthCheck
     * @param healthCheckId The ID for the health check for which you want detailed information. When you created the health check, &lt;code&gt;CreateHealthCheck&lt;/code&gt; returned the ID in the response, in the &lt;code&gt;HealthCheckId&lt;/code&gt; element. (required)
     * @param updateHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HealthCheckVersionMismatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHealthCheckCall(String healthCheckId, UpdateHealthCheckRequest updateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateHealthCheckRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/healthcheck/{HealthCheckId}"
            .replace("{" + "HealthCheckId" + "}", localVarApiClient.escapeString(healthCheckId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHealthCheckValidateBeforeCall(String healthCheckId, UpdateHealthCheckRequest updateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'healthCheckId' is set
        if (healthCheckId == null) {
            throw new ApiException("Missing the required parameter 'healthCheckId' when calling updateHealthCheck(Async)");
        }

        // verify the required parameter 'updateHealthCheckRequest' is set
        if (updateHealthCheckRequest == null) {
            throw new ApiException("Missing the required parameter 'updateHealthCheckRequest' when calling updateHealthCheck(Async)");
        }

        return updateHealthCheckCall(healthCheckId, updateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates an existing health check. Note that some values can&#39;t be updated. &lt;/p&gt; &lt;p&gt;For more information about updating health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/health-checks-creating-deleting.html\&quot;&gt;Creating, Updating, and Deleting Health Checks&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param healthCheckId The ID for the health check for which you want detailed information. When you created the health check, &lt;code&gt;CreateHealthCheck&lt;/code&gt; returned the ID in the response, in the &lt;code&gt;HealthCheckId&lt;/code&gt; element. (required)
     * @param updateHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateHealthCheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HealthCheckVersionMismatch </td><td>  -  </td></tr>
     </table>
     */
    public UpdateHealthCheckResponse updateHealthCheck(String healthCheckId, UpdateHealthCheckRequest updateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateHealthCheckResponse> localVarResp = updateHealthCheckWithHttpInfo(healthCheckId, updateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates an existing health check. Note that some values can&#39;t be updated. &lt;/p&gt; &lt;p&gt;For more information about updating health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/health-checks-creating-deleting.html\&quot;&gt;Creating, Updating, and Deleting Health Checks&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param healthCheckId The ID for the health check for which you want detailed information. When you created the health check, &lt;code&gt;CreateHealthCheck&lt;/code&gt; returned the ID in the response, in the &lt;code&gt;HealthCheckId&lt;/code&gt; element. (required)
     * @param updateHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateHealthCheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HealthCheckVersionMismatch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateHealthCheckResponse> updateHealthCheckWithHttpInfo(String healthCheckId, UpdateHealthCheckRequest updateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateHealthCheckValidateBeforeCall(healthCheckId, updateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateHealthCheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates an existing health check. Note that some values can&#39;t be updated. &lt;/p&gt; &lt;p&gt;For more information about updating health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/health-checks-creating-deleting.html\&quot;&gt;Creating, Updating, and Deleting Health Checks&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param healthCheckId The ID for the health check for which you want detailed information. When you created the health check, &lt;code&gt;CreateHealthCheck&lt;/code&gt; returned the ID in the response, in the &lt;code&gt;HealthCheckId&lt;/code&gt; element. (required)
     * @param updateHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHealthCheck </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HealthCheckVersionMismatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHealthCheckAsync(String healthCheckId, UpdateHealthCheckRequest updateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateHealthCheckResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHealthCheckValidateBeforeCall(healthCheckId, updateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateHealthCheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHostedZoneComment
     * @param id The ID for the hosted zone that you want to update the comment for. (required)
     * @param updateHostedZoneCommentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostedZoneCommentCall(String id, UpdateHostedZoneCommentRequest updateHostedZoneCommentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateHostedZoneCommentRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/hostedzone/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHostedZoneCommentValidateBeforeCall(String id, UpdateHostedZoneCommentRequest updateHostedZoneCommentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateHostedZoneComment(Async)");
        }

        // verify the required parameter 'updateHostedZoneCommentRequest' is set
        if (updateHostedZoneCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'updateHostedZoneCommentRequest' when calling updateHostedZoneComment(Async)");
        }

        return updateHostedZoneCommentCall(id, updateHostedZoneCommentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the comment for a specified hosted zone.
     * @param id The ID for the hosted zone that you want to update the comment for. (required)
     * @param updateHostedZoneCommentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateHostedZoneCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public UpdateHostedZoneCommentResponse updateHostedZoneComment(String id, UpdateHostedZoneCommentRequest updateHostedZoneCommentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateHostedZoneCommentResponse> localVarResp = updateHostedZoneCommentWithHttpInfo(id, updateHostedZoneCommentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the comment for a specified hosted zone.
     * @param id The ID for the hosted zone that you want to update the comment for. (required)
     * @param updateHostedZoneCommentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateHostedZoneCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateHostedZoneCommentResponse> updateHostedZoneCommentWithHttpInfo(String id, UpdateHostedZoneCommentRequest updateHostedZoneCommentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateHostedZoneCommentValidateBeforeCall(id, updateHostedZoneCommentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateHostedZoneCommentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the comment for a specified hosted zone.
     * @param id The ID for the hosted zone that you want to update the comment for. (required)
     * @param updateHostedZoneCommentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchHostedZone </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostedZoneCommentAsync(String id, UpdateHostedZoneCommentRequest updateHostedZoneCommentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateHostedZoneCommentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHostedZoneCommentValidateBeforeCall(id, updateHostedZoneCommentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateHostedZoneCommentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTrafficPolicyComment
     * @param id The value of &lt;code&gt;Id&lt;/code&gt; for the traffic policy that you want to update the comment for. (required)
     * @param version The value of &lt;code&gt;Version&lt;/code&gt; for the traffic policy that you want to update the comment for. (required)
     * @param updateTrafficPolicyCommentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrafficPolicyCommentCall(String id, Integer version, UpdateTrafficPolicyCommentRequest updateTrafficPolicyCommentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTrafficPolicyCommentRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicy/{Id}/{Version}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "Version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrafficPolicyCommentValidateBeforeCall(String id, Integer version, UpdateTrafficPolicyCommentRequest updateTrafficPolicyCommentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTrafficPolicyComment(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateTrafficPolicyComment(Async)");
        }

        // verify the required parameter 'updateTrafficPolicyCommentRequest' is set
        if (updateTrafficPolicyCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTrafficPolicyCommentRequest' when calling updateTrafficPolicyComment(Async)");
        }

        return updateTrafficPolicyCommentCall(id, version, updateTrafficPolicyCommentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the comment for a specified traffic policy version.
     * @param id The value of &lt;code&gt;Id&lt;/code&gt; for the traffic policy that you want to update the comment for. (required)
     * @param version The value of &lt;code&gt;Version&lt;/code&gt; for the traffic policy that you want to update the comment for. (required)
     * @param updateTrafficPolicyCommentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateTrafficPolicyCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTrafficPolicyCommentResponse updateTrafficPolicyComment(String id, Integer version, UpdateTrafficPolicyCommentRequest updateTrafficPolicyCommentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateTrafficPolicyCommentResponse> localVarResp = updateTrafficPolicyCommentWithHttpInfo(id, version, updateTrafficPolicyCommentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the comment for a specified traffic policy version.
     * @param id The value of &lt;code&gt;Id&lt;/code&gt; for the traffic policy that you want to update the comment for. (required)
     * @param version The value of &lt;code&gt;Version&lt;/code&gt; for the traffic policy that you want to update the comment for. (required)
     * @param updateTrafficPolicyCommentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateTrafficPolicyCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTrafficPolicyCommentResponse> updateTrafficPolicyCommentWithHttpInfo(String id, Integer version, UpdateTrafficPolicyCommentRequest updateTrafficPolicyCommentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateTrafficPolicyCommentValidateBeforeCall(id, version, updateTrafficPolicyCommentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateTrafficPolicyCommentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the comment for a specified traffic policy version.
     * @param id The value of &lt;code&gt;Id&lt;/code&gt; for the traffic policy that you want to update the comment for. (required)
     * @param version The value of &lt;code&gt;Version&lt;/code&gt; for the traffic policy that you want to update the comment for. (required)
     * @param updateTrafficPolicyCommentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrafficPolicyCommentAsync(String id, Integer version, UpdateTrafficPolicyCommentRequest updateTrafficPolicyCommentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateTrafficPolicyCommentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTrafficPolicyCommentValidateBeforeCall(id, version, updateTrafficPolicyCommentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateTrafficPolicyCommentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTrafficPolicyInstance
     * @param id The ID of the traffic policy instance that you want to update. (required)
     * @param updateTrafficPolicyInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictingTypes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrafficPolicyInstanceCall(String id, UpdateTrafficPolicyInstanceRequest updateTrafficPolicyInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTrafficPolicyInstanceRequest;

        // create path and map variables
        String localVarPath = "/2013-04-01/trafficpolicyinstance/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrafficPolicyInstanceValidateBeforeCall(String id, UpdateTrafficPolicyInstanceRequest updateTrafficPolicyInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTrafficPolicyInstance(Async)");
        }

        // verify the required parameter 'updateTrafficPolicyInstanceRequest' is set
        if (updateTrafficPolicyInstanceRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTrafficPolicyInstanceRequest' when calling updateTrafficPolicyInstance(Async)");
        }

        return updateTrafficPolicyInstanceCall(id, updateTrafficPolicyInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the resource record sets in a specified hosted zone that were created based on the settings in a specified traffic policy version.&lt;/p&gt; &lt;p&gt;When you update a traffic policy instance, Amazon Route 53 continues to respond to DNS queries for the root resource record set name (such as example.com) while it replaces one group of resource record sets with another. Route 53 performs the following operations:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Route 53 creates a new group of resource record sets based on the specified traffic policy. This is true regardless of how significant the differences are between the existing resource record sets and the new resource record sets. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When all of the new resource record sets have been created, Route 53 starts to respond to DNS queries for the root resource record set name (such as example.com) by using the new resource record sets.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Route 53 deletes the old group of resource record sets that are associated with the root resource record set name.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The ID of the traffic policy instance that you want to update. (required)
     * @param updateTrafficPolicyInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateTrafficPolicyInstanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictingTypes </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTrafficPolicyInstanceResponse updateTrafficPolicyInstance(String id, UpdateTrafficPolicyInstanceRequest updateTrafficPolicyInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateTrafficPolicyInstanceResponse> localVarResp = updateTrafficPolicyInstanceWithHttpInfo(id, updateTrafficPolicyInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the resource record sets in a specified hosted zone that were created based on the settings in a specified traffic policy version.&lt;/p&gt; &lt;p&gt;When you update a traffic policy instance, Amazon Route 53 continues to respond to DNS queries for the root resource record set name (such as example.com) while it replaces one group of resource record sets with another. Route 53 performs the following operations:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Route 53 creates a new group of resource record sets based on the specified traffic policy. This is true regardless of how significant the differences are between the existing resource record sets and the new resource record sets. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When all of the new resource record sets have been created, Route 53 starts to respond to DNS queries for the root resource record set name (such as example.com) by using the new resource record sets.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Route 53 deletes the old group of resource record sets that are associated with the root resource record set name.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The ID of the traffic policy instance that you want to update. (required)
     * @param updateTrafficPolicyInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateTrafficPolicyInstanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictingTypes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTrafficPolicyInstanceResponse> updateTrafficPolicyInstanceWithHttpInfo(String id, UpdateTrafficPolicyInstanceRequest updateTrafficPolicyInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateTrafficPolicyInstanceValidateBeforeCall(id, updateTrafficPolicyInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateTrafficPolicyInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the resource record sets in a specified hosted zone that were created based on the settings in a specified traffic policy version.&lt;/p&gt; &lt;p&gt;When you update a traffic policy instance, Amazon Route 53 continues to respond to DNS queries for the root resource record set name (such as example.com) while it replaces one group of resource record sets with another. Route 53 performs the following operations:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Route 53 creates a new group of resource record sets based on the specified traffic policy. This is true regardless of how significant the differences are between the existing resource record sets and the new resource record sets. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When all of the new resource record sets have been created, Route 53 starts to respond to DNS queries for the root resource record set name (such as example.com) by using the new resource record sets.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Route 53 deletes the old group of resource record sets that are associated with the root resource record set name.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The ID of the traffic policy instance that you want to update. (required)
     * @param updateTrafficPolicyInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchTrafficPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchTrafficPolicyInstance </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PriorRequestNotComplete </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictingTypes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrafficPolicyInstanceAsync(String id, UpdateTrafficPolicyInstanceRequest updateTrafficPolicyInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateTrafficPolicyInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTrafficPolicyInstanceValidateBeforeCall(id, updateTrafficPolicyInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateTrafficPolicyInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
