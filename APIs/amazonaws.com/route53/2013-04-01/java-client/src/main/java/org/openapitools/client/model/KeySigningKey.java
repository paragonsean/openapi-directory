/*
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A key-signing key (KSK) is a complex type that represents a public/private key pair. The private key is used to generate a digital signature for the zone signing key (ZSK). The public key is stored in the DNS and is used to authenticate the ZSK. A KSK is always associated with a hosted zone; it cannot exist by itself.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:28.020907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeySigningKey {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_KMS_ARN = "KmsArn";
  @SerializedName(SERIALIZED_NAME_KMS_ARN)
  private String kmsArn;

  public static final String SERIALIZED_NAME_FLAG = "Flag";
  @SerializedName(SERIALIZED_NAME_FLAG)
  private Integer flag;

  public static final String SERIALIZED_NAME_SIGNING_ALGORITHM_MNEMONIC = "SigningAlgorithmMnemonic";
  @SerializedName(SERIALIZED_NAME_SIGNING_ALGORITHM_MNEMONIC)
  private String signingAlgorithmMnemonic;

  public static final String SERIALIZED_NAME_SIGNING_ALGORITHM_TYPE = "SigningAlgorithmType";
  @SerializedName(SERIALIZED_NAME_SIGNING_ALGORITHM_TYPE)
  private Integer signingAlgorithmType;

  public static final String SERIALIZED_NAME_DIGEST_ALGORITHM_MNEMONIC = "DigestAlgorithmMnemonic";
  @SerializedName(SERIALIZED_NAME_DIGEST_ALGORITHM_MNEMONIC)
  private String digestAlgorithmMnemonic;

  public static final String SERIALIZED_NAME_DIGEST_ALGORITHM_TYPE = "DigestAlgorithmType";
  @SerializedName(SERIALIZED_NAME_DIGEST_ALGORITHM_TYPE)
  private Integer digestAlgorithmType;

  public static final String SERIALIZED_NAME_KEY_TAG = "KeyTag";
  @SerializedName(SERIALIZED_NAME_KEY_TAG)
  private Integer keyTag;

  public static final String SERIALIZED_NAME_DIGEST_VALUE = "DigestValue";
  @SerializedName(SERIALIZED_NAME_DIGEST_VALUE)
  private String digestValue;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "PublicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_DS_RECORD = "DSRecord";
  @SerializedName(SERIALIZED_NAME_DS_RECORD)
  private String dsRecord;

  public static final String SERIALIZED_NAME_DN_S_K_E_Y_RECORD = "DNSKEYRecord";
  @SerializedName(SERIALIZED_NAME_DN_S_K_E_Y_RECORD)
  private String dnSKEYRecord;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_CREATED_DATE = "CreatedDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "LastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private OffsetDateTime lastModifiedDate;

  public KeySigningKey() {
  }

  public KeySigningKey name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public KeySigningKey kmsArn(String kmsArn) {
    this.kmsArn = kmsArn;
    return this;
  }

  /**
   * Get kmsArn
   * @return kmsArn
   */
  @javax.annotation.Nullable
  public String getKmsArn() {
    return kmsArn;
  }

  public void setKmsArn(String kmsArn) {
    this.kmsArn = kmsArn;
  }


  public KeySigningKey flag(Integer flag) {
    this.flag = flag;
    return this;
  }

  /**
   * Get flag
   * @return flag
   */
  @javax.annotation.Nullable
  public Integer getFlag() {
    return flag;
  }

  public void setFlag(Integer flag) {
    this.flag = flag;
  }


  public KeySigningKey signingAlgorithmMnemonic(String signingAlgorithmMnemonic) {
    this.signingAlgorithmMnemonic = signingAlgorithmMnemonic;
    return this;
  }

  /**
   * Get signingAlgorithmMnemonic
   * @return signingAlgorithmMnemonic
   */
  @javax.annotation.Nullable
  public String getSigningAlgorithmMnemonic() {
    return signingAlgorithmMnemonic;
  }

  public void setSigningAlgorithmMnemonic(String signingAlgorithmMnemonic) {
    this.signingAlgorithmMnemonic = signingAlgorithmMnemonic;
  }


  public KeySigningKey signingAlgorithmType(Integer signingAlgorithmType) {
    this.signingAlgorithmType = signingAlgorithmType;
    return this;
  }

  /**
   * Get signingAlgorithmType
   * @return signingAlgorithmType
   */
  @javax.annotation.Nullable
  public Integer getSigningAlgorithmType() {
    return signingAlgorithmType;
  }

  public void setSigningAlgorithmType(Integer signingAlgorithmType) {
    this.signingAlgorithmType = signingAlgorithmType;
  }


  public KeySigningKey digestAlgorithmMnemonic(String digestAlgorithmMnemonic) {
    this.digestAlgorithmMnemonic = digestAlgorithmMnemonic;
    return this;
  }

  /**
   * Get digestAlgorithmMnemonic
   * @return digestAlgorithmMnemonic
   */
  @javax.annotation.Nullable
  public String getDigestAlgorithmMnemonic() {
    return digestAlgorithmMnemonic;
  }

  public void setDigestAlgorithmMnemonic(String digestAlgorithmMnemonic) {
    this.digestAlgorithmMnemonic = digestAlgorithmMnemonic;
  }


  public KeySigningKey digestAlgorithmType(Integer digestAlgorithmType) {
    this.digestAlgorithmType = digestAlgorithmType;
    return this;
  }

  /**
   * Get digestAlgorithmType
   * @return digestAlgorithmType
   */
  @javax.annotation.Nullable
  public Integer getDigestAlgorithmType() {
    return digestAlgorithmType;
  }

  public void setDigestAlgorithmType(Integer digestAlgorithmType) {
    this.digestAlgorithmType = digestAlgorithmType;
  }


  public KeySigningKey keyTag(Integer keyTag) {
    this.keyTag = keyTag;
    return this;
  }

  /**
   * Get keyTag
   * @return keyTag
   */
  @javax.annotation.Nullable
  public Integer getKeyTag() {
    return keyTag;
  }

  public void setKeyTag(Integer keyTag) {
    this.keyTag = keyTag;
  }


  public KeySigningKey digestValue(String digestValue) {
    this.digestValue = digestValue;
    return this;
  }

  /**
   * Get digestValue
   * @return digestValue
   */
  @javax.annotation.Nullable
  public String getDigestValue() {
    return digestValue;
  }

  public void setDigestValue(String digestValue) {
    this.digestValue = digestValue;
  }


  public KeySigningKey publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Get publicKey
   * @return publicKey
   */
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public KeySigningKey dsRecord(String dsRecord) {
    this.dsRecord = dsRecord;
    return this;
  }

  /**
   * Get dsRecord
   * @return dsRecord
   */
  @javax.annotation.Nullable
  public String getDsRecord() {
    return dsRecord;
  }

  public void setDsRecord(String dsRecord) {
    this.dsRecord = dsRecord;
  }


  public KeySigningKey dnSKEYRecord(String dnSKEYRecord) {
    this.dnSKEYRecord = dnSKEYRecord;
    return this;
  }

  /**
   * Get dnSKEYRecord
   * @return dnSKEYRecord
   */
  @javax.annotation.Nullable
  public String getDnSKEYRecord() {
    return dnSKEYRecord;
  }

  public void setDnSKEYRecord(String dnSKEYRecord) {
    this.dnSKEYRecord = dnSKEYRecord;
  }


  public KeySigningKey status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public KeySigningKey statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public KeySigningKey createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public KeySigningKey lastModifiedDate(OffsetDateTime lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

  /**
   * Get lastModifiedDate
   * @return lastModifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(OffsetDateTime lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeySigningKey keySigningKey = (KeySigningKey) o;
    return Objects.equals(this.name, keySigningKey.name) &&
        Objects.equals(this.kmsArn, keySigningKey.kmsArn) &&
        Objects.equals(this.flag, keySigningKey.flag) &&
        Objects.equals(this.signingAlgorithmMnemonic, keySigningKey.signingAlgorithmMnemonic) &&
        Objects.equals(this.signingAlgorithmType, keySigningKey.signingAlgorithmType) &&
        Objects.equals(this.digestAlgorithmMnemonic, keySigningKey.digestAlgorithmMnemonic) &&
        Objects.equals(this.digestAlgorithmType, keySigningKey.digestAlgorithmType) &&
        Objects.equals(this.keyTag, keySigningKey.keyTag) &&
        Objects.equals(this.digestValue, keySigningKey.digestValue) &&
        Objects.equals(this.publicKey, keySigningKey.publicKey) &&
        Objects.equals(this.dsRecord, keySigningKey.dsRecord) &&
        Objects.equals(this.dnSKEYRecord, keySigningKey.dnSKEYRecord) &&
        Objects.equals(this.status, keySigningKey.status) &&
        Objects.equals(this.statusMessage, keySigningKey.statusMessage) &&
        Objects.equals(this.createdDate, keySigningKey.createdDate) &&
        Objects.equals(this.lastModifiedDate, keySigningKey.lastModifiedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, kmsArn, flag, signingAlgorithmMnemonic, signingAlgorithmType, digestAlgorithmMnemonic, digestAlgorithmType, keyTag, digestValue, publicKey, dsRecord, dnSKEYRecord, status, statusMessage, createdDate, lastModifiedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeySigningKey {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    kmsArn: ").append(toIndentedString(kmsArn)).append("\n");
    sb.append("    flag: ").append(toIndentedString(flag)).append("\n");
    sb.append("    signingAlgorithmMnemonic: ").append(toIndentedString(signingAlgorithmMnemonic)).append("\n");
    sb.append("    signingAlgorithmType: ").append(toIndentedString(signingAlgorithmType)).append("\n");
    sb.append("    digestAlgorithmMnemonic: ").append(toIndentedString(digestAlgorithmMnemonic)).append("\n");
    sb.append("    digestAlgorithmType: ").append(toIndentedString(digestAlgorithmType)).append("\n");
    sb.append("    keyTag: ").append(toIndentedString(keyTag)).append("\n");
    sb.append("    digestValue: ").append(toIndentedString(digestValue)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    dsRecord: ").append(toIndentedString(dsRecord)).append("\n");
    sb.append("    dnSKEYRecord: ").append(toIndentedString(dnSKEYRecord)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("KmsArn");
    openapiFields.add("Flag");
    openapiFields.add("SigningAlgorithmMnemonic");
    openapiFields.add("SigningAlgorithmType");
    openapiFields.add("DigestAlgorithmMnemonic");
    openapiFields.add("DigestAlgorithmType");
    openapiFields.add("KeyTag");
    openapiFields.add("DigestValue");
    openapiFields.add("PublicKey");
    openapiFields.add("DSRecord");
    openapiFields.add("DNSKEYRecord");
    openapiFields.add("Status");
    openapiFields.add("StatusMessage");
    openapiFields.add("CreatedDate");
    openapiFields.add("LastModifiedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeySigningKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeySigningKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeySigningKey is not found in the empty JSON string", KeySigningKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeySigningKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeySigningKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `KmsArn`
      if (jsonObj.get("KmsArn") != null && !jsonObj.get("KmsArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsArn"));
      }
      // validate the optional field `Flag`
      if (jsonObj.get("Flag") != null && !jsonObj.get("Flag").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Flag"));
      }
      // validate the optional field `SigningAlgorithmMnemonic`
      if (jsonObj.get("SigningAlgorithmMnemonic") != null && !jsonObj.get("SigningAlgorithmMnemonic").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SigningAlgorithmMnemonic"));
      }
      // validate the optional field `SigningAlgorithmType`
      if (jsonObj.get("SigningAlgorithmType") != null && !jsonObj.get("SigningAlgorithmType").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SigningAlgorithmType"));
      }
      // validate the optional field `DigestAlgorithmMnemonic`
      if (jsonObj.get("DigestAlgorithmMnemonic") != null && !jsonObj.get("DigestAlgorithmMnemonic").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DigestAlgorithmMnemonic"));
      }
      // validate the optional field `DigestAlgorithmType`
      if (jsonObj.get("DigestAlgorithmType") != null && !jsonObj.get("DigestAlgorithmType").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DigestAlgorithmType"));
      }
      // validate the optional field `KeyTag`
      if (jsonObj.get("KeyTag") != null && !jsonObj.get("KeyTag").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("KeyTag"));
      }
      // validate the optional field `DigestValue`
      if (jsonObj.get("DigestValue") != null && !jsonObj.get("DigestValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DigestValue"));
      }
      // validate the optional field `PublicKey`
      if (jsonObj.get("PublicKey") != null && !jsonObj.get("PublicKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublicKey"));
      }
      // validate the optional field `DSRecord`
      if (jsonObj.get("DSRecord") != null && !jsonObj.get("DSRecord").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DSRecord"));
      }
      // validate the optional field `DNSKEYRecord`
      if (jsonObj.get("DNSKEYRecord") != null && !jsonObj.get("DNSKEYRecord").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DNSKEYRecord"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StatusMessage`
      if (jsonObj.get("StatusMessage") != null && !jsonObj.get("StatusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusMessage"));
      }
      // validate the optional field `CreatedDate`
      if (jsonObj.get("CreatedDate") != null && !jsonObj.get("CreatedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedDate"));
      }
      // validate the optional field `LastModifiedDate`
      if (jsonObj.get("LastModifiedDate") != null && !jsonObj.get("LastModifiedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeySigningKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeySigningKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeySigningKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeySigningKey.class));

       return (TypeAdapter<T>) new TypeAdapter<KeySigningKey>() {
           @Override
           public void write(JsonWriter out, KeySigningKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeySigningKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeySigningKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeySigningKey
   * @throws IOException if the JSON string is invalid with respect to KeySigningKey
   */
  public static KeySigningKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeySigningKey.class);
  }

  /**
   * Convert an instance of KeySigningKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

