/*
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt; &lt;i&gt;Alias resource record sets only:&lt;/i&gt; Information about the Amazon Web Services resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to.&lt;/p&gt; &lt;p&gt;When creating resource record sets for a private hosted zone, note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For information about creating failover resource record sets in a private hosted zone, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html\&quot;&gt;Configuring Failover in a Private Hosted Zone&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:28.020907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AliasTarget {
  public static final String SERIALIZED_NAME_HOSTED_ZONE_ID = "HostedZoneId";
  @SerializedName(SERIALIZED_NAME_HOSTED_ZONE_ID)
  private String hostedZoneId;

  public static final String SERIALIZED_NAME_DN_S_NAME = "DNSName";
  @SerializedName(SERIALIZED_NAME_DN_S_NAME)
  private String dnSName;

  public static final String SERIALIZED_NAME_EVALUATE_TARGET_HEALTH = "EvaluateTargetHealth";
  @SerializedName(SERIALIZED_NAME_EVALUATE_TARGET_HEALTH)
  private Boolean evaluateTargetHealth;

  public AliasTarget() {
  }

  public AliasTarget hostedZoneId(String hostedZoneId) {
    this.hostedZoneId = hostedZoneId;
    return this;
  }

  /**
   * Get hostedZoneId
   * @return hostedZoneId
   */
  @javax.annotation.Nonnull
  public String getHostedZoneId() {
    return hostedZoneId;
  }

  public void setHostedZoneId(String hostedZoneId) {
    this.hostedZoneId = hostedZoneId;
  }


  public AliasTarget dnSName(String dnSName) {
    this.dnSName = dnSName;
    return this;
  }

  /**
   * Get dnSName
   * @return dnSName
   */
  @javax.annotation.Nonnull
  public String getDnSName() {
    return dnSName;
  }

  public void setDnSName(String dnSName) {
    this.dnSName = dnSName;
  }


  public AliasTarget evaluateTargetHealth(Boolean evaluateTargetHealth) {
    this.evaluateTargetHealth = evaluateTargetHealth;
    return this;
  }

  /**
   * Get evaluateTargetHealth
   * @return evaluateTargetHealth
   */
  @javax.annotation.Nonnull
  public Boolean getEvaluateTargetHealth() {
    return evaluateTargetHealth;
  }

  public void setEvaluateTargetHealth(Boolean evaluateTargetHealth) {
    this.evaluateTargetHealth = evaluateTargetHealth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AliasTarget aliasTarget = (AliasTarget) o;
    return Objects.equals(this.hostedZoneId, aliasTarget.hostedZoneId) &&
        Objects.equals(this.dnSName, aliasTarget.dnSName) &&
        Objects.equals(this.evaluateTargetHealth, aliasTarget.evaluateTargetHealth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostedZoneId, dnSName, evaluateTargetHealth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AliasTarget {\n");
    sb.append("    hostedZoneId: ").append(toIndentedString(hostedZoneId)).append("\n");
    sb.append("    dnSName: ").append(toIndentedString(dnSName)).append("\n");
    sb.append("    evaluateTargetHealth: ").append(toIndentedString(evaluateTargetHealth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HostedZoneId");
    openapiFields.add("DNSName");
    openapiFields.add("EvaluateTargetHealth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HostedZoneId");
    openapiRequiredFields.add("DNSName");
    openapiRequiredFields.add("EvaluateTargetHealth");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AliasTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AliasTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AliasTarget is not found in the empty JSON string", AliasTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AliasTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AliasTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AliasTarget.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `HostedZoneId`
      String.validateJsonElement(jsonObj.get("HostedZoneId"));
      // validate the required field `DNSName`
      String.validateJsonElement(jsonObj.get("DNSName"));
      // validate the required field `EvaluateTargetHealth`
      Boolean.validateJsonElement(jsonObj.get("EvaluateTargetHealth"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AliasTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AliasTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AliasTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AliasTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<AliasTarget>() {
           @Override
           public void write(JsonWriter out, AliasTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AliasTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AliasTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AliasTarget
   * @throws IOException if the JSON string is invalid with respect to AliasTarget
   */
  public static AliasTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AliasTarget.class);
  }

  /**
   * Convert an instance of AliasTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

