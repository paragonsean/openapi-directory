/*
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AssociateVPCWithHostedZoneRequestVPC;
import org.openapitools.client.model.CreateHostedZoneRequestHostedZoneConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateHostedZoneRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:28.020907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateHostedZoneRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_V_P_C = "VPC";
  @SerializedName(SERIALIZED_NAME_V_P_C)
  private AssociateVPCWithHostedZoneRequestVPC VPC;

  public static final String SERIALIZED_NAME_CALLER_REFERENCE = "CallerReference";
  @SerializedName(SERIALIZED_NAME_CALLER_REFERENCE)
  private String callerReference;

  public static final String SERIALIZED_NAME_HOSTED_ZONE_CONFIG = "HostedZoneConfig";
  @SerializedName(SERIALIZED_NAME_HOSTED_ZONE_CONFIG)
  private CreateHostedZoneRequestHostedZoneConfig hostedZoneConfig;

  public static final String SERIALIZED_NAME_DELEGATION_SET_ID = "DelegationSetId";
  @SerializedName(SERIALIZED_NAME_DELEGATION_SET_ID)
  private String delegationSetId;

  public CreateHostedZoneRequest() {
  }

  public CreateHostedZoneRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * &lt;p&gt;The name of the domain. Specify a fully qualified domain name, for example, &lt;i&gt;www.example.com&lt;/i&gt;. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats &lt;i&gt;www.example.com&lt;/i&gt; (without a trailing dot) and &lt;i&gt;www.example.com.&lt;/i&gt; (with a trailing dot) as identical.&lt;/p&gt; &lt;p&gt;If you&#39;re creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name servers for your domain to the set of &lt;code&gt;NameServers&lt;/code&gt; that &lt;code&gt;CreateHostedZone&lt;/code&gt; returns in &lt;code&gt;DelegationSet&lt;/code&gt;.&lt;/p&gt;
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateHostedZoneRequest VPC(AssociateVPCWithHostedZoneRequestVPC VPC) {
    this.VPC = VPC;
    return this;
  }

  /**
   * Get VPC
   * @return VPC
   */
  @javax.annotation.Nullable
  public AssociateVPCWithHostedZoneRequestVPC getVPC() {
    return VPC;
  }

  public void setVPC(AssociateVPCWithHostedZoneRequestVPC VPC) {
    this.VPC = VPC;
  }


  public CreateHostedZoneRequest callerReference(String callerReference) {
    this.callerReference = callerReference;
    return this;
  }

  /**
   * A unique string that identifies the request and that allows failed &lt;code&gt;CreateHostedZone&lt;/code&gt; requests to be retried without the risk of executing the operation twice. You must use a unique &lt;code&gt;CallerReference&lt;/code&gt; string every time you submit a &lt;code&gt;CreateHostedZone&lt;/code&gt; request. &lt;code&gt;CallerReference&lt;/code&gt; can be any unique string, for example, a date/time stamp.
   * @return callerReference
   */
  @javax.annotation.Nonnull
  public String getCallerReference() {
    return callerReference;
  }

  public void setCallerReference(String callerReference) {
    this.callerReference = callerReference;
  }


  public CreateHostedZoneRequest hostedZoneConfig(CreateHostedZoneRequestHostedZoneConfig hostedZoneConfig) {
    this.hostedZoneConfig = hostedZoneConfig;
    return this;
  }

  /**
   * Get hostedZoneConfig
   * @return hostedZoneConfig
   */
  @javax.annotation.Nullable
  public CreateHostedZoneRequestHostedZoneConfig getHostedZoneConfig() {
    return hostedZoneConfig;
  }

  public void setHostedZoneConfig(CreateHostedZoneRequestHostedZoneConfig hostedZoneConfig) {
    this.hostedZoneConfig = hostedZoneConfig;
  }


  public CreateHostedZoneRequest delegationSetId(String delegationSetId) {
    this.delegationSetId = delegationSetId;
    return this;
  }

  /**
   * &lt;p&gt;If you want to associate a reusable delegation set with this hosted zone, the ID that Amazon Route 53 assigned to the reusable delegation set when you created it. For more information about reusable delegation sets, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateReusableDelegationSet.html\&quot;&gt;CreateReusableDelegationSet&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you are using a reusable delegation set to create a public hosted zone for a subdomain, make sure that the parent hosted zone doesn&#39;t use one or more of the same name servers. If you have overlapping nameservers, the operation will cause a &lt;code&gt;ConflictingDomainsExist&lt;/code&gt; error.&lt;/p&gt;
   * @return delegationSetId
   */
  @javax.annotation.Nullable
  public String getDelegationSetId() {
    return delegationSetId;
  }

  public void setDelegationSetId(String delegationSetId) {
    this.delegationSetId = delegationSetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateHostedZoneRequest createHostedZoneRequest = (CreateHostedZoneRequest) o;
    return Objects.equals(this.name, createHostedZoneRequest.name) &&
        Objects.equals(this.VPC, createHostedZoneRequest.VPC) &&
        Objects.equals(this.callerReference, createHostedZoneRequest.callerReference) &&
        Objects.equals(this.hostedZoneConfig, createHostedZoneRequest.hostedZoneConfig) &&
        Objects.equals(this.delegationSetId, createHostedZoneRequest.delegationSetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, VPC, callerReference, hostedZoneConfig, delegationSetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateHostedZoneRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    VPC: ").append(toIndentedString(VPC)).append("\n");
    sb.append("    callerReference: ").append(toIndentedString(callerReference)).append("\n");
    sb.append("    hostedZoneConfig: ").append(toIndentedString(hostedZoneConfig)).append("\n");
    sb.append("    delegationSetId: ").append(toIndentedString(delegationSetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("VPC");
    openapiFields.add("CallerReference");
    openapiFields.add("HostedZoneConfig");
    openapiFields.add("DelegationSetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("CallerReference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateHostedZoneRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateHostedZoneRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateHostedZoneRequest is not found in the empty JSON string", CreateHostedZoneRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateHostedZoneRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateHostedZoneRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateHostedZoneRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `VPC`
      if (jsonObj.get("VPC") != null && !jsonObj.get("VPC").isJsonNull()) {
        AssociateVPCWithHostedZoneRequestVPC.validateJsonElement(jsonObj.get("VPC"));
      }
      if (!jsonObj.get("CallerReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallerReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallerReference").toString()));
      }
      // validate the optional field `HostedZoneConfig`
      if (jsonObj.get("HostedZoneConfig") != null && !jsonObj.get("HostedZoneConfig").isJsonNull()) {
        CreateHostedZoneRequestHostedZoneConfig.validateJsonElement(jsonObj.get("HostedZoneConfig"));
      }
      if ((jsonObj.get("DelegationSetId") != null && !jsonObj.get("DelegationSetId").isJsonNull()) && !jsonObj.get("DelegationSetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DelegationSetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DelegationSetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateHostedZoneRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateHostedZoneRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateHostedZoneRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateHostedZoneRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateHostedZoneRequest>() {
           @Override
           public void write(JsonWriter out, CreateHostedZoneRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateHostedZoneRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateHostedZoneRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateHostedZoneRequest
   * @throws IOException if the JSON string is invalid with respect to CreateHostedZoneRequest
   */
  public static CreateHostedZoneRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateHostedZoneRequest.class);
  }

  /**
   * Convert an instance of CreateHostedZoneRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

