/*
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RRType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A complex type that contains the response information for the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:28.020907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListTrafficPolicyInstancesResponse {
  public static final String SERIALIZED_NAME_TRAFFIC_POLICY_INSTANCES = "TrafficPolicyInstances";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_POLICY_INSTANCES)
  private List trafficPolicyInstances;

  public static final String SERIALIZED_NAME_HOSTED_ZONE_ID_MARKER = "HostedZoneIdMarker";
  @SerializedName(SERIALIZED_NAME_HOSTED_ZONE_ID_MARKER)
  private String hostedZoneIdMarker;

  public static final String SERIALIZED_NAME_TRAFFIC_POLICY_INSTANCE_NAME_MARKER = "TrafficPolicyInstanceNameMarker";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_POLICY_INSTANCE_NAME_MARKER)
  private String trafficPolicyInstanceNameMarker;

  public static final String SERIALIZED_NAME_TRAFFIC_POLICY_INSTANCE_TYPE_MARKER = "TrafficPolicyInstanceTypeMarker";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_POLICY_INSTANCE_TYPE_MARKER)
  private RRType trafficPolicyInstanceTypeMarker;

  public static final String SERIALIZED_NAME_IS_TRUNCATED = "IsTruncated";
  @SerializedName(SERIALIZED_NAME_IS_TRUNCATED)
  private Boolean isTruncated;

  public static final String SERIALIZED_NAME_MAX_ITEMS = "MaxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  private String maxItems;

  public ListTrafficPolicyInstancesResponse() {
  }

  public ListTrafficPolicyInstancesResponse trafficPolicyInstances(List trafficPolicyInstances) {
    this.trafficPolicyInstances = trafficPolicyInstances;
    return this;
  }

  /**
   * Get trafficPolicyInstances
   * @return trafficPolicyInstances
   */
  @javax.annotation.Nonnull
  public List getTrafficPolicyInstances() {
    return trafficPolicyInstances;
  }

  public void setTrafficPolicyInstances(List trafficPolicyInstances) {
    this.trafficPolicyInstances = trafficPolicyInstances;
  }


  public ListTrafficPolicyInstancesResponse hostedZoneIdMarker(String hostedZoneIdMarker) {
    this.hostedZoneIdMarker = hostedZoneIdMarker;
    return this;
  }

  /**
   * Get hostedZoneIdMarker
   * @return hostedZoneIdMarker
   */
  @javax.annotation.Nullable
  public String getHostedZoneIdMarker() {
    return hostedZoneIdMarker;
  }

  public void setHostedZoneIdMarker(String hostedZoneIdMarker) {
    this.hostedZoneIdMarker = hostedZoneIdMarker;
  }


  public ListTrafficPolicyInstancesResponse trafficPolicyInstanceNameMarker(String trafficPolicyInstanceNameMarker) {
    this.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker;
    return this;
  }

  /**
   * Get trafficPolicyInstanceNameMarker
   * @return trafficPolicyInstanceNameMarker
   */
  @javax.annotation.Nullable
  public String getTrafficPolicyInstanceNameMarker() {
    return trafficPolicyInstanceNameMarker;
  }

  public void setTrafficPolicyInstanceNameMarker(String trafficPolicyInstanceNameMarker) {
    this.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker;
  }


  public ListTrafficPolicyInstancesResponse trafficPolicyInstanceTypeMarker(RRType trafficPolicyInstanceTypeMarker) {
    this.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker;
    return this;
  }

  /**
   * Get trafficPolicyInstanceTypeMarker
   * @return trafficPolicyInstanceTypeMarker
   */
  @javax.annotation.Nullable
  public RRType getTrafficPolicyInstanceTypeMarker() {
    return trafficPolicyInstanceTypeMarker;
  }

  public void setTrafficPolicyInstanceTypeMarker(RRType trafficPolicyInstanceTypeMarker) {
    this.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker;
  }


  public ListTrafficPolicyInstancesResponse isTruncated(Boolean isTruncated) {
    this.isTruncated = isTruncated;
    return this;
  }

  /**
   * Get isTruncated
   * @return isTruncated
   */
  @javax.annotation.Nonnull
  public Boolean getIsTruncated() {
    return isTruncated;
  }

  public void setIsTruncated(Boolean isTruncated) {
    this.isTruncated = isTruncated;
  }


  public ListTrafficPolicyInstancesResponse maxItems(String maxItems) {
    this.maxItems = maxItems;
    return this;
  }

  /**
   * Get maxItems
   * @return maxItems
   */
  @javax.annotation.Nonnull
  public String getMaxItems() {
    return maxItems;
  }

  public void setMaxItems(String maxItems) {
    this.maxItems = maxItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTrafficPolicyInstancesResponse listTrafficPolicyInstancesResponse = (ListTrafficPolicyInstancesResponse) o;
    return Objects.equals(this.trafficPolicyInstances, listTrafficPolicyInstancesResponse.trafficPolicyInstances) &&
        Objects.equals(this.hostedZoneIdMarker, listTrafficPolicyInstancesResponse.hostedZoneIdMarker) &&
        Objects.equals(this.trafficPolicyInstanceNameMarker, listTrafficPolicyInstancesResponse.trafficPolicyInstanceNameMarker) &&
        Objects.equals(this.trafficPolicyInstanceTypeMarker, listTrafficPolicyInstancesResponse.trafficPolicyInstanceTypeMarker) &&
        Objects.equals(this.isTruncated, listTrafficPolicyInstancesResponse.isTruncated) &&
        Objects.equals(this.maxItems, listTrafficPolicyInstancesResponse.maxItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trafficPolicyInstances, hostedZoneIdMarker, trafficPolicyInstanceNameMarker, trafficPolicyInstanceTypeMarker, isTruncated, maxItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTrafficPolicyInstancesResponse {\n");
    sb.append("    trafficPolicyInstances: ").append(toIndentedString(trafficPolicyInstances)).append("\n");
    sb.append("    hostedZoneIdMarker: ").append(toIndentedString(hostedZoneIdMarker)).append("\n");
    sb.append("    trafficPolicyInstanceNameMarker: ").append(toIndentedString(trafficPolicyInstanceNameMarker)).append("\n");
    sb.append("    trafficPolicyInstanceTypeMarker: ").append(toIndentedString(trafficPolicyInstanceTypeMarker)).append("\n");
    sb.append("    isTruncated: ").append(toIndentedString(isTruncated)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TrafficPolicyInstances");
    openapiFields.add("HostedZoneIdMarker");
    openapiFields.add("TrafficPolicyInstanceNameMarker");
    openapiFields.add("TrafficPolicyInstanceTypeMarker");
    openapiFields.add("IsTruncated");
    openapiFields.add("MaxItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TrafficPolicyInstances");
    openapiRequiredFields.add("IsTruncated");
    openapiRequiredFields.add("MaxItems");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListTrafficPolicyInstancesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListTrafficPolicyInstancesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListTrafficPolicyInstancesResponse is not found in the empty JSON string", ListTrafficPolicyInstancesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListTrafficPolicyInstancesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListTrafficPolicyInstancesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListTrafficPolicyInstancesResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TrafficPolicyInstances`
      List.validateJsonElement(jsonObj.get("TrafficPolicyInstances"));
      // validate the optional field `HostedZoneIdMarker`
      if (jsonObj.get("HostedZoneIdMarker") != null && !jsonObj.get("HostedZoneIdMarker").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HostedZoneIdMarker"));
      }
      // validate the optional field `TrafficPolicyInstanceNameMarker`
      if (jsonObj.get("TrafficPolicyInstanceNameMarker") != null && !jsonObj.get("TrafficPolicyInstanceNameMarker").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TrafficPolicyInstanceNameMarker"));
      }
      // validate the optional field `TrafficPolicyInstanceTypeMarker`
      if (jsonObj.get("TrafficPolicyInstanceTypeMarker") != null && !jsonObj.get("TrafficPolicyInstanceTypeMarker").isJsonNull()) {
        RRType.validateJsonElement(jsonObj.get("TrafficPolicyInstanceTypeMarker"));
      }
      // validate the required field `IsTruncated`
      Boolean.validateJsonElement(jsonObj.get("IsTruncated"));
      // validate the required field `MaxItems`
      String.validateJsonElement(jsonObj.get("MaxItems"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListTrafficPolicyInstancesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListTrafficPolicyInstancesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListTrafficPolicyInstancesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListTrafficPolicyInstancesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListTrafficPolicyInstancesResponse>() {
           @Override
           public void write(JsonWriter out, ListTrafficPolicyInstancesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListTrafficPolicyInstancesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListTrafficPolicyInstancesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListTrafficPolicyInstancesResponse
   * @throws IOException if the JSON string is invalid with respect to ListTrafficPolicyInstancesResponse
   */
  public static ListTrafficPolicyInstancesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTrafficPolicyInstancesResponse.class);
  }

  /**
   * Convert an instance of ListTrafficPolicyInstancesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

