/*
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RRType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:28.020907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_HOSTED_ZONE_ID = "HostedZoneId";
  @SerializedName(SERIALIZED_NAME_HOSTED_ZONE_ID)
  private String hostedZoneId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_T_T_L = "TTL";
  @SerializedName(SERIALIZED_NAME_T_T_L)
  private Integer TTL;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_TRAFFIC_POLICY_ID = "TrafficPolicyId";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_POLICY_ID)
  private String trafficPolicyId;

  public static final String SERIALIZED_NAME_TRAFFIC_POLICY_VERSION = "TrafficPolicyVersion";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_POLICY_VERSION)
  private Integer trafficPolicyVersion;

  public static final String SERIALIZED_NAME_TRAFFIC_POLICY_TYPE = "TrafficPolicyType";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_POLICY_TYPE)
  private RRType trafficPolicyType;

  public UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance() {
  }

  public UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance hostedZoneId(String hostedZoneId) {
    this.hostedZoneId = hostedZoneId;
    return this;
  }

  /**
   * Get hostedZoneId
   * @return hostedZoneId
   */
  @javax.annotation.Nonnull
  public String getHostedZoneId() {
    return hostedZoneId;
  }

  public void setHostedZoneId(String hostedZoneId) {
    this.hostedZoneId = hostedZoneId;
  }


  public UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance TTL(Integer TTL) {
    this.TTL = TTL;
    return this;
  }

  /**
   * Get TTL
   * @return TTL
   */
  @javax.annotation.Nonnull
  public Integer getTTL() {
    return TTL;
  }

  public void setTTL(Integer TTL) {
    this.TTL = TTL;
  }


  public UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance trafficPolicyId(String trafficPolicyId) {
    this.trafficPolicyId = trafficPolicyId;
    return this;
  }

  /**
   * Get trafficPolicyId
   * @return trafficPolicyId
   */
  @javax.annotation.Nonnull
  public String getTrafficPolicyId() {
    return trafficPolicyId;
  }

  public void setTrafficPolicyId(String trafficPolicyId) {
    this.trafficPolicyId = trafficPolicyId;
  }


  public UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance trafficPolicyVersion(Integer trafficPolicyVersion) {
    this.trafficPolicyVersion = trafficPolicyVersion;
    return this;
  }

  /**
   * Get trafficPolicyVersion
   * @return trafficPolicyVersion
   */
  @javax.annotation.Nonnull
  public Integer getTrafficPolicyVersion() {
    return trafficPolicyVersion;
  }

  public void setTrafficPolicyVersion(Integer trafficPolicyVersion) {
    this.trafficPolicyVersion = trafficPolicyVersion;
  }


  public UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance trafficPolicyType(RRType trafficPolicyType) {
    this.trafficPolicyType = trafficPolicyType;
    return this;
  }

  /**
   * Get trafficPolicyType
   * @return trafficPolicyType
   */
  @javax.annotation.Nonnull
  public RRType getTrafficPolicyType() {
    return trafficPolicyType;
  }

  public void setTrafficPolicyType(RRType trafficPolicyType) {
    this.trafficPolicyType = trafficPolicyType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance updateTrafficPolicyInstanceResponseTrafficPolicyInstance = (UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance) o;
    return Objects.equals(this.id, updateTrafficPolicyInstanceResponseTrafficPolicyInstance.id) &&
        Objects.equals(this.hostedZoneId, updateTrafficPolicyInstanceResponseTrafficPolicyInstance.hostedZoneId) &&
        Objects.equals(this.name, updateTrafficPolicyInstanceResponseTrafficPolicyInstance.name) &&
        Objects.equals(this.TTL, updateTrafficPolicyInstanceResponseTrafficPolicyInstance.TTL) &&
        Objects.equals(this.state, updateTrafficPolicyInstanceResponseTrafficPolicyInstance.state) &&
        Objects.equals(this.message, updateTrafficPolicyInstanceResponseTrafficPolicyInstance.message) &&
        Objects.equals(this.trafficPolicyId, updateTrafficPolicyInstanceResponseTrafficPolicyInstance.trafficPolicyId) &&
        Objects.equals(this.trafficPolicyVersion, updateTrafficPolicyInstanceResponseTrafficPolicyInstance.trafficPolicyVersion) &&
        Objects.equals(this.trafficPolicyType, updateTrafficPolicyInstanceResponseTrafficPolicyInstance.trafficPolicyType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, hostedZoneId, name, TTL, state, message, trafficPolicyId, trafficPolicyVersion, trafficPolicyType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    hostedZoneId: ").append(toIndentedString(hostedZoneId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    TTL: ").append(toIndentedString(TTL)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    trafficPolicyId: ").append(toIndentedString(trafficPolicyId)).append("\n");
    sb.append("    trafficPolicyVersion: ").append(toIndentedString(trafficPolicyVersion)).append("\n");
    sb.append("    trafficPolicyType: ").append(toIndentedString(trafficPolicyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("HostedZoneId");
    openapiFields.add("Name");
    openapiFields.add("TTL");
    openapiFields.add("State");
    openapiFields.add("Message");
    openapiFields.add("TrafficPolicyId");
    openapiFields.add("TrafficPolicyVersion");
    openapiFields.add("TrafficPolicyType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("HostedZoneId");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("TTL");
    openapiRequiredFields.add("State");
    openapiRequiredFields.add("Message");
    openapiRequiredFields.add("TrafficPolicyId");
    openapiRequiredFields.add("TrafficPolicyVersion");
    openapiRequiredFields.add("TrafficPolicyType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance is not found in the empty JSON string", UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the required field `HostedZoneId`
      String.validateJsonElement(jsonObj.get("HostedZoneId"));
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `TTL`
      Integer.validateJsonElement(jsonObj.get("TTL"));
      // validate the required field `State`
      String.validateJsonElement(jsonObj.get("State"));
      // validate the required field `Message`
      String.validateJsonElement(jsonObj.get("Message"));
      // validate the required field `TrafficPolicyId`
      String.validateJsonElement(jsonObj.get("TrafficPolicyId"));
      // validate the required field `TrafficPolicyVersion`
      Integer.validateJsonElement(jsonObj.get("TrafficPolicyVersion"));
      // validate the required field `TrafficPolicyType`
      RRType.validateJsonElement(jsonObj.get("TrafficPolicyType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance>() {
           @Override
           public void write(JsonWriter out, UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance
   * @throws IOException if the JSON string is invalid with respect to UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance
   */
  public static UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance.class);
  }

  /**
   * Convert an instance of UpdateTrafficPolicyInstanceResponseTrafficPolicyInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

