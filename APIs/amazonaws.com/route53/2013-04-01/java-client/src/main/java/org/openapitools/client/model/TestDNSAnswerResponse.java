/*
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RRType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A complex type that contains the response to a &lt;code&gt;TestDNSAnswer&lt;/code&gt; request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:28.020907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestDNSAnswerResponse {
  public static final String SERIALIZED_NAME_NAMESERVER = "Nameserver";
  @SerializedName(SERIALIZED_NAME_NAMESERVER)
  private String nameserver;

  public static final String SERIALIZED_NAME_RECORD_NAME = "RecordName";
  @SerializedName(SERIALIZED_NAME_RECORD_NAME)
  private String recordName;

  public static final String SERIALIZED_NAME_RECORD_TYPE = "RecordType";
  @SerializedName(SERIALIZED_NAME_RECORD_TYPE)
  private RRType recordType;

  public static final String SERIALIZED_NAME_RECORD_DATA = "RecordData";
  @SerializedName(SERIALIZED_NAME_RECORD_DATA)
  private List recordData;

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "ResponseCode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private String responseCode;

  public static final String SERIALIZED_NAME_PROTOCOL = "Protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public TestDNSAnswerResponse() {
  }

  public TestDNSAnswerResponse nameserver(String nameserver) {
    this.nameserver = nameserver;
    return this;
  }

  /**
   * Get nameserver
   * @return nameserver
   */
  @javax.annotation.Nonnull
  public String getNameserver() {
    return nameserver;
  }

  public void setNameserver(String nameserver) {
    this.nameserver = nameserver;
  }


  public TestDNSAnswerResponse recordName(String recordName) {
    this.recordName = recordName;
    return this;
  }

  /**
   * Get recordName
   * @return recordName
   */
  @javax.annotation.Nonnull
  public String getRecordName() {
    return recordName;
  }

  public void setRecordName(String recordName) {
    this.recordName = recordName;
  }


  public TestDNSAnswerResponse recordType(RRType recordType) {
    this.recordType = recordType;
    return this;
  }

  /**
   * Get recordType
   * @return recordType
   */
  @javax.annotation.Nonnull
  public RRType getRecordType() {
    return recordType;
  }

  public void setRecordType(RRType recordType) {
    this.recordType = recordType;
  }


  public TestDNSAnswerResponse recordData(List recordData) {
    this.recordData = recordData;
    return this;
  }

  /**
   * Get recordData
   * @return recordData
   */
  @javax.annotation.Nonnull
  public List getRecordData() {
    return recordData;
  }

  public void setRecordData(List recordData) {
    this.recordData = recordData;
  }


  public TestDNSAnswerResponse responseCode(String responseCode) {
    this.responseCode = responseCode;
    return this;
  }

  /**
   * Get responseCode
   * @return responseCode
   */
  @javax.annotation.Nonnull
  public String getResponseCode() {
    return responseCode;
  }

  public void setResponseCode(String responseCode) {
    this.responseCode = responseCode;
  }


  public TestDNSAnswerResponse protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nonnull
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestDNSAnswerResponse testDNSAnswerResponse = (TestDNSAnswerResponse) o;
    return Objects.equals(this.nameserver, testDNSAnswerResponse.nameserver) &&
        Objects.equals(this.recordName, testDNSAnswerResponse.recordName) &&
        Objects.equals(this.recordType, testDNSAnswerResponse.recordType) &&
        Objects.equals(this.recordData, testDNSAnswerResponse.recordData) &&
        Objects.equals(this.responseCode, testDNSAnswerResponse.responseCode) &&
        Objects.equals(this.protocol, testDNSAnswerResponse.protocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nameserver, recordName, recordType, recordData, responseCode, protocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestDNSAnswerResponse {\n");
    sb.append("    nameserver: ").append(toIndentedString(nameserver)).append("\n");
    sb.append("    recordName: ").append(toIndentedString(recordName)).append("\n");
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    recordData: ").append(toIndentedString(recordData)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Nameserver");
    openapiFields.add("RecordName");
    openapiFields.add("RecordType");
    openapiFields.add("RecordData");
    openapiFields.add("ResponseCode");
    openapiFields.add("Protocol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Nameserver");
    openapiRequiredFields.add("RecordName");
    openapiRequiredFields.add("RecordType");
    openapiRequiredFields.add("RecordData");
    openapiRequiredFields.add("ResponseCode");
    openapiRequiredFields.add("Protocol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestDNSAnswerResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestDNSAnswerResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestDNSAnswerResponse is not found in the empty JSON string", TestDNSAnswerResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestDNSAnswerResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestDNSAnswerResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestDNSAnswerResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Nameserver`
      String.validateJsonElement(jsonObj.get("Nameserver"));
      // validate the required field `RecordName`
      String.validateJsonElement(jsonObj.get("RecordName"));
      // validate the required field `RecordType`
      RRType.validateJsonElement(jsonObj.get("RecordType"));
      // validate the required field `RecordData`
      List.validateJsonElement(jsonObj.get("RecordData"));
      // validate the required field `ResponseCode`
      String.validateJsonElement(jsonObj.get("ResponseCode"));
      // validate the required field `Protocol`
      String.validateJsonElement(jsonObj.get("Protocol"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestDNSAnswerResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestDNSAnswerResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestDNSAnswerResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestDNSAnswerResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TestDNSAnswerResponse>() {
           @Override
           public void write(JsonWriter out, TestDNSAnswerResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestDNSAnswerResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestDNSAnswerResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestDNSAnswerResponse
   * @throws IOException if the JSON string is invalid with respect to TestDNSAnswerResponse
   */
  public static TestDNSAnswerResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestDNSAnswerResponse.class);
  }

  /**
   * Convert an instance of TestDNSAnswerResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

