/*
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComparisonOperator;
import org.openapitools.client.model.Statistic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A complex type that contains information about the CloudWatch alarm that Amazon Route 53 is monitoring for this health check.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:28.020907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudWatchAlarmConfiguration {
  public static final String SERIALIZED_NAME_EVALUATION_PERIODS = "EvaluationPeriods";
  @SerializedName(SERIALIZED_NAME_EVALUATION_PERIODS)
  private Integer evaluationPeriods;

  public static final String SERIALIZED_NAME_THRESHOLD = "Threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private Double threshold;

  public static final String SERIALIZED_NAME_COMPARISON_OPERATOR = "ComparisonOperator";
  @SerializedName(SERIALIZED_NAME_COMPARISON_OPERATOR)
  private ComparisonOperator comparisonOperator;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_METRIC_NAME = "MetricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_NAMESPACE = "Namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_STATISTIC = "Statistic";
  @SerializedName(SERIALIZED_NAME_STATISTIC)
  private Statistic statistic;

  public static final String SERIALIZED_NAME_DIMENSIONS = "Dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List dimensions;

  public CloudWatchAlarmConfiguration() {
  }

  public CloudWatchAlarmConfiguration evaluationPeriods(Integer evaluationPeriods) {
    this.evaluationPeriods = evaluationPeriods;
    return this;
  }

  /**
   * Get evaluationPeriods
   * @return evaluationPeriods
   */
  @javax.annotation.Nonnull
  public Integer getEvaluationPeriods() {
    return evaluationPeriods;
  }

  public void setEvaluationPeriods(Integer evaluationPeriods) {
    this.evaluationPeriods = evaluationPeriods;
  }


  public CloudWatchAlarmConfiguration threshold(Double threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Get threshold
   * @return threshold
   */
  @javax.annotation.Nonnull
  public Double getThreshold() {
    return threshold;
  }

  public void setThreshold(Double threshold) {
    this.threshold = threshold;
  }


  public CloudWatchAlarmConfiguration comparisonOperator(ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
    return this;
  }

  /**
   * Get comparisonOperator
   * @return comparisonOperator
   */
  @javax.annotation.Nonnull
  public ComparisonOperator getComparisonOperator() {
    return comparisonOperator;
  }

  public void setComparisonOperator(ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
  }


  public CloudWatchAlarmConfiguration period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nonnull
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public CloudWatchAlarmConfiguration metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Get metricName
   * @return metricName
   */
  @javax.annotation.Nonnull
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public CloudWatchAlarmConfiguration namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nonnull
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public CloudWatchAlarmConfiguration statistic(Statistic statistic) {
    this.statistic = statistic;
    return this;
  }

  /**
   * Get statistic
   * @return statistic
   */
  @javax.annotation.Nonnull
  public Statistic getStatistic() {
    return statistic;
  }

  public void setStatistic(Statistic statistic) {
    this.statistic = statistic;
  }


  public CloudWatchAlarmConfiguration dimensions(List dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List getDimensions() {
    return dimensions;
  }

  public void setDimensions(List dimensions) {
    this.dimensions = dimensions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudWatchAlarmConfiguration cloudWatchAlarmConfiguration = (CloudWatchAlarmConfiguration) o;
    return Objects.equals(this.evaluationPeriods, cloudWatchAlarmConfiguration.evaluationPeriods) &&
        Objects.equals(this.threshold, cloudWatchAlarmConfiguration.threshold) &&
        Objects.equals(this.comparisonOperator, cloudWatchAlarmConfiguration.comparisonOperator) &&
        Objects.equals(this.period, cloudWatchAlarmConfiguration.period) &&
        Objects.equals(this.metricName, cloudWatchAlarmConfiguration.metricName) &&
        Objects.equals(this.namespace, cloudWatchAlarmConfiguration.namespace) &&
        Objects.equals(this.statistic, cloudWatchAlarmConfiguration.statistic) &&
        Objects.equals(this.dimensions, cloudWatchAlarmConfiguration.dimensions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluationPeriods, threshold, comparisonOperator, period, metricName, namespace, statistic, dimensions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudWatchAlarmConfiguration {\n");
    sb.append("    evaluationPeriods: ").append(toIndentedString(evaluationPeriods)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    comparisonOperator: ").append(toIndentedString(comparisonOperator)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    statistic: ").append(toIndentedString(statistic)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EvaluationPeriods");
    openapiFields.add("Threshold");
    openapiFields.add("ComparisonOperator");
    openapiFields.add("Period");
    openapiFields.add("MetricName");
    openapiFields.add("Namespace");
    openapiFields.add("Statistic");
    openapiFields.add("Dimensions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EvaluationPeriods");
    openapiRequiredFields.add("Threshold");
    openapiRequiredFields.add("ComparisonOperator");
    openapiRequiredFields.add("Period");
    openapiRequiredFields.add("MetricName");
    openapiRequiredFields.add("Namespace");
    openapiRequiredFields.add("Statistic");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudWatchAlarmConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudWatchAlarmConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudWatchAlarmConfiguration is not found in the empty JSON string", CloudWatchAlarmConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudWatchAlarmConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudWatchAlarmConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CloudWatchAlarmConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `EvaluationPeriods`
      Integer.validateJsonElement(jsonObj.get("EvaluationPeriods"));
      // validate the required field `Threshold`
      Double.validateJsonElement(jsonObj.get("Threshold"));
      // validate the required field `ComparisonOperator`
      ComparisonOperator.validateJsonElement(jsonObj.get("ComparisonOperator"));
      // validate the required field `Period`
      Integer.validateJsonElement(jsonObj.get("Period"));
      // validate the required field `MetricName`
      String.validateJsonElement(jsonObj.get("MetricName"));
      // validate the required field `Namespace`
      String.validateJsonElement(jsonObj.get("Namespace"));
      // validate the required field `Statistic`
      Statistic.validateJsonElement(jsonObj.get("Statistic"));
      // validate the optional field `Dimensions`
      if (jsonObj.get("Dimensions") != null && !jsonObj.get("Dimensions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Dimensions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudWatchAlarmConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudWatchAlarmConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudWatchAlarmConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudWatchAlarmConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudWatchAlarmConfiguration>() {
           @Override
           public void write(JsonWriter out, CloudWatchAlarmConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudWatchAlarmConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudWatchAlarmConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudWatchAlarmConfiguration
   * @throws IOException if the JSON string is invalid with respect to CloudWatchAlarmConfiguration
   */
  public static CloudWatchAlarmConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudWatchAlarmConfiguration.class);
  }

  /**
   * Convert an instance of CloudWatchAlarmConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

