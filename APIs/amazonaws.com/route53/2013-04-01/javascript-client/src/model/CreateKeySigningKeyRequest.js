/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateKeySigningKeyRequest model module.
 * @module model/CreateKeySigningKeyRequest
 * @version 2013-04-01
 */
class CreateKeySigningKeyRequest {
    /**
     * Constructs a new <code>CreateKeySigningKeyRequest</code>.
     * @alias module:model/CreateKeySigningKeyRequest
     * @param callerReference {String} A unique string that identifies the request.
     * @param hostedZoneId {String} The unique string (ID) used to identify a hosted zone.
     * @param keyManagementServiceArn {String} <p>The Amazon resource name (ARN) for a customer managed key in Key Management Service (KMS). The <code>KeyManagementServiceArn</code> must be unique for each key-signing key (KSK) in a single hosted zone. To see an example of <code>KeyManagementServiceArn</code> that grants the correct permissions for DNSSEC, scroll down to <b>Example</b>. </p> <p>You must configure the customer managed customer managed key as follows:</p> <dl> <dt>Status</dt> <dd> <p>Enabled</p> </dd> <dt>Key spec</dt> <dd> <p>ECC_NIST_P256</p> </dd> <dt>Key usage</dt> <dd> <p>Sign and verify</p> </dd> <dt>Key policy</dt> <dd> <p>The key policy must give permission for the following actions:</p> <ul> <li> <p>DescribeKey</p> </li> <li> <p>GetPublicKey</p> </li> <li> <p>Sign</p> </li> </ul> <p>The key policy must also include the Amazon Route 53 service in the principal for your account. Specify the following:</p> <ul> <li> <p> <code>\"Service\": \"dnssec-route53.amazonaws.com\"</code> </p> </li> </ul> </dd> </dl> <p>For more information about working with a customer managed key in KMS, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html\">Key Management Service concepts</a>.</p>
     * @param name {String} A string used to identify a key-signing key (KSK). <code>Name</code> can include numbers, letters, and underscores (_). <code>Name</code> must be unique for each key-signing key in the same hosted zone.
     * @param status {String} A string specifying the initial status of the key-signing key (KSK). You can set the value to <code>ACTIVE</code> or <code>INACTIVE</code>.
     */
    constructor(callerReference, hostedZoneId, keyManagementServiceArn, name, status) { 
        
        CreateKeySigningKeyRequest.initialize(this, callerReference, hostedZoneId, keyManagementServiceArn, name, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, callerReference, hostedZoneId, keyManagementServiceArn, name, status) { 
        obj['CallerReference'] = callerReference;
        obj['HostedZoneId'] = hostedZoneId;
        obj['KeyManagementServiceArn'] = keyManagementServiceArn;
        obj['Name'] = name;
        obj['Status'] = status;
    }

    /**
     * Constructs a <code>CreateKeySigningKeyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateKeySigningKeyRequest} obj Optional instance to populate.
     * @return {module:model/CreateKeySigningKeyRequest} The populated <code>CreateKeySigningKeyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateKeySigningKeyRequest();

            if (data.hasOwnProperty('CallerReference')) {
                obj['CallerReference'] = ApiClient.convertToType(data['CallerReference'], 'String');
            }
            if (data.hasOwnProperty('HostedZoneId')) {
                obj['HostedZoneId'] = ApiClient.convertToType(data['HostedZoneId'], 'String');
            }
            if (data.hasOwnProperty('KeyManagementServiceArn')) {
                obj['KeyManagementServiceArn'] = ApiClient.convertToType(data['KeyManagementServiceArn'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateKeySigningKeyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateKeySigningKeyRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateKeySigningKeyRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CallerReference'] && !(typeof data['CallerReference'] === 'string' || data['CallerReference'] instanceof String)) {
            throw new Error("Expected the field `CallerReference` to be a primitive type in the JSON string but got " + data['CallerReference']);
        }
        // ensure the json data is a string
        if (data['HostedZoneId'] && !(typeof data['HostedZoneId'] === 'string' || data['HostedZoneId'] instanceof String)) {
            throw new Error("Expected the field `HostedZoneId` to be a primitive type in the JSON string but got " + data['HostedZoneId']);
        }
        // ensure the json data is a string
        if (data['KeyManagementServiceArn'] && !(typeof data['KeyManagementServiceArn'] === 'string' || data['KeyManagementServiceArn'] instanceof String)) {
            throw new Error("Expected the field `KeyManagementServiceArn` to be a primitive type in the JSON string but got " + data['KeyManagementServiceArn']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }

        return true;
    }


}

CreateKeySigningKeyRequest.RequiredProperties = ["CallerReference", "HostedZoneId", "KeyManagementServiceArn", "Name", "Status"];

/**
 * A unique string that identifies the request.
 * @member {String} CallerReference
 */
CreateKeySigningKeyRequest.prototype['CallerReference'] = undefined;

/**
 * The unique string (ID) used to identify a hosted zone.
 * @member {String} HostedZoneId
 */
CreateKeySigningKeyRequest.prototype['HostedZoneId'] = undefined;

/**
 * <p>The Amazon resource name (ARN) for a customer managed key in Key Management Service (KMS). The <code>KeyManagementServiceArn</code> must be unique for each key-signing key (KSK) in a single hosted zone. To see an example of <code>KeyManagementServiceArn</code> that grants the correct permissions for DNSSEC, scroll down to <b>Example</b>. </p> <p>You must configure the customer managed customer managed key as follows:</p> <dl> <dt>Status</dt> <dd> <p>Enabled</p> </dd> <dt>Key spec</dt> <dd> <p>ECC_NIST_P256</p> </dd> <dt>Key usage</dt> <dd> <p>Sign and verify</p> </dd> <dt>Key policy</dt> <dd> <p>The key policy must give permission for the following actions:</p> <ul> <li> <p>DescribeKey</p> </li> <li> <p>GetPublicKey</p> </li> <li> <p>Sign</p> </li> </ul> <p>The key policy must also include the Amazon Route 53 service in the principal for your account. Specify the following:</p> <ul> <li> <p> <code>\"Service\": \"dnssec-route53.amazonaws.com\"</code> </p> </li> </ul> </dd> </dl> <p>For more information about working with a customer managed key in KMS, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html\">Key Management Service concepts</a>.</p>
 * @member {String} KeyManagementServiceArn
 */
CreateKeySigningKeyRequest.prototype['KeyManagementServiceArn'] = undefined;

/**
 * A string used to identify a key-signing key (KSK). <code>Name</code> can include numbers, letters, and underscores (_). <code>Name</code> must be unique for each key-signing key in the same hosted zone.
 * @member {String} Name
 */
CreateKeySigningKeyRequest.prototype['Name'] = undefined;

/**
 * A string specifying the initial status of the key-signing key (KSK). You can set the value to <code>ACTIVE</code> or <code>INACTIVE</code>.
 * @member {String} Status
 */
CreateKeySigningKeyRequest.prototype['Status'] = undefined;






export default CreateKeySigningKeyRequest;

