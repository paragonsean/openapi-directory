/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GeoLocation from './GeoLocation';

/**
 * The ResourceRecordSetGeoLocation model module.
 * @module model/ResourceRecordSetGeoLocation
 * @version 2013-04-01
 */
class ResourceRecordSetGeoLocation {
    /**
     * Constructs a new <code>ResourceRecordSetGeoLocation</code>.
     * @alias module:model/ResourceRecordSetGeoLocation
     * @implements module:model/GeoLocation
     */
    constructor() { 
        GeoLocation.initialize(this);
        ResourceRecordSetGeoLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceRecordSetGeoLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceRecordSetGeoLocation} obj Optional instance to populate.
     * @return {module:model/ResourceRecordSetGeoLocation} The populated <code>ResourceRecordSetGeoLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceRecordSetGeoLocation();
            GeoLocation.constructFromObject(data, obj);

            if (data.hasOwnProperty('ContinentCode')) {
                obj['ContinentCode'] = ApiClient.convertToType(data['ContinentCode'], 'String');
            }
            if (data.hasOwnProperty('CountryCode')) {
                obj['CountryCode'] = ApiClient.convertToType(data['CountryCode'], 'String');
            }
            if (data.hasOwnProperty('SubdivisionCode')) {
                obj['SubdivisionCode'] = ApiClient.convertToType(data['SubdivisionCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceRecordSetGeoLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceRecordSetGeoLocation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ContinentCode`
        if (data['ContinentCode']) { // data not null
          String.validateJSON(data['ContinentCode']);
        }
        // validate the optional field `CountryCode`
        if (data['CountryCode']) { // data not null
          String.validateJSON(data['CountryCode']);
        }
        // validate the optional field `SubdivisionCode`
        if (data['SubdivisionCode']) { // data not null
          String.validateJSON(data['SubdivisionCode']);
        }

        return true;
    }


}



/**
 * @member {String} ContinentCode
 */
ResourceRecordSetGeoLocation.prototype['ContinentCode'] = undefined;

/**
 * @member {String} CountryCode
 */
ResourceRecordSetGeoLocation.prototype['CountryCode'] = undefined;

/**
 * @member {String} SubdivisionCode
 */
ResourceRecordSetGeoLocation.prototype['SubdivisionCode'] = undefined;


// Implement GeoLocation interface:
/**
 * @member {String} ContinentCode
 */
GeoLocation.prototype['ContinentCode'] = undefined;
/**
 * @member {String} CountryCode
 */
GeoLocation.prototype['CountryCode'] = undefined;
/**
 * @member {String} SubdivisionCode
 */
GeoLocation.prototype['SubdivisionCode'] = undefined;




export default ResourceRecordSetGeoLocation;

