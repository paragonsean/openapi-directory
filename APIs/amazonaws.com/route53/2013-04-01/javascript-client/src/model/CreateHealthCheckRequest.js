/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateHealthCheckRequestHealthCheckConfig from './CreateHealthCheckRequestHealthCheckConfig';

/**
 * The CreateHealthCheckRequest model module.
 * @module model/CreateHealthCheckRequest
 * @version 2013-04-01
 */
class CreateHealthCheckRequest {
    /**
     * Constructs a new <code>CreateHealthCheckRequest</code>.
     * @alias module:model/CreateHealthCheckRequest
     * @param callerReference {String} <p>A unique string that identifies the request and that allows you to retry a failed <code>CreateHealthCheck</code> request without the risk of creating two identical health checks:</p> <ul> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> and settings as a previous request, and if the health check doesn't exist, Amazon Route 53 creates the health check. If the health check does exist, Route 53 returns the settings for the existing health check.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> as a deleted health check, regardless of the settings, Route 53 returns a <code>HealthCheckAlreadyExists</code> error.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> as an existing health check but with different settings, Route 53 returns a <code>HealthCheckAlreadyExists</code> error.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with a unique <code>CallerReference</code> but settings identical to an existing health check, Route 53 creates the health check.</p> </li> </ul>
     * @param healthCheckConfig {module:model/CreateHealthCheckRequestHealthCheckConfig} 
     */
    constructor(callerReference, healthCheckConfig) { 
        
        CreateHealthCheckRequest.initialize(this, callerReference, healthCheckConfig);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, callerReference, healthCheckConfig) { 
        obj['CallerReference'] = callerReference;
        obj['HealthCheckConfig'] = healthCheckConfig;
    }

    /**
     * Constructs a <code>CreateHealthCheckRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateHealthCheckRequest} obj Optional instance to populate.
     * @return {module:model/CreateHealthCheckRequest} The populated <code>CreateHealthCheckRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateHealthCheckRequest();

            if (data.hasOwnProperty('CallerReference')) {
                obj['CallerReference'] = ApiClient.convertToType(data['CallerReference'], 'String');
            }
            if (data.hasOwnProperty('HealthCheckConfig')) {
                obj['HealthCheckConfig'] = CreateHealthCheckRequestHealthCheckConfig.constructFromObject(data['HealthCheckConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateHealthCheckRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateHealthCheckRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateHealthCheckRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CallerReference'] && !(typeof data['CallerReference'] === 'string' || data['CallerReference'] instanceof String)) {
            throw new Error("Expected the field `CallerReference` to be a primitive type in the JSON string but got " + data['CallerReference']);
        }
        // validate the optional field `HealthCheckConfig`
        if (data['HealthCheckConfig']) { // data not null
          CreateHealthCheckRequestHealthCheckConfig.validateJSON(data['HealthCheckConfig']);
        }

        return true;
    }


}

CreateHealthCheckRequest.RequiredProperties = ["CallerReference", "HealthCheckConfig"];

/**
 * <p>A unique string that identifies the request and that allows you to retry a failed <code>CreateHealthCheck</code> request without the risk of creating two identical health checks:</p> <ul> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> and settings as a previous request, and if the health check doesn't exist, Amazon Route 53 creates the health check. If the health check does exist, Route 53 returns the settings for the existing health check.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> as a deleted health check, regardless of the settings, Route 53 returns a <code>HealthCheckAlreadyExists</code> error.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> as an existing health check but with different settings, Route 53 returns a <code>HealthCheckAlreadyExists</code> error.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with a unique <code>CallerReference</code> but settings identical to an existing health check, Route 53 creates the health check.</p> </li> </ul>
 * @member {String} CallerReference
 */
CreateHealthCheckRequest.prototype['CallerReference'] = undefined;

/**
 * @member {module:model/CreateHealthCheckRequestHealthCheckConfig} HealthCheckConfig
 */
CreateHealthCheckRequest.prototype['HealthCheckConfig'] = undefined;






export default CreateHealthCheckRequest;

