/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CidrCollectionChange from './CidrCollectionChange';

/**
 * The ChangeCidrCollectionRequest model module.
 * @module model/ChangeCidrCollectionRequest
 * @version 2013-04-01
 */
class ChangeCidrCollectionRequest {
    /**
     * Constructs a new <code>ChangeCidrCollectionRequest</code>.
     * @alias module:model/ChangeCidrCollectionRequest
     * @param changes {Array.<module:model/CidrCollectionChange>}  Information about changes to a CIDR collection.
     */
    constructor(changes) { 
        
        ChangeCidrCollectionRequest.initialize(this, changes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, changes) { 
        obj['Changes'] = changes;
    }

    /**
     * Constructs a <code>ChangeCidrCollectionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangeCidrCollectionRequest} obj Optional instance to populate.
     * @return {module:model/ChangeCidrCollectionRequest} The populated <code>ChangeCidrCollectionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangeCidrCollectionRequest();

            if (data.hasOwnProperty('CollectionVersion')) {
                obj['CollectionVersion'] = ApiClient.convertToType(data['CollectionVersion'], 'Number');
            }
            if (data.hasOwnProperty('Changes')) {
                obj['Changes'] = ApiClient.convertToType(data['Changes'], [CidrCollectionChange]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangeCidrCollectionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangeCidrCollectionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChangeCidrCollectionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Changes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Changes'])) {
                throw new Error("Expected the field `Changes` to be an array in the JSON data but got " + data['Changes']);
            }
            // validate the optional field `Changes` (array)
            for (const item of data['Changes']) {
                CidrCollectionChange.validateJSON(item);
            };
        }

        return true;
    }


}

ChangeCidrCollectionRequest.RequiredProperties = ["Changes"];

/**
 * <p>A sequential counter that Amazon Route 53 sets to 1 when you create a collection and increments it by 1 each time you update the collection.</p> <p>We recommend that you use <code>ListCidrCollection</code> to get the current value of <code>CollectionVersion</code> for the collection that you want to update, and then include that value with the change request. This prevents Route 53 from overwriting an intervening update: </p> <ul> <li> <p>If the value in the request matches the value of <code>CollectionVersion</code> in the collection, Route 53 updates the collection.</p> </li> <li> <p>If the value of <code>CollectionVersion</code> in the collection is greater than the value in the request, the collection was changed after you got the version number. Route 53 does not update the collection, and it returns a <code>CidrCollectionVersionMismatch</code> error. </p> </li> </ul>
 * @member {Number} CollectionVersion
 */
ChangeCidrCollectionRequest.prototype['CollectionVersion'] = undefined;

/**
 *  Information about changes to a CIDR collection.
 * @member {Array.<module:model/CidrCollectionChange>} Changes
 */
ChangeCidrCollectionRequest.prototype['Changes'] = undefined;






export default ChangeCidrCollectionRequest;

