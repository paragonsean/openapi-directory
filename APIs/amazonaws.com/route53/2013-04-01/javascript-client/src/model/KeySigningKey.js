/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeySigningKey model module.
 * @module model/KeySigningKey
 * @version 2013-04-01
 */
class KeySigningKey {
    /**
     * Constructs a new <code>KeySigningKey</code>.
     * A key-signing key (KSK) is a complex type that represents a public/private key pair. The private key is used to generate a digital signature for the zone signing key (ZSK). The public key is stored in the DNS and is used to authenticate the ZSK. A KSK is always associated with a hosted zone; it cannot exist by itself.
     * @alias module:model/KeySigningKey
     */
    constructor() { 
        
        KeySigningKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeySigningKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeySigningKey} obj Optional instance to populate.
     * @return {module:model/KeySigningKey} The populated <code>KeySigningKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeySigningKey();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('KmsArn')) {
                obj['KmsArn'] = ApiClient.convertToType(data['KmsArn'], 'String');
            }
            if (data.hasOwnProperty('Flag')) {
                obj['Flag'] = ApiClient.convertToType(data['Flag'], 'Number');
            }
            if (data.hasOwnProperty('SigningAlgorithmMnemonic')) {
                obj['SigningAlgorithmMnemonic'] = ApiClient.convertToType(data['SigningAlgorithmMnemonic'], 'String');
            }
            if (data.hasOwnProperty('SigningAlgorithmType')) {
                obj['SigningAlgorithmType'] = ApiClient.convertToType(data['SigningAlgorithmType'], 'Number');
            }
            if (data.hasOwnProperty('DigestAlgorithmMnemonic')) {
                obj['DigestAlgorithmMnemonic'] = ApiClient.convertToType(data['DigestAlgorithmMnemonic'], 'String');
            }
            if (data.hasOwnProperty('DigestAlgorithmType')) {
                obj['DigestAlgorithmType'] = ApiClient.convertToType(data['DigestAlgorithmType'], 'Number');
            }
            if (data.hasOwnProperty('KeyTag')) {
                obj['KeyTag'] = ApiClient.convertToType(data['KeyTag'], 'Number');
            }
            if (data.hasOwnProperty('DigestValue')) {
                obj['DigestValue'] = ApiClient.convertToType(data['DigestValue'], 'String');
            }
            if (data.hasOwnProperty('PublicKey')) {
                obj['PublicKey'] = ApiClient.convertToType(data['PublicKey'], 'String');
            }
            if (data.hasOwnProperty('DSRecord')) {
                obj['DSRecord'] = ApiClient.convertToType(data['DSRecord'], 'String');
            }
            if (data.hasOwnProperty('DNSKEYRecord')) {
                obj['DNSKEYRecord'] = ApiClient.convertToType(data['DNSKEYRecord'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('StatusMessage')) {
                obj['StatusMessage'] = ApiClient.convertToType(data['StatusMessage'], 'String');
            }
            if (data.hasOwnProperty('CreatedDate')) {
                obj['CreatedDate'] = ApiClient.convertToType(data['CreatedDate'], 'Date');
            }
            if (data.hasOwnProperty('LastModifiedDate')) {
                obj['LastModifiedDate'] = ApiClient.convertToType(data['LastModifiedDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeySigningKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeySigningKey</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `KmsArn`
        if (data['KmsArn']) { // data not null
          String.validateJSON(data['KmsArn']);
        }
        // validate the optional field `Flag`
        if (data['Flag']) { // data not null
          Number.validateJSON(data['Flag']);
        }
        // validate the optional field `SigningAlgorithmMnemonic`
        if (data['SigningAlgorithmMnemonic']) { // data not null
          String.validateJSON(data['SigningAlgorithmMnemonic']);
        }
        // validate the optional field `SigningAlgorithmType`
        if (data['SigningAlgorithmType']) { // data not null
          Number.validateJSON(data['SigningAlgorithmType']);
        }
        // validate the optional field `DigestAlgorithmMnemonic`
        if (data['DigestAlgorithmMnemonic']) { // data not null
          String.validateJSON(data['DigestAlgorithmMnemonic']);
        }
        // validate the optional field `DigestAlgorithmType`
        if (data['DigestAlgorithmType']) { // data not null
          Number.validateJSON(data['DigestAlgorithmType']);
        }
        // validate the optional field `KeyTag`
        if (data['KeyTag']) { // data not null
          Number.validateJSON(data['KeyTag']);
        }
        // validate the optional field `DigestValue`
        if (data['DigestValue']) { // data not null
          String.validateJSON(data['DigestValue']);
        }
        // validate the optional field `PublicKey`
        if (data['PublicKey']) { // data not null
          String.validateJSON(data['PublicKey']);
        }
        // validate the optional field `DSRecord`
        if (data['DSRecord']) { // data not null
          String.validateJSON(data['DSRecord']);
        }
        // validate the optional field `DNSKEYRecord`
        if (data['DNSKEYRecord']) { // data not null
          String.validateJSON(data['DNSKEYRecord']);
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          String.validateJSON(data['Status']);
        }
        // validate the optional field `StatusMessage`
        if (data['StatusMessage']) { // data not null
          String.validateJSON(data['StatusMessage']);
        }
        // validate the optional field `CreatedDate`
        if (data['CreatedDate']) { // data not null
          Date.validateJSON(data['CreatedDate']);
        }
        // validate the optional field `LastModifiedDate`
        if (data['LastModifiedDate']) { // data not null
          Date.validateJSON(data['LastModifiedDate']);
        }

        return true;
    }


}



/**
 * @member {String} Name
 */
KeySigningKey.prototype['Name'] = undefined;

/**
 * @member {String} KmsArn
 */
KeySigningKey.prototype['KmsArn'] = undefined;

/**
 * @member {Number} Flag
 */
KeySigningKey.prototype['Flag'] = undefined;

/**
 * @member {String} SigningAlgorithmMnemonic
 */
KeySigningKey.prototype['SigningAlgorithmMnemonic'] = undefined;

/**
 * @member {Number} SigningAlgorithmType
 */
KeySigningKey.prototype['SigningAlgorithmType'] = undefined;

/**
 * @member {String} DigestAlgorithmMnemonic
 */
KeySigningKey.prototype['DigestAlgorithmMnemonic'] = undefined;

/**
 * @member {Number} DigestAlgorithmType
 */
KeySigningKey.prototype['DigestAlgorithmType'] = undefined;

/**
 * @member {Number} KeyTag
 */
KeySigningKey.prototype['KeyTag'] = undefined;

/**
 * @member {String} DigestValue
 */
KeySigningKey.prototype['DigestValue'] = undefined;

/**
 * @member {String} PublicKey
 */
KeySigningKey.prototype['PublicKey'] = undefined;

/**
 * @member {String} DSRecord
 */
KeySigningKey.prototype['DSRecord'] = undefined;

/**
 * @member {String} DNSKEYRecord
 */
KeySigningKey.prototype['DNSKEYRecord'] = undefined;

/**
 * @member {String} Status
 */
KeySigningKey.prototype['Status'] = undefined;

/**
 * @member {String} StatusMessage
 */
KeySigningKey.prototype['StatusMessage'] = undefined;

/**
 * @member {Date} CreatedDate
 */
KeySigningKey.prototype['CreatedDate'] = undefined;

/**
 * @member {Date} LastModifiedDate
 */
KeySigningKey.prototype['LastModifiedDate'] = undefined;






export default KeySigningKey;

