/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RRType from './RRType';

/**
 * The TestDNSAnswerResponse model module.
 * @module model/TestDNSAnswerResponse
 * @version 2013-04-01
 */
class TestDNSAnswerResponse {
    /**
     * Constructs a new <code>TestDNSAnswerResponse</code>.
     * A complex type that contains the response to a &lt;code&gt;TestDNSAnswer&lt;/code&gt; request. 
     * @alias module:model/TestDNSAnswerResponse
     * @param nameserver {String} 
     * @param recordName {String} 
     * @param recordType {module:model/RRType} 
     * @param recordData {Array} 
     * @param responseCode {String} 
     * @param protocol {String} 
     */
    constructor(nameserver, recordName, recordType, recordData, responseCode, protocol) { 
        
        TestDNSAnswerResponse.initialize(this, nameserver, recordName, recordType, recordData, responseCode, protocol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nameserver, recordName, recordType, recordData, responseCode, protocol) { 
        obj['Nameserver'] = nameserver;
        obj['RecordName'] = recordName;
        obj['RecordType'] = recordType;
        obj['RecordData'] = recordData;
        obj['ResponseCode'] = responseCode;
        obj['Protocol'] = protocol;
    }

    /**
     * Constructs a <code>TestDNSAnswerResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestDNSAnswerResponse} obj Optional instance to populate.
     * @return {module:model/TestDNSAnswerResponse} The populated <code>TestDNSAnswerResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestDNSAnswerResponse();

            if (data.hasOwnProperty('Nameserver')) {
                obj['Nameserver'] = ApiClient.convertToType(data['Nameserver'], 'String');
            }
            if (data.hasOwnProperty('RecordName')) {
                obj['RecordName'] = ApiClient.convertToType(data['RecordName'], 'String');
            }
            if (data.hasOwnProperty('RecordType')) {
                obj['RecordType'] = ApiClient.convertToType(data['RecordType'], RRType);
            }
            if (data.hasOwnProperty('RecordData')) {
                obj['RecordData'] = ApiClient.convertToType(data['RecordData'], Array);
            }
            if (data.hasOwnProperty('ResponseCode')) {
                obj['ResponseCode'] = ApiClient.convertToType(data['ResponseCode'], 'String');
            }
            if (data.hasOwnProperty('Protocol')) {
                obj['Protocol'] = ApiClient.convertToType(data['Protocol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestDNSAnswerResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestDNSAnswerResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestDNSAnswerResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Nameserver`
        if (data['Nameserver']) { // data not null
          String.validateJSON(data['Nameserver']);
        }
        // validate the optional field `RecordName`
        if (data['RecordName']) { // data not null
          String.validateJSON(data['RecordName']);
        }
        // validate the optional field `RecordType`
        if (data['RecordType']) { // data not null
          RRType.validateJSON(data['RecordType']);
        }
        // validate the optional field `RecordData`
        if (data['RecordData']) { // data not null
          Array.validateJSON(data['RecordData']);
        }
        // validate the optional field `ResponseCode`
        if (data['ResponseCode']) { // data not null
          String.validateJSON(data['ResponseCode']);
        }
        // validate the optional field `Protocol`
        if (data['Protocol']) { // data not null
          String.validateJSON(data['Protocol']);
        }

        return true;
    }


}

TestDNSAnswerResponse.RequiredProperties = ["Nameserver", "RecordName", "RecordType", "RecordData", "ResponseCode", "Protocol"];

/**
 * @member {String} Nameserver
 */
TestDNSAnswerResponse.prototype['Nameserver'] = undefined;

/**
 * @member {String} RecordName
 */
TestDNSAnswerResponse.prototype['RecordName'] = undefined;

/**
 * @member {module:model/RRType} RecordType
 */
TestDNSAnswerResponse.prototype['RecordType'] = undefined;

/**
 * @member {Array} RecordData
 */
TestDNSAnswerResponse.prototype['RecordData'] = undefined;

/**
 * @member {String} ResponseCode
 */
TestDNSAnswerResponse.prototype['ResponseCode'] = undefined;

/**
 * @member {String} Protocol
 */
TestDNSAnswerResponse.prototype['Protocol'] = undefined;






export default TestDNSAnswerResponse;

