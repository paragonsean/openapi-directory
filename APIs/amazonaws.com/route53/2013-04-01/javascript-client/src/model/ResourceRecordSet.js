/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CidrRoutingConfig from './CidrRoutingConfig';
import RRType from './RRType';
import ResourceRecordSetAliasTarget from './ResourceRecordSetAliasTarget';
import ResourceRecordSetFailover from './ResourceRecordSetFailover';
import ResourceRecordSetGeoLocation from './ResourceRecordSetGeoLocation';
import ResourceRecordSetRegion from './ResourceRecordSetRegion';

/**
 * The ResourceRecordSet model module.
 * @module model/ResourceRecordSet
 * @version 2013-04-01
 */
class ResourceRecordSet {
    /**
     * Constructs a new <code>ResourceRecordSet</code>.
     * Information about the resource record set to create or delete.
     * @alias module:model/ResourceRecordSet
     * @param name {String} 
     * @param type {module:model/RRType} 
     */
    constructor(name, type) { 
        
        ResourceRecordSet.initialize(this, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type) { 
        obj['Name'] = name;
        obj['Type'] = type;
    }

    /**
     * Constructs a <code>ResourceRecordSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceRecordSet} obj Optional instance to populate.
     * @return {module:model/ResourceRecordSet} The populated <code>ResourceRecordSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceRecordSet();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], RRType);
            }
            if (data.hasOwnProperty('SetIdentifier')) {
                obj['SetIdentifier'] = ApiClient.convertToType(data['SetIdentifier'], 'String');
            }
            if (data.hasOwnProperty('Weight')) {
                obj['Weight'] = ApiClient.convertToType(data['Weight'], 'Number');
            }
            if (data.hasOwnProperty('Region')) {
                obj['Region'] = ApiClient.convertToType(data['Region'], ResourceRecordSetRegion);
            }
            if (data.hasOwnProperty('GeoLocation')) {
                obj['GeoLocation'] = ResourceRecordSetGeoLocation.constructFromObject(data['GeoLocation']);
            }
            if (data.hasOwnProperty('Failover')) {
                obj['Failover'] = ApiClient.convertToType(data['Failover'], ResourceRecordSetFailover);
            }
            if (data.hasOwnProperty('MultiValueAnswer')) {
                obj['MultiValueAnswer'] = ApiClient.convertToType(data['MultiValueAnswer'], 'Boolean');
            }
            if (data.hasOwnProperty('TTL')) {
                obj['TTL'] = ApiClient.convertToType(data['TTL'], 'Number');
            }
            if (data.hasOwnProperty('ResourceRecords')) {
                obj['ResourceRecords'] = ApiClient.convertToType(data['ResourceRecords'], Array);
            }
            if (data.hasOwnProperty('AliasTarget')) {
                obj['AliasTarget'] = ResourceRecordSetAliasTarget.constructFromObject(data['AliasTarget']);
            }
            if (data.hasOwnProperty('HealthCheckId')) {
                obj['HealthCheckId'] = ApiClient.convertToType(data['HealthCheckId'], 'String');
            }
            if (data.hasOwnProperty('TrafficPolicyInstanceId')) {
                obj['TrafficPolicyInstanceId'] = ApiClient.convertToType(data['TrafficPolicyInstanceId'], 'String');
            }
            if (data.hasOwnProperty('CidrRoutingConfig')) {
                obj['CidrRoutingConfig'] = CidrRoutingConfig.constructFromObject(data['CidrRoutingConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceRecordSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceRecordSet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceRecordSet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          RRType.validateJSON(data['Type']);
        }
        // validate the optional field `SetIdentifier`
        if (data['SetIdentifier']) { // data not null
          String.validateJSON(data['SetIdentifier']);
        }
        // validate the optional field `Weight`
        if (data['Weight']) { // data not null
          Number.validateJSON(data['Weight']);
        }
        // validate the optional field `Region`
        if (data['Region']) { // data not null
          ResourceRecordSetRegion.validateJSON(data['Region']);
        }
        // validate the optional field `GeoLocation`
        if (data['GeoLocation']) { // data not null
          ResourceRecordSetGeoLocation.validateJSON(data['GeoLocation']);
        }
        // validate the optional field `Failover`
        if (data['Failover']) { // data not null
          ResourceRecordSetFailover.validateJSON(data['Failover']);
        }
        // validate the optional field `MultiValueAnswer`
        if (data['MultiValueAnswer']) { // data not null
          Boolean.validateJSON(data['MultiValueAnswer']);
        }
        // validate the optional field `TTL`
        if (data['TTL']) { // data not null
          Number.validateJSON(data['TTL']);
        }
        // validate the optional field `ResourceRecords`
        if (data['ResourceRecords']) { // data not null
          Array.validateJSON(data['ResourceRecords']);
        }
        // validate the optional field `AliasTarget`
        if (data['AliasTarget']) { // data not null
          ResourceRecordSetAliasTarget.validateJSON(data['AliasTarget']);
        }
        // validate the optional field `HealthCheckId`
        if (data['HealthCheckId']) { // data not null
          String.validateJSON(data['HealthCheckId']);
        }
        // validate the optional field `TrafficPolicyInstanceId`
        if (data['TrafficPolicyInstanceId']) { // data not null
          String.validateJSON(data['TrafficPolicyInstanceId']);
        }
        // validate the optional field `CidrRoutingConfig`
        if (data['CidrRoutingConfig']) { // data not null
          CidrRoutingConfig.validateJSON(data['CidrRoutingConfig']);
        }

        return true;
    }


}

ResourceRecordSet.RequiredProperties = ["Name", "Type"];

/**
 * @member {String} Name
 */
ResourceRecordSet.prototype['Name'] = undefined;

/**
 * @member {module:model/RRType} Type
 */
ResourceRecordSet.prototype['Type'] = undefined;

/**
 * @member {String} SetIdentifier
 */
ResourceRecordSet.prototype['SetIdentifier'] = undefined;

/**
 * @member {Number} Weight
 */
ResourceRecordSet.prototype['Weight'] = undefined;

/**
 * @member {module:model/ResourceRecordSetRegion} Region
 */
ResourceRecordSet.prototype['Region'] = undefined;

/**
 * @member {module:model/ResourceRecordSetGeoLocation} GeoLocation
 */
ResourceRecordSet.prototype['GeoLocation'] = undefined;

/**
 * @member {module:model/ResourceRecordSetFailover} Failover
 */
ResourceRecordSet.prototype['Failover'] = undefined;

/**
 * @member {Boolean} MultiValueAnswer
 */
ResourceRecordSet.prototype['MultiValueAnswer'] = undefined;

/**
 * @member {Number} TTL
 */
ResourceRecordSet.prototype['TTL'] = undefined;

/**
 * @member {Array} ResourceRecords
 */
ResourceRecordSet.prototype['ResourceRecords'] = undefined;

/**
 * @member {module:model/ResourceRecordSetAliasTarget} AliasTarget
 */
ResourceRecordSet.prototype['AliasTarget'] = undefined;

/**
 * @member {String} HealthCheckId
 */
ResourceRecordSet.prototype['HealthCheckId'] = undefined;

/**
 * @member {String} TrafficPolicyInstanceId
 */
ResourceRecordSet.prototype['TrafficPolicyInstanceId'] = undefined;

/**
 * @member {module:model/CidrRoutingConfig} CidrRoutingConfig
 */
ResourceRecordSet.prototype['CidrRoutingConfig'] = undefined;






export default ResourceRecordSet;

