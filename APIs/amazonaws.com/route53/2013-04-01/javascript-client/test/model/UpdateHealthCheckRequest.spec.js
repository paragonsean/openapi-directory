/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonRoute53);
  }
}(this, function(expect, AmazonRoute53) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonRoute53.UpdateHealthCheckRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpdateHealthCheckRequest', function() {
    it('should create an instance of UpdateHealthCheckRequest', function() {
      // uncomment below and update the code to test UpdateHealthCheckRequest
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be.a(AmazonRoute53.UpdateHealthCheckRequest);
    });

    it('should have the property healthCheckVersion (base name: "HealthCheckVersion")', function() {
      // uncomment below and update the code to test the property healthCheckVersion
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property iPAddress (base name: "IPAddress")', function() {
      // uncomment below and update the code to test the property iPAddress
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "Port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property resourcePath (base name: "ResourcePath")', function() {
      // uncomment below and update the code to test the property resourcePath
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property fullyQualifiedDomainName (base name: "FullyQualifiedDomainName")', function() {
      // uncomment below and update the code to test the property fullyQualifiedDomainName
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property searchString (base name: "SearchString")', function() {
      // uncomment below and update the code to test the property searchString
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property failureThreshold (base name: "FailureThreshold")', function() {
      // uncomment below and update the code to test the property failureThreshold
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property inverted (base name: "Inverted")', function() {
      // uncomment below and update the code to test the property inverted
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property disabled (base name: "Disabled")', function() {
      // uncomment below and update the code to test the property disabled
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property healthThreshold (base name: "HealthThreshold")', function() {
      // uncomment below and update the code to test the property healthThreshold
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property childHealthChecks (base name: "ChildHealthChecks")', function() {
      // uncomment below and update the code to test the property childHealthChecks
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property enableSNI (base name: "EnableSNI")', function() {
      // uncomment below and update the code to test the property enableSNI
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property regions (base name: "Regions")', function() {
      // uncomment below and update the code to test the property regions
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property alarmIdentifier (base name: "AlarmIdentifier")', function() {
      // uncomment below and update the code to test the property alarmIdentifier
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property insufficientDataHealthStatus (base name: "InsufficientDataHealthStatus")', function() {
      // uncomment below and update the code to test the property insufficientDataHealthStatus
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

    it('should have the property resetElements (base name: "ResetElements")', function() {
      // uncomment below and update the code to test the property resetElements
      //var instance = new AmazonRoute53.UpdateHealthCheckRequest();
      //expect(instance).to.be();
    });

  });

}));
