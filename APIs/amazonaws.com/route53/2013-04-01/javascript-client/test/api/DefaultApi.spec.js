/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonRoute53);
  }
}(this, function(expect, AmazonRoute53) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonRoute53.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('activateKeySigningKey', function() {
      it('should call activateKeySigningKey successfully', function(done) {
        //uncomment below and update the code to test activateKeySigningKey
        //instance.activateKeySigningKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateVPCWithHostedZone', function() {
      it('should call associateVPCWithHostedZone successfully', function(done) {
        //uncomment below and update the code to test associateVPCWithHostedZone
        //instance.associateVPCWithHostedZone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeCidrCollection', function() {
      it('should call changeCidrCollection successfully', function(done) {
        //uncomment below and update the code to test changeCidrCollection
        //instance.changeCidrCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeResourceRecordSets', function() {
      it('should call changeResourceRecordSets successfully', function(done) {
        //uncomment below and update the code to test changeResourceRecordSets
        //instance.changeResourceRecordSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeTagsForResource', function() {
      it('should call changeTagsForResource successfully', function(done) {
        //uncomment below and update the code to test changeTagsForResource
        //instance.changeTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCidrCollection', function() {
      it('should call createCidrCollection successfully', function(done) {
        //uncomment below and update the code to test createCidrCollection
        //instance.createCidrCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createHealthCheck', function() {
      it('should call createHealthCheck successfully', function(done) {
        //uncomment below and update the code to test createHealthCheck
        //instance.createHealthCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createHostedZone', function() {
      it('should call createHostedZone successfully', function(done) {
        //uncomment below and update the code to test createHostedZone
        //instance.createHostedZone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createKeySigningKey', function() {
      it('should call createKeySigningKey successfully', function(done) {
        //uncomment below and update the code to test createKeySigningKey
        //instance.createKeySigningKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createQueryLoggingConfig', function() {
      it('should call createQueryLoggingConfig successfully', function(done) {
        //uncomment below and update the code to test createQueryLoggingConfig
        //instance.createQueryLoggingConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createReusableDelegationSet', function() {
      it('should call createReusableDelegationSet successfully', function(done) {
        //uncomment below and update the code to test createReusableDelegationSet
        //instance.createReusableDelegationSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTrafficPolicy', function() {
      it('should call createTrafficPolicy successfully', function(done) {
        //uncomment below and update the code to test createTrafficPolicy
        //instance.createTrafficPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTrafficPolicyInstance', function() {
      it('should call createTrafficPolicyInstance successfully', function(done) {
        //uncomment below and update the code to test createTrafficPolicyInstance
        //instance.createTrafficPolicyInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTrafficPolicyVersion', function() {
      it('should call createTrafficPolicyVersion successfully', function(done) {
        //uncomment below and update the code to test createTrafficPolicyVersion
        //instance.createTrafficPolicyVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVPCAssociationAuthorization', function() {
      it('should call createVPCAssociationAuthorization successfully', function(done) {
        //uncomment below and update the code to test createVPCAssociationAuthorization
        //instance.createVPCAssociationAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deactivateKeySigningKey', function() {
      it('should call deactivateKeySigningKey successfully', function(done) {
        //uncomment below and update the code to test deactivateKeySigningKey
        //instance.deactivateKeySigningKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCidrCollection', function() {
      it('should call deleteCidrCollection successfully', function(done) {
        //uncomment below and update the code to test deleteCidrCollection
        //instance.deleteCidrCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteHealthCheck', function() {
      it('should call deleteHealthCheck successfully', function(done) {
        //uncomment below and update the code to test deleteHealthCheck
        //instance.deleteHealthCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteHostedZone', function() {
      it('should call deleteHostedZone successfully', function(done) {
        //uncomment below and update the code to test deleteHostedZone
        //instance.deleteHostedZone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteKeySigningKey', function() {
      it('should call deleteKeySigningKey successfully', function(done) {
        //uncomment below and update the code to test deleteKeySigningKey
        //instance.deleteKeySigningKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteQueryLoggingConfig', function() {
      it('should call deleteQueryLoggingConfig successfully', function(done) {
        //uncomment below and update the code to test deleteQueryLoggingConfig
        //instance.deleteQueryLoggingConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReusableDelegationSet', function() {
      it('should call deleteReusableDelegationSet successfully', function(done) {
        //uncomment below and update the code to test deleteReusableDelegationSet
        //instance.deleteReusableDelegationSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTrafficPolicy', function() {
      it('should call deleteTrafficPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteTrafficPolicy
        //instance.deleteTrafficPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTrafficPolicyInstance', function() {
      it('should call deleteTrafficPolicyInstance successfully', function(done) {
        //uncomment below and update the code to test deleteTrafficPolicyInstance
        //instance.deleteTrafficPolicyInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVPCAssociationAuthorization', function() {
      it('should call deleteVPCAssociationAuthorization successfully', function(done) {
        //uncomment below and update the code to test deleteVPCAssociationAuthorization
        //instance.deleteVPCAssociationAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableHostedZoneDNSSEC', function() {
      it('should call disableHostedZoneDNSSEC successfully', function(done) {
        //uncomment below and update the code to test disableHostedZoneDNSSEC
        //instance.disableHostedZoneDNSSEC(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateVPCFromHostedZone', function() {
      it('should call disassociateVPCFromHostedZone successfully', function(done) {
        //uncomment below and update the code to test disassociateVPCFromHostedZone
        //instance.disassociateVPCFromHostedZone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableHostedZoneDNSSEC', function() {
      it('should call enableHostedZoneDNSSEC successfully', function(done) {
        //uncomment below and update the code to test enableHostedZoneDNSSEC
        //instance.enableHostedZoneDNSSEC(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAccountLimit', function() {
      it('should call getAccountLimit successfully', function(done) {
        //uncomment below and update the code to test getAccountLimit
        //instance.getAccountLimit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChange', function() {
      it('should call getChange successfully', function(done) {
        //uncomment below and update the code to test getChange
        //instance.getChange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCheckerIpRanges', function() {
      it('should call getCheckerIpRanges successfully', function(done) {
        //uncomment below and update the code to test getCheckerIpRanges
        //instance.getCheckerIpRanges(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDNSSEC', function() {
      it('should call getDNSSEC successfully', function(done) {
        //uncomment below and update the code to test getDNSSEC
        //instance.getDNSSEC(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGeoLocation', function() {
      it('should call getGeoLocation successfully', function(done) {
        //uncomment below and update the code to test getGeoLocation
        //instance.getGeoLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHealthCheck', function() {
      it('should call getHealthCheck successfully', function(done) {
        //uncomment below and update the code to test getHealthCheck
        //instance.getHealthCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHealthCheckCount', function() {
      it('should call getHealthCheckCount successfully', function(done) {
        //uncomment below and update the code to test getHealthCheckCount
        //instance.getHealthCheckCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHealthCheckLastFailureReason', function() {
      it('should call getHealthCheckLastFailureReason successfully', function(done) {
        //uncomment below and update the code to test getHealthCheckLastFailureReason
        //instance.getHealthCheckLastFailureReason(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHealthCheckStatus', function() {
      it('should call getHealthCheckStatus successfully', function(done) {
        //uncomment below and update the code to test getHealthCheckStatus
        //instance.getHealthCheckStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHostedZone', function() {
      it('should call getHostedZone successfully', function(done) {
        //uncomment below and update the code to test getHostedZone
        //instance.getHostedZone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHostedZoneCount', function() {
      it('should call getHostedZoneCount successfully', function(done) {
        //uncomment below and update the code to test getHostedZoneCount
        //instance.getHostedZoneCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHostedZoneLimit', function() {
      it('should call getHostedZoneLimit successfully', function(done) {
        //uncomment below and update the code to test getHostedZoneLimit
        //instance.getHostedZoneLimit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQueryLoggingConfig', function() {
      it('should call getQueryLoggingConfig successfully', function(done) {
        //uncomment below and update the code to test getQueryLoggingConfig
        //instance.getQueryLoggingConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReusableDelegationSet', function() {
      it('should call getReusableDelegationSet successfully', function(done) {
        //uncomment below and update the code to test getReusableDelegationSet
        //instance.getReusableDelegationSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReusableDelegationSetLimit', function() {
      it('should call getReusableDelegationSetLimit successfully', function(done) {
        //uncomment below and update the code to test getReusableDelegationSetLimit
        //instance.getReusableDelegationSetLimit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTrafficPolicy', function() {
      it('should call getTrafficPolicy successfully', function(done) {
        //uncomment below and update the code to test getTrafficPolicy
        //instance.getTrafficPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTrafficPolicyInstance', function() {
      it('should call getTrafficPolicyInstance successfully', function(done) {
        //uncomment below and update the code to test getTrafficPolicyInstance
        //instance.getTrafficPolicyInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTrafficPolicyInstanceCount', function() {
      it('should call getTrafficPolicyInstanceCount successfully', function(done) {
        //uncomment below and update the code to test getTrafficPolicyInstanceCount
        //instance.getTrafficPolicyInstanceCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCidrBlocks', function() {
      it('should call listCidrBlocks successfully', function(done) {
        //uncomment below and update the code to test listCidrBlocks
        //instance.listCidrBlocks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCidrCollections', function() {
      it('should call listCidrCollections successfully', function(done) {
        //uncomment below and update the code to test listCidrCollections
        //instance.listCidrCollections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCidrLocations', function() {
      it('should call listCidrLocations successfully', function(done) {
        //uncomment below and update the code to test listCidrLocations
        //instance.listCidrLocations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGeoLocations', function() {
      it('should call listGeoLocations successfully', function(done) {
        //uncomment below and update the code to test listGeoLocations
        //instance.listGeoLocations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHealthChecks', function() {
      it('should call listHealthChecks successfully', function(done) {
        //uncomment below and update the code to test listHealthChecks
        //instance.listHealthChecks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHostedZones', function() {
      it('should call listHostedZones successfully', function(done) {
        //uncomment below and update the code to test listHostedZones
        //instance.listHostedZones(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHostedZonesByName', function() {
      it('should call listHostedZonesByName successfully', function(done) {
        //uncomment below and update the code to test listHostedZonesByName
        //instance.listHostedZonesByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHostedZonesByVPC', function() {
      it('should call listHostedZonesByVPC successfully', function(done) {
        //uncomment below and update the code to test listHostedZonesByVPC
        //instance.listHostedZonesByVPC(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listQueryLoggingConfigs', function() {
      it('should call listQueryLoggingConfigs successfully', function(done) {
        //uncomment below and update the code to test listQueryLoggingConfigs
        //instance.listQueryLoggingConfigs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listResourceRecordSets', function() {
      it('should call listResourceRecordSets successfully', function(done) {
        //uncomment below and update the code to test listResourceRecordSets
        //instance.listResourceRecordSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listReusableDelegationSets', function() {
      it('should call listReusableDelegationSets successfully', function(done) {
        //uncomment below and update the code to test listReusableDelegationSets
        //instance.listReusableDelegationSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResources', function() {
      it('should call listTagsForResources successfully', function(done) {
        //uncomment below and update the code to test listTagsForResources
        //instance.listTagsForResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTrafficPolicies', function() {
      it('should call listTrafficPolicies successfully', function(done) {
        //uncomment below and update the code to test listTrafficPolicies
        //instance.listTrafficPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTrafficPolicyInstances', function() {
      it('should call listTrafficPolicyInstances successfully', function(done) {
        //uncomment below and update the code to test listTrafficPolicyInstances
        //instance.listTrafficPolicyInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTrafficPolicyInstancesByHostedZone', function() {
      it('should call listTrafficPolicyInstancesByHostedZone successfully', function(done) {
        //uncomment below and update the code to test listTrafficPolicyInstancesByHostedZone
        //instance.listTrafficPolicyInstancesByHostedZone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTrafficPolicyInstancesByPolicy', function() {
      it('should call listTrafficPolicyInstancesByPolicy successfully', function(done) {
        //uncomment below and update the code to test listTrafficPolicyInstancesByPolicy
        //instance.listTrafficPolicyInstancesByPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTrafficPolicyVersions', function() {
      it('should call listTrafficPolicyVersions successfully', function(done) {
        //uncomment below and update the code to test listTrafficPolicyVersions
        //instance.listTrafficPolicyVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVPCAssociationAuthorizations', function() {
      it('should call listVPCAssociationAuthorizations successfully', function(done) {
        //uncomment below and update the code to test listVPCAssociationAuthorizations
        //instance.listVPCAssociationAuthorizations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('testDNSAnswer', function() {
      it('should call testDNSAnswer successfully', function(done) {
        //uncomment below and update the code to test testDNSAnswer
        //instance.testDNSAnswer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateHealthCheck', function() {
      it('should call updateHealthCheck successfully', function(done) {
        //uncomment below and update the code to test updateHealthCheck
        //instance.updateHealthCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateHostedZoneComment', function() {
      it('should call updateHostedZoneComment successfully', function(done) {
        //uncomment below and update the code to test updateHostedZoneComment
        //instance.updateHostedZoneComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTrafficPolicyComment', function() {
      it('should call updateTrafficPolicyComment successfully', function(done) {
        //uncomment below and update the code to test updateTrafficPolicyComment
        //instance.updateTrafficPolicyComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTrafficPolicyInstance', function() {
      it('should call updateTrafficPolicyInstance successfully', function(done) {
        //uncomment below and update the code to test updateTrafficPolicyInstance
        //instance.updateTrafficPolicyInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
