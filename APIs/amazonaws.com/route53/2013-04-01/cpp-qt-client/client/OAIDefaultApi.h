/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivateKeySigningKeyResponse.h"
#include "OAIAssociateVPCWithHostedZoneResponse.h"
#include "OAIAssociateVPCWithHostedZone_request.h"
#include "OAIChangeCidrCollectionResponse.h"
#include "OAIChangeCidrCollection_request.h"
#include "OAIChangeResourceRecordSetsResponse.h"
#include "OAIChangeResourceRecordSets_request.h"
#include "OAIChangeTagsForResource_request.h"
#include "OAICreateCidrCollectionResponse.h"
#include "OAICreateCidrCollection_request.h"
#include "OAICreateHealthCheckResponse.h"
#include "OAICreateHealthCheck_request.h"
#include "OAICreateHostedZoneResponse.h"
#include "OAICreateHostedZone_request.h"
#include "OAICreateKeySigningKeyResponse.h"
#include "OAICreateKeySigningKey_request.h"
#include "OAICreateQueryLoggingConfigResponse.h"
#include "OAICreateQueryLoggingConfig_request.h"
#include "OAICreateReusableDelegationSetResponse.h"
#include "OAICreateReusableDelegationSet_request.h"
#include "OAICreateTrafficPolicyInstanceResponse.h"
#include "OAICreateTrafficPolicyInstance_request.h"
#include "OAICreateTrafficPolicyResponse.h"
#include "OAICreateTrafficPolicyVersionResponse.h"
#include "OAICreateTrafficPolicyVersion_request.h"
#include "OAICreateTrafficPolicy_request.h"
#include "OAICreateVPCAssociationAuthorizationResponse.h"
#include "OAICreateVPCAssociationAuthorization_request.h"
#include "OAIDeactivateKeySigningKeyResponse.h"
#include "OAIDeleteHostedZoneResponse.h"
#include "OAIDeleteKeySigningKeyResponse.h"
#include "OAIDisableHostedZoneDNSSECResponse.h"
#include "OAIDisassociateVPCFromHostedZoneResponse.h"
#include "OAIDisassociateVPCFromHostedZone_request.h"
#include "OAIEnableHostedZoneDNSSECResponse.h"
#include "OAIGetAccountLimitResponse.h"
#include "OAIGetChangeResponse.h"
#include "OAIGetCheckerIpRangesResponse.h"
#include "OAIGetDNSSECResponse.h"
#include "OAIGetGeoLocationResponse.h"
#include "OAIGetHealthCheckCountResponse.h"
#include "OAIGetHealthCheckLastFailureReasonResponse.h"
#include "OAIGetHealthCheckResponse.h"
#include "OAIGetHealthCheckStatusResponse.h"
#include "OAIGetHostedZoneCountResponse.h"
#include "OAIGetHostedZoneLimitResponse.h"
#include "OAIGetHostedZoneResponse.h"
#include "OAIGetQueryLoggingConfigResponse.h"
#include "OAIGetReusableDelegationSetLimitResponse.h"
#include "OAIGetReusableDelegationSetResponse.h"
#include "OAIGetTrafficPolicyInstanceCountResponse.h"
#include "OAIGetTrafficPolicyInstanceResponse.h"
#include "OAIGetTrafficPolicyResponse.h"
#include "OAIListCidrBlocksResponse.h"
#include "OAIListCidrCollectionsResponse.h"
#include "OAIListCidrLocationsResponse.h"
#include "OAIListGeoLocationsResponse.h"
#include "OAIListHealthChecksResponse.h"
#include "OAIListHostedZonesByNameResponse.h"
#include "OAIListHostedZonesByVPCResponse.h"
#include "OAIListHostedZonesResponse.h"
#include "OAIListQueryLoggingConfigsResponse.h"
#include "OAIListResourceRecordSetsResponse.h"
#include "OAIListReusableDelegationSetsResponse.h"
#include "OAIListTagsForResourceResponse.h"
#include "OAIListTagsForResourcesResponse.h"
#include "OAIListTagsForResources_request.h"
#include "OAIListTrafficPoliciesResponse.h"
#include "OAIListTrafficPolicyInstancesByHostedZoneResponse.h"
#include "OAIListTrafficPolicyInstancesByPolicyResponse.h"
#include "OAIListTrafficPolicyInstancesResponse.h"
#include "OAIListTrafficPolicyVersionsResponse.h"
#include "OAIListVPCAssociationAuthorizationsResponse.h"
#include "OAIObject.h"
#include "OAITestDNSAnswerResponse.h"
#include "OAIUpdateHealthCheckResponse.h"
#include "OAIUpdateHealthCheck_request.h"
#include "OAIUpdateHostedZoneCommentResponse.h"
#include "OAIUpdateHostedZoneComment_request.h"
#include "OAIUpdateTrafficPolicyCommentResponse.h"
#include "OAIUpdateTrafficPolicyComment_request.h"
#include "OAIUpdateTrafficPolicyInstanceResponse.h"
#include "OAIUpdateTrafficPolicyInstance_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  hosted_zone_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void activateKeySigningKey(const QString &hosted_zone_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_associate_vpc_with_hosted_zone_request OAIAssociateVPCWithHostedZone_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateVPCWithHostedZone(const QString &id, const OAIAssociateVPCWithHostedZone_request &oai_associate_vpc_with_hosted_zone_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cidr_collection_id QString [required]
    * @param[in]  oai_change_cidr_collection_request OAIChangeCidrCollection_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void changeCidrCollection(const QString &cidr_collection_id, const OAIChangeCidrCollection_request &oai_change_cidr_collection_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_change_resource_record_sets_request OAIChangeResourceRecordSets_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void changeResourceRecordSets(const QString &id, const OAIChangeResourceRecordSets_request &oai_change_resource_record_sets_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  oai_change_tags_for_resource_request OAIChangeTagsForResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void changeTagsForResource(const QString &resource_type, const QString &resource_id, const OAIChangeTagsForResource_request &oai_change_tags_for_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_cidr_collection_request OAICreateCidrCollection_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createCidrCollection(const OAICreateCidrCollection_request &oai_create_cidr_collection_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_health_check_request OAICreateHealthCheck_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createHealthCheck(const OAICreateHealthCheck_request &oai_create_health_check_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_hosted_zone_request OAICreateHostedZone_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createHostedZone(const OAICreateHostedZone_request &oai_create_hosted_zone_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_key_signing_key_request OAICreateKeySigningKey_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createKeySigningKey(const OAICreateKeySigningKey_request &oai_create_key_signing_key_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_query_logging_config_request OAICreateQueryLoggingConfig_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createQueryLoggingConfig(const OAICreateQueryLoggingConfig_request &oai_create_query_logging_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_reusable_delegation_set_request OAICreateReusableDelegationSet_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createReusableDelegationSet(const OAICreateReusableDelegationSet_request &oai_create_reusable_delegation_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_traffic_policy_request OAICreateTrafficPolicy_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createTrafficPolicy(const OAICreateTrafficPolicy_request &oai_create_traffic_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_traffic_policy_instance_request OAICreateTrafficPolicyInstance_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createTrafficPolicyInstance(const OAICreateTrafficPolicyInstance_request &oai_create_traffic_policy_instance_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_traffic_policy_version_request OAICreateTrafficPolicyVersion_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createTrafficPolicyVersion(const QString &id, const OAICreateTrafficPolicyVersion_request &oai_create_traffic_policy_version_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_vpc_association_authorization_request OAICreateVPCAssociationAuthorization_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createVPCAssociationAuthorization(const QString &id, const OAICreateVPCAssociationAuthorization_request &oai_create_vpc_association_authorization_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  hosted_zone_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deactivateKeySigningKey(const QString &hosted_zone_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cidr_collection_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteCidrCollection(const QString &cidr_collection_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  health_check_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteHealthCheck(const QString &health_check_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteHostedZone(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  hosted_zone_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteKeySigningKey(const QString &hosted_zone_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteQueryLoggingConfig(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteReusableDelegationSet(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  version qint32 [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteTrafficPolicy(const QString &id, const qint32 &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteTrafficPolicyInstance(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_vpc_association_authorization_request OAICreateVPCAssociationAuthorization_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteVPCAssociationAuthorization(const QString &id, const OAICreateVPCAssociationAuthorization_request &oai_create_vpc_association_authorization_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disableHostedZoneDNSSEC(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_disassociate_vpc_from_hosted_zone_request OAIDisassociateVPCFromHostedZone_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateVPCFromHostedZone(const QString &id, const OAIDisassociateVPCFromHostedZone_request &oai_disassociate_vpc_from_hosted_zone_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void enableHostedZoneDNSSEC(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAccountLimit(const QString &type, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getChange(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCheckerIpRanges(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDNSSEC(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  continentcode QString [optional]
    * @param[in]  countrycode QString [optional]
    * @param[in]  subdivisioncode QString [optional]
    */
    virtual void getGeoLocation(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &continentcode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &countrycode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subdivisioncode = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  health_check_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getHealthCheck(const QString &health_check_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getHealthCheckCount(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  health_check_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getHealthCheckLastFailureReason(const QString &health_check_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  health_check_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getHealthCheckStatus(const QString &health_check_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getHostedZone(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getHostedZoneCount(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getHostedZoneLimit(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getQueryLoggingConfig(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getReusableDelegationSet(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getReusableDelegationSetLimit(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  version qint32 [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getTrafficPolicy(const QString &id, const qint32 &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getTrafficPolicyInstance(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getTrafficPolicyInstanceCount(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cidr_collection_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  nexttoken QString [optional]
    * @param[in]  maxresults QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listCidrBlocks(const QString &cidr_collection_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nexttoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxresults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  nexttoken QString [optional]
    * @param[in]  maxresults QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listCidrCollections(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nexttoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxresults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cidr_collection_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  nexttoken QString [optional]
    * @param[in]  maxresults QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listCidrLocations(const QString &cidr_collection_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nexttoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxresults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  startcontinentcode QString [optional]
    * @param[in]  startcountrycode QString [optional]
    * @param[in]  startsubdivisioncode QString [optional]
    * @param[in]  maxitems QString [optional]
    */
    virtual void listGeoLocations(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &startcontinentcode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &startcountrycode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &startsubdivisioncode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxitems = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  maxitems QString [optional]
    * @param[in]  max_items QString [optional]
    * @param[in]  marker2 QString [optional]
    */
    virtual void listHealthChecks(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxitems = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  maxitems QString [optional]
    * @param[in]  delegationsetid QString [optional]
    * @param[in]  max_items QString [optional]
    * @param[in]  marker2 QString [optional]
    */
    virtual void listHostedZones(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxitems = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delegationsetid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  dnsname QString [optional]
    * @param[in]  hostedzoneid QString [optional]
    * @param[in]  maxitems QString [optional]
    */
    virtual void listHostedZonesByName(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dnsname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hostedzoneid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxitems = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vpcid QString [required]
    * @param[in]  vpcregion QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  maxitems QString [optional]
    * @param[in]  nexttoken QString [optional]
    */
    virtual void listHostedZonesByVPC(const QString &vpcid, const QString &vpcregion, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxitems = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nexttoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  hostedzoneid QString [optional]
    * @param[in]  nexttoken QString [optional]
    * @param[in]  maxresults QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listQueryLoggingConfigs(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hostedzoneid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nexttoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxresults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  identifier QString [optional]
    * @param[in]  maxitems QString [optional]
    * @param[in]  max_items QString [optional]
    * @param[in]  start_record_name QString [optional]
    * @param[in]  start_record_type QString [optional]
    * @param[in]  start_record_identifier QString [optional]
    */
    virtual void listResourceRecordSets(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxitems = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_record_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_record_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_record_identifier = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  maxitems QString [optional]
    */
    virtual void listReusableDelegationSets(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxitems = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource(const QString &resource_type, const QString &resource_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_type QString [required]
    * @param[in]  oai_list_tags_for_resources_request OAIListTagsForResources_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResources(const QString &resource_type, const OAIListTagsForResources_request &oai_list_tags_for_resources_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  trafficpolicyid QString [optional]
    * @param[in]  maxitems QString [optional]
    */
    virtual void listTrafficPolicies(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trafficpolicyid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxitems = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  hostedzoneid QString [optional]
    * @param[in]  trafficpolicyinstancename QString [optional]
    * @param[in]  trafficpolicyinstancetype QString [optional]
    * @param[in]  maxitems QString [optional]
    */
    virtual void listTrafficPolicyInstances(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hostedzoneid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trafficpolicyinstancename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trafficpolicyinstancetype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxitems = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  trafficpolicyinstancename QString [optional]
    * @param[in]  trafficpolicyinstancetype QString [optional]
    * @param[in]  maxitems QString [optional]
    */
    virtual void listTrafficPolicyInstancesByHostedZone(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trafficpolicyinstancename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trafficpolicyinstancetype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxitems = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  version qint32 [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  hostedzoneid QString [optional]
    * @param[in]  trafficpolicyinstancename QString [optional]
    * @param[in]  trafficpolicyinstancetype QString [optional]
    * @param[in]  maxitems QString [optional]
    */
    virtual void listTrafficPolicyInstancesByPolicy(const QString &id, const qint32 &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hostedzoneid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trafficpolicyinstancename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trafficpolicyinstancetype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxitems = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  trafficpolicyversion QString [optional]
    * @param[in]  maxitems QString [optional]
    */
    virtual void listTrafficPolicyVersions(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trafficpolicyversion = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxitems = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  nexttoken QString [optional]
    * @param[in]  maxresults QString [optional]
    */
    virtual void listVPCAssociationAuthorizations(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nexttoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maxresults = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  hostedzoneid QString [required]
    * @param[in]  recordname QString [required]
    * @param[in]  recordtype QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  resolverip QString [optional]
    * @param[in]  edns0clientsubnetip QString [optional]
    * @param[in]  edns0clientsubnetmask QString [optional]
    */
    virtual void testDNSAnswer(const QString &hostedzoneid, const QString &recordname, const QString &recordtype, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resolverip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &edns0clientsubnetip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &edns0clientsubnetmask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  health_check_id QString [required]
    * @param[in]  oai_update_health_check_request OAIUpdateHealthCheck_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateHealthCheck(const QString &health_check_id, const OAIUpdateHealthCheck_request &oai_update_health_check_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_hosted_zone_comment_request OAIUpdateHostedZoneComment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateHostedZoneComment(const QString &id, const OAIUpdateHostedZoneComment_request &oai_update_hosted_zone_comment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  version qint32 [required]
    * @param[in]  oai_update_traffic_policy_comment_request OAIUpdateTrafficPolicyComment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateTrafficPolicyComment(const QString &id, const qint32 &version, const OAIUpdateTrafficPolicyComment_request &oai_update_traffic_policy_comment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_traffic_policy_instance_request OAIUpdateTrafficPolicyInstance_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateTrafficPolicyInstance(const QString &id, const OAIUpdateTrafficPolicyInstance_request &oai_update_traffic_policy_instance_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateKeySigningKeyCallback(OAIHttpRequestWorker *worker);
    void associateVPCWithHostedZoneCallback(OAIHttpRequestWorker *worker);
    void changeCidrCollectionCallback(OAIHttpRequestWorker *worker);
    void changeResourceRecordSetsCallback(OAIHttpRequestWorker *worker);
    void changeTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void createCidrCollectionCallback(OAIHttpRequestWorker *worker);
    void createHealthCheckCallback(OAIHttpRequestWorker *worker);
    void createHostedZoneCallback(OAIHttpRequestWorker *worker);
    void createKeySigningKeyCallback(OAIHttpRequestWorker *worker);
    void createQueryLoggingConfigCallback(OAIHttpRequestWorker *worker);
    void createReusableDelegationSetCallback(OAIHttpRequestWorker *worker);
    void createTrafficPolicyCallback(OAIHttpRequestWorker *worker);
    void createTrafficPolicyInstanceCallback(OAIHttpRequestWorker *worker);
    void createTrafficPolicyVersionCallback(OAIHttpRequestWorker *worker);
    void createVPCAssociationAuthorizationCallback(OAIHttpRequestWorker *worker);
    void deactivateKeySigningKeyCallback(OAIHttpRequestWorker *worker);
    void deleteCidrCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteHealthCheckCallback(OAIHttpRequestWorker *worker);
    void deleteHostedZoneCallback(OAIHttpRequestWorker *worker);
    void deleteKeySigningKeyCallback(OAIHttpRequestWorker *worker);
    void deleteQueryLoggingConfigCallback(OAIHttpRequestWorker *worker);
    void deleteReusableDelegationSetCallback(OAIHttpRequestWorker *worker);
    void deleteTrafficPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteTrafficPolicyInstanceCallback(OAIHttpRequestWorker *worker);
    void deleteVPCAssociationAuthorizationCallback(OAIHttpRequestWorker *worker);
    void disableHostedZoneDNSSECCallback(OAIHttpRequestWorker *worker);
    void disassociateVPCFromHostedZoneCallback(OAIHttpRequestWorker *worker);
    void enableHostedZoneDNSSECCallback(OAIHttpRequestWorker *worker);
    void getAccountLimitCallback(OAIHttpRequestWorker *worker);
    void getChangeCallback(OAIHttpRequestWorker *worker);
    void getCheckerIpRangesCallback(OAIHttpRequestWorker *worker);
    void getDNSSECCallback(OAIHttpRequestWorker *worker);
    void getGeoLocationCallback(OAIHttpRequestWorker *worker);
    void getHealthCheckCallback(OAIHttpRequestWorker *worker);
    void getHealthCheckCountCallback(OAIHttpRequestWorker *worker);
    void getHealthCheckLastFailureReasonCallback(OAIHttpRequestWorker *worker);
    void getHealthCheckStatusCallback(OAIHttpRequestWorker *worker);
    void getHostedZoneCallback(OAIHttpRequestWorker *worker);
    void getHostedZoneCountCallback(OAIHttpRequestWorker *worker);
    void getHostedZoneLimitCallback(OAIHttpRequestWorker *worker);
    void getQueryLoggingConfigCallback(OAIHttpRequestWorker *worker);
    void getReusableDelegationSetCallback(OAIHttpRequestWorker *worker);
    void getReusableDelegationSetLimitCallback(OAIHttpRequestWorker *worker);
    void getTrafficPolicyCallback(OAIHttpRequestWorker *worker);
    void getTrafficPolicyInstanceCallback(OAIHttpRequestWorker *worker);
    void getTrafficPolicyInstanceCountCallback(OAIHttpRequestWorker *worker);
    void listCidrBlocksCallback(OAIHttpRequestWorker *worker);
    void listCidrCollectionsCallback(OAIHttpRequestWorker *worker);
    void listCidrLocationsCallback(OAIHttpRequestWorker *worker);
    void listGeoLocationsCallback(OAIHttpRequestWorker *worker);
    void listHealthChecksCallback(OAIHttpRequestWorker *worker);
    void listHostedZonesCallback(OAIHttpRequestWorker *worker);
    void listHostedZonesByNameCallback(OAIHttpRequestWorker *worker);
    void listHostedZonesByVPCCallback(OAIHttpRequestWorker *worker);
    void listQueryLoggingConfigsCallback(OAIHttpRequestWorker *worker);
    void listResourceRecordSetsCallback(OAIHttpRequestWorker *worker);
    void listReusableDelegationSetsCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourcesCallback(OAIHttpRequestWorker *worker);
    void listTrafficPoliciesCallback(OAIHttpRequestWorker *worker);
    void listTrafficPolicyInstancesCallback(OAIHttpRequestWorker *worker);
    void listTrafficPolicyInstancesByHostedZoneCallback(OAIHttpRequestWorker *worker);
    void listTrafficPolicyInstancesByPolicyCallback(OAIHttpRequestWorker *worker);
    void listTrafficPolicyVersionsCallback(OAIHttpRequestWorker *worker);
    void listVPCAssociationAuthorizationsCallback(OAIHttpRequestWorker *worker);
    void testDNSAnswerCallback(OAIHttpRequestWorker *worker);
    void updateHealthCheckCallback(OAIHttpRequestWorker *worker);
    void updateHostedZoneCommentCallback(OAIHttpRequestWorker *worker);
    void updateTrafficPolicyCommentCallback(OAIHttpRequestWorker *worker);
    void updateTrafficPolicyInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateKeySigningKeySignal(OAIActivateKeySigningKeyResponse summary);
    void associateVPCWithHostedZoneSignal(OAIAssociateVPCWithHostedZoneResponse summary);
    void changeCidrCollectionSignal(OAIChangeCidrCollectionResponse summary);
    void changeResourceRecordSetsSignal(OAIChangeResourceRecordSetsResponse summary);
    void changeTagsForResourceSignal(OAIObject summary);
    void createCidrCollectionSignal(OAICreateCidrCollectionResponse summary);
    void createHealthCheckSignal(OAICreateHealthCheckResponse summary);
    void createHostedZoneSignal(OAICreateHostedZoneResponse summary);
    void createKeySigningKeySignal(OAICreateKeySigningKeyResponse summary);
    void createQueryLoggingConfigSignal(OAICreateQueryLoggingConfigResponse summary);
    void createReusableDelegationSetSignal(OAICreateReusableDelegationSetResponse summary);
    void createTrafficPolicySignal(OAICreateTrafficPolicyResponse summary);
    void createTrafficPolicyInstanceSignal(OAICreateTrafficPolicyInstanceResponse summary);
    void createTrafficPolicyVersionSignal(OAICreateTrafficPolicyVersionResponse summary);
    void createVPCAssociationAuthorizationSignal(OAICreateVPCAssociationAuthorizationResponse summary);
    void deactivateKeySigningKeySignal(OAIDeactivateKeySigningKeyResponse summary);
    void deleteCidrCollectionSignal(OAIObject summary);
    void deleteHealthCheckSignal(OAIObject summary);
    void deleteHostedZoneSignal(OAIDeleteHostedZoneResponse summary);
    void deleteKeySigningKeySignal(OAIDeleteKeySigningKeyResponse summary);
    void deleteQueryLoggingConfigSignal(OAIObject summary);
    void deleteReusableDelegationSetSignal(OAIObject summary);
    void deleteTrafficPolicySignal(OAIObject summary);
    void deleteTrafficPolicyInstanceSignal(OAIObject summary);
    void deleteVPCAssociationAuthorizationSignal(OAIObject summary);
    void disableHostedZoneDNSSECSignal(OAIDisableHostedZoneDNSSECResponse summary);
    void disassociateVPCFromHostedZoneSignal(OAIDisassociateVPCFromHostedZoneResponse summary);
    void enableHostedZoneDNSSECSignal(OAIEnableHostedZoneDNSSECResponse summary);
    void getAccountLimitSignal(OAIGetAccountLimitResponse summary);
    void getChangeSignal(OAIGetChangeResponse summary);
    void getCheckerIpRangesSignal(OAIGetCheckerIpRangesResponse summary);
    void getDNSSECSignal(OAIGetDNSSECResponse summary);
    void getGeoLocationSignal(OAIGetGeoLocationResponse summary);
    void getHealthCheckSignal(OAIGetHealthCheckResponse summary);
    void getHealthCheckCountSignal(OAIGetHealthCheckCountResponse summary);
    void getHealthCheckLastFailureReasonSignal(OAIGetHealthCheckLastFailureReasonResponse summary);
    void getHealthCheckStatusSignal(OAIGetHealthCheckStatusResponse summary);
    void getHostedZoneSignal(OAIGetHostedZoneResponse summary);
    void getHostedZoneCountSignal(OAIGetHostedZoneCountResponse summary);
    void getHostedZoneLimitSignal(OAIGetHostedZoneLimitResponse summary);
    void getQueryLoggingConfigSignal(OAIGetQueryLoggingConfigResponse summary);
    void getReusableDelegationSetSignal(OAIGetReusableDelegationSetResponse summary);
    void getReusableDelegationSetLimitSignal(OAIGetReusableDelegationSetLimitResponse summary);
    void getTrafficPolicySignal(OAIGetTrafficPolicyResponse summary);
    void getTrafficPolicyInstanceSignal(OAIGetTrafficPolicyInstanceResponse summary);
    void getTrafficPolicyInstanceCountSignal(OAIGetTrafficPolicyInstanceCountResponse summary);
    void listCidrBlocksSignal(OAIListCidrBlocksResponse summary);
    void listCidrCollectionsSignal(OAIListCidrCollectionsResponse summary);
    void listCidrLocationsSignal(OAIListCidrLocationsResponse summary);
    void listGeoLocationsSignal(OAIListGeoLocationsResponse summary);
    void listHealthChecksSignal(OAIListHealthChecksResponse summary);
    void listHostedZonesSignal(OAIListHostedZonesResponse summary);
    void listHostedZonesByNameSignal(OAIListHostedZonesByNameResponse summary);
    void listHostedZonesByVPCSignal(OAIListHostedZonesByVPCResponse summary);
    void listQueryLoggingConfigsSignal(OAIListQueryLoggingConfigsResponse summary);
    void listResourceRecordSetsSignal(OAIListResourceRecordSetsResponse summary);
    void listReusableDelegationSetsSignal(OAIListReusableDelegationSetsResponse summary);
    void listTagsForResourceSignal(OAIListTagsForResourceResponse summary);
    void listTagsForResourcesSignal(OAIListTagsForResourcesResponse summary);
    void listTrafficPoliciesSignal(OAIListTrafficPoliciesResponse summary);
    void listTrafficPolicyInstancesSignal(OAIListTrafficPolicyInstancesResponse summary);
    void listTrafficPolicyInstancesByHostedZoneSignal(OAIListTrafficPolicyInstancesByHostedZoneResponse summary);
    void listTrafficPolicyInstancesByPolicySignal(OAIListTrafficPolicyInstancesByPolicyResponse summary);
    void listTrafficPolicyVersionsSignal(OAIListTrafficPolicyVersionsResponse summary);
    void listVPCAssociationAuthorizationsSignal(OAIListVPCAssociationAuthorizationsResponse summary);
    void testDNSAnswerSignal(OAITestDNSAnswerResponse summary);
    void updateHealthCheckSignal(OAIUpdateHealthCheckResponse summary);
    void updateHostedZoneCommentSignal(OAIUpdateHostedZoneCommentResponse summary);
    void updateTrafficPolicyCommentSignal(OAIUpdateTrafficPolicyCommentResponse summary);
    void updateTrafficPolicyInstanceSignal(OAIUpdateTrafficPolicyInstanceResponse summary);


    void activateKeySigningKeySignalFull(OAIHttpRequestWorker *worker, OAIActivateKeySigningKeyResponse summary);
    void associateVPCWithHostedZoneSignalFull(OAIHttpRequestWorker *worker, OAIAssociateVPCWithHostedZoneResponse summary);
    void changeCidrCollectionSignalFull(OAIHttpRequestWorker *worker, OAIChangeCidrCollectionResponse summary);
    void changeResourceRecordSetsSignalFull(OAIHttpRequestWorker *worker, OAIChangeResourceRecordSetsResponse summary);
    void changeTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createCidrCollectionSignalFull(OAIHttpRequestWorker *worker, OAICreateCidrCollectionResponse summary);
    void createHealthCheckSignalFull(OAIHttpRequestWorker *worker, OAICreateHealthCheckResponse summary);
    void createHostedZoneSignalFull(OAIHttpRequestWorker *worker, OAICreateHostedZoneResponse summary);
    void createKeySigningKeySignalFull(OAIHttpRequestWorker *worker, OAICreateKeySigningKeyResponse summary);
    void createQueryLoggingConfigSignalFull(OAIHttpRequestWorker *worker, OAICreateQueryLoggingConfigResponse summary);
    void createReusableDelegationSetSignalFull(OAIHttpRequestWorker *worker, OAICreateReusableDelegationSetResponse summary);
    void createTrafficPolicySignalFull(OAIHttpRequestWorker *worker, OAICreateTrafficPolicyResponse summary);
    void createTrafficPolicyInstanceSignalFull(OAIHttpRequestWorker *worker, OAICreateTrafficPolicyInstanceResponse summary);
    void createTrafficPolicyVersionSignalFull(OAIHttpRequestWorker *worker, OAICreateTrafficPolicyVersionResponse summary);
    void createVPCAssociationAuthorizationSignalFull(OAIHttpRequestWorker *worker, OAICreateVPCAssociationAuthorizationResponse summary);
    void deactivateKeySigningKeySignalFull(OAIHttpRequestWorker *worker, OAIDeactivateKeySigningKeyResponse summary);
    void deleteCidrCollectionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteHealthCheckSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteHostedZoneSignalFull(OAIHttpRequestWorker *worker, OAIDeleteHostedZoneResponse summary);
    void deleteKeySigningKeySignalFull(OAIHttpRequestWorker *worker, OAIDeleteKeySigningKeyResponse summary);
    void deleteQueryLoggingConfigSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteReusableDelegationSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteTrafficPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteTrafficPolicyInstanceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteVPCAssociationAuthorizationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void disableHostedZoneDNSSECSignalFull(OAIHttpRequestWorker *worker, OAIDisableHostedZoneDNSSECResponse summary);
    void disassociateVPCFromHostedZoneSignalFull(OAIHttpRequestWorker *worker, OAIDisassociateVPCFromHostedZoneResponse summary);
    void enableHostedZoneDNSSECSignalFull(OAIHttpRequestWorker *worker, OAIEnableHostedZoneDNSSECResponse summary);
    void getAccountLimitSignalFull(OAIHttpRequestWorker *worker, OAIGetAccountLimitResponse summary);
    void getChangeSignalFull(OAIHttpRequestWorker *worker, OAIGetChangeResponse summary);
    void getCheckerIpRangesSignalFull(OAIHttpRequestWorker *worker, OAIGetCheckerIpRangesResponse summary);
    void getDNSSECSignalFull(OAIHttpRequestWorker *worker, OAIGetDNSSECResponse summary);
    void getGeoLocationSignalFull(OAIHttpRequestWorker *worker, OAIGetGeoLocationResponse summary);
    void getHealthCheckSignalFull(OAIHttpRequestWorker *worker, OAIGetHealthCheckResponse summary);
    void getHealthCheckCountSignalFull(OAIHttpRequestWorker *worker, OAIGetHealthCheckCountResponse summary);
    void getHealthCheckLastFailureReasonSignalFull(OAIHttpRequestWorker *worker, OAIGetHealthCheckLastFailureReasonResponse summary);
    void getHealthCheckStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetHealthCheckStatusResponse summary);
    void getHostedZoneSignalFull(OAIHttpRequestWorker *worker, OAIGetHostedZoneResponse summary);
    void getHostedZoneCountSignalFull(OAIHttpRequestWorker *worker, OAIGetHostedZoneCountResponse summary);
    void getHostedZoneLimitSignalFull(OAIHttpRequestWorker *worker, OAIGetHostedZoneLimitResponse summary);
    void getQueryLoggingConfigSignalFull(OAIHttpRequestWorker *worker, OAIGetQueryLoggingConfigResponse summary);
    void getReusableDelegationSetSignalFull(OAIHttpRequestWorker *worker, OAIGetReusableDelegationSetResponse summary);
    void getReusableDelegationSetLimitSignalFull(OAIHttpRequestWorker *worker, OAIGetReusableDelegationSetLimitResponse summary);
    void getTrafficPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetTrafficPolicyResponse summary);
    void getTrafficPolicyInstanceSignalFull(OAIHttpRequestWorker *worker, OAIGetTrafficPolicyInstanceResponse summary);
    void getTrafficPolicyInstanceCountSignalFull(OAIHttpRequestWorker *worker, OAIGetTrafficPolicyInstanceCountResponse summary);
    void listCidrBlocksSignalFull(OAIHttpRequestWorker *worker, OAIListCidrBlocksResponse summary);
    void listCidrCollectionsSignalFull(OAIHttpRequestWorker *worker, OAIListCidrCollectionsResponse summary);
    void listCidrLocationsSignalFull(OAIHttpRequestWorker *worker, OAIListCidrLocationsResponse summary);
    void listGeoLocationsSignalFull(OAIHttpRequestWorker *worker, OAIListGeoLocationsResponse summary);
    void listHealthChecksSignalFull(OAIHttpRequestWorker *worker, OAIListHealthChecksResponse summary);
    void listHostedZonesSignalFull(OAIHttpRequestWorker *worker, OAIListHostedZonesResponse summary);
    void listHostedZonesByNameSignalFull(OAIHttpRequestWorker *worker, OAIListHostedZonesByNameResponse summary);
    void listHostedZonesByVPCSignalFull(OAIHttpRequestWorker *worker, OAIListHostedZonesByVPCResponse summary);
    void listQueryLoggingConfigsSignalFull(OAIHttpRequestWorker *worker, OAIListQueryLoggingConfigsResponse summary);
    void listResourceRecordSetsSignalFull(OAIHttpRequestWorker *worker, OAIListResourceRecordSetsResponse summary);
    void listReusableDelegationSetsSignalFull(OAIHttpRequestWorker *worker, OAIListReusableDelegationSetsResponse summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResponse summary);
    void listTagsForResourcesSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourcesResponse summary);
    void listTrafficPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIListTrafficPoliciesResponse summary);
    void listTrafficPolicyInstancesSignalFull(OAIHttpRequestWorker *worker, OAIListTrafficPolicyInstancesResponse summary);
    void listTrafficPolicyInstancesByHostedZoneSignalFull(OAIHttpRequestWorker *worker, OAIListTrafficPolicyInstancesByHostedZoneResponse summary);
    void listTrafficPolicyInstancesByPolicySignalFull(OAIHttpRequestWorker *worker, OAIListTrafficPolicyInstancesByPolicyResponse summary);
    void listTrafficPolicyVersionsSignalFull(OAIHttpRequestWorker *worker, OAIListTrafficPolicyVersionsResponse summary);
    void listVPCAssociationAuthorizationsSignalFull(OAIHttpRequestWorker *worker, OAIListVPCAssociationAuthorizationsResponse summary);
    void testDNSAnswerSignalFull(OAIHttpRequestWorker *worker, OAITestDNSAnswerResponse summary);
    void updateHealthCheckSignalFull(OAIHttpRequestWorker *worker, OAIUpdateHealthCheckResponse summary);
    void updateHostedZoneCommentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateHostedZoneCommentResponse summary);
    void updateTrafficPolicyCommentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTrafficPolicyCommentResponse summary);
    void updateTrafficPolicyInstanceSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTrafficPolicyInstanceResponse summary);

    Q_DECL_DEPRECATED_X("Use activateKeySigningKeySignalError() instead")
    void activateKeySigningKeySignalE(OAIActivateKeySigningKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activateKeySigningKeySignalError(OAIActivateKeySigningKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateVPCWithHostedZoneSignalError() instead")
    void associateVPCWithHostedZoneSignalE(OAIAssociateVPCWithHostedZoneResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateVPCWithHostedZoneSignalError(OAIAssociateVPCWithHostedZoneResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeCidrCollectionSignalError() instead")
    void changeCidrCollectionSignalE(OAIChangeCidrCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeCidrCollectionSignalError(OAIChangeCidrCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeResourceRecordSetsSignalError() instead")
    void changeResourceRecordSetsSignalE(OAIChangeResourceRecordSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeResourceRecordSetsSignalError(OAIChangeResourceRecordSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeTagsForResourceSignalError() instead")
    void changeTagsForResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeTagsForResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCidrCollectionSignalError() instead")
    void createCidrCollectionSignalE(OAICreateCidrCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCidrCollectionSignalError(OAICreateCidrCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createHealthCheckSignalError() instead")
    void createHealthCheckSignalE(OAICreateHealthCheckResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createHealthCheckSignalError(OAICreateHealthCheckResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createHostedZoneSignalError() instead")
    void createHostedZoneSignalE(OAICreateHostedZoneResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createHostedZoneSignalError(OAICreateHostedZoneResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createKeySigningKeySignalError() instead")
    void createKeySigningKeySignalE(OAICreateKeySigningKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createKeySigningKeySignalError(OAICreateKeySigningKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createQueryLoggingConfigSignalError() instead")
    void createQueryLoggingConfigSignalE(OAICreateQueryLoggingConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createQueryLoggingConfigSignalError(OAICreateQueryLoggingConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReusableDelegationSetSignalError() instead")
    void createReusableDelegationSetSignalE(OAICreateReusableDelegationSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createReusableDelegationSetSignalError(OAICreateReusableDelegationSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTrafficPolicySignalError() instead")
    void createTrafficPolicySignalE(OAICreateTrafficPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrafficPolicySignalError(OAICreateTrafficPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTrafficPolicyInstanceSignalError() instead")
    void createTrafficPolicyInstanceSignalE(OAICreateTrafficPolicyInstanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrafficPolicyInstanceSignalError(OAICreateTrafficPolicyInstanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTrafficPolicyVersionSignalError() instead")
    void createTrafficPolicyVersionSignalE(OAICreateTrafficPolicyVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrafficPolicyVersionSignalError(OAICreateTrafficPolicyVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVPCAssociationAuthorizationSignalError() instead")
    void createVPCAssociationAuthorizationSignalE(OAICreateVPCAssociationAuthorizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVPCAssociationAuthorizationSignalError(OAICreateVPCAssociationAuthorizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateKeySigningKeySignalError() instead")
    void deactivateKeySigningKeySignalE(OAIDeactivateKeySigningKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateKeySigningKeySignalError(OAIDeactivateKeySigningKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCidrCollectionSignalError() instead")
    void deleteCidrCollectionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCidrCollectionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHealthCheckSignalError() instead")
    void deleteHealthCheckSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHealthCheckSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHostedZoneSignalError() instead")
    void deleteHostedZoneSignalE(OAIDeleteHostedZoneResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHostedZoneSignalError(OAIDeleteHostedZoneResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteKeySigningKeySignalError() instead")
    void deleteKeySigningKeySignalE(OAIDeleteKeySigningKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteKeySigningKeySignalError(OAIDeleteKeySigningKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteQueryLoggingConfigSignalError() instead")
    void deleteQueryLoggingConfigSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteQueryLoggingConfigSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReusableDelegationSetSignalError() instead")
    void deleteReusableDelegationSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReusableDelegationSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrafficPolicySignalError() instead")
    void deleteTrafficPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrafficPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrafficPolicyInstanceSignalError() instead")
    void deleteTrafficPolicyInstanceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrafficPolicyInstanceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVPCAssociationAuthorizationSignalError() instead")
    void deleteVPCAssociationAuthorizationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVPCAssociationAuthorizationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableHostedZoneDNSSECSignalError() instead")
    void disableHostedZoneDNSSECSignalE(OAIDisableHostedZoneDNSSECResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disableHostedZoneDNSSECSignalError(OAIDisableHostedZoneDNSSECResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateVPCFromHostedZoneSignalError() instead")
    void disassociateVPCFromHostedZoneSignalE(OAIDisassociateVPCFromHostedZoneResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateVPCFromHostedZoneSignalError(OAIDisassociateVPCFromHostedZoneResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableHostedZoneDNSSECSignalError() instead")
    void enableHostedZoneDNSSECSignalE(OAIEnableHostedZoneDNSSECResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enableHostedZoneDNSSECSignalError(OAIEnableHostedZoneDNSSECResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountLimitSignalError() instead")
    void getAccountLimitSignalE(OAIGetAccountLimitResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountLimitSignalError(OAIGetAccountLimitResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangeSignalError() instead")
    void getChangeSignalE(OAIGetChangeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangeSignalError(OAIGetChangeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCheckerIpRangesSignalError() instead")
    void getCheckerIpRangesSignalE(OAIGetCheckerIpRangesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCheckerIpRangesSignalError(OAIGetCheckerIpRangesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDNSSECSignalError() instead")
    void getDNSSECSignalE(OAIGetDNSSECResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDNSSECSignalError(OAIGetDNSSECResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeoLocationSignalError() instead")
    void getGeoLocationSignalE(OAIGetGeoLocationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeoLocationSignalError(OAIGetGeoLocationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHealthCheckSignalError() instead")
    void getHealthCheckSignalE(OAIGetHealthCheckResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHealthCheckSignalError(OAIGetHealthCheckResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHealthCheckCountSignalError() instead")
    void getHealthCheckCountSignalE(OAIGetHealthCheckCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHealthCheckCountSignalError(OAIGetHealthCheckCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHealthCheckLastFailureReasonSignalError() instead")
    void getHealthCheckLastFailureReasonSignalE(OAIGetHealthCheckLastFailureReasonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHealthCheckLastFailureReasonSignalError(OAIGetHealthCheckLastFailureReasonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHealthCheckStatusSignalError() instead")
    void getHealthCheckStatusSignalE(OAIGetHealthCheckStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHealthCheckStatusSignalError(OAIGetHealthCheckStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHostedZoneSignalError() instead")
    void getHostedZoneSignalE(OAIGetHostedZoneResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHostedZoneSignalError(OAIGetHostedZoneResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHostedZoneCountSignalError() instead")
    void getHostedZoneCountSignalE(OAIGetHostedZoneCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHostedZoneCountSignalError(OAIGetHostedZoneCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHostedZoneLimitSignalError() instead")
    void getHostedZoneLimitSignalE(OAIGetHostedZoneLimitResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHostedZoneLimitSignalError(OAIGetHostedZoneLimitResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueryLoggingConfigSignalError() instead")
    void getQueryLoggingConfigSignalE(OAIGetQueryLoggingConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueryLoggingConfigSignalError(OAIGetQueryLoggingConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReusableDelegationSetSignalError() instead")
    void getReusableDelegationSetSignalE(OAIGetReusableDelegationSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReusableDelegationSetSignalError(OAIGetReusableDelegationSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReusableDelegationSetLimitSignalError() instead")
    void getReusableDelegationSetLimitSignalE(OAIGetReusableDelegationSetLimitResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReusableDelegationSetLimitSignalError(OAIGetReusableDelegationSetLimitResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrafficPolicySignalError() instead")
    void getTrafficPolicySignalE(OAIGetTrafficPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrafficPolicySignalError(OAIGetTrafficPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrafficPolicyInstanceSignalError() instead")
    void getTrafficPolicyInstanceSignalE(OAIGetTrafficPolicyInstanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrafficPolicyInstanceSignalError(OAIGetTrafficPolicyInstanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrafficPolicyInstanceCountSignalError() instead")
    void getTrafficPolicyInstanceCountSignalE(OAIGetTrafficPolicyInstanceCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrafficPolicyInstanceCountSignalError(OAIGetTrafficPolicyInstanceCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCidrBlocksSignalError() instead")
    void listCidrBlocksSignalE(OAIListCidrBlocksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCidrBlocksSignalError(OAIListCidrBlocksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCidrCollectionsSignalError() instead")
    void listCidrCollectionsSignalE(OAIListCidrCollectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCidrCollectionsSignalError(OAIListCidrCollectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCidrLocationsSignalError() instead")
    void listCidrLocationsSignalE(OAIListCidrLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCidrLocationsSignalError(OAIListCidrLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGeoLocationsSignalError() instead")
    void listGeoLocationsSignalE(OAIListGeoLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGeoLocationsSignalError(OAIListGeoLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHealthChecksSignalError() instead")
    void listHealthChecksSignalE(OAIListHealthChecksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listHealthChecksSignalError(OAIListHealthChecksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHostedZonesSignalError() instead")
    void listHostedZonesSignalE(OAIListHostedZonesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listHostedZonesSignalError(OAIListHostedZonesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHostedZonesByNameSignalError() instead")
    void listHostedZonesByNameSignalE(OAIListHostedZonesByNameResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listHostedZonesByNameSignalError(OAIListHostedZonesByNameResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHostedZonesByVPCSignalError() instead")
    void listHostedZonesByVPCSignalE(OAIListHostedZonesByVPCResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listHostedZonesByVPCSignalError(OAIListHostedZonesByVPCResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listQueryLoggingConfigsSignalError() instead")
    void listQueryLoggingConfigsSignalE(OAIListQueryLoggingConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listQueryLoggingConfigsSignalError(OAIListQueryLoggingConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResourceRecordSetsSignalError() instead")
    void listResourceRecordSetsSignalE(OAIListResourceRecordSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourceRecordSetsSignalError(OAIListResourceRecordSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listReusableDelegationSetsSignalError() instead")
    void listReusableDelegationSetsSignalE(OAIListReusableDelegationSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listReusableDelegationSetsSignalError(OAIListReusableDelegationSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourcesSignalError() instead")
    void listTagsForResourcesSignalE(OAIListTagsForResourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourcesSignalError(OAIListTagsForResourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrafficPoliciesSignalError() instead")
    void listTrafficPoliciesSignalE(OAIListTrafficPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrafficPoliciesSignalError(OAIListTrafficPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrafficPolicyInstancesSignalError() instead")
    void listTrafficPolicyInstancesSignalE(OAIListTrafficPolicyInstancesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrafficPolicyInstancesSignalError(OAIListTrafficPolicyInstancesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrafficPolicyInstancesByHostedZoneSignalError() instead")
    void listTrafficPolicyInstancesByHostedZoneSignalE(OAIListTrafficPolicyInstancesByHostedZoneResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrafficPolicyInstancesByHostedZoneSignalError(OAIListTrafficPolicyInstancesByHostedZoneResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrafficPolicyInstancesByPolicySignalError() instead")
    void listTrafficPolicyInstancesByPolicySignalE(OAIListTrafficPolicyInstancesByPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrafficPolicyInstancesByPolicySignalError(OAIListTrafficPolicyInstancesByPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrafficPolicyVersionsSignalError() instead")
    void listTrafficPolicyVersionsSignalE(OAIListTrafficPolicyVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrafficPolicyVersionsSignalError(OAIListTrafficPolicyVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVPCAssociationAuthorizationsSignalError() instead")
    void listVPCAssociationAuthorizationsSignalE(OAIListVPCAssociationAuthorizationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVPCAssociationAuthorizationsSignalError(OAIListVPCAssociationAuthorizationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testDNSAnswerSignalError() instead")
    void testDNSAnswerSignalE(OAITestDNSAnswerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testDNSAnswerSignalError(OAITestDNSAnswerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateHealthCheckSignalError() instead")
    void updateHealthCheckSignalE(OAIUpdateHealthCheckResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateHealthCheckSignalError(OAIUpdateHealthCheckResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateHostedZoneCommentSignalError() instead")
    void updateHostedZoneCommentSignalE(OAIUpdateHostedZoneCommentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateHostedZoneCommentSignalError(OAIUpdateHostedZoneCommentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrafficPolicyCommentSignalError() instead")
    void updateTrafficPolicyCommentSignalE(OAIUpdateTrafficPolicyCommentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrafficPolicyCommentSignalError(OAIUpdateTrafficPolicyCommentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrafficPolicyInstanceSignalError() instead")
    void updateTrafficPolicyInstanceSignalE(OAIUpdateTrafficPolicyInstanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrafficPolicyInstanceSignalError(OAIUpdateTrafficPolicyInstanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateKeySigningKeySignalErrorFull() instead")
    void activateKeySigningKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateKeySigningKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateVPCWithHostedZoneSignalErrorFull() instead")
    void associateVPCWithHostedZoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateVPCWithHostedZoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeCidrCollectionSignalErrorFull() instead")
    void changeCidrCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeCidrCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeResourceRecordSetsSignalErrorFull() instead")
    void changeResourceRecordSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeResourceRecordSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeTagsForResourceSignalErrorFull() instead")
    void changeTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCidrCollectionSignalErrorFull() instead")
    void createCidrCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCidrCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createHealthCheckSignalErrorFull() instead")
    void createHealthCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createHealthCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createHostedZoneSignalErrorFull() instead")
    void createHostedZoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createHostedZoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createKeySigningKeySignalErrorFull() instead")
    void createKeySigningKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createKeySigningKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createQueryLoggingConfigSignalErrorFull() instead")
    void createQueryLoggingConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createQueryLoggingConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReusableDelegationSetSignalErrorFull() instead")
    void createReusableDelegationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createReusableDelegationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTrafficPolicySignalErrorFull() instead")
    void createTrafficPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrafficPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTrafficPolicyInstanceSignalErrorFull() instead")
    void createTrafficPolicyInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrafficPolicyInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTrafficPolicyVersionSignalErrorFull() instead")
    void createTrafficPolicyVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrafficPolicyVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVPCAssociationAuthorizationSignalErrorFull() instead")
    void createVPCAssociationAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVPCAssociationAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateKeySigningKeySignalErrorFull() instead")
    void deactivateKeySigningKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateKeySigningKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCidrCollectionSignalErrorFull() instead")
    void deleteCidrCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCidrCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHealthCheckSignalErrorFull() instead")
    void deleteHealthCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHealthCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHostedZoneSignalErrorFull() instead")
    void deleteHostedZoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHostedZoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteKeySigningKeySignalErrorFull() instead")
    void deleteKeySigningKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteKeySigningKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteQueryLoggingConfigSignalErrorFull() instead")
    void deleteQueryLoggingConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteQueryLoggingConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReusableDelegationSetSignalErrorFull() instead")
    void deleteReusableDelegationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReusableDelegationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrafficPolicySignalErrorFull() instead")
    void deleteTrafficPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrafficPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrafficPolicyInstanceSignalErrorFull() instead")
    void deleteTrafficPolicyInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrafficPolicyInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVPCAssociationAuthorizationSignalErrorFull() instead")
    void deleteVPCAssociationAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVPCAssociationAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableHostedZoneDNSSECSignalErrorFull() instead")
    void disableHostedZoneDNSSECSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableHostedZoneDNSSECSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateVPCFromHostedZoneSignalErrorFull() instead")
    void disassociateVPCFromHostedZoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateVPCFromHostedZoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableHostedZoneDNSSECSignalErrorFull() instead")
    void enableHostedZoneDNSSECSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableHostedZoneDNSSECSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountLimitSignalErrorFull() instead")
    void getAccountLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangeSignalErrorFull() instead")
    void getChangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCheckerIpRangesSignalErrorFull() instead")
    void getCheckerIpRangesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCheckerIpRangesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDNSSECSignalErrorFull() instead")
    void getDNSSECSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDNSSECSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeoLocationSignalErrorFull() instead")
    void getGeoLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeoLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHealthCheckSignalErrorFull() instead")
    void getHealthCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHealthCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHealthCheckCountSignalErrorFull() instead")
    void getHealthCheckCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHealthCheckCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHealthCheckLastFailureReasonSignalErrorFull() instead")
    void getHealthCheckLastFailureReasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHealthCheckLastFailureReasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHealthCheckStatusSignalErrorFull() instead")
    void getHealthCheckStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHealthCheckStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHostedZoneSignalErrorFull() instead")
    void getHostedZoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHostedZoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHostedZoneCountSignalErrorFull() instead")
    void getHostedZoneCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHostedZoneCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHostedZoneLimitSignalErrorFull() instead")
    void getHostedZoneLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHostedZoneLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueryLoggingConfigSignalErrorFull() instead")
    void getQueryLoggingConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueryLoggingConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReusableDelegationSetSignalErrorFull() instead")
    void getReusableDelegationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReusableDelegationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReusableDelegationSetLimitSignalErrorFull() instead")
    void getReusableDelegationSetLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReusableDelegationSetLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrafficPolicySignalErrorFull() instead")
    void getTrafficPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrafficPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrafficPolicyInstanceSignalErrorFull() instead")
    void getTrafficPolicyInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrafficPolicyInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrafficPolicyInstanceCountSignalErrorFull() instead")
    void getTrafficPolicyInstanceCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrafficPolicyInstanceCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCidrBlocksSignalErrorFull() instead")
    void listCidrBlocksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCidrBlocksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCidrCollectionsSignalErrorFull() instead")
    void listCidrCollectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCidrCollectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCidrLocationsSignalErrorFull() instead")
    void listCidrLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCidrLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGeoLocationsSignalErrorFull() instead")
    void listGeoLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGeoLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHealthChecksSignalErrorFull() instead")
    void listHealthChecksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listHealthChecksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHostedZonesSignalErrorFull() instead")
    void listHostedZonesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listHostedZonesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHostedZonesByNameSignalErrorFull() instead")
    void listHostedZonesByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listHostedZonesByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHostedZonesByVPCSignalErrorFull() instead")
    void listHostedZonesByVPCSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listHostedZonesByVPCSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listQueryLoggingConfigsSignalErrorFull() instead")
    void listQueryLoggingConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listQueryLoggingConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResourceRecordSetsSignalErrorFull() instead")
    void listResourceRecordSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourceRecordSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listReusableDelegationSetsSignalErrorFull() instead")
    void listReusableDelegationSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listReusableDelegationSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourcesSignalErrorFull() instead")
    void listTagsForResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrafficPoliciesSignalErrorFull() instead")
    void listTrafficPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrafficPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrafficPolicyInstancesSignalErrorFull() instead")
    void listTrafficPolicyInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrafficPolicyInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrafficPolicyInstancesByHostedZoneSignalErrorFull() instead")
    void listTrafficPolicyInstancesByHostedZoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrafficPolicyInstancesByHostedZoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrafficPolicyInstancesByPolicySignalErrorFull() instead")
    void listTrafficPolicyInstancesByPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrafficPolicyInstancesByPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrafficPolicyVersionsSignalErrorFull() instead")
    void listTrafficPolicyVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrafficPolicyVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVPCAssociationAuthorizationsSignalErrorFull() instead")
    void listVPCAssociationAuthorizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVPCAssociationAuthorizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testDNSAnswerSignalErrorFull() instead")
    void testDNSAnswerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testDNSAnswerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateHealthCheckSignalErrorFull() instead")
    void updateHealthCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateHealthCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateHostedZoneCommentSignalErrorFull() instead")
    void updateHostedZoneCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateHostedZoneCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrafficPolicyCommentSignalErrorFull() instead")
    void updateTrafficPolicyCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrafficPolicyCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrafficPolicyInstanceSignalErrorFull() instead")
    void updateTrafficPolicyInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrafficPolicyInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
