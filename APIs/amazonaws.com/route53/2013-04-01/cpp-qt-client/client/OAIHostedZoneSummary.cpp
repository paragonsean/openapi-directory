/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHostedZoneSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHostedZoneSummary::OAIHostedZoneSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHostedZoneSummary::OAIHostedZoneSummary() {
    this->initializeModel();
}

OAIHostedZoneSummary::~OAIHostedZoneSummary() {}

void OAIHostedZoneSummary::initializeModel() {

    m_hosted_zone_id_isSet = false;
    m_hosted_zone_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;
}

void OAIHostedZoneSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHostedZoneSummary::fromJsonObject(QJsonObject json) {

    m_hosted_zone_id_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone_id, json[QString("HostedZoneId")]);
    m_hosted_zone_id_isSet = !json[QString("HostedZoneId")].isNull() && m_hosted_zone_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;
}

QString OAIHostedZoneSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHostedZoneSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_hosted_zone_id_isSet) {
        obj.insert(QString("HostedZoneId"), ::OpenAPI::toJsonValue(m_hosted_zone_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    return obj;
}

QString OAIHostedZoneSummary::getHostedZoneId() const {
    return m_hosted_zone_id;
}
void OAIHostedZoneSummary::setHostedZoneId(const QString &hosted_zone_id) {
    m_hosted_zone_id = hosted_zone_id;
    m_hosted_zone_id_isSet = true;
}

bool OAIHostedZoneSummary::is_hosted_zone_id_Set() const{
    return m_hosted_zone_id_isSet;
}

bool OAIHostedZoneSummary::is_hosted_zone_id_Valid() const{
    return m_hosted_zone_id_isValid;
}

QString OAIHostedZoneSummary::getName() const {
    return m_name;
}
void OAIHostedZoneSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHostedZoneSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHostedZoneSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIHostedZoneSummary_Owner OAIHostedZoneSummary::getOwner() const {
    return m_owner;
}
void OAIHostedZoneSummary::setOwner(const OAIHostedZoneSummary_Owner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIHostedZoneSummary::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIHostedZoneSummary::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIHostedZoneSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hosted_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHostedZoneSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hosted_zone_id_isValid && m_name_isValid && m_owner_isValid && true;
}

} // namespace OpenAPI
