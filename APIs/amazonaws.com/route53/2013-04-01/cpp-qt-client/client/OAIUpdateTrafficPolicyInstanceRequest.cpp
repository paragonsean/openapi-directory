/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTrafficPolicyInstanceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTrafficPolicyInstanceRequest::OAIUpdateTrafficPolicyInstanceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTrafficPolicyInstanceRequest::OAIUpdateTrafficPolicyInstanceRequest() {
    this->initializeModel();
}

OAIUpdateTrafficPolicyInstanceRequest::~OAIUpdateTrafficPolicyInstanceRequest() {}

void OAIUpdateTrafficPolicyInstanceRequest::initializeModel() {

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_traffic_policy_id_isSet = false;
    m_traffic_policy_id_isValid = false;

    m_traffic_policy_version_isSet = false;
    m_traffic_policy_version_isValid = false;
}

void OAIUpdateTrafficPolicyInstanceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTrafficPolicyInstanceRequest::fromJsonObject(QJsonObject json) {

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("TTL")]);
    m_ttl_isSet = !json[QString("TTL")].isNull() && m_ttl_isValid;

    m_traffic_policy_id_isValid = ::OpenAPI::fromJsonValue(m_traffic_policy_id, json[QString("TrafficPolicyId")]);
    m_traffic_policy_id_isSet = !json[QString("TrafficPolicyId")].isNull() && m_traffic_policy_id_isValid;

    m_traffic_policy_version_isValid = ::OpenAPI::fromJsonValue(m_traffic_policy_version, json[QString("TrafficPolicyVersion")]);
    m_traffic_policy_version_isSet = !json[QString("TrafficPolicyVersion")].isNull() && m_traffic_policy_version_isValid;
}

QString OAIUpdateTrafficPolicyInstanceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTrafficPolicyInstanceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ttl_isSet) {
        obj.insert(QString("TTL"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_traffic_policy_id_isSet) {
        obj.insert(QString("TrafficPolicyId"), ::OpenAPI::toJsonValue(m_traffic_policy_id));
    }
    if (m_traffic_policy_version_isSet) {
        obj.insert(QString("TrafficPolicyVersion"), ::OpenAPI::toJsonValue(m_traffic_policy_version));
    }
    return obj;
}

qint32 OAIUpdateTrafficPolicyInstanceRequest::getTtl() const {
    return m_ttl;
}
void OAIUpdateTrafficPolicyInstanceRequest::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIUpdateTrafficPolicyInstanceRequest::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIUpdateTrafficPolicyInstanceRequest::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAIUpdateTrafficPolicyInstanceRequest::getTrafficPolicyId() const {
    return m_traffic_policy_id;
}
void OAIUpdateTrafficPolicyInstanceRequest::setTrafficPolicyId(const QString &traffic_policy_id) {
    m_traffic_policy_id = traffic_policy_id;
    m_traffic_policy_id_isSet = true;
}

bool OAIUpdateTrafficPolicyInstanceRequest::is_traffic_policy_id_Set() const{
    return m_traffic_policy_id_isSet;
}

bool OAIUpdateTrafficPolicyInstanceRequest::is_traffic_policy_id_Valid() const{
    return m_traffic_policy_id_isValid;
}

qint32 OAIUpdateTrafficPolicyInstanceRequest::getTrafficPolicyVersion() const {
    return m_traffic_policy_version;
}
void OAIUpdateTrafficPolicyInstanceRequest::setTrafficPolicyVersion(const qint32 &traffic_policy_version) {
    m_traffic_policy_version = traffic_policy_version;
    m_traffic_policy_version_isSet = true;
}

bool OAIUpdateTrafficPolicyInstanceRequest::is_traffic_policy_version_Set() const{
    return m_traffic_policy_version_isSet;
}

bool OAIUpdateTrafficPolicyInstanceRequest::is_traffic_policy_version_Valid() const{
    return m_traffic_policy_version_isValid;
}

bool OAIUpdateTrafficPolicyInstanceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_policy_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTrafficPolicyInstanceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ttl_isValid && m_traffic_policy_id_isValid && m_traffic_policy_version_isValid && true;
}

} // namespace OpenAPI
