/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResourceRecordSets_inner.h
 *
 * 
 */

#ifndef OAIResourceRecordSets_inner_H
#define OAIResourceRecordSets_inner_H

#include <QJsonObject>

#include "OAICidrRoutingConfig.h"
#include "OAIRRType.h"
#include "OAIResourceRecordSetFailover.h"
#include "OAIResourceRecordSetRegion.h"
#include "OAIResourceRecordSet_AliasTarget.h"
#include "OAIResourceRecordSet_GeoLocation.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIResourceRecordSet_GeoLocation;
class OAIResourceRecordSet_AliasTarget;
class OAICidrRoutingConfig;

class OAIResourceRecordSets_inner : public OAIObject {
public:
    OAIResourceRecordSets_inner();
    OAIResourceRecordSets_inner(QString json);
    ~OAIResourceRecordSets_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIRRType getType() const;
    void setType(const OAIRRType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getSetIdentifier() const;
    void setSetIdentifier(const QString &set_identifier);
    bool is_set_identifier_Set() const;
    bool is_set_identifier_Valid() const;

    qint32 getWeight() const;
    void setWeight(const qint32 &weight);
    bool is_weight_Set() const;
    bool is_weight_Valid() const;

    OAIResourceRecordSetRegion getRegion() const;
    void setRegion(const OAIResourceRecordSetRegion &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    OAIResourceRecordSet_GeoLocation getGeoLocation() const;
    void setGeoLocation(const OAIResourceRecordSet_GeoLocation &geo_location);
    bool is_geo_location_Set() const;
    bool is_geo_location_Valid() const;

    OAIResourceRecordSetFailover getFailover() const;
    void setFailover(const OAIResourceRecordSetFailover &failover);
    bool is_failover_Set() const;
    bool is_failover_Valid() const;

    bool getMultiValueAnswer() const;
    void setMultiValueAnswer(const bool &multi_value_answer);
    bool is_multi_value_answer_Set() const;
    bool is_multi_value_answer_Valid() const;

    qint32 getTtl() const;
    void setTtl(const qint32 &ttl);
    bool is_ttl_Set() const;
    bool is_ttl_Valid() const;

    QList getResourceRecords() const;
    void setResourceRecords(const QList &resource_records);
    bool is_resource_records_Set() const;
    bool is_resource_records_Valid() const;

    OAIResourceRecordSet_AliasTarget getAliasTarget() const;
    void setAliasTarget(const OAIResourceRecordSet_AliasTarget &alias_target);
    bool is_alias_target_Set() const;
    bool is_alias_target_Valid() const;

    QString getHealthCheckId() const;
    void setHealthCheckId(const QString &health_check_id);
    bool is_health_check_id_Set() const;
    bool is_health_check_id_Valid() const;

    QString getTrafficPolicyInstanceId() const;
    void setTrafficPolicyInstanceId(const QString &traffic_policy_instance_id);
    bool is_traffic_policy_instance_id_Set() const;
    bool is_traffic_policy_instance_id_Valid() const;

    OAICidrRoutingConfig getCidrRoutingConfig() const;
    void setCidrRoutingConfig(const OAICidrRoutingConfig &cidr_routing_config);
    bool is_cidr_routing_config_Set() const;
    bool is_cidr_routing_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIRRType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_set_identifier;
    bool m_set_identifier_isSet;
    bool m_set_identifier_isValid;

    qint32 m_weight;
    bool m_weight_isSet;
    bool m_weight_isValid;

    OAIResourceRecordSetRegion m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    OAIResourceRecordSet_GeoLocation m_geo_location;
    bool m_geo_location_isSet;
    bool m_geo_location_isValid;

    OAIResourceRecordSetFailover m_failover;
    bool m_failover_isSet;
    bool m_failover_isValid;

    bool m_multi_value_answer;
    bool m_multi_value_answer_isSet;
    bool m_multi_value_answer_isValid;

    qint32 m_ttl;
    bool m_ttl_isSet;
    bool m_ttl_isValid;

    QList m_resource_records;
    bool m_resource_records_isSet;
    bool m_resource_records_isValid;

    OAIResourceRecordSet_AliasTarget m_alias_target;
    bool m_alias_target_isSet;
    bool m_alias_target_isValid;

    QString m_health_check_id;
    bool m_health_check_id_isSet;
    bool m_health_check_id_isValid;

    QString m_traffic_policy_instance_id;
    bool m_traffic_policy_instance_id_isSet;
    bool m_traffic_policy_instance_id_isValid;

    OAICidrRoutingConfig m_cidr_routing_config;
    bool m_cidr_routing_config_isSet;
    bool m_cidr_routing_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResourceRecordSets_inner)

#endif // OAIResourceRecordSets_inner_H
