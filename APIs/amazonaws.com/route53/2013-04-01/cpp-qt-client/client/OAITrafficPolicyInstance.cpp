/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficPolicyInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficPolicyInstance::OAITrafficPolicyInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficPolicyInstance::OAITrafficPolicyInstance() {
    this->initializeModel();
}

OAITrafficPolicyInstance::~OAITrafficPolicyInstance() {}

void OAITrafficPolicyInstance::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_hosted_zone_id_isSet = false;
    m_hosted_zone_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_traffic_policy_id_isSet = false;
    m_traffic_policy_id_isValid = false;

    m_traffic_policy_version_isSet = false;
    m_traffic_policy_version_isValid = false;

    m_traffic_policy_type_isSet = false;
    m_traffic_policy_type_isValid = false;
}

void OAITrafficPolicyInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficPolicyInstance::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_hosted_zone_id_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone_id, json[QString("HostedZoneId")]);
    m_hosted_zone_id_isSet = !json[QString("HostedZoneId")].isNull() && m_hosted_zone_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("TTL")]);
    m_ttl_isSet = !json[QString("TTL")].isNull() && m_ttl_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_traffic_policy_id_isValid = ::OpenAPI::fromJsonValue(m_traffic_policy_id, json[QString("TrafficPolicyId")]);
    m_traffic_policy_id_isSet = !json[QString("TrafficPolicyId")].isNull() && m_traffic_policy_id_isValid;

    m_traffic_policy_version_isValid = ::OpenAPI::fromJsonValue(m_traffic_policy_version, json[QString("TrafficPolicyVersion")]);
    m_traffic_policy_version_isSet = !json[QString("TrafficPolicyVersion")].isNull() && m_traffic_policy_version_isValid;

    m_traffic_policy_type_isValid = ::OpenAPI::fromJsonValue(m_traffic_policy_type, json[QString("TrafficPolicyType")]);
    m_traffic_policy_type_isSet = !json[QString("TrafficPolicyType")].isNull() && m_traffic_policy_type_isValid;
}

QString OAITrafficPolicyInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficPolicyInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_hosted_zone_id_isSet) {
        obj.insert(QString("HostedZoneId"), ::OpenAPI::toJsonValue(m_hosted_zone_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("TTL"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_traffic_policy_id_isSet) {
        obj.insert(QString("TrafficPolicyId"), ::OpenAPI::toJsonValue(m_traffic_policy_id));
    }
    if (m_traffic_policy_version_isSet) {
        obj.insert(QString("TrafficPolicyVersion"), ::OpenAPI::toJsonValue(m_traffic_policy_version));
    }
    if (m_traffic_policy_type.isSet()) {
        obj.insert(QString("TrafficPolicyType"), ::OpenAPI::toJsonValue(m_traffic_policy_type));
    }
    return obj;
}

QString OAITrafficPolicyInstance::getId() const {
    return m_id;
}
void OAITrafficPolicyInstance::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITrafficPolicyInstance::is_id_Set() const{
    return m_id_isSet;
}

bool OAITrafficPolicyInstance::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITrafficPolicyInstance::getHostedZoneId() const {
    return m_hosted_zone_id;
}
void OAITrafficPolicyInstance::setHostedZoneId(const QString &hosted_zone_id) {
    m_hosted_zone_id = hosted_zone_id;
    m_hosted_zone_id_isSet = true;
}

bool OAITrafficPolicyInstance::is_hosted_zone_id_Set() const{
    return m_hosted_zone_id_isSet;
}

bool OAITrafficPolicyInstance::is_hosted_zone_id_Valid() const{
    return m_hosted_zone_id_isValid;
}

QString OAITrafficPolicyInstance::getName() const {
    return m_name;
}
void OAITrafficPolicyInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrafficPolicyInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrafficPolicyInstance::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITrafficPolicyInstance::getTtl() const {
    return m_ttl;
}
void OAITrafficPolicyInstance::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAITrafficPolicyInstance::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAITrafficPolicyInstance::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAITrafficPolicyInstance::getState() const {
    return m_state;
}
void OAITrafficPolicyInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITrafficPolicyInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAITrafficPolicyInstance::is_state_Valid() const{
    return m_state_isValid;
}

QString OAITrafficPolicyInstance::getMessage() const {
    return m_message;
}
void OAITrafficPolicyInstance::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITrafficPolicyInstance::is_message_Set() const{
    return m_message_isSet;
}

bool OAITrafficPolicyInstance::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITrafficPolicyInstance::getTrafficPolicyId() const {
    return m_traffic_policy_id;
}
void OAITrafficPolicyInstance::setTrafficPolicyId(const QString &traffic_policy_id) {
    m_traffic_policy_id = traffic_policy_id;
    m_traffic_policy_id_isSet = true;
}

bool OAITrafficPolicyInstance::is_traffic_policy_id_Set() const{
    return m_traffic_policy_id_isSet;
}

bool OAITrafficPolicyInstance::is_traffic_policy_id_Valid() const{
    return m_traffic_policy_id_isValid;
}

qint32 OAITrafficPolicyInstance::getTrafficPolicyVersion() const {
    return m_traffic_policy_version;
}
void OAITrafficPolicyInstance::setTrafficPolicyVersion(const qint32 &traffic_policy_version) {
    m_traffic_policy_version = traffic_policy_version;
    m_traffic_policy_version_isSet = true;
}

bool OAITrafficPolicyInstance::is_traffic_policy_version_Set() const{
    return m_traffic_policy_version_isSet;
}

bool OAITrafficPolicyInstance::is_traffic_policy_version_Valid() const{
    return m_traffic_policy_version_isValid;
}

OAIRRType OAITrafficPolicyInstance::getTrafficPolicyType() const {
    return m_traffic_policy_type;
}
void OAITrafficPolicyInstance::setTrafficPolicyType(const OAIRRType &traffic_policy_type) {
    m_traffic_policy_type = traffic_policy_type;
    m_traffic_policy_type_isSet = true;
}

bool OAITrafficPolicyInstance::is_traffic_policy_type_Set() const{
    return m_traffic_policy_type_isSet;
}

bool OAITrafficPolicyInstance::is_traffic_policy_type_Valid() const{
    return m_traffic_policy_type_isValid;
}

bool OAITrafficPolicyInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_policy_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_policy_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficPolicyInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_hosted_zone_id_isValid && m_name_isValid && m_ttl_isValid && m_state_isValid && m_message_isValid && m_traffic_policy_id_isValid && m_traffic_policy_version_isValid && m_traffic_policy_type_isValid && true;
}

} // namespace OpenAPI
