/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIKeySigningKey.h
 *
 * A key-signing key (KSK) is a complex type that represents a public/private key pair. The private key is used to generate a digital signature for the zone signing key (ZSK). The public key is stored in the DNS and is used to authenticate the ZSK. A KSK is always associated with a hosted zone; it cannot exist by itself.
 */

#ifndef OAIKeySigningKey_H
#define OAIKeySigningKey_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIKeySigningKey : public OAIObject {
public:
    OAIKeySigningKey();
    OAIKeySigningKey(QString json);
    ~OAIKeySigningKey() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getKmsArn() const;
    void setKmsArn(const QString &kms_arn);
    bool is_kms_arn_Set() const;
    bool is_kms_arn_Valid() const;

    qint32 getFlag() const;
    void setFlag(const qint32 &flag);
    bool is_flag_Set() const;
    bool is_flag_Valid() const;

    QString getSigningAlgorithmMnemonic() const;
    void setSigningAlgorithmMnemonic(const QString &signing_algorithm_mnemonic);
    bool is_signing_algorithm_mnemonic_Set() const;
    bool is_signing_algorithm_mnemonic_Valid() const;

    qint32 getSigningAlgorithmType() const;
    void setSigningAlgorithmType(const qint32 &signing_algorithm_type);
    bool is_signing_algorithm_type_Set() const;
    bool is_signing_algorithm_type_Valid() const;

    QString getDigestAlgorithmMnemonic() const;
    void setDigestAlgorithmMnemonic(const QString &digest_algorithm_mnemonic);
    bool is_digest_algorithm_mnemonic_Set() const;
    bool is_digest_algorithm_mnemonic_Valid() const;

    qint32 getDigestAlgorithmType() const;
    void setDigestAlgorithmType(const qint32 &digest_algorithm_type);
    bool is_digest_algorithm_type_Set() const;
    bool is_digest_algorithm_type_Valid() const;

    qint32 getKeyTag() const;
    void setKeyTag(const qint32 &key_tag);
    bool is_key_tag_Set() const;
    bool is_key_tag_Valid() const;

    QString getDigestValue() const;
    void setDigestValue(const QString &digest_value);
    bool is_digest_value_Set() const;
    bool is_digest_value_Valid() const;

    QString getPublicKey() const;
    void setPublicKey(const QString &public_key);
    bool is_public_key_Set() const;
    bool is_public_key_Valid() const;

    QString getDsRecord() const;
    void setDsRecord(const QString &ds_record);
    bool is_ds_record_Set() const;
    bool is_ds_record_Valid() const;

    QString getDnskeyRecord() const;
    void setDnskeyRecord(const QString &dnskey_record);
    bool is_dnskey_record_Set() const;
    bool is_dnskey_record_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    QDateTime getCreatedDate() const;
    void setCreatedDate(const QDateTime &created_date);
    bool is_created_date_Set() const;
    bool is_created_date_Valid() const;

    QDateTime getLastModifiedDate() const;
    void setLastModifiedDate(const QDateTime &last_modified_date);
    bool is_last_modified_date_Set() const;
    bool is_last_modified_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_kms_arn;
    bool m_kms_arn_isSet;
    bool m_kms_arn_isValid;

    qint32 m_flag;
    bool m_flag_isSet;
    bool m_flag_isValid;

    QString m_signing_algorithm_mnemonic;
    bool m_signing_algorithm_mnemonic_isSet;
    bool m_signing_algorithm_mnemonic_isValid;

    qint32 m_signing_algorithm_type;
    bool m_signing_algorithm_type_isSet;
    bool m_signing_algorithm_type_isValid;

    QString m_digest_algorithm_mnemonic;
    bool m_digest_algorithm_mnemonic_isSet;
    bool m_digest_algorithm_mnemonic_isValid;

    qint32 m_digest_algorithm_type;
    bool m_digest_algorithm_type_isSet;
    bool m_digest_algorithm_type_isValid;

    qint32 m_key_tag;
    bool m_key_tag_isSet;
    bool m_key_tag_isValid;

    QString m_digest_value;
    bool m_digest_value_isSet;
    bool m_digest_value_isValid;

    QString m_public_key;
    bool m_public_key_isSet;
    bool m_public_key_isValid;

    QString m_ds_record;
    bool m_ds_record_isSet;
    bool m_ds_record_isValid;

    QString m_dnskey_record;
    bool m_dnskey_record_isSet;
    bool m_dnskey_record_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    QDateTime m_created_date;
    bool m_created_date_isSet;
    bool m_created_date_isValid;

    QDateTime m_last_modified_date;
    bool m_last_modified_date_isSet;
    bool m_last_modified_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIKeySigningKey)

#endif // OAIKeySigningKey_H
