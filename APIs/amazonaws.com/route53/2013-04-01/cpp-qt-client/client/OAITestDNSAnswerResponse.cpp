/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestDNSAnswerResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestDNSAnswerResponse::OAITestDNSAnswerResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestDNSAnswerResponse::OAITestDNSAnswerResponse() {
    this->initializeModel();
}

OAITestDNSAnswerResponse::~OAITestDNSAnswerResponse() {}

void OAITestDNSAnswerResponse::initializeModel() {

    m_nameserver_isSet = false;
    m_nameserver_isValid = false;

    m_record_name_isSet = false;
    m_record_name_isValid = false;

    m_record_type_isSet = false;
    m_record_type_isValid = false;

    m_record_data_isSet = false;
    m_record_data_isValid = false;

    m_response_code_isSet = false;
    m_response_code_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OAITestDNSAnswerResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestDNSAnswerResponse::fromJsonObject(QJsonObject json) {

    m_nameserver_isValid = ::OpenAPI::fromJsonValue(m_nameserver, json[QString("Nameserver")]);
    m_nameserver_isSet = !json[QString("Nameserver")].isNull() && m_nameserver_isValid;

    m_record_name_isValid = ::OpenAPI::fromJsonValue(m_record_name, json[QString("RecordName")]);
    m_record_name_isSet = !json[QString("RecordName")].isNull() && m_record_name_isValid;

    m_record_type_isValid = ::OpenAPI::fromJsonValue(m_record_type, json[QString("RecordType")]);
    m_record_type_isSet = !json[QString("RecordType")].isNull() && m_record_type_isValid;

    m_record_data_isValid = ::OpenAPI::fromJsonValue(m_record_data, json[QString("RecordData")]);
    m_record_data_isSet = !json[QString("RecordData")].isNull() && m_record_data_isValid;

    m_response_code_isValid = ::OpenAPI::fromJsonValue(m_response_code, json[QString("ResponseCode")]);
    m_response_code_isSet = !json[QString("ResponseCode")].isNull() && m_response_code_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("Protocol")]);
    m_protocol_isSet = !json[QString("Protocol")].isNull() && m_protocol_isValid;
}

QString OAITestDNSAnswerResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestDNSAnswerResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_nameserver_isSet) {
        obj.insert(QString("Nameserver"), ::OpenAPI::toJsonValue(m_nameserver));
    }
    if (m_record_name_isSet) {
        obj.insert(QString("RecordName"), ::OpenAPI::toJsonValue(m_record_name));
    }
    if (m_record_type.isSet()) {
        obj.insert(QString("RecordType"), ::OpenAPI::toJsonValue(m_record_type));
    }
    if (m_record_data.isSet()) {
        obj.insert(QString("RecordData"), ::OpenAPI::toJsonValue(m_record_data));
    }
    if (m_response_code_isSet) {
        obj.insert(QString("ResponseCode"), ::OpenAPI::toJsonValue(m_response_code));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("Protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    return obj;
}

QString OAITestDNSAnswerResponse::getNameserver() const {
    return m_nameserver;
}
void OAITestDNSAnswerResponse::setNameserver(const QString &nameserver) {
    m_nameserver = nameserver;
    m_nameserver_isSet = true;
}

bool OAITestDNSAnswerResponse::is_nameserver_Set() const{
    return m_nameserver_isSet;
}

bool OAITestDNSAnswerResponse::is_nameserver_Valid() const{
    return m_nameserver_isValid;
}

QString OAITestDNSAnswerResponse::getRecordName() const {
    return m_record_name;
}
void OAITestDNSAnswerResponse::setRecordName(const QString &record_name) {
    m_record_name = record_name;
    m_record_name_isSet = true;
}

bool OAITestDNSAnswerResponse::is_record_name_Set() const{
    return m_record_name_isSet;
}

bool OAITestDNSAnswerResponse::is_record_name_Valid() const{
    return m_record_name_isValid;
}

OAIRRType OAITestDNSAnswerResponse::getRecordType() const {
    return m_record_type;
}
void OAITestDNSAnswerResponse::setRecordType(const OAIRRType &record_type) {
    m_record_type = record_type;
    m_record_type_isSet = true;
}

bool OAITestDNSAnswerResponse::is_record_type_Set() const{
    return m_record_type_isSet;
}

bool OAITestDNSAnswerResponse::is_record_type_Valid() const{
    return m_record_type_isValid;
}

QList OAITestDNSAnswerResponse::getRecordData() const {
    return m_record_data;
}
void OAITestDNSAnswerResponse::setRecordData(const QList &record_data) {
    m_record_data = record_data;
    m_record_data_isSet = true;
}

bool OAITestDNSAnswerResponse::is_record_data_Set() const{
    return m_record_data_isSet;
}

bool OAITestDNSAnswerResponse::is_record_data_Valid() const{
    return m_record_data_isValid;
}

QString OAITestDNSAnswerResponse::getResponseCode() const {
    return m_response_code;
}
void OAITestDNSAnswerResponse::setResponseCode(const QString &response_code) {
    m_response_code = response_code;
    m_response_code_isSet = true;
}

bool OAITestDNSAnswerResponse::is_response_code_Set() const{
    return m_response_code_isSet;
}

bool OAITestDNSAnswerResponse::is_response_code_Valid() const{
    return m_response_code_isValid;
}

QString OAITestDNSAnswerResponse::getProtocol() const {
    return m_protocol;
}
void OAITestDNSAnswerResponse::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAITestDNSAnswerResponse::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAITestDNSAnswerResponse::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAITestDNSAnswerResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nameserver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestDNSAnswerResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_nameserver_isValid && m_record_name_isValid && m_record_type_isValid && m_record_data_isValid && m_response_code_isValid && m_protocol_isValid && true;
}

} // namespace OpenAPI
