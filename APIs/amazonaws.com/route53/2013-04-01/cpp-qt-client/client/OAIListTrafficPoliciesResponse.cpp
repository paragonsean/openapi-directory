/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTrafficPoliciesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTrafficPoliciesResponse::OAIListTrafficPoliciesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTrafficPoliciesResponse::OAIListTrafficPoliciesResponse() {
    this->initializeModel();
}

OAIListTrafficPoliciesResponse::~OAIListTrafficPoliciesResponse() {}

void OAIListTrafficPoliciesResponse::initializeModel() {

    m_traffic_policy_summaries_isSet = false;
    m_traffic_policy_summaries_isValid = false;

    m_is_truncated_isSet = false;
    m_is_truncated_isValid = false;

    m_traffic_policy_id_marker_isSet = false;
    m_traffic_policy_id_marker_isValid = false;

    m_max_items_isSet = false;
    m_max_items_isValid = false;
}

void OAIListTrafficPoliciesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTrafficPoliciesResponse::fromJsonObject(QJsonObject json) {

    m_traffic_policy_summaries_isValid = ::OpenAPI::fromJsonValue(m_traffic_policy_summaries, json[QString("TrafficPolicySummaries")]);
    m_traffic_policy_summaries_isSet = !json[QString("TrafficPolicySummaries")].isNull() && m_traffic_policy_summaries_isValid;

    m_is_truncated_isValid = ::OpenAPI::fromJsonValue(m_is_truncated, json[QString("IsTruncated")]);
    m_is_truncated_isSet = !json[QString("IsTruncated")].isNull() && m_is_truncated_isValid;

    m_traffic_policy_id_marker_isValid = ::OpenAPI::fromJsonValue(m_traffic_policy_id_marker, json[QString("TrafficPolicyIdMarker")]);
    m_traffic_policy_id_marker_isSet = !json[QString("TrafficPolicyIdMarker")].isNull() && m_traffic_policy_id_marker_isValid;

    m_max_items_isValid = ::OpenAPI::fromJsonValue(m_max_items, json[QString("MaxItems")]);
    m_max_items_isSet = !json[QString("MaxItems")].isNull() && m_max_items_isValid;
}

QString OAIListTrafficPoliciesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTrafficPoliciesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_traffic_policy_summaries.isSet()) {
        obj.insert(QString("TrafficPolicySummaries"), ::OpenAPI::toJsonValue(m_traffic_policy_summaries));
    }
    if (m_is_truncated_isSet) {
        obj.insert(QString("IsTruncated"), ::OpenAPI::toJsonValue(m_is_truncated));
    }
    if (m_traffic_policy_id_marker_isSet) {
        obj.insert(QString("TrafficPolicyIdMarker"), ::OpenAPI::toJsonValue(m_traffic_policy_id_marker));
    }
    if (m_max_items_isSet) {
        obj.insert(QString("MaxItems"), ::OpenAPI::toJsonValue(m_max_items));
    }
    return obj;
}

QList OAIListTrafficPoliciesResponse::getTrafficPolicySummaries() const {
    return m_traffic_policy_summaries;
}
void OAIListTrafficPoliciesResponse::setTrafficPolicySummaries(const QList &traffic_policy_summaries) {
    m_traffic_policy_summaries = traffic_policy_summaries;
    m_traffic_policy_summaries_isSet = true;
}

bool OAIListTrafficPoliciesResponse::is_traffic_policy_summaries_Set() const{
    return m_traffic_policy_summaries_isSet;
}

bool OAIListTrafficPoliciesResponse::is_traffic_policy_summaries_Valid() const{
    return m_traffic_policy_summaries_isValid;
}

bool OAIListTrafficPoliciesResponse::getIsTruncated() const {
    return m_is_truncated;
}
void OAIListTrafficPoliciesResponse::setIsTruncated(const bool &is_truncated) {
    m_is_truncated = is_truncated;
    m_is_truncated_isSet = true;
}

bool OAIListTrafficPoliciesResponse::is_is_truncated_Set() const{
    return m_is_truncated_isSet;
}

bool OAIListTrafficPoliciesResponse::is_is_truncated_Valid() const{
    return m_is_truncated_isValid;
}

QString OAIListTrafficPoliciesResponse::getTrafficPolicyIdMarker() const {
    return m_traffic_policy_id_marker;
}
void OAIListTrafficPoliciesResponse::setTrafficPolicyIdMarker(const QString &traffic_policy_id_marker) {
    m_traffic_policy_id_marker = traffic_policy_id_marker;
    m_traffic_policy_id_marker_isSet = true;
}

bool OAIListTrafficPoliciesResponse::is_traffic_policy_id_marker_Set() const{
    return m_traffic_policy_id_marker_isSet;
}

bool OAIListTrafficPoliciesResponse::is_traffic_policy_id_marker_Valid() const{
    return m_traffic_policy_id_marker_isValid;
}

QString OAIListTrafficPoliciesResponse::getMaxItems() const {
    return m_max_items;
}
void OAIListTrafficPoliciesResponse::setMaxItems(const QString &max_items) {
    m_max_items = max_items;
    m_max_items_isSet = true;
}

bool OAIListTrafficPoliciesResponse::is_max_items_Set() const{
    return m_max_items_isSet;
}

bool OAIListTrafficPoliciesResponse::is_max_items_Valid() const{
    return m_max_items_isValid;
}

bool OAIListTrafficPoliciesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_traffic_policy_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_policy_id_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTrafficPoliciesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_traffic_policy_summaries_isValid && m_is_truncated_isValid && m_traffic_policy_id_marker_isValid && m_max_items_isValid && true;
}

} // namespace OpenAPI
