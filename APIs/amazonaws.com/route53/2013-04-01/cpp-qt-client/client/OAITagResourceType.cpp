/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagResourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagResourceType::OAITagResourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagResourceType::OAITagResourceType() {
    this->initializeModel();
}

OAITagResourceType::~OAITagResourceType() {}

void OAITagResourceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITagResourceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITagResourceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("healthcheck", Qt::CaseInsensitive) == 0) {
        m_value = eOAITagResourceType::HEALTHCHECK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hostedzone", Qt::CaseInsensitive) == 0) {
        m_value = eOAITagResourceType::HOSTEDZONE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITagResourceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITagResourceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITagResourceType::HEALTHCHECK:
            val = "healthcheck";
            break;
        case eOAITagResourceType::HOSTEDZONE:
            val = "hostedzone";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITagResourceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITagResourceType::eOAITagResourceType OAITagResourceType::getValue() const {
    return m_value;
}

void OAITagResourceType::setValue(const OAITagResourceType::eOAITagResourceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITagResourceType::isSet() const {
    
    return m_value_isSet;
}

bool OAITagResourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
