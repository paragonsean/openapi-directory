/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListHostedZonesByVPCResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListHostedZonesByVPCResponse::OAIListHostedZonesByVPCResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListHostedZonesByVPCResponse::OAIListHostedZonesByVPCResponse() {
    this->initializeModel();
}

OAIListHostedZonesByVPCResponse::~OAIListHostedZonesByVPCResponse() {}

void OAIListHostedZonesByVPCResponse::initializeModel() {

    m_hosted_zone_summaries_isSet = false;
    m_hosted_zone_summaries_isValid = false;

    m_max_items_isSet = false;
    m_max_items_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListHostedZonesByVPCResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListHostedZonesByVPCResponse::fromJsonObject(QJsonObject json) {

    m_hosted_zone_summaries_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone_summaries, json[QString("HostedZoneSummaries")]);
    m_hosted_zone_summaries_isSet = !json[QString("HostedZoneSummaries")].isNull() && m_hosted_zone_summaries_isValid;

    m_max_items_isValid = ::OpenAPI::fromJsonValue(m_max_items, json[QString("MaxItems")]);
    m_max_items_isSet = !json[QString("MaxItems")].isNull() && m_max_items_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListHostedZonesByVPCResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListHostedZonesByVPCResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_hosted_zone_summaries.isSet()) {
        obj.insert(QString("HostedZoneSummaries"), ::OpenAPI::toJsonValue(m_hosted_zone_summaries));
    }
    if (m_max_items_isSet) {
        obj.insert(QString("MaxItems"), ::OpenAPI::toJsonValue(m_max_items));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListHostedZonesByVPCResponse::getHostedZoneSummaries() const {
    return m_hosted_zone_summaries;
}
void OAIListHostedZonesByVPCResponse::setHostedZoneSummaries(const QList &hosted_zone_summaries) {
    m_hosted_zone_summaries = hosted_zone_summaries;
    m_hosted_zone_summaries_isSet = true;
}

bool OAIListHostedZonesByVPCResponse::is_hosted_zone_summaries_Set() const{
    return m_hosted_zone_summaries_isSet;
}

bool OAIListHostedZonesByVPCResponse::is_hosted_zone_summaries_Valid() const{
    return m_hosted_zone_summaries_isValid;
}

QString OAIListHostedZonesByVPCResponse::getMaxItems() const {
    return m_max_items;
}
void OAIListHostedZonesByVPCResponse::setMaxItems(const QString &max_items) {
    m_max_items = max_items;
    m_max_items_isSet = true;
}

bool OAIListHostedZonesByVPCResponse::is_max_items_Set() const{
    return m_max_items_isSet;
}

bool OAIListHostedZonesByVPCResponse::is_max_items_Valid() const{
    return m_max_items_isValid;
}

QString OAIListHostedZonesByVPCResponse::getNextToken() const {
    return m_next_token;
}
void OAIListHostedZonesByVPCResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListHostedZonesByVPCResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListHostedZonesByVPCResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListHostedZonesByVPCResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hosted_zone_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListHostedZonesByVPCResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hosted_zone_summaries_isValid && m_max_items_isValid && true;
}

} // namespace OpenAPI
