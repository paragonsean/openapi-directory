/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudWatchAlarmConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudWatchAlarmConfiguration::OAICloudWatchAlarmConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudWatchAlarmConfiguration::OAICloudWatchAlarmConfiguration() {
    this->initializeModel();
}

OAICloudWatchAlarmConfiguration::~OAICloudWatchAlarmConfiguration() {}

void OAICloudWatchAlarmConfiguration::initializeModel() {

    m_evaluation_periods_isSet = false;
    m_evaluation_periods_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_comparison_operator_isSet = false;
    m_comparison_operator_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_statistic_isSet = false;
    m_statistic_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;
}

void OAICloudWatchAlarmConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudWatchAlarmConfiguration::fromJsonObject(QJsonObject json) {

    m_evaluation_periods_isValid = ::OpenAPI::fromJsonValue(m_evaluation_periods, json[QString("EvaluationPeriods")]);
    m_evaluation_periods_isSet = !json[QString("EvaluationPeriods")].isNull() && m_evaluation_periods_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("Threshold")]);
    m_threshold_isSet = !json[QString("Threshold")].isNull() && m_threshold_isValid;

    m_comparison_operator_isValid = ::OpenAPI::fromJsonValue(m_comparison_operator, json[QString("ComparisonOperator")]);
    m_comparison_operator_isSet = !json[QString("ComparisonOperator")].isNull() && m_comparison_operator_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_statistic_isValid = ::OpenAPI::fromJsonValue(m_statistic, json[QString("Statistic")]);
    m_statistic_isSet = !json[QString("Statistic")].isNull() && m_statistic_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;
}

QString OAICloudWatchAlarmConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudWatchAlarmConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluation_periods_isSet) {
        obj.insert(QString("EvaluationPeriods"), ::OpenAPI::toJsonValue(m_evaluation_periods));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("Threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_comparison_operator.isSet()) {
        obj.insert(QString("ComparisonOperator"), ::OpenAPI::toJsonValue(m_comparison_operator));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_statistic.isSet()) {
        obj.insert(QString("Statistic"), ::OpenAPI::toJsonValue(m_statistic));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    return obj;
}

qint32 OAICloudWatchAlarmConfiguration::getEvaluationPeriods() const {
    return m_evaluation_periods;
}
void OAICloudWatchAlarmConfiguration::setEvaluationPeriods(const qint32 &evaluation_periods) {
    m_evaluation_periods = evaluation_periods;
    m_evaluation_periods_isSet = true;
}

bool OAICloudWatchAlarmConfiguration::is_evaluation_periods_Set() const{
    return m_evaluation_periods_isSet;
}

bool OAICloudWatchAlarmConfiguration::is_evaluation_periods_Valid() const{
    return m_evaluation_periods_isValid;
}

double OAICloudWatchAlarmConfiguration::getThreshold() const {
    return m_threshold;
}
void OAICloudWatchAlarmConfiguration::setThreshold(const double &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAICloudWatchAlarmConfiguration::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAICloudWatchAlarmConfiguration::is_threshold_Valid() const{
    return m_threshold_isValid;
}

OAIComparisonOperator OAICloudWatchAlarmConfiguration::getComparisonOperator() const {
    return m_comparison_operator;
}
void OAICloudWatchAlarmConfiguration::setComparisonOperator(const OAIComparisonOperator &comparison_operator) {
    m_comparison_operator = comparison_operator;
    m_comparison_operator_isSet = true;
}

bool OAICloudWatchAlarmConfiguration::is_comparison_operator_Set() const{
    return m_comparison_operator_isSet;
}

bool OAICloudWatchAlarmConfiguration::is_comparison_operator_Valid() const{
    return m_comparison_operator_isValid;
}

qint32 OAICloudWatchAlarmConfiguration::getPeriod() const {
    return m_period;
}
void OAICloudWatchAlarmConfiguration::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAICloudWatchAlarmConfiguration::is_period_Set() const{
    return m_period_isSet;
}

bool OAICloudWatchAlarmConfiguration::is_period_Valid() const{
    return m_period_isValid;
}

QString OAICloudWatchAlarmConfiguration::getMetricName() const {
    return m_metric_name;
}
void OAICloudWatchAlarmConfiguration::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAICloudWatchAlarmConfiguration::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAICloudWatchAlarmConfiguration::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QString OAICloudWatchAlarmConfiguration::getRNamespace() const {
    return m_r_namespace;
}
void OAICloudWatchAlarmConfiguration::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAICloudWatchAlarmConfiguration::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAICloudWatchAlarmConfiguration::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

OAIStatistic OAICloudWatchAlarmConfiguration::getStatistic() const {
    return m_statistic;
}
void OAICloudWatchAlarmConfiguration::setStatistic(const OAIStatistic &statistic) {
    m_statistic = statistic;
    m_statistic_isSet = true;
}

bool OAICloudWatchAlarmConfiguration::is_statistic_Set() const{
    return m_statistic_isSet;
}

bool OAICloudWatchAlarmConfiguration::is_statistic_Valid() const{
    return m_statistic_isValid;
}

QList OAICloudWatchAlarmConfiguration::getDimensions() const {
    return m_dimensions;
}
void OAICloudWatchAlarmConfiguration::setDimensions(const QList &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAICloudWatchAlarmConfiguration::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAICloudWatchAlarmConfiguration::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

bool OAICloudWatchAlarmConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluation_periods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudWatchAlarmConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_evaluation_periods_isValid && m_threshold_isValid && m_comparison_operator_isValid && m_period_isValid && m_metric_name_isValid && m_r_namespace_isValid && m_statistic_isValid && true;
}

} // namespace OpenAPI
