/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetHostedZoneResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetHostedZoneResponse::OAIGetHostedZoneResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetHostedZoneResponse::OAIGetHostedZoneResponse() {
    this->initializeModel();
}

OAIGetHostedZoneResponse::~OAIGetHostedZoneResponse() {}

void OAIGetHostedZoneResponse::initializeModel() {

    m_hosted_zone_isSet = false;
    m_hosted_zone_isValid = false;

    m_delegation_set_isSet = false;
    m_delegation_set_isValid = false;

    m_vpcs_isSet = false;
    m_vpcs_isValid = false;
}

void OAIGetHostedZoneResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetHostedZoneResponse::fromJsonObject(QJsonObject json) {

    m_hosted_zone_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone, json[QString("HostedZone")]);
    m_hosted_zone_isSet = !json[QString("HostedZone")].isNull() && m_hosted_zone_isValid;

    m_delegation_set_isValid = ::OpenAPI::fromJsonValue(m_delegation_set, json[QString("DelegationSet")]);
    m_delegation_set_isSet = !json[QString("DelegationSet")].isNull() && m_delegation_set_isValid;

    m_vpcs_isValid = ::OpenAPI::fromJsonValue(m_vpcs, json[QString("VPCs")]);
    m_vpcs_isSet = !json[QString("VPCs")].isNull() && m_vpcs_isValid;
}

QString OAIGetHostedZoneResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetHostedZoneResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_hosted_zone.isSet()) {
        obj.insert(QString("HostedZone"), ::OpenAPI::toJsonValue(m_hosted_zone));
    }
    if (m_delegation_set.isSet()) {
        obj.insert(QString("DelegationSet"), ::OpenAPI::toJsonValue(m_delegation_set));
    }
    if (m_vpcs.isSet()) {
        obj.insert(QString("VPCs"), ::OpenAPI::toJsonValue(m_vpcs));
    }
    return obj;
}

OAIGetHostedZoneResponse_HostedZone OAIGetHostedZoneResponse::getHostedZone() const {
    return m_hosted_zone;
}
void OAIGetHostedZoneResponse::setHostedZone(const OAIGetHostedZoneResponse_HostedZone &hosted_zone) {
    m_hosted_zone = hosted_zone;
    m_hosted_zone_isSet = true;
}

bool OAIGetHostedZoneResponse::is_hosted_zone_Set() const{
    return m_hosted_zone_isSet;
}

bool OAIGetHostedZoneResponse::is_hosted_zone_Valid() const{
    return m_hosted_zone_isValid;
}

OAIGetHostedZoneResponse_DelegationSet OAIGetHostedZoneResponse::getDelegationSet() const {
    return m_delegation_set;
}
void OAIGetHostedZoneResponse::setDelegationSet(const OAIGetHostedZoneResponse_DelegationSet &delegation_set) {
    m_delegation_set = delegation_set;
    m_delegation_set_isSet = true;
}

bool OAIGetHostedZoneResponse::is_delegation_set_Set() const{
    return m_delegation_set_isSet;
}

bool OAIGetHostedZoneResponse::is_delegation_set_Valid() const{
    return m_delegation_set_isValid;
}

QList OAIGetHostedZoneResponse::getVpcs() const {
    return m_vpcs;
}
void OAIGetHostedZoneResponse::setVpcs(const QList &vpcs) {
    m_vpcs = vpcs;
    m_vpcs_isSet = true;
}

bool OAIGetHostedZoneResponse::is_vpcs_Set() const{
    return m_vpcs_isSet;
}

bool OAIGetHostedZoneResponse::is_vpcs_Valid() const{
    return m_vpcs_isValid;
}

bool OAIGetHostedZoneResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hosted_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delegation_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpcs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetHostedZoneResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hosted_zone_isValid && true;
}

} // namespace OpenAPI
