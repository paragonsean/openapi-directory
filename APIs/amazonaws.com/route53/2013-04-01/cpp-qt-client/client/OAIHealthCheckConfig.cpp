/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthCheckConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthCheckConfig::OAIHealthCheckConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthCheckConfig::OAIHealthCheckConfig() {
    this->initializeModel();
}

OAIHealthCheckConfig::~OAIHealthCheckConfig() {}

void OAIHealthCheckConfig::initializeModel() {

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_resource_path_isSet = false;
    m_resource_path_isValid = false;

    m_fully_qualified_domain_name_isSet = false;
    m_fully_qualified_domain_name_isValid = false;

    m_search_string_isSet = false;
    m_search_string_isValid = false;

    m_request_interval_isSet = false;
    m_request_interval_isValid = false;

    m_failure_threshold_isSet = false;
    m_failure_threshold_isValid = false;

    m_measure_latency_isSet = false;
    m_measure_latency_isValid = false;

    m_inverted_isSet = false;
    m_inverted_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_health_threshold_isSet = false;
    m_health_threshold_isValid = false;

    m_child_health_checks_isSet = false;
    m_child_health_checks_isValid = false;

    m_enable_sni_isSet = false;
    m_enable_sni_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_alarm_identifier_isSet = false;
    m_alarm_identifier_isValid = false;

    m_insufficient_data_health_status_isSet = false;
    m_insufficient_data_health_status_isValid = false;

    m_routing_control_arn_isSet = false;
    m_routing_control_arn_isValid = false;
}

void OAIHealthCheckConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthCheckConfig::fromJsonObject(QJsonObject json) {

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IPAddress")]);
    m_ip_address_isSet = !json[QString("IPAddress")].isNull() && m_ip_address_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_resource_path_isValid = ::OpenAPI::fromJsonValue(m_resource_path, json[QString("ResourcePath")]);
    m_resource_path_isSet = !json[QString("ResourcePath")].isNull() && m_resource_path_isValid;

    m_fully_qualified_domain_name_isValid = ::OpenAPI::fromJsonValue(m_fully_qualified_domain_name, json[QString("FullyQualifiedDomainName")]);
    m_fully_qualified_domain_name_isSet = !json[QString("FullyQualifiedDomainName")].isNull() && m_fully_qualified_domain_name_isValid;

    m_search_string_isValid = ::OpenAPI::fromJsonValue(m_search_string, json[QString("SearchString")]);
    m_search_string_isSet = !json[QString("SearchString")].isNull() && m_search_string_isValid;

    m_request_interval_isValid = ::OpenAPI::fromJsonValue(m_request_interval, json[QString("RequestInterval")]);
    m_request_interval_isSet = !json[QString("RequestInterval")].isNull() && m_request_interval_isValid;

    m_failure_threshold_isValid = ::OpenAPI::fromJsonValue(m_failure_threshold, json[QString("FailureThreshold")]);
    m_failure_threshold_isSet = !json[QString("FailureThreshold")].isNull() && m_failure_threshold_isValid;

    m_measure_latency_isValid = ::OpenAPI::fromJsonValue(m_measure_latency, json[QString("MeasureLatency")]);
    m_measure_latency_isSet = !json[QString("MeasureLatency")].isNull() && m_measure_latency_isValid;

    m_inverted_isValid = ::OpenAPI::fromJsonValue(m_inverted, json[QString("Inverted")]);
    m_inverted_isSet = !json[QString("Inverted")].isNull() && m_inverted_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("Disabled")]);
    m_disabled_isSet = !json[QString("Disabled")].isNull() && m_disabled_isValid;

    m_health_threshold_isValid = ::OpenAPI::fromJsonValue(m_health_threshold, json[QString("HealthThreshold")]);
    m_health_threshold_isSet = !json[QString("HealthThreshold")].isNull() && m_health_threshold_isValid;

    m_child_health_checks_isValid = ::OpenAPI::fromJsonValue(m_child_health_checks, json[QString("ChildHealthChecks")]);
    m_child_health_checks_isSet = !json[QString("ChildHealthChecks")].isNull() && m_child_health_checks_isValid;

    m_enable_sni_isValid = ::OpenAPI::fromJsonValue(m_enable_sni, json[QString("EnableSNI")]);
    m_enable_sni_isSet = !json[QString("EnableSNI")].isNull() && m_enable_sni_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("Regions")]);
    m_regions_isSet = !json[QString("Regions")].isNull() && m_regions_isValid;

    m_alarm_identifier_isValid = ::OpenAPI::fromJsonValue(m_alarm_identifier, json[QString("AlarmIdentifier")]);
    m_alarm_identifier_isSet = !json[QString("AlarmIdentifier")].isNull() && m_alarm_identifier_isValid;

    m_insufficient_data_health_status_isValid = ::OpenAPI::fromJsonValue(m_insufficient_data_health_status, json[QString("InsufficientDataHealthStatus")]);
    m_insufficient_data_health_status_isSet = !json[QString("InsufficientDataHealthStatus")].isNull() && m_insufficient_data_health_status_isValid;

    m_routing_control_arn_isValid = ::OpenAPI::fromJsonValue(m_routing_control_arn, json[QString("RoutingControlArn")]);
    m_routing_control_arn_isSet = !json[QString("RoutingControlArn")].isNull() && m_routing_control_arn_isValid;
}

QString OAIHealthCheckConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthCheckConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_address_isSet) {
        obj.insert(QString("IPAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_resource_path_isSet) {
        obj.insert(QString("ResourcePath"), ::OpenAPI::toJsonValue(m_resource_path));
    }
    if (m_fully_qualified_domain_name_isSet) {
        obj.insert(QString("FullyQualifiedDomainName"), ::OpenAPI::toJsonValue(m_fully_qualified_domain_name));
    }
    if (m_search_string_isSet) {
        obj.insert(QString("SearchString"), ::OpenAPI::toJsonValue(m_search_string));
    }
    if (m_request_interval_isSet) {
        obj.insert(QString("RequestInterval"), ::OpenAPI::toJsonValue(m_request_interval));
    }
    if (m_failure_threshold_isSet) {
        obj.insert(QString("FailureThreshold"), ::OpenAPI::toJsonValue(m_failure_threshold));
    }
    if (m_measure_latency_isSet) {
        obj.insert(QString("MeasureLatency"), ::OpenAPI::toJsonValue(m_measure_latency));
    }
    if (m_inverted_isSet) {
        obj.insert(QString("Inverted"), ::OpenAPI::toJsonValue(m_inverted));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("Disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_health_threshold_isSet) {
        obj.insert(QString("HealthThreshold"), ::OpenAPI::toJsonValue(m_health_threshold));
    }
    if (m_child_health_checks.isSet()) {
        obj.insert(QString("ChildHealthChecks"), ::OpenAPI::toJsonValue(m_child_health_checks));
    }
    if (m_enable_sni_isSet) {
        obj.insert(QString("EnableSNI"), ::OpenAPI::toJsonValue(m_enable_sni));
    }
    if (m_regions.isSet()) {
        obj.insert(QString("Regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_alarm_identifier.isSet()) {
        obj.insert(QString("AlarmIdentifier"), ::OpenAPI::toJsonValue(m_alarm_identifier));
    }
    if (m_insufficient_data_health_status.isSet()) {
        obj.insert(QString("InsufficientDataHealthStatus"), ::OpenAPI::toJsonValue(m_insufficient_data_health_status));
    }
    if (m_routing_control_arn_isSet) {
        obj.insert(QString("RoutingControlArn"), ::OpenAPI::toJsonValue(m_routing_control_arn));
    }
    return obj;
}

QString OAIHealthCheckConfig::getIpAddress() const {
    return m_ip_address;
}
void OAIHealthCheckConfig::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIHealthCheckConfig::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIHealthCheckConfig::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

qint32 OAIHealthCheckConfig::getPort() const {
    return m_port;
}
void OAIHealthCheckConfig::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIHealthCheckConfig::is_port_Set() const{
    return m_port_isSet;
}

bool OAIHealthCheckConfig::is_port_Valid() const{
    return m_port_isValid;
}

OAIHealthCheckType OAIHealthCheckConfig::getType() const {
    return m_type;
}
void OAIHealthCheckConfig::setType(const OAIHealthCheckType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHealthCheckConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHealthCheckConfig::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIHealthCheckConfig::getResourcePath() const {
    return m_resource_path;
}
void OAIHealthCheckConfig::setResourcePath(const QString &resource_path) {
    m_resource_path = resource_path;
    m_resource_path_isSet = true;
}

bool OAIHealthCheckConfig::is_resource_path_Set() const{
    return m_resource_path_isSet;
}

bool OAIHealthCheckConfig::is_resource_path_Valid() const{
    return m_resource_path_isValid;
}

QString OAIHealthCheckConfig::getFullyQualifiedDomainName() const {
    return m_fully_qualified_domain_name;
}
void OAIHealthCheckConfig::setFullyQualifiedDomainName(const QString &fully_qualified_domain_name) {
    m_fully_qualified_domain_name = fully_qualified_domain_name;
    m_fully_qualified_domain_name_isSet = true;
}

bool OAIHealthCheckConfig::is_fully_qualified_domain_name_Set() const{
    return m_fully_qualified_domain_name_isSet;
}

bool OAIHealthCheckConfig::is_fully_qualified_domain_name_Valid() const{
    return m_fully_qualified_domain_name_isValid;
}

QString OAIHealthCheckConfig::getSearchString() const {
    return m_search_string;
}
void OAIHealthCheckConfig::setSearchString(const QString &search_string) {
    m_search_string = search_string;
    m_search_string_isSet = true;
}

bool OAIHealthCheckConfig::is_search_string_Set() const{
    return m_search_string_isSet;
}

bool OAIHealthCheckConfig::is_search_string_Valid() const{
    return m_search_string_isValid;
}

qint32 OAIHealthCheckConfig::getRequestInterval() const {
    return m_request_interval;
}
void OAIHealthCheckConfig::setRequestInterval(const qint32 &request_interval) {
    m_request_interval = request_interval;
    m_request_interval_isSet = true;
}

bool OAIHealthCheckConfig::is_request_interval_Set() const{
    return m_request_interval_isSet;
}

bool OAIHealthCheckConfig::is_request_interval_Valid() const{
    return m_request_interval_isValid;
}

qint32 OAIHealthCheckConfig::getFailureThreshold() const {
    return m_failure_threshold;
}
void OAIHealthCheckConfig::setFailureThreshold(const qint32 &failure_threshold) {
    m_failure_threshold = failure_threshold;
    m_failure_threshold_isSet = true;
}

bool OAIHealthCheckConfig::is_failure_threshold_Set() const{
    return m_failure_threshold_isSet;
}

bool OAIHealthCheckConfig::is_failure_threshold_Valid() const{
    return m_failure_threshold_isValid;
}

bool OAIHealthCheckConfig::getMeasureLatency() const {
    return m_measure_latency;
}
void OAIHealthCheckConfig::setMeasureLatency(const bool &measure_latency) {
    m_measure_latency = measure_latency;
    m_measure_latency_isSet = true;
}

bool OAIHealthCheckConfig::is_measure_latency_Set() const{
    return m_measure_latency_isSet;
}

bool OAIHealthCheckConfig::is_measure_latency_Valid() const{
    return m_measure_latency_isValid;
}

bool OAIHealthCheckConfig::getInverted() const {
    return m_inverted;
}
void OAIHealthCheckConfig::setInverted(const bool &inverted) {
    m_inverted = inverted;
    m_inverted_isSet = true;
}

bool OAIHealthCheckConfig::is_inverted_Set() const{
    return m_inverted_isSet;
}

bool OAIHealthCheckConfig::is_inverted_Valid() const{
    return m_inverted_isValid;
}

bool OAIHealthCheckConfig::getDisabled() const {
    return m_disabled;
}
void OAIHealthCheckConfig::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIHealthCheckConfig::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIHealthCheckConfig::is_disabled_Valid() const{
    return m_disabled_isValid;
}

qint32 OAIHealthCheckConfig::getHealthThreshold() const {
    return m_health_threshold;
}
void OAIHealthCheckConfig::setHealthThreshold(const qint32 &health_threshold) {
    m_health_threshold = health_threshold;
    m_health_threshold_isSet = true;
}

bool OAIHealthCheckConfig::is_health_threshold_Set() const{
    return m_health_threshold_isSet;
}

bool OAIHealthCheckConfig::is_health_threshold_Valid() const{
    return m_health_threshold_isValid;
}

QList OAIHealthCheckConfig::getChildHealthChecks() const {
    return m_child_health_checks;
}
void OAIHealthCheckConfig::setChildHealthChecks(const QList &child_health_checks) {
    m_child_health_checks = child_health_checks;
    m_child_health_checks_isSet = true;
}

bool OAIHealthCheckConfig::is_child_health_checks_Set() const{
    return m_child_health_checks_isSet;
}

bool OAIHealthCheckConfig::is_child_health_checks_Valid() const{
    return m_child_health_checks_isValid;
}

bool OAIHealthCheckConfig::getEnableSni() const {
    return m_enable_sni;
}
void OAIHealthCheckConfig::setEnableSni(const bool &enable_sni) {
    m_enable_sni = enable_sni;
    m_enable_sni_isSet = true;
}

bool OAIHealthCheckConfig::is_enable_sni_Set() const{
    return m_enable_sni_isSet;
}

bool OAIHealthCheckConfig::is_enable_sni_Valid() const{
    return m_enable_sni_isValid;
}

QList OAIHealthCheckConfig::getRegions() const {
    return m_regions;
}
void OAIHealthCheckConfig::setRegions(const QList &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIHealthCheckConfig::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIHealthCheckConfig::is_regions_Valid() const{
    return m_regions_isValid;
}

OAICreateHealthCheck_request_HealthCheckConfig_AlarmIdentifier OAIHealthCheckConfig::getAlarmIdentifier() const {
    return m_alarm_identifier;
}
void OAIHealthCheckConfig::setAlarmIdentifier(const OAICreateHealthCheck_request_HealthCheckConfig_AlarmIdentifier &alarm_identifier) {
    m_alarm_identifier = alarm_identifier;
    m_alarm_identifier_isSet = true;
}

bool OAIHealthCheckConfig::is_alarm_identifier_Set() const{
    return m_alarm_identifier_isSet;
}

bool OAIHealthCheckConfig::is_alarm_identifier_Valid() const{
    return m_alarm_identifier_isValid;
}

OAIInsufficientDataHealthStatus OAIHealthCheckConfig::getInsufficientDataHealthStatus() const {
    return m_insufficient_data_health_status;
}
void OAIHealthCheckConfig::setInsufficientDataHealthStatus(const OAIInsufficientDataHealthStatus &insufficient_data_health_status) {
    m_insufficient_data_health_status = insufficient_data_health_status;
    m_insufficient_data_health_status_isSet = true;
}

bool OAIHealthCheckConfig::is_insufficient_data_health_status_Set() const{
    return m_insufficient_data_health_status_isSet;
}

bool OAIHealthCheckConfig::is_insufficient_data_health_status_Valid() const{
    return m_insufficient_data_health_status_isValid;
}

QString OAIHealthCheckConfig::getRoutingControlArn() const {
    return m_routing_control_arn;
}
void OAIHealthCheckConfig::setRoutingControlArn(const QString &routing_control_arn) {
    m_routing_control_arn = routing_control_arn;
    m_routing_control_arn_isSet = true;
}

bool OAIHealthCheckConfig::is_routing_control_arn_Set() const{
    return m_routing_control_arn_isSet;
}

bool OAIHealthCheckConfig::is_routing_control_arn_Valid() const{
    return m_routing_control_arn_isValid;
}

bool OAIHealthCheckConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fully_qualified_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inverted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_health_checks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_sni_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insufficient_data_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_control_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthCheckConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
