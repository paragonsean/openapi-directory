/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateKeySigningKeyResponse_KeySigningKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateKeySigningKeyResponse_KeySigningKey::OAICreateKeySigningKeyResponse_KeySigningKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateKeySigningKeyResponse_KeySigningKey::OAICreateKeySigningKeyResponse_KeySigningKey() {
    this->initializeModel();
}

OAICreateKeySigningKeyResponse_KeySigningKey::~OAICreateKeySigningKeyResponse_KeySigningKey() {}

void OAICreateKeySigningKeyResponse_KeySigningKey::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_kms_arn_isSet = false;
    m_kms_arn_isValid = false;

    m_flag_isSet = false;
    m_flag_isValid = false;

    m_signing_algorithm_mnemonic_isSet = false;
    m_signing_algorithm_mnemonic_isValid = false;

    m_signing_algorithm_type_isSet = false;
    m_signing_algorithm_type_isValid = false;

    m_digest_algorithm_mnemonic_isSet = false;
    m_digest_algorithm_mnemonic_isValid = false;

    m_digest_algorithm_type_isSet = false;
    m_digest_algorithm_type_isValid = false;

    m_key_tag_isSet = false;
    m_key_tag_isValid = false;

    m_digest_value_isSet = false;
    m_digest_value_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_ds_record_isSet = false;
    m_ds_record_isValid = false;

    m_dnskey_record_isSet = false;
    m_dnskey_record_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;
}

void OAICreateKeySigningKeyResponse_KeySigningKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateKeySigningKeyResponse_KeySigningKey::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_kms_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_arn, json[QString("KmsArn")]);
    m_kms_arn_isSet = !json[QString("KmsArn")].isNull() && m_kms_arn_isValid;

    m_flag_isValid = ::OpenAPI::fromJsonValue(m_flag, json[QString("Flag")]);
    m_flag_isSet = !json[QString("Flag")].isNull() && m_flag_isValid;

    m_signing_algorithm_mnemonic_isValid = ::OpenAPI::fromJsonValue(m_signing_algorithm_mnemonic, json[QString("SigningAlgorithmMnemonic")]);
    m_signing_algorithm_mnemonic_isSet = !json[QString("SigningAlgorithmMnemonic")].isNull() && m_signing_algorithm_mnemonic_isValid;

    m_signing_algorithm_type_isValid = ::OpenAPI::fromJsonValue(m_signing_algorithm_type, json[QString("SigningAlgorithmType")]);
    m_signing_algorithm_type_isSet = !json[QString("SigningAlgorithmType")].isNull() && m_signing_algorithm_type_isValid;

    m_digest_algorithm_mnemonic_isValid = ::OpenAPI::fromJsonValue(m_digest_algorithm_mnemonic, json[QString("DigestAlgorithmMnemonic")]);
    m_digest_algorithm_mnemonic_isSet = !json[QString("DigestAlgorithmMnemonic")].isNull() && m_digest_algorithm_mnemonic_isValid;

    m_digest_algorithm_type_isValid = ::OpenAPI::fromJsonValue(m_digest_algorithm_type, json[QString("DigestAlgorithmType")]);
    m_digest_algorithm_type_isSet = !json[QString("DigestAlgorithmType")].isNull() && m_digest_algorithm_type_isValid;

    m_key_tag_isValid = ::OpenAPI::fromJsonValue(m_key_tag, json[QString("KeyTag")]);
    m_key_tag_isSet = !json[QString("KeyTag")].isNull() && m_key_tag_isValid;

    m_digest_value_isValid = ::OpenAPI::fromJsonValue(m_digest_value, json[QString("DigestValue")]);
    m_digest_value_isSet = !json[QString("DigestValue")].isNull() && m_digest_value_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("PublicKey")]);
    m_public_key_isSet = !json[QString("PublicKey")].isNull() && m_public_key_isValid;

    m_ds_record_isValid = ::OpenAPI::fromJsonValue(m_ds_record, json[QString("DSRecord")]);
    m_ds_record_isSet = !json[QString("DSRecord")].isNull() && m_ds_record_isValid;

    m_dnskey_record_isValid = ::OpenAPI::fromJsonValue(m_dnskey_record, json[QString("DNSKEYRecord")]);
    m_dnskey_record_isSet = !json[QString("DNSKEYRecord")].isNull() && m_dnskey_record_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("CreatedDate")]);
    m_created_date_isSet = !json[QString("CreatedDate")].isNull() && m_created_date_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;
}

QString OAICreateKeySigningKeyResponse_KeySigningKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateKeySigningKeyResponse_KeySigningKey::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_kms_arn_isSet) {
        obj.insert(QString("KmsArn"), ::OpenAPI::toJsonValue(m_kms_arn));
    }
    if (m_flag_isSet) {
        obj.insert(QString("Flag"), ::OpenAPI::toJsonValue(m_flag));
    }
    if (m_signing_algorithm_mnemonic_isSet) {
        obj.insert(QString("SigningAlgorithmMnemonic"), ::OpenAPI::toJsonValue(m_signing_algorithm_mnemonic));
    }
    if (m_signing_algorithm_type_isSet) {
        obj.insert(QString("SigningAlgorithmType"), ::OpenAPI::toJsonValue(m_signing_algorithm_type));
    }
    if (m_digest_algorithm_mnemonic_isSet) {
        obj.insert(QString("DigestAlgorithmMnemonic"), ::OpenAPI::toJsonValue(m_digest_algorithm_mnemonic));
    }
    if (m_digest_algorithm_type_isSet) {
        obj.insert(QString("DigestAlgorithmType"), ::OpenAPI::toJsonValue(m_digest_algorithm_type));
    }
    if (m_key_tag_isSet) {
        obj.insert(QString("KeyTag"), ::OpenAPI::toJsonValue(m_key_tag));
    }
    if (m_digest_value_isSet) {
        obj.insert(QString("DigestValue"), ::OpenAPI::toJsonValue(m_digest_value));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("PublicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_ds_record_isSet) {
        obj.insert(QString("DSRecord"), ::OpenAPI::toJsonValue(m_ds_record));
    }
    if (m_dnskey_record_isSet) {
        obj.insert(QString("DNSKEYRecord"), ::OpenAPI::toJsonValue(m_dnskey_record));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("CreatedDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    return obj;
}

QString OAICreateKeySigningKeyResponse_KeySigningKey::getName() const {
    return m_name;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateKeySigningKeyResponse_KeySigningKey::getKmsArn() const {
    return m_kms_arn;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setKmsArn(const QString &kms_arn) {
    m_kms_arn = kms_arn;
    m_kms_arn_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_kms_arn_Set() const{
    return m_kms_arn_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_kms_arn_Valid() const{
    return m_kms_arn_isValid;
}

qint32 OAICreateKeySigningKeyResponse_KeySigningKey::getFlag() const {
    return m_flag;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setFlag(const qint32 &flag) {
    m_flag = flag;
    m_flag_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_flag_Set() const{
    return m_flag_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_flag_Valid() const{
    return m_flag_isValid;
}

QString OAICreateKeySigningKeyResponse_KeySigningKey::getSigningAlgorithmMnemonic() const {
    return m_signing_algorithm_mnemonic;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setSigningAlgorithmMnemonic(const QString &signing_algorithm_mnemonic) {
    m_signing_algorithm_mnemonic = signing_algorithm_mnemonic;
    m_signing_algorithm_mnemonic_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_signing_algorithm_mnemonic_Set() const{
    return m_signing_algorithm_mnemonic_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_signing_algorithm_mnemonic_Valid() const{
    return m_signing_algorithm_mnemonic_isValid;
}

qint32 OAICreateKeySigningKeyResponse_KeySigningKey::getSigningAlgorithmType() const {
    return m_signing_algorithm_type;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setSigningAlgorithmType(const qint32 &signing_algorithm_type) {
    m_signing_algorithm_type = signing_algorithm_type;
    m_signing_algorithm_type_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_signing_algorithm_type_Set() const{
    return m_signing_algorithm_type_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_signing_algorithm_type_Valid() const{
    return m_signing_algorithm_type_isValid;
}

QString OAICreateKeySigningKeyResponse_KeySigningKey::getDigestAlgorithmMnemonic() const {
    return m_digest_algorithm_mnemonic;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setDigestAlgorithmMnemonic(const QString &digest_algorithm_mnemonic) {
    m_digest_algorithm_mnemonic = digest_algorithm_mnemonic;
    m_digest_algorithm_mnemonic_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_digest_algorithm_mnemonic_Set() const{
    return m_digest_algorithm_mnemonic_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_digest_algorithm_mnemonic_Valid() const{
    return m_digest_algorithm_mnemonic_isValid;
}

qint32 OAICreateKeySigningKeyResponse_KeySigningKey::getDigestAlgorithmType() const {
    return m_digest_algorithm_type;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setDigestAlgorithmType(const qint32 &digest_algorithm_type) {
    m_digest_algorithm_type = digest_algorithm_type;
    m_digest_algorithm_type_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_digest_algorithm_type_Set() const{
    return m_digest_algorithm_type_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_digest_algorithm_type_Valid() const{
    return m_digest_algorithm_type_isValid;
}

qint32 OAICreateKeySigningKeyResponse_KeySigningKey::getKeyTag() const {
    return m_key_tag;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setKeyTag(const qint32 &key_tag) {
    m_key_tag = key_tag;
    m_key_tag_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_key_tag_Set() const{
    return m_key_tag_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_key_tag_Valid() const{
    return m_key_tag_isValid;
}

QString OAICreateKeySigningKeyResponse_KeySigningKey::getDigestValue() const {
    return m_digest_value;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setDigestValue(const QString &digest_value) {
    m_digest_value = digest_value;
    m_digest_value_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_digest_value_Set() const{
    return m_digest_value_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_digest_value_Valid() const{
    return m_digest_value_isValid;
}

QString OAICreateKeySigningKeyResponse_KeySigningKey::getPublicKey() const {
    return m_public_key;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QString OAICreateKeySigningKeyResponse_KeySigningKey::getDsRecord() const {
    return m_ds_record;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setDsRecord(const QString &ds_record) {
    m_ds_record = ds_record;
    m_ds_record_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_ds_record_Set() const{
    return m_ds_record_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_ds_record_Valid() const{
    return m_ds_record_isValid;
}

QString OAICreateKeySigningKeyResponse_KeySigningKey::getDnskeyRecord() const {
    return m_dnskey_record;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setDnskeyRecord(const QString &dnskey_record) {
    m_dnskey_record = dnskey_record;
    m_dnskey_record_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_dnskey_record_Set() const{
    return m_dnskey_record_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_dnskey_record_Valid() const{
    return m_dnskey_record_isValid;
}

QString OAICreateKeySigningKeyResponse_KeySigningKey::getStatus() const {
    return m_status;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICreateKeySigningKeyResponse_KeySigningKey::getStatusMessage() const {
    return m_status_message;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QDateTime OAICreateKeySigningKeyResponse_KeySigningKey::getCreatedDate() const {
    return m_created_date;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QDateTime OAICreateKeySigningKeyResponse_KeySigningKey::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAICreateKeySigningKeyResponse_KeySigningKey::setLastModifiedDate(const QDateTime &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_algorithm_mnemonic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_algorithm_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_algorithm_mnemonic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_algorithm_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ds_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dnskey_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateKeySigningKeyResponse_KeySigningKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
