/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetHostedZoneResponse_HostedZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetHostedZoneResponse_HostedZone::OAIGetHostedZoneResponse_HostedZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetHostedZoneResponse_HostedZone::OAIGetHostedZoneResponse_HostedZone() {
    this->initializeModel();
}

OAIGetHostedZoneResponse_HostedZone::~OAIGetHostedZoneResponse_HostedZone() {}

void OAIGetHostedZoneResponse_HostedZone::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_caller_reference_isSet = false;
    m_caller_reference_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_resource_record_set_count_isSet = false;
    m_resource_record_set_count_isValid = false;

    m_linked_service_isSet = false;
    m_linked_service_isValid = false;
}

void OAIGetHostedZoneResponse_HostedZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetHostedZoneResponse_HostedZone::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_caller_reference_isValid = ::OpenAPI::fromJsonValue(m_caller_reference, json[QString("CallerReference")]);
    m_caller_reference_isSet = !json[QString("CallerReference")].isNull() && m_caller_reference_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("Config")]);
    m_config_isSet = !json[QString("Config")].isNull() && m_config_isValid;

    m_resource_record_set_count_isValid = ::OpenAPI::fromJsonValue(m_resource_record_set_count, json[QString("ResourceRecordSetCount")]);
    m_resource_record_set_count_isSet = !json[QString("ResourceRecordSetCount")].isNull() && m_resource_record_set_count_isValid;

    m_linked_service_isValid = ::OpenAPI::fromJsonValue(m_linked_service, json[QString("LinkedService")]);
    m_linked_service_isSet = !json[QString("LinkedService")].isNull() && m_linked_service_isValid;
}

QString OAIGetHostedZoneResponse_HostedZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetHostedZoneResponse_HostedZone::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_caller_reference_isSet) {
        obj.insert(QString("CallerReference"), ::OpenAPI::toJsonValue(m_caller_reference));
    }
    if (m_config.isSet()) {
        obj.insert(QString("Config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_resource_record_set_count_isSet) {
        obj.insert(QString("ResourceRecordSetCount"), ::OpenAPI::toJsonValue(m_resource_record_set_count));
    }
    if (m_linked_service.isSet()) {
        obj.insert(QString("LinkedService"), ::OpenAPI::toJsonValue(m_linked_service));
    }
    return obj;
}

QString OAIGetHostedZoneResponse_HostedZone::getId() const {
    return m_id;
}
void OAIGetHostedZoneResponse_HostedZone::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetHostedZoneResponse_HostedZone::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetHostedZoneResponse_HostedZone::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetHostedZoneResponse_HostedZone::getName() const {
    return m_name;
}
void OAIGetHostedZoneResponse_HostedZone::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetHostedZoneResponse_HostedZone::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetHostedZoneResponse_HostedZone::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetHostedZoneResponse_HostedZone::getCallerReference() const {
    return m_caller_reference;
}
void OAIGetHostedZoneResponse_HostedZone::setCallerReference(const QString &caller_reference) {
    m_caller_reference = caller_reference;
    m_caller_reference_isSet = true;
}

bool OAIGetHostedZoneResponse_HostedZone::is_caller_reference_Set() const{
    return m_caller_reference_isSet;
}

bool OAIGetHostedZoneResponse_HostedZone::is_caller_reference_Valid() const{
    return m_caller_reference_isValid;
}

OAIHostedZone_Config OAIGetHostedZoneResponse_HostedZone::getConfig() const {
    return m_config;
}
void OAIGetHostedZoneResponse_HostedZone::setConfig(const OAIHostedZone_Config &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIGetHostedZoneResponse_HostedZone::is_config_Set() const{
    return m_config_isSet;
}

bool OAIGetHostedZoneResponse_HostedZone::is_config_Valid() const{
    return m_config_isValid;
}

qint32 OAIGetHostedZoneResponse_HostedZone::getResourceRecordSetCount() const {
    return m_resource_record_set_count;
}
void OAIGetHostedZoneResponse_HostedZone::setResourceRecordSetCount(const qint32 &resource_record_set_count) {
    m_resource_record_set_count = resource_record_set_count;
    m_resource_record_set_count_isSet = true;
}

bool OAIGetHostedZoneResponse_HostedZone::is_resource_record_set_count_Set() const{
    return m_resource_record_set_count_isSet;
}

bool OAIGetHostedZoneResponse_HostedZone::is_resource_record_set_count_Valid() const{
    return m_resource_record_set_count_isValid;
}

OAIHostedZone_LinkedService OAIGetHostedZoneResponse_HostedZone::getLinkedService() const {
    return m_linked_service;
}
void OAIGetHostedZoneResponse_HostedZone::setLinkedService(const OAIHostedZone_LinkedService &linked_service) {
    m_linked_service = linked_service;
    m_linked_service_isSet = true;
}

bool OAIGetHostedZoneResponse_HostedZone::is_linked_service_Set() const{
    return m_linked_service_isSet;
}

bool OAIGetHostedZoneResponse_HostedZone::is_linked_service_Valid() const{
    return m_linked_service_isValid;
}

bool OAIGetHostedZoneResponse_HostedZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_record_set_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_service.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetHostedZoneResponse_HostedZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_caller_reference_isValid && true;
}

} // namespace OpenAPI
