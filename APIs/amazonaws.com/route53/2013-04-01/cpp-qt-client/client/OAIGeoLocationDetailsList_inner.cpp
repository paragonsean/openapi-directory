/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoLocationDetailsList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoLocationDetailsList_inner::OAIGeoLocationDetailsList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoLocationDetailsList_inner::OAIGeoLocationDetailsList_inner() {
    this->initializeModel();
}

OAIGeoLocationDetailsList_inner::~OAIGeoLocationDetailsList_inner() {}

void OAIGeoLocationDetailsList_inner::initializeModel() {

    m_continent_code_isSet = false;
    m_continent_code_isValid = false;

    m_continent_name_isSet = false;
    m_continent_name_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_subdivision_code_isSet = false;
    m_subdivision_code_isValid = false;

    m_subdivision_name_isSet = false;
    m_subdivision_name_isValid = false;
}

void OAIGeoLocationDetailsList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoLocationDetailsList_inner::fromJsonObject(QJsonObject json) {

    m_continent_code_isValid = ::OpenAPI::fromJsonValue(m_continent_code, json[QString("ContinentCode")]);
    m_continent_code_isSet = !json[QString("ContinentCode")].isNull() && m_continent_code_isValid;

    m_continent_name_isValid = ::OpenAPI::fromJsonValue(m_continent_name, json[QString("ContinentName")]);
    m_continent_name_isSet = !json[QString("ContinentName")].isNull() && m_continent_name_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("CountryCode")]);
    m_country_code_isSet = !json[QString("CountryCode")].isNull() && m_country_code_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("CountryName")]);
    m_country_name_isSet = !json[QString("CountryName")].isNull() && m_country_name_isValid;

    m_subdivision_code_isValid = ::OpenAPI::fromJsonValue(m_subdivision_code, json[QString("SubdivisionCode")]);
    m_subdivision_code_isSet = !json[QString("SubdivisionCode")].isNull() && m_subdivision_code_isValid;

    m_subdivision_name_isValid = ::OpenAPI::fromJsonValue(m_subdivision_name, json[QString("SubdivisionName")]);
    m_subdivision_name_isSet = !json[QString("SubdivisionName")].isNull() && m_subdivision_name_isValid;
}

QString OAIGeoLocationDetailsList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoLocationDetailsList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_continent_code_isSet) {
        obj.insert(QString("ContinentCode"), ::OpenAPI::toJsonValue(m_continent_code));
    }
    if (m_continent_name_isSet) {
        obj.insert(QString("ContinentName"), ::OpenAPI::toJsonValue(m_continent_name));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("CountryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("CountryName"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_subdivision_code_isSet) {
        obj.insert(QString("SubdivisionCode"), ::OpenAPI::toJsonValue(m_subdivision_code));
    }
    if (m_subdivision_name_isSet) {
        obj.insert(QString("SubdivisionName"), ::OpenAPI::toJsonValue(m_subdivision_name));
    }
    return obj;
}

QString OAIGeoLocationDetailsList_inner::getContinentCode() const {
    return m_continent_code;
}
void OAIGeoLocationDetailsList_inner::setContinentCode(const QString &continent_code) {
    m_continent_code = continent_code;
    m_continent_code_isSet = true;
}

bool OAIGeoLocationDetailsList_inner::is_continent_code_Set() const{
    return m_continent_code_isSet;
}

bool OAIGeoLocationDetailsList_inner::is_continent_code_Valid() const{
    return m_continent_code_isValid;
}

QString OAIGeoLocationDetailsList_inner::getContinentName() const {
    return m_continent_name;
}
void OAIGeoLocationDetailsList_inner::setContinentName(const QString &continent_name) {
    m_continent_name = continent_name;
    m_continent_name_isSet = true;
}

bool OAIGeoLocationDetailsList_inner::is_continent_name_Set() const{
    return m_continent_name_isSet;
}

bool OAIGeoLocationDetailsList_inner::is_continent_name_Valid() const{
    return m_continent_name_isValid;
}

QString OAIGeoLocationDetailsList_inner::getCountryCode() const {
    return m_country_code;
}
void OAIGeoLocationDetailsList_inner::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIGeoLocationDetailsList_inner::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIGeoLocationDetailsList_inner::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIGeoLocationDetailsList_inner::getCountryName() const {
    return m_country_name;
}
void OAIGeoLocationDetailsList_inner::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAIGeoLocationDetailsList_inner::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAIGeoLocationDetailsList_inner::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAIGeoLocationDetailsList_inner::getSubdivisionCode() const {
    return m_subdivision_code;
}
void OAIGeoLocationDetailsList_inner::setSubdivisionCode(const QString &subdivision_code) {
    m_subdivision_code = subdivision_code;
    m_subdivision_code_isSet = true;
}

bool OAIGeoLocationDetailsList_inner::is_subdivision_code_Set() const{
    return m_subdivision_code_isSet;
}

bool OAIGeoLocationDetailsList_inner::is_subdivision_code_Valid() const{
    return m_subdivision_code_isValid;
}

QString OAIGeoLocationDetailsList_inner::getSubdivisionName() const {
    return m_subdivision_name;
}
void OAIGeoLocationDetailsList_inner::setSubdivisionName(const QString &subdivision_name) {
    m_subdivision_name = subdivision_name;
    m_subdivision_name_isSet = true;
}

bool OAIGeoLocationDetailsList_inner::is_subdivision_name_Set() const{
    return m_subdivision_name_isSet;
}

bool OAIGeoLocationDetailsList_inner::is_subdivision_name_Valid() const{
    return m_subdivision_name_isValid;
}

bool OAIGeoLocationDetailsList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_continent_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdivision_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdivision_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoLocationDetailsList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
