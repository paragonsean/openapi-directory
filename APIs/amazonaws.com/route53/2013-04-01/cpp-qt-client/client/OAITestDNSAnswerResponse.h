/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITestDNSAnswerResponse.h
 *
 * A complex type that contains the response to a &lt;code&gt;TestDNSAnswer&lt;/code&gt; request. 
 */

#ifndef OAITestDNSAnswerResponse_H
#define OAITestDNSAnswerResponse_H

#include <QJsonObject>

#include "OAIRRType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITestDNSAnswerResponse : public OAIObject {
public:
    OAITestDNSAnswerResponse();
    OAITestDNSAnswerResponse(QString json);
    ~OAITestDNSAnswerResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNameserver() const;
    void setNameserver(const QString &nameserver);
    bool is_nameserver_Set() const;
    bool is_nameserver_Valid() const;

    QString getRecordName() const;
    void setRecordName(const QString &record_name);
    bool is_record_name_Set() const;
    bool is_record_name_Valid() const;

    OAIRRType getRecordType() const;
    void setRecordType(const OAIRRType &record_type);
    bool is_record_type_Set() const;
    bool is_record_type_Valid() const;

    QList getRecordData() const;
    void setRecordData(const QList &record_data);
    bool is_record_data_Set() const;
    bool is_record_data_Valid() const;

    QString getResponseCode() const;
    void setResponseCode(const QString &response_code);
    bool is_response_code_Set() const;
    bool is_response_code_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_nameserver;
    bool m_nameserver_isSet;
    bool m_nameserver_isValid;

    QString m_record_name;
    bool m_record_name_isSet;
    bool m_record_name_isValid;

    OAIRRType m_record_type;
    bool m_record_type_isSet;
    bool m_record_type_isValid;

    QList m_record_data;
    bool m_record_data_isSet;
    bool m_record_data_isValid;

    QString m_response_code;
    bool m_response_code_isSet;
    bool m_response_code_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITestDNSAnswerResponse)

#endif // OAITestDNSAnswerResponse_H
