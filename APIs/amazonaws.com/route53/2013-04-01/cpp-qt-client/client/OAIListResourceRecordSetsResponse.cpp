/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListResourceRecordSetsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListResourceRecordSetsResponse::OAIListResourceRecordSetsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListResourceRecordSetsResponse::OAIListResourceRecordSetsResponse() {
    this->initializeModel();
}

OAIListResourceRecordSetsResponse::~OAIListResourceRecordSetsResponse() {}

void OAIListResourceRecordSetsResponse::initializeModel() {

    m_resource_record_sets_isSet = false;
    m_resource_record_sets_isValid = false;

    m_is_truncated_isSet = false;
    m_is_truncated_isValid = false;

    m_next_record_name_isSet = false;
    m_next_record_name_isValid = false;

    m_next_record_type_isSet = false;
    m_next_record_type_isValid = false;

    m_next_record_identifier_isSet = false;
    m_next_record_identifier_isValid = false;

    m_max_items_isSet = false;
    m_max_items_isValid = false;
}

void OAIListResourceRecordSetsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListResourceRecordSetsResponse::fromJsonObject(QJsonObject json) {

    m_resource_record_sets_isValid = ::OpenAPI::fromJsonValue(m_resource_record_sets, json[QString("ResourceRecordSets")]);
    m_resource_record_sets_isSet = !json[QString("ResourceRecordSets")].isNull() && m_resource_record_sets_isValid;

    m_is_truncated_isValid = ::OpenAPI::fromJsonValue(m_is_truncated, json[QString("IsTruncated")]);
    m_is_truncated_isSet = !json[QString("IsTruncated")].isNull() && m_is_truncated_isValid;

    m_next_record_name_isValid = ::OpenAPI::fromJsonValue(m_next_record_name, json[QString("NextRecordName")]);
    m_next_record_name_isSet = !json[QString("NextRecordName")].isNull() && m_next_record_name_isValid;

    m_next_record_type_isValid = ::OpenAPI::fromJsonValue(m_next_record_type, json[QString("NextRecordType")]);
    m_next_record_type_isSet = !json[QString("NextRecordType")].isNull() && m_next_record_type_isValid;

    m_next_record_identifier_isValid = ::OpenAPI::fromJsonValue(m_next_record_identifier, json[QString("NextRecordIdentifier")]);
    m_next_record_identifier_isSet = !json[QString("NextRecordIdentifier")].isNull() && m_next_record_identifier_isValid;

    m_max_items_isValid = ::OpenAPI::fromJsonValue(m_max_items, json[QString("MaxItems")]);
    m_max_items_isSet = !json[QString("MaxItems")].isNull() && m_max_items_isValid;
}

QString OAIListResourceRecordSetsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListResourceRecordSetsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_record_sets.isSet()) {
        obj.insert(QString("ResourceRecordSets"), ::OpenAPI::toJsonValue(m_resource_record_sets));
    }
    if (m_is_truncated_isSet) {
        obj.insert(QString("IsTruncated"), ::OpenAPI::toJsonValue(m_is_truncated));
    }
    if (m_next_record_name_isSet) {
        obj.insert(QString("NextRecordName"), ::OpenAPI::toJsonValue(m_next_record_name));
    }
    if (m_next_record_type.isSet()) {
        obj.insert(QString("NextRecordType"), ::OpenAPI::toJsonValue(m_next_record_type));
    }
    if (m_next_record_identifier_isSet) {
        obj.insert(QString("NextRecordIdentifier"), ::OpenAPI::toJsonValue(m_next_record_identifier));
    }
    if (m_max_items_isSet) {
        obj.insert(QString("MaxItems"), ::OpenAPI::toJsonValue(m_max_items));
    }
    return obj;
}

QList OAIListResourceRecordSetsResponse::getResourceRecordSets() const {
    return m_resource_record_sets;
}
void OAIListResourceRecordSetsResponse::setResourceRecordSets(const QList &resource_record_sets) {
    m_resource_record_sets = resource_record_sets;
    m_resource_record_sets_isSet = true;
}

bool OAIListResourceRecordSetsResponse::is_resource_record_sets_Set() const{
    return m_resource_record_sets_isSet;
}

bool OAIListResourceRecordSetsResponse::is_resource_record_sets_Valid() const{
    return m_resource_record_sets_isValid;
}

bool OAIListResourceRecordSetsResponse::getIsTruncated() const {
    return m_is_truncated;
}
void OAIListResourceRecordSetsResponse::setIsTruncated(const bool &is_truncated) {
    m_is_truncated = is_truncated;
    m_is_truncated_isSet = true;
}

bool OAIListResourceRecordSetsResponse::is_is_truncated_Set() const{
    return m_is_truncated_isSet;
}

bool OAIListResourceRecordSetsResponse::is_is_truncated_Valid() const{
    return m_is_truncated_isValid;
}

QString OAIListResourceRecordSetsResponse::getNextRecordName() const {
    return m_next_record_name;
}
void OAIListResourceRecordSetsResponse::setNextRecordName(const QString &next_record_name) {
    m_next_record_name = next_record_name;
    m_next_record_name_isSet = true;
}

bool OAIListResourceRecordSetsResponse::is_next_record_name_Set() const{
    return m_next_record_name_isSet;
}

bool OAIListResourceRecordSetsResponse::is_next_record_name_Valid() const{
    return m_next_record_name_isValid;
}

OAIRRType OAIListResourceRecordSetsResponse::getNextRecordType() const {
    return m_next_record_type;
}
void OAIListResourceRecordSetsResponse::setNextRecordType(const OAIRRType &next_record_type) {
    m_next_record_type = next_record_type;
    m_next_record_type_isSet = true;
}

bool OAIListResourceRecordSetsResponse::is_next_record_type_Set() const{
    return m_next_record_type_isSet;
}

bool OAIListResourceRecordSetsResponse::is_next_record_type_Valid() const{
    return m_next_record_type_isValid;
}

QString OAIListResourceRecordSetsResponse::getNextRecordIdentifier() const {
    return m_next_record_identifier;
}
void OAIListResourceRecordSetsResponse::setNextRecordIdentifier(const QString &next_record_identifier) {
    m_next_record_identifier = next_record_identifier;
    m_next_record_identifier_isSet = true;
}

bool OAIListResourceRecordSetsResponse::is_next_record_identifier_Set() const{
    return m_next_record_identifier_isSet;
}

bool OAIListResourceRecordSetsResponse::is_next_record_identifier_Valid() const{
    return m_next_record_identifier_isValid;
}

QString OAIListResourceRecordSetsResponse::getMaxItems() const {
    return m_max_items;
}
void OAIListResourceRecordSetsResponse::setMaxItems(const QString &max_items) {
    m_max_items = max_items;
    m_max_items_isSet = true;
}

bool OAIListResourceRecordSetsResponse::is_max_items_Set() const{
    return m_max_items_isSet;
}

bool OAIListResourceRecordSetsResponse::is_max_items_Valid() const{
    return m_max_items_isValid;
}

bool OAIListResourceRecordSetsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_record_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_record_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_record_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_record_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListResourceRecordSetsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_record_sets_isValid && m_is_truncated_isValid && m_max_items_isValid && true;
}

} // namespace OpenAPI
