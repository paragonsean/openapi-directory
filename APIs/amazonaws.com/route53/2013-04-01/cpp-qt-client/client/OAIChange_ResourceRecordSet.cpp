/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChange_ResourceRecordSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChange_ResourceRecordSet::OAIChange_ResourceRecordSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChange_ResourceRecordSet::OAIChange_ResourceRecordSet() {
    this->initializeModel();
}

OAIChange_ResourceRecordSet::~OAIChange_ResourceRecordSet() {}

void OAIChange_ResourceRecordSet::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_set_identifier_isSet = false;
    m_set_identifier_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_geo_location_isSet = false;
    m_geo_location_isValid = false;

    m_failover_isSet = false;
    m_failover_isValid = false;

    m_multi_value_answer_isSet = false;
    m_multi_value_answer_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_resource_records_isSet = false;
    m_resource_records_isValid = false;

    m_alias_target_isSet = false;
    m_alias_target_isValid = false;

    m_health_check_id_isSet = false;
    m_health_check_id_isValid = false;

    m_traffic_policy_instance_id_isSet = false;
    m_traffic_policy_instance_id_isValid = false;

    m_cidr_routing_config_isSet = false;
    m_cidr_routing_config_isValid = false;
}

void OAIChange_ResourceRecordSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChange_ResourceRecordSet::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_set_identifier_isValid = ::OpenAPI::fromJsonValue(m_set_identifier, json[QString("SetIdentifier")]);
    m_set_identifier_isSet = !json[QString("SetIdentifier")].isNull() && m_set_identifier_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_geo_location_isValid = ::OpenAPI::fromJsonValue(m_geo_location, json[QString("GeoLocation")]);
    m_geo_location_isSet = !json[QString("GeoLocation")].isNull() && m_geo_location_isValid;

    m_failover_isValid = ::OpenAPI::fromJsonValue(m_failover, json[QString("Failover")]);
    m_failover_isSet = !json[QString("Failover")].isNull() && m_failover_isValid;

    m_multi_value_answer_isValid = ::OpenAPI::fromJsonValue(m_multi_value_answer, json[QString("MultiValueAnswer")]);
    m_multi_value_answer_isSet = !json[QString("MultiValueAnswer")].isNull() && m_multi_value_answer_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("TTL")]);
    m_ttl_isSet = !json[QString("TTL")].isNull() && m_ttl_isValid;

    m_resource_records_isValid = ::OpenAPI::fromJsonValue(m_resource_records, json[QString("ResourceRecords")]);
    m_resource_records_isSet = !json[QString("ResourceRecords")].isNull() && m_resource_records_isValid;

    m_alias_target_isValid = ::OpenAPI::fromJsonValue(m_alias_target, json[QString("AliasTarget")]);
    m_alias_target_isSet = !json[QString("AliasTarget")].isNull() && m_alias_target_isValid;

    m_health_check_id_isValid = ::OpenAPI::fromJsonValue(m_health_check_id, json[QString("HealthCheckId")]);
    m_health_check_id_isSet = !json[QString("HealthCheckId")].isNull() && m_health_check_id_isValid;

    m_traffic_policy_instance_id_isValid = ::OpenAPI::fromJsonValue(m_traffic_policy_instance_id, json[QString("TrafficPolicyInstanceId")]);
    m_traffic_policy_instance_id_isSet = !json[QString("TrafficPolicyInstanceId")].isNull() && m_traffic_policy_instance_id_isValid;

    m_cidr_routing_config_isValid = ::OpenAPI::fromJsonValue(m_cidr_routing_config, json[QString("CidrRoutingConfig")]);
    m_cidr_routing_config_isSet = !json[QString("CidrRoutingConfig")].isNull() && m_cidr_routing_config_isValid;
}

QString OAIChange_ResourceRecordSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChange_ResourceRecordSet::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_set_identifier_isSet) {
        obj.insert(QString("SetIdentifier"), ::OpenAPI::toJsonValue(m_set_identifier));
    }
    if (m_weight_isSet) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_region.isSet()) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_geo_location.isSet()) {
        obj.insert(QString("GeoLocation"), ::OpenAPI::toJsonValue(m_geo_location));
    }
    if (m_failover.isSet()) {
        obj.insert(QString("Failover"), ::OpenAPI::toJsonValue(m_failover));
    }
    if (m_multi_value_answer_isSet) {
        obj.insert(QString("MultiValueAnswer"), ::OpenAPI::toJsonValue(m_multi_value_answer));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("TTL"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_resource_records.isSet()) {
        obj.insert(QString("ResourceRecords"), ::OpenAPI::toJsonValue(m_resource_records));
    }
    if (m_alias_target.isSet()) {
        obj.insert(QString("AliasTarget"), ::OpenAPI::toJsonValue(m_alias_target));
    }
    if (m_health_check_id_isSet) {
        obj.insert(QString("HealthCheckId"), ::OpenAPI::toJsonValue(m_health_check_id));
    }
    if (m_traffic_policy_instance_id_isSet) {
        obj.insert(QString("TrafficPolicyInstanceId"), ::OpenAPI::toJsonValue(m_traffic_policy_instance_id));
    }
    if (m_cidr_routing_config.isSet()) {
        obj.insert(QString("CidrRoutingConfig"), ::OpenAPI::toJsonValue(m_cidr_routing_config));
    }
    return obj;
}

QString OAIChange_ResourceRecordSet::getName() const {
    return m_name;
}
void OAIChange_ResourceRecordSet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChange_ResourceRecordSet::is_name_Valid() const{
    return m_name_isValid;
}

OAIRRType OAIChange_ResourceRecordSet::getType() const {
    return m_type;
}
void OAIChange_ResourceRecordSet::setType(const OAIRRType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChange_ResourceRecordSet::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIChange_ResourceRecordSet::getSetIdentifier() const {
    return m_set_identifier;
}
void OAIChange_ResourceRecordSet::setSetIdentifier(const QString &set_identifier) {
    m_set_identifier = set_identifier;
    m_set_identifier_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_set_identifier_Set() const{
    return m_set_identifier_isSet;
}

bool OAIChange_ResourceRecordSet::is_set_identifier_Valid() const{
    return m_set_identifier_isValid;
}

qint32 OAIChange_ResourceRecordSet::getWeight() const {
    return m_weight;
}
void OAIChange_ResourceRecordSet::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIChange_ResourceRecordSet::is_weight_Valid() const{
    return m_weight_isValid;
}

OAIResourceRecordSetRegion OAIChange_ResourceRecordSet::getRegion() const {
    return m_region;
}
void OAIChange_ResourceRecordSet::setRegion(const OAIResourceRecordSetRegion &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_region_Set() const{
    return m_region_isSet;
}

bool OAIChange_ResourceRecordSet::is_region_Valid() const{
    return m_region_isValid;
}

OAIResourceRecordSet_GeoLocation OAIChange_ResourceRecordSet::getGeoLocation() const {
    return m_geo_location;
}
void OAIChange_ResourceRecordSet::setGeoLocation(const OAIResourceRecordSet_GeoLocation &geo_location) {
    m_geo_location = geo_location;
    m_geo_location_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_geo_location_Set() const{
    return m_geo_location_isSet;
}

bool OAIChange_ResourceRecordSet::is_geo_location_Valid() const{
    return m_geo_location_isValid;
}

OAIResourceRecordSetFailover OAIChange_ResourceRecordSet::getFailover() const {
    return m_failover;
}
void OAIChange_ResourceRecordSet::setFailover(const OAIResourceRecordSetFailover &failover) {
    m_failover = failover;
    m_failover_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_failover_Set() const{
    return m_failover_isSet;
}

bool OAIChange_ResourceRecordSet::is_failover_Valid() const{
    return m_failover_isValid;
}

bool OAIChange_ResourceRecordSet::getMultiValueAnswer() const {
    return m_multi_value_answer;
}
void OAIChange_ResourceRecordSet::setMultiValueAnswer(const bool &multi_value_answer) {
    m_multi_value_answer = multi_value_answer;
    m_multi_value_answer_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_multi_value_answer_Set() const{
    return m_multi_value_answer_isSet;
}

bool OAIChange_ResourceRecordSet::is_multi_value_answer_Valid() const{
    return m_multi_value_answer_isValid;
}

qint32 OAIChange_ResourceRecordSet::getTtl() const {
    return m_ttl;
}
void OAIChange_ResourceRecordSet::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIChange_ResourceRecordSet::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QList OAIChange_ResourceRecordSet::getResourceRecords() const {
    return m_resource_records;
}
void OAIChange_ResourceRecordSet::setResourceRecords(const QList &resource_records) {
    m_resource_records = resource_records;
    m_resource_records_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_resource_records_Set() const{
    return m_resource_records_isSet;
}

bool OAIChange_ResourceRecordSet::is_resource_records_Valid() const{
    return m_resource_records_isValid;
}

OAIResourceRecordSet_AliasTarget OAIChange_ResourceRecordSet::getAliasTarget() const {
    return m_alias_target;
}
void OAIChange_ResourceRecordSet::setAliasTarget(const OAIResourceRecordSet_AliasTarget &alias_target) {
    m_alias_target = alias_target;
    m_alias_target_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_alias_target_Set() const{
    return m_alias_target_isSet;
}

bool OAIChange_ResourceRecordSet::is_alias_target_Valid() const{
    return m_alias_target_isValid;
}

QString OAIChange_ResourceRecordSet::getHealthCheckId() const {
    return m_health_check_id;
}
void OAIChange_ResourceRecordSet::setHealthCheckId(const QString &health_check_id) {
    m_health_check_id = health_check_id;
    m_health_check_id_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_health_check_id_Set() const{
    return m_health_check_id_isSet;
}

bool OAIChange_ResourceRecordSet::is_health_check_id_Valid() const{
    return m_health_check_id_isValid;
}

QString OAIChange_ResourceRecordSet::getTrafficPolicyInstanceId() const {
    return m_traffic_policy_instance_id;
}
void OAIChange_ResourceRecordSet::setTrafficPolicyInstanceId(const QString &traffic_policy_instance_id) {
    m_traffic_policy_instance_id = traffic_policy_instance_id;
    m_traffic_policy_instance_id_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_traffic_policy_instance_id_Set() const{
    return m_traffic_policy_instance_id_isSet;
}

bool OAIChange_ResourceRecordSet::is_traffic_policy_instance_id_Valid() const{
    return m_traffic_policy_instance_id_isValid;
}

OAICidrRoutingConfig OAIChange_ResourceRecordSet::getCidrRoutingConfig() const {
    return m_cidr_routing_config;
}
void OAIChange_ResourceRecordSet::setCidrRoutingConfig(const OAICidrRoutingConfig &cidr_routing_config) {
    m_cidr_routing_config = cidr_routing_config;
    m_cidr_routing_config_isSet = true;
}

bool OAIChange_ResourceRecordSet::is_cidr_routing_config_Set() const{
    return m_cidr_routing_config_isSet;
}

bool OAIChange_ResourceRecordSet::is_cidr_routing_config_Valid() const{
    return m_cidr_routing_config_isValid;
}

bool OAIChange_ResourceRecordSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_value_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_records.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_policy_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cidr_routing_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChange_ResourceRecordSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
