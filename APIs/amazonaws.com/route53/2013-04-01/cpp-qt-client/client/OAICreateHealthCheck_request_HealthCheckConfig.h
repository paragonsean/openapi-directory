/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateHealthCheck_request_HealthCheckConfig.h
 *
 * A complex type that contains information about the health check.
 */

#ifndef OAICreateHealthCheck_request_HealthCheckConfig_H
#define OAICreateHealthCheck_request_HealthCheckConfig_H

#include <QJsonObject>

#include "OAICreateHealthCheck_request_HealthCheckConfig_AlarmIdentifier.h"
#include "OAIHealthCheckType.h"
#include "OAIInsufficientDataHealthStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateHealthCheck_request_HealthCheckConfig_AlarmIdentifier;

class OAICreateHealthCheck_request_HealthCheckConfig : public OAIObject {
public:
    OAICreateHealthCheck_request_HealthCheckConfig();
    OAICreateHealthCheck_request_HealthCheckConfig(QString json);
    ~OAICreateHealthCheck_request_HealthCheckConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    OAIHealthCheckType getType() const;
    void setType(const OAIHealthCheckType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getResourcePath() const;
    void setResourcePath(const QString &resource_path);
    bool is_resource_path_Set() const;
    bool is_resource_path_Valid() const;

    QString getFullyQualifiedDomainName() const;
    void setFullyQualifiedDomainName(const QString &fully_qualified_domain_name);
    bool is_fully_qualified_domain_name_Set() const;
    bool is_fully_qualified_domain_name_Valid() const;

    QString getSearchString() const;
    void setSearchString(const QString &search_string);
    bool is_search_string_Set() const;
    bool is_search_string_Valid() const;

    qint32 getRequestInterval() const;
    void setRequestInterval(const qint32 &request_interval);
    bool is_request_interval_Set() const;
    bool is_request_interval_Valid() const;

    qint32 getFailureThreshold() const;
    void setFailureThreshold(const qint32 &failure_threshold);
    bool is_failure_threshold_Set() const;
    bool is_failure_threshold_Valid() const;

    bool getMeasureLatency() const;
    void setMeasureLatency(const bool &measure_latency);
    bool is_measure_latency_Set() const;
    bool is_measure_latency_Valid() const;

    bool getInverted() const;
    void setInverted(const bool &inverted);
    bool is_inverted_Set() const;
    bool is_inverted_Valid() const;

    bool getDisabled() const;
    void setDisabled(const bool &disabled);
    bool is_disabled_Set() const;
    bool is_disabled_Valid() const;

    qint32 getHealthThreshold() const;
    void setHealthThreshold(const qint32 &health_threshold);
    bool is_health_threshold_Set() const;
    bool is_health_threshold_Valid() const;

    QList getChildHealthChecks() const;
    void setChildHealthChecks(const QList &child_health_checks);
    bool is_child_health_checks_Set() const;
    bool is_child_health_checks_Valid() const;

    bool getEnableSni() const;
    void setEnableSni(const bool &enable_sni);
    bool is_enable_sni_Set() const;
    bool is_enable_sni_Valid() const;

    QList getRegions() const;
    void setRegions(const QList &regions);
    bool is_regions_Set() const;
    bool is_regions_Valid() const;

    OAICreateHealthCheck_request_HealthCheckConfig_AlarmIdentifier getAlarmIdentifier() const;
    void setAlarmIdentifier(const OAICreateHealthCheck_request_HealthCheckConfig_AlarmIdentifier &alarm_identifier);
    bool is_alarm_identifier_Set() const;
    bool is_alarm_identifier_Valid() const;

    OAIInsufficientDataHealthStatus getInsufficientDataHealthStatus() const;
    void setInsufficientDataHealthStatus(const OAIInsufficientDataHealthStatus &insufficient_data_health_status);
    bool is_insufficient_data_health_status_Set() const;
    bool is_insufficient_data_health_status_Valid() const;

    QString getRoutingControlArn() const;
    void setRoutingControlArn(const QString &routing_control_arn);
    bool is_routing_control_arn_Set() const;
    bool is_routing_control_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    OAIHealthCheckType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_resource_path;
    bool m_resource_path_isSet;
    bool m_resource_path_isValid;

    QString m_fully_qualified_domain_name;
    bool m_fully_qualified_domain_name_isSet;
    bool m_fully_qualified_domain_name_isValid;

    QString m_search_string;
    bool m_search_string_isSet;
    bool m_search_string_isValid;

    qint32 m_request_interval;
    bool m_request_interval_isSet;
    bool m_request_interval_isValid;

    qint32 m_failure_threshold;
    bool m_failure_threshold_isSet;
    bool m_failure_threshold_isValid;

    bool m_measure_latency;
    bool m_measure_latency_isSet;
    bool m_measure_latency_isValid;

    bool m_inverted;
    bool m_inverted_isSet;
    bool m_inverted_isValid;

    bool m_disabled;
    bool m_disabled_isSet;
    bool m_disabled_isValid;

    qint32 m_health_threshold;
    bool m_health_threshold_isSet;
    bool m_health_threshold_isValid;

    QList m_child_health_checks;
    bool m_child_health_checks_isSet;
    bool m_child_health_checks_isValid;

    bool m_enable_sni;
    bool m_enable_sni_isSet;
    bool m_enable_sni_isValid;

    QList m_regions;
    bool m_regions_isSet;
    bool m_regions_isValid;

    OAICreateHealthCheck_request_HealthCheckConfig_AlarmIdentifier m_alarm_identifier;
    bool m_alarm_identifier_isSet;
    bool m_alarm_identifier_isValid;

    OAIInsufficientDataHealthStatus m_insufficient_data_health_status;
    bool m_insufficient_data_health_status_isSet;
    bool m_insufficient_data_health_status_isValid;

    QString m_routing_control_arn;
    bool m_routing_control_arn_isSet;
    bool m_routing_control_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateHealthCheck_request_HealthCheckConfig)

#endif // OAICreateHealthCheck_request_HealthCheckConfig_H
