/**
 * Amazon Route 53
 * <p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route 53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route 53 checks the health of your resources</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2013-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetHostedZoneCountResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetHostedZoneCountResponse::OAIGetHostedZoneCountResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetHostedZoneCountResponse::OAIGetHostedZoneCountResponse() {
    this->initializeModel();
}

OAIGetHostedZoneCountResponse::~OAIGetHostedZoneCountResponse() {}

void OAIGetHostedZoneCountResponse::initializeModel() {

    m_hosted_zone_count_isSet = false;
    m_hosted_zone_count_isValid = false;
}

void OAIGetHostedZoneCountResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetHostedZoneCountResponse::fromJsonObject(QJsonObject json) {

    m_hosted_zone_count_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone_count, json[QString("HostedZoneCount")]);
    m_hosted_zone_count_isSet = !json[QString("HostedZoneCount")].isNull() && m_hosted_zone_count_isValid;
}

QString OAIGetHostedZoneCountResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetHostedZoneCountResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_hosted_zone_count_isSet) {
        obj.insert(QString("HostedZoneCount"), ::OpenAPI::toJsonValue(m_hosted_zone_count));
    }
    return obj;
}

qint32 OAIGetHostedZoneCountResponse::getHostedZoneCount() const {
    return m_hosted_zone_count;
}
void OAIGetHostedZoneCountResponse::setHostedZoneCount(const qint32 &hosted_zone_count) {
    m_hosted_zone_count = hosted_zone_count;
    m_hosted_zone_count_isSet = true;
}

bool OAIGetHostedZoneCountResponse::is_hosted_zone_count_Set() const{
    return m_hosted_zone_count_isSet;
}

bool OAIGetHostedZoneCountResponse::is_hosted_zone_count_Valid() const{
    return m_hosted_zone_count_isValid;
}

bool OAIGetHostedZoneCountResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hosted_zone_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetHostedZoneCountResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hosted_zone_count_isValid && true;
}

} // namespace OpenAPI
