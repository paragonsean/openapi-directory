# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateKeySigningKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caller_reference: str=None, hosted_zone_id: str=None, key_management_service_arn: str=None, name: str=None, status: str=None):
        """CreateKeySigningKeyRequest - a model defined in OpenAPI

        :param caller_reference: The caller_reference of this CreateKeySigningKeyRequest.
        :param hosted_zone_id: The hosted_zone_id of this CreateKeySigningKeyRequest.
        :param key_management_service_arn: The key_management_service_arn of this CreateKeySigningKeyRequest.
        :param name: The name of this CreateKeySigningKeyRequest.
        :param status: The status of this CreateKeySigningKeyRequest.
        """
        self.openapi_types = {
            'caller_reference': str,
            'hosted_zone_id': str,
            'key_management_service_arn': str,
            'name': str,
            'status': str
        }

        self.attribute_map = {
            'caller_reference': 'CallerReference',
            'hosted_zone_id': 'HostedZoneId',
            'key_management_service_arn': 'KeyManagementServiceArn',
            'name': 'Name',
            'status': 'Status'
        }

        self._caller_reference = caller_reference
        self._hosted_zone_id = hosted_zone_id
        self._key_management_service_arn = key_management_service_arn
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateKeySigningKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateKeySigningKey_request of this CreateKeySigningKeyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caller_reference(self):
        """Gets the caller_reference of this CreateKeySigningKeyRequest.

        A unique string that identifies the request.

        :return: The caller_reference of this CreateKeySigningKeyRequest.
        :rtype: str
        """
        return self._caller_reference

    @caller_reference.setter
    def caller_reference(self, caller_reference):
        """Sets the caller_reference of this CreateKeySigningKeyRequest.

        A unique string that identifies the request.

        :param caller_reference: The caller_reference of this CreateKeySigningKeyRequest.
        :type caller_reference: str
        """
        if caller_reference is None:
            raise ValueError("Invalid value for `caller_reference`, must not be `None`")
        if caller_reference is not None and len(caller_reference) > 128:
            raise ValueError("Invalid value for `caller_reference`, length must be less than or equal to `128`")
        if caller_reference is not None and len(caller_reference) < 1:
            raise ValueError("Invalid value for `caller_reference`, length must be greater than or equal to `1`")

        self._caller_reference = caller_reference

    @property
    def hosted_zone_id(self):
        """Gets the hosted_zone_id of this CreateKeySigningKeyRequest.

        The unique string (ID) used to identify a hosted zone.

        :return: The hosted_zone_id of this CreateKeySigningKeyRequest.
        :rtype: str
        """
        return self._hosted_zone_id

    @hosted_zone_id.setter
    def hosted_zone_id(self, hosted_zone_id):
        """Sets the hosted_zone_id of this CreateKeySigningKeyRequest.

        The unique string (ID) used to identify a hosted zone.

        :param hosted_zone_id: The hosted_zone_id of this CreateKeySigningKeyRequest.
        :type hosted_zone_id: str
        """
        if hosted_zone_id is None:
            raise ValueError("Invalid value for `hosted_zone_id`, must not be `None`")
        if hosted_zone_id is not None and len(hosted_zone_id) > 32:
            raise ValueError("Invalid value for `hosted_zone_id`, length must be less than or equal to `32`")

        self._hosted_zone_id = hosted_zone_id

    @property
    def key_management_service_arn(self):
        """Gets the key_management_service_arn of this CreateKeySigningKeyRequest.

        <p>The Amazon resource name (ARN) for a customer managed key in Key Management Service (KMS). The <code>KeyManagementServiceArn</code> must be unique for each key-signing key (KSK) in a single hosted zone. To see an example of <code>KeyManagementServiceArn</code> that grants the correct permissions for DNSSEC, scroll down to <b>Example</b>. </p> <p>You must configure the customer managed customer managed key as follows:</p> <dl> <dt>Status</dt> <dd> <p>Enabled</p> </dd> <dt>Key spec</dt> <dd> <p>ECC_NIST_P256</p> </dd> <dt>Key usage</dt> <dd> <p>Sign and verify</p> </dd> <dt>Key policy</dt> <dd> <p>The key policy must give permission for the following actions:</p> <ul> <li> <p>DescribeKey</p> </li> <li> <p>GetPublicKey</p> </li> <li> <p>Sign</p> </li> </ul> <p>The key policy must also include the Amazon Route 53 service in the principal for your account. Specify the following:</p> <ul> <li> <p> <code>\"Service\": \"dnssec-route53.amazonaws.com\"</code> </p> </li> </ul> </dd> </dl> <p>For more information about working with a customer managed key in KMS, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html\">Key Management Service concepts</a>.</p>

        :return: The key_management_service_arn of this CreateKeySigningKeyRequest.
        :rtype: str
        """
        return self._key_management_service_arn

    @key_management_service_arn.setter
    def key_management_service_arn(self, key_management_service_arn):
        """Sets the key_management_service_arn of this CreateKeySigningKeyRequest.

        <p>The Amazon resource name (ARN) for a customer managed key in Key Management Service (KMS). The <code>KeyManagementServiceArn</code> must be unique for each key-signing key (KSK) in a single hosted zone. To see an example of <code>KeyManagementServiceArn</code> that grants the correct permissions for DNSSEC, scroll down to <b>Example</b>. </p> <p>You must configure the customer managed customer managed key as follows:</p> <dl> <dt>Status</dt> <dd> <p>Enabled</p> </dd> <dt>Key spec</dt> <dd> <p>ECC_NIST_P256</p> </dd> <dt>Key usage</dt> <dd> <p>Sign and verify</p> </dd> <dt>Key policy</dt> <dd> <p>The key policy must give permission for the following actions:</p> <ul> <li> <p>DescribeKey</p> </li> <li> <p>GetPublicKey</p> </li> <li> <p>Sign</p> </li> </ul> <p>The key policy must also include the Amazon Route 53 service in the principal for your account. Specify the following:</p> <ul> <li> <p> <code>\"Service\": \"dnssec-route53.amazonaws.com\"</code> </p> </li> </ul> </dd> </dl> <p>For more information about working with a customer managed key in KMS, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html\">Key Management Service concepts</a>.</p>

        :param key_management_service_arn: The key_management_service_arn of this CreateKeySigningKeyRequest.
        :type key_management_service_arn: str
        """
        if key_management_service_arn is None:
            raise ValueError("Invalid value for `key_management_service_arn`, must not be `None`")

        self._key_management_service_arn = key_management_service_arn

    @property
    def name(self):
        """Gets the name of this CreateKeySigningKeyRequest.

        A string used to identify a key-signing key (KSK). <code>Name</code> can include numbers, letters, and underscores (_). <code>Name</code> must be unique for each key-signing key in the same hosted zone.

        :return: The name of this CreateKeySigningKeyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateKeySigningKeyRequest.

        A string used to identify a key-signing key (KSK). <code>Name</code> can include numbers, letters, and underscores (_). <code>Name</code> must be unique for each key-signing key in the same hosted zone.

        :param name: The name of this CreateKeySigningKeyRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this CreateKeySigningKeyRequest.

        A string specifying the initial status of the key-signing key (KSK). You can set the value to <code>ACTIVE</code> or <code>INACTIVE</code>.

        :return: The status of this CreateKeySigningKeyRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateKeySigningKeyRequest.

        A string specifying the initial status of the key-signing key (KSK). You can set the value to <code>ACTIVE</code> or <code>INACTIVE</code>.

        :param status: The status of this CreateKeySigningKeyRequest.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        if status is not None and len(status) > 150:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `150`")
        if status is not None and len(status) < 5:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `5`")

        self._status = status
