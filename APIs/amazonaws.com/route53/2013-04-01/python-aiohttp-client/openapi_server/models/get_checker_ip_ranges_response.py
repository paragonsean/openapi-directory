# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCheckerIpRangesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checker_ip_ranges: List=None):
        """GetCheckerIpRangesResponse - a model defined in OpenAPI

        :param checker_ip_ranges: The checker_ip_ranges of this GetCheckerIpRangesResponse.
        """
        self.openapi_types = {
            'checker_ip_ranges': List
        }

        self.attribute_map = {
            'checker_ip_ranges': 'CheckerIpRanges'
        }

        self._checker_ip_ranges = checker_ip_ranges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCheckerIpRangesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCheckerIpRangesResponse of this GetCheckerIpRangesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checker_ip_ranges(self):
        """Gets the checker_ip_ranges of this GetCheckerIpRangesResponse.


        :return: The checker_ip_ranges of this GetCheckerIpRangesResponse.
        :rtype: List
        """
        return self._checker_ip_ranges

    @checker_ip_ranges.setter
    def checker_ip_ranges(self, checker_ip_ranges):
        """Sets the checker_ip_ranges of this GetCheckerIpRangesResponse.


        :param checker_ip_ranges: The checker_ip_ranges of this GetCheckerIpRangesResponse.
        :type checker_ip_ranges: List
        """
        if checker_ip_ranges is None:
            raise ValueError("Invalid value for `checker_ip_ranges`, must not be `None`")

        self._checker_ip_ranges = checker_ip_ranges
