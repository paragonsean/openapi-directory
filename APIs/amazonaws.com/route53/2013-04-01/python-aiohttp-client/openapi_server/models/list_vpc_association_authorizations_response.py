# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListVPCAssociationAuthorizationsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosted_zone_id: str=None, next_token: str=None, vpcs: List=None):
        """ListVPCAssociationAuthorizationsResponse - a model defined in OpenAPI

        :param hosted_zone_id: The hosted_zone_id of this ListVPCAssociationAuthorizationsResponse.
        :param next_token: The next_token of this ListVPCAssociationAuthorizationsResponse.
        :param vpcs: The vpcs of this ListVPCAssociationAuthorizationsResponse.
        """
        self.openapi_types = {
            'hosted_zone_id': str,
            'next_token': str,
            'vpcs': List
        }

        self.attribute_map = {
            'hosted_zone_id': 'HostedZoneId',
            'next_token': 'NextToken',
            'vpcs': 'VPCs'
        }

        self._hosted_zone_id = hosted_zone_id
        self._next_token = next_token
        self._vpcs = vpcs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListVPCAssociationAuthorizationsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListVPCAssociationAuthorizationsResponse of this ListVPCAssociationAuthorizationsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosted_zone_id(self):
        """Gets the hosted_zone_id of this ListVPCAssociationAuthorizationsResponse.


        :return: The hosted_zone_id of this ListVPCAssociationAuthorizationsResponse.
        :rtype: str
        """
        return self._hosted_zone_id

    @hosted_zone_id.setter
    def hosted_zone_id(self, hosted_zone_id):
        """Sets the hosted_zone_id of this ListVPCAssociationAuthorizationsResponse.


        :param hosted_zone_id: The hosted_zone_id of this ListVPCAssociationAuthorizationsResponse.
        :type hosted_zone_id: str
        """
        if hosted_zone_id is None:
            raise ValueError("Invalid value for `hosted_zone_id`, must not be `None`")

        self._hosted_zone_id = hosted_zone_id

    @property
    def next_token(self):
        """Gets the next_token of this ListVPCAssociationAuthorizationsResponse.


        :return: The next_token of this ListVPCAssociationAuthorizationsResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListVPCAssociationAuthorizationsResponse.


        :param next_token: The next_token of this ListVPCAssociationAuthorizationsResponse.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def vpcs(self):
        """Gets the vpcs of this ListVPCAssociationAuthorizationsResponse.


        :return: The vpcs of this ListVPCAssociationAuthorizationsResponse.
        :rtype: List
        """
        return self._vpcs

    @vpcs.setter
    def vpcs(self, vpcs):
        """Sets the vpcs of this ListVPCAssociationAuthorizationsResponse.


        :param vpcs: The vpcs of this ListVPCAssociationAuthorizationsResponse.
        :type vpcs: List
        """
        if vpcs is None:
            raise ValueError("Invalid value for `vpcs`, must not be `None`")

        self._vpcs = vpcs
