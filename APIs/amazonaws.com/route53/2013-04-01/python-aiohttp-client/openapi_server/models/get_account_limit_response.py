# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_account_limit_response_limit import GetAccountLimitResponseLimit
from openapi_server import util


class GetAccountLimitResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit: GetAccountLimitResponseLimit=None, count: int=None):
        """GetAccountLimitResponse - a model defined in OpenAPI

        :param limit: The limit of this GetAccountLimitResponse.
        :param count: The count of this GetAccountLimitResponse.
        """
        self.openapi_types = {
            'limit': GetAccountLimitResponseLimit,
            'count': int
        }

        self.attribute_map = {
            'limit': 'Limit',
            'count': 'Count'
        }

        self._limit = limit
        self._count = count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAccountLimitResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetAccountLimitResponse of this GetAccountLimitResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this GetAccountLimitResponse.


        :return: The limit of this GetAccountLimitResponse.
        :rtype: GetAccountLimitResponseLimit
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetAccountLimitResponse.


        :param limit: The limit of this GetAccountLimitResponse.
        :type limit: GetAccountLimitResponseLimit
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")

        self._limit = limit

    @property
    def count(self):
        """Gets the count of this GetAccountLimitResponse.


        :return: The count of this GetAccountLimitResponse.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GetAccountLimitResponse.


        :param count: The count of this GetAccountLimitResponse.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count
