# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hosted_zone_summary_owner import HostedZoneSummaryOwner
from openapi_server import util


class HostedZoneSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosted_zone_id: str=None, name: str=None, owner: HostedZoneSummaryOwner=None):
        """HostedZoneSummary - a model defined in OpenAPI

        :param hosted_zone_id: The hosted_zone_id of this HostedZoneSummary.
        :param name: The name of this HostedZoneSummary.
        :param owner: The owner of this HostedZoneSummary.
        """
        self.openapi_types = {
            'hosted_zone_id': str,
            'name': str,
            'owner': HostedZoneSummaryOwner
        }

        self.attribute_map = {
            'hosted_zone_id': 'HostedZoneId',
            'name': 'Name',
            'owner': 'Owner'
        }

        self._hosted_zone_id = hosted_zone_id
        self._name = name
        self._owner = owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostedZoneSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostedZoneSummary of this HostedZoneSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosted_zone_id(self):
        """Gets the hosted_zone_id of this HostedZoneSummary.


        :return: The hosted_zone_id of this HostedZoneSummary.
        :rtype: str
        """
        return self._hosted_zone_id

    @hosted_zone_id.setter
    def hosted_zone_id(self, hosted_zone_id):
        """Sets the hosted_zone_id of this HostedZoneSummary.


        :param hosted_zone_id: The hosted_zone_id of this HostedZoneSummary.
        :type hosted_zone_id: str
        """
        if hosted_zone_id is None:
            raise ValueError("Invalid value for `hosted_zone_id`, must not be `None`")

        self._hosted_zone_id = hosted_zone_id

    @property
    def name(self):
        """Gets the name of this HostedZoneSummary.


        :return: The name of this HostedZoneSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostedZoneSummary.


        :param name: The name of this HostedZoneSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this HostedZoneSummary.


        :return: The owner of this HostedZoneSummary.
        :rtype: HostedZoneSummaryOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this HostedZoneSummary.


        :param owner: The owner of this HostedZoneSummary.
        :type owner: HostedZoneSummaryOwner
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner
