# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rr_type import RRType
from openapi_server import util


class TrafficPolicySummariesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, type: RRType=None, latest_version: int=None, traffic_policy_count: int=None):
        """TrafficPolicySummariesInner - a model defined in OpenAPI

        :param id: The id of this TrafficPolicySummariesInner.
        :param name: The name of this TrafficPolicySummariesInner.
        :param type: The type of this TrafficPolicySummariesInner.
        :param latest_version: The latest_version of this TrafficPolicySummariesInner.
        :param traffic_policy_count: The traffic_policy_count of this TrafficPolicySummariesInner.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'type': RRType,
            'latest_version': int,
            'traffic_policy_count': int
        }

        self.attribute_map = {
            'id': 'Id',
            'name': 'Name',
            'type': 'Type',
            'latest_version': 'LatestVersion',
            'traffic_policy_count': 'TrafficPolicyCount'
        }

        self._id = id
        self._name = name
        self._type = type
        self._latest_version = latest_version
        self._traffic_policy_count = traffic_policy_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrafficPolicySummariesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrafficPolicySummaries_inner of this TrafficPolicySummariesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TrafficPolicySummariesInner.


        :return: The id of this TrafficPolicySummariesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrafficPolicySummariesInner.


        :param id: The id of this TrafficPolicySummariesInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this TrafficPolicySummariesInner.


        :return: The name of this TrafficPolicySummariesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrafficPolicySummariesInner.


        :param name: The name of this TrafficPolicySummariesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this TrafficPolicySummariesInner.


        :return: The type of this TrafficPolicySummariesInner.
        :rtype: RRType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TrafficPolicySummariesInner.


        :param type: The type of this TrafficPolicySummariesInner.
        :type type: RRType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def latest_version(self):
        """Gets the latest_version of this TrafficPolicySummariesInner.


        :return: The latest_version of this TrafficPolicySummariesInner.
        :rtype: int
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this TrafficPolicySummariesInner.


        :param latest_version: The latest_version of this TrafficPolicySummariesInner.
        :type latest_version: int
        """
        if latest_version is None:
            raise ValueError("Invalid value for `latest_version`, must not be `None`")

        self._latest_version = latest_version

    @property
    def traffic_policy_count(self):
        """Gets the traffic_policy_count of this TrafficPolicySummariesInner.


        :return: The traffic_policy_count of this TrafficPolicySummariesInner.
        :rtype: int
        """
        return self._traffic_policy_count

    @traffic_policy_count.setter
    def traffic_policy_count(self, traffic_policy_count):
        """Sets the traffic_policy_count of this TrafficPolicySummariesInner.


        :param traffic_policy_count: The traffic_policy_count of this TrafficPolicySummariesInner.
        :type traffic_policy_count: int
        """
        if traffic_policy_count is None:
            raise ValueError("Invalid value for `traffic_policy_count`, must not be `None`")

        self._traffic_policy_count = traffic_policy_count
