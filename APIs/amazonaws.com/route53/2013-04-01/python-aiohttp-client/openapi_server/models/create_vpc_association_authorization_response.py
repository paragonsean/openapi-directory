# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_vpc_association_authorization_response_vpc import CreateVPCAssociationAuthorizationResponseVPC
from openapi_server import util


class CreateVPCAssociationAuthorizationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosted_zone_id: str=None, vpc: CreateVPCAssociationAuthorizationResponseVPC=None):
        """CreateVPCAssociationAuthorizationResponse - a model defined in OpenAPI

        :param hosted_zone_id: The hosted_zone_id of this CreateVPCAssociationAuthorizationResponse.
        :param vpc: The vpc of this CreateVPCAssociationAuthorizationResponse.
        """
        self.openapi_types = {
            'hosted_zone_id': str,
            'vpc': CreateVPCAssociationAuthorizationResponseVPC
        }

        self.attribute_map = {
            'hosted_zone_id': 'HostedZoneId',
            'vpc': 'VPC'
        }

        self._hosted_zone_id = hosted_zone_id
        self._vpc = vpc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVPCAssociationAuthorizationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVPCAssociationAuthorizationResponse of this CreateVPCAssociationAuthorizationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosted_zone_id(self):
        """Gets the hosted_zone_id of this CreateVPCAssociationAuthorizationResponse.


        :return: The hosted_zone_id of this CreateVPCAssociationAuthorizationResponse.
        :rtype: str
        """
        return self._hosted_zone_id

    @hosted_zone_id.setter
    def hosted_zone_id(self, hosted_zone_id):
        """Sets the hosted_zone_id of this CreateVPCAssociationAuthorizationResponse.


        :param hosted_zone_id: The hosted_zone_id of this CreateVPCAssociationAuthorizationResponse.
        :type hosted_zone_id: str
        """
        if hosted_zone_id is None:
            raise ValueError("Invalid value for `hosted_zone_id`, must not be `None`")

        self._hosted_zone_id = hosted_zone_id

    @property
    def vpc(self):
        """Gets the vpc of this CreateVPCAssociationAuthorizationResponse.


        :return: The vpc of this CreateVPCAssociationAuthorizationResponse.
        :rtype: CreateVPCAssociationAuthorizationResponseVPC
        """
        return self._vpc

    @vpc.setter
    def vpc(self, vpc):
        """Sets the vpc of this CreateVPCAssociationAuthorizationResponse.


        :param vpc: The vpc of this CreateVPCAssociationAuthorizationResponse.
        :type vpc: CreateVPCAssociationAuthorizationResponseVPC
        """
        if vpc is None:
            raise ValueError("Invalid value for `vpc`, must not be `None`")

        self._vpc = vpc
