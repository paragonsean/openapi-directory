# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_status import ChangeStatus
from openapi_server import util


class GetChangeResponseChangeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, status: ChangeStatus=None, submitted_at: datetime=None, comment: str=None):
        """GetChangeResponseChangeInfo - a model defined in OpenAPI

        :param id: The id of this GetChangeResponseChangeInfo.
        :param status: The status of this GetChangeResponseChangeInfo.
        :param submitted_at: The submitted_at of this GetChangeResponseChangeInfo.
        :param comment: The comment of this GetChangeResponseChangeInfo.
        """
        self.openapi_types = {
            'id': str,
            'status': ChangeStatus,
            'submitted_at': datetime,
            'comment': str
        }

        self.attribute_map = {
            'id': 'Id',
            'status': 'Status',
            'submitted_at': 'SubmittedAt',
            'comment': 'Comment'
        }

        self._id = id
        self._status = status
        self._submitted_at = submitted_at
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetChangeResponseChangeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetChangeResponse_ChangeInfo of this GetChangeResponseChangeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GetChangeResponseChangeInfo.


        :return: The id of this GetChangeResponseChangeInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetChangeResponseChangeInfo.


        :param id: The id of this GetChangeResponseChangeInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this GetChangeResponseChangeInfo.


        :return: The status of this GetChangeResponseChangeInfo.
        :rtype: ChangeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetChangeResponseChangeInfo.


        :param status: The status of this GetChangeResponseChangeInfo.
        :type status: ChangeStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def submitted_at(self):
        """Gets the submitted_at of this GetChangeResponseChangeInfo.


        :return: The submitted_at of this GetChangeResponseChangeInfo.
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this GetChangeResponseChangeInfo.


        :param submitted_at: The submitted_at of this GetChangeResponseChangeInfo.
        :type submitted_at: datetime
        """
        if submitted_at is None:
            raise ValueError("Invalid value for `submitted_at`, must not be `None`")

        self._submitted_at = submitted_at

    @property
    def comment(self):
        """Gets the comment of this GetChangeResponseChangeInfo.


        :return: The comment of this GetChangeResponseChangeInfo.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this GetChangeResponseChangeInfo.


        :param comment: The comment of this GetChangeResponseChangeInfo.
        :type comment: str
        """

        self._comment = comment
