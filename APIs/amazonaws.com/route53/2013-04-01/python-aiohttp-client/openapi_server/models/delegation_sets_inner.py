# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DelegationSetsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, caller_reference: str=None, name_servers: List=None):
        """DelegationSetsInner - a model defined in OpenAPI

        :param id: The id of this DelegationSetsInner.
        :param caller_reference: The caller_reference of this DelegationSetsInner.
        :param name_servers: The name_servers of this DelegationSetsInner.
        """
        self.openapi_types = {
            'id': str,
            'caller_reference': str,
            'name_servers': List
        }

        self.attribute_map = {
            'id': 'Id',
            'caller_reference': 'CallerReference',
            'name_servers': 'NameServers'
        }

        self._id = id
        self._caller_reference = caller_reference
        self._name_servers = name_servers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DelegationSetsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DelegationSets_inner of this DelegationSetsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DelegationSetsInner.


        :return: The id of this DelegationSetsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DelegationSetsInner.


        :param id: The id of this DelegationSetsInner.
        :type id: str
        """

        self._id = id

    @property
    def caller_reference(self):
        """Gets the caller_reference of this DelegationSetsInner.


        :return: The caller_reference of this DelegationSetsInner.
        :rtype: str
        """
        return self._caller_reference

    @caller_reference.setter
    def caller_reference(self, caller_reference):
        """Sets the caller_reference of this DelegationSetsInner.


        :param caller_reference: The caller_reference of this DelegationSetsInner.
        :type caller_reference: str
        """

        self._caller_reference = caller_reference

    @property
    def name_servers(self):
        """Gets the name_servers of this DelegationSetsInner.


        :return: The name_servers of this DelegationSetsInner.
        :rtype: List
        """
        return self._name_servers

    @name_servers.setter
    def name_servers(self, name_servers):
        """Sets the name_servers of this DelegationSetsInner.


        :param name_servers: The name_servers of this DelegationSetsInner.
        :type name_servers: List
        """
        if name_servers is None:
            raise ValueError("Invalid value for `name_servers`, must not be `None`")

        self._name_servers = name_servers
