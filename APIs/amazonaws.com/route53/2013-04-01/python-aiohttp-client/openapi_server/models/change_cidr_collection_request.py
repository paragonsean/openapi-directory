# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cidr_collection_change import CidrCollectionChange
from openapi_server import util


class ChangeCidrCollectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_version: int=None, changes: List[CidrCollectionChange]=None):
        """ChangeCidrCollectionRequest - a model defined in OpenAPI

        :param collection_version: The collection_version of this ChangeCidrCollectionRequest.
        :param changes: The changes of this ChangeCidrCollectionRequest.
        """
        self.openapi_types = {
            'collection_version': int,
            'changes': List[CidrCollectionChange]
        }

        self.attribute_map = {
            'collection_version': 'CollectionVersion',
            'changes': 'Changes'
        }

        self._collection_version = collection_version
        self._changes = changes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeCidrCollectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangeCidrCollection_request of this ChangeCidrCollectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_version(self):
        """Gets the collection_version of this ChangeCidrCollectionRequest.

        <p>A sequential counter that Amazon Route 53 sets to 1 when you create a collection and increments it by 1 each time you update the collection.</p> <p>We recommend that you use <code>ListCidrCollection</code> to get the current value of <code>CollectionVersion</code> for the collection that you want to update, and then include that value with the change request. This prevents Route 53 from overwriting an intervening update: </p> <ul> <li> <p>If the value in the request matches the value of <code>CollectionVersion</code> in the collection, Route 53 updates the collection.</p> </li> <li> <p>If the value of <code>CollectionVersion</code> in the collection is greater than the value in the request, the collection was changed after you got the version number. Route 53 does not update the collection, and it returns a <code>CidrCollectionVersionMismatch</code> error. </p> </li> </ul>

        :return: The collection_version of this ChangeCidrCollectionRequest.
        :rtype: int
        """
        return self._collection_version

    @collection_version.setter
    def collection_version(self, collection_version):
        """Sets the collection_version of this ChangeCidrCollectionRequest.

        <p>A sequential counter that Amazon Route 53 sets to 1 when you create a collection and increments it by 1 each time you update the collection.</p> <p>We recommend that you use <code>ListCidrCollection</code> to get the current value of <code>CollectionVersion</code> for the collection that you want to update, and then include that value with the change request. This prevents Route 53 from overwriting an intervening update: </p> <ul> <li> <p>If the value in the request matches the value of <code>CollectionVersion</code> in the collection, Route 53 updates the collection.</p> </li> <li> <p>If the value of <code>CollectionVersion</code> in the collection is greater than the value in the request, the collection was changed after you got the version number. Route 53 does not update the collection, and it returns a <code>CidrCollectionVersionMismatch</code> error. </p> </li> </ul>

        :param collection_version: The collection_version of this ChangeCidrCollectionRequest.
        :type collection_version: int
        """
        if collection_version is not None and collection_version < 1:
            raise ValueError("Invalid value for `collection_version`, must be a value greater than or equal to `1`")

        self._collection_version = collection_version

    @property
    def changes(self):
        """Gets the changes of this ChangeCidrCollectionRequest.

         Information about changes to a CIDR collection.

        :return: The changes of this ChangeCidrCollectionRequest.
        :rtype: List[CidrCollectionChange]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this ChangeCidrCollectionRequest.

         Information about changes to a CIDR collection.

        :param changes: The changes of this ChangeCidrCollectionRequest.
        :type changes: List[CidrCollectionChange]
        """
        if changes is None:
            raise ValueError("Invalid value for `changes`, must not be `None`")
        if changes is not None and len(changes) > 1000:
            raise ValueError("Invalid value for `changes`, number of items must be less than or equal to `1000`")
        if changes is not None and len(changes) < 1:
            raise ValueError("Invalid value for `changes`, number of items must be greater than or equal to `1`")

        self._changes = changes
