# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeySigningKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, kms_arn: str=None, flag: int=None, signing_algorithm_mnemonic: str=None, signing_algorithm_type: int=None, digest_algorithm_mnemonic: str=None, digest_algorithm_type: int=None, key_tag: int=None, digest_value: str=None, public_key: str=None, ds_record: str=None, dnskey_record: str=None, status: str=None, status_message: str=None, created_date: datetime=None, last_modified_date: datetime=None):
        """KeySigningKey - a model defined in OpenAPI

        :param name: The name of this KeySigningKey.
        :param kms_arn: The kms_arn of this KeySigningKey.
        :param flag: The flag of this KeySigningKey.
        :param signing_algorithm_mnemonic: The signing_algorithm_mnemonic of this KeySigningKey.
        :param signing_algorithm_type: The signing_algorithm_type of this KeySigningKey.
        :param digest_algorithm_mnemonic: The digest_algorithm_mnemonic of this KeySigningKey.
        :param digest_algorithm_type: The digest_algorithm_type of this KeySigningKey.
        :param key_tag: The key_tag of this KeySigningKey.
        :param digest_value: The digest_value of this KeySigningKey.
        :param public_key: The public_key of this KeySigningKey.
        :param ds_record: The ds_record of this KeySigningKey.
        :param dnskey_record: The dnskey_record of this KeySigningKey.
        :param status: The status of this KeySigningKey.
        :param status_message: The status_message of this KeySigningKey.
        :param created_date: The created_date of this KeySigningKey.
        :param last_modified_date: The last_modified_date of this KeySigningKey.
        """
        self.openapi_types = {
            'name': str,
            'kms_arn': str,
            'flag': int,
            'signing_algorithm_mnemonic': str,
            'signing_algorithm_type': int,
            'digest_algorithm_mnemonic': str,
            'digest_algorithm_type': int,
            'key_tag': int,
            'digest_value': str,
            'public_key': str,
            'ds_record': str,
            'dnskey_record': str,
            'status': str,
            'status_message': str,
            'created_date': datetime,
            'last_modified_date': datetime
        }

        self.attribute_map = {
            'name': 'Name',
            'kms_arn': 'KmsArn',
            'flag': 'Flag',
            'signing_algorithm_mnemonic': 'SigningAlgorithmMnemonic',
            'signing_algorithm_type': 'SigningAlgorithmType',
            'digest_algorithm_mnemonic': 'DigestAlgorithmMnemonic',
            'digest_algorithm_type': 'DigestAlgorithmType',
            'key_tag': 'KeyTag',
            'digest_value': 'DigestValue',
            'public_key': 'PublicKey',
            'ds_record': 'DSRecord',
            'dnskey_record': 'DNSKEYRecord',
            'status': 'Status',
            'status_message': 'StatusMessage',
            'created_date': 'CreatedDate',
            'last_modified_date': 'LastModifiedDate'
        }

        self._name = name
        self._kms_arn = kms_arn
        self._flag = flag
        self._signing_algorithm_mnemonic = signing_algorithm_mnemonic
        self._signing_algorithm_type = signing_algorithm_type
        self._digest_algorithm_mnemonic = digest_algorithm_mnemonic
        self._digest_algorithm_type = digest_algorithm_type
        self._key_tag = key_tag
        self._digest_value = digest_value
        self._public_key = public_key
        self._ds_record = ds_record
        self._dnskey_record = dnskey_record
        self._status = status
        self._status_message = status_message
        self._created_date = created_date
        self._last_modified_date = last_modified_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeySigningKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeySigningKey of this KeySigningKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this KeySigningKey.


        :return: The name of this KeySigningKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KeySigningKey.


        :param name: The name of this KeySigningKey.
        :type name: str
        """

        self._name = name

    @property
    def kms_arn(self):
        """Gets the kms_arn of this KeySigningKey.


        :return: The kms_arn of this KeySigningKey.
        :rtype: str
        """
        return self._kms_arn

    @kms_arn.setter
    def kms_arn(self, kms_arn):
        """Sets the kms_arn of this KeySigningKey.


        :param kms_arn: The kms_arn of this KeySigningKey.
        :type kms_arn: str
        """

        self._kms_arn = kms_arn

    @property
    def flag(self):
        """Gets the flag of this KeySigningKey.


        :return: The flag of this KeySigningKey.
        :rtype: int
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this KeySigningKey.


        :param flag: The flag of this KeySigningKey.
        :type flag: int
        """

        self._flag = flag

    @property
    def signing_algorithm_mnemonic(self):
        """Gets the signing_algorithm_mnemonic of this KeySigningKey.


        :return: The signing_algorithm_mnemonic of this KeySigningKey.
        :rtype: str
        """
        return self._signing_algorithm_mnemonic

    @signing_algorithm_mnemonic.setter
    def signing_algorithm_mnemonic(self, signing_algorithm_mnemonic):
        """Sets the signing_algorithm_mnemonic of this KeySigningKey.


        :param signing_algorithm_mnemonic: The signing_algorithm_mnemonic of this KeySigningKey.
        :type signing_algorithm_mnemonic: str
        """

        self._signing_algorithm_mnemonic = signing_algorithm_mnemonic

    @property
    def signing_algorithm_type(self):
        """Gets the signing_algorithm_type of this KeySigningKey.


        :return: The signing_algorithm_type of this KeySigningKey.
        :rtype: int
        """
        return self._signing_algorithm_type

    @signing_algorithm_type.setter
    def signing_algorithm_type(self, signing_algorithm_type):
        """Sets the signing_algorithm_type of this KeySigningKey.


        :param signing_algorithm_type: The signing_algorithm_type of this KeySigningKey.
        :type signing_algorithm_type: int
        """

        self._signing_algorithm_type = signing_algorithm_type

    @property
    def digest_algorithm_mnemonic(self):
        """Gets the digest_algorithm_mnemonic of this KeySigningKey.


        :return: The digest_algorithm_mnemonic of this KeySigningKey.
        :rtype: str
        """
        return self._digest_algorithm_mnemonic

    @digest_algorithm_mnemonic.setter
    def digest_algorithm_mnemonic(self, digest_algorithm_mnemonic):
        """Sets the digest_algorithm_mnemonic of this KeySigningKey.


        :param digest_algorithm_mnemonic: The digest_algorithm_mnemonic of this KeySigningKey.
        :type digest_algorithm_mnemonic: str
        """

        self._digest_algorithm_mnemonic = digest_algorithm_mnemonic

    @property
    def digest_algorithm_type(self):
        """Gets the digest_algorithm_type of this KeySigningKey.


        :return: The digest_algorithm_type of this KeySigningKey.
        :rtype: int
        """
        return self._digest_algorithm_type

    @digest_algorithm_type.setter
    def digest_algorithm_type(self, digest_algorithm_type):
        """Sets the digest_algorithm_type of this KeySigningKey.


        :param digest_algorithm_type: The digest_algorithm_type of this KeySigningKey.
        :type digest_algorithm_type: int
        """

        self._digest_algorithm_type = digest_algorithm_type

    @property
    def key_tag(self):
        """Gets the key_tag of this KeySigningKey.


        :return: The key_tag of this KeySigningKey.
        :rtype: int
        """
        return self._key_tag

    @key_tag.setter
    def key_tag(self, key_tag):
        """Sets the key_tag of this KeySigningKey.


        :param key_tag: The key_tag of this KeySigningKey.
        :type key_tag: int
        """

        self._key_tag = key_tag

    @property
    def digest_value(self):
        """Gets the digest_value of this KeySigningKey.


        :return: The digest_value of this KeySigningKey.
        :rtype: str
        """
        return self._digest_value

    @digest_value.setter
    def digest_value(self, digest_value):
        """Sets the digest_value of this KeySigningKey.


        :param digest_value: The digest_value of this KeySigningKey.
        :type digest_value: str
        """

        self._digest_value = digest_value

    @property
    def public_key(self):
        """Gets the public_key of this KeySigningKey.


        :return: The public_key of this KeySigningKey.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this KeySigningKey.


        :param public_key: The public_key of this KeySigningKey.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def ds_record(self):
        """Gets the ds_record of this KeySigningKey.


        :return: The ds_record of this KeySigningKey.
        :rtype: str
        """
        return self._ds_record

    @ds_record.setter
    def ds_record(self, ds_record):
        """Sets the ds_record of this KeySigningKey.


        :param ds_record: The ds_record of this KeySigningKey.
        :type ds_record: str
        """

        self._ds_record = ds_record

    @property
    def dnskey_record(self):
        """Gets the dnskey_record of this KeySigningKey.


        :return: The dnskey_record of this KeySigningKey.
        :rtype: str
        """
        return self._dnskey_record

    @dnskey_record.setter
    def dnskey_record(self, dnskey_record):
        """Sets the dnskey_record of this KeySigningKey.


        :param dnskey_record: The dnskey_record of this KeySigningKey.
        :type dnskey_record: str
        """

        self._dnskey_record = dnskey_record

    @property
    def status(self):
        """Gets the status of this KeySigningKey.


        :return: The status of this KeySigningKey.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this KeySigningKey.


        :param status: The status of this KeySigningKey.
        :type status: str
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this KeySigningKey.


        :return: The status_message of this KeySigningKey.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this KeySigningKey.


        :param status_message: The status_message of this KeySigningKey.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def created_date(self):
        """Gets the created_date of this KeySigningKey.


        :return: The created_date of this KeySigningKey.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this KeySigningKey.


        :param created_date: The created_date of this KeySigningKey.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this KeySigningKey.


        :return: The last_modified_date of this KeySigningKey.
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this KeySigningKey.


        :param last_modified_date: The last_modified_date of this KeySigningKey.
        :type last_modified_date: datetime
        """

        self._last_modified_date = last_modified_date
