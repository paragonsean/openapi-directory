# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comparison_operator import ComparisonOperator
from openapi_server.models.statistic import Statistic
from openapi_server import util


class HealthCheckCloudWatchAlarmConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluation_periods: int=None, threshold: float=None, comparison_operator: ComparisonOperator=None, period: int=None, metric_name: str=None, namespace: str=None, statistic: Statistic=None, dimensions: List=None):
        """HealthCheckCloudWatchAlarmConfiguration - a model defined in OpenAPI

        :param evaluation_periods: The evaluation_periods of this HealthCheckCloudWatchAlarmConfiguration.
        :param threshold: The threshold of this HealthCheckCloudWatchAlarmConfiguration.
        :param comparison_operator: The comparison_operator of this HealthCheckCloudWatchAlarmConfiguration.
        :param period: The period of this HealthCheckCloudWatchAlarmConfiguration.
        :param metric_name: The metric_name of this HealthCheckCloudWatchAlarmConfiguration.
        :param namespace: The namespace of this HealthCheckCloudWatchAlarmConfiguration.
        :param statistic: The statistic of this HealthCheckCloudWatchAlarmConfiguration.
        :param dimensions: The dimensions of this HealthCheckCloudWatchAlarmConfiguration.
        """
        self.openapi_types = {
            'evaluation_periods': int,
            'threshold': float,
            'comparison_operator': ComparisonOperator,
            'period': int,
            'metric_name': str,
            'namespace': str,
            'statistic': Statistic,
            'dimensions': List
        }

        self.attribute_map = {
            'evaluation_periods': 'EvaluationPeriods',
            'threshold': 'Threshold',
            'comparison_operator': 'ComparisonOperator',
            'period': 'Period',
            'metric_name': 'MetricName',
            'namespace': 'Namespace',
            'statistic': 'Statistic',
            'dimensions': 'Dimensions'
        }

        self._evaluation_periods = evaluation_periods
        self._threshold = threshold
        self._comparison_operator = comparison_operator
        self._period = period
        self._metric_name = metric_name
        self._namespace = namespace
        self._statistic = statistic
        self._dimensions = dimensions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthCheckCloudWatchAlarmConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthCheck_CloudWatchAlarmConfiguration of this HealthCheckCloudWatchAlarmConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluation_periods(self):
        """Gets the evaluation_periods of this HealthCheckCloudWatchAlarmConfiguration.


        :return: The evaluation_periods of this HealthCheckCloudWatchAlarmConfiguration.
        :rtype: int
        """
        return self._evaluation_periods

    @evaluation_periods.setter
    def evaluation_periods(self, evaluation_periods):
        """Sets the evaluation_periods of this HealthCheckCloudWatchAlarmConfiguration.


        :param evaluation_periods: The evaluation_periods of this HealthCheckCloudWatchAlarmConfiguration.
        :type evaluation_periods: int
        """
        if evaluation_periods is None:
            raise ValueError("Invalid value for `evaluation_periods`, must not be `None`")

        self._evaluation_periods = evaluation_periods

    @property
    def threshold(self):
        """Gets the threshold of this HealthCheckCloudWatchAlarmConfiguration.


        :return: The threshold of this HealthCheckCloudWatchAlarmConfiguration.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this HealthCheckCloudWatchAlarmConfiguration.


        :param threshold: The threshold of this HealthCheckCloudWatchAlarmConfiguration.
        :type threshold: float
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")

        self._threshold = threshold

    @property
    def comparison_operator(self):
        """Gets the comparison_operator of this HealthCheckCloudWatchAlarmConfiguration.


        :return: The comparison_operator of this HealthCheckCloudWatchAlarmConfiguration.
        :rtype: ComparisonOperator
        """
        return self._comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator):
        """Sets the comparison_operator of this HealthCheckCloudWatchAlarmConfiguration.


        :param comparison_operator: The comparison_operator of this HealthCheckCloudWatchAlarmConfiguration.
        :type comparison_operator: ComparisonOperator
        """
        if comparison_operator is None:
            raise ValueError("Invalid value for `comparison_operator`, must not be `None`")

        self._comparison_operator = comparison_operator

    @property
    def period(self):
        """Gets the period of this HealthCheckCloudWatchAlarmConfiguration.


        :return: The period of this HealthCheckCloudWatchAlarmConfiguration.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this HealthCheckCloudWatchAlarmConfiguration.


        :param period: The period of this HealthCheckCloudWatchAlarmConfiguration.
        :type period: int
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")

        self._period = period

    @property
    def metric_name(self):
        """Gets the metric_name of this HealthCheckCloudWatchAlarmConfiguration.


        :return: The metric_name of this HealthCheckCloudWatchAlarmConfiguration.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this HealthCheckCloudWatchAlarmConfiguration.


        :param metric_name: The metric_name of this HealthCheckCloudWatchAlarmConfiguration.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def namespace(self):
        """Gets the namespace of this HealthCheckCloudWatchAlarmConfiguration.


        :return: The namespace of this HealthCheckCloudWatchAlarmConfiguration.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this HealthCheckCloudWatchAlarmConfiguration.


        :param namespace: The namespace of this HealthCheckCloudWatchAlarmConfiguration.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def statistic(self):
        """Gets the statistic of this HealthCheckCloudWatchAlarmConfiguration.


        :return: The statistic of this HealthCheckCloudWatchAlarmConfiguration.
        :rtype: Statistic
        """
        return self._statistic

    @statistic.setter
    def statistic(self, statistic):
        """Sets the statistic of this HealthCheckCloudWatchAlarmConfiguration.


        :param statistic: The statistic of this HealthCheckCloudWatchAlarmConfiguration.
        :type statistic: Statistic
        """
        if statistic is None:
            raise ValueError("Invalid value for `statistic`, must not be `None`")

        self._statistic = statistic

    @property
    def dimensions(self):
        """Gets the dimensions of this HealthCheckCloudWatchAlarmConfiguration.


        :return: The dimensions of this HealthCheckCloudWatchAlarmConfiguration.
        :rtype: List
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this HealthCheckCloudWatchAlarmConfiguration.


        :param dimensions: The dimensions of this HealthCheckCloudWatchAlarmConfiguration.
        :type dimensions: List
        """

        self._dimensions = dimensions
