# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateCidrCollectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, caller_reference: str=None):
        """CreateCidrCollectionRequest - a model defined in OpenAPI

        :param name: The name of this CreateCidrCollectionRequest.
        :param caller_reference: The caller_reference of this CreateCidrCollectionRequest.
        """
        self.openapi_types = {
            'name': str,
            'caller_reference': str
        }

        self.attribute_map = {
            'name': 'Name',
            'caller_reference': 'CallerReference'
        }

        self._name = name
        self._caller_reference = caller_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCidrCollectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCidrCollection_request of this CreateCidrCollectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateCidrCollectionRequest.

        A unique identifier for the account that can be used to reference the collection from other API calls.

        :return: The name of this CreateCidrCollectionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCidrCollectionRequest.

        A unique identifier for the account that can be used to reference the collection from other API calls.

        :param name: The name of this CreateCidrCollectionRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[0-9A-Za-z_\-]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[0-9A-Za-z_\-]+/`")

        self._name = name

    @property
    def caller_reference(self):
        """Gets the caller_reference of this CreateCidrCollectionRequest.

        A client-specific token that allows requests to be securely retried so that the intended outcome will only occur once, retries receive a similar response, and there are no additional edge cases to handle.

        :return: The caller_reference of this CreateCidrCollectionRequest.
        :rtype: str
        """
        return self._caller_reference

    @caller_reference.setter
    def caller_reference(self, caller_reference):
        """Sets the caller_reference of this CreateCidrCollectionRequest.

        A client-specific token that allows requests to be securely retried so that the intended outcome will only occur once, retries receive a similar response, and there are no additional edge cases to handle.

        :param caller_reference: The caller_reference of this CreateCidrCollectionRequest.
        :type caller_reference: str
        """
        if caller_reference is None:
            raise ValueError("Invalid value for `caller_reference`, must not be `None`")
        if caller_reference is not None and len(caller_reference) > 64:
            raise ValueError("Invalid value for `caller_reference`, length must be less than or equal to `64`")
        if caller_reference is not None and len(caller_reference) < 1:
            raise ValueError("Invalid value for `caller_reference`, length must be greater than or equal to `1`")
        if caller_reference is not None and not re.search(r'\p{ASCII}+', caller_reference):
            raise ValueError("Invalid value for `caller_reference`, must be a follow pattern or equal to `/\p{ASCII}+/`")

        self._caller_reference = caller_reference
