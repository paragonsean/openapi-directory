# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateTrafficPolicyInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosted_zone_id: str=None, name: str=None, ttl: int=None, traffic_policy_id: str=None, traffic_policy_version: int=None):
        """CreateTrafficPolicyInstanceRequest - a model defined in OpenAPI

        :param hosted_zone_id: The hosted_zone_id of this CreateTrafficPolicyInstanceRequest.
        :param name: The name of this CreateTrafficPolicyInstanceRequest.
        :param ttl: The ttl of this CreateTrafficPolicyInstanceRequest.
        :param traffic_policy_id: The traffic_policy_id of this CreateTrafficPolicyInstanceRequest.
        :param traffic_policy_version: The traffic_policy_version of this CreateTrafficPolicyInstanceRequest.
        """
        self.openapi_types = {
            'hosted_zone_id': str,
            'name': str,
            'ttl': int,
            'traffic_policy_id': str,
            'traffic_policy_version': int
        }

        self.attribute_map = {
            'hosted_zone_id': 'HostedZoneId',
            'name': 'Name',
            'ttl': 'TTL',
            'traffic_policy_id': 'TrafficPolicyId',
            'traffic_policy_version': 'TrafficPolicyVersion'
        }

        self._hosted_zone_id = hosted_zone_id
        self._name = name
        self._ttl = ttl
        self._traffic_policy_id = traffic_policy_id
        self._traffic_policy_version = traffic_policy_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTrafficPolicyInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTrafficPolicyInstance_request of this CreateTrafficPolicyInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosted_zone_id(self):
        """Gets the hosted_zone_id of this CreateTrafficPolicyInstanceRequest.

        The ID of the hosted zone that you want Amazon Route 53 to create resource record sets in by using the configuration in a traffic policy.

        :return: The hosted_zone_id of this CreateTrafficPolicyInstanceRequest.
        :rtype: str
        """
        return self._hosted_zone_id

    @hosted_zone_id.setter
    def hosted_zone_id(self, hosted_zone_id):
        """Sets the hosted_zone_id of this CreateTrafficPolicyInstanceRequest.

        The ID of the hosted zone that you want Amazon Route 53 to create resource record sets in by using the configuration in a traffic policy.

        :param hosted_zone_id: The hosted_zone_id of this CreateTrafficPolicyInstanceRequest.
        :type hosted_zone_id: str
        """
        if hosted_zone_id is None:
            raise ValueError("Invalid value for `hosted_zone_id`, must not be `None`")
        if hosted_zone_id is not None and len(hosted_zone_id) > 32:
            raise ValueError("Invalid value for `hosted_zone_id`, length must be less than or equal to `32`")

        self._hosted_zone_id = hosted_zone_id

    @property
    def name(self):
        """Gets the name of this CreateTrafficPolicyInstanceRequest.

        The domain name (such as example.com) or subdomain name (such as www.example.com) for which Amazon Route 53 responds to DNS queries by using the resource record sets that Route 53 creates for this traffic policy instance.

        :return: The name of this CreateTrafficPolicyInstanceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTrafficPolicyInstanceRequest.

        The domain name (such as example.com) or subdomain name (such as www.example.com) for which Amazon Route 53 responds to DNS queries by using the resource record sets that Route 53 creates for this traffic policy instance.

        :param name: The name of this CreateTrafficPolicyInstanceRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 1024:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1024`")

        self._name = name

    @property
    def ttl(self):
        """Gets the ttl of this CreateTrafficPolicyInstanceRequest.

        (Optional) The TTL that you want Amazon Route 53 to assign to all of the resource record sets that it creates in the specified hosted zone.

        :return: The ttl of this CreateTrafficPolicyInstanceRequest.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this CreateTrafficPolicyInstanceRequest.

        (Optional) The TTL that you want Amazon Route 53 to assign to all of the resource record sets that it creates in the specified hosted zone.

        :param ttl: The ttl of this CreateTrafficPolicyInstanceRequest.
        :type ttl: int
        """
        if ttl is None:
            raise ValueError("Invalid value for `ttl`, must not be `None`")
        if ttl is not None and ttl > 2147483647:
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `2147483647`")
        if ttl is not None and ttl < 0:
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")

        self._ttl = ttl

    @property
    def traffic_policy_id(self):
        """Gets the traffic_policy_id of this CreateTrafficPolicyInstanceRequest.

        The ID of the traffic policy that you want to use to create resource record sets in the specified hosted zone.

        :return: The traffic_policy_id of this CreateTrafficPolicyInstanceRequest.
        :rtype: str
        """
        return self._traffic_policy_id

    @traffic_policy_id.setter
    def traffic_policy_id(self, traffic_policy_id):
        """Sets the traffic_policy_id of this CreateTrafficPolicyInstanceRequest.

        The ID of the traffic policy that you want to use to create resource record sets in the specified hosted zone.

        :param traffic_policy_id: The traffic_policy_id of this CreateTrafficPolicyInstanceRequest.
        :type traffic_policy_id: str
        """
        if traffic_policy_id is None:
            raise ValueError("Invalid value for `traffic_policy_id`, must not be `None`")
        if traffic_policy_id is not None and len(traffic_policy_id) > 36:
            raise ValueError("Invalid value for `traffic_policy_id`, length must be less than or equal to `36`")
        if traffic_policy_id is not None and len(traffic_policy_id) < 1:
            raise ValueError("Invalid value for `traffic_policy_id`, length must be greater than or equal to `1`")

        self._traffic_policy_id = traffic_policy_id

    @property
    def traffic_policy_version(self):
        """Gets the traffic_policy_version of this CreateTrafficPolicyInstanceRequest.

        The version of the traffic policy that you want to use to create resource record sets in the specified hosted zone.

        :return: The traffic_policy_version of this CreateTrafficPolicyInstanceRequest.
        :rtype: int
        """
        return self._traffic_policy_version

    @traffic_policy_version.setter
    def traffic_policy_version(self, traffic_policy_version):
        """Sets the traffic_policy_version of this CreateTrafficPolicyInstanceRequest.

        The version of the traffic policy that you want to use to create resource record sets in the specified hosted zone.

        :param traffic_policy_version: The traffic_policy_version of this CreateTrafficPolicyInstanceRequest.
        :type traffic_policy_version: int
        """
        if traffic_policy_version is None:
            raise ValueError("Invalid value for `traffic_policy_version`, must not be `None`")
        if traffic_policy_version is not None and traffic_policy_version > 1000:
            raise ValueError("Invalid value for `traffic_policy_version`, must be a value less than or equal to `1000`")
        if traffic_policy_version is not None and traffic_policy_version < 1:
            raise ValueError("Invalid value for `traffic_policy_version`, must be a value greater than or equal to `1`")

        self._traffic_policy_version = traffic_policy_version
