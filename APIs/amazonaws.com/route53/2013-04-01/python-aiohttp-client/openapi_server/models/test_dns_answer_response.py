# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rr_type import RRType
from openapi_server import util


class TestDNSAnswerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nameserver: str=None, record_name: str=None, record_type: RRType=None, record_data: List=None, response_code: str=None, protocol: str=None):
        """TestDNSAnswerResponse - a model defined in OpenAPI

        :param nameserver: The nameserver of this TestDNSAnswerResponse.
        :param record_name: The record_name of this TestDNSAnswerResponse.
        :param record_type: The record_type of this TestDNSAnswerResponse.
        :param record_data: The record_data of this TestDNSAnswerResponse.
        :param response_code: The response_code of this TestDNSAnswerResponse.
        :param protocol: The protocol of this TestDNSAnswerResponse.
        """
        self.openapi_types = {
            'nameserver': str,
            'record_name': str,
            'record_type': RRType,
            'record_data': List,
            'response_code': str,
            'protocol': str
        }

        self.attribute_map = {
            'nameserver': 'Nameserver',
            'record_name': 'RecordName',
            'record_type': 'RecordType',
            'record_data': 'RecordData',
            'response_code': 'ResponseCode',
            'protocol': 'Protocol'
        }

        self._nameserver = nameserver
        self._record_name = record_name
        self._record_type = record_type
        self._record_data = record_data
        self._response_code = response_code
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestDNSAnswerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestDNSAnswerResponse of this TestDNSAnswerResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nameserver(self):
        """Gets the nameserver of this TestDNSAnswerResponse.


        :return: The nameserver of this TestDNSAnswerResponse.
        :rtype: str
        """
        return self._nameserver

    @nameserver.setter
    def nameserver(self, nameserver):
        """Sets the nameserver of this TestDNSAnswerResponse.


        :param nameserver: The nameserver of this TestDNSAnswerResponse.
        :type nameserver: str
        """
        if nameserver is None:
            raise ValueError("Invalid value for `nameserver`, must not be `None`")

        self._nameserver = nameserver

    @property
    def record_name(self):
        """Gets the record_name of this TestDNSAnswerResponse.


        :return: The record_name of this TestDNSAnswerResponse.
        :rtype: str
        """
        return self._record_name

    @record_name.setter
    def record_name(self, record_name):
        """Sets the record_name of this TestDNSAnswerResponse.


        :param record_name: The record_name of this TestDNSAnswerResponse.
        :type record_name: str
        """
        if record_name is None:
            raise ValueError("Invalid value for `record_name`, must not be `None`")

        self._record_name = record_name

    @property
    def record_type(self):
        """Gets the record_type of this TestDNSAnswerResponse.


        :return: The record_type of this TestDNSAnswerResponse.
        :rtype: RRType
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this TestDNSAnswerResponse.


        :param record_type: The record_type of this TestDNSAnswerResponse.
        :type record_type: RRType
        """
        if record_type is None:
            raise ValueError("Invalid value for `record_type`, must not be `None`")

        self._record_type = record_type

    @property
    def record_data(self):
        """Gets the record_data of this TestDNSAnswerResponse.


        :return: The record_data of this TestDNSAnswerResponse.
        :rtype: List
        """
        return self._record_data

    @record_data.setter
    def record_data(self, record_data):
        """Sets the record_data of this TestDNSAnswerResponse.


        :param record_data: The record_data of this TestDNSAnswerResponse.
        :type record_data: List
        """
        if record_data is None:
            raise ValueError("Invalid value for `record_data`, must not be `None`")

        self._record_data = record_data

    @property
    def response_code(self):
        """Gets the response_code of this TestDNSAnswerResponse.


        :return: The response_code of this TestDNSAnswerResponse.
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this TestDNSAnswerResponse.


        :param response_code: The response_code of this TestDNSAnswerResponse.
        :type response_code: str
        """
        if response_code is None:
            raise ValueError("Invalid value for `response_code`, must not be `None`")

        self._response_code = response_code

    @property
    def protocol(self):
        """Gets the protocol of this TestDNSAnswerResponse.


        :return: The protocol of this TestDNSAnswerResponse.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this TestDNSAnswerResponse.


        :param protocol: The protocol of this TestDNSAnswerResponse.
        :type protocol: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol
