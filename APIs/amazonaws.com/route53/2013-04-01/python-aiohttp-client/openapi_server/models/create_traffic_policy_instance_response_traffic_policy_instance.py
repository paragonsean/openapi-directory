# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rr_type import RRType
from openapi_server import util


class CreateTrafficPolicyInstanceResponseTrafficPolicyInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, hosted_zone_id: str=None, name: str=None, ttl: int=None, state: str=None, message: str=None, traffic_policy_id: str=None, traffic_policy_version: int=None, traffic_policy_type: RRType=None):
        """CreateTrafficPolicyInstanceResponseTrafficPolicyInstance - a model defined in OpenAPI

        :param id: The id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :param hosted_zone_id: The hosted_zone_id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :param name: The name of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :param ttl: The ttl of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :param state: The state of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :param message: The message of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :param traffic_policy_id: The traffic_policy_id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :param traffic_policy_version: The traffic_policy_version of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :param traffic_policy_type: The traffic_policy_type of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        """
        self.openapi_types = {
            'id': str,
            'hosted_zone_id': str,
            'name': str,
            'ttl': int,
            'state': str,
            'message': str,
            'traffic_policy_id': str,
            'traffic_policy_version': int,
            'traffic_policy_type': RRType
        }

        self.attribute_map = {
            'id': 'Id',
            'hosted_zone_id': 'HostedZoneId',
            'name': 'Name',
            'ttl': 'TTL',
            'state': 'State',
            'message': 'Message',
            'traffic_policy_id': 'TrafficPolicyId',
            'traffic_policy_version': 'TrafficPolicyVersion',
            'traffic_policy_type': 'TrafficPolicyType'
        }

        self._id = id
        self._hosted_zone_id = hosted_zone_id
        self._name = name
        self._ttl = ttl
        self._state = state
        self._message = message
        self._traffic_policy_id = traffic_policy_id
        self._traffic_policy_version = traffic_policy_version
        self._traffic_policy_type = traffic_policy_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTrafficPolicyInstanceResponseTrafficPolicyInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTrafficPolicyInstanceResponse_TrafficPolicyInstance of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :return: The id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :param id: The id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def hosted_zone_id(self):
        """Gets the hosted_zone_id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :return: The hosted_zone_id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :rtype: str
        """
        return self._hosted_zone_id

    @hosted_zone_id.setter
    def hosted_zone_id(self, hosted_zone_id):
        """Sets the hosted_zone_id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :param hosted_zone_id: The hosted_zone_id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :type hosted_zone_id: str
        """
        if hosted_zone_id is None:
            raise ValueError("Invalid value for `hosted_zone_id`, must not be `None`")

        self._hosted_zone_id = hosted_zone_id

    @property
    def name(self):
        """Gets the name of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :return: The name of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :param name: The name of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def ttl(self):
        """Gets the ttl of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :return: The ttl of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :param ttl: The ttl of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :type ttl: int
        """
        if ttl is None:
            raise ValueError("Invalid value for `ttl`, must not be `None`")

        self._ttl = ttl

    @property
    def state(self):
        """Gets the state of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :return: The state of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :param state: The state of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def message(self):
        """Gets the message of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :return: The message of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :param message: The message of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def traffic_policy_id(self):
        """Gets the traffic_policy_id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :return: The traffic_policy_id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :rtype: str
        """
        return self._traffic_policy_id

    @traffic_policy_id.setter
    def traffic_policy_id(self, traffic_policy_id):
        """Sets the traffic_policy_id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :param traffic_policy_id: The traffic_policy_id of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :type traffic_policy_id: str
        """
        if traffic_policy_id is None:
            raise ValueError("Invalid value for `traffic_policy_id`, must not be `None`")

        self._traffic_policy_id = traffic_policy_id

    @property
    def traffic_policy_version(self):
        """Gets the traffic_policy_version of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :return: The traffic_policy_version of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :rtype: int
        """
        return self._traffic_policy_version

    @traffic_policy_version.setter
    def traffic_policy_version(self, traffic_policy_version):
        """Sets the traffic_policy_version of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :param traffic_policy_version: The traffic_policy_version of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :type traffic_policy_version: int
        """
        if traffic_policy_version is None:
            raise ValueError("Invalid value for `traffic_policy_version`, must not be `None`")

        self._traffic_policy_version = traffic_policy_version

    @property
    def traffic_policy_type(self):
        """Gets the traffic_policy_type of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :return: The traffic_policy_type of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :rtype: RRType
        """
        return self._traffic_policy_type

    @traffic_policy_type.setter
    def traffic_policy_type(self, traffic_policy_type):
        """Sets the traffic_policy_type of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.


        :param traffic_policy_type: The traffic_policy_type of this CreateTrafficPolicyInstanceResponseTrafficPolicyInstance.
        :type traffic_policy_type: RRType
        """
        if traffic_policy_type is None:
            raise ValueError("Invalid value for `traffic_policy_type`, must not be `None`")

        self._traffic_policy_type = traffic_policy_type
