# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_query_logging_config_response_query_logging_config import CreateQueryLoggingConfigResponseQueryLoggingConfig
from openapi_server import util


class CreateQueryLoggingConfigResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query_logging_config: CreateQueryLoggingConfigResponseQueryLoggingConfig=None):
        """CreateQueryLoggingConfigResponse - a model defined in OpenAPI

        :param query_logging_config: The query_logging_config of this CreateQueryLoggingConfigResponse.
        """
        self.openapi_types = {
            'query_logging_config': CreateQueryLoggingConfigResponseQueryLoggingConfig
        }

        self.attribute_map = {
            'query_logging_config': 'QueryLoggingConfig'
        }

        self._query_logging_config = query_logging_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateQueryLoggingConfigResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateQueryLoggingConfigResponse of this CreateQueryLoggingConfigResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query_logging_config(self):
        """Gets the query_logging_config of this CreateQueryLoggingConfigResponse.


        :return: The query_logging_config of this CreateQueryLoggingConfigResponse.
        :rtype: CreateQueryLoggingConfigResponseQueryLoggingConfig
        """
        return self._query_logging_config

    @query_logging_config.setter
    def query_logging_config(self, query_logging_config):
        """Sets the query_logging_config of this CreateQueryLoggingConfigResponse.


        :param query_logging_config: The query_logging_config of this CreateQueryLoggingConfigResponse.
        :type query_logging_config: CreateQueryLoggingConfigResponseQueryLoggingConfig
        """
        if query_logging_config is None:
            raise ValueError("Invalid value for `query_logging_config`, must not be `None`")

        self._query_logging_config = query_logging_config
