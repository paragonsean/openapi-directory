# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateTrafficPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, document: str=None, comment: str=None):
        """CreateTrafficPolicyRequest - a model defined in OpenAPI

        :param name: The name of this CreateTrafficPolicyRequest.
        :param document: The document of this CreateTrafficPolicyRequest.
        :param comment: The comment of this CreateTrafficPolicyRequest.
        """
        self.openapi_types = {
            'name': str,
            'document': str,
            'comment': str
        }

        self.attribute_map = {
            'name': 'Name',
            'document': 'Document',
            'comment': 'Comment'
        }

        self._name = name
        self._document = document
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTrafficPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTrafficPolicy_request of this CreateTrafficPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateTrafficPolicyRequest.

        The name of the traffic policy.

        :return: The name of this CreateTrafficPolicyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTrafficPolicyRequest.

        The name of the traffic policy.

        :param name: The name of this CreateTrafficPolicyRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 512:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `512`")

        self._name = name

    @property
    def document(self):
        """Gets the document of this CreateTrafficPolicyRequest.

        The definition of this traffic policy in JSON format. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/api-policies-traffic-policy-document-format.html\">Traffic Policy Document Format</a>.

        :return: The document of this CreateTrafficPolicyRequest.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this CreateTrafficPolicyRequest.

        The definition of this traffic policy in JSON format. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/api-policies-traffic-policy-document-format.html\">Traffic Policy Document Format</a>.

        :param document: The document of this CreateTrafficPolicyRequest.
        :type document: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")
        if document is not None and len(document) > 102400:
            raise ValueError("Invalid value for `document`, length must be less than or equal to `102400`")

        self._document = document

    @property
    def comment(self):
        """Gets the comment of this CreateTrafficPolicyRequest.

        (Optional) Any comments that you want to include about the traffic policy.

        :return: The comment of this CreateTrafficPolicyRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CreateTrafficPolicyRequest.

        (Optional) Any comments that you want to include about the traffic policy.

        :param comment: The comment of this CreateTrafficPolicyRequest.
        :type comment: str
        """
        if comment is not None and len(comment) > 1024:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `1024`")

        self._comment = comment
