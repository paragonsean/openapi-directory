# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetHealthCheckCountResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_check_count: int=None):
        """GetHealthCheckCountResponse - a model defined in OpenAPI

        :param health_check_count: The health_check_count of this GetHealthCheckCountResponse.
        """
        self.openapi_types = {
            'health_check_count': int
        }

        self.attribute_map = {
            'health_check_count': 'HealthCheckCount'
        }

        self._health_check_count = health_check_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetHealthCheckCountResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetHealthCheckCountResponse of this GetHealthCheckCountResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_check_count(self):
        """Gets the health_check_count of this GetHealthCheckCountResponse.


        :return: The health_check_count of this GetHealthCheckCountResponse.
        :rtype: int
        """
        return self._health_check_count

    @health_check_count.setter
    def health_check_count(self, health_check_count):
        """Sets the health_check_count of this GetHealthCheckCountResponse.


        :param health_check_count: The health_check_count of this GetHealthCheckCountResponse.
        :type health_check_count: int
        """
        if health_check_count is None:
            raise ValueError("Invalid value for `health_check_count`, must not be `None`")

        self._health_check_count = health_check_count
