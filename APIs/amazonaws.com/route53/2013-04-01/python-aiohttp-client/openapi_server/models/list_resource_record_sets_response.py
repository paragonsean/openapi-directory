# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rr_type import RRType
from openapi_server import util


class ListResourceRecordSetsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_record_sets: List=None, is_truncated: bool=None, next_record_name: str=None, next_record_type: RRType=None, next_record_identifier: str=None, max_items: str=None):
        """ListResourceRecordSetsResponse - a model defined in OpenAPI

        :param resource_record_sets: The resource_record_sets of this ListResourceRecordSetsResponse.
        :param is_truncated: The is_truncated of this ListResourceRecordSetsResponse.
        :param next_record_name: The next_record_name of this ListResourceRecordSetsResponse.
        :param next_record_type: The next_record_type of this ListResourceRecordSetsResponse.
        :param next_record_identifier: The next_record_identifier of this ListResourceRecordSetsResponse.
        :param max_items: The max_items of this ListResourceRecordSetsResponse.
        """
        self.openapi_types = {
            'resource_record_sets': List,
            'is_truncated': bool,
            'next_record_name': str,
            'next_record_type': RRType,
            'next_record_identifier': str,
            'max_items': str
        }

        self.attribute_map = {
            'resource_record_sets': 'ResourceRecordSets',
            'is_truncated': 'IsTruncated',
            'next_record_name': 'NextRecordName',
            'next_record_type': 'NextRecordType',
            'next_record_identifier': 'NextRecordIdentifier',
            'max_items': 'MaxItems'
        }

        self._resource_record_sets = resource_record_sets
        self._is_truncated = is_truncated
        self._next_record_name = next_record_name
        self._next_record_type = next_record_type
        self._next_record_identifier = next_record_identifier
        self._max_items = max_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListResourceRecordSetsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListResourceRecordSetsResponse of this ListResourceRecordSetsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_record_sets(self):
        """Gets the resource_record_sets of this ListResourceRecordSetsResponse.


        :return: The resource_record_sets of this ListResourceRecordSetsResponse.
        :rtype: List
        """
        return self._resource_record_sets

    @resource_record_sets.setter
    def resource_record_sets(self, resource_record_sets):
        """Sets the resource_record_sets of this ListResourceRecordSetsResponse.


        :param resource_record_sets: The resource_record_sets of this ListResourceRecordSetsResponse.
        :type resource_record_sets: List
        """
        if resource_record_sets is None:
            raise ValueError("Invalid value for `resource_record_sets`, must not be `None`")

        self._resource_record_sets = resource_record_sets

    @property
    def is_truncated(self):
        """Gets the is_truncated of this ListResourceRecordSetsResponse.


        :return: The is_truncated of this ListResourceRecordSetsResponse.
        :rtype: bool
        """
        return self._is_truncated

    @is_truncated.setter
    def is_truncated(self, is_truncated):
        """Sets the is_truncated of this ListResourceRecordSetsResponse.


        :param is_truncated: The is_truncated of this ListResourceRecordSetsResponse.
        :type is_truncated: bool
        """
        if is_truncated is None:
            raise ValueError("Invalid value for `is_truncated`, must not be `None`")

        self._is_truncated = is_truncated

    @property
    def next_record_name(self):
        """Gets the next_record_name of this ListResourceRecordSetsResponse.


        :return: The next_record_name of this ListResourceRecordSetsResponse.
        :rtype: str
        """
        return self._next_record_name

    @next_record_name.setter
    def next_record_name(self, next_record_name):
        """Sets the next_record_name of this ListResourceRecordSetsResponse.


        :param next_record_name: The next_record_name of this ListResourceRecordSetsResponse.
        :type next_record_name: str
        """

        self._next_record_name = next_record_name

    @property
    def next_record_type(self):
        """Gets the next_record_type of this ListResourceRecordSetsResponse.


        :return: The next_record_type of this ListResourceRecordSetsResponse.
        :rtype: RRType
        """
        return self._next_record_type

    @next_record_type.setter
    def next_record_type(self, next_record_type):
        """Sets the next_record_type of this ListResourceRecordSetsResponse.


        :param next_record_type: The next_record_type of this ListResourceRecordSetsResponse.
        :type next_record_type: RRType
        """

        self._next_record_type = next_record_type

    @property
    def next_record_identifier(self):
        """Gets the next_record_identifier of this ListResourceRecordSetsResponse.


        :return: The next_record_identifier of this ListResourceRecordSetsResponse.
        :rtype: str
        """
        return self._next_record_identifier

    @next_record_identifier.setter
    def next_record_identifier(self, next_record_identifier):
        """Sets the next_record_identifier of this ListResourceRecordSetsResponse.


        :param next_record_identifier: The next_record_identifier of this ListResourceRecordSetsResponse.
        :type next_record_identifier: str
        """

        self._next_record_identifier = next_record_identifier

    @property
    def max_items(self):
        """Gets the max_items of this ListResourceRecordSetsResponse.


        :return: The max_items of this ListResourceRecordSetsResponse.
        :rtype: str
        """
        return self._max_items

    @max_items.setter
    def max_items(self, max_items):
        """Sets the max_items of this ListResourceRecordSetsResponse.


        :param max_items: The max_items of this ListResourceRecordSetsResponse.
        :type max_items: str
        """
        if max_items is None:
            raise ValueError("Invalid value for `max_items`, must not be `None`")

        self._max_items = max_items
