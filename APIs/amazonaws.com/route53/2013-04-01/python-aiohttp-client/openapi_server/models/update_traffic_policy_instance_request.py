# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateTrafficPolicyInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ttl: int=None, traffic_policy_id: str=None, traffic_policy_version: int=None):
        """UpdateTrafficPolicyInstanceRequest - a model defined in OpenAPI

        :param ttl: The ttl of this UpdateTrafficPolicyInstanceRequest.
        :param traffic_policy_id: The traffic_policy_id of this UpdateTrafficPolicyInstanceRequest.
        :param traffic_policy_version: The traffic_policy_version of this UpdateTrafficPolicyInstanceRequest.
        """
        self.openapi_types = {
            'ttl': int,
            'traffic_policy_id': str,
            'traffic_policy_version': int
        }

        self.attribute_map = {
            'ttl': 'TTL',
            'traffic_policy_id': 'TrafficPolicyId',
            'traffic_policy_version': 'TrafficPolicyVersion'
        }

        self._ttl = ttl
        self._traffic_policy_id = traffic_policy_id
        self._traffic_policy_version = traffic_policy_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTrafficPolicyInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTrafficPolicyInstance_request of this UpdateTrafficPolicyInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ttl(self):
        """Gets the ttl of this UpdateTrafficPolicyInstanceRequest.

        The TTL that you want Amazon Route 53 to assign to all of the updated resource record sets.

        :return: The ttl of this UpdateTrafficPolicyInstanceRequest.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this UpdateTrafficPolicyInstanceRequest.

        The TTL that you want Amazon Route 53 to assign to all of the updated resource record sets.

        :param ttl: The ttl of this UpdateTrafficPolicyInstanceRequest.
        :type ttl: int
        """
        if ttl is None:
            raise ValueError("Invalid value for `ttl`, must not be `None`")
        if ttl is not None and ttl > 2147483647:
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `2147483647`")
        if ttl is not None and ttl < 0:
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")

        self._ttl = ttl

    @property
    def traffic_policy_id(self):
        """Gets the traffic_policy_id of this UpdateTrafficPolicyInstanceRequest.

        The ID of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.

        :return: The traffic_policy_id of this UpdateTrafficPolicyInstanceRequest.
        :rtype: str
        """
        return self._traffic_policy_id

    @traffic_policy_id.setter
    def traffic_policy_id(self, traffic_policy_id):
        """Sets the traffic_policy_id of this UpdateTrafficPolicyInstanceRequest.

        The ID of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.

        :param traffic_policy_id: The traffic_policy_id of this UpdateTrafficPolicyInstanceRequest.
        :type traffic_policy_id: str
        """
        if traffic_policy_id is None:
            raise ValueError("Invalid value for `traffic_policy_id`, must not be `None`")
        if traffic_policy_id is not None and len(traffic_policy_id) > 36:
            raise ValueError("Invalid value for `traffic_policy_id`, length must be less than or equal to `36`")
        if traffic_policy_id is not None and len(traffic_policy_id) < 1:
            raise ValueError("Invalid value for `traffic_policy_id`, length must be greater than or equal to `1`")

        self._traffic_policy_id = traffic_policy_id

    @property
    def traffic_policy_version(self):
        """Gets the traffic_policy_version of this UpdateTrafficPolicyInstanceRequest.

        The version of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.

        :return: The traffic_policy_version of this UpdateTrafficPolicyInstanceRequest.
        :rtype: int
        """
        return self._traffic_policy_version

    @traffic_policy_version.setter
    def traffic_policy_version(self, traffic_policy_version):
        """Sets the traffic_policy_version of this UpdateTrafficPolicyInstanceRequest.

        The version of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.

        :param traffic_policy_version: The traffic_policy_version of this UpdateTrafficPolicyInstanceRequest.
        :type traffic_policy_version: int
        """
        if traffic_policy_version is None:
            raise ValueError("Invalid value for `traffic_policy_version`, must not be `None`")
        if traffic_policy_version is not None and traffic_policy_version > 1000:
            raise ValueError("Invalid value for `traffic_policy_version`, must be a value less than or equal to `1000`")
        if traffic_policy_version is not None and traffic_policy_version < 1:
            raise ValueError("Invalid value for `traffic_policy_version`, must be a value greater than or equal to `1`")

        self._traffic_policy_version = traffic_policy_version
