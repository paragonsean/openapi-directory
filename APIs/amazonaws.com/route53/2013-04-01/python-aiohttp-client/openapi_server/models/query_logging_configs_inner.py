# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryLoggingConfigsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, hosted_zone_id: str=None, cloud_watch_logs_log_group_arn: str=None):
        """QueryLoggingConfigsInner - a model defined in OpenAPI

        :param id: The id of this QueryLoggingConfigsInner.
        :param hosted_zone_id: The hosted_zone_id of this QueryLoggingConfigsInner.
        :param cloud_watch_logs_log_group_arn: The cloud_watch_logs_log_group_arn of this QueryLoggingConfigsInner.
        """
        self.openapi_types = {
            'id': str,
            'hosted_zone_id': str,
            'cloud_watch_logs_log_group_arn': str
        }

        self.attribute_map = {
            'id': 'Id',
            'hosted_zone_id': 'HostedZoneId',
            'cloud_watch_logs_log_group_arn': 'CloudWatchLogsLogGroupArn'
        }

        self._id = id
        self._hosted_zone_id = hosted_zone_id
        self._cloud_watch_logs_log_group_arn = cloud_watch_logs_log_group_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryLoggingConfigsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryLoggingConfigs_inner of this QueryLoggingConfigsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this QueryLoggingConfigsInner.


        :return: The id of this QueryLoggingConfigsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueryLoggingConfigsInner.


        :param id: The id of this QueryLoggingConfigsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def hosted_zone_id(self):
        """Gets the hosted_zone_id of this QueryLoggingConfigsInner.


        :return: The hosted_zone_id of this QueryLoggingConfigsInner.
        :rtype: str
        """
        return self._hosted_zone_id

    @hosted_zone_id.setter
    def hosted_zone_id(self, hosted_zone_id):
        """Sets the hosted_zone_id of this QueryLoggingConfigsInner.


        :param hosted_zone_id: The hosted_zone_id of this QueryLoggingConfigsInner.
        :type hosted_zone_id: str
        """
        if hosted_zone_id is None:
            raise ValueError("Invalid value for `hosted_zone_id`, must not be `None`")

        self._hosted_zone_id = hosted_zone_id

    @property
    def cloud_watch_logs_log_group_arn(self):
        """Gets the cloud_watch_logs_log_group_arn of this QueryLoggingConfigsInner.


        :return: The cloud_watch_logs_log_group_arn of this QueryLoggingConfigsInner.
        :rtype: str
        """
        return self._cloud_watch_logs_log_group_arn

    @cloud_watch_logs_log_group_arn.setter
    def cloud_watch_logs_log_group_arn(self, cloud_watch_logs_log_group_arn):
        """Sets the cloud_watch_logs_log_group_arn of this QueryLoggingConfigsInner.


        :param cloud_watch_logs_log_group_arn: The cloud_watch_logs_log_group_arn of this QueryLoggingConfigsInner.
        :type cloud_watch_logs_log_group_arn: str
        """
        if cloud_watch_logs_log_group_arn is None:
            raise ValueError("Invalid value for `cloud_watch_logs_log_group_arn`, must not be `None`")

        self._cloud_watch_logs_log_group_arn = cloud_watch_logs_log_group_arn
