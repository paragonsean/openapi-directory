# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_health_check_request_health_check_config import CreateHealthCheckRequestHealthCheckConfig
from openapi_server import util


class CreateHealthCheckRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caller_reference: str=None, health_check_config: CreateHealthCheckRequestHealthCheckConfig=None):
        """CreateHealthCheckRequest - a model defined in OpenAPI

        :param caller_reference: The caller_reference of this CreateHealthCheckRequest.
        :param health_check_config: The health_check_config of this CreateHealthCheckRequest.
        """
        self.openapi_types = {
            'caller_reference': str,
            'health_check_config': CreateHealthCheckRequestHealthCheckConfig
        }

        self.attribute_map = {
            'caller_reference': 'CallerReference',
            'health_check_config': 'HealthCheckConfig'
        }

        self._caller_reference = caller_reference
        self._health_check_config = health_check_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateHealthCheckRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateHealthCheck_request of this CreateHealthCheckRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caller_reference(self):
        """Gets the caller_reference of this CreateHealthCheckRequest.

        <p>A unique string that identifies the request and that allows you to retry a failed <code>CreateHealthCheck</code> request without the risk of creating two identical health checks:</p> <ul> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> and settings as a previous request, and if the health check doesn't exist, Amazon Route 53 creates the health check. If the health check does exist, Route 53 returns the settings for the existing health check.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> as a deleted health check, regardless of the settings, Route 53 returns a <code>HealthCheckAlreadyExists</code> error.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> as an existing health check but with different settings, Route 53 returns a <code>HealthCheckAlreadyExists</code> error.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with a unique <code>CallerReference</code> but settings identical to an existing health check, Route 53 creates the health check.</p> </li> </ul>

        :return: The caller_reference of this CreateHealthCheckRequest.
        :rtype: str
        """
        return self._caller_reference

    @caller_reference.setter
    def caller_reference(self, caller_reference):
        """Sets the caller_reference of this CreateHealthCheckRequest.

        <p>A unique string that identifies the request and that allows you to retry a failed <code>CreateHealthCheck</code> request without the risk of creating two identical health checks:</p> <ul> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> and settings as a previous request, and if the health check doesn't exist, Amazon Route 53 creates the health check. If the health check does exist, Route 53 returns the settings for the existing health check.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> as a deleted health check, regardless of the settings, Route 53 returns a <code>HealthCheckAlreadyExists</code> error.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> as an existing health check but with different settings, Route 53 returns a <code>HealthCheckAlreadyExists</code> error.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with a unique <code>CallerReference</code> but settings identical to an existing health check, Route 53 creates the health check.</p> </li> </ul>

        :param caller_reference: The caller_reference of this CreateHealthCheckRequest.
        :type caller_reference: str
        """
        if caller_reference is None:
            raise ValueError("Invalid value for `caller_reference`, must not be `None`")
        if caller_reference is not None and len(caller_reference) > 64:
            raise ValueError("Invalid value for `caller_reference`, length must be less than or equal to `64`")
        if caller_reference is not None and len(caller_reference) < 1:
            raise ValueError("Invalid value for `caller_reference`, length must be greater than or equal to `1`")

        self._caller_reference = caller_reference

    @property
    def health_check_config(self):
        """Gets the health_check_config of this CreateHealthCheckRequest.


        :return: The health_check_config of this CreateHealthCheckRequest.
        :rtype: CreateHealthCheckRequestHealthCheckConfig
        """
        return self._health_check_config

    @health_check_config.setter
    def health_check_config(self, health_check_config):
        """Sets the health_check_config of this CreateHealthCheckRequest.


        :param health_check_config: The health_check_config of this CreateHealthCheckRequest.
        :type health_check_config: CreateHealthCheckRequestHealthCheckConfig
        """
        if health_check_config is None:
            raise ValueError("Invalid value for `health_check_config`, must not be `None`")

        self._health_check_config = health_check_config
