# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateReusableDelegationSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caller_reference: str=None, hosted_zone_id: str=None):
        """CreateReusableDelegationSetRequest - a model defined in OpenAPI

        :param caller_reference: The caller_reference of this CreateReusableDelegationSetRequest.
        :param hosted_zone_id: The hosted_zone_id of this CreateReusableDelegationSetRequest.
        """
        self.openapi_types = {
            'caller_reference': str,
            'hosted_zone_id': str
        }

        self.attribute_map = {
            'caller_reference': 'CallerReference',
            'hosted_zone_id': 'HostedZoneId'
        }

        self._caller_reference = caller_reference
        self._hosted_zone_id = hosted_zone_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateReusableDelegationSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateReusableDelegationSet_request of this CreateReusableDelegationSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caller_reference(self):
        """Gets the caller_reference of this CreateReusableDelegationSetRequest.

        A unique string that identifies the request, and that allows you to retry failed <code>CreateReusableDelegationSet</code> requests without the risk of executing the operation twice. You must use a unique <code>CallerReference</code> string every time you submit a <code>CreateReusableDelegationSet</code> request. <code>CallerReference</code> can be any unique string, for example a date/time stamp.

        :return: The caller_reference of this CreateReusableDelegationSetRequest.
        :rtype: str
        """
        return self._caller_reference

    @caller_reference.setter
    def caller_reference(self, caller_reference):
        """Sets the caller_reference of this CreateReusableDelegationSetRequest.

        A unique string that identifies the request, and that allows you to retry failed <code>CreateReusableDelegationSet</code> requests without the risk of executing the operation twice. You must use a unique <code>CallerReference</code> string every time you submit a <code>CreateReusableDelegationSet</code> request. <code>CallerReference</code> can be any unique string, for example a date/time stamp.

        :param caller_reference: The caller_reference of this CreateReusableDelegationSetRequest.
        :type caller_reference: str
        """
        if caller_reference is None:
            raise ValueError("Invalid value for `caller_reference`, must not be `None`")
        if caller_reference is not None and len(caller_reference) > 128:
            raise ValueError("Invalid value for `caller_reference`, length must be less than or equal to `128`")
        if caller_reference is not None and len(caller_reference) < 1:
            raise ValueError("Invalid value for `caller_reference`, length must be greater than or equal to `1`")

        self._caller_reference = caller_reference

    @property
    def hosted_zone_id(self):
        """Gets the hosted_zone_id of this CreateReusableDelegationSetRequest.

        If you want to mark the delegation set for an existing hosted zone as reusable, the ID for that hosted zone.

        :return: The hosted_zone_id of this CreateReusableDelegationSetRequest.
        :rtype: str
        """
        return self._hosted_zone_id

    @hosted_zone_id.setter
    def hosted_zone_id(self, hosted_zone_id):
        """Sets the hosted_zone_id of this CreateReusableDelegationSetRequest.

        If you want to mark the delegation set for an existing hosted zone as reusable, the ID for that hosted zone.

        :param hosted_zone_id: The hosted_zone_id of this CreateReusableDelegationSetRequest.
        :type hosted_zone_id: str
        """
        if hosted_zone_id is not None and len(hosted_zone_id) > 32:
            raise ValueError("Invalid value for `hosted_zone_id`, length must be less than or equal to `32`")

        self._hosted_zone_id = hosted_zone_id
