# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cidr_collection_change_action import CidrCollectionChangeAction
from openapi_server import util


class CidrCollectionChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_name: str=None, action: CidrCollectionChangeAction=None, cidr_list: List=None):
        """CidrCollectionChange - a model defined in OpenAPI

        :param location_name: The location_name of this CidrCollectionChange.
        :param action: The action of this CidrCollectionChange.
        :param cidr_list: The cidr_list of this CidrCollectionChange.
        """
        self.openapi_types = {
            'location_name': str,
            'action': CidrCollectionChangeAction,
            'cidr_list': List
        }

        self.attribute_map = {
            'location_name': 'LocationName',
            'action': 'Action',
            'cidr_list': 'CidrList'
        }

        self._location_name = location_name
        self._action = action
        self._cidr_list = cidr_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CidrCollectionChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CidrCollectionChange of this CidrCollectionChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_name(self):
        """Gets the location_name of this CidrCollectionChange.


        :return: The location_name of this CidrCollectionChange.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this CidrCollectionChange.


        :param location_name: The location_name of this CidrCollectionChange.
        :type location_name: str
        """
        if location_name is None:
            raise ValueError("Invalid value for `location_name`, must not be `None`")

        self._location_name = location_name

    @property
    def action(self):
        """Gets the action of this CidrCollectionChange.


        :return: The action of this CidrCollectionChange.
        :rtype: CidrCollectionChangeAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CidrCollectionChange.


        :param action: The action of this CidrCollectionChange.
        :type action: CidrCollectionChangeAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def cidr_list(self):
        """Gets the cidr_list of this CidrCollectionChange.


        :return: The cidr_list of this CidrCollectionChange.
        :rtype: List
        """
        return self._cidr_list

    @cidr_list.setter
    def cidr_list(self, cidr_list):
        """Sets the cidr_list of this CidrCollectionChange.


        :param cidr_list: The cidr_list of this CidrCollectionChange.
        :type cidr_list: List
        """
        if cidr_list is None:
            raise ValueError("Invalid value for `cidr_list`, must not be `None`")

        self._cidr_list = cidr_list
