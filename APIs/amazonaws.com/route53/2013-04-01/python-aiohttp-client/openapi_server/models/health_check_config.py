# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_health_check_request_health_check_config_alarm_identifier import CreateHealthCheckRequestHealthCheckConfigAlarmIdentifier
from openapi_server.models.health_check_type import HealthCheckType
from openapi_server.models.insufficient_data_health_status import InsufficientDataHealthStatus
from openapi_server import util


class HealthCheckConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, port: int=None, type: HealthCheckType=None, _resource_path: str=None, fully_qualified_domain_name: str=None, search_string: str=None, request_interval: int=None, failure_threshold: int=None, measure_latency: bool=None, inverted: bool=None, disabled: bool=None, health_threshold: int=None, child_health_checks: List=None, enable_sni: bool=None, regions: List=None, alarm_identifier: CreateHealthCheckRequestHealthCheckConfigAlarmIdentifier=None, insufficient_data_health_status: InsufficientDataHealthStatus=None, routing_control_arn: str=None):
        """HealthCheckConfig - a model defined in OpenAPI

        :param ip_address: The ip_address of this HealthCheckConfig.
        :param port: The port of this HealthCheckConfig.
        :param type: The type of this HealthCheckConfig.
        :param _resource_path: The _resource_path of this HealthCheckConfig.
        :param fully_qualified_domain_name: The fully_qualified_domain_name of this HealthCheckConfig.
        :param search_string: The search_string of this HealthCheckConfig.
        :param request_interval: The request_interval of this HealthCheckConfig.
        :param failure_threshold: The failure_threshold of this HealthCheckConfig.
        :param measure_latency: The measure_latency of this HealthCheckConfig.
        :param inverted: The inverted of this HealthCheckConfig.
        :param disabled: The disabled of this HealthCheckConfig.
        :param health_threshold: The health_threshold of this HealthCheckConfig.
        :param child_health_checks: The child_health_checks of this HealthCheckConfig.
        :param enable_sni: The enable_sni of this HealthCheckConfig.
        :param regions: The regions of this HealthCheckConfig.
        :param alarm_identifier: The alarm_identifier of this HealthCheckConfig.
        :param insufficient_data_health_status: The insufficient_data_health_status of this HealthCheckConfig.
        :param routing_control_arn: The routing_control_arn of this HealthCheckConfig.
        """
        self.openapi_types = {
            'ip_address': str,
            'port': int,
            'type': HealthCheckType,
            '_resource_path': str,
            'fully_qualified_domain_name': str,
            'search_string': str,
            'request_interval': int,
            'failure_threshold': int,
            'measure_latency': bool,
            'inverted': bool,
            'disabled': bool,
            'health_threshold': int,
            'child_health_checks': List,
            'enable_sni': bool,
            'regions': List,
            'alarm_identifier': CreateHealthCheckRequestHealthCheckConfigAlarmIdentifier,
            'insufficient_data_health_status': InsufficientDataHealthStatus,
            'routing_control_arn': str
        }

        self.attribute_map = {
            'ip_address': 'IPAddress',
            'port': 'Port',
            'type': 'Type',
            '_resource_path': 'ResourcePath',
            'fully_qualified_domain_name': 'FullyQualifiedDomainName',
            'search_string': 'SearchString',
            'request_interval': 'RequestInterval',
            'failure_threshold': 'FailureThreshold',
            'measure_latency': 'MeasureLatency',
            'inverted': 'Inverted',
            'disabled': 'Disabled',
            'health_threshold': 'HealthThreshold',
            'child_health_checks': 'ChildHealthChecks',
            'enable_sni': 'EnableSNI',
            'regions': 'Regions',
            'alarm_identifier': 'AlarmIdentifier',
            'insufficient_data_health_status': 'InsufficientDataHealthStatus',
            'routing_control_arn': 'RoutingControlArn'
        }

        self._ip_address = ip_address
        self._port = port
        self._type = type
        self.__resource_path = _resource_path
        self._fully_qualified_domain_name = fully_qualified_domain_name
        self._search_string = search_string
        self._request_interval = request_interval
        self._failure_threshold = failure_threshold
        self._measure_latency = measure_latency
        self._inverted = inverted
        self._disabled = disabled
        self._health_threshold = health_threshold
        self._child_health_checks = child_health_checks
        self._enable_sni = enable_sni
        self._regions = regions
        self._alarm_identifier = alarm_identifier
        self._insufficient_data_health_status = insufficient_data_health_status
        self._routing_control_arn = routing_control_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthCheckConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthCheckConfig of this HealthCheckConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this HealthCheckConfig.


        :return: The ip_address of this HealthCheckConfig.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this HealthCheckConfig.


        :param ip_address: The ip_address of this HealthCheckConfig.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def port(self):
        """Gets the port of this HealthCheckConfig.


        :return: The port of this HealthCheckConfig.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this HealthCheckConfig.


        :param port: The port of this HealthCheckConfig.
        :type port: int
        """

        self._port = port

    @property
    def type(self):
        """Gets the type of this HealthCheckConfig.


        :return: The type of this HealthCheckConfig.
        :rtype: HealthCheckType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HealthCheckConfig.


        :param type: The type of this HealthCheckConfig.
        :type type: HealthCheckType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def _resource_path(self):
        """Gets the _resource_path of this HealthCheckConfig.


        :return: The _resource_path of this HealthCheckConfig.
        :rtype: str
        """
        return self.__resource_path

    @_resource_path.setter
    def _resource_path(self, _resource_path):
        """Sets the _resource_path of this HealthCheckConfig.


        :param _resource_path: The _resource_path of this HealthCheckConfig.
        :type _resource_path: str
        """

        self.__resource_path = _resource_path

    @property
    def fully_qualified_domain_name(self):
        """Gets the fully_qualified_domain_name of this HealthCheckConfig.


        :return: The fully_qualified_domain_name of this HealthCheckConfig.
        :rtype: str
        """
        return self._fully_qualified_domain_name

    @fully_qualified_domain_name.setter
    def fully_qualified_domain_name(self, fully_qualified_domain_name):
        """Sets the fully_qualified_domain_name of this HealthCheckConfig.


        :param fully_qualified_domain_name: The fully_qualified_domain_name of this HealthCheckConfig.
        :type fully_qualified_domain_name: str
        """

        self._fully_qualified_domain_name = fully_qualified_domain_name

    @property
    def search_string(self):
        """Gets the search_string of this HealthCheckConfig.


        :return: The search_string of this HealthCheckConfig.
        :rtype: str
        """
        return self._search_string

    @search_string.setter
    def search_string(self, search_string):
        """Sets the search_string of this HealthCheckConfig.


        :param search_string: The search_string of this HealthCheckConfig.
        :type search_string: str
        """

        self._search_string = search_string

    @property
    def request_interval(self):
        """Gets the request_interval of this HealthCheckConfig.


        :return: The request_interval of this HealthCheckConfig.
        :rtype: int
        """
        return self._request_interval

    @request_interval.setter
    def request_interval(self, request_interval):
        """Sets the request_interval of this HealthCheckConfig.


        :param request_interval: The request_interval of this HealthCheckConfig.
        :type request_interval: int
        """

        self._request_interval = request_interval

    @property
    def failure_threshold(self):
        """Gets the failure_threshold of this HealthCheckConfig.


        :return: The failure_threshold of this HealthCheckConfig.
        :rtype: int
        """
        return self._failure_threshold

    @failure_threshold.setter
    def failure_threshold(self, failure_threshold):
        """Sets the failure_threshold of this HealthCheckConfig.


        :param failure_threshold: The failure_threshold of this HealthCheckConfig.
        :type failure_threshold: int
        """

        self._failure_threshold = failure_threshold

    @property
    def measure_latency(self):
        """Gets the measure_latency of this HealthCheckConfig.


        :return: The measure_latency of this HealthCheckConfig.
        :rtype: bool
        """
        return self._measure_latency

    @measure_latency.setter
    def measure_latency(self, measure_latency):
        """Sets the measure_latency of this HealthCheckConfig.


        :param measure_latency: The measure_latency of this HealthCheckConfig.
        :type measure_latency: bool
        """

        self._measure_latency = measure_latency

    @property
    def inverted(self):
        """Gets the inverted of this HealthCheckConfig.


        :return: The inverted of this HealthCheckConfig.
        :rtype: bool
        """
        return self._inverted

    @inverted.setter
    def inverted(self, inverted):
        """Sets the inverted of this HealthCheckConfig.


        :param inverted: The inverted of this HealthCheckConfig.
        :type inverted: bool
        """

        self._inverted = inverted

    @property
    def disabled(self):
        """Gets the disabled of this HealthCheckConfig.


        :return: The disabled of this HealthCheckConfig.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this HealthCheckConfig.


        :param disabled: The disabled of this HealthCheckConfig.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def health_threshold(self):
        """Gets the health_threshold of this HealthCheckConfig.


        :return: The health_threshold of this HealthCheckConfig.
        :rtype: int
        """
        return self._health_threshold

    @health_threshold.setter
    def health_threshold(self, health_threshold):
        """Sets the health_threshold of this HealthCheckConfig.


        :param health_threshold: The health_threshold of this HealthCheckConfig.
        :type health_threshold: int
        """

        self._health_threshold = health_threshold

    @property
    def child_health_checks(self):
        """Gets the child_health_checks of this HealthCheckConfig.


        :return: The child_health_checks of this HealthCheckConfig.
        :rtype: List
        """
        return self._child_health_checks

    @child_health_checks.setter
    def child_health_checks(self, child_health_checks):
        """Sets the child_health_checks of this HealthCheckConfig.


        :param child_health_checks: The child_health_checks of this HealthCheckConfig.
        :type child_health_checks: List
        """

        self._child_health_checks = child_health_checks

    @property
    def enable_sni(self):
        """Gets the enable_sni of this HealthCheckConfig.


        :return: The enable_sni of this HealthCheckConfig.
        :rtype: bool
        """
        return self._enable_sni

    @enable_sni.setter
    def enable_sni(self, enable_sni):
        """Sets the enable_sni of this HealthCheckConfig.


        :param enable_sni: The enable_sni of this HealthCheckConfig.
        :type enable_sni: bool
        """

        self._enable_sni = enable_sni

    @property
    def regions(self):
        """Gets the regions of this HealthCheckConfig.


        :return: The regions of this HealthCheckConfig.
        :rtype: List
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this HealthCheckConfig.


        :param regions: The regions of this HealthCheckConfig.
        :type regions: List
        """

        self._regions = regions

    @property
    def alarm_identifier(self):
        """Gets the alarm_identifier of this HealthCheckConfig.


        :return: The alarm_identifier of this HealthCheckConfig.
        :rtype: CreateHealthCheckRequestHealthCheckConfigAlarmIdentifier
        """
        return self._alarm_identifier

    @alarm_identifier.setter
    def alarm_identifier(self, alarm_identifier):
        """Sets the alarm_identifier of this HealthCheckConfig.


        :param alarm_identifier: The alarm_identifier of this HealthCheckConfig.
        :type alarm_identifier: CreateHealthCheckRequestHealthCheckConfigAlarmIdentifier
        """

        self._alarm_identifier = alarm_identifier

    @property
    def insufficient_data_health_status(self):
        """Gets the insufficient_data_health_status of this HealthCheckConfig.


        :return: The insufficient_data_health_status of this HealthCheckConfig.
        :rtype: InsufficientDataHealthStatus
        """
        return self._insufficient_data_health_status

    @insufficient_data_health_status.setter
    def insufficient_data_health_status(self, insufficient_data_health_status):
        """Sets the insufficient_data_health_status of this HealthCheckConfig.


        :param insufficient_data_health_status: The insufficient_data_health_status of this HealthCheckConfig.
        :type insufficient_data_health_status: InsufficientDataHealthStatus
        """

        self._insufficient_data_health_status = insufficient_data_health_status

    @property
    def routing_control_arn(self):
        """Gets the routing_control_arn of this HealthCheckConfig.


        :return: The routing_control_arn of this HealthCheckConfig.
        :rtype: str
        """
        return self._routing_control_arn

    @routing_control_arn.setter
    def routing_control_arn(self, routing_control_arn):
        """Sets the routing_control_arn of this HealthCheckConfig.


        :param routing_control_arn: The routing_control_arn of this HealthCheckConfig.
        :type routing_control_arn: str
        """

        self._routing_control_arn = routing_control_arn
