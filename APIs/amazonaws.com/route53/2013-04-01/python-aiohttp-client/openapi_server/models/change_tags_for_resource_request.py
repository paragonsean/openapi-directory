# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_tags_for_resource_request_add_tags_inner import ChangeTagsForResourceRequestAddTagsInner
from openapi_server import util


class ChangeTagsForResourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_tags: List[ChangeTagsForResourceRequestAddTagsInner]=None, remove_tag_keys: List[str]=None):
        """ChangeTagsForResourceRequest - a model defined in OpenAPI

        :param add_tags: The add_tags of this ChangeTagsForResourceRequest.
        :param remove_tag_keys: The remove_tag_keys of this ChangeTagsForResourceRequest.
        """
        self.openapi_types = {
            'add_tags': List[ChangeTagsForResourceRequestAddTagsInner],
            'remove_tag_keys': List[str]
        }

        self.attribute_map = {
            'add_tags': 'AddTags',
            'remove_tag_keys': 'RemoveTagKeys'
        }

        self._add_tags = add_tags
        self._remove_tag_keys = remove_tag_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeTagsForResourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangeTagsForResource_request of this ChangeTagsForResourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_tags(self):
        """Gets the add_tags of this ChangeTagsForResourceRequest.

        <p>A complex type that contains a list of the tags that you want to add to the specified health check or hosted zone and/or the tags that you want to edit <code>Value</code> for.</p> <p>You can add a maximum of 10 tags to a health check or a hosted zone.</p>

        :return: The add_tags of this ChangeTagsForResourceRequest.
        :rtype: List[ChangeTagsForResourceRequestAddTagsInner]
        """
        return self._add_tags

    @add_tags.setter
    def add_tags(self, add_tags):
        """Sets the add_tags of this ChangeTagsForResourceRequest.

        <p>A complex type that contains a list of the tags that you want to add to the specified health check or hosted zone and/or the tags that you want to edit <code>Value</code> for.</p> <p>You can add a maximum of 10 tags to a health check or a hosted zone.</p>

        :param add_tags: The add_tags of this ChangeTagsForResourceRequest.
        :type add_tags: List[ChangeTagsForResourceRequestAddTagsInner]
        """
        if add_tags is not None and len(add_tags) > 10:
            raise ValueError("Invalid value for `add_tags`, number of items must be less than or equal to `10`")
        if add_tags is not None and len(add_tags) < 1:
            raise ValueError("Invalid value for `add_tags`, number of items must be greater than or equal to `1`")

        self._add_tags = add_tags

    @property
    def remove_tag_keys(self):
        """Gets the remove_tag_keys of this ChangeTagsForResourceRequest.

        A complex type that contains a list of the tags that you want to delete from the specified health check or hosted zone. You can specify up to 10 keys.

        :return: The remove_tag_keys of this ChangeTagsForResourceRequest.
        :rtype: List[str]
        """
        return self._remove_tag_keys

    @remove_tag_keys.setter
    def remove_tag_keys(self, remove_tag_keys):
        """Sets the remove_tag_keys of this ChangeTagsForResourceRequest.

        A complex type that contains a list of the tags that you want to delete from the specified health check or hosted zone. You can specify up to 10 keys.

        :param remove_tag_keys: The remove_tag_keys of this ChangeTagsForResourceRequest.
        :type remove_tag_keys: List[str]
        """
        if remove_tag_keys is not None and len(remove_tag_keys) > 10:
            raise ValueError("Invalid value for `remove_tag_keys`, number of items must be less than or equal to `10`")
        if remove_tag_keys is not None and len(remove_tag_keys) < 1:
            raise ValueError("Invalid value for `remove_tag_keys`, number of items must be greater than or equal to `1`")

        self._remove_tag_keys = remove_tag_keys
