# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChangeResourceRecordSetsRequestChangeBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, changes: List=None):
        """ChangeResourceRecordSetsRequestChangeBatch - a model defined in OpenAPI

        :param comment: The comment of this ChangeResourceRecordSetsRequestChangeBatch.
        :param changes: The changes of this ChangeResourceRecordSetsRequestChangeBatch.
        """
        self.openapi_types = {
            'comment': str,
            'changes': List
        }

        self.attribute_map = {
            'comment': 'Comment',
            'changes': 'Changes'
        }

        self._comment = comment
        self._changes = changes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeResourceRecordSetsRequestChangeBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangeResourceRecordSetsRequest_ChangeBatch of this ChangeResourceRecordSetsRequestChangeBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this ChangeResourceRecordSetsRequestChangeBatch.


        :return: The comment of this ChangeResourceRecordSetsRequestChangeBatch.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ChangeResourceRecordSetsRequestChangeBatch.


        :param comment: The comment of this ChangeResourceRecordSetsRequestChangeBatch.
        :type comment: str
        """

        self._comment = comment

    @property
    def changes(self):
        """Gets the changes of this ChangeResourceRecordSetsRequestChangeBatch.


        :return: The changes of this ChangeResourceRecordSetsRequestChangeBatch.
        :rtype: List
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this ChangeResourceRecordSetsRequestChangeBatch.


        :param changes: The changes of this ChangeResourceRecordSetsRequestChangeBatch.
        :type changes: List
        """
        if changes is None:
            raise ValueError("Invalid value for `changes`, must not be `None`")

        self._changes = changes
