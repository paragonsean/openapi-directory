# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AliasTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosted_zone_id: str=None, dns_name: str=None, evaluate_target_health: bool=None):
        """AliasTarget - a model defined in OpenAPI

        :param hosted_zone_id: The hosted_zone_id of this AliasTarget.
        :param dns_name: The dns_name of this AliasTarget.
        :param evaluate_target_health: The evaluate_target_health of this AliasTarget.
        """
        self.openapi_types = {
            'hosted_zone_id': str,
            'dns_name': str,
            'evaluate_target_health': bool
        }

        self.attribute_map = {
            'hosted_zone_id': 'HostedZoneId',
            'dns_name': 'DNSName',
            'evaluate_target_health': 'EvaluateTargetHealth'
        }

        self._hosted_zone_id = hosted_zone_id
        self._dns_name = dns_name
        self._evaluate_target_health = evaluate_target_health

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AliasTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AliasTarget of this AliasTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosted_zone_id(self):
        """Gets the hosted_zone_id of this AliasTarget.


        :return: The hosted_zone_id of this AliasTarget.
        :rtype: str
        """
        return self._hosted_zone_id

    @hosted_zone_id.setter
    def hosted_zone_id(self, hosted_zone_id):
        """Sets the hosted_zone_id of this AliasTarget.


        :param hosted_zone_id: The hosted_zone_id of this AliasTarget.
        :type hosted_zone_id: str
        """
        if hosted_zone_id is None:
            raise ValueError("Invalid value for `hosted_zone_id`, must not be `None`")

        self._hosted_zone_id = hosted_zone_id

    @property
    def dns_name(self):
        """Gets the dns_name of this AliasTarget.


        :return: The dns_name of this AliasTarget.
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this AliasTarget.


        :param dns_name: The dns_name of this AliasTarget.
        :type dns_name: str
        """
        if dns_name is None:
            raise ValueError("Invalid value for `dns_name`, must not be `None`")

        self._dns_name = dns_name

    @property
    def evaluate_target_health(self):
        """Gets the evaluate_target_health of this AliasTarget.


        :return: The evaluate_target_health of this AliasTarget.
        :rtype: bool
        """
        return self._evaluate_target_health

    @evaluate_target_health.setter
    def evaluate_target_health(self, evaluate_target_health):
        """Sets the evaluate_target_health of this AliasTarget.


        :param evaluate_target_health: The evaluate_target_health of this AliasTarget.
        :type evaluate_target_health: bool
        """
        if evaluate_target_health is None:
            raise ValueError("Invalid value for `evaluate_target_health`, must not be `None`")

        self._evaluate_target_health = evaluate_target_health
