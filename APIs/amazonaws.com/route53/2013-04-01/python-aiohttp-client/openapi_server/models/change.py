# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_action import ChangeAction
from openapi_server.models.change_resource_record_set import ChangeResourceRecordSet
from openapi_server import util


class Change(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: ChangeAction=None, resource_record_set: ChangeResourceRecordSet=None):
        """Change - a model defined in OpenAPI

        :param action: The action of this Change.
        :param resource_record_set: The resource_record_set of this Change.
        """
        self.openapi_types = {
            'action': ChangeAction,
            'resource_record_set': ChangeResourceRecordSet
        }

        self.attribute_map = {
            'action': 'Action',
            'resource_record_set': 'ResourceRecordSet'
        }

        self._action = action
        self._resource_record_set = resource_record_set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Change':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Change of this Change.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Change.


        :return: The action of this Change.
        :rtype: ChangeAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Change.


        :param action: The action of this Change.
        :type action: ChangeAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def resource_record_set(self):
        """Gets the resource_record_set of this Change.


        :return: The resource_record_set of this Change.
        :rtype: ChangeResourceRecordSet
        """
        return self._resource_record_set

    @resource_record_set.setter
    def resource_record_set(self, resource_record_set):
        """Sets the resource_record_set of this Change.


        :param resource_record_set: The resource_record_set of this Change.
        :type resource_record_set: ChangeResourceRecordSet
        """
        if resource_record_set is None:
            raise ValueError("Invalid value for `resource_record_set`, must not be `None`")

        self._resource_record_set = resource_record_set
