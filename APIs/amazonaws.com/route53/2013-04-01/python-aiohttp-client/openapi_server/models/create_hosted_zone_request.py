# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associate_vpc_with_hosted_zone_request_vpc import AssociateVPCWithHostedZoneRequestVPC
from openapi_server.models.create_hosted_zone_request_hosted_zone_config import CreateHostedZoneRequestHostedZoneConfig
from openapi_server import util


class CreateHostedZoneRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, vpc: AssociateVPCWithHostedZoneRequestVPC=None, caller_reference: str=None, hosted_zone_config: CreateHostedZoneRequestHostedZoneConfig=None, delegation_set_id: str=None):
        """CreateHostedZoneRequest - a model defined in OpenAPI

        :param name: The name of this CreateHostedZoneRequest.
        :param vpc: The vpc of this CreateHostedZoneRequest.
        :param caller_reference: The caller_reference of this CreateHostedZoneRequest.
        :param hosted_zone_config: The hosted_zone_config of this CreateHostedZoneRequest.
        :param delegation_set_id: The delegation_set_id of this CreateHostedZoneRequest.
        """
        self.openapi_types = {
            'name': str,
            'vpc': AssociateVPCWithHostedZoneRequestVPC,
            'caller_reference': str,
            'hosted_zone_config': CreateHostedZoneRequestHostedZoneConfig,
            'delegation_set_id': str
        }

        self.attribute_map = {
            'name': 'Name',
            'vpc': 'VPC',
            'caller_reference': 'CallerReference',
            'hosted_zone_config': 'HostedZoneConfig',
            'delegation_set_id': 'DelegationSetId'
        }

        self._name = name
        self._vpc = vpc
        self._caller_reference = caller_reference
        self._hosted_zone_config = hosted_zone_config
        self._delegation_set_id = delegation_set_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateHostedZoneRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateHostedZone_request of this CreateHostedZoneRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateHostedZoneRequest.

        <p>The name of the domain. Specify a fully qualified domain name, for example, <i>www.example.com</i>. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats <i>www.example.com</i> (without a trailing dot) and <i>www.example.com.</i> (with a trailing dot) as identical.</p> <p>If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name servers for your domain to the set of <code>NameServers</code> that <code>CreateHostedZone</code> returns in <code>DelegationSet</code>.</p>

        :return: The name of this CreateHostedZoneRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateHostedZoneRequest.

        <p>The name of the domain. Specify a fully qualified domain name, for example, <i>www.example.com</i>. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats <i>www.example.com</i> (without a trailing dot) and <i>www.example.com.</i> (with a trailing dot) as identical.</p> <p>If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name servers for your domain to the set of <code>NameServers</code> that <code>CreateHostedZone</code> returns in <code>DelegationSet</code>.</p>

        :param name: The name of this CreateHostedZoneRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 1024:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1024`")

        self._name = name

    @property
    def vpc(self):
        """Gets the vpc of this CreateHostedZoneRequest.


        :return: The vpc of this CreateHostedZoneRequest.
        :rtype: AssociateVPCWithHostedZoneRequestVPC
        """
        return self._vpc

    @vpc.setter
    def vpc(self, vpc):
        """Sets the vpc of this CreateHostedZoneRequest.


        :param vpc: The vpc of this CreateHostedZoneRequest.
        :type vpc: AssociateVPCWithHostedZoneRequestVPC
        """

        self._vpc = vpc

    @property
    def caller_reference(self):
        """Gets the caller_reference of this CreateHostedZoneRequest.

        A unique string that identifies the request and that allows failed <code>CreateHostedZone</code> requests to be retried without the risk of executing the operation twice. You must use a unique <code>CallerReference</code> string every time you submit a <code>CreateHostedZone</code> request. <code>CallerReference</code> can be any unique string, for example, a date/time stamp.

        :return: The caller_reference of this CreateHostedZoneRequest.
        :rtype: str
        """
        return self._caller_reference

    @caller_reference.setter
    def caller_reference(self, caller_reference):
        """Sets the caller_reference of this CreateHostedZoneRequest.

        A unique string that identifies the request and that allows failed <code>CreateHostedZone</code> requests to be retried without the risk of executing the operation twice. You must use a unique <code>CallerReference</code> string every time you submit a <code>CreateHostedZone</code> request. <code>CallerReference</code> can be any unique string, for example, a date/time stamp.

        :param caller_reference: The caller_reference of this CreateHostedZoneRequest.
        :type caller_reference: str
        """
        if caller_reference is None:
            raise ValueError("Invalid value for `caller_reference`, must not be `None`")
        if caller_reference is not None and len(caller_reference) > 128:
            raise ValueError("Invalid value for `caller_reference`, length must be less than or equal to `128`")
        if caller_reference is not None and len(caller_reference) < 1:
            raise ValueError("Invalid value for `caller_reference`, length must be greater than or equal to `1`")

        self._caller_reference = caller_reference

    @property
    def hosted_zone_config(self):
        """Gets the hosted_zone_config of this CreateHostedZoneRequest.


        :return: The hosted_zone_config of this CreateHostedZoneRequest.
        :rtype: CreateHostedZoneRequestHostedZoneConfig
        """
        return self._hosted_zone_config

    @hosted_zone_config.setter
    def hosted_zone_config(self, hosted_zone_config):
        """Sets the hosted_zone_config of this CreateHostedZoneRequest.


        :param hosted_zone_config: The hosted_zone_config of this CreateHostedZoneRequest.
        :type hosted_zone_config: CreateHostedZoneRequestHostedZoneConfig
        """

        self._hosted_zone_config = hosted_zone_config

    @property
    def delegation_set_id(self):
        """Gets the delegation_set_id of this CreateHostedZoneRequest.

        <p>If you want to associate a reusable delegation set with this hosted zone, the ID that Amazon Route 53 assigned to the reusable delegation set when you created it. For more information about reusable delegation sets, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateReusableDelegationSet.html\">CreateReusableDelegationSet</a>.</p> <p>If you are using a reusable delegation set to create a public hosted zone for a subdomain, make sure that the parent hosted zone doesn't use one or more of the same name servers. If you have overlapping nameservers, the operation will cause a <code>ConflictingDomainsExist</code> error.</p>

        :return: The delegation_set_id of this CreateHostedZoneRequest.
        :rtype: str
        """
        return self._delegation_set_id

    @delegation_set_id.setter
    def delegation_set_id(self, delegation_set_id):
        """Sets the delegation_set_id of this CreateHostedZoneRequest.

        <p>If you want to associate a reusable delegation set with this hosted zone, the ID that Amazon Route 53 assigned to the reusable delegation set when you created it. For more information about reusable delegation sets, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateReusableDelegationSet.html\">CreateReusableDelegationSet</a>.</p> <p>If you are using a reusable delegation set to create a public hosted zone for a subdomain, make sure that the parent hosted zone doesn't use one or more of the same name servers. If you have overlapping nameservers, the operation will cause a <code>ConflictingDomainsExist</code> error.</p>

        :param delegation_set_id: The delegation_set_id of this CreateHostedZoneRequest.
        :type delegation_set_id: str
        """
        if delegation_set_id is not None and len(delegation_set_id) > 32:
            raise ValueError("Invalid value for `delegation_set_id`, length must be less than or equal to `32`")

        self._delegation_set_id = delegation_set_id
