# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListHostedZonesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosted_zones: List=None, marker: str=None, is_truncated: bool=None, next_marker: str=None, max_items: str=None):
        """ListHostedZonesResponse - a model defined in OpenAPI

        :param hosted_zones: The hosted_zones of this ListHostedZonesResponse.
        :param marker: The marker of this ListHostedZonesResponse.
        :param is_truncated: The is_truncated of this ListHostedZonesResponse.
        :param next_marker: The next_marker of this ListHostedZonesResponse.
        :param max_items: The max_items of this ListHostedZonesResponse.
        """
        self.openapi_types = {
            'hosted_zones': List,
            'marker': str,
            'is_truncated': bool,
            'next_marker': str,
            'max_items': str
        }

        self.attribute_map = {
            'hosted_zones': 'HostedZones',
            'marker': 'Marker',
            'is_truncated': 'IsTruncated',
            'next_marker': 'NextMarker',
            'max_items': 'MaxItems'
        }

        self._hosted_zones = hosted_zones
        self._marker = marker
        self._is_truncated = is_truncated
        self._next_marker = next_marker
        self._max_items = max_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListHostedZonesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListHostedZonesResponse of this ListHostedZonesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosted_zones(self):
        """Gets the hosted_zones of this ListHostedZonesResponse.


        :return: The hosted_zones of this ListHostedZonesResponse.
        :rtype: List
        """
        return self._hosted_zones

    @hosted_zones.setter
    def hosted_zones(self, hosted_zones):
        """Sets the hosted_zones of this ListHostedZonesResponse.


        :param hosted_zones: The hosted_zones of this ListHostedZonesResponse.
        :type hosted_zones: List
        """
        if hosted_zones is None:
            raise ValueError("Invalid value for `hosted_zones`, must not be `None`")

        self._hosted_zones = hosted_zones

    @property
    def marker(self):
        """Gets the marker of this ListHostedZonesResponse.


        :return: The marker of this ListHostedZonesResponse.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this ListHostedZonesResponse.


        :param marker: The marker of this ListHostedZonesResponse.
        :type marker: str
        """
        if marker is None:
            raise ValueError("Invalid value for `marker`, must not be `None`")

        self._marker = marker

    @property
    def is_truncated(self):
        """Gets the is_truncated of this ListHostedZonesResponse.


        :return: The is_truncated of this ListHostedZonesResponse.
        :rtype: bool
        """
        return self._is_truncated

    @is_truncated.setter
    def is_truncated(self, is_truncated):
        """Sets the is_truncated of this ListHostedZonesResponse.


        :param is_truncated: The is_truncated of this ListHostedZonesResponse.
        :type is_truncated: bool
        """
        if is_truncated is None:
            raise ValueError("Invalid value for `is_truncated`, must not be `None`")

        self._is_truncated = is_truncated

    @property
    def next_marker(self):
        """Gets the next_marker of this ListHostedZonesResponse.


        :return: The next_marker of this ListHostedZonesResponse.
        :rtype: str
        """
        return self._next_marker

    @next_marker.setter
    def next_marker(self, next_marker):
        """Sets the next_marker of this ListHostedZonesResponse.


        :param next_marker: The next_marker of this ListHostedZonesResponse.
        :type next_marker: str
        """

        self._next_marker = next_marker

    @property
    def max_items(self):
        """Gets the max_items of this ListHostedZonesResponse.


        :return: The max_items of this ListHostedZonesResponse.
        :rtype: str
        """
        return self._max_items

    @max_items.setter
    def max_items(self, max_items):
        """Sets the max_items of this ListHostedZonesResponse.


        :param max_items: The max_items of this ListHostedZonesResponse.
        :type max_items: str
        """
        if max_items is None:
            raise ValueError("Invalid value for `max_items`, must not be `None`")

        self._max_items = max_items
