# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListGeoLocationsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geo_location_details_list: List=None, is_truncated: bool=None, next_continent_code: str=None, next_country_code: str=None, next_subdivision_code: str=None, max_items: str=None):
        """ListGeoLocationsResponse - a model defined in OpenAPI

        :param geo_location_details_list: The geo_location_details_list of this ListGeoLocationsResponse.
        :param is_truncated: The is_truncated of this ListGeoLocationsResponse.
        :param next_continent_code: The next_continent_code of this ListGeoLocationsResponse.
        :param next_country_code: The next_country_code of this ListGeoLocationsResponse.
        :param next_subdivision_code: The next_subdivision_code of this ListGeoLocationsResponse.
        :param max_items: The max_items of this ListGeoLocationsResponse.
        """
        self.openapi_types = {
            'geo_location_details_list': List,
            'is_truncated': bool,
            'next_continent_code': str,
            'next_country_code': str,
            'next_subdivision_code': str,
            'max_items': str
        }

        self.attribute_map = {
            'geo_location_details_list': 'GeoLocationDetailsList',
            'is_truncated': 'IsTruncated',
            'next_continent_code': 'NextContinentCode',
            'next_country_code': 'NextCountryCode',
            'next_subdivision_code': 'NextSubdivisionCode',
            'max_items': 'MaxItems'
        }

        self._geo_location_details_list = geo_location_details_list
        self._is_truncated = is_truncated
        self._next_continent_code = next_continent_code
        self._next_country_code = next_country_code
        self._next_subdivision_code = next_subdivision_code
        self._max_items = max_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListGeoLocationsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListGeoLocationsResponse of this ListGeoLocationsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geo_location_details_list(self):
        """Gets the geo_location_details_list of this ListGeoLocationsResponse.


        :return: The geo_location_details_list of this ListGeoLocationsResponse.
        :rtype: List
        """
        return self._geo_location_details_list

    @geo_location_details_list.setter
    def geo_location_details_list(self, geo_location_details_list):
        """Sets the geo_location_details_list of this ListGeoLocationsResponse.


        :param geo_location_details_list: The geo_location_details_list of this ListGeoLocationsResponse.
        :type geo_location_details_list: List
        """
        if geo_location_details_list is None:
            raise ValueError("Invalid value for `geo_location_details_list`, must not be `None`")

        self._geo_location_details_list = geo_location_details_list

    @property
    def is_truncated(self):
        """Gets the is_truncated of this ListGeoLocationsResponse.


        :return: The is_truncated of this ListGeoLocationsResponse.
        :rtype: bool
        """
        return self._is_truncated

    @is_truncated.setter
    def is_truncated(self, is_truncated):
        """Sets the is_truncated of this ListGeoLocationsResponse.


        :param is_truncated: The is_truncated of this ListGeoLocationsResponse.
        :type is_truncated: bool
        """
        if is_truncated is None:
            raise ValueError("Invalid value for `is_truncated`, must not be `None`")

        self._is_truncated = is_truncated

    @property
    def next_continent_code(self):
        """Gets the next_continent_code of this ListGeoLocationsResponse.


        :return: The next_continent_code of this ListGeoLocationsResponse.
        :rtype: str
        """
        return self._next_continent_code

    @next_continent_code.setter
    def next_continent_code(self, next_continent_code):
        """Sets the next_continent_code of this ListGeoLocationsResponse.


        :param next_continent_code: The next_continent_code of this ListGeoLocationsResponse.
        :type next_continent_code: str
        """

        self._next_continent_code = next_continent_code

    @property
    def next_country_code(self):
        """Gets the next_country_code of this ListGeoLocationsResponse.


        :return: The next_country_code of this ListGeoLocationsResponse.
        :rtype: str
        """
        return self._next_country_code

    @next_country_code.setter
    def next_country_code(self, next_country_code):
        """Sets the next_country_code of this ListGeoLocationsResponse.


        :param next_country_code: The next_country_code of this ListGeoLocationsResponse.
        :type next_country_code: str
        """

        self._next_country_code = next_country_code

    @property
    def next_subdivision_code(self):
        """Gets the next_subdivision_code of this ListGeoLocationsResponse.


        :return: The next_subdivision_code of this ListGeoLocationsResponse.
        :rtype: str
        """
        return self._next_subdivision_code

    @next_subdivision_code.setter
    def next_subdivision_code(self, next_subdivision_code):
        """Sets the next_subdivision_code of this ListGeoLocationsResponse.


        :param next_subdivision_code: The next_subdivision_code of this ListGeoLocationsResponse.
        :type next_subdivision_code: str
        """

        self._next_subdivision_code = next_subdivision_code

    @property
    def max_items(self):
        """Gets the max_items of this ListGeoLocationsResponse.


        :return: The max_items of this ListGeoLocationsResponse.
        :rtype: str
        """
        return self._max_items

    @max_items.setter
    def max_items(self, max_items):
        """Sets the max_items of this ListGeoLocationsResponse.


        :param max_items: The max_items of this ListGeoLocationsResponse.
        :type max_items: str
        """
        if max_items is None:
            raise ValueError("Invalid value for `max_items`, must not be `None`")

        self._max_items = max_items
