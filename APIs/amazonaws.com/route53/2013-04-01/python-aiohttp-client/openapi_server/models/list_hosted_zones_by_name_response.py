# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListHostedZonesByNameResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosted_zones: List=None, dns_name: str=None, hosted_zone_id: str=None, is_truncated: bool=None, next_dns_name: str=None, next_hosted_zone_id: str=None, max_items: str=None):
        """ListHostedZonesByNameResponse - a model defined in OpenAPI

        :param hosted_zones: The hosted_zones of this ListHostedZonesByNameResponse.
        :param dns_name: The dns_name of this ListHostedZonesByNameResponse.
        :param hosted_zone_id: The hosted_zone_id of this ListHostedZonesByNameResponse.
        :param is_truncated: The is_truncated of this ListHostedZonesByNameResponse.
        :param next_dns_name: The next_dns_name of this ListHostedZonesByNameResponse.
        :param next_hosted_zone_id: The next_hosted_zone_id of this ListHostedZonesByNameResponse.
        :param max_items: The max_items of this ListHostedZonesByNameResponse.
        """
        self.openapi_types = {
            'hosted_zones': List,
            'dns_name': str,
            'hosted_zone_id': str,
            'is_truncated': bool,
            'next_dns_name': str,
            'next_hosted_zone_id': str,
            'max_items': str
        }

        self.attribute_map = {
            'hosted_zones': 'HostedZones',
            'dns_name': 'DNSName',
            'hosted_zone_id': 'HostedZoneId',
            'is_truncated': 'IsTruncated',
            'next_dns_name': 'NextDNSName',
            'next_hosted_zone_id': 'NextHostedZoneId',
            'max_items': 'MaxItems'
        }

        self._hosted_zones = hosted_zones
        self._dns_name = dns_name
        self._hosted_zone_id = hosted_zone_id
        self._is_truncated = is_truncated
        self._next_dns_name = next_dns_name
        self._next_hosted_zone_id = next_hosted_zone_id
        self._max_items = max_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListHostedZonesByNameResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListHostedZonesByNameResponse of this ListHostedZonesByNameResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosted_zones(self):
        """Gets the hosted_zones of this ListHostedZonesByNameResponse.


        :return: The hosted_zones of this ListHostedZonesByNameResponse.
        :rtype: List
        """
        return self._hosted_zones

    @hosted_zones.setter
    def hosted_zones(self, hosted_zones):
        """Sets the hosted_zones of this ListHostedZonesByNameResponse.


        :param hosted_zones: The hosted_zones of this ListHostedZonesByNameResponse.
        :type hosted_zones: List
        """
        if hosted_zones is None:
            raise ValueError("Invalid value for `hosted_zones`, must not be `None`")

        self._hosted_zones = hosted_zones

    @property
    def dns_name(self):
        """Gets the dns_name of this ListHostedZonesByNameResponse.


        :return: The dns_name of this ListHostedZonesByNameResponse.
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this ListHostedZonesByNameResponse.


        :param dns_name: The dns_name of this ListHostedZonesByNameResponse.
        :type dns_name: str
        """

        self._dns_name = dns_name

    @property
    def hosted_zone_id(self):
        """Gets the hosted_zone_id of this ListHostedZonesByNameResponse.


        :return: The hosted_zone_id of this ListHostedZonesByNameResponse.
        :rtype: str
        """
        return self._hosted_zone_id

    @hosted_zone_id.setter
    def hosted_zone_id(self, hosted_zone_id):
        """Sets the hosted_zone_id of this ListHostedZonesByNameResponse.


        :param hosted_zone_id: The hosted_zone_id of this ListHostedZonesByNameResponse.
        :type hosted_zone_id: str
        """

        self._hosted_zone_id = hosted_zone_id

    @property
    def is_truncated(self):
        """Gets the is_truncated of this ListHostedZonesByNameResponse.


        :return: The is_truncated of this ListHostedZonesByNameResponse.
        :rtype: bool
        """
        return self._is_truncated

    @is_truncated.setter
    def is_truncated(self, is_truncated):
        """Sets the is_truncated of this ListHostedZonesByNameResponse.


        :param is_truncated: The is_truncated of this ListHostedZonesByNameResponse.
        :type is_truncated: bool
        """
        if is_truncated is None:
            raise ValueError("Invalid value for `is_truncated`, must not be `None`")

        self._is_truncated = is_truncated

    @property
    def next_dns_name(self):
        """Gets the next_dns_name of this ListHostedZonesByNameResponse.


        :return: The next_dns_name of this ListHostedZonesByNameResponse.
        :rtype: str
        """
        return self._next_dns_name

    @next_dns_name.setter
    def next_dns_name(self, next_dns_name):
        """Sets the next_dns_name of this ListHostedZonesByNameResponse.


        :param next_dns_name: The next_dns_name of this ListHostedZonesByNameResponse.
        :type next_dns_name: str
        """

        self._next_dns_name = next_dns_name

    @property
    def next_hosted_zone_id(self):
        """Gets the next_hosted_zone_id of this ListHostedZonesByNameResponse.


        :return: The next_hosted_zone_id of this ListHostedZonesByNameResponse.
        :rtype: str
        """
        return self._next_hosted_zone_id

    @next_hosted_zone_id.setter
    def next_hosted_zone_id(self, next_hosted_zone_id):
        """Sets the next_hosted_zone_id of this ListHostedZonesByNameResponse.


        :param next_hosted_zone_id: The next_hosted_zone_id of this ListHostedZonesByNameResponse.
        :type next_hosted_zone_id: str
        """

        self._next_hosted_zone_id = next_hosted_zone_id

    @property
    def max_items(self):
        """Gets the max_items of this ListHostedZonesByNameResponse.


        :return: The max_items of this ListHostedZonesByNameResponse.
        :rtype: str
        """
        return self._max_items

    @max_items.setter
    def max_items(self, max_items):
        """Sets the max_items of this ListHostedZonesByNameResponse.


        :param max_items: The max_items of this ListHostedZonesByNameResponse.
        :type max_items: str
        """
        if max_items is None:
            raise ValueError("Invalid value for `max_items`, must not be `None`")

        self._max_items = max_items
