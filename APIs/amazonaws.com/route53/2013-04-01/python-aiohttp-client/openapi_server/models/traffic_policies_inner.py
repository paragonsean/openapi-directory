# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rr_type import RRType
from openapi_server import util


class TrafficPoliciesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, version: int=None, name: str=None, type: RRType=None, document: str=None, comment: str=None):
        """TrafficPoliciesInner - a model defined in OpenAPI

        :param id: The id of this TrafficPoliciesInner.
        :param version: The version of this TrafficPoliciesInner.
        :param name: The name of this TrafficPoliciesInner.
        :param type: The type of this TrafficPoliciesInner.
        :param document: The document of this TrafficPoliciesInner.
        :param comment: The comment of this TrafficPoliciesInner.
        """
        self.openapi_types = {
            'id': str,
            'version': int,
            'name': str,
            'type': RRType,
            'document': str,
            'comment': str
        }

        self.attribute_map = {
            'id': 'Id',
            'version': 'Version',
            'name': 'Name',
            'type': 'Type',
            'document': 'Document',
            'comment': 'Comment'
        }

        self._id = id
        self._version = version
        self._name = name
        self._type = type
        self._document = document
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrafficPoliciesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrafficPolicies_inner of this TrafficPoliciesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TrafficPoliciesInner.


        :return: The id of this TrafficPoliciesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrafficPoliciesInner.


        :param id: The id of this TrafficPoliciesInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def version(self):
        """Gets the version of this TrafficPoliciesInner.


        :return: The version of this TrafficPoliciesInner.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TrafficPoliciesInner.


        :param version: The version of this TrafficPoliciesInner.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def name(self):
        """Gets the name of this TrafficPoliciesInner.


        :return: The name of this TrafficPoliciesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrafficPoliciesInner.


        :param name: The name of this TrafficPoliciesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this TrafficPoliciesInner.


        :return: The type of this TrafficPoliciesInner.
        :rtype: RRType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TrafficPoliciesInner.


        :param type: The type of this TrafficPoliciesInner.
        :type type: RRType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def document(self):
        """Gets the document of this TrafficPoliciesInner.


        :return: The document of this TrafficPoliciesInner.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this TrafficPoliciesInner.


        :param document: The document of this TrafficPoliciesInner.
        :type document: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def comment(self):
        """Gets the comment of this TrafficPoliciesInner.


        :return: The comment of this TrafficPoliciesInner.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TrafficPoliciesInner.


        :param comment: The comment of this TrafficPoliciesInner.
        :type comment: str
        """

        self._comment = comment
