# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
import re
from openapi_server import util


class StartImportFileTaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_bucket: str=None, data_source_type: str=None, group_id: List[Group]=None, name: str=None, s3bucket_for_report_data: str=None, s3key: str=None):
        """StartImportFileTaskRequest - a model defined in OpenAPI

        :param s3_bucket: The s3_bucket of this StartImportFileTaskRequest.
        :param data_source_type: The data_source_type of this StartImportFileTaskRequest.
        :param group_id: The group_id of this StartImportFileTaskRequest.
        :param name: The name of this StartImportFileTaskRequest.
        :param s3bucket_for_report_data: The s3bucket_for_report_data of this StartImportFileTaskRequest.
        :param s3key: The s3key of this StartImportFileTaskRequest.
        """
        self.openapi_types = {
            's3_bucket': str,
            'data_source_type': str,
            'group_id': List[Group],
            'name': str,
            's3bucket_for_report_data': str,
            's3key': str
        }

        self.attribute_map = {
            's3_bucket': 'S3Bucket',
            'data_source_type': 'dataSourceType',
            'group_id': 'groupId',
            'name': 'name',
            's3bucket_for_report_data': 's3bucketForReportData',
            's3key': 's3key'
        }

        self._s3_bucket = s3_bucket
        self._data_source_type = data_source_type
        self._group_id = group_id
        self._name = name
        self._s3bucket_for_report_data = s3bucket_for_report_data
        self._s3key = s3key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartImportFileTaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartImportFileTask_request of this StartImportFileTaskRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_bucket(self):
        """Gets the s3_bucket of this StartImportFileTaskRequest.

         The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.

        :return: The s3_bucket of this StartImportFileTaskRequest.
        :rtype: str
        """
        return self._s3_bucket

    @s3_bucket.setter
    def s3_bucket(self, s3_bucket):
        """Sets the s3_bucket of this StartImportFileTaskRequest.

         The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.

        :param s3_bucket: The s3_bucket of this StartImportFileTaskRequest.
        :type s3_bucket: str
        """
        if s3_bucket is None:
            raise ValueError("Invalid value for `s3_bucket`, must not be `None`")
        if s3_bucket is not None and len(s3_bucket) > 63:
            raise ValueError("Invalid value for `s3_bucket`, length must be less than or equal to `63`")
        if s3_bucket is not None and len(s3_bucket) < 0:
            raise ValueError("Invalid value for `s3_bucket`, length must be greater than or equal to `0`")
        if s3_bucket is not None and not re.search(r'[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+', s3_bucket):
            raise ValueError("Invalid value for `s3_bucket`, must be a follow pattern or equal to `/[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+/`")

        self._s3_bucket = s3_bucket

    @property
    def data_source_type(self):
        """Gets the data_source_type of this StartImportFileTaskRequest.

        Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. 

        :return: The data_source_type of this StartImportFileTaskRequest.
        :rtype: str
        """
        return self._data_source_type

    @data_source_type.setter
    def data_source_type(self, data_source_type):
        """Sets the data_source_type of this StartImportFileTaskRequest.

        Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. 

        :param data_source_type: The data_source_type of this StartImportFileTaskRequest.
        :type data_source_type: str
        """
        allowed_values = ["ApplicationDiscoveryService", "MPA", "Import"]  # noqa: E501
        if data_source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_source_type` ({0}), must be one of {1}"
                .format(data_source_type, allowed_values)
            )

        self._data_source_type = data_source_type

    @property
    def group_id(self):
        """Gets the group_id of this StartImportFileTaskRequest.

        Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. 

        :return: The group_id of this StartImportFileTaskRequest.
        :rtype: List[Group]
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this StartImportFileTaskRequest.

        Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. 

        :param group_id: The group_id of this StartImportFileTaskRequest.
        :type group_id: List[Group]
        """

        self._group_id = group_id

    @property
    def name(self):
        """Gets the name of this StartImportFileTaskRequest.

         A descriptive name for the request. 

        :return: The name of this StartImportFileTaskRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StartImportFileTaskRequest.

         A descriptive name for the request. 

        :param name: The name of this StartImportFileTaskRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[a-zA-Z0-9_-]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9_-]+/`")

        self._name = name

    @property
    def s3bucket_for_report_data(self):
        """Gets the s3bucket_for_report_data of this StartImportFileTaskRequest.

         The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. 

        :return: The s3bucket_for_report_data of this StartImportFileTaskRequest.
        :rtype: str
        """
        return self._s3bucket_for_report_data

    @s3bucket_for_report_data.setter
    def s3bucket_for_report_data(self, s3bucket_for_report_data):
        """Sets the s3bucket_for_report_data of this StartImportFileTaskRequest.

         The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. 

        :param s3bucket_for_report_data: The s3bucket_for_report_data of this StartImportFileTaskRequest.
        :type s3bucket_for_report_data: str
        """
        if s3bucket_for_report_data is not None and len(s3bucket_for_report_data) > 63:
            raise ValueError("Invalid value for `s3bucket_for_report_data`, length must be less than or equal to `63`")
        if s3bucket_for_report_data is not None and len(s3bucket_for_report_data) < 0:
            raise ValueError("Invalid value for `s3bucket_for_report_data`, length must be greater than or equal to `0`")
        if s3bucket_for_report_data is not None and not re.search(r'[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+', s3bucket_for_report_data):
            raise ValueError("Invalid value for `s3bucket_for_report_data`, must be a follow pattern or equal to `/[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+/`")

        self._s3bucket_for_report_data = s3bucket_for_report_data

    @property
    def s3key(self):
        """Gets the s3key of this StartImportFileTaskRequest.

         The Amazon S3 key name of the import file. 

        :return: The s3key of this StartImportFileTaskRequest.
        :rtype: str
        """
        return self._s3key

    @s3key.setter
    def s3key(self, s3key):
        """Sets the s3key of this StartImportFileTaskRequest.

         The Amazon S3 key name of the import file. 

        :param s3key: The s3key of this StartImportFileTaskRequest.
        :type s3key: str
        """
        if s3key is None:
            raise ValueError("Invalid value for `s3key`, must not be `None`")
        if s3key is not None and len(s3key) > 1024:
            raise ValueError("Invalid value for `s3key`, length must be less than or equal to `1024`")
        if s3key is not None and len(s3key) < 0:
            raise ValueError("Invalid value for `s3key`, length must be greater than or equal to `0`")
        if s3key is not None and not re.search(r'.*\S.*', s3key):
            raise ValueError("Invalid value for `s3key`, must be a follow pattern or equal to `/.*\S.*/`")

        self._s3key = s3key
