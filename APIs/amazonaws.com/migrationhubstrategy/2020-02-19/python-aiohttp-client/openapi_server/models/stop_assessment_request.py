# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StopAssessmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment_id: str=None):
        """StopAssessmentRequest - a model defined in OpenAPI

        :param assessment_id: The assessment_id of this StopAssessmentRequest.
        """
        self.openapi_types = {
            'assessment_id': str
        }

        self.attribute_map = {
            'assessment_id': 'assessmentId'
        }

        self._assessment_id = assessment_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StopAssessmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StopAssessment_request of this StopAssessmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment_id(self):
        """Gets the assessment_id of this StopAssessmentRequest.

         The <code>assessmentId</code> returned by <a>StartAssessment</a>. 

        :return: The assessment_id of this StopAssessmentRequest.
        :rtype: str
        """
        return self._assessment_id

    @assessment_id.setter
    def assessment_id(self, assessment_id):
        """Sets the assessment_id of this StopAssessmentRequest.

         The <code>assessmentId</code> returned by <a>StartAssessment</a>. 

        :param assessment_id: The assessment_id of this StopAssessmentRequest.
        :type assessment_id: str
        """
        if assessment_id is None:
            raise ValueError("Invalid value for `assessment_id`, must not be `None`")
        if assessment_id is not None and len(assessment_id) > 52:
            raise ValueError("Invalid value for `assessment_id`, length must be less than or equal to `52`")
        if assessment_id is not None and len(assessment_id) < 0:
            raise ValueError("Invalid value for `assessment_id`, length must be greater than or equal to `0`")
        if assessment_id is not None and not re.search(r'[0-9a-z-:]+', assessment_id):
            raise ValueError("Invalid value for `assessment_id`, must be a follow pattern or equal to `/[0-9a-z-:]+/`")

        self._assessment_id = assessment_id
