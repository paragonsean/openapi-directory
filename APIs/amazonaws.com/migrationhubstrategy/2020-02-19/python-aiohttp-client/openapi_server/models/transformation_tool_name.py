# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransformationToolName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    APP2CONTAINER = 'App2Container'
    PORTING_ASSISTANT_FOR_PERIOD_NET = 'Porting Assistant For .NET'
    END_OF_SUPPORT_MIGRATION = 'End of Support Migration'
    WINDOWS_WEB_APPLICATION_MIGRATION_ASSISTANT = 'Windows Web Application Migration Assistant'
    APPLICATION_MIGRATION_SERVICE = 'Application Migration Service'
    STRATEGY_RECOMMENDATION_SUPPORT = 'Strategy Recommendation Support'
    IN_PLACE_OPERATING_SYSTEM_UPGRADE = 'In Place Operating System Upgrade'
    SCHEMA_CONVERSION_TOOL = 'Schema Conversion Tool'
    DATABASE_MIGRATION_SERVICE = 'Database Migration Service'
    NATIVE_SQL_SERVER_BACKUP_SLASH_RESTORE = 'Native SQL Server Backup/Restore'

    def __init__(self):
        """TransformationToolName - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransformationToolName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransformationToolName of this TransformationToolName.
        """
        return util.deserialize_model(dikt, cls)
