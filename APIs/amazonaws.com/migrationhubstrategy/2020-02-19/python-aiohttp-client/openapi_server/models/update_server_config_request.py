# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_application_component_config_request_strategy_option import UpdateApplicationComponentConfigRequestStrategyOption
import re
from openapi_server import util


class UpdateServerConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, server_id: str=None, strategy_option: UpdateApplicationComponentConfigRequestStrategyOption=None):
        """UpdateServerConfigRequest - a model defined in OpenAPI

        :param server_id: The server_id of this UpdateServerConfigRequest.
        :param strategy_option: The strategy_option of this UpdateServerConfigRequest.
        """
        self.openapi_types = {
            'server_id': str,
            'strategy_option': UpdateApplicationComponentConfigRequestStrategyOption
        }

        self.attribute_map = {
            'server_id': 'serverId',
            'strategy_option': 'strategyOption'
        }

        self._server_id = server_id
        self._strategy_option = strategy_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateServerConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateServerConfig_request of this UpdateServerConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server_id(self):
        """Gets the server_id of this UpdateServerConfigRequest.

         The ID of the server. 

        :return: The server_id of this UpdateServerConfigRequest.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this UpdateServerConfigRequest.

         The ID of the server. 

        :param server_id: The server_id of this UpdateServerConfigRequest.
        :type server_id: str
        """
        if server_id is None:
            raise ValueError("Invalid value for `server_id`, must not be `None`")
        if server_id is not None and len(server_id) > 27:
            raise ValueError("Invalid value for `server_id`, length must be less than or equal to `27`")
        if server_id is not None and len(server_id) < 1:
            raise ValueError("Invalid value for `server_id`, length must be greater than or equal to `1`")
        if server_id is not None and not re.search(r'.*\S.*', server_id):
            raise ValueError("Invalid value for `server_id`, must be a follow pattern or equal to `/.*\S.*/`")

        self._server_id = server_id

    @property
    def strategy_option(self):
        """Gets the strategy_option of this UpdateServerConfigRequest.


        :return: The strategy_option of this UpdateServerConfigRequest.
        :rtype: UpdateApplicationComponentConfigRequestStrategyOption
        """
        return self._strategy_option

    @strategy_option.setter
    def strategy_option(self, strategy_option):
        """Sets the strategy_option of this UpdateServerConfigRequest.


        :param strategy_option: The strategy_option of this UpdateServerConfigRequest.
        :type strategy_option: UpdateApplicationComponentConfigRequestStrategyOption
        """

        self._strategy_option = strategy_option
