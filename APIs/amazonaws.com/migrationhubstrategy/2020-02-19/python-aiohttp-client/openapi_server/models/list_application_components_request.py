# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
import re
from openapi_server import util


class ListApplicationComponentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_component_criteria: str=None, filter_value: str=None, group_id_filter: List[Group]=None, max_results: int=None, next_token: str=None, sort: str=None):
        """ListApplicationComponentsRequest - a model defined in OpenAPI

        :param application_component_criteria: The application_component_criteria of this ListApplicationComponentsRequest.
        :param filter_value: The filter_value of this ListApplicationComponentsRequest.
        :param group_id_filter: The group_id_filter of this ListApplicationComponentsRequest.
        :param max_results: The max_results of this ListApplicationComponentsRequest.
        :param next_token: The next_token of this ListApplicationComponentsRequest.
        :param sort: The sort of this ListApplicationComponentsRequest.
        """
        self.openapi_types = {
            'application_component_criteria': str,
            'filter_value': str,
            'group_id_filter': List[Group],
            'max_results': int,
            'next_token': str,
            'sort': str
        }

        self.attribute_map = {
            'application_component_criteria': 'applicationComponentCriteria',
            'filter_value': 'filterValue',
            'group_id_filter': 'groupIdFilter',
            'max_results': 'maxResults',
            'next_token': 'nextToken',
            'sort': 'sort'
        }

        self._application_component_criteria = application_component_criteria
        self._filter_value = filter_value
        self._group_id_filter = group_id_filter
        self._max_results = max_results
        self._next_token = next_token
        self._sort = sort

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListApplicationComponentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListApplicationComponents_request of this ListApplicationComponentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_component_criteria(self):
        """Gets the application_component_criteria of this ListApplicationComponentsRequest.

         Criteria for filtering the list of application components. 

        :return: The application_component_criteria of this ListApplicationComponentsRequest.
        :rtype: str
        """
        return self._application_component_criteria

    @application_component_criteria.setter
    def application_component_criteria(self, application_component_criteria):
        """Sets the application_component_criteria of this ListApplicationComponentsRequest.

         Criteria for filtering the list of application components. 

        :param application_component_criteria: The application_component_criteria of this ListApplicationComponentsRequest.
        :type application_component_criteria: str
        """
        allowed_values = ["NOT_DEFINED", "APP_NAME", "SERVER_ID", "APP_TYPE", "STRATEGY", "DESTINATION", "ANALYSIS_STATUS", "ERROR_CATEGORY"]  # noqa: E501
        if application_component_criteria not in allowed_values:
            raise ValueError(
                "Invalid value for `application_component_criteria` ({0}), must be one of {1}"
                .format(application_component_criteria, allowed_values)
            )

        self._application_component_criteria = application_component_criteria

    @property
    def filter_value(self):
        """Gets the filter_value of this ListApplicationComponentsRequest.

         Specify the value based on the application component criteria type. For example, if <code>applicationComponentCriteria</code> is set to <code>SERVER_ID</code> and <code>filterValue</code> is set to <code>server1</code>, then <a>ListApplicationComponents</a> returns all the application components running on server1. 

        :return: The filter_value of this ListApplicationComponentsRequest.
        :rtype: str
        """
        return self._filter_value

    @filter_value.setter
    def filter_value(self, filter_value):
        """Sets the filter_value of this ListApplicationComponentsRequest.

         Specify the value based on the application component criteria type. For example, if <code>applicationComponentCriteria</code> is set to <code>SERVER_ID</code> and <code>filterValue</code> is set to <code>server1</code>, then <a>ListApplicationComponents</a> returns all the application components running on server1. 

        :param filter_value: The filter_value of this ListApplicationComponentsRequest.
        :type filter_value: str
        """
        if filter_value is not None and len(filter_value) > 256:
            raise ValueError("Invalid value for `filter_value`, length must be less than or equal to `256`")
        if filter_value is not None and len(filter_value) < 0:
            raise ValueError("Invalid value for `filter_value`, length must be greater than or equal to `0`")
        if filter_value is not None and not re.search(r'.*\S.*', filter_value):
            raise ValueError("Invalid value for `filter_value`, must be a follow pattern or equal to `/.*\S.*/`")

        self._filter_value = filter_value

    @property
    def group_id_filter(self):
        """Gets the group_id_filter of this ListApplicationComponentsRequest.

         The group ID specified in to filter on. 

        :return: The group_id_filter of this ListApplicationComponentsRequest.
        :rtype: List[Group]
        """
        return self._group_id_filter

    @group_id_filter.setter
    def group_id_filter(self, group_id_filter):
        """Sets the group_id_filter of this ListApplicationComponentsRequest.

         The group ID specified in to filter on. 

        :param group_id_filter: The group_id_filter of this ListApplicationComponentsRequest.
        :type group_id_filter: List[Group]
        """

        self._group_id_filter = group_id_filter

    @property
    def max_results(self):
        """Gets the max_results of this ListApplicationComponentsRequest.

         The maximum number of items to include in the response. The maximum value is 100. 

        :return: The max_results of this ListApplicationComponentsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListApplicationComponentsRequest.

         The maximum number of items to include in the response. The maximum value is 100. 

        :param max_results: The max_results of this ListApplicationComponentsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListApplicationComponentsRequest.

         The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. 

        :return: The next_token of this ListApplicationComponentsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListApplicationComponentsRequest.

         The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. 

        :param next_token: The next_token of this ListApplicationComponentsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")
        if next_token is not None and not re.search(r'.*\S.*', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/.*\S.*/`")

        self._next_token = next_token

    @property
    def sort(self):
        """Gets the sort of this ListApplicationComponentsRequest.

         Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. 

        :return: The sort of this ListApplicationComponentsRequest.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ListApplicationComponentsRequest.

         Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. 

        :param sort: The sort of this ListApplicationComponentsRequest.
        :type sort: str
        """
        allowed_values = ["ASC", "DESC"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"
                .format(sort, allowed_values)
            )

        self._sort = sort
