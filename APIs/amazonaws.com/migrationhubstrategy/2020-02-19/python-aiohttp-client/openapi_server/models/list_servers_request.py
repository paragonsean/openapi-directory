# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
import re
from openapi_server import util


class ListServersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_value: str=None, group_id_filter: List[Group]=None, max_results: int=None, next_token: str=None, server_criteria: str=None, sort: str=None):
        """ListServersRequest - a model defined in OpenAPI

        :param filter_value: The filter_value of this ListServersRequest.
        :param group_id_filter: The group_id_filter of this ListServersRequest.
        :param max_results: The max_results of this ListServersRequest.
        :param next_token: The next_token of this ListServersRequest.
        :param server_criteria: The server_criteria of this ListServersRequest.
        :param sort: The sort of this ListServersRequest.
        """
        self.openapi_types = {
            'filter_value': str,
            'group_id_filter': List[Group],
            'max_results': int,
            'next_token': str,
            'server_criteria': str,
            'sort': str
        }

        self.attribute_map = {
            'filter_value': 'filterValue',
            'group_id_filter': 'groupIdFilter',
            'max_results': 'maxResults',
            'next_token': 'nextToken',
            'server_criteria': 'serverCriteria',
            'sort': 'sort'
        }

        self._filter_value = filter_value
        self._group_id_filter = group_id_filter
        self._max_results = max_results
        self._next_token = next_token
        self._server_criteria = server_criteria
        self._sort = sort

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListServersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListServers_request of this ListServersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_value(self):
        """Gets the filter_value of this ListServersRequest.

         Specifies the filter value, which is based on the type of server criteria. For example, if <code>serverCriteria</code> is <code>OS_NAME</code>, and the <code>filterValue</code> is equal to <code>WindowsServer</code>, then <code>ListServers</code> returns all of the servers matching the OS name <code>WindowsServer</code>. 

        :return: The filter_value of this ListServersRequest.
        :rtype: str
        """
        return self._filter_value

    @filter_value.setter
    def filter_value(self, filter_value):
        """Sets the filter_value of this ListServersRequest.

         Specifies the filter value, which is based on the type of server criteria. For example, if <code>serverCriteria</code> is <code>OS_NAME</code>, and the <code>filterValue</code> is equal to <code>WindowsServer</code>, then <code>ListServers</code> returns all of the servers matching the OS name <code>WindowsServer</code>. 

        :param filter_value: The filter_value of this ListServersRequest.
        :type filter_value: str
        """
        if filter_value is not None and len(filter_value) > 1024:
            raise ValueError("Invalid value for `filter_value`, length must be less than or equal to `1024`")
        if filter_value is not None and len(filter_value) < 0:
            raise ValueError("Invalid value for `filter_value`, length must be greater than or equal to `0`")
        if filter_value is not None and not re.search(r'.*\S.*', filter_value):
            raise ValueError("Invalid value for `filter_value`, must be a follow pattern or equal to `/.*\S.*/`")

        self._filter_value = filter_value

    @property
    def group_id_filter(self):
        """Gets the group_id_filter of this ListServersRequest.

         Specifies the group ID to filter on. 

        :return: The group_id_filter of this ListServersRequest.
        :rtype: List[Group]
        """
        return self._group_id_filter

    @group_id_filter.setter
    def group_id_filter(self, group_id_filter):
        """Sets the group_id_filter of this ListServersRequest.

         Specifies the group ID to filter on. 

        :param group_id_filter: The group_id_filter of this ListServersRequest.
        :type group_id_filter: List[Group]
        """

        self._group_id_filter = group_id_filter

    @property
    def max_results(self):
        """Gets the max_results of this ListServersRequest.

         The maximum number of items to include in the response. The maximum value is 100. 

        :return: The max_results of this ListServersRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListServersRequest.

         The maximum number of items to include in the response. The maximum value is 100. 

        :param max_results: The max_results of this ListServersRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListServersRequest.

         The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. 

        :return: The next_token of this ListServersRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListServersRequest.

         The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. 

        :param next_token: The next_token of this ListServersRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")
        if next_token is not None and not re.search(r'.*\S.*', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/.*\S.*/`")

        self._next_token = next_token

    @property
    def server_criteria(self):
        """Gets the server_criteria of this ListServersRequest.

         Criteria for filtering servers. 

        :return: The server_criteria of this ListServersRequest.
        :rtype: str
        """
        return self._server_criteria

    @server_criteria.setter
    def server_criteria(self, server_criteria):
        """Sets the server_criteria of this ListServersRequest.

         Criteria for filtering servers. 

        :param server_criteria: The server_criteria of this ListServersRequest.
        :type server_criteria: str
        """
        allowed_values = ["NOT_DEFINED", "OS_NAME", "STRATEGY", "DESTINATION", "SERVER_ID", "ANALYSIS_STATUS", "ERROR_CATEGORY"]  # noqa: E501
        if server_criteria not in allowed_values:
            raise ValueError(
                "Invalid value for `server_criteria` ({0}), must be one of {1}"
                .format(server_criteria, allowed_values)
            )

        self._server_criteria = server_criteria

    @property
    def sort(self):
        """Gets the sort of this ListServersRequest.

         Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. 

        :return: The sort of this ListServersRequest.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ListServersRequest.

         Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. 

        :param sort: The sort of this ListServersRequest.
        :type sort: str
        """
        allowed_values = ["ASC", "DESC"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"
                .format(sort, allowed_values)
            )

        self._sort = sort
