# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_type import AnalysisType
from openapi_server.models.result_analysis_status import ResultAnalysisStatus
from openapi_server import util


class Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_status: ResultAnalysisStatus=None, analysis_type: AnalysisType=None, antipattern_report_result_list: List=None, status_message: str=None):
        """Result - a model defined in OpenAPI

        :param analysis_status: The analysis_status of this Result.
        :param analysis_type: The analysis_type of this Result.
        :param antipattern_report_result_list: The antipattern_report_result_list of this Result.
        :param status_message: The status_message of this Result.
        """
        self.openapi_types = {
            'analysis_status': ResultAnalysisStatus,
            'analysis_type': AnalysisType,
            'antipattern_report_result_list': List,
            'status_message': str
        }

        self.attribute_map = {
            'analysis_status': 'analysisStatus',
            'analysis_type': 'analysisType',
            'antipattern_report_result_list': 'antipatternReportResultList',
            'status_message': 'statusMessage'
        }

        self._analysis_status = analysis_status
        self._analysis_type = analysis_type
        self._antipattern_report_result_list = antipattern_report_result_list
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Result of this Result.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_status(self):
        """Gets the analysis_status of this Result.


        :return: The analysis_status of this Result.
        :rtype: ResultAnalysisStatus
        """
        return self._analysis_status

    @analysis_status.setter
    def analysis_status(self, analysis_status):
        """Sets the analysis_status of this Result.


        :param analysis_status: The analysis_status of this Result.
        :type analysis_status: ResultAnalysisStatus
        """

        self._analysis_status = analysis_status

    @property
    def analysis_type(self):
        """Gets the analysis_type of this Result.


        :return: The analysis_type of this Result.
        :rtype: AnalysisType
        """
        return self._analysis_type

    @analysis_type.setter
    def analysis_type(self, analysis_type):
        """Sets the analysis_type of this Result.


        :param analysis_type: The analysis_type of this Result.
        :type analysis_type: AnalysisType
        """

        self._analysis_type = analysis_type

    @property
    def antipattern_report_result_list(self):
        """Gets the antipattern_report_result_list of this Result.


        :return: The antipattern_report_result_list of this Result.
        :rtype: List
        """
        return self._antipattern_report_result_list

    @antipattern_report_result_list.setter
    def antipattern_report_result_list(self, antipattern_report_result_list):
        """Sets the antipattern_report_result_list of this Result.


        :param antipattern_report_result_list: The antipattern_report_result_list of this Result.
        :type antipattern_report_result_list: List
        """

        self._antipattern_report_result_list = antipattern_report_result_list

    @property
    def status_message(self):
        """Gets the status_message of this Result.


        :return: The status_message of this Result.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this Result.


        :param status_message: The status_message of this Result.
        :type status_message: str
        """

        self._status_message = status_message
