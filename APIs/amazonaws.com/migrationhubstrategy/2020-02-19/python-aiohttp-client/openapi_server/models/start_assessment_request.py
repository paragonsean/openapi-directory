# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assessment_target import AssessmentTarget
import re
from openapi_server import util


class StartAssessmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment_targets: List[AssessmentTarget]=None, s3bucket_for_analysis_data: str=None, s3bucket_for_report_data: str=None):
        """StartAssessmentRequest - a model defined in OpenAPI

        :param assessment_targets: The assessment_targets of this StartAssessmentRequest.
        :param s3bucket_for_analysis_data: The s3bucket_for_analysis_data of this StartAssessmentRequest.
        :param s3bucket_for_report_data: The s3bucket_for_report_data of this StartAssessmentRequest.
        """
        self.openapi_types = {
            'assessment_targets': List[AssessmentTarget],
            's3bucket_for_analysis_data': str,
            's3bucket_for_report_data': str
        }

        self.attribute_map = {
            'assessment_targets': 'assessmentTargets',
            's3bucket_for_analysis_data': 's3bucketForAnalysisData',
            's3bucket_for_report_data': 's3bucketForReportData'
        }

        self._assessment_targets = assessment_targets
        self._s3bucket_for_analysis_data = s3bucket_for_analysis_data
        self._s3bucket_for_report_data = s3bucket_for_report_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartAssessmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartAssessment_request of this StartAssessmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment_targets(self):
        """Gets the assessment_targets of this StartAssessmentRequest.

        List of criteria for assessment.

        :return: The assessment_targets of this StartAssessmentRequest.
        :rtype: List[AssessmentTarget]
        """
        return self._assessment_targets

    @assessment_targets.setter
    def assessment_targets(self, assessment_targets):
        """Sets the assessment_targets of this StartAssessmentRequest.

        List of criteria for assessment.

        :param assessment_targets: The assessment_targets of this StartAssessmentRequest.
        :type assessment_targets: List[AssessmentTarget]
        """
        if assessment_targets is not None and len(assessment_targets) > 10:
            raise ValueError("Invalid value for `assessment_targets`, number of items must be less than or equal to `10`")
        if assessment_targets is not None and len(assessment_targets) < 0:
            raise ValueError("Invalid value for `assessment_targets`, number of items must be greater than or equal to `0`")

        self._assessment_targets = assessment_targets

    @property
    def s3bucket_for_analysis_data(self):
        """Gets the s3bucket_for_analysis_data of this StartAssessmentRequest.

         The S3 bucket used by the collectors to send analysis data to the service. The bucket name must begin with <code>migrationhub-strategy-</code>. 

        :return: The s3bucket_for_analysis_data of this StartAssessmentRequest.
        :rtype: str
        """
        return self._s3bucket_for_analysis_data

    @s3bucket_for_analysis_data.setter
    def s3bucket_for_analysis_data(self, s3bucket_for_analysis_data):
        """Sets the s3bucket_for_analysis_data of this StartAssessmentRequest.

         The S3 bucket used by the collectors to send analysis data to the service. The bucket name must begin with <code>migrationhub-strategy-</code>. 

        :param s3bucket_for_analysis_data: The s3bucket_for_analysis_data of this StartAssessmentRequest.
        :type s3bucket_for_analysis_data: str
        """
        if s3bucket_for_analysis_data is not None and len(s3bucket_for_analysis_data) > 63:
            raise ValueError("Invalid value for `s3bucket_for_analysis_data`, length must be less than or equal to `63`")
        if s3bucket_for_analysis_data is not None and len(s3bucket_for_analysis_data) < 0:
            raise ValueError("Invalid value for `s3bucket_for_analysis_data`, length must be greater than or equal to `0`")
        if s3bucket_for_analysis_data is not None and not re.search(r'[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+', s3bucket_for_analysis_data):
            raise ValueError("Invalid value for `s3bucket_for_analysis_data`, must be a follow pattern or equal to `/[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+/`")

        self._s3bucket_for_analysis_data = s3bucket_for_analysis_data

    @property
    def s3bucket_for_report_data(self):
        """Gets the s3bucket_for_report_data of this StartAssessmentRequest.

         The S3 bucket where all the reports generated by the service are stored. The bucket name must begin with <code>migrationhub-strategy-</code>. 

        :return: The s3bucket_for_report_data of this StartAssessmentRequest.
        :rtype: str
        """
        return self._s3bucket_for_report_data

    @s3bucket_for_report_data.setter
    def s3bucket_for_report_data(self, s3bucket_for_report_data):
        """Sets the s3bucket_for_report_data of this StartAssessmentRequest.

         The S3 bucket where all the reports generated by the service are stored. The bucket name must begin with <code>migrationhub-strategy-</code>. 

        :param s3bucket_for_report_data: The s3bucket_for_report_data of this StartAssessmentRequest.
        :type s3bucket_for_report_data: str
        """
        if s3bucket_for_report_data is not None and len(s3bucket_for_report_data) > 63:
            raise ValueError("Invalid value for `s3bucket_for_report_data`, length must be less than or equal to `63`")
        if s3bucket_for_report_data is not None and len(s3bucket_for_report_data) < 0:
            raise ValueError("Invalid value for `s3bucket_for_report_data`, length must be greater than or equal to `0`")
        if s3bucket_for_report_data is not None and not re.search(r'[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+', s3bucket_for_report_data):
            raise ValueError("Invalid value for `s3bucket_for_report_data`, must be a follow pattern or equal to `/[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+/`")

        self._s3bucket_for_report_data = s3bucket_for_report_data
