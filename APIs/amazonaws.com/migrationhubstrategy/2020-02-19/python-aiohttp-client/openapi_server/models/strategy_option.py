# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.strategy import Strategy
from openapi_server.models.target_destination import TargetDestination
from openapi_server.models.transformation_tool_name import TransformationToolName
from openapi_server import util


class StrategyOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_preferred: bool=None, strategy: Strategy=None, target_destination: TargetDestination=None, tool_name: TransformationToolName=None):
        """StrategyOption - a model defined in OpenAPI

        :param is_preferred: The is_preferred of this StrategyOption.
        :param strategy: The strategy of this StrategyOption.
        :param target_destination: The target_destination of this StrategyOption.
        :param tool_name: The tool_name of this StrategyOption.
        """
        self.openapi_types = {
            'is_preferred': bool,
            'strategy': Strategy,
            'target_destination': TargetDestination,
            'tool_name': TransformationToolName
        }

        self.attribute_map = {
            'is_preferred': 'isPreferred',
            'strategy': 'strategy',
            'target_destination': 'targetDestination',
            'tool_name': 'toolName'
        }

        self._is_preferred = is_preferred
        self._strategy = strategy
        self._target_destination = target_destination
        self._tool_name = tool_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StrategyOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StrategyOption of this StrategyOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_preferred(self):
        """Gets the is_preferred of this StrategyOption.


        :return: The is_preferred of this StrategyOption.
        :rtype: bool
        """
        return self._is_preferred

    @is_preferred.setter
    def is_preferred(self, is_preferred):
        """Sets the is_preferred of this StrategyOption.


        :param is_preferred: The is_preferred of this StrategyOption.
        :type is_preferred: bool
        """

        self._is_preferred = is_preferred

    @property
    def strategy(self):
        """Gets the strategy of this StrategyOption.


        :return: The strategy of this StrategyOption.
        :rtype: Strategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this StrategyOption.


        :param strategy: The strategy of this StrategyOption.
        :type strategy: Strategy
        """

        self._strategy = strategy

    @property
    def target_destination(self):
        """Gets the target_destination of this StrategyOption.


        :return: The target_destination of this StrategyOption.
        :rtype: TargetDestination
        """
        return self._target_destination

    @target_destination.setter
    def target_destination(self, target_destination):
        """Sets the target_destination of this StrategyOption.


        :param target_destination: The target_destination of this StrategyOption.
        :type target_destination: TargetDestination
        """

        self._target_destination = target_destination

    @property
    def tool_name(self):
        """Gets the tool_name of this StrategyOption.


        :return: The tool_name of this StrategyOption.
        :rtype: TransformationToolName
        """
        return self._tool_name

    @tool_name.setter
    def tool_name(self, tool_name):
        """Sets the tool_name of this StrategyOption.


        :param tool_name: The tool_name of this StrategyOption.
        :type tool_name: TransformationToolName
        """

        self._tool_name = tool_name
