# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_portfolio_preferences_request_application_preferences import PutPortfolioPreferencesRequestApplicationPreferences
from openapi_server.models.put_portfolio_preferences_request_database_preferences import PutPortfolioPreferencesRequestDatabasePreferences
from openapi_server.models.put_portfolio_preferences_request_prioritize_business_goals import PutPortfolioPreferencesRequestPrioritizeBusinessGoals
from openapi_server import util


class PutPortfolioPreferencesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_mode: str=None, application_preferences: PutPortfolioPreferencesRequestApplicationPreferences=None, database_preferences: PutPortfolioPreferencesRequestDatabasePreferences=None, prioritize_business_goals: PutPortfolioPreferencesRequestPrioritizeBusinessGoals=None):
        """PutPortfolioPreferencesRequest - a model defined in OpenAPI

        :param application_mode: The application_mode of this PutPortfolioPreferencesRequest.
        :param application_preferences: The application_preferences of this PutPortfolioPreferencesRequest.
        :param database_preferences: The database_preferences of this PutPortfolioPreferencesRequest.
        :param prioritize_business_goals: The prioritize_business_goals of this PutPortfolioPreferencesRequest.
        """
        self.openapi_types = {
            'application_mode': str,
            'application_preferences': PutPortfolioPreferencesRequestApplicationPreferences,
            'database_preferences': PutPortfolioPreferencesRequestDatabasePreferences,
            'prioritize_business_goals': PutPortfolioPreferencesRequestPrioritizeBusinessGoals
        }

        self.attribute_map = {
            'application_mode': 'applicationMode',
            'application_preferences': 'applicationPreferences',
            'database_preferences': 'databasePreferences',
            'prioritize_business_goals': 'prioritizeBusinessGoals'
        }

        self._application_mode = application_mode
        self._application_preferences = application_preferences
        self._database_preferences = database_preferences
        self._prioritize_business_goals = prioritize_business_goals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutPortfolioPreferencesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutPortfolioPreferences_request of this PutPortfolioPreferencesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_mode(self):
        """Gets the application_mode of this PutPortfolioPreferencesRequest.

        The classification for application component types.

        :return: The application_mode of this PutPortfolioPreferencesRequest.
        :rtype: str
        """
        return self._application_mode

    @application_mode.setter
    def application_mode(self, application_mode):
        """Sets the application_mode of this PutPortfolioPreferencesRequest.

        The classification for application component types.

        :param application_mode: The application_mode of this PutPortfolioPreferencesRequest.
        :type application_mode: str
        """
        allowed_values = ["ALL", "KNOWN", "UNKNOWN"]  # noqa: E501
        if application_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `application_mode` ({0}), must be one of {1}"
                .format(application_mode, allowed_values)
            )

        self._application_mode = application_mode

    @property
    def application_preferences(self):
        """Gets the application_preferences of this PutPortfolioPreferencesRequest.


        :return: The application_preferences of this PutPortfolioPreferencesRequest.
        :rtype: PutPortfolioPreferencesRequestApplicationPreferences
        """
        return self._application_preferences

    @application_preferences.setter
    def application_preferences(self, application_preferences):
        """Sets the application_preferences of this PutPortfolioPreferencesRequest.


        :param application_preferences: The application_preferences of this PutPortfolioPreferencesRequest.
        :type application_preferences: PutPortfolioPreferencesRequestApplicationPreferences
        """

        self._application_preferences = application_preferences

    @property
    def database_preferences(self):
        """Gets the database_preferences of this PutPortfolioPreferencesRequest.


        :return: The database_preferences of this PutPortfolioPreferencesRequest.
        :rtype: PutPortfolioPreferencesRequestDatabasePreferences
        """
        return self._database_preferences

    @database_preferences.setter
    def database_preferences(self, database_preferences):
        """Sets the database_preferences of this PutPortfolioPreferencesRequest.


        :param database_preferences: The database_preferences of this PutPortfolioPreferencesRequest.
        :type database_preferences: PutPortfolioPreferencesRequestDatabasePreferences
        """

        self._database_preferences = database_preferences

    @property
    def prioritize_business_goals(self):
        """Gets the prioritize_business_goals of this PutPortfolioPreferencesRequest.


        :return: The prioritize_business_goals of this PutPortfolioPreferencesRequest.
        :rtype: PutPortfolioPreferencesRequestPrioritizeBusinessGoals
        """
        return self._prioritize_business_goals

    @prioritize_business_goals.setter
    def prioritize_business_goals(self, prioritize_business_goals):
        """Sets the prioritize_business_goals of this PutPortfolioPreferencesRequest.


        :param prioritize_business_goals: The prioritize_business_goals of this PutPortfolioPreferencesRequest.
        :type prioritize_business_goals: PutPortfolioPreferencesRequestPrioritizeBusinessGoals
        """

        self._prioritize_business_goals = prioritize_business_goals
