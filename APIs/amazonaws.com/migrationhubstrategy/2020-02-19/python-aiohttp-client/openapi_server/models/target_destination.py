# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    NONE_SPECIFIED = 'None specified'
    AWS_ELASTIC_BEANSTALK = 'AWS Elastic BeanStalk'
    AWS_FARGATE = 'AWS Fargate'
    AMAZON_ELASTIC_CLOUD_COMPUTE_LEFT_PARENTHESIS_EC2_RIGHT_PARENTHESIS = 'Amazon Elastic Cloud Compute (EC2)'
    AMAZON_ELASTIC_CONTAINER_SERVICE_LEFT_PARENTHESIS_ECS_RIGHT_PARENTHESIS = 'Amazon Elastic Container Service (ECS)'
    AMAZON_ELASTIC_KUBERNETES_SERVICE_LEFT_PARENTHESIS_EKS_RIGHT_PARENTHESIS = 'Amazon Elastic Kubernetes Service (EKS)'
    AURORA_MYSQL = 'Aurora MySQL'
    AURORA_POSTGRESQL = 'Aurora PostgreSQL'
    AMAZON_RELATIONAL_DATABASE_SERVICE_ON_MYSQL = 'Amazon Relational Database Service on MySQL'
    AMAZON_RELATIONAL_DATABASE_SERVICE_ON_POSTGRESQL = 'Amazon Relational Database Service on PostgreSQL'
    AMAZON_DOCUMENTDB = 'Amazon DocumentDB'
    AMAZON_DYNAMODB = 'Amazon DynamoDB'
    AMAZON_RELATIONAL_DATABASE_SERVICE = 'Amazon Relational Database Service'
    BABELFISH_FOR_AURORA_POSTGRESQL = 'Babelfish for Aurora PostgreSQL'

    def __init__(self):
        """TargetDestination - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetDestination of this TargetDestination.
        """
        return util.deserialize_model(dikt, cls)
