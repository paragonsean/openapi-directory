# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_code import SourceCode
from openapi_server.models.update_application_component_config_request_strategy_option import UpdateApplicationComponentConfigRequestStrategyOption
import re
from openapi_server import util


class UpdateApplicationComponentConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_type: str=None, application_component_id: str=None, configure_only: bool=None, inclusion_status: str=None, secrets_manager_key: str=None, source_code_list: List[SourceCode]=None, strategy_option: UpdateApplicationComponentConfigRequestStrategyOption=None):
        """UpdateApplicationComponentConfigRequest - a model defined in OpenAPI

        :param app_type: The app_type of this UpdateApplicationComponentConfigRequest.
        :param application_component_id: The application_component_id of this UpdateApplicationComponentConfigRequest.
        :param configure_only: The configure_only of this UpdateApplicationComponentConfigRequest.
        :param inclusion_status: The inclusion_status of this UpdateApplicationComponentConfigRequest.
        :param secrets_manager_key: The secrets_manager_key of this UpdateApplicationComponentConfigRequest.
        :param source_code_list: The source_code_list of this UpdateApplicationComponentConfigRequest.
        :param strategy_option: The strategy_option of this UpdateApplicationComponentConfigRequest.
        """
        self.openapi_types = {
            'app_type': str,
            'application_component_id': str,
            'configure_only': bool,
            'inclusion_status': str,
            'secrets_manager_key': str,
            'source_code_list': List[SourceCode],
            'strategy_option': UpdateApplicationComponentConfigRequestStrategyOption
        }

        self.attribute_map = {
            'app_type': 'appType',
            'application_component_id': 'applicationComponentId',
            'configure_only': 'configureOnly',
            'inclusion_status': 'inclusionStatus',
            'secrets_manager_key': 'secretsManagerKey',
            'source_code_list': 'sourceCodeList',
            'strategy_option': 'strategyOption'
        }

        self._app_type = app_type
        self._application_component_id = application_component_id
        self._configure_only = configure_only
        self._inclusion_status = inclusion_status
        self._secrets_manager_key = secrets_manager_key
        self._source_code_list = source_code_list
        self._strategy_option = strategy_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateApplicationComponentConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateApplicationComponentConfig_request of this UpdateApplicationComponentConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_type(self):
        """Gets the app_type of this UpdateApplicationComponentConfigRequest.

        The type of known component.

        :return: The app_type of this UpdateApplicationComponentConfigRequest.
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this UpdateApplicationComponentConfigRequest.

        The type of known component.

        :param app_type: The app_type of this UpdateApplicationComponentConfigRequest.
        :type app_type: str
        """
        allowed_values = ["DotNetFramework", "Java", "SQLServer", "IIS", "Oracle", "Other", "Tomcat", "JBoss", "Spring", "Mongo DB", "DB2", "Maria DB", "MySQL", "Sybase", "PostgreSQLServer", "Cassandra", "IBM WebSphere", "Oracle WebLogic", "Visual Basic", "Unknown", "DotnetCore", "Dotnet"]  # noqa: E501
        if app_type not in allowed_values:
            raise ValueError(
                "Invalid value for `app_type` ({0}), must be one of {1}"
                .format(app_type, allowed_values)
            )

        self._app_type = app_type

    @property
    def application_component_id(self):
        """Gets the application_component_id of this UpdateApplicationComponentConfigRequest.

         The ID of the application component. The ID is unique within an AWS account. 

        :return: The application_component_id of this UpdateApplicationComponentConfigRequest.
        :rtype: str
        """
        return self._application_component_id

    @application_component_id.setter
    def application_component_id(self, application_component_id):
        """Sets the application_component_id of this UpdateApplicationComponentConfigRequest.

         The ID of the application component. The ID is unique within an AWS account. 

        :param application_component_id: The application_component_id of this UpdateApplicationComponentConfigRequest.
        :type application_component_id: str
        """
        if application_component_id is None:
            raise ValueError("Invalid value for `application_component_id`, must not be `None`")
        if application_component_id is not None and len(application_component_id) > 44:
            raise ValueError("Invalid value for `application_component_id`, length must be less than or equal to `44`")
        if application_component_id is not None and len(application_component_id) < 0:
            raise ValueError("Invalid value for `application_component_id`, length must be greater than or equal to `0`")
        if application_component_id is not None and not re.search(r'[0-9a-zA-Z-]+', application_component_id):
            raise ValueError("Invalid value for `application_component_id`, must be a follow pattern or equal to `/[0-9a-zA-Z-]+/`")

        self._application_component_id = application_component_id

    @property
    def configure_only(self):
        """Gets the configure_only of this UpdateApplicationComponentConfigRequest.

        Update the configuration request of an application component. If it is set to true, the source code and/or database credentials are updated. If it is set to false, the source code and/or database credentials are updated and an analysis is initiated.

        :return: The configure_only of this UpdateApplicationComponentConfigRequest.
        :rtype: bool
        """
        return self._configure_only

    @configure_only.setter
    def configure_only(self, configure_only):
        """Sets the configure_only of this UpdateApplicationComponentConfigRequest.

        Update the configuration request of an application component. If it is set to true, the source code and/or database credentials are updated. If it is set to false, the source code and/or database credentials are updated and an analysis is initiated.

        :param configure_only: The configure_only of this UpdateApplicationComponentConfigRequest.
        :type configure_only: bool
        """

        self._configure_only = configure_only

    @property
    def inclusion_status(self):
        """Gets the inclusion_status of this UpdateApplicationComponentConfigRequest.

         Indicates whether the application component has been included for server recommendation or not. 

        :return: The inclusion_status of this UpdateApplicationComponentConfigRequest.
        :rtype: str
        """
        return self._inclusion_status

    @inclusion_status.setter
    def inclusion_status(self, inclusion_status):
        """Sets the inclusion_status of this UpdateApplicationComponentConfigRequest.

         Indicates whether the application component has been included for server recommendation or not. 

        :param inclusion_status: The inclusion_status of this UpdateApplicationComponentConfigRequest.
        :type inclusion_status: str
        """
        allowed_values = ["excludeFromAssessment", "includeInAssessment"]  # noqa: E501
        if inclusion_status not in allowed_values:
            raise ValueError(
                "Invalid value for `inclusion_status` ({0}), must be one of {1}"
                .format(inclusion_status, allowed_values)
            )

        self._inclusion_status = inclusion_status

    @property
    def secrets_manager_key(self):
        """Gets the secrets_manager_key of this UpdateApplicationComponentConfigRequest.

         Database credentials. 

        :return: The secrets_manager_key of this UpdateApplicationComponentConfigRequest.
        :rtype: str
        """
        return self._secrets_manager_key

    @secrets_manager_key.setter
    def secrets_manager_key(self, secrets_manager_key):
        """Sets the secrets_manager_key of this UpdateApplicationComponentConfigRequest.

         Database credentials. 

        :param secrets_manager_key: The secrets_manager_key of this UpdateApplicationComponentConfigRequest.
        :type secrets_manager_key: str
        """
        if secrets_manager_key is not None and len(secrets_manager_key) > 512:
            raise ValueError("Invalid value for `secrets_manager_key`, length must be less than or equal to `512`")
        if secrets_manager_key is not None and len(secrets_manager_key) < 1:
            raise ValueError("Invalid value for `secrets_manager_key`, length must be greater than or equal to `1`")
        if secrets_manager_key is not None and not re.search(r'.*', secrets_manager_key):
            raise ValueError("Invalid value for `secrets_manager_key`, must be a follow pattern or equal to `/.*/`")

        self._secrets_manager_key = secrets_manager_key

    @property
    def source_code_list(self):
        """Gets the source_code_list of this UpdateApplicationComponentConfigRequest.

         The list of source code configurations to update for the application component. 

        :return: The source_code_list of this UpdateApplicationComponentConfigRequest.
        :rtype: List[SourceCode]
        """
        return self._source_code_list

    @source_code_list.setter
    def source_code_list(self, source_code_list):
        """Sets the source_code_list of this UpdateApplicationComponentConfigRequest.

         The list of source code configurations to update for the application component. 

        :param source_code_list: The source_code_list of this UpdateApplicationComponentConfigRequest.
        :type source_code_list: List[SourceCode]
        """

        self._source_code_list = source_code_list

    @property
    def strategy_option(self):
        """Gets the strategy_option of this UpdateApplicationComponentConfigRequest.


        :return: The strategy_option of this UpdateApplicationComponentConfigRequest.
        :rtype: UpdateApplicationComponentConfigRequestStrategyOption
        """
        return self._strategy_option

    @strategy_option.setter
    def strategy_option(self, strategy_option):
        """Sets the strategy_option of this UpdateApplicationComponentConfigRequest.


        :param strategy_option: The strategy_option of this UpdateApplicationComponentConfigRequest.
        :type strategy_option: UpdateApplicationComponentConfigRequestStrategyOption
        """

        self._strategy_option = strategy_option
