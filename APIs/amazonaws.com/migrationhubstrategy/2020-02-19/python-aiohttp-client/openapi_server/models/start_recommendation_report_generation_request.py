# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
from openapi_server import util


class StartRecommendationReportGenerationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id_filter: List[Group]=None, output_format: str=None):
        """StartRecommendationReportGenerationRequest - a model defined in OpenAPI

        :param group_id_filter: The group_id_filter of this StartRecommendationReportGenerationRequest.
        :param output_format: The output_format of this StartRecommendationReportGenerationRequest.
        """
        self.openapi_types = {
            'group_id_filter': List[Group],
            'output_format': str
        }

        self.attribute_map = {
            'group_id_filter': 'groupIdFilter',
            'output_format': 'outputFormat'
        }

        self._group_id_filter = group_id_filter
        self._output_format = output_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartRecommendationReportGenerationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartRecommendationReportGeneration_request of this StartRecommendationReportGenerationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id_filter(self):
        """Gets the group_id_filter of this StartRecommendationReportGenerationRequest.

         Groups the resources in the recommendation report with a unique name. 

        :return: The group_id_filter of this StartRecommendationReportGenerationRequest.
        :rtype: List[Group]
        """
        return self._group_id_filter

    @group_id_filter.setter
    def group_id_filter(self, group_id_filter):
        """Sets the group_id_filter of this StartRecommendationReportGenerationRequest.

         Groups the resources in the recommendation report with a unique name. 

        :param group_id_filter: The group_id_filter of this StartRecommendationReportGenerationRequest.
        :type group_id_filter: List[Group]
        """

        self._group_id_filter = group_id_filter

    @property
    def output_format(self):
        """Gets the output_format of this StartRecommendationReportGenerationRequest.

         The output format for the recommendation report file. The default format is Microsoft Excel. 

        :return: The output_format of this StartRecommendationReportGenerationRequest.
        :rtype: str
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this StartRecommendationReportGenerationRequest.

         The output format for the recommendation report file. The default format is Microsoft Excel. 

        :param output_format: The output_format of this StartRecommendationReportGenerationRequest.
        :type output_format: str
        """
        allowed_values = ["Excel", "Json"]  # noqa: E501
        if output_format not in allowed_values:
            raise ValueError(
                "Invalid value for `output_format` ({0}), must be one of {1}"
                .format(output_format, allowed_values)
            )

        self._output_format = output_format
