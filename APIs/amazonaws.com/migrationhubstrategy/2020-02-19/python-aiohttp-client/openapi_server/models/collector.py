# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collector_configuration_summary import CollectorConfigurationSummary
from openapi_server.models.collector_health import CollectorHealth
from openapi_server import util


class Collector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collector_health: CollectorHealth=None, collector_id: str=None, collector_version: str=None, configuration_summary: CollectorConfigurationSummary=None, host_name: str=None, ip_address: str=None, last_activity_time_stamp: str=None, registered_time_stamp: str=None):
        """Collector - a model defined in OpenAPI

        :param collector_health: The collector_health of this Collector.
        :param collector_id: The collector_id of this Collector.
        :param collector_version: The collector_version of this Collector.
        :param configuration_summary: The configuration_summary of this Collector.
        :param host_name: The host_name of this Collector.
        :param ip_address: The ip_address of this Collector.
        :param last_activity_time_stamp: The last_activity_time_stamp of this Collector.
        :param registered_time_stamp: The registered_time_stamp of this Collector.
        """
        self.openapi_types = {
            'collector_health': CollectorHealth,
            'collector_id': str,
            'collector_version': str,
            'configuration_summary': CollectorConfigurationSummary,
            'host_name': str,
            'ip_address': str,
            'last_activity_time_stamp': str,
            'registered_time_stamp': str
        }

        self.attribute_map = {
            'collector_health': 'collectorHealth',
            'collector_id': 'collectorId',
            'collector_version': 'collectorVersion',
            'configuration_summary': 'configurationSummary',
            'host_name': 'hostName',
            'ip_address': 'ipAddress',
            'last_activity_time_stamp': 'lastActivityTimeStamp',
            'registered_time_stamp': 'registeredTimeStamp'
        }

        self._collector_health = collector_health
        self._collector_id = collector_id
        self._collector_version = collector_version
        self._configuration_summary = configuration_summary
        self._host_name = host_name
        self._ip_address = ip_address
        self._last_activity_time_stamp = last_activity_time_stamp
        self._registered_time_stamp = registered_time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Collector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Collector of this Collector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collector_health(self):
        """Gets the collector_health of this Collector.


        :return: The collector_health of this Collector.
        :rtype: CollectorHealth
        """
        return self._collector_health

    @collector_health.setter
    def collector_health(self, collector_health):
        """Sets the collector_health of this Collector.


        :param collector_health: The collector_health of this Collector.
        :type collector_health: CollectorHealth
        """

        self._collector_health = collector_health

    @property
    def collector_id(self):
        """Gets the collector_id of this Collector.


        :return: The collector_id of this Collector.
        :rtype: str
        """
        return self._collector_id

    @collector_id.setter
    def collector_id(self, collector_id):
        """Sets the collector_id of this Collector.


        :param collector_id: The collector_id of this Collector.
        :type collector_id: str
        """

        self._collector_id = collector_id

    @property
    def collector_version(self):
        """Gets the collector_version of this Collector.


        :return: The collector_version of this Collector.
        :rtype: str
        """
        return self._collector_version

    @collector_version.setter
    def collector_version(self, collector_version):
        """Sets the collector_version of this Collector.


        :param collector_version: The collector_version of this Collector.
        :type collector_version: str
        """

        self._collector_version = collector_version

    @property
    def configuration_summary(self):
        """Gets the configuration_summary of this Collector.


        :return: The configuration_summary of this Collector.
        :rtype: CollectorConfigurationSummary
        """
        return self._configuration_summary

    @configuration_summary.setter
    def configuration_summary(self, configuration_summary):
        """Sets the configuration_summary of this Collector.


        :param configuration_summary: The configuration_summary of this Collector.
        :type configuration_summary: CollectorConfigurationSummary
        """

        self._configuration_summary = configuration_summary

    @property
    def host_name(self):
        """Gets the host_name of this Collector.


        :return: The host_name of this Collector.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this Collector.


        :param host_name: The host_name of this Collector.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def ip_address(self):
        """Gets the ip_address of this Collector.


        :return: The ip_address of this Collector.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Collector.


        :param ip_address: The ip_address of this Collector.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def last_activity_time_stamp(self):
        """Gets the last_activity_time_stamp of this Collector.


        :return: The last_activity_time_stamp of this Collector.
        :rtype: str
        """
        return self._last_activity_time_stamp

    @last_activity_time_stamp.setter
    def last_activity_time_stamp(self, last_activity_time_stamp):
        """Sets the last_activity_time_stamp of this Collector.


        :param last_activity_time_stamp: The last_activity_time_stamp of this Collector.
        :type last_activity_time_stamp: str
        """

        self._last_activity_time_stamp = last_activity_time_stamp

    @property
    def registered_time_stamp(self):
        """Gets the registered_time_stamp of this Collector.


        :return: The registered_time_stamp of this Collector.
        :rtype: str
        """
        return self._registered_time_stamp

    @registered_time_stamp.setter
    def registered_time_stamp(self, registered_time_stamp):
        """Sets the registered_time_stamp of this Collector.


        :param registered_time_stamp: The registered_time_stamp of this Collector.
        :type registered_time_stamp: str
        """

        self._registered_time_stamp = registered_time_stamp
