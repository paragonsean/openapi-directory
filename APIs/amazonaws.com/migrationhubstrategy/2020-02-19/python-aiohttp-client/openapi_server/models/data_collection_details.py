# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assessment_status import AssessmentStatus
from openapi_server import util


class DataCollectionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completion_time: datetime=None, failed: int=None, in_progress: int=None, servers: int=None, start_time: datetime=None, status: AssessmentStatus=None, status_message: str=None, success: int=None):
        """DataCollectionDetails - a model defined in OpenAPI

        :param completion_time: The completion_time of this DataCollectionDetails.
        :param failed: The failed of this DataCollectionDetails.
        :param in_progress: The in_progress of this DataCollectionDetails.
        :param servers: The servers of this DataCollectionDetails.
        :param start_time: The start_time of this DataCollectionDetails.
        :param status: The status of this DataCollectionDetails.
        :param status_message: The status_message of this DataCollectionDetails.
        :param success: The success of this DataCollectionDetails.
        """
        self.openapi_types = {
            'completion_time': datetime,
            'failed': int,
            'in_progress': int,
            'servers': int,
            'start_time': datetime,
            'status': AssessmentStatus,
            'status_message': str,
            'success': int
        }

        self.attribute_map = {
            'completion_time': 'completionTime',
            'failed': 'failed',
            'in_progress': 'inProgress',
            'servers': 'servers',
            'start_time': 'startTime',
            'status': 'status',
            'status_message': 'statusMessage',
            'success': 'success'
        }

        self._completion_time = completion_time
        self._failed = failed
        self._in_progress = in_progress
        self._servers = servers
        self._start_time = start_time
        self._status = status
        self._status_message = status_message
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataCollectionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataCollectionDetails of this DataCollectionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completion_time(self):
        """Gets the completion_time of this DataCollectionDetails.


        :return: The completion_time of this DataCollectionDetails.
        :rtype: datetime
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this DataCollectionDetails.


        :param completion_time: The completion_time of this DataCollectionDetails.
        :type completion_time: datetime
        """

        self._completion_time = completion_time

    @property
    def failed(self):
        """Gets the failed of this DataCollectionDetails.


        :return: The failed of this DataCollectionDetails.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this DataCollectionDetails.


        :param failed: The failed of this DataCollectionDetails.
        :type failed: int
        """

        self._failed = failed

    @property
    def in_progress(self):
        """Gets the in_progress of this DataCollectionDetails.


        :return: The in_progress of this DataCollectionDetails.
        :rtype: int
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this DataCollectionDetails.


        :param in_progress: The in_progress of this DataCollectionDetails.
        :type in_progress: int
        """

        self._in_progress = in_progress

    @property
    def servers(self):
        """Gets the servers of this DataCollectionDetails.


        :return: The servers of this DataCollectionDetails.
        :rtype: int
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this DataCollectionDetails.


        :param servers: The servers of this DataCollectionDetails.
        :type servers: int
        """

        self._servers = servers

    @property
    def start_time(self):
        """Gets the start_time of this DataCollectionDetails.


        :return: The start_time of this DataCollectionDetails.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DataCollectionDetails.


        :param start_time: The start_time of this DataCollectionDetails.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this DataCollectionDetails.


        :return: The status of this DataCollectionDetails.
        :rtype: AssessmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataCollectionDetails.


        :param status: The status of this DataCollectionDetails.
        :type status: AssessmentStatus
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this DataCollectionDetails.


        :return: The status_message of this DataCollectionDetails.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this DataCollectionDetails.


        :param status_message: The status_message of this DataCollectionDetails.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def success(self):
        """Gets the success of this DataCollectionDetails.


        :return: The success of this DataCollectionDetails.
        :rtype: int
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this DataCollectionDetails.


        :param success: The success of this DataCollectionDetails.
        :type success: int
        """

        self._success = success
