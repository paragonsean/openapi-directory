# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interface_name: str=None, ip_address: str=None, mac_address: str=None, net_mask: str=None):
        """NetworkInfo - a model defined in OpenAPI

        :param interface_name: The interface_name of this NetworkInfo.
        :param ip_address: The ip_address of this NetworkInfo.
        :param mac_address: The mac_address of this NetworkInfo.
        :param net_mask: The net_mask of this NetworkInfo.
        """
        self.openapi_types = {
            'interface_name': str,
            'ip_address': str,
            'mac_address': str,
            'net_mask': str
        }

        self.attribute_map = {
            'interface_name': 'interfaceName',
            'ip_address': 'ipAddress',
            'mac_address': 'macAddress',
            'net_mask': 'netMask'
        }

        self._interface_name = interface_name
        self._ip_address = ip_address
        self._mac_address = mac_address
        self._net_mask = net_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkInfo of this NetworkInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interface_name(self):
        """Gets the interface_name of this NetworkInfo.


        :return: The interface_name of this NetworkInfo.
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this NetworkInfo.


        :param interface_name: The interface_name of this NetworkInfo.
        :type interface_name: str
        """
        if interface_name is None:
            raise ValueError("Invalid value for `interface_name`, must not be `None`")

        self._interface_name = interface_name

    @property
    def ip_address(self):
        """Gets the ip_address of this NetworkInfo.


        :return: The ip_address of this NetworkInfo.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this NetworkInfo.


        :param ip_address: The ip_address of this NetworkInfo.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address

    @property
    def mac_address(self):
        """Gets the mac_address of this NetworkInfo.


        :return: The mac_address of this NetworkInfo.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this NetworkInfo.


        :param mac_address: The mac_address of this NetworkInfo.
        :type mac_address: str
        """
        if mac_address is None:
            raise ValueError("Invalid value for `mac_address`, must not be `None`")

        self._mac_address = mac_address

    @property
    def net_mask(self):
        """Gets the net_mask of this NetworkInfo.


        :return: The net_mask of this NetworkInfo.
        :rtype: str
        """
        return self._net_mask

    @net_mask.setter
    def net_mask(self, net_mask):
        """Sets the net_mask of this NetworkInfo.


        :param net_mask: The net_mask of this NetworkInfo.
        :type net_mask: str
        """
        if net_mask is None:
            raise ValueError("Invalid value for `net_mask`, must not be `None`")

        self._net_mask = net_mask
