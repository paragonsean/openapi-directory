# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.antipattern_report_result_analyzer_name import AntipatternReportResultAnalyzerName
from openapi_server.models.antipattern_report_status import AntipatternReportStatus
from openapi_server.models.s3_object import S3Object
from openapi_server import util


class AntipatternReportResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyzer_name: AntipatternReportResultAnalyzerName=None, anti_pattern_report_s3_object: S3Object=None, antipattern_report_status: AntipatternReportStatus=None, antipattern_report_status_message: str=None):
        """AntipatternReportResult - a model defined in OpenAPI

        :param analyzer_name: The analyzer_name of this AntipatternReportResult.
        :param anti_pattern_report_s3_object: The anti_pattern_report_s3_object of this AntipatternReportResult.
        :param antipattern_report_status: The antipattern_report_status of this AntipatternReportResult.
        :param antipattern_report_status_message: The antipattern_report_status_message of this AntipatternReportResult.
        """
        self.openapi_types = {
            'analyzer_name': AntipatternReportResultAnalyzerName,
            'anti_pattern_report_s3_object': S3Object,
            'antipattern_report_status': AntipatternReportStatus,
            'antipattern_report_status_message': str
        }

        self.attribute_map = {
            'analyzer_name': 'analyzerName',
            'anti_pattern_report_s3_object': 'antiPatternReportS3Object',
            'antipattern_report_status': 'antipatternReportStatus',
            'antipattern_report_status_message': 'antipatternReportStatusMessage'
        }

        self._analyzer_name = analyzer_name
        self._anti_pattern_report_s3_object = anti_pattern_report_s3_object
        self._antipattern_report_status = antipattern_report_status
        self._antipattern_report_status_message = antipattern_report_status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AntipatternReportResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AntipatternReportResult of this AntipatternReportResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyzer_name(self):
        """Gets the analyzer_name of this AntipatternReportResult.


        :return: The analyzer_name of this AntipatternReportResult.
        :rtype: AntipatternReportResultAnalyzerName
        """
        return self._analyzer_name

    @analyzer_name.setter
    def analyzer_name(self, analyzer_name):
        """Sets the analyzer_name of this AntipatternReportResult.


        :param analyzer_name: The analyzer_name of this AntipatternReportResult.
        :type analyzer_name: AntipatternReportResultAnalyzerName
        """

        self._analyzer_name = analyzer_name

    @property
    def anti_pattern_report_s3_object(self):
        """Gets the anti_pattern_report_s3_object of this AntipatternReportResult.


        :return: The anti_pattern_report_s3_object of this AntipatternReportResult.
        :rtype: S3Object
        """
        return self._anti_pattern_report_s3_object

    @anti_pattern_report_s3_object.setter
    def anti_pattern_report_s3_object(self, anti_pattern_report_s3_object):
        """Sets the anti_pattern_report_s3_object of this AntipatternReportResult.


        :param anti_pattern_report_s3_object: The anti_pattern_report_s3_object of this AntipatternReportResult.
        :type anti_pattern_report_s3_object: S3Object
        """

        self._anti_pattern_report_s3_object = anti_pattern_report_s3_object

    @property
    def antipattern_report_status(self):
        """Gets the antipattern_report_status of this AntipatternReportResult.


        :return: The antipattern_report_status of this AntipatternReportResult.
        :rtype: AntipatternReportStatus
        """
        return self._antipattern_report_status

    @antipattern_report_status.setter
    def antipattern_report_status(self, antipattern_report_status):
        """Sets the antipattern_report_status of this AntipatternReportResult.


        :param antipattern_report_status: The antipattern_report_status of this AntipatternReportResult.
        :type antipattern_report_status: AntipatternReportStatus
        """

        self._antipattern_report_status = antipattern_report_status

    @property
    def antipattern_report_status_message(self):
        """Gets the antipattern_report_status_message of this AntipatternReportResult.


        :return: The antipattern_report_status_message of this AntipatternReportResult.
        :rtype: str
        """
        return self._antipattern_report_status_message

    @antipattern_report_status_message.setter
    def antipattern_report_status_message(self, antipattern_report_status_message):
        """Sets the antipattern_report_status_message of this AntipatternReportResult.


        :param antipattern_report_status_message: The antipattern_report_status_message of this AntipatternReportResult.
        :type antipattern_report_status_message: str
        """

        self._antipattern_report_status_message = antipattern_report_status_message
