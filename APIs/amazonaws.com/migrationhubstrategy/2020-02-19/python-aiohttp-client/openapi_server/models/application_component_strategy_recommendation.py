# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommendation_set_transformation_tool import RecommendationSetTransformationTool
from openapi_server.models.strategy import Strategy
from openapi_server.models.target_destination import TargetDestination
from openapi_server import util


class ApplicationComponentStrategyRecommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, strategy: Strategy=None, target_destination: TargetDestination=None, transformation_tool: RecommendationSetTransformationTool=None):
        """ApplicationComponentStrategyRecommendation - a model defined in OpenAPI

        :param strategy: The strategy of this ApplicationComponentStrategyRecommendation.
        :param target_destination: The target_destination of this ApplicationComponentStrategyRecommendation.
        :param transformation_tool: The transformation_tool of this ApplicationComponentStrategyRecommendation.
        """
        self.openapi_types = {
            'strategy': Strategy,
            'target_destination': TargetDestination,
            'transformation_tool': RecommendationSetTransformationTool
        }

        self.attribute_map = {
            'strategy': 'strategy',
            'target_destination': 'targetDestination',
            'transformation_tool': 'transformationTool'
        }

        self._strategy = strategy
        self._target_destination = target_destination
        self._transformation_tool = transformation_tool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationComponentStrategyRecommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationComponentStrategy_recommendation of this ApplicationComponentStrategyRecommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def strategy(self):
        """Gets the strategy of this ApplicationComponentStrategyRecommendation.


        :return: The strategy of this ApplicationComponentStrategyRecommendation.
        :rtype: Strategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this ApplicationComponentStrategyRecommendation.


        :param strategy: The strategy of this ApplicationComponentStrategyRecommendation.
        :type strategy: Strategy
        """

        self._strategy = strategy

    @property
    def target_destination(self):
        """Gets the target_destination of this ApplicationComponentStrategyRecommendation.


        :return: The target_destination of this ApplicationComponentStrategyRecommendation.
        :rtype: TargetDestination
        """
        return self._target_destination

    @target_destination.setter
    def target_destination(self, target_destination):
        """Sets the target_destination of this ApplicationComponentStrategyRecommendation.


        :param target_destination: The target_destination of this ApplicationComponentStrategyRecommendation.
        :type target_destination: TargetDestination
        """

        self._target_destination = target_destination

    @property
    def transformation_tool(self):
        """Gets the transformation_tool of this ApplicationComponentStrategyRecommendation.


        :return: The transformation_tool of this ApplicationComponentStrategyRecommendation.
        :rtype: RecommendationSetTransformationTool
        """
        return self._transformation_tool

    @transformation_tool.setter
    def transformation_tool(self, transformation_tool):
        """Sets the transformation_tool of this ApplicationComponentStrategyRecommendation.


        :param transformation_tool: The transformation_tool of this ApplicationComponentStrategyRecommendation.
        :type transformation_tool: RecommendationSetTransformationTool
        """

        self._transformation_tool = transformation_tool
