# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceCodeRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, project_name: str=None, repository: str=None, version_control_type: str=None):
        """SourceCodeRepository - a model defined in OpenAPI

        :param branch: The branch of this SourceCodeRepository.
        :param project_name: The project_name of this SourceCodeRepository.
        :param repository: The repository of this SourceCodeRepository.
        :param version_control_type: The version_control_type of this SourceCodeRepository.
        """
        self.openapi_types = {
            'branch': str,
            'project_name': str,
            'repository': str,
            'version_control_type': str
        }

        self.attribute_map = {
            'branch': 'branch',
            'project_name': 'projectName',
            'repository': 'repository',
            'version_control_type': 'versionControlType'
        }

        self._branch = branch
        self._project_name = project_name
        self._repository = repository
        self._version_control_type = version_control_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceCodeRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceCodeRepository of this SourceCodeRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this SourceCodeRepository.


        :return: The branch of this SourceCodeRepository.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this SourceCodeRepository.


        :param branch: The branch of this SourceCodeRepository.
        :type branch: str
        """

        self._branch = branch

    @property
    def project_name(self):
        """Gets the project_name of this SourceCodeRepository.


        :return: The project_name of this SourceCodeRepository.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this SourceCodeRepository.


        :param project_name: The project_name of this SourceCodeRepository.
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def repository(self):
        """Gets the repository of this SourceCodeRepository.


        :return: The repository of this SourceCodeRepository.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this SourceCodeRepository.


        :param repository: The repository of this SourceCodeRepository.
        :type repository: str
        """

        self._repository = repository

    @property
    def version_control_type(self):
        """Gets the version_control_type of this SourceCodeRepository.


        :return: The version_control_type of this SourceCodeRepository.
        :rtype: str
        """
        return self._version_control_type

    @version_control_type.setter
    def version_control_type(self, version_control_type):
        """Sets the version_control_type of this SourceCodeRepository.


        :param version_control_type: The version_control_type of this SourceCodeRepository.
        :type version_control_type: str
        """

        self._version_control_type = version_control_type
