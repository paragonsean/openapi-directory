# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.version_control import VersionControl
from openapi_server import util


class SourceCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, project_name: str=None, source_version: str=None, version_control: VersionControl=None):
        """SourceCode - a model defined in OpenAPI

        :param location: The location of this SourceCode.
        :param project_name: The project_name of this SourceCode.
        :param source_version: The source_version of this SourceCode.
        :param version_control: The version_control of this SourceCode.
        """
        self.openapi_types = {
            'location': str,
            'project_name': str,
            'source_version': str,
            'version_control': VersionControl
        }

        self.attribute_map = {
            'location': 'location',
            'project_name': 'projectName',
            'source_version': 'sourceVersion',
            'version_control': 'versionControl'
        }

        self._location = location
        self._project_name = project_name
        self._source_version = source_version
        self._version_control = version_control

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceCode of this SourceCode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this SourceCode.


        :return: The location of this SourceCode.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SourceCode.


        :param location: The location of this SourceCode.
        :type location: str
        """

        self._location = location

    @property
    def project_name(self):
        """Gets the project_name of this SourceCode.


        :return: The project_name of this SourceCode.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this SourceCode.


        :param project_name: The project_name of this SourceCode.
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def source_version(self):
        """Gets the source_version of this SourceCode.


        :return: The source_version of this SourceCode.
        :rtype: str
        """
        return self._source_version

    @source_version.setter
    def source_version(self, source_version):
        """Sets the source_version of this SourceCode.


        :param source_version: The source_version of this SourceCode.
        :type source_version: str
        """

        self._source_version = source_version

    @property
    def version_control(self):
        """Gets the version_control of this SourceCode.


        :return: The version_control of this SourceCode.
        :rtype: VersionControl
        """
        return self._version_control

    @version_control.setter
    def version_control(self, version_control):
        """Sets the version_control of this SourceCode.


        :param version_control: The version_control of this SourceCode.
        :type version_control: VersionControl
        """

        self._version_control = version_control
