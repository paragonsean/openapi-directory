/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Group;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartRecommendationReportGenerationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartRecommendationReportGenerationRequest {
  public static final String SERIALIZED_NAME_GROUP_ID_FILTER = "groupIdFilter";
  @SerializedName(SERIALIZED_NAME_GROUP_ID_FILTER)
  private List<Group> groupIdFilter = new ArrayList<>();

  /**
   *  The output format for the recommendation report file. The default format is Microsoft Excel. 
   */
  @JsonAdapter(OutputFormatEnum.Adapter.class)
  public enum OutputFormatEnum {
    EXCEL("Excel"),
    
    JSON("Json");

    private String value;

    OutputFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutputFormatEnum fromValue(String value) {
      for (OutputFormatEnum b : OutputFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutputFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutputFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutputFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutputFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutputFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "outputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private OutputFormatEnum outputFormat;

  public StartRecommendationReportGenerationRequest() {
  }

  public StartRecommendationReportGenerationRequest groupIdFilter(List<Group> groupIdFilter) {
    this.groupIdFilter = groupIdFilter;
    return this;
  }

  public StartRecommendationReportGenerationRequest addGroupIdFilterItem(Group groupIdFilterItem) {
    if (this.groupIdFilter == null) {
      this.groupIdFilter = new ArrayList<>();
    }
    this.groupIdFilter.add(groupIdFilterItem);
    return this;
  }

  /**
   *  Groups the resources in the recommendation report with a unique name. 
   * @return groupIdFilter
   */
  @javax.annotation.Nullable
  public List<Group> getGroupIdFilter() {
    return groupIdFilter;
  }

  public void setGroupIdFilter(List<Group> groupIdFilter) {
    this.groupIdFilter = groupIdFilter;
  }


  public StartRecommendationReportGenerationRequest outputFormat(OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   *  The output format for the recommendation report file. The default format is Microsoft Excel. 
   * @return outputFormat
   */
  @javax.annotation.Nullable
  public OutputFormatEnum getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartRecommendationReportGenerationRequest startRecommendationReportGenerationRequest = (StartRecommendationReportGenerationRequest) o;
    return Objects.equals(this.groupIdFilter, startRecommendationReportGenerationRequest.groupIdFilter) &&
        Objects.equals(this.outputFormat, startRecommendationReportGenerationRequest.outputFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupIdFilter, outputFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartRecommendationReportGenerationRequest {\n");
    sb.append("    groupIdFilter: ").append(toIndentedString(groupIdFilter)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupIdFilter");
    openapiFields.add("outputFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartRecommendationReportGenerationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartRecommendationReportGenerationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartRecommendationReportGenerationRequest is not found in the empty JSON string", StartRecommendationReportGenerationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartRecommendationReportGenerationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartRecommendationReportGenerationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("groupIdFilter") != null && !jsonObj.get("groupIdFilter").isJsonNull()) {
        JsonArray jsonArraygroupIdFilter = jsonObj.getAsJsonArray("groupIdFilter");
        if (jsonArraygroupIdFilter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupIdFilter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupIdFilter` to be an array in the JSON string but got `%s`", jsonObj.get("groupIdFilter").toString()));
          }

          // validate the optional field `groupIdFilter` (array)
          for (int i = 0; i < jsonArraygroupIdFilter.size(); i++) {
            Group.validateJsonElement(jsonArraygroupIdFilter.get(i));
          };
        }
      }
      if ((jsonObj.get("outputFormat") != null && !jsonObj.get("outputFormat").isJsonNull()) && !jsonObj.get("outputFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputFormat").toString()));
      }
      // validate the optional field `outputFormat`
      if (jsonObj.get("outputFormat") != null && !jsonObj.get("outputFormat").isJsonNull()) {
        OutputFormatEnum.validateJsonElement(jsonObj.get("outputFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartRecommendationReportGenerationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartRecommendationReportGenerationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartRecommendationReportGenerationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartRecommendationReportGenerationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartRecommendationReportGenerationRequest>() {
           @Override
           public void write(JsonWriter out, StartRecommendationReportGenerationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartRecommendationReportGenerationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartRecommendationReportGenerationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartRecommendationReportGenerationRequest
   * @throws IOException if the JSON string is invalid with respect to StartRecommendationReportGenerationRequest
   */
  public static StartRecommendationReportGenerationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartRecommendationReportGenerationRequest.class);
  }

  /**
   * Convert an instance of StartRecommendationReportGenerationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

