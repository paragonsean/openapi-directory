/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SourceCode;
import org.openapitools.client.model.UpdateApplicationComponentConfigRequestStrategyOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateApplicationComponentConfigRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateApplicationComponentConfigRequest {
  /**
   * The type of known component.
   */
  @JsonAdapter(AppTypeEnum.Adapter.class)
  public enum AppTypeEnum {
    DOT_NET_FRAMEWORK("DotNetFramework"),
    
    JAVA("Java"),
    
    SQL_SERVER("SQLServer"),
    
    IIS("IIS"),
    
    ORACLE("Oracle"),
    
    OTHER("Other"),
    
    TOMCAT("Tomcat"),
    
    J_BOSS("JBoss"),
    
    SPRING("Spring"),
    
    MONGO_DB("Mongo DB"),
    
    DB2("DB2"),
    
    MARIA_DB("Maria DB"),
    
    MY_SQL("MySQL"),
    
    SYBASE("Sybase"),
    
    POSTGRE_SQL_SERVER("PostgreSQLServer"),
    
    CASSANDRA("Cassandra"),
    
    IBM_WEB_SPHERE("IBM WebSphere"),
    
    ORACLE_WEB_LOGIC("Oracle WebLogic"),
    
    VISUAL_BASIC("Visual Basic"),
    
    UNKNOWN("Unknown"),
    
    DOTNET_CORE("DotnetCore"),
    
    DOTNET("Dotnet");

    private String value;

    AppTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppTypeEnum fromValue(String value) {
      for (AppTypeEnum b : AppTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_TYPE = "appType";
  @SerializedName(SERIALIZED_NAME_APP_TYPE)
  private AppTypeEnum appType;

  public static final String SERIALIZED_NAME_APPLICATION_COMPONENT_ID = "applicationComponentId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_COMPONENT_ID)
  private String applicationComponentId;

  public static final String SERIALIZED_NAME_CONFIGURE_ONLY = "configureOnly";
  @SerializedName(SERIALIZED_NAME_CONFIGURE_ONLY)
  private Boolean configureOnly;

  /**
   *  Indicates whether the application component has been included for server recommendation or not. 
   */
  @JsonAdapter(InclusionStatusEnum.Adapter.class)
  public enum InclusionStatusEnum {
    EXCLUDE_FROM_ASSESSMENT("excludeFromAssessment"),
    
    INCLUDE_IN_ASSESSMENT("includeInAssessment");

    private String value;

    InclusionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InclusionStatusEnum fromValue(String value) {
      for (InclusionStatusEnum b : InclusionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InclusionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InclusionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InclusionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InclusionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InclusionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INCLUSION_STATUS = "inclusionStatus";
  @SerializedName(SERIALIZED_NAME_INCLUSION_STATUS)
  private InclusionStatusEnum inclusionStatus;

  public static final String SERIALIZED_NAME_SECRETS_MANAGER_KEY = "secretsManagerKey";
  @SerializedName(SERIALIZED_NAME_SECRETS_MANAGER_KEY)
  private String secretsManagerKey;

  public static final String SERIALIZED_NAME_SOURCE_CODE_LIST = "sourceCodeList";
  @SerializedName(SERIALIZED_NAME_SOURCE_CODE_LIST)
  private List<SourceCode> sourceCodeList = new ArrayList<>();

  public static final String SERIALIZED_NAME_STRATEGY_OPTION = "strategyOption";
  @SerializedName(SERIALIZED_NAME_STRATEGY_OPTION)
  private UpdateApplicationComponentConfigRequestStrategyOption strategyOption;

  public UpdateApplicationComponentConfigRequest() {
  }

  public UpdateApplicationComponentConfigRequest appType(AppTypeEnum appType) {
    this.appType = appType;
    return this;
  }

  /**
   * The type of known component.
   * @return appType
   */
  @javax.annotation.Nullable
  public AppTypeEnum getAppType() {
    return appType;
  }

  public void setAppType(AppTypeEnum appType) {
    this.appType = appType;
  }


  public UpdateApplicationComponentConfigRequest applicationComponentId(String applicationComponentId) {
    this.applicationComponentId = applicationComponentId;
    return this;
  }

  /**
   *  The ID of the application component. The ID is unique within an AWS account. 
   * @return applicationComponentId
   */
  @javax.annotation.Nonnull
  public String getApplicationComponentId() {
    return applicationComponentId;
  }

  public void setApplicationComponentId(String applicationComponentId) {
    this.applicationComponentId = applicationComponentId;
  }


  public UpdateApplicationComponentConfigRequest configureOnly(Boolean configureOnly) {
    this.configureOnly = configureOnly;
    return this;
  }

  /**
   * Update the configuration request of an application component. If it is set to true, the source code and/or database credentials are updated. If it is set to false, the source code and/or database credentials are updated and an analysis is initiated.
   * @return configureOnly
   */
  @javax.annotation.Nullable
  public Boolean getConfigureOnly() {
    return configureOnly;
  }

  public void setConfigureOnly(Boolean configureOnly) {
    this.configureOnly = configureOnly;
  }


  public UpdateApplicationComponentConfigRequest inclusionStatus(InclusionStatusEnum inclusionStatus) {
    this.inclusionStatus = inclusionStatus;
    return this;
  }

  /**
   *  Indicates whether the application component has been included for server recommendation or not. 
   * @return inclusionStatus
   */
  @javax.annotation.Nullable
  public InclusionStatusEnum getInclusionStatus() {
    return inclusionStatus;
  }

  public void setInclusionStatus(InclusionStatusEnum inclusionStatus) {
    this.inclusionStatus = inclusionStatus;
  }


  public UpdateApplicationComponentConfigRequest secretsManagerKey(String secretsManagerKey) {
    this.secretsManagerKey = secretsManagerKey;
    return this;
  }

  /**
   *  Database credentials. 
   * @return secretsManagerKey
   */
  @javax.annotation.Nullable
  public String getSecretsManagerKey() {
    return secretsManagerKey;
  }

  public void setSecretsManagerKey(String secretsManagerKey) {
    this.secretsManagerKey = secretsManagerKey;
  }


  public UpdateApplicationComponentConfigRequest sourceCodeList(List<SourceCode> sourceCodeList) {
    this.sourceCodeList = sourceCodeList;
    return this;
  }

  public UpdateApplicationComponentConfigRequest addSourceCodeListItem(SourceCode sourceCodeListItem) {
    if (this.sourceCodeList == null) {
      this.sourceCodeList = new ArrayList<>();
    }
    this.sourceCodeList.add(sourceCodeListItem);
    return this;
  }

  /**
   *  The list of source code configurations to update for the application component. 
   * @return sourceCodeList
   */
  @javax.annotation.Nullable
  public List<SourceCode> getSourceCodeList() {
    return sourceCodeList;
  }

  public void setSourceCodeList(List<SourceCode> sourceCodeList) {
    this.sourceCodeList = sourceCodeList;
  }


  public UpdateApplicationComponentConfigRequest strategyOption(UpdateApplicationComponentConfigRequestStrategyOption strategyOption) {
    this.strategyOption = strategyOption;
    return this;
  }

  /**
   * Get strategyOption
   * @return strategyOption
   */
  @javax.annotation.Nullable
  public UpdateApplicationComponentConfigRequestStrategyOption getStrategyOption() {
    return strategyOption;
  }

  public void setStrategyOption(UpdateApplicationComponentConfigRequestStrategyOption strategyOption) {
    this.strategyOption = strategyOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateApplicationComponentConfigRequest updateApplicationComponentConfigRequest = (UpdateApplicationComponentConfigRequest) o;
    return Objects.equals(this.appType, updateApplicationComponentConfigRequest.appType) &&
        Objects.equals(this.applicationComponentId, updateApplicationComponentConfigRequest.applicationComponentId) &&
        Objects.equals(this.configureOnly, updateApplicationComponentConfigRequest.configureOnly) &&
        Objects.equals(this.inclusionStatus, updateApplicationComponentConfigRequest.inclusionStatus) &&
        Objects.equals(this.secretsManagerKey, updateApplicationComponentConfigRequest.secretsManagerKey) &&
        Objects.equals(this.sourceCodeList, updateApplicationComponentConfigRequest.sourceCodeList) &&
        Objects.equals(this.strategyOption, updateApplicationComponentConfigRequest.strategyOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appType, applicationComponentId, configureOnly, inclusionStatus, secretsManagerKey, sourceCodeList, strategyOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateApplicationComponentConfigRequest {\n");
    sb.append("    appType: ").append(toIndentedString(appType)).append("\n");
    sb.append("    applicationComponentId: ").append(toIndentedString(applicationComponentId)).append("\n");
    sb.append("    configureOnly: ").append(toIndentedString(configureOnly)).append("\n");
    sb.append("    inclusionStatus: ").append(toIndentedString(inclusionStatus)).append("\n");
    sb.append("    secretsManagerKey: ").append("*").append("\n");
    sb.append("    sourceCodeList: ").append(toIndentedString(sourceCodeList)).append("\n");
    sb.append("    strategyOption: ").append(toIndentedString(strategyOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appType");
    openapiFields.add("applicationComponentId");
    openapiFields.add("configureOnly");
    openapiFields.add("inclusionStatus");
    openapiFields.add("secretsManagerKey");
    openapiFields.add("sourceCodeList");
    openapiFields.add("strategyOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("applicationComponentId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateApplicationComponentConfigRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateApplicationComponentConfigRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateApplicationComponentConfigRequest is not found in the empty JSON string", UpdateApplicationComponentConfigRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateApplicationComponentConfigRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateApplicationComponentConfigRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateApplicationComponentConfigRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appType") != null && !jsonObj.get("appType").isJsonNull()) && !jsonObj.get("appType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appType").toString()));
      }
      // validate the optional field `appType`
      if (jsonObj.get("appType") != null && !jsonObj.get("appType").isJsonNull()) {
        AppTypeEnum.validateJsonElement(jsonObj.get("appType"));
      }
      if (!jsonObj.get("applicationComponentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationComponentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationComponentId").toString()));
      }
      if ((jsonObj.get("inclusionStatus") != null && !jsonObj.get("inclusionStatus").isJsonNull()) && !jsonObj.get("inclusionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inclusionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inclusionStatus").toString()));
      }
      // validate the optional field `inclusionStatus`
      if (jsonObj.get("inclusionStatus") != null && !jsonObj.get("inclusionStatus").isJsonNull()) {
        InclusionStatusEnum.validateJsonElement(jsonObj.get("inclusionStatus"));
      }
      if ((jsonObj.get("secretsManagerKey") != null && !jsonObj.get("secretsManagerKey").isJsonNull()) && !jsonObj.get("secretsManagerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretsManagerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretsManagerKey").toString()));
      }
      if (jsonObj.get("sourceCodeList") != null && !jsonObj.get("sourceCodeList").isJsonNull()) {
        JsonArray jsonArraysourceCodeList = jsonObj.getAsJsonArray("sourceCodeList");
        if (jsonArraysourceCodeList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sourceCodeList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sourceCodeList` to be an array in the JSON string but got `%s`", jsonObj.get("sourceCodeList").toString()));
          }

          // validate the optional field `sourceCodeList` (array)
          for (int i = 0; i < jsonArraysourceCodeList.size(); i++) {
            SourceCode.validateJsonElement(jsonArraysourceCodeList.get(i));
          };
        }
      }
      // validate the optional field `strategyOption`
      if (jsonObj.get("strategyOption") != null && !jsonObj.get("strategyOption").isJsonNull()) {
        UpdateApplicationComponentConfigRequestStrategyOption.validateJsonElement(jsonObj.get("strategyOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateApplicationComponentConfigRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateApplicationComponentConfigRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateApplicationComponentConfigRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateApplicationComponentConfigRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateApplicationComponentConfigRequest>() {
           @Override
           public void write(JsonWriter out, UpdateApplicationComponentConfigRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateApplicationComponentConfigRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateApplicationComponentConfigRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateApplicationComponentConfigRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateApplicationComponentConfigRequest
   */
  public static UpdateApplicationComponentConfigRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateApplicationComponentConfigRequest.class);
  }

  /**
   * Convert an instance of UpdateApplicationComponentConfigRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

