/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CollectorConfigurationSummary;
import org.openapitools.client.model.CollectorHealth;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Process data collector that runs in the environment that you specify. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Collector {
  public static final String SERIALIZED_NAME_COLLECTOR_HEALTH = "collectorHealth";
  @SerializedName(SERIALIZED_NAME_COLLECTOR_HEALTH)
  private CollectorHealth collectorHealth;

  public static final String SERIALIZED_NAME_COLLECTOR_ID = "collectorId";
  @SerializedName(SERIALIZED_NAME_COLLECTOR_ID)
  private String collectorId;

  public static final String SERIALIZED_NAME_COLLECTOR_VERSION = "collectorVersion";
  @SerializedName(SERIALIZED_NAME_COLLECTOR_VERSION)
  private String collectorVersion;

  public static final String SERIALIZED_NAME_CONFIGURATION_SUMMARY = "configurationSummary";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_SUMMARY)
  private CollectorConfigurationSummary configurationSummary;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_TIME_STAMP = "lastActivityTimeStamp";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_TIME_STAMP)
  private String lastActivityTimeStamp;

  public static final String SERIALIZED_NAME_REGISTERED_TIME_STAMP = "registeredTimeStamp";
  @SerializedName(SERIALIZED_NAME_REGISTERED_TIME_STAMP)
  private String registeredTimeStamp;

  public Collector() {
  }

  public Collector collectorHealth(CollectorHealth collectorHealth) {
    this.collectorHealth = collectorHealth;
    return this;
  }

  /**
   * Get collectorHealth
   * @return collectorHealth
   */
  @javax.annotation.Nullable
  public CollectorHealth getCollectorHealth() {
    return collectorHealth;
  }

  public void setCollectorHealth(CollectorHealth collectorHealth) {
    this.collectorHealth = collectorHealth;
  }


  public Collector collectorId(String collectorId) {
    this.collectorId = collectorId;
    return this;
  }

  /**
   * Get collectorId
   * @return collectorId
   */
  @javax.annotation.Nullable
  public String getCollectorId() {
    return collectorId;
  }

  public void setCollectorId(String collectorId) {
    this.collectorId = collectorId;
  }


  public Collector collectorVersion(String collectorVersion) {
    this.collectorVersion = collectorVersion;
    return this;
  }

  /**
   * Get collectorVersion
   * @return collectorVersion
   */
  @javax.annotation.Nullable
  public String getCollectorVersion() {
    return collectorVersion;
  }

  public void setCollectorVersion(String collectorVersion) {
    this.collectorVersion = collectorVersion;
  }


  public Collector configurationSummary(CollectorConfigurationSummary configurationSummary) {
    this.configurationSummary = configurationSummary;
    return this;
  }

  /**
   * Get configurationSummary
   * @return configurationSummary
   */
  @javax.annotation.Nullable
  public CollectorConfigurationSummary getConfigurationSummary() {
    return configurationSummary;
  }

  public void setConfigurationSummary(CollectorConfigurationSummary configurationSummary) {
    this.configurationSummary = configurationSummary;
  }


  public Collector hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * Get hostName
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public Collector ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public Collector lastActivityTimeStamp(String lastActivityTimeStamp) {
    this.lastActivityTimeStamp = lastActivityTimeStamp;
    return this;
  }

  /**
   * Get lastActivityTimeStamp
   * @return lastActivityTimeStamp
   */
  @javax.annotation.Nullable
  public String getLastActivityTimeStamp() {
    return lastActivityTimeStamp;
  }

  public void setLastActivityTimeStamp(String lastActivityTimeStamp) {
    this.lastActivityTimeStamp = lastActivityTimeStamp;
  }


  public Collector registeredTimeStamp(String registeredTimeStamp) {
    this.registeredTimeStamp = registeredTimeStamp;
    return this;
  }

  /**
   * Get registeredTimeStamp
   * @return registeredTimeStamp
   */
  @javax.annotation.Nullable
  public String getRegisteredTimeStamp() {
    return registeredTimeStamp;
  }

  public void setRegisteredTimeStamp(String registeredTimeStamp) {
    this.registeredTimeStamp = registeredTimeStamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Collector collector = (Collector) o;
    return Objects.equals(this.collectorHealth, collector.collectorHealth) &&
        Objects.equals(this.collectorId, collector.collectorId) &&
        Objects.equals(this.collectorVersion, collector.collectorVersion) &&
        Objects.equals(this.configurationSummary, collector.configurationSummary) &&
        Objects.equals(this.hostName, collector.hostName) &&
        Objects.equals(this.ipAddress, collector.ipAddress) &&
        Objects.equals(this.lastActivityTimeStamp, collector.lastActivityTimeStamp) &&
        Objects.equals(this.registeredTimeStamp, collector.registeredTimeStamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectorHealth, collectorId, collectorVersion, configurationSummary, hostName, ipAddress, lastActivityTimeStamp, registeredTimeStamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Collector {\n");
    sb.append("    collectorHealth: ").append(toIndentedString(collectorHealth)).append("\n");
    sb.append("    collectorId: ").append(toIndentedString(collectorId)).append("\n");
    sb.append("    collectorVersion: ").append(toIndentedString(collectorVersion)).append("\n");
    sb.append("    configurationSummary: ").append(toIndentedString(configurationSummary)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    lastActivityTimeStamp: ").append(toIndentedString(lastActivityTimeStamp)).append("\n");
    sb.append("    registeredTimeStamp: ").append(toIndentedString(registeredTimeStamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collectorHealth");
    openapiFields.add("collectorId");
    openapiFields.add("collectorVersion");
    openapiFields.add("configurationSummary");
    openapiFields.add("hostName");
    openapiFields.add("ipAddress");
    openapiFields.add("lastActivityTimeStamp");
    openapiFields.add("registeredTimeStamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Collector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Collector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Collector is not found in the empty JSON string", Collector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Collector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Collector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `collectorHealth`
      if (jsonObj.get("collectorHealth") != null && !jsonObj.get("collectorHealth").isJsonNull()) {
        CollectorHealth.validateJsonElement(jsonObj.get("collectorHealth"));
      }
      // validate the optional field `collectorId`
      if (jsonObj.get("collectorId") != null && !jsonObj.get("collectorId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("collectorId"));
      }
      // validate the optional field `collectorVersion`
      if (jsonObj.get("collectorVersion") != null && !jsonObj.get("collectorVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("collectorVersion"));
      }
      // validate the optional field `configurationSummary`
      if (jsonObj.get("configurationSummary") != null && !jsonObj.get("configurationSummary").isJsonNull()) {
        CollectorConfigurationSummary.validateJsonElement(jsonObj.get("configurationSummary"));
      }
      // validate the optional field `hostName`
      if (jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("hostName"));
      }
      // validate the optional field `ipAddress`
      if (jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ipAddress"));
      }
      // validate the optional field `lastActivityTimeStamp`
      if (jsonObj.get("lastActivityTimeStamp") != null && !jsonObj.get("lastActivityTimeStamp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lastActivityTimeStamp"));
      }
      // validate the optional field `registeredTimeStamp`
      if (jsonObj.get("registeredTimeStamp") != null && !jsonObj.get("registeredTimeStamp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("registeredTimeStamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Collector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Collector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Collector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Collector.class));

       return (TypeAdapter<T>) new TypeAdapter<Collector>() {
           @Override
           public void write(JsonWriter out, Collector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Collector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Collector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Collector
   * @throws IOException if the JSON string is invalid with respect to Collector
   */
  public static Collector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Collector.class);
  }

  /**
   * Convert an instance of Collector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

