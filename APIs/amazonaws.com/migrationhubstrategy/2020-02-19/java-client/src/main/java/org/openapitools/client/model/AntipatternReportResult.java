/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AntipatternReportResultAnalyzerName;
import org.openapitools.client.model.AntipatternReportStatus;
import org.openapitools.client.model.S3Object;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The anti-pattern report result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AntipatternReportResult {
  public static final String SERIALIZED_NAME_ANALYZER_NAME = "analyzerName";
  @SerializedName(SERIALIZED_NAME_ANALYZER_NAME)
  private AntipatternReportResultAnalyzerName analyzerName;

  public static final String SERIALIZED_NAME_ANTI_PATTERN_REPORT_S3_OBJECT = "antiPatternReportS3Object";
  @SerializedName(SERIALIZED_NAME_ANTI_PATTERN_REPORT_S3_OBJECT)
  private S3Object antiPatternReportS3Object;

  public static final String SERIALIZED_NAME_ANTIPATTERN_REPORT_STATUS = "antipatternReportStatus";
  @SerializedName(SERIALIZED_NAME_ANTIPATTERN_REPORT_STATUS)
  private AntipatternReportStatus antipatternReportStatus;

  public static final String SERIALIZED_NAME_ANTIPATTERN_REPORT_STATUS_MESSAGE = "antipatternReportStatusMessage";
  @SerializedName(SERIALIZED_NAME_ANTIPATTERN_REPORT_STATUS_MESSAGE)
  private String antipatternReportStatusMessage;

  public AntipatternReportResult() {
  }

  public AntipatternReportResult analyzerName(AntipatternReportResultAnalyzerName analyzerName) {
    this.analyzerName = analyzerName;
    return this;
  }

  /**
   * Get analyzerName
   * @return analyzerName
   */
  @javax.annotation.Nullable
  public AntipatternReportResultAnalyzerName getAnalyzerName() {
    return analyzerName;
  }

  public void setAnalyzerName(AntipatternReportResultAnalyzerName analyzerName) {
    this.analyzerName = analyzerName;
  }


  public AntipatternReportResult antiPatternReportS3Object(S3Object antiPatternReportS3Object) {
    this.antiPatternReportS3Object = antiPatternReportS3Object;
    return this;
  }

  /**
   * Get antiPatternReportS3Object
   * @return antiPatternReportS3Object
   */
  @javax.annotation.Nullable
  public S3Object getAntiPatternReportS3Object() {
    return antiPatternReportS3Object;
  }

  public void setAntiPatternReportS3Object(S3Object antiPatternReportS3Object) {
    this.antiPatternReportS3Object = antiPatternReportS3Object;
  }


  public AntipatternReportResult antipatternReportStatus(AntipatternReportStatus antipatternReportStatus) {
    this.antipatternReportStatus = antipatternReportStatus;
    return this;
  }

  /**
   * Get antipatternReportStatus
   * @return antipatternReportStatus
   */
  @javax.annotation.Nullable
  public AntipatternReportStatus getAntipatternReportStatus() {
    return antipatternReportStatus;
  }

  public void setAntipatternReportStatus(AntipatternReportStatus antipatternReportStatus) {
    this.antipatternReportStatus = antipatternReportStatus;
  }


  public AntipatternReportResult antipatternReportStatusMessage(String antipatternReportStatusMessage) {
    this.antipatternReportStatusMessage = antipatternReportStatusMessage;
    return this;
  }

  /**
   * Get antipatternReportStatusMessage
   * @return antipatternReportStatusMessage
   */
  @javax.annotation.Nullable
  public String getAntipatternReportStatusMessage() {
    return antipatternReportStatusMessage;
  }

  public void setAntipatternReportStatusMessage(String antipatternReportStatusMessage) {
    this.antipatternReportStatusMessage = antipatternReportStatusMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AntipatternReportResult antipatternReportResult = (AntipatternReportResult) o;
    return Objects.equals(this.analyzerName, antipatternReportResult.analyzerName) &&
        Objects.equals(this.antiPatternReportS3Object, antipatternReportResult.antiPatternReportS3Object) &&
        Objects.equals(this.antipatternReportStatus, antipatternReportResult.antipatternReportStatus) &&
        Objects.equals(this.antipatternReportStatusMessage, antipatternReportResult.antipatternReportStatusMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyzerName, antiPatternReportS3Object, antipatternReportStatus, antipatternReportStatusMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AntipatternReportResult {\n");
    sb.append("    analyzerName: ").append(toIndentedString(analyzerName)).append("\n");
    sb.append("    antiPatternReportS3Object: ").append(toIndentedString(antiPatternReportS3Object)).append("\n");
    sb.append("    antipatternReportStatus: ").append(toIndentedString(antipatternReportStatus)).append("\n");
    sb.append("    antipatternReportStatusMessage: ").append(toIndentedString(antipatternReportStatusMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyzerName");
    openapiFields.add("antiPatternReportS3Object");
    openapiFields.add("antipatternReportStatus");
    openapiFields.add("antipatternReportStatusMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AntipatternReportResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AntipatternReportResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AntipatternReportResult is not found in the empty JSON string", AntipatternReportResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AntipatternReportResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AntipatternReportResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `analyzerName`
      if (jsonObj.get("analyzerName") != null && !jsonObj.get("analyzerName").isJsonNull()) {
        AntipatternReportResultAnalyzerName.validateJsonElement(jsonObj.get("analyzerName"));
      }
      // validate the optional field `antiPatternReportS3Object`
      if (jsonObj.get("antiPatternReportS3Object") != null && !jsonObj.get("antiPatternReportS3Object").isJsonNull()) {
        S3Object.validateJsonElement(jsonObj.get("antiPatternReportS3Object"));
      }
      // validate the optional field `antipatternReportStatus`
      if (jsonObj.get("antipatternReportStatus") != null && !jsonObj.get("antipatternReportStatus").isJsonNull()) {
        AntipatternReportStatus.validateJsonElement(jsonObj.get("antipatternReportStatus"));
      }
      // validate the optional field `antipatternReportStatusMessage`
      if (jsonObj.get("antipatternReportStatusMessage") != null && !jsonObj.get("antipatternReportStatusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("antipatternReportStatusMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AntipatternReportResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AntipatternReportResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AntipatternReportResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AntipatternReportResult.class));

       return (TypeAdapter<T>) new TypeAdapter<AntipatternReportResult>() {
           @Override
           public void write(JsonWriter out, AntipatternReportResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AntipatternReportResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AntipatternReportResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AntipatternReportResult
   * @throws IOException if the JSON string is invalid with respect to AntipatternReportResult
   */
  public static AntipatternReportResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AntipatternReportResult.class);
  }

  /**
   * Convert an instance of AntipatternReportResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

