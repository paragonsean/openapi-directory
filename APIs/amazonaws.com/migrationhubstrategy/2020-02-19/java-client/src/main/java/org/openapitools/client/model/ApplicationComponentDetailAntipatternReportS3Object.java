/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationComponentDetailAntipatternReportS3Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationComponentDetailAntipatternReportS3Object {
  public static final String SERIALIZED_NAME_S3_BUCKET = "s3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  private String s3Bucket;

  public static final String SERIALIZED_NAME_S3KEY = "s3key";
  @SerializedName(SERIALIZED_NAME_S3KEY)
  private String s3key;

  public ApplicationComponentDetailAntipatternReportS3Object() {
  }

  public ApplicationComponentDetailAntipatternReportS3Object s3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * Get s3Bucket
   * @return s3Bucket
   */
  @javax.annotation.Nullable
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }


  public ApplicationComponentDetailAntipatternReportS3Object s3key(String s3key) {
    this.s3key = s3key;
    return this;
  }

  /**
   * Get s3key
   * @return s3key
   */
  @javax.annotation.Nullable
  public String getS3key() {
    return s3key;
  }

  public void setS3key(String s3key) {
    this.s3key = s3key;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationComponentDetailAntipatternReportS3Object applicationComponentDetailAntipatternReportS3Object = (ApplicationComponentDetailAntipatternReportS3Object) o;
    return Objects.equals(this.s3Bucket, applicationComponentDetailAntipatternReportS3Object.s3Bucket) &&
        Objects.equals(this.s3key, applicationComponentDetailAntipatternReportS3Object.s3key);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3Bucket, s3key);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationComponentDetailAntipatternReportS3Object {\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("    s3key: ").append(toIndentedString(s3key)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("s3Bucket");
    openapiFields.add("s3key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationComponentDetailAntipatternReportS3Object
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationComponentDetailAntipatternReportS3Object.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationComponentDetailAntipatternReportS3Object is not found in the empty JSON string", ApplicationComponentDetailAntipatternReportS3Object.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationComponentDetailAntipatternReportS3Object.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationComponentDetailAntipatternReportS3Object` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `s3Bucket`
      if (jsonObj.get("s3Bucket") != null && !jsonObj.get("s3Bucket").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3Bucket"));
      }
      // validate the optional field `s3key`
      if (jsonObj.get("s3key") != null && !jsonObj.get("s3key").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3key"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationComponentDetailAntipatternReportS3Object.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationComponentDetailAntipatternReportS3Object' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationComponentDetailAntipatternReportS3Object> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationComponentDetailAntipatternReportS3Object.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationComponentDetailAntipatternReportS3Object>() {
           @Override
           public void write(JsonWriter out, ApplicationComponentDetailAntipatternReportS3Object value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationComponentDetailAntipatternReportS3Object read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationComponentDetailAntipatternReportS3Object given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationComponentDetailAntipatternReportS3Object
   * @throws IOException if the JSON string is invalid with respect to ApplicationComponentDetailAntipatternReportS3Object
   */
  public static ApplicationComponentDetailAntipatternReportS3Object fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationComponentDetailAntipatternReportS3Object.class);
  }

  /**
   * Convert an instance of ApplicationComponentDetailAntipatternReportS3Object to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

