/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationMode;
import org.openapitools.client.model.GetPortfolioPreferencesResponseApplicationPreferences;
import org.openapitools.client.model.GetPortfolioPreferencesResponseDatabasePreferences;
import org.openapitools.client.model.GetPortfolioPreferencesResponsePrioritizeBusinessGoals;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPortfolioPreferencesResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetPortfolioPreferencesResponse {
  public static final String SERIALIZED_NAME_APPLICATION_MODE = "applicationMode";
  @SerializedName(SERIALIZED_NAME_APPLICATION_MODE)
  private ApplicationMode applicationMode;

  public static final String SERIALIZED_NAME_APPLICATION_PREFERENCES = "applicationPreferences";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PREFERENCES)
  private GetPortfolioPreferencesResponseApplicationPreferences applicationPreferences;

  public static final String SERIALIZED_NAME_DATABASE_PREFERENCES = "databasePreferences";
  @SerializedName(SERIALIZED_NAME_DATABASE_PREFERENCES)
  private GetPortfolioPreferencesResponseDatabasePreferences databasePreferences;

  public static final String SERIALIZED_NAME_PRIORITIZE_BUSINESS_GOALS = "prioritizeBusinessGoals";
  @SerializedName(SERIALIZED_NAME_PRIORITIZE_BUSINESS_GOALS)
  private GetPortfolioPreferencesResponsePrioritizeBusinessGoals prioritizeBusinessGoals;

  public GetPortfolioPreferencesResponse() {
  }

  public GetPortfolioPreferencesResponse applicationMode(ApplicationMode applicationMode) {
    this.applicationMode = applicationMode;
    return this;
  }

  /**
   * Get applicationMode
   * @return applicationMode
   */
  @javax.annotation.Nullable
  public ApplicationMode getApplicationMode() {
    return applicationMode;
  }

  public void setApplicationMode(ApplicationMode applicationMode) {
    this.applicationMode = applicationMode;
  }


  public GetPortfolioPreferencesResponse applicationPreferences(GetPortfolioPreferencesResponseApplicationPreferences applicationPreferences) {
    this.applicationPreferences = applicationPreferences;
    return this;
  }

  /**
   * Get applicationPreferences
   * @return applicationPreferences
   */
  @javax.annotation.Nullable
  public GetPortfolioPreferencesResponseApplicationPreferences getApplicationPreferences() {
    return applicationPreferences;
  }

  public void setApplicationPreferences(GetPortfolioPreferencesResponseApplicationPreferences applicationPreferences) {
    this.applicationPreferences = applicationPreferences;
  }


  public GetPortfolioPreferencesResponse databasePreferences(GetPortfolioPreferencesResponseDatabasePreferences databasePreferences) {
    this.databasePreferences = databasePreferences;
    return this;
  }

  /**
   * Get databasePreferences
   * @return databasePreferences
   */
  @javax.annotation.Nullable
  public GetPortfolioPreferencesResponseDatabasePreferences getDatabasePreferences() {
    return databasePreferences;
  }

  public void setDatabasePreferences(GetPortfolioPreferencesResponseDatabasePreferences databasePreferences) {
    this.databasePreferences = databasePreferences;
  }


  public GetPortfolioPreferencesResponse prioritizeBusinessGoals(GetPortfolioPreferencesResponsePrioritizeBusinessGoals prioritizeBusinessGoals) {
    this.prioritizeBusinessGoals = prioritizeBusinessGoals;
    return this;
  }

  /**
   * Get prioritizeBusinessGoals
   * @return prioritizeBusinessGoals
   */
  @javax.annotation.Nullable
  public GetPortfolioPreferencesResponsePrioritizeBusinessGoals getPrioritizeBusinessGoals() {
    return prioritizeBusinessGoals;
  }

  public void setPrioritizeBusinessGoals(GetPortfolioPreferencesResponsePrioritizeBusinessGoals prioritizeBusinessGoals) {
    this.prioritizeBusinessGoals = prioritizeBusinessGoals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPortfolioPreferencesResponse getPortfolioPreferencesResponse = (GetPortfolioPreferencesResponse) o;
    return Objects.equals(this.applicationMode, getPortfolioPreferencesResponse.applicationMode) &&
        Objects.equals(this.applicationPreferences, getPortfolioPreferencesResponse.applicationPreferences) &&
        Objects.equals(this.databasePreferences, getPortfolioPreferencesResponse.databasePreferences) &&
        Objects.equals(this.prioritizeBusinessGoals, getPortfolioPreferencesResponse.prioritizeBusinessGoals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationMode, applicationPreferences, databasePreferences, prioritizeBusinessGoals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPortfolioPreferencesResponse {\n");
    sb.append("    applicationMode: ").append(toIndentedString(applicationMode)).append("\n");
    sb.append("    applicationPreferences: ").append(toIndentedString(applicationPreferences)).append("\n");
    sb.append("    databasePreferences: ").append(toIndentedString(databasePreferences)).append("\n");
    sb.append("    prioritizeBusinessGoals: ").append(toIndentedString(prioritizeBusinessGoals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationMode");
    openapiFields.add("applicationPreferences");
    openapiFields.add("databasePreferences");
    openapiFields.add("prioritizeBusinessGoals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPortfolioPreferencesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPortfolioPreferencesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPortfolioPreferencesResponse is not found in the empty JSON string", GetPortfolioPreferencesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPortfolioPreferencesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPortfolioPreferencesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `applicationMode`
      if (jsonObj.get("applicationMode") != null && !jsonObj.get("applicationMode").isJsonNull()) {
        ApplicationMode.validateJsonElement(jsonObj.get("applicationMode"));
      }
      // validate the optional field `applicationPreferences`
      if (jsonObj.get("applicationPreferences") != null && !jsonObj.get("applicationPreferences").isJsonNull()) {
        GetPortfolioPreferencesResponseApplicationPreferences.validateJsonElement(jsonObj.get("applicationPreferences"));
      }
      // validate the optional field `databasePreferences`
      if (jsonObj.get("databasePreferences") != null && !jsonObj.get("databasePreferences").isJsonNull()) {
        GetPortfolioPreferencesResponseDatabasePreferences.validateJsonElement(jsonObj.get("databasePreferences"));
      }
      // validate the optional field `prioritizeBusinessGoals`
      if (jsonObj.get("prioritizeBusinessGoals") != null && !jsonObj.get("prioritizeBusinessGoals").isJsonNull()) {
        GetPortfolioPreferencesResponsePrioritizeBusinessGoals.validateJsonElement(jsonObj.get("prioritizeBusinessGoals"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPortfolioPreferencesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPortfolioPreferencesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPortfolioPreferencesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPortfolioPreferencesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPortfolioPreferencesResponse>() {
           @Override
           public void write(JsonWriter out, GetPortfolioPreferencesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPortfolioPreferencesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPortfolioPreferencesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPortfolioPreferencesResponse
   * @throws IOException if the JSON string is invalid with respect to GetPortfolioPreferencesResponse
   */
  public static GetPortfolioPreferencesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPortfolioPreferencesResponse.class);
  }

  /**
   * Convert an instance of GetPortfolioPreferencesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

