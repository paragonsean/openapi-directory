/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PutPortfolioPreferencesRequestApplicationPreferences;
import org.openapitools.client.model.PutPortfolioPreferencesRequestDatabasePreferences;
import org.openapitools.client.model.PutPortfolioPreferencesRequestPrioritizeBusinessGoals;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutPortfolioPreferencesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutPortfolioPreferencesRequest {
  /**
   * The classification for application component types.
   */
  @JsonAdapter(ApplicationModeEnum.Adapter.class)
  public enum ApplicationModeEnum {
    ALL("ALL"),
    
    KNOWN("KNOWN"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    ApplicationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationModeEnum fromValue(String value) {
      for (ApplicationModeEnum b : ApplicationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApplicationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_MODE = "applicationMode";
  @SerializedName(SERIALIZED_NAME_APPLICATION_MODE)
  private ApplicationModeEnum applicationMode;

  public static final String SERIALIZED_NAME_APPLICATION_PREFERENCES = "applicationPreferences";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PREFERENCES)
  private PutPortfolioPreferencesRequestApplicationPreferences applicationPreferences;

  public static final String SERIALIZED_NAME_DATABASE_PREFERENCES = "databasePreferences";
  @SerializedName(SERIALIZED_NAME_DATABASE_PREFERENCES)
  private PutPortfolioPreferencesRequestDatabasePreferences databasePreferences;

  public static final String SERIALIZED_NAME_PRIORITIZE_BUSINESS_GOALS = "prioritizeBusinessGoals";
  @SerializedName(SERIALIZED_NAME_PRIORITIZE_BUSINESS_GOALS)
  private PutPortfolioPreferencesRequestPrioritizeBusinessGoals prioritizeBusinessGoals;

  public PutPortfolioPreferencesRequest() {
  }

  public PutPortfolioPreferencesRequest applicationMode(ApplicationModeEnum applicationMode) {
    this.applicationMode = applicationMode;
    return this;
  }

  /**
   * The classification for application component types.
   * @return applicationMode
   */
  @javax.annotation.Nullable
  public ApplicationModeEnum getApplicationMode() {
    return applicationMode;
  }

  public void setApplicationMode(ApplicationModeEnum applicationMode) {
    this.applicationMode = applicationMode;
  }


  public PutPortfolioPreferencesRequest applicationPreferences(PutPortfolioPreferencesRequestApplicationPreferences applicationPreferences) {
    this.applicationPreferences = applicationPreferences;
    return this;
  }

  /**
   * Get applicationPreferences
   * @return applicationPreferences
   */
  @javax.annotation.Nullable
  public PutPortfolioPreferencesRequestApplicationPreferences getApplicationPreferences() {
    return applicationPreferences;
  }

  public void setApplicationPreferences(PutPortfolioPreferencesRequestApplicationPreferences applicationPreferences) {
    this.applicationPreferences = applicationPreferences;
  }


  public PutPortfolioPreferencesRequest databasePreferences(PutPortfolioPreferencesRequestDatabasePreferences databasePreferences) {
    this.databasePreferences = databasePreferences;
    return this;
  }

  /**
   * Get databasePreferences
   * @return databasePreferences
   */
  @javax.annotation.Nullable
  public PutPortfolioPreferencesRequestDatabasePreferences getDatabasePreferences() {
    return databasePreferences;
  }

  public void setDatabasePreferences(PutPortfolioPreferencesRequestDatabasePreferences databasePreferences) {
    this.databasePreferences = databasePreferences;
  }


  public PutPortfolioPreferencesRequest prioritizeBusinessGoals(PutPortfolioPreferencesRequestPrioritizeBusinessGoals prioritizeBusinessGoals) {
    this.prioritizeBusinessGoals = prioritizeBusinessGoals;
    return this;
  }

  /**
   * Get prioritizeBusinessGoals
   * @return prioritizeBusinessGoals
   */
  @javax.annotation.Nullable
  public PutPortfolioPreferencesRequestPrioritizeBusinessGoals getPrioritizeBusinessGoals() {
    return prioritizeBusinessGoals;
  }

  public void setPrioritizeBusinessGoals(PutPortfolioPreferencesRequestPrioritizeBusinessGoals prioritizeBusinessGoals) {
    this.prioritizeBusinessGoals = prioritizeBusinessGoals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutPortfolioPreferencesRequest putPortfolioPreferencesRequest = (PutPortfolioPreferencesRequest) o;
    return Objects.equals(this.applicationMode, putPortfolioPreferencesRequest.applicationMode) &&
        Objects.equals(this.applicationPreferences, putPortfolioPreferencesRequest.applicationPreferences) &&
        Objects.equals(this.databasePreferences, putPortfolioPreferencesRequest.databasePreferences) &&
        Objects.equals(this.prioritizeBusinessGoals, putPortfolioPreferencesRequest.prioritizeBusinessGoals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationMode, applicationPreferences, databasePreferences, prioritizeBusinessGoals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutPortfolioPreferencesRequest {\n");
    sb.append("    applicationMode: ").append(toIndentedString(applicationMode)).append("\n");
    sb.append("    applicationPreferences: ").append(toIndentedString(applicationPreferences)).append("\n");
    sb.append("    databasePreferences: ").append(toIndentedString(databasePreferences)).append("\n");
    sb.append("    prioritizeBusinessGoals: ").append(toIndentedString(prioritizeBusinessGoals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationMode");
    openapiFields.add("applicationPreferences");
    openapiFields.add("databasePreferences");
    openapiFields.add("prioritizeBusinessGoals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutPortfolioPreferencesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutPortfolioPreferencesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutPortfolioPreferencesRequest is not found in the empty JSON string", PutPortfolioPreferencesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutPortfolioPreferencesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutPortfolioPreferencesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applicationMode") != null && !jsonObj.get("applicationMode").isJsonNull()) && !jsonObj.get("applicationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationMode").toString()));
      }
      // validate the optional field `applicationMode`
      if (jsonObj.get("applicationMode") != null && !jsonObj.get("applicationMode").isJsonNull()) {
        ApplicationModeEnum.validateJsonElement(jsonObj.get("applicationMode"));
      }
      // validate the optional field `applicationPreferences`
      if (jsonObj.get("applicationPreferences") != null && !jsonObj.get("applicationPreferences").isJsonNull()) {
        PutPortfolioPreferencesRequestApplicationPreferences.validateJsonElement(jsonObj.get("applicationPreferences"));
      }
      // validate the optional field `databasePreferences`
      if (jsonObj.get("databasePreferences") != null && !jsonObj.get("databasePreferences").isJsonNull()) {
        PutPortfolioPreferencesRequestDatabasePreferences.validateJsonElement(jsonObj.get("databasePreferences"));
      }
      // validate the optional field `prioritizeBusinessGoals`
      if (jsonObj.get("prioritizeBusinessGoals") != null && !jsonObj.get("prioritizeBusinessGoals").isJsonNull()) {
        PutPortfolioPreferencesRequestPrioritizeBusinessGoals.validateJsonElement(jsonObj.get("prioritizeBusinessGoals"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutPortfolioPreferencesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutPortfolioPreferencesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutPortfolioPreferencesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutPortfolioPreferencesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutPortfolioPreferencesRequest>() {
           @Override
           public void write(JsonWriter out, PutPortfolioPreferencesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutPortfolioPreferencesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutPortfolioPreferencesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutPortfolioPreferencesRequest
   * @throws IOException if the JSON string is invalid with respect to PutPortfolioPreferencesRequest
   */
  public static PutPortfolioPreferencesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutPortfolioPreferencesRequest.class);
  }

  /**
   * Convert an instance of PutPortfolioPreferencesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

