/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetRecommendationReportDetailsResponseRecommendationReportDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRecommendationReportDetailsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRecommendationReportDetailsResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RECOMMENDATION_REPORT_DETAILS = "recommendationReportDetails";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_REPORT_DETAILS)
  private GetRecommendationReportDetailsResponseRecommendationReportDetails recommendationReportDetails;

  public GetRecommendationReportDetailsResponse() {
  }

  public GetRecommendationReportDetailsResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetRecommendationReportDetailsResponse recommendationReportDetails(GetRecommendationReportDetailsResponseRecommendationReportDetails recommendationReportDetails) {
    this.recommendationReportDetails = recommendationReportDetails;
    return this;
  }

  /**
   * Get recommendationReportDetails
   * @return recommendationReportDetails
   */
  @javax.annotation.Nullable
  public GetRecommendationReportDetailsResponseRecommendationReportDetails getRecommendationReportDetails() {
    return recommendationReportDetails;
  }

  public void setRecommendationReportDetails(GetRecommendationReportDetailsResponseRecommendationReportDetails recommendationReportDetails) {
    this.recommendationReportDetails = recommendationReportDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRecommendationReportDetailsResponse getRecommendationReportDetailsResponse = (GetRecommendationReportDetailsResponse) o;
    return Objects.equals(this.id, getRecommendationReportDetailsResponse.id) &&
        Objects.equals(this.recommendationReportDetails, getRecommendationReportDetailsResponse.recommendationReportDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, recommendationReportDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRecommendationReportDetailsResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    recommendationReportDetails: ").append(toIndentedString(recommendationReportDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("recommendationReportDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRecommendationReportDetailsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRecommendationReportDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRecommendationReportDetailsResponse is not found in the empty JSON string", GetRecommendationReportDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRecommendationReportDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRecommendationReportDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `recommendationReportDetails`
      if (jsonObj.get("recommendationReportDetails") != null && !jsonObj.get("recommendationReportDetails").isJsonNull()) {
        GetRecommendationReportDetailsResponseRecommendationReportDetails.validateJsonElement(jsonObj.get("recommendationReportDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRecommendationReportDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRecommendationReportDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRecommendationReportDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRecommendationReportDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRecommendationReportDetailsResponse>() {
           @Override
           public void write(JsonWriter out, GetRecommendationReportDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRecommendationReportDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRecommendationReportDetailsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRecommendationReportDetailsResponse
   * @throws IOException if the JSON string is invalid with respect to GetRecommendationReportDetailsResponse
   */
  public static GetRecommendationReportDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRecommendationReportDetailsResponse.class);
  }

  /**
   * Convert an instance of GetRecommendationReportDetailsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

