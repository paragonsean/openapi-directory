/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AssessmentStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAssessmentResponseDataCollectionDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetAssessmentResponseDataCollectionDetails {
  public static final String SERIALIZED_NAME_COMPLETION_TIME = "completionTime";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TIME)
  private OffsetDateTime completionTime;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private Integer failed;

  public static final String SERIALIZED_NAME_IN_PROGRESS = "inProgress";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS)
  private Integer inProgress;

  public static final String SERIALIZED_NAME_SERVERS = "servers";
  @SerializedName(SERIALIZED_NAME_SERVERS)
  private Integer servers;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AssessmentStatus status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Integer success;

  public GetAssessmentResponseDataCollectionDetails() {
  }

  public GetAssessmentResponseDataCollectionDetails completionTime(OffsetDateTime completionTime) {
    this.completionTime = completionTime;
    return this;
  }

  /**
   * Get completionTime
   * @return completionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletionTime() {
    return completionTime;
  }

  public void setCompletionTime(OffsetDateTime completionTime) {
    this.completionTime = completionTime;
  }


  public GetAssessmentResponseDataCollectionDetails failed(Integer failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Get failed
   * @return failed
   */
  @javax.annotation.Nullable
  public Integer getFailed() {
    return failed;
  }

  public void setFailed(Integer failed) {
    this.failed = failed;
  }


  public GetAssessmentResponseDataCollectionDetails inProgress(Integer inProgress) {
    this.inProgress = inProgress;
    return this;
  }

  /**
   * Get inProgress
   * @return inProgress
   */
  @javax.annotation.Nullable
  public Integer getInProgress() {
    return inProgress;
  }

  public void setInProgress(Integer inProgress) {
    this.inProgress = inProgress;
  }


  public GetAssessmentResponseDataCollectionDetails servers(Integer servers) {
    this.servers = servers;
    return this;
  }

  /**
   * Get servers
   * @return servers
   */
  @javax.annotation.Nullable
  public Integer getServers() {
    return servers;
  }

  public void setServers(Integer servers) {
    this.servers = servers;
  }


  public GetAssessmentResponseDataCollectionDetails startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public GetAssessmentResponseDataCollectionDetails status(AssessmentStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public AssessmentStatus getStatus() {
    return status;
  }

  public void setStatus(AssessmentStatus status) {
    this.status = status;
  }


  public GetAssessmentResponseDataCollectionDetails statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public GetAssessmentResponseDataCollectionDetails success(Integer success) {
    this.success = success;
    return this;
  }

  /**
   * Get success
   * @return success
   */
  @javax.annotation.Nullable
  public Integer getSuccess() {
    return success;
  }

  public void setSuccess(Integer success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAssessmentResponseDataCollectionDetails getAssessmentResponseDataCollectionDetails = (GetAssessmentResponseDataCollectionDetails) o;
    return Objects.equals(this.completionTime, getAssessmentResponseDataCollectionDetails.completionTime) &&
        Objects.equals(this.failed, getAssessmentResponseDataCollectionDetails.failed) &&
        Objects.equals(this.inProgress, getAssessmentResponseDataCollectionDetails.inProgress) &&
        Objects.equals(this.servers, getAssessmentResponseDataCollectionDetails.servers) &&
        Objects.equals(this.startTime, getAssessmentResponseDataCollectionDetails.startTime) &&
        Objects.equals(this.status, getAssessmentResponseDataCollectionDetails.status) &&
        Objects.equals(this.statusMessage, getAssessmentResponseDataCollectionDetails.statusMessage) &&
        Objects.equals(this.success, getAssessmentResponseDataCollectionDetails.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionTime, failed, inProgress, servers, startTime, status, statusMessage, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAssessmentResponseDataCollectionDetails {\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
    sb.append("    servers: ").append(toIndentedString(servers)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completionTime");
    openapiFields.add("failed");
    openapiFields.add("inProgress");
    openapiFields.add("servers");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("statusMessage");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAssessmentResponseDataCollectionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAssessmentResponseDataCollectionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAssessmentResponseDataCollectionDetails is not found in the empty JSON string", GetAssessmentResponseDataCollectionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAssessmentResponseDataCollectionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAssessmentResponseDataCollectionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `completionTime`
      if (jsonObj.get("completionTime") != null && !jsonObj.get("completionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("completionTime"));
      }
      // validate the optional field `failed`
      if (jsonObj.get("failed") != null && !jsonObj.get("failed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("failed"));
      }
      // validate the optional field `inProgress`
      if (jsonObj.get("inProgress") != null && !jsonObj.get("inProgress").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("inProgress"));
      }
      // validate the optional field `servers`
      if (jsonObj.get("servers") != null && !jsonObj.get("servers").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("servers"));
      }
      // validate the optional field `startTime`
      if (jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        AssessmentStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `statusMessage`
      if (jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusMessage"));
      }
      // validate the optional field `success`
      if (jsonObj.get("success") != null && !jsonObj.get("success").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("success"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAssessmentResponseDataCollectionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAssessmentResponseDataCollectionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAssessmentResponseDataCollectionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAssessmentResponseDataCollectionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAssessmentResponseDataCollectionDetails>() {
           @Override
           public void write(JsonWriter out, GetAssessmentResponseDataCollectionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAssessmentResponseDataCollectionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAssessmentResponseDataCollectionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAssessmentResponseDataCollectionDetails
   * @throws IOException if the JSON string is invalid with respect to GetAssessmentResponseDataCollectionDetails
   */
  public static GetAssessmentResponseDataCollectionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAssessmentResponseDataCollectionDetails.class);
  }

  /**
   * Convert an instance of GetAssessmentResponseDataCollectionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

