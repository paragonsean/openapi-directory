/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TransformationToolName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Information of the transformation tool that can be used to migrate and modernize the application. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransformationTool {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private TransformationToolName name;

  public static final String SERIALIZED_NAME_TRANFORMATION_TOOL_INSTALLATION_LINK = "tranformationToolInstallationLink";
  @SerializedName(SERIALIZED_NAME_TRANFORMATION_TOOL_INSTALLATION_LINK)
  private String tranformationToolInstallationLink;

  public TransformationTool() {
  }

  public TransformationTool description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TransformationTool name(TransformationToolName name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public TransformationToolName getName() {
    return name;
  }

  public void setName(TransformationToolName name) {
    this.name = name;
  }


  public TransformationTool tranformationToolInstallationLink(String tranformationToolInstallationLink) {
    this.tranformationToolInstallationLink = tranformationToolInstallationLink;
    return this;
  }

  /**
   * Get tranformationToolInstallationLink
   * @return tranformationToolInstallationLink
   */
  @javax.annotation.Nullable
  public String getTranformationToolInstallationLink() {
    return tranformationToolInstallationLink;
  }

  public void setTranformationToolInstallationLink(String tranformationToolInstallationLink) {
    this.tranformationToolInstallationLink = tranformationToolInstallationLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransformationTool transformationTool = (TransformationTool) o;
    return Objects.equals(this.description, transformationTool.description) &&
        Objects.equals(this.name, transformationTool.name) &&
        Objects.equals(this.tranformationToolInstallationLink, transformationTool.tranformationToolInstallationLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, tranformationToolInstallationLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransformationTool {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tranformationToolInstallationLink: ").append(toIndentedString(tranformationToolInstallationLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("tranformationToolInstallationLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransformationTool
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransformationTool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransformationTool is not found in the empty JSON string", TransformationTool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransformationTool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransformationTool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        TransformationToolName.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `tranformationToolInstallationLink`
      if (jsonObj.get("tranformationToolInstallationLink") != null && !jsonObj.get("tranformationToolInstallationLink").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("tranformationToolInstallationLink"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransformationTool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransformationTool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransformationTool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransformationTool.class));

       return (TypeAdapter<T>) new TypeAdapter<TransformationTool>() {
           @Override
           public void write(JsonWriter out, TransformationTool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransformationTool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransformationTool given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransformationTool
   * @throws IOException if the JSON string is invalid with respect to TransformationTool
   */
  public static TransformationTool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransformationTool.class);
  }

  /**
   * Convert an instance of TransformationTool to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

