/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Group;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartImportFileTaskRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartImportFileTaskRequest {
  public static final String SERIALIZED_NAME_S3_BUCKET = "S3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  private String s3Bucket;

  /**
   * Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. 
   */
  @JsonAdapter(DataSourceTypeEnum.Adapter.class)
  public enum DataSourceTypeEnum {
    APPLICATION_DISCOVERY_SERVICE("ApplicationDiscoveryService"),
    
    MPA("MPA"),
    
    IMPORT("Import");

    private String value;

    DataSourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataSourceTypeEnum fromValue(String value) {
      for (DataSourceTypeEnum b : DataSourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataSourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataSourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataSourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataSourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataSourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_SOURCE_TYPE = "dataSourceType";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_TYPE)
  private DataSourceTypeEnum dataSourceType;

  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private List<Group> groupId = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_S3BUCKET_FOR_REPORT_DATA = "s3bucketForReportData";
  @SerializedName(SERIALIZED_NAME_S3BUCKET_FOR_REPORT_DATA)
  private String s3bucketForReportData;

  public static final String SERIALIZED_NAME_S3KEY = "s3key";
  @SerializedName(SERIALIZED_NAME_S3KEY)
  private String s3key;

  public StartImportFileTaskRequest() {
  }

  public StartImportFileTaskRequest s3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   *  The S3 bucket where the import file is located. The bucket name is required to begin with &lt;code&gt;migrationhub-strategy-&lt;/code&gt;.
   * @return s3Bucket
   */
  @javax.annotation.Nonnull
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }


  public StartImportFileTaskRequest dataSourceType(DataSourceTypeEnum dataSourceType) {
    this.dataSourceType = dataSourceType;
    return this;
  }

  /**
   * Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. 
   * @return dataSourceType
   */
  @javax.annotation.Nullable
  public DataSourceTypeEnum getDataSourceType() {
    return dataSourceType;
  }

  public void setDataSourceType(DataSourceTypeEnum dataSourceType) {
    this.dataSourceType = dataSourceType;
  }


  public StartImportFileTaskRequest groupId(List<Group> groupId) {
    this.groupId = groupId;
    return this;
  }

  public StartImportFileTaskRequest addGroupIdItem(Group groupIdItem) {
    if (this.groupId == null) {
      this.groupId = new ArrayList<>();
    }
    this.groupId.add(groupIdItem);
    return this;
  }

  /**
   * Groups the resources in the import file together with a unique name. This ID can be as filter in &lt;code&gt;ListApplicationComponents&lt;/code&gt; and &lt;code&gt;ListServers&lt;/code&gt;. 
   * @return groupId
   */
  @javax.annotation.Nullable
  public List<Group> getGroupId() {
    return groupId;
  }

  public void setGroupId(List<Group> groupId) {
    this.groupId = groupId;
  }


  public StartImportFileTaskRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   *  A descriptive name for the request. 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StartImportFileTaskRequest s3bucketForReportData(String s3bucketForReportData) {
    this.s3bucketForReportData = s3bucketForReportData;
    return this;
  }

  /**
   *  The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. 
   * @return s3bucketForReportData
   */
  @javax.annotation.Nullable
  public String getS3bucketForReportData() {
    return s3bucketForReportData;
  }

  public void setS3bucketForReportData(String s3bucketForReportData) {
    this.s3bucketForReportData = s3bucketForReportData;
  }


  public StartImportFileTaskRequest s3key(String s3key) {
    this.s3key = s3key;
    return this;
  }

  /**
   *  The Amazon S3 key name of the import file. 
   * @return s3key
   */
  @javax.annotation.Nonnull
  public String getS3key() {
    return s3key;
  }

  public void setS3key(String s3key) {
    this.s3key = s3key;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartImportFileTaskRequest startImportFileTaskRequest = (StartImportFileTaskRequest) o;
    return Objects.equals(this.s3Bucket, startImportFileTaskRequest.s3Bucket) &&
        Objects.equals(this.dataSourceType, startImportFileTaskRequest.dataSourceType) &&
        Objects.equals(this.groupId, startImportFileTaskRequest.groupId) &&
        Objects.equals(this.name, startImportFileTaskRequest.name) &&
        Objects.equals(this.s3bucketForReportData, startImportFileTaskRequest.s3bucketForReportData) &&
        Objects.equals(this.s3key, startImportFileTaskRequest.s3key);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3Bucket, dataSourceType, groupId, name, s3bucketForReportData, s3key);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartImportFileTaskRequest {\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("    dataSourceType: ").append(toIndentedString(dataSourceType)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    s3bucketForReportData: ").append(toIndentedString(s3bucketForReportData)).append("\n");
    sb.append("    s3key: ").append(toIndentedString(s3key)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S3Bucket");
    openapiFields.add("dataSourceType");
    openapiFields.add("groupId");
    openapiFields.add("name");
    openapiFields.add("s3bucketForReportData");
    openapiFields.add("s3key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("S3Bucket");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("s3key");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartImportFileTaskRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartImportFileTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartImportFileTaskRequest is not found in the empty JSON string", StartImportFileTaskRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartImportFileTaskRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartImportFileTaskRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartImportFileTaskRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("S3Bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S3Bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S3Bucket").toString()));
      }
      if ((jsonObj.get("dataSourceType") != null && !jsonObj.get("dataSourceType").isJsonNull()) && !jsonObj.get("dataSourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceType").toString()));
      }
      // validate the optional field `dataSourceType`
      if (jsonObj.get("dataSourceType") != null && !jsonObj.get("dataSourceType").isJsonNull()) {
        DataSourceTypeEnum.validateJsonElement(jsonObj.get("dataSourceType"));
      }
      if (jsonObj.get("groupId") != null && !jsonObj.get("groupId").isJsonNull()) {
        JsonArray jsonArraygroupId = jsonObj.getAsJsonArray("groupId");
        if (jsonArraygroupId != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupId").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupId` to be an array in the JSON string but got `%s`", jsonObj.get("groupId").toString()));
          }

          // validate the optional field `groupId` (array)
          for (int i = 0; i < jsonArraygroupId.size(); i++) {
            Group.validateJsonElement(jsonArraygroupId.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("s3bucketForReportData") != null && !jsonObj.get("s3bucketForReportData").isJsonNull()) && !jsonObj.get("s3bucketForReportData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3bucketForReportData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3bucketForReportData").toString()));
      }
      if (!jsonObj.get("s3key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartImportFileTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartImportFileTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartImportFileTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartImportFileTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartImportFileTaskRequest>() {
           @Override
           public void write(JsonWriter out, StartImportFileTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartImportFileTaskRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartImportFileTaskRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartImportFileTaskRequest
   * @throws IOException if the JSON string is invalid with respect to StartImportFileTaskRequest
   */
  public static StartImportFileTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartImportFileTaskRequest.class);
  }

  /**
   * Convert an instance of StartImportFileTaskRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

