/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssessmentTarget;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartAssessmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartAssessmentRequest {
  public static final String SERIALIZED_NAME_ASSESSMENT_TARGETS = "assessmentTargets";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_TARGETS)
  private List<AssessmentTarget> assessmentTargets = new ArrayList<>();

  public static final String SERIALIZED_NAME_S3BUCKET_FOR_ANALYSIS_DATA = "s3bucketForAnalysisData";
  @SerializedName(SERIALIZED_NAME_S3BUCKET_FOR_ANALYSIS_DATA)
  private String s3bucketForAnalysisData;

  public static final String SERIALIZED_NAME_S3BUCKET_FOR_REPORT_DATA = "s3bucketForReportData";
  @SerializedName(SERIALIZED_NAME_S3BUCKET_FOR_REPORT_DATA)
  private String s3bucketForReportData;

  public StartAssessmentRequest() {
  }

  public StartAssessmentRequest assessmentTargets(List<AssessmentTarget> assessmentTargets) {
    this.assessmentTargets = assessmentTargets;
    return this;
  }

  public StartAssessmentRequest addAssessmentTargetsItem(AssessmentTarget assessmentTargetsItem) {
    if (this.assessmentTargets == null) {
      this.assessmentTargets = new ArrayList<>();
    }
    this.assessmentTargets.add(assessmentTargetsItem);
    return this;
  }

  /**
   * List of criteria for assessment.
   * @return assessmentTargets
   */
  @javax.annotation.Nullable
  public List<AssessmentTarget> getAssessmentTargets() {
    return assessmentTargets;
  }

  public void setAssessmentTargets(List<AssessmentTarget> assessmentTargets) {
    this.assessmentTargets = assessmentTargets;
  }


  public StartAssessmentRequest s3bucketForAnalysisData(String s3bucketForAnalysisData) {
    this.s3bucketForAnalysisData = s3bucketForAnalysisData;
    return this;
  }

  /**
   *  The S3 bucket used by the collectors to send analysis data to the service. The bucket name must begin with &lt;code&gt;migrationhub-strategy-&lt;/code&gt;. 
   * @return s3bucketForAnalysisData
   */
  @javax.annotation.Nullable
  public String getS3bucketForAnalysisData() {
    return s3bucketForAnalysisData;
  }

  public void setS3bucketForAnalysisData(String s3bucketForAnalysisData) {
    this.s3bucketForAnalysisData = s3bucketForAnalysisData;
  }


  public StartAssessmentRequest s3bucketForReportData(String s3bucketForReportData) {
    this.s3bucketForReportData = s3bucketForReportData;
    return this;
  }

  /**
   *  The S3 bucket where all the reports generated by the service are stored. The bucket name must begin with &lt;code&gt;migrationhub-strategy-&lt;/code&gt;. 
   * @return s3bucketForReportData
   */
  @javax.annotation.Nullable
  public String getS3bucketForReportData() {
    return s3bucketForReportData;
  }

  public void setS3bucketForReportData(String s3bucketForReportData) {
    this.s3bucketForReportData = s3bucketForReportData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartAssessmentRequest startAssessmentRequest = (StartAssessmentRequest) o;
    return Objects.equals(this.assessmentTargets, startAssessmentRequest.assessmentTargets) &&
        Objects.equals(this.s3bucketForAnalysisData, startAssessmentRequest.s3bucketForAnalysisData) &&
        Objects.equals(this.s3bucketForReportData, startAssessmentRequest.s3bucketForReportData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessmentTargets, s3bucketForAnalysisData, s3bucketForReportData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartAssessmentRequest {\n");
    sb.append("    assessmentTargets: ").append(toIndentedString(assessmentTargets)).append("\n");
    sb.append("    s3bucketForAnalysisData: ").append(toIndentedString(s3bucketForAnalysisData)).append("\n");
    sb.append("    s3bucketForReportData: ").append(toIndentedString(s3bucketForReportData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessmentTargets");
    openapiFields.add("s3bucketForAnalysisData");
    openapiFields.add("s3bucketForReportData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartAssessmentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartAssessmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartAssessmentRequest is not found in the empty JSON string", StartAssessmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartAssessmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartAssessmentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("assessmentTargets") != null && !jsonObj.get("assessmentTargets").isJsonNull()) {
        JsonArray jsonArrayassessmentTargets = jsonObj.getAsJsonArray("assessmentTargets");
        if (jsonArrayassessmentTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assessmentTargets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assessmentTargets` to be an array in the JSON string but got `%s`", jsonObj.get("assessmentTargets").toString()));
          }

          // validate the optional field `assessmentTargets` (array)
          for (int i = 0; i < jsonArrayassessmentTargets.size(); i++) {
            AssessmentTarget.validateJsonElement(jsonArrayassessmentTargets.get(i));
          };
        }
      }
      if ((jsonObj.get("s3bucketForAnalysisData") != null && !jsonObj.get("s3bucketForAnalysisData").isJsonNull()) && !jsonObj.get("s3bucketForAnalysisData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3bucketForAnalysisData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3bucketForAnalysisData").toString()));
      }
      if ((jsonObj.get("s3bucketForReportData") != null && !jsonObj.get("s3bucketForReportData").isJsonNull()) && !jsonObj.get("s3bucketForReportData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3bucketForReportData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3bucketForReportData").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartAssessmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartAssessmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartAssessmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartAssessmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartAssessmentRequest>() {
           @Override
           public void write(JsonWriter out, StartAssessmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartAssessmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartAssessmentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartAssessmentRequest
   * @throws IOException if the JSON string is invalid with respect to StartAssessmentRequest
   */
  public static StartAssessmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartAssessmentRequest.class);
  }

  /**
   * Convert an instance of StartAssessmentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

