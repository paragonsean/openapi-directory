/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationComponentStrategyRecommendation;
import org.openapitools.client.model.StrategyRecommendation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Contains information about a strategy recommendation for an application component. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationComponentStrategy {
  public static final String SERIALIZED_NAME_IS_PREFERRED = "isPreferred";
  @SerializedName(SERIALIZED_NAME_IS_PREFERRED)
  private Boolean isPreferred;

  public static final String SERIALIZED_NAME_RECOMMENDATION = "recommendation";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION)
  private ApplicationComponentStrategyRecommendation recommendation;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StrategyRecommendation status;

  public ApplicationComponentStrategy() {
  }

  public ApplicationComponentStrategy isPreferred(Boolean isPreferred) {
    this.isPreferred = isPreferred;
    return this;
  }

  /**
   * Get isPreferred
   * @return isPreferred
   */
  @javax.annotation.Nullable
  public Boolean getIsPreferred() {
    return isPreferred;
  }

  public void setIsPreferred(Boolean isPreferred) {
    this.isPreferred = isPreferred;
  }


  public ApplicationComponentStrategy recommendation(ApplicationComponentStrategyRecommendation recommendation) {
    this.recommendation = recommendation;
    return this;
  }

  /**
   * Get recommendation
   * @return recommendation
   */
  @javax.annotation.Nullable
  public ApplicationComponentStrategyRecommendation getRecommendation() {
    return recommendation;
  }

  public void setRecommendation(ApplicationComponentStrategyRecommendation recommendation) {
    this.recommendation = recommendation;
  }


  public ApplicationComponentStrategy status(StrategyRecommendation status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StrategyRecommendation getStatus() {
    return status;
  }

  public void setStatus(StrategyRecommendation status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationComponentStrategy applicationComponentStrategy = (ApplicationComponentStrategy) o;
    return Objects.equals(this.isPreferred, applicationComponentStrategy.isPreferred) &&
        Objects.equals(this.recommendation, applicationComponentStrategy.recommendation) &&
        Objects.equals(this.status, applicationComponentStrategy.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isPreferred, recommendation, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationComponentStrategy {\n");
    sb.append("    isPreferred: ").append(toIndentedString(isPreferred)).append("\n");
    sb.append("    recommendation: ").append(toIndentedString(recommendation)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isPreferred");
    openapiFields.add("recommendation");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationComponentStrategy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationComponentStrategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationComponentStrategy is not found in the empty JSON string", ApplicationComponentStrategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationComponentStrategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationComponentStrategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `isPreferred`
      if (jsonObj.get("isPreferred") != null && !jsonObj.get("isPreferred").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isPreferred"));
      }
      // validate the optional field `recommendation`
      if (jsonObj.get("recommendation") != null && !jsonObj.get("recommendation").isJsonNull()) {
        ApplicationComponentStrategyRecommendation.validateJsonElement(jsonObj.get("recommendation"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StrategyRecommendation.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationComponentStrategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationComponentStrategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationComponentStrategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationComponentStrategy.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationComponentStrategy>() {
           @Override
           public void write(JsonWriter out, ApplicationComponentStrategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationComponentStrategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationComponentStrategy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationComponentStrategy
   * @throws IOException if the JSON string is invalid with respect to ApplicationComponentStrategy
   */
  public static ApplicationComponentStrategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationComponentStrategy.class);
  }

  /**
   * Convert an instance of ApplicationComponentStrategy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

