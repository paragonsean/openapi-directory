/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AntipatternReportStatus;
import org.openapitools.client.model.AppType;
import org.openapitools.client.model.ApplicationComponentDetailAntipatternReportS3Object;
import org.openapitools.client.model.ApplicationComponentDetailAppUnitError;
import org.openapitools.client.model.ApplicationComponentDetailDatabaseConfigDetail;
import org.openapitools.client.model.ApplicationComponentDetailRecommendationSet;
import org.openapitools.client.model.InclusionStatus;
import org.openapitools.client.model.ResourceSubType;
import org.openapitools.client.model.RuntimeAnalysisStatus;
import org.openapitools.client.model.SrcCodeOrDbAnalysisStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Contains detailed information about an application component. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationComponentDetail {
  public static final String SERIALIZED_NAME_ANALYSIS_STATUS = "analysisStatus";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_STATUS)
  private SrcCodeOrDbAnalysisStatus analysisStatus;

  public static final String SERIALIZED_NAME_ANTIPATTERN_REPORT_S3_OBJECT = "antipatternReportS3Object";
  @SerializedName(SERIALIZED_NAME_ANTIPATTERN_REPORT_S3_OBJECT)
  private ApplicationComponentDetailAntipatternReportS3Object antipatternReportS3Object;

  public static final String SERIALIZED_NAME_ANTIPATTERN_REPORT_STATUS = "antipatternReportStatus";
  @SerializedName(SERIALIZED_NAME_ANTIPATTERN_REPORT_STATUS)
  private AntipatternReportStatus antipatternReportStatus;

  public static final String SERIALIZED_NAME_ANTIPATTERN_REPORT_STATUS_MESSAGE = "antipatternReportStatusMessage";
  @SerializedName(SERIALIZED_NAME_ANTIPATTERN_REPORT_STATUS_MESSAGE)
  private String antipatternReportStatusMessage;

  public static final String SERIALIZED_NAME_APP_TYPE = "appType";
  @SerializedName(SERIALIZED_NAME_APP_TYPE)
  private AppType appType;

  public static final String SERIALIZED_NAME_APP_UNIT_ERROR = "appUnitError";
  @SerializedName(SERIALIZED_NAME_APP_UNIT_ERROR)
  private ApplicationComponentDetailAppUnitError appUnitError;

  public static final String SERIALIZED_NAME_ASSOCIATED_SERVER_ID = "associatedServerId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_SERVER_ID)
  private String associatedServerId;

  public static final String SERIALIZED_NAME_DATABASE_CONFIG_DETAIL = "databaseConfigDetail";
  @SerializedName(SERIALIZED_NAME_DATABASE_CONFIG_DETAIL)
  private ApplicationComponentDetailDatabaseConfigDetail databaseConfigDetail;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INCLUSION_STATUS = "inclusionStatus";
  @SerializedName(SERIALIZED_NAME_INCLUSION_STATUS)
  private InclusionStatus inclusionStatus;

  public static final String SERIALIZED_NAME_LAST_ANALYZED_TIMESTAMP = "lastAnalyzedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_ANALYZED_TIMESTAMP)
  private OffsetDateTime lastAnalyzedTimestamp;

  public static final String SERIALIZED_NAME_LIST_ANTIPATTERN_SEVERITY_SUMMARY = "listAntipatternSeveritySummary";
  @SerializedName(SERIALIZED_NAME_LIST_ANTIPATTERN_SEVERITY_SUMMARY)
  private List listAntipatternSeveritySummary;

  public static final String SERIALIZED_NAME_MORE_SERVER_ASSOCIATION_EXISTS = "moreServerAssociationExists";
  @SerializedName(SERIALIZED_NAME_MORE_SERVER_ASSOCIATION_EXISTS)
  private Boolean moreServerAssociationExists;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OS_DRIVER = "osDriver";
  @SerializedName(SERIALIZED_NAME_OS_DRIVER)
  private String osDriver;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_RECOMMENDATION_SET = "recommendationSet";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_SET)
  private ApplicationComponentDetailRecommendationSet recommendationSet;

  public static final String SERIALIZED_NAME_RESOURCE_SUB_TYPE = "resourceSubType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SUB_TYPE)
  private ResourceSubType resourceSubType;

  public static final String SERIALIZED_NAME_RESULT_LIST = "resultList";
  @SerializedName(SERIALIZED_NAME_RESULT_LIST)
  private List resultList;

  public static final String SERIALIZED_NAME_RUNTIME_STATUS = "runtimeStatus";
  @SerializedName(SERIALIZED_NAME_RUNTIME_STATUS)
  private RuntimeAnalysisStatus runtimeStatus;

  public static final String SERIALIZED_NAME_RUNTIME_STATUS_MESSAGE = "runtimeStatusMessage";
  @SerializedName(SERIALIZED_NAME_RUNTIME_STATUS_MESSAGE)
  private String runtimeStatusMessage;

  public static final String SERIALIZED_NAME_SOURCE_CODE_REPOSITORIES = "sourceCodeRepositories";
  @SerializedName(SERIALIZED_NAME_SOURCE_CODE_REPOSITORIES)
  private List sourceCodeRepositories;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public ApplicationComponentDetail() {
  }

  public ApplicationComponentDetail analysisStatus(SrcCodeOrDbAnalysisStatus analysisStatus) {
    this.analysisStatus = analysisStatus;
    return this;
  }

  /**
   * Get analysisStatus
   * @return analysisStatus
   */
  @javax.annotation.Nullable
  public SrcCodeOrDbAnalysisStatus getAnalysisStatus() {
    return analysisStatus;
  }

  public void setAnalysisStatus(SrcCodeOrDbAnalysisStatus analysisStatus) {
    this.analysisStatus = analysisStatus;
  }


  public ApplicationComponentDetail antipatternReportS3Object(ApplicationComponentDetailAntipatternReportS3Object antipatternReportS3Object) {
    this.antipatternReportS3Object = antipatternReportS3Object;
    return this;
  }

  /**
   * Get antipatternReportS3Object
   * @return antipatternReportS3Object
   */
  @javax.annotation.Nullable
  public ApplicationComponentDetailAntipatternReportS3Object getAntipatternReportS3Object() {
    return antipatternReportS3Object;
  }

  public void setAntipatternReportS3Object(ApplicationComponentDetailAntipatternReportS3Object antipatternReportS3Object) {
    this.antipatternReportS3Object = antipatternReportS3Object;
  }


  public ApplicationComponentDetail antipatternReportStatus(AntipatternReportStatus antipatternReportStatus) {
    this.antipatternReportStatus = antipatternReportStatus;
    return this;
  }

  /**
   * Get antipatternReportStatus
   * @return antipatternReportStatus
   */
  @javax.annotation.Nullable
  public AntipatternReportStatus getAntipatternReportStatus() {
    return antipatternReportStatus;
  }

  public void setAntipatternReportStatus(AntipatternReportStatus antipatternReportStatus) {
    this.antipatternReportStatus = antipatternReportStatus;
  }


  public ApplicationComponentDetail antipatternReportStatusMessage(String antipatternReportStatusMessage) {
    this.antipatternReportStatusMessage = antipatternReportStatusMessage;
    return this;
  }

  /**
   * Get antipatternReportStatusMessage
   * @return antipatternReportStatusMessage
   */
  @javax.annotation.Nullable
  public String getAntipatternReportStatusMessage() {
    return antipatternReportStatusMessage;
  }

  public void setAntipatternReportStatusMessage(String antipatternReportStatusMessage) {
    this.antipatternReportStatusMessage = antipatternReportStatusMessage;
  }


  public ApplicationComponentDetail appType(AppType appType) {
    this.appType = appType;
    return this;
  }

  /**
   * Get appType
   * @return appType
   */
  @javax.annotation.Nullable
  public AppType getAppType() {
    return appType;
  }

  public void setAppType(AppType appType) {
    this.appType = appType;
  }


  public ApplicationComponentDetail appUnitError(ApplicationComponentDetailAppUnitError appUnitError) {
    this.appUnitError = appUnitError;
    return this;
  }

  /**
   * Get appUnitError
   * @return appUnitError
   */
  @javax.annotation.Nullable
  public ApplicationComponentDetailAppUnitError getAppUnitError() {
    return appUnitError;
  }

  public void setAppUnitError(ApplicationComponentDetailAppUnitError appUnitError) {
    this.appUnitError = appUnitError;
  }


  public ApplicationComponentDetail associatedServerId(String associatedServerId) {
    this.associatedServerId = associatedServerId;
    return this;
  }

  /**
   * Get associatedServerId
   * @return associatedServerId
   */
  @javax.annotation.Nullable
  public String getAssociatedServerId() {
    return associatedServerId;
  }

  public void setAssociatedServerId(String associatedServerId) {
    this.associatedServerId = associatedServerId;
  }


  public ApplicationComponentDetail databaseConfigDetail(ApplicationComponentDetailDatabaseConfigDetail databaseConfigDetail) {
    this.databaseConfigDetail = databaseConfigDetail;
    return this;
  }

  /**
   * Get databaseConfigDetail
   * @return databaseConfigDetail
   */
  @javax.annotation.Nullable
  public ApplicationComponentDetailDatabaseConfigDetail getDatabaseConfigDetail() {
    return databaseConfigDetail;
  }

  public void setDatabaseConfigDetail(ApplicationComponentDetailDatabaseConfigDetail databaseConfigDetail) {
    this.databaseConfigDetail = databaseConfigDetail;
  }


  public ApplicationComponentDetail id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ApplicationComponentDetail inclusionStatus(InclusionStatus inclusionStatus) {
    this.inclusionStatus = inclusionStatus;
    return this;
  }

  /**
   * Get inclusionStatus
   * @return inclusionStatus
   */
  @javax.annotation.Nullable
  public InclusionStatus getInclusionStatus() {
    return inclusionStatus;
  }

  public void setInclusionStatus(InclusionStatus inclusionStatus) {
    this.inclusionStatus = inclusionStatus;
  }


  public ApplicationComponentDetail lastAnalyzedTimestamp(OffsetDateTime lastAnalyzedTimestamp) {
    this.lastAnalyzedTimestamp = lastAnalyzedTimestamp;
    return this;
  }

  /**
   * Get lastAnalyzedTimestamp
   * @return lastAnalyzedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAnalyzedTimestamp() {
    return lastAnalyzedTimestamp;
  }

  public void setLastAnalyzedTimestamp(OffsetDateTime lastAnalyzedTimestamp) {
    this.lastAnalyzedTimestamp = lastAnalyzedTimestamp;
  }


  public ApplicationComponentDetail listAntipatternSeveritySummary(List listAntipatternSeveritySummary) {
    this.listAntipatternSeveritySummary = listAntipatternSeveritySummary;
    return this;
  }

  /**
   * Get listAntipatternSeveritySummary
   * @return listAntipatternSeveritySummary
   */
  @javax.annotation.Nullable
  public List getListAntipatternSeveritySummary() {
    return listAntipatternSeveritySummary;
  }

  public void setListAntipatternSeveritySummary(List listAntipatternSeveritySummary) {
    this.listAntipatternSeveritySummary = listAntipatternSeveritySummary;
  }


  public ApplicationComponentDetail moreServerAssociationExists(Boolean moreServerAssociationExists) {
    this.moreServerAssociationExists = moreServerAssociationExists;
    return this;
  }

  /**
   * Get moreServerAssociationExists
   * @return moreServerAssociationExists
   */
  @javax.annotation.Nullable
  public Boolean getMoreServerAssociationExists() {
    return moreServerAssociationExists;
  }

  public void setMoreServerAssociationExists(Boolean moreServerAssociationExists) {
    this.moreServerAssociationExists = moreServerAssociationExists;
  }


  public ApplicationComponentDetail name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationComponentDetail osDriver(String osDriver) {
    this.osDriver = osDriver;
    return this;
  }

  /**
   * Get osDriver
   * @return osDriver
   */
  @javax.annotation.Nullable
  public String getOsDriver() {
    return osDriver;
  }

  public void setOsDriver(String osDriver) {
    this.osDriver = osDriver;
  }


  public ApplicationComponentDetail osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * Get osVersion
   * @return osVersion
   */
  @javax.annotation.Nullable
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public ApplicationComponentDetail recommendationSet(ApplicationComponentDetailRecommendationSet recommendationSet) {
    this.recommendationSet = recommendationSet;
    return this;
  }

  /**
   * Get recommendationSet
   * @return recommendationSet
   */
  @javax.annotation.Nullable
  public ApplicationComponentDetailRecommendationSet getRecommendationSet() {
    return recommendationSet;
  }

  public void setRecommendationSet(ApplicationComponentDetailRecommendationSet recommendationSet) {
    this.recommendationSet = recommendationSet;
  }


  public ApplicationComponentDetail resourceSubType(ResourceSubType resourceSubType) {
    this.resourceSubType = resourceSubType;
    return this;
  }

  /**
   * Get resourceSubType
   * @return resourceSubType
   */
  @javax.annotation.Nullable
  public ResourceSubType getResourceSubType() {
    return resourceSubType;
  }

  public void setResourceSubType(ResourceSubType resourceSubType) {
    this.resourceSubType = resourceSubType;
  }


  public ApplicationComponentDetail resultList(List resultList) {
    this.resultList = resultList;
    return this;
  }

  /**
   * Get resultList
   * @return resultList
   */
  @javax.annotation.Nullable
  public List getResultList() {
    return resultList;
  }

  public void setResultList(List resultList) {
    this.resultList = resultList;
  }


  public ApplicationComponentDetail runtimeStatus(RuntimeAnalysisStatus runtimeStatus) {
    this.runtimeStatus = runtimeStatus;
    return this;
  }

  /**
   * Get runtimeStatus
   * @return runtimeStatus
   */
  @javax.annotation.Nullable
  public RuntimeAnalysisStatus getRuntimeStatus() {
    return runtimeStatus;
  }

  public void setRuntimeStatus(RuntimeAnalysisStatus runtimeStatus) {
    this.runtimeStatus = runtimeStatus;
  }


  public ApplicationComponentDetail runtimeStatusMessage(String runtimeStatusMessage) {
    this.runtimeStatusMessage = runtimeStatusMessage;
    return this;
  }

  /**
   * Get runtimeStatusMessage
   * @return runtimeStatusMessage
   */
  @javax.annotation.Nullable
  public String getRuntimeStatusMessage() {
    return runtimeStatusMessage;
  }

  public void setRuntimeStatusMessage(String runtimeStatusMessage) {
    this.runtimeStatusMessage = runtimeStatusMessage;
  }


  public ApplicationComponentDetail sourceCodeRepositories(List sourceCodeRepositories) {
    this.sourceCodeRepositories = sourceCodeRepositories;
    return this;
  }

  /**
   * Get sourceCodeRepositories
   * @return sourceCodeRepositories
   */
  @javax.annotation.Nullable
  public List getSourceCodeRepositories() {
    return sourceCodeRepositories;
  }

  public void setSourceCodeRepositories(List sourceCodeRepositories) {
    this.sourceCodeRepositories = sourceCodeRepositories;
  }


  public ApplicationComponentDetail statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationComponentDetail applicationComponentDetail = (ApplicationComponentDetail) o;
    return Objects.equals(this.analysisStatus, applicationComponentDetail.analysisStatus) &&
        Objects.equals(this.antipatternReportS3Object, applicationComponentDetail.antipatternReportS3Object) &&
        Objects.equals(this.antipatternReportStatus, applicationComponentDetail.antipatternReportStatus) &&
        Objects.equals(this.antipatternReportStatusMessage, applicationComponentDetail.antipatternReportStatusMessage) &&
        Objects.equals(this.appType, applicationComponentDetail.appType) &&
        Objects.equals(this.appUnitError, applicationComponentDetail.appUnitError) &&
        Objects.equals(this.associatedServerId, applicationComponentDetail.associatedServerId) &&
        Objects.equals(this.databaseConfigDetail, applicationComponentDetail.databaseConfigDetail) &&
        Objects.equals(this.id, applicationComponentDetail.id) &&
        Objects.equals(this.inclusionStatus, applicationComponentDetail.inclusionStatus) &&
        Objects.equals(this.lastAnalyzedTimestamp, applicationComponentDetail.lastAnalyzedTimestamp) &&
        Objects.equals(this.listAntipatternSeveritySummary, applicationComponentDetail.listAntipatternSeveritySummary) &&
        Objects.equals(this.moreServerAssociationExists, applicationComponentDetail.moreServerAssociationExists) &&
        Objects.equals(this.name, applicationComponentDetail.name) &&
        Objects.equals(this.osDriver, applicationComponentDetail.osDriver) &&
        Objects.equals(this.osVersion, applicationComponentDetail.osVersion) &&
        Objects.equals(this.recommendationSet, applicationComponentDetail.recommendationSet) &&
        Objects.equals(this.resourceSubType, applicationComponentDetail.resourceSubType) &&
        Objects.equals(this.resultList, applicationComponentDetail.resultList) &&
        Objects.equals(this.runtimeStatus, applicationComponentDetail.runtimeStatus) &&
        Objects.equals(this.runtimeStatusMessage, applicationComponentDetail.runtimeStatusMessage) &&
        Objects.equals(this.sourceCodeRepositories, applicationComponentDetail.sourceCodeRepositories) &&
        Objects.equals(this.statusMessage, applicationComponentDetail.statusMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisStatus, antipatternReportS3Object, antipatternReportStatus, antipatternReportStatusMessage, appType, appUnitError, associatedServerId, databaseConfigDetail, id, inclusionStatus, lastAnalyzedTimestamp, listAntipatternSeveritySummary, moreServerAssociationExists, name, osDriver, osVersion, recommendationSet, resourceSubType, resultList, runtimeStatus, runtimeStatusMessage, sourceCodeRepositories, statusMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationComponentDetail {\n");
    sb.append("    analysisStatus: ").append(toIndentedString(analysisStatus)).append("\n");
    sb.append("    antipatternReportS3Object: ").append(toIndentedString(antipatternReportS3Object)).append("\n");
    sb.append("    antipatternReportStatus: ").append(toIndentedString(antipatternReportStatus)).append("\n");
    sb.append("    antipatternReportStatusMessage: ").append(toIndentedString(antipatternReportStatusMessage)).append("\n");
    sb.append("    appType: ").append(toIndentedString(appType)).append("\n");
    sb.append("    appUnitError: ").append(toIndentedString(appUnitError)).append("\n");
    sb.append("    associatedServerId: ").append(toIndentedString(associatedServerId)).append("\n");
    sb.append("    databaseConfigDetail: ").append(toIndentedString(databaseConfigDetail)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inclusionStatus: ").append(toIndentedString(inclusionStatus)).append("\n");
    sb.append("    lastAnalyzedTimestamp: ").append(toIndentedString(lastAnalyzedTimestamp)).append("\n");
    sb.append("    listAntipatternSeveritySummary: ").append(toIndentedString(listAntipatternSeveritySummary)).append("\n");
    sb.append("    moreServerAssociationExists: ").append(toIndentedString(moreServerAssociationExists)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osDriver: ").append(toIndentedString(osDriver)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    recommendationSet: ").append(toIndentedString(recommendationSet)).append("\n");
    sb.append("    resourceSubType: ").append(toIndentedString(resourceSubType)).append("\n");
    sb.append("    resultList: ").append(toIndentedString(resultList)).append("\n");
    sb.append("    runtimeStatus: ").append(toIndentedString(runtimeStatus)).append("\n");
    sb.append("    runtimeStatusMessage: ").append(toIndentedString(runtimeStatusMessage)).append("\n");
    sb.append("    sourceCodeRepositories: ").append(toIndentedString(sourceCodeRepositories)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysisStatus");
    openapiFields.add("antipatternReportS3Object");
    openapiFields.add("antipatternReportStatus");
    openapiFields.add("antipatternReportStatusMessage");
    openapiFields.add("appType");
    openapiFields.add("appUnitError");
    openapiFields.add("associatedServerId");
    openapiFields.add("databaseConfigDetail");
    openapiFields.add("id");
    openapiFields.add("inclusionStatus");
    openapiFields.add("lastAnalyzedTimestamp");
    openapiFields.add("listAntipatternSeveritySummary");
    openapiFields.add("moreServerAssociationExists");
    openapiFields.add("name");
    openapiFields.add("osDriver");
    openapiFields.add("osVersion");
    openapiFields.add("recommendationSet");
    openapiFields.add("resourceSubType");
    openapiFields.add("resultList");
    openapiFields.add("runtimeStatus");
    openapiFields.add("runtimeStatusMessage");
    openapiFields.add("sourceCodeRepositories");
    openapiFields.add("statusMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationComponentDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationComponentDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationComponentDetail is not found in the empty JSON string", ApplicationComponentDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationComponentDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationComponentDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `analysisStatus`
      if (jsonObj.get("analysisStatus") != null && !jsonObj.get("analysisStatus").isJsonNull()) {
        SrcCodeOrDbAnalysisStatus.validateJsonElement(jsonObj.get("analysisStatus"));
      }
      // validate the optional field `antipatternReportS3Object`
      if (jsonObj.get("antipatternReportS3Object") != null && !jsonObj.get("antipatternReportS3Object").isJsonNull()) {
        ApplicationComponentDetailAntipatternReportS3Object.validateJsonElement(jsonObj.get("antipatternReportS3Object"));
      }
      // validate the optional field `antipatternReportStatus`
      if (jsonObj.get("antipatternReportStatus") != null && !jsonObj.get("antipatternReportStatus").isJsonNull()) {
        AntipatternReportStatus.validateJsonElement(jsonObj.get("antipatternReportStatus"));
      }
      // validate the optional field `antipatternReportStatusMessage`
      if (jsonObj.get("antipatternReportStatusMessage") != null && !jsonObj.get("antipatternReportStatusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("antipatternReportStatusMessage"));
      }
      // validate the optional field `appType`
      if (jsonObj.get("appType") != null && !jsonObj.get("appType").isJsonNull()) {
        AppType.validateJsonElement(jsonObj.get("appType"));
      }
      // validate the optional field `appUnitError`
      if (jsonObj.get("appUnitError") != null && !jsonObj.get("appUnitError").isJsonNull()) {
        ApplicationComponentDetailAppUnitError.validateJsonElement(jsonObj.get("appUnitError"));
      }
      // validate the optional field `associatedServerId`
      if (jsonObj.get("associatedServerId") != null && !jsonObj.get("associatedServerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("associatedServerId"));
      }
      // validate the optional field `databaseConfigDetail`
      if (jsonObj.get("databaseConfigDetail") != null && !jsonObj.get("databaseConfigDetail").isJsonNull()) {
        ApplicationComponentDetailDatabaseConfigDetail.validateJsonElement(jsonObj.get("databaseConfigDetail"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `inclusionStatus`
      if (jsonObj.get("inclusionStatus") != null && !jsonObj.get("inclusionStatus").isJsonNull()) {
        InclusionStatus.validateJsonElement(jsonObj.get("inclusionStatus"));
      }
      // validate the optional field `lastAnalyzedTimestamp`
      if (jsonObj.get("lastAnalyzedTimestamp") != null && !jsonObj.get("lastAnalyzedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastAnalyzedTimestamp"));
      }
      // validate the optional field `listAntipatternSeveritySummary`
      if (jsonObj.get("listAntipatternSeveritySummary") != null && !jsonObj.get("listAntipatternSeveritySummary").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("listAntipatternSeveritySummary"));
      }
      // validate the optional field `moreServerAssociationExists`
      if (jsonObj.get("moreServerAssociationExists") != null && !jsonObj.get("moreServerAssociationExists").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("moreServerAssociationExists"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `osDriver`
      if (jsonObj.get("osDriver") != null && !jsonObj.get("osDriver").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("osDriver"));
      }
      // validate the optional field `osVersion`
      if (jsonObj.get("osVersion") != null && !jsonObj.get("osVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("osVersion"));
      }
      // validate the optional field `recommendationSet`
      if (jsonObj.get("recommendationSet") != null && !jsonObj.get("recommendationSet").isJsonNull()) {
        ApplicationComponentDetailRecommendationSet.validateJsonElement(jsonObj.get("recommendationSet"));
      }
      // validate the optional field `resourceSubType`
      if (jsonObj.get("resourceSubType") != null && !jsonObj.get("resourceSubType").isJsonNull()) {
        ResourceSubType.validateJsonElement(jsonObj.get("resourceSubType"));
      }
      // validate the optional field `resultList`
      if (jsonObj.get("resultList") != null && !jsonObj.get("resultList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("resultList"));
      }
      // validate the optional field `runtimeStatus`
      if (jsonObj.get("runtimeStatus") != null && !jsonObj.get("runtimeStatus").isJsonNull()) {
        RuntimeAnalysisStatus.validateJsonElement(jsonObj.get("runtimeStatus"));
      }
      // validate the optional field `runtimeStatusMessage`
      if (jsonObj.get("runtimeStatusMessage") != null && !jsonObj.get("runtimeStatusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("runtimeStatusMessage"));
      }
      // validate the optional field `sourceCodeRepositories`
      if (jsonObj.get("sourceCodeRepositories") != null && !jsonObj.get("sourceCodeRepositories").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("sourceCodeRepositories"));
      }
      // validate the optional field `statusMessage`
      if (jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationComponentDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationComponentDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationComponentDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationComponentDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationComponentDetail>() {
           @Override
           public void write(JsonWriter out, ApplicationComponentDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationComponentDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationComponentDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationComponentDetail
   * @throws IOException if the JSON string is invalid with respect to ApplicationComponentDetail
   */
  public static ApplicationComponentDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationComponentDetail.class);
  }

  /**
   * Convert an instance of ApplicationComponentDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

