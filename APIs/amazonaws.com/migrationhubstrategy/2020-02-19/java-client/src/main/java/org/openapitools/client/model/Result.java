/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnalysisType;
import org.openapitools.client.model.ResultAnalysisStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The error in server analysis.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Result {
  public static final String SERIALIZED_NAME_ANALYSIS_STATUS = "analysisStatus";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_STATUS)
  private ResultAnalysisStatus analysisStatus;

  public static final String SERIALIZED_NAME_ANALYSIS_TYPE = "analysisType";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_TYPE)
  private AnalysisType analysisType;

  public static final String SERIALIZED_NAME_ANTIPATTERN_REPORT_RESULT_LIST = "antipatternReportResultList";
  @SerializedName(SERIALIZED_NAME_ANTIPATTERN_REPORT_RESULT_LIST)
  private List antipatternReportResultList;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public Result() {
  }

  public Result analysisStatus(ResultAnalysisStatus analysisStatus) {
    this.analysisStatus = analysisStatus;
    return this;
  }

  /**
   * Get analysisStatus
   * @return analysisStatus
   */
  @javax.annotation.Nullable
  public ResultAnalysisStatus getAnalysisStatus() {
    return analysisStatus;
  }

  public void setAnalysisStatus(ResultAnalysisStatus analysisStatus) {
    this.analysisStatus = analysisStatus;
  }


  public Result analysisType(AnalysisType analysisType) {
    this.analysisType = analysisType;
    return this;
  }

  /**
   * Get analysisType
   * @return analysisType
   */
  @javax.annotation.Nullable
  public AnalysisType getAnalysisType() {
    return analysisType;
  }

  public void setAnalysisType(AnalysisType analysisType) {
    this.analysisType = analysisType;
  }


  public Result antipatternReportResultList(List antipatternReportResultList) {
    this.antipatternReportResultList = antipatternReportResultList;
    return this;
  }

  /**
   * Get antipatternReportResultList
   * @return antipatternReportResultList
   */
  @javax.annotation.Nullable
  public List getAntipatternReportResultList() {
    return antipatternReportResultList;
  }

  public void setAntipatternReportResultList(List antipatternReportResultList) {
    this.antipatternReportResultList = antipatternReportResultList;
  }


  public Result statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Result result = (Result) o;
    return Objects.equals(this.analysisStatus, result.analysisStatus) &&
        Objects.equals(this.analysisType, result.analysisType) &&
        Objects.equals(this.antipatternReportResultList, result.antipatternReportResultList) &&
        Objects.equals(this.statusMessage, result.statusMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisStatus, analysisType, antipatternReportResultList, statusMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Result {\n");
    sb.append("    analysisStatus: ").append(toIndentedString(analysisStatus)).append("\n");
    sb.append("    analysisType: ").append(toIndentedString(analysisType)).append("\n");
    sb.append("    antipatternReportResultList: ").append(toIndentedString(antipatternReportResultList)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysisStatus");
    openapiFields.add("analysisType");
    openapiFields.add("antipatternReportResultList");
    openapiFields.add("statusMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Result
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Result.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Result is not found in the empty JSON string", Result.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Result.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Result` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `analysisStatus`
      if (jsonObj.get("analysisStatus") != null && !jsonObj.get("analysisStatus").isJsonNull()) {
        ResultAnalysisStatus.validateJsonElement(jsonObj.get("analysisStatus"));
      }
      // validate the optional field `analysisType`
      if (jsonObj.get("analysisType") != null && !jsonObj.get("analysisType").isJsonNull()) {
        AnalysisType.validateJsonElement(jsonObj.get("analysisType"));
      }
      // validate the optional field `antipatternReportResultList`
      if (jsonObj.get("antipatternReportResultList") != null && !jsonObj.get("antipatternReportResultList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("antipatternReportResultList"));
      }
      // validate the optional field `statusMessage`
      if (jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Result.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Result' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Result> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Result.class));

       return (TypeAdapter<T>) new TypeAdapter<Result>() {
           @Override
           public void write(JsonWriter out, Result value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Result read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Result given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Result
   * @throws IOException if the JSON string is invalid with respect to Result
   */
  public static Result fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Result.class);
  }

  /**
   * Convert an instance of Result to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

