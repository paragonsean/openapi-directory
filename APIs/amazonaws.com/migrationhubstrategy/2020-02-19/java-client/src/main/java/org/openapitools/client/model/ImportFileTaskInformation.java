/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ImportFileTaskStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Information about the import file tasks you request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportFileTaskInformation {
  public static final String SERIALIZED_NAME_COMPLETION_TIME = "completionTime";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TIME)
  private OffsetDateTime completionTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMPORT_NAME = "importName";
  @SerializedName(SERIALIZED_NAME_IMPORT_NAME)
  private String importName;

  public static final String SERIALIZED_NAME_INPUT_S3_BUCKET = "inputS3Bucket";
  @SerializedName(SERIALIZED_NAME_INPUT_S3_BUCKET)
  private String inputS3Bucket;

  public static final String SERIALIZED_NAME_INPUT_S3_KEY = "inputS3Key";
  @SerializedName(SERIALIZED_NAME_INPUT_S3_KEY)
  private String inputS3Key;

  public static final String SERIALIZED_NAME_NUMBER_OF_RECORDS_FAILED = "numberOfRecordsFailed";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_RECORDS_FAILED)
  private Integer numberOfRecordsFailed;

  public static final String SERIALIZED_NAME_NUMBER_OF_RECORDS_SUCCESS = "numberOfRecordsSuccess";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_RECORDS_SUCCESS)
  private Integer numberOfRecordsSuccess;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ImportFileTaskStatus status;

  public static final String SERIALIZED_NAME_STATUS_REPORT_S3_BUCKET = "statusReportS3Bucket";
  @SerializedName(SERIALIZED_NAME_STATUS_REPORT_S3_BUCKET)
  private String statusReportS3Bucket;

  public static final String SERIALIZED_NAME_STATUS_REPORT_S3_KEY = "statusReportS3Key";
  @SerializedName(SERIALIZED_NAME_STATUS_REPORT_S3_KEY)
  private String statusReportS3Key;

  public ImportFileTaskInformation() {
  }

  public ImportFileTaskInformation completionTime(OffsetDateTime completionTime) {
    this.completionTime = completionTime;
    return this;
  }

  /**
   * Get completionTime
   * @return completionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletionTime() {
    return completionTime;
  }

  public void setCompletionTime(OffsetDateTime completionTime) {
    this.completionTime = completionTime;
  }


  public ImportFileTaskInformation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ImportFileTaskInformation importName(String importName) {
    this.importName = importName;
    return this;
  }

  /**
   * Get importName
   * @return importName
   */
  @javax.annotation.Nullable
  public String getImportName() {
    return importName;
  }

  public void setImportName(String importName) {
    this.importName = importName;
  }


  public ImportFileTaskInformation inputS3Bucket(String inputS3Bucket) {
    this.inputS3Bucket = inputS3Bucket;
    return this;
  }

  /**
   * Get inputS3Bucket
   * @return inputS3Bucket
   */
  @javax.annotation.Nullable
  public String getInputS3Bucket() {
    return inputS3Bucket;
  }

  public void setInputS3Bucket(String inputS3Bucket) {
    this.inputS3Bucket = inputS3Bucket;
  }


  public ImportFileTaskInformation inputS3Key(String inputS3Key) {
    this.inputS3Key = inputS3Key;
    return this;
  }

  /**
   * Get inputS3Key
   * @return inputS3Key
   */
  @javax.annotation.Nullable
  public String getInputS3Key() {
    return inputS3Key;
  }

  public void setInputS3Key(String inputS3Key) {
    this.inputS3Key = inputS3Key;
  }


  public ImportFileTaskInformation numberOfRecordsFailed(Integer numberOfRecordsFailed) {
    this.numberOfRecordsFailed = numberOfRecordsFailed;
    return this;
  }

  /**
   * Get numberOfRecordsFailed
   * @return numberOfRecordsFailed
   */
  @javax.annotation.Nullable
  public Integer getNumberOfRecordsFailed() {
    return numberOfRecordsFailed;
  }

  public void setNumberOfRecordsFailed(Integer numberOfRecordsFailed) {
    this.numberOfRecordsFailed = numberOfRecordsFailed;
  }


  public ImportFileTaskInformation numberOfRecordsSuccess(Integer numberOfRecordsSuccess) {
    this.numberOfRecordsSuccess = numberOfRecordsSuccess;
    return this;
  }

  /**
   * Get numberOfRecordsSuccess
   * @return numberOfRecordsSuccess
   */
  @javax.annotation.Nullable
  public Integer getNumberOfRecordsSuccess() {
    return numberOfRecordsSuccess;
  }

  public void setNumberOfRecordsSuccess(Integer numberOfRecordsSuccess) {
    this.numberOfRecordsSuccess = numberOfRecordsSuccess;
  }


  public ImportFileTaskInformation startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ImportFileTaskInformation status(ImportFileTaskStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ImportFileTaskStatus getStatus() {
    return status;
  }

  public void setStatus(ImportFileTaskStatus status) {
    this.status = status;
  }


  public ImportFileTaskInformation statusReportS3Bucket(String statusReportS3Bucket) {
    this.statusReportS3Bucket = statusReportS3Bucket;
    return this;
  }

  /**
   * Get statusReportS3Bucket
   * @return statusReportS3Bucket
   */
  @javax.annotation.Nullable
  public String getStatusReportS3Bucket() {
    return statusReportS3Bucket;
  }

  public void setStatusReportS3Bucket(String statusReportS3Bucket) {
    this.statusReportS3Bucket = statusReportS3Bucket;
  }


  public ImportFileTaskInformation statusReportS3Key(String statusReportS3Key) {
    this.statusReportS3Key = statusReportS3Key;
    return this;
  }

  /**
   * Get statusReportS3Key
   * @return statusReportS3Key
   */
  @javax.annotation.Nullable
  public String getStatusReportS3Key() {
    return statusReportS3Key;
  }

  public void setStatusReportS3Key(String statusReportS3Key) {
    this.statusReportS3Key = statusReportS3Key;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportFileTaskInformation importFileTaskInformation = (ImportFileTaskInformation) o;
    return Objects.equals(this.completionTime, importFileTaskInformation.completionTime) &&
        Objects.equals(this.id, importFileTaskInformation.id) &&
        Objects.equals(this.importName, importFileTaskInformation.importName) &&
        Objects.equals(this.inputS3Bucket, importFileTaskInformation.inputS3Bucket) &&
        Objects.equals(this.inputS3Key, importFileTaskInformation.inputS3Key) &&
        Objects.equals(this.numberOfRecordsFailed, importFileTaskInformation.numberOfRecordsFailed) &&
        Objects.equals(this.numberOfRecordsSuccess, importFileTaskInformation.numberOfRecordsSuccess) &&
        Objects.equals(this.startTime, importFileTaskInformation.startTime) &&
        Objects.equals(this.status, importFileTaskInformation.status) &&
        Objects.equals(this.statusReportS3Bucket, importFileTaskInformation.statusReportS3Bucket) &&
        Objects.equals(this.statusReportS3Key, importFileTaskInformation.statusReportS3Key);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionTime, id, importName, inputS3Bucket, inputS3Key, numberOfRecordsFailed, numberOfRecordsSuccess, startTime, status, statusReportS3Bucket, statusReportS3Key);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportFileTaskInformation {\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    importName: ").append(toIndentedString(importName)).append("\n");
    sb.append("    inputS3Bucket: ").append(toIndentedString(inputS3Bucket)).append("\n");
    sb.append("    inputS3Key: ").append(toIndentedString(inputS3Key)).append("\n");
    sb.append("    numberOfRecordsFailed: ").append(toIndentedString(numberOfRecordsFailed)).append("\n");
    sb.append("    numberOfRecordsSuccess: ").append(toIndentedString(numberOfRecordsSuccess)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusReportS3Bucket: ").append(toIndentedString(statusReportS3Bucket)).append("\n");
    sb.append("    statusReportS3Key: ").append(toIndentedString(statusReportS3Key)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completionTime");
    openapiFields.add("id");
    openapiFields.add("importName");
    openapiFields.add("inputS3Bucket");
    openapiFields.add("inputS3Key");
    openapiFields.add("numberOfRecordsFailed");
    openapiFields.add("numberOfRecordsSuccess");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("statusReportS3Bucket");
    openapiFields.add("statusReportS3Key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportFileTaskInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportFileTaskInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportFileTaskInformation is not found in the empty JSON string", ImportFileTaskInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportFileTaskInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportFileTaskInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `completionTime`
      if (jsonObj.get("completionTime") != null && !jsonObj.get("completionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("completionTime"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `importName`
      if (jsonObj.get("importName") != null && !jsonObj.get("importName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("importName"));
      }
      // validate the optional field `inputS3Bucket`
      if (jsonObj.get("inputS3Bucket") != null && !jsonObj.get("inputS3Bucket").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("inputS3Bucket"));
      }
      // validate the optional field `inputS3Key`
      if (jsonObj.get("inputS3Key") != null && !jsonObj.get("inputS3Key").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("inputS3Key"));
      }
      // validate the optional field `numberOfRecordsFailed`
      if (jsonObj.get("numberOfRecordsFailed") != null && !jsonObj.get("numberOfRecordsFailed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("numberOfRecordsFailed"));
      }
      // validate the optional field `numberOfRecordsSuccess`
      if (jsonObj.get("numberOfRecordsSuccess") != null && !jsonObj.get("numberOfRecordsSuccess").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("numberOfRecordsSuccess"));
      }
      // validate the optional field `startTime`
      if (jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ImportFileTaskStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `statusReportS3Bucket`
      if (jsonObj.get("statusReportS3Bucket") != null && !jsonObj.get("statusReportS3Bucket").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusReportS3Bucket"));
      }
      // validate the optional field `statusReportS3Key`
      if (jsonObj.get("statusReportS3Key") != null && !jsonObj.get("statusReportS3Key").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusReportS3Key"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportFileTaskInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportFileTaskInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportFileTaskInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportFileTaskInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportFileTaskInformation>() {
           @Override
           public void write(JsonWriter out, ImportFileTaskInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportFileTaskInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportFileTaskInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportFileTaskInformation
   * @throws IOException if the JSON string is invalid with respect to ImportFileTaskInformation
   */
  public static ImportFileTaskInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportFileTaskInformation.class);
  }

  /**
   * Convert an instance of ImportFileTaskInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

