/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Group;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListServersRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListServersRequest {
  public static final String SERIALIZED_NAME_FILTER_VALUE = "filterValue";
  @SerializedName(SERIALIZED_NAME_FILTER_VALUE)
  private String filterValue;

  public static final String SERIALIZED_NAME_GROUP_ID_FILTER = "groupIdFilter";
  @SerializedName(SERIALIZED_NAME_GROUP_ID_FILTER)
  private List<Group> groupIdFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  /**
   *  Criteria for filtering servers. 
   */
  @JsonAdapter(ServerCriteriaEnum.Adapter.class)
  public enum ServerCriteriaEnum {
    NOT_DEFINED("NOT_DEFINED"),
    
    OS_NAME("OS_NAME"),
    
    STRATEGY("STRATEGY"),
    
    DESTINATION("DESTINATION"),
    
    SERVER_ID("SERVER_ID"),
    
    ANALYSIS_STATUS("ANALYSIS_STATUS"),
    
    ERROR_CATEGORY("ERROR_CATEGORY");

    private String value;

    ServerCriteriaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServerCriteriaEnum fromValue(String value) {
      for (ServerCriteriaEnum b : ServerCriteriaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServerCriteriaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServerCriteriaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServerCriteriaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServerCriteriaEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServerCriteriaEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVER_CRITERIA = "serverCriteria";
  @SerializedName(SERIALIZED_NAME_SERVER_CRITERIA)
  private ServerCriteriaEnum serverCriteria;

  /**
   *  Specifies whether to sort by ascending (&lt;code&gt;ASC&lt;/code&gt;) or descending (&lt;code&gt;DESC&lt;/code&gt;) order. 
   */
  @JsonAdapter(SortEnum.Adapter.class)
  public enum SortEnum {
    ASC("ASC"),
    
    DESC("DESC");

    private String value;

    SortEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortEnum fromValue(String value) {
      for (SortEnum b : SortEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SortEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private SortEnum sort;

  public ListServersRequest() {
  }

  public ListServersRequest filterValue(String filterValue) {
    this.filterValue = filterValue;
    return this;
  }

  /**
   *  Specifies the filter value, which is based on the type of server criteria. For example, if &lt;code&gt;serverCriteria&lt;/code&gt; is &lt;code&gt;OS_NAME&lt;/code&gt;, and the &lt;code&gt;filterValue&lt;/code&gt; is equal to &lt;code&gt;WindowsServer&lt;/code&gt;, then &lt;code&gt;ListServers&lt;/code&gt; returns all of the servers matching the OS name &lt;code&gt;WindowsServer&lt;/code&gt;. 
   * @return filterValue
   */
  @javax.annotation.Nullable
  public String getFilterValue() {
    return filterValue;
  }

  public void setFilterValue(String filterValue) {
    this.filterValue = filterValue;
  }


  public ListServersRequest groupIdFilter(List<Group> groupIdFilter) {
    this.groupIdFilter = groupIdFilter;
    return this;
  }

  public ListServersRequest addGroupIdFilterItem(Group groupIdFilterItem) {
    if (this.groupIdFilter == null) {
      this.groupIdFilter = new ArrayList<>();
    }
    this.groupIdFilter.add(groupIdFilterItem);
    return this;
  }

  /**
   *  Specifies the group ID to filter on. 
   * @return groupIdFilter
   */
  @javax.annotation.Nullable
  public List<Group> getGroupIdFilter() {
    return groupIdFilter;
  }

  public void setGroupIdFilter(List<Group> groupIdFilter) {
    this.groupIdFilter = groupIdFilter;
  }


  public ListServersRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   *  The maximum number of items to include in the response. The maximum value is 100. 
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListServersRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   *  The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set &lt;code&gt;maxResults&lt;/code&gt; to 10. You&#39;ll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. 
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListServersRequest serverCriteria(ServerCriteriaEnum serverCriteria) {
    this.serverCriteria = serverCriteria;
    return this;
  }

  /**
   *  Criteria for filtering servers. 
   * @return serverCriteria
   */
  @javax.annotation.Nullable
  public ServerCriteriaEnum getServerCriteria() {
    return serverCriteria;
  }

  public void setServerCriteria(ServerCriteriaEnum serverCriteria) {
    this.serverCriteria = serverCriteria;
  }


  public ListServersRequest sort(SortEnum sort) {
    this.sort = sort;
    return this;
  }

  /**
   *  Specifies whether to sort by ascending (&lt;code&gt;ASC&lt;/code&gt;) or descending (&lt;code&gt;DESC&lt;/code&gt;) order. 
   * @return sort
   */
  @javax.annotation.Nullable
  public SortEnum getSort() {
    return sort;
  }

  public void setSort(SortEnum sort) {
    this.sort = sort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListServersRequest listServersRequest = (ListServersRequest) o;
    return Objects.equals(this.filterValue, listServersRequest.filterValue) &&
        Objects.equals(this.groupIdFilter, listServersRequest.groupIdFilter) &&
        Objects.equals(this.maxResults, listServersRequest.maxResults) &&
        Objects.equals(this.nextToken, listServersRequest.nextToken) &&
        Objects.equals(this.serverCriteria, listServersRequest.serverCriteria) &&
        Objects.equals(this.sort, listServersRequest.sort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterValue, groupIdFilter, maxResults, nextToken, serverCriteria, sort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListServersRequest {\n");
    sb.append("    filterValue: ").append(toIndentedString(filterValue)).append("\n");
    sb.append("    groupIdFilter: ").append(toIndentedString(groupIdFilter)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    serverCriteria: ").append(toIndentedString(serverCriteria)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filterValue");
    openapiFields.add("groupIdFilter");
    openapiFields.add("maxResults");
    openapiFields.add("nextToken");
    openapiFields.add("serverCriteria");
    openapiFields.add("sort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListServersRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListServersRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListServersRequest is not found in the empty JSON string", ListServersRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListServersRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListServersRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filterValue") != null && !jsonObj.get("filterValue").isJsonNull()) && !jsonObj.get("filterValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filterValue").toString()));
      }
      if (jsonObj.get("groupIdFilter") != null && !jsonObj.get("groupIdFilter").isJsonNull()) {
        JsonArray jsonArraygroupIdFilter = jsonObj.getAsJsonArray("groupIdFilter");
        if (jsonArraygroupIdFilter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupIdFilter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupIdFilter` to be an array in the JSON string but got `%s`", jsonObj.get("groupIdFilter").toString()));
          }

          // validate the optional field `groupIdFilter` (array)
          for (int i = 0; i < jsonArraygroupIdFilter.size(); i++) {
            Group.validateJsonElement(jsonArraygroupIdFilter.get(i));
          };
        }
      }
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
      if ((jsonObj.get("serverCriteria") != null && !jsonObj.get("serverCriteria").isJsonNull()) && !jsonObj.get("serverCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverCriteria").toString()));
      }
      // validate the optional field `serverCriteria`
      if (jsonObj.get("serverCriteria") != null && !jsonObj.get("serverCriteria").isJsonNull()) {
        ServerCriteriaEnum.validateJsonElement(jsonObj.get("serverCriteria"));
      }
      if ((jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) && !jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
      // validate the optional field `sort`
      if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) {
        SortEnum.validateJsonElement(jsonObj.get("sort"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListServersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListServersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListServersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListServersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListServersRequest>() {
           @Override
           public void write(JsonWriter out, ListServersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListServersRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListServersRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListServersRequest
   * @throws IOException if the JSON string is invalid with respect to ListServersRequest
   */
  public static ListServersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListServersRequest.class);
  }

  /**
   * Convert an instance of ListServersRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

