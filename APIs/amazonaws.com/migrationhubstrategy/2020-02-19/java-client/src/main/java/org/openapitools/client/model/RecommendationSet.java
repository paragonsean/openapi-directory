/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RecommendationSetTransformationTool;
import org.openapitools.client.model.Strategy;
import org.openapitools.client.model.TargetDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Contains a recommendation set. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationSet {
  public static final String SERIALIZED_NAME_STRATEGY = "strategy";
  @SerializedName(SERIALIZED_NAME_STRATEGY)
  private Strategy strategy;

  public static final String SERIALIZED_NAME_TARGET_DESTINATION = "targetDestination";
  @SerializedName(SERIALIZED_NAME_TARGET_DESTINATION)
  private TargetDestination targetDestination;

  public static final String SERIALIZED_NAME_TRANSFORMATION_TOOL = "transformationTool";
  @SerializedName(SERIALIZED_NAME_TRANSFORMATION_TOOL)
  private RecommendationSetTransformationTool transformationTool;

  public RecommendationSet() {
  }

  public RecommendationSet strategy(Strategy strategy) {
    this.strategy = strategy;
    return this;
  }

  /**
   * Get strategy
   * @return strategy
   */
  @javax.annotation.Nullable
  public Strategy getStrategy() {
    return strategy;
  }

  public void setStrategy(Strategy strategy) {
    this.strategy = strategy;
  }


  public RecommendationSet targetDestination(TargetDestination targetDestination) {
    this.targetDestination = targetDestination;
    return this;
  }

  /**
   * Get targetDestination
   * @return targetDestination
   */
  @javax.annotation.Nullable
  public TargetDestination getTargetDestination() {
    return targetDestination;
  }

  public void setTargetDestination(TargetDestination targetDestination) {
    this.targetDestination = targetDestination;
  }


  public RecommendationSet transformationTool(RecommendationSetTransformationTool transformationTool) {
    this.transformationTool = transformationTool;
    return this;
  }

  /**
   * Get transformationTool
   * @return transformationTool
   */
  @javax.annotation.Nullable
  public RecommendationSetTransformationTool getTransformationTool() {
    return transformationTool;
  }

  public void setTransformationTool(RecommendationSetTransformationTool transformationTool) {
    this.transformationTool = transformationTool;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationSet recommendationSet = (RecommendationSet) o;
    return Objects.equals(this.strategy, recommendationSet.strategy) &&
        Objects.equals(this.targetDestination, recommendationSet.targetDestination) &&
        Objects.equals(this.transformationTool, recommendationSet.transformationTool);
  }

  @Override
  public int hashCode() {
    return Objects.hash(strategy, targetDestination, transformationTool);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationSet {\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    targetDestination: ").append(toIndentedString(targetDestination)).append("\n");
    sb.append("    transformationTool: ").append(toIndentedString(transformationTool)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("strategy");
    openapiFields.add("targetDestination");
    openapiFields.add("transformationTool");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationSet is not found in the empty JSON string", RecommendationSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `strategy`
      if (jsonObj.get("strategy") != null && !jsonObj.get("strategy").isJsonNull()) {
        Strategy.validateJsonElement(jsonObj.get("strategy"));
      }
      // validate the optional field `targetDestination`
      if (jsonObj.get("targetDestination") != null && !jsonObj.get("targetDestination").isJsonNull()) {
        TargetDestination.validateJsonElement(jsonObj.get("targetDestination"));
      }
      // validate the optional field `transformationTool`
      if (jsonObj.get("transformationTool") != null && !jsonObj.get("transformationTool").isJsonNull()) {
        RecommendationSetTransformationTool.validateJsonElement(jsonObj.get("transformationTool"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationSet.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationSet>() {
           @Override
           public void write(JsonWriter out, RecommendationSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationSet
   * @throws IOException if the JSON string is invalid with respect to RecommendationSet
   */
  public static RecommendationSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationSet.class);
  }

  /**
   * Convert an instance of RecommendationSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

