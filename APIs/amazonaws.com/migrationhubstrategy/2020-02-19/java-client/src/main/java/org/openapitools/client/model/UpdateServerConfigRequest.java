/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateApplicationComponentConfigRequestStrategyOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateServerConfigRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:53.966565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateServerConfigRequest {
  public static final String SERIALIZED_NAME_SERVER_ID = "serverId";
  @SerializedName(SERIALIZED_NAME_SERVER_ID)
  private String serverId;

  public static final String SERIALIZED_NAME_STRATEGY_OPTION = "strategyOption";
  @SerializedName(SERIALIZED_NAME_STRATEGY_OPTION)
  private UpdateApplicationComponentConfigRequestStrategyOption strategyOption;

  public UpdateServerConfigRequest() {
  }

  public UpdateServerConfigRequest serverId(String serverId) {
    this.serverId = serverId;
    return this;
  }

  /**
   *  The ID of the server. 
   * @return serverId
   */
  @javax.annotation.Nonnull
  public String getServerId() {
    return serverId;
  }

  public void setServerId(String serverId) {
    this.serverId = serverId;
  }


  public UpdateServerConfigRequest strategyOption(UpdateApplicationComponentConfigRequestStrategyOption strategyOption) {
    this.strategyOption = strategyOption;
    return this;
  }

  /**
   * Get strategyOption
   * @return strategyOption
   */
  @javax.annotation.Nullable
  public UpdateApplicationComponentConfigRequestStrategyOption getStrategyOption() {
    return strategyOption;
  }

  public void setStrategyOption(UpdateApplicationComponentConfigRequestStrategyOption strategyOption) {
    this.strategyOption = strategyOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateServerConfigRequest updateServerConfigRequest = (UpdateServerConfigRequest) o;
    return Objects.equals(this.serverId, updateServerConfigRequest.serverId) &&
        Objects.equals(this.strategyOption, updateServerConfigRequest.strategyOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serverId, strategyOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateServerConfigRequest {\n");
    sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
    sb.append("    strategyOption: ").append(toIndentedString(strategyOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("serverId");
    openapiFields.add("strategyOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("serverId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateServerConfigRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateServerConfigRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateServerConfigRequest is not found in the empty JSON string", UpdateServerConfigRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateServerConfigRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateServerConfigRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateServerConfigRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("serverId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverId").toString()));
      }
      // validate the optional field `strategyOption`
      if (jsonObj.get("strategyOption") != null && !jsonObj.get("strategyOption").isJsonNull()) {
        UpdateApplicationComponentConfigRequestStrategyOption.validateJsonElement(jsonObj.get("strategyOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateServerConfigRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateServerConfigRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateServerConfigRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateServerConfigRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateServerConfigRequest>() {
           @Override
           public void write(JsonWriter out, UpdateServerConfigRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateServerConfigRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateServerConfigRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateServerConfigRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateServerConfigRequest
   */
  public static UpdateServerConfigRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateServerConfigRequest.class);
  }

  /**
   * Convert an instance of UpdateServerConfigRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

