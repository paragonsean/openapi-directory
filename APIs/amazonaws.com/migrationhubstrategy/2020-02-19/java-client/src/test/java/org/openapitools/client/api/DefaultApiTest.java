/*
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetApplicationComponentDetailsResponse;
import org.openapitools.client.model.GetApplicationComponentStrategiesResponse;
import org.openapitools.client.model.GetAssessmentResponse;
import org.openapitools.client.model.GetImportFileTaskResponse;
import org.openapitools.client.model.GetLatestAssessmentIdResponse;
import org.openapitools.client.model.GetPortfolioPreferencesResponse;
import org.openapitools.client.model.GetPortfolioSummaryResponse;
import org.openapitools.client.model.GetRecommendationReportDetailsResponse;
import org.openapitools.client.model.GetServerDetailsResponse;
import org.openapitools.client.model.GetServerStrategiesResponse;
import org.openapitools.client.model.ListApplicationComponentsRequest;
import org.openapitools.client.model.ListApplicationComponentsResponse;
import org.openapitools.client.model.ListCollectorsResponse;
import org.openapitools.client.model.ListImportFileTaskResponse;
import org.openapitools.client.model.ListServersRequest;
import org.openapitools.client.model.ListServersResponse;
import org.openapitools.client.model.PutPortfolioPreferencesRequest;
import org.openapitools.client.model.StartAssessmentRequest;
import org.openapitools.client.model.StartAssessmentResponse;
import org.openapitools.client.model.StartImportFileTaskRequest;
import org.openapitools.client.model.StartImportFileTaskResponse;
import org.openapitools.client.model.StartRecommendationReportGenerationRequest;
import org.openapitools.client.model.StartRecommendationReportGenerationResponse;
import org.openapitools.client.model.StopAssessmentRequest;
import org.openapitools.client.model.UpdateApplicationComponentConfigRequest;
import org.openapitools.client.model.UpdateServerConfigRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     *  Retrieves details about an application component. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationComponentDetailsTest() throws ApiException {
        String applicationComponentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApplicationComponentDetailsResponse response = api.getApplicationComponentDetails(applicationComponentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Retrieves a list of all the recommended strategies and tools for an application component running on a server. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationComponentStrategiesTest() throws ApiException {
        String applicationComponentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApplicationComponentStrategiesResponse response = api.getApplicationComponentStrategies(applicationComponentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Retrieves the status of an on-going assessment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssessmentTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAssessmentResponse response = api.getAssessment(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Retrieves the details about a specific import task. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImportFileTaskTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetImportFileTaskResponse response = api.getImportFileTask(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve the latest ID of a specific assessment task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLatestAssessmentIdTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLatestAssessmentIdResponse response = api.getLatestAssessmentId(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Retrieves your migration and modernization preferences. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPortfolioPreferencesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPortfolioPreferencesResponse response = api.getPortfolioPreferences(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Retrieves overall summary including the number of servers to rehost and the overall number of anti-patterns. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPortfolioSummaryTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPortfolioSummaryResponse response = api.getPortfolioSummary(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Retrieves detailed information about the specified recommendation report. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecommendationReportDetailsTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRecommendationReportDetailsResponse response = api.getRecommendationReportDetails(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Retrieves detailed information about a specified server. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServerDetailsTest() throws ApiException {
        String serverId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        GetServerDetailsResponse response = api.getServerDetails(serverId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Retrieves recommended strategies and tools for the specified server. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServerStrategiesTest() throws ApiException {
        String serverId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetServerStrategiesResponse response = api.getServerStrategies(serverId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Retrieves a list of all the application components (processes). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationComponentsTest() throws ApiException {
        ListApplicationComponentsRequest listApplicationComponentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListApplicationComponentsResponse response = api.listApplicationComponents(listApplicationComponentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Retrieves a list of all the installed collectors. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCollectorsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListCollectorsResponse response = api.listCollectors(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Retrieves a list of all the imports performed. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImportFileTaskTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListImportFileTaskResponse response = api.listImportFileTask(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of all the servers. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServersTest() throws ApiException {
        ListServersRequest listServersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListServersResponse response = api.listServers(listServersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Saves the specified migration and modernization preferences. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPortfolioPreferencesTest() throws ApiException {
        PutPortfolioPreferencesRequest putPortfolioPreferencesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putPortfolioPreferences(putPortfolioPreferencesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Starts the assessment of an on-premises environment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startAssessmentTest() throws ApiException {
        StartAssessmentRequest startAssessmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartAssessmentResponse response = api.startAssessment(startAssessmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Starts a file import. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startImportFileTaskTest() throws ApiException {
        StartImportFileTaskRequest startImportFileTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartImportFileTaskResponse response = api.startImportFileTask(startImportFileTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Starts generating a recommendation report. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startRecommendationReportGenerationTest() throws ApiException {
        StartRecommendationReportGenerationRequest startRecommendationReportGenerationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartRecommendationReportGenerationResponse response = api.startRecommendationReportGeneration(startRecommendationReportGenerationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Stops the assessment of an on-premises environment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopAssessmentTest() throws ApiException {
        StopAssessmentRequest stopAssessmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopAssessment(stopAssessmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates the configuration of an application component. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationComponentConfigTest() throws ApiException {
        UpdateApplicationComponentConfigRequest updateApplicationComponentConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateApplicationComponentConfig(updateApplicationComponentConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates the configuration of the specified server. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServerConfigTest() throws ApiException {
        UpdateServerConfigRequest updateServerConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateServerConfig(updateServerConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
