/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Group from './Group';

/**
 * The StartImportFileTaskRequest model module.
 * @module model/StartImportFileTaskRequest
 * @version 2020-02-19
 */
class StartImportFileTaskRequest {
    /**
     * Constructs a new <code>StartImportFileTaskRequest</code>.
     * @alias module:model/StartImportFileTaskRequest
     * @param s3Bucket {String}  The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.
     * @param name {String}  A descriptive name for the request. 
     * @param s3key {String}  The Amazon S3 key name of the import file. 
     */
    constructor(s3Bucket, name, s3key) { 
        
        StartImportFileTaskRequest.initialize(this, s3Bucket, name, s3key);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, s3Bucket, name, s3key) { 
        obj['S3Bucket'] = s3Bucket;
        obj['name'] = name;
        obj['s3key'] = s3key;
    }

    /**
     * Constructs a <code>StartImportFileTaskRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartImportFileTaskRequest} obj Optional instance to populate.
     * @return {module:model/StartImportFileTaskRequest} The populated <code>StartImportFileTaskRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartImportFileTaskRequest();

            if (data.hasOwnProperty('S3Bucket')) {
                obj['S3Bucket'] = ApiClient.convertToType(data['S3Bucket'], 'String');
            }
            if (data.hasOwnProperty('dataSourceType')) {
                obj['dataSourceType'] = ApiClient.convertToType(data['dataSourceType'], 'String');
            }
            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], [Group]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('s3bucketForReportData')) {
                obj['s3bucketForReportData'] = ApiClient.convertToType(data['s3bucketForReportData'], 'String');
            }
            if (data.hasOwnProperty('s3key')) {
                obj['s3key'] = ApiClient.convertToType(data['s3key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartImportFileTaskRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartImportFileTaskRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartImportFileTaskRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['S3Bucket'] && !(typeof data['S3Bucket'] === 'string' || data['S3Bucket'] instanceof String)) {
            throw new Error("Expected the field `S3Bucket` to be a primitive type in the JSON string but got " + data['S3Bucket']);
        }
        // ensure the json data is a string
        if (data['dataSourceType'] && !(typeof data['dataSourceType'] === 'string' || data['dataSourceType'] instanceof String)) {
            throw new Error("Expected the field `dataSourceType` to be a primitive type in the JSON string but got " + data['dataSourceType']);
        }
        if (data['groupId']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groupId'])) {
                throw new Error("Expected the field `groupId` to be an array in the JSON data but got " + data['groupId']);
            }
            // validate the optional field `groupId` (array)
            for (const item of data['groupId']) {
                Group.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['s3bucketForReportData'] && !(typeof data['s3bucketForReportData'] === 'string' || data['s3bucketForReportData'] instanceof String)) {
            throw new Error("Expected the field `s3bucketForReportData` to be a primitive type in the JSON string but got " + data['s3bucketForReportData']);
        }
        // ensure the json data is a string
        if (data['s3key'] && !(typeof data['s3key'] === 'string' || data['s3key'] instanceof String)) {
            throw new Error("Expected the field `s3key` to be a primitive type in the JSON string but got " + data['s3key']);
        }

        return true;
    }


}

StartImportFileTaskRequest.RequiredProperties = ["S3Bucket", "name", "s3key"];

/**
 *  The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.
 * @member {String} S3Bucket
 */
StartImportFileTaskRequest.prototype['S3Bucket'] = undefined;

/**
 * Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. 
 * @member {module:model/StartImportFileTaskRequest.DataSourceTypeEnum} dataSourceType
 */
StartImportFileTaskRequest.prototype['dataSourceType'] = undefined;

/**
 * Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. 
 * @member {Array.<module:model/Group>} groupId
 */
StartImportFileTaskRequest.prototype['groupId'] = undefined;

/**
 *  A descriptive name for the request. 
 * @member {String} name
 */
StartImportFileTaskRequest.prototype['name'] = undefined;

/**
 *  The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. 
 * @member {String} s3bucketForReportData
 */
StartImportFileTaskRequest.prototype['s3bucketForReportData'] = undefined;

/**
 *  The Amazon S3 key name of the import file. 
 * @member {String} s3key
 */
StartImportFileTaskRequest.prototype['s3key'] = undefined;





/**
 * Allowed values for the <code>dataSourceType</code> property.
 * @enum {String}
 * @readonly
 */
StartImportFileTaskRequest['DataSourceTypeEnum'] = {

    /**
     * value: "ApplicationDiscoveryService"
     * @const
     */
    "ApplicationDiscoveryService": "ApplicationDiscoveryService",

    /**
     * value: "MPA"
     * @const
     */
    "MPA": "MPA",

    /**
     * value: "Import"
     * @const
     */
    "Import": "Import"
};



export default StartImportFileTaskRequest;

