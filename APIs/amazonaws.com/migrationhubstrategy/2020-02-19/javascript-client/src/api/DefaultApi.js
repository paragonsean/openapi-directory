/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetApplicationComponentDetailsResponse from '../model/GetApplicationComponentDetailsResponse';
import GetApplicationComponentStrategiesResponse from '../model/GetApplicationComponentStrategiesResponse';
import GetAssessmentResponse from '../model/GetAssessmentResponse';
import GetImportFileTaskResponse from '../model/GetImportFileTaskResponse';
import GetLatestAssessmentIdResponse from '../model/GetLatestAssessmentIdResponse';
import GetPortfolioPreferencesResponse from '../model/GetPortfolioPreferencesResponse';
import GetPortfolioSummaryResponse from '../model/GetPortfolioSummaryResponse';
import GetRecommendationReportDetailsResponse from '../model/GetRecommendationReportDetailsResponse';
import GetServerDetailsResponse from '../model/GetServerDetailsResponse';
import GetServerStrategiesResponse from '../model/GetServerStrategiesResponse';
import ListApplicationComponentsRequest from '../model/ListApplicationComponentsRequest';
import ListApplicationComponentsResponse from '../model/ListApplicationComponentsResponse';
import ListCollectorsResponse from '../model/ListCollectorsResponse';
import ListImportFileTaskResponse from '../model/ListImportFileTaskResponse';
import ListServersRequest from '../model/ListServersRequest';
import ListServersResponse from '../model/ListServersResponse';
import PutPortfolioPreferencesRequest from '../model/PutPortfolioPreferencesRequest';
import StartAssessmentRequest from '../model/StartAssessmentRequest';
import StartAssessmentResponse from '../model/StartAssessmentResponse';
import StartImportFileTaskRequest from '../model/StartImportFileTaskRequest';
import StartImportFileTaskResponse from '../model/StartImportFileTaskResponse';
import StartRecommendationReportGenerationRequest from '../model/StartRecommendationReportGenerationRequest';
import StartRecommendationReportGenerationResponse from '../model/StartRecommendationReportGenerationResponse';
import StopAssessmentRequest from '../model/StopAssessmentRequest';
import UpdateApplicationComponentConfigRequest from '../model/UpdateApplicationComponentConfigRequest';
import UpdateServerConfigRequest from '../model/UpdateServerConfigRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-02-19
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getApplicationComponentDetails operation.
     * @callback module:api/DefaultApi~getApplicationComponentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApplicationComponentDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves details about an application component. 
     * @param {String} applicationComponentId  The ID of the application component. The ID is unique within an AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApplicationComponentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApplicationComponentDetailsResponse}
     */
    getApplicationComponentDetails(applicationComponentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationComponentId' is set
      if (applicationComponentId === undefined || applicationComponentId === null) {
        throw new Error("Missing the required parameter 'applicationComponentId' when calling getApplicationComponentDetails");
      }

      let pathParams = {
        'applicationComponentId': applicationComponentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApplicationComponentDetailsResponse;
      return this.apiClient.callApi(
        '/get-applicationcomponent-details/{applicationComponentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationComponentStrategies operation.
     * @callback module:api/DefaultApi~getApplicationComponentStrategiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApplicationComponentStrategiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves a list of all the recommended strategies and tools for an application component running on a server. 
     * @param {String} applicationComponentId  The ID of the application component. The ID is unique within an AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApplicationComponentStrategiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApplicationComponentStrategiesResponse}
     */
    getApplicationComponentStrategies(applicationComponentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationComponentId' is set
      if (applicationComponentId === undefined || applicationComponentId === null) {
        throw new Error("Missing the required parameter 'applicationComponentId' when calling getApplicationComponentStrategies");
      }

      let pathParams = {
        'applicationComponentId': applicationComponentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApplicationComponentStrategiesResponse;
      return this.apiClient.callApi(
        '/get-applicationcomponent-strategies/{applicationComponentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssessment operation.
     * @callback module:api/DefaultApi~getAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAssessmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves the status of an on-going assessment. 
     * @param {String} id  The <code>assessmentid</code> returned by <a>StartAssessment</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAssessmentResponse}
     */
    getAssessment(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAssessment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAssessmentResponse;
      return this.apiClient.callApi(
        '/get-assessment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImportFileTask operation.
     * @callback module:api/DefaultApi~getImportFileTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetImportFileTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves the details about a specific import task. 
     * @param {String} id  The ID of the import file task. This ID is returned in the response of <a>StartImportFileTask</a>. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getImportFileTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetImportFileTaskResponse}
     */
    getImportFileTask(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImportFileTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetImportFileTaskResponse;
      return this.apiClient.callApi(
        '/get-import-file-task/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestAssessmentId operation.
     * @callback module:api/DefaultApi~getLatestAssessmentIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLatestAssessmentIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the latest ID of a specific assessment task.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLatestAssessmentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLatestAssessmentIdResponse}
     */
    getLatestAssessmentId(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLatestAssessmentIdResponse;
      return this.apiClient.callApi(
        '/get-latest-assessment-id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioPreferences operation.
     * @callback module:api/DefaultApi~getPortfolioPreferencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPortfolioPreferencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves your migration and modernization preferences. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPortfolioPreferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPortfolioPreferencesResponse}
     */
    getPortfolioPreferences(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPortfolioPreferencesResponse;
      return this.apiClient.callApi(
        '/get-portfolio-preferences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioSummary operation.
     * @callback module:api/DefaultApi~getPortfolioSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPortfolioSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves overall summary including the number of servers to rehost and the overall number of anti-patterns. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPortfolioSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPortfolioSummaryResponse}
     */
    getPortfolioSummary(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPortfolioSummaryResponse;
      return this.apiClient.callApi(
        '/get-portfolio-summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendationReportDetails operation.
     * @callback module:api/DefaultApi~getRecommendationReportDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecommendationReportDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves detailed information about the specified recommendation report. 
     * @param {String} id  The recommendation report generation task <code>id</code> returned by <a>StartRecommendationReportGeneration</a>. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRecommendationReportDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecommendationReportDetailsResponse}
     */
    getRecommendationReportDetails(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecommendationReportDetails");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecommendationReportDetailsResponse;
      return this.apiClient.callApi(
        '/get-recommendation-report-details/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerDetails operation.
     * @callback module:api/DefaultApi~getServerDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServerDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves detailed information about a specified server. 
     * @param {String} serverId  The ID of the server. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]  The maximum number of items to include in the response. The maximum value is 100. 
     * @param {String} [nextToken]  The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. 
     * @param {module:api/DefaultApi~getServerDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServerDetailsResponse}
     */
    getServerDetails(serverId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getServerDetails");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServerDetailsResponse;
      return this.apiClient.callApi(
        '/get-server-details/{serverId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerStrategies operation.
     * @callback module:api/DefaultApi~getServerStrategiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServerStrategiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves recommended strategies and tools for the specified server. 
     * @param {String} serverId  The ID of the server. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getServerStrategiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServerStrategiesResponse}
     */
    getServerStrategies(serverId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getServerStrategies");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServerStrategiesResponse;
      return this.apiClient.callApi(
        '/get-server-strategies/{serverId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationComponents operation.
     * @callback module:api/DefaultApi~listApplicationComponentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationComponentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves a list of all the application components (processes). 
     * @param {module:model/ListApplicationComponentsRequest} listApplicationComponentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listApplicationComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationComponentsResponse}
     */
    listApplicationComponents(listApplicationComponentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listApplicationComponentsRequest;
      // verify the required parameter 'listApplicationComponentsRequest' is set
      if (listApplicationComponentsRequest === undefined || listApplicationComponentsRequest === null) {
        throw new Error("Missing the required parameter 'listApplicationComponentsRequest' when calling listApplicationComponents");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListApplicationComponentsResponse;
      return this.apiClient.callApi(
        '/list-applicationcomponents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCollectors operation.
     * @callback module:api/DefaultApi~listCollectorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCollectorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves a list of all the installed collectors. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]  The maximum number of items to include in the response. The maximum value is 100. 
     * @param {String} [nextToken]  The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. 
     * @param {module:api/DefaultApi~listCollectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCollectorsResponse}
     */
    listCollectors(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCollectorsResponse;
      return this.apiClient.callApi(
        '/list-collectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImportFileTask operation.
     * @callback module:api/DefaultApi~listImportFileTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListImportFileTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves a list of all the imports performed. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]  The total number of items to return. The maximum value is 100. 
     * @param {String} [nextToken]  The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. 
     * @param {module:api/DefaultApi~listImportFileTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListImportFileTaskResponse}
     */
    listImportFileTask(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListImportFileTaskResponse;
      return this.apiClient.callApi(
        '/list-import-file-task', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServers operation.
     * @callback module:api/DefaultApi~listServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of all the servers. 
     * @param {module:model/ListServersRequest} listServersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServersResponse}
     */
    listServers(listServersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listServersRequest;
      // verify the required parameter 'listServersRequest' is set
      if (listServersRequest === undefined || listServersRequest === null) {
        throw new Error("Missing the required parameter 'listServersRequest' when calling listServers");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListServersResponse;
      return this.apiClient.callApi(
        '/list-servers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPortfolioPreferences operation.
     * @callback module:api/DefaultApi~putPortfolioPreferencesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Saves the specified migration and modernization preferences. 
     * @param {module:model/PutPortfolioPreferencesRequest} putPortfolioPreferencesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putPortfolioPreferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putPortfolioPreferences(putPortfolioPreferencesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putPortfolioPreferencesRequest;
      // verify the required parameter 'putPortfolioPreferencesRequest' is set
      if (putPortfolioPreferencesRequest === undefined || putPortfolioPreferencesRequest === null) {
        throw new Error("Missing the required parameter 'putPortfolioPreferencesRequest' when calling putPortfolioPreferences");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/put-portfolio-preferences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startAssessment operation.
     * @callback module:api/DefaultApi~startAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartAssessmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Starts the assessment of an on-premises environment. 
     * @param {module:model/StartAssessmentRequest} startAssessmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartAssessmentResponse}
     */
    startAssessment(startAssessmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = startAssessmentRequest;
      // verify the required parameter 'startAssessmentRequest' is set
      if (startAssessmentRequest === undefined || startAssessmentRequest === null) {
        throw new Error("Missing the required parameter 'startAssessmentRequest' when calling startAssessment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartAssessmentResponse;
      return this.apiClient.callApi(
        '/start-assessment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startImportFileTask operation.
     * @callback module:api/DefaultApi~startImportFileTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartImportFileTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Starts a file import. 
     * @param {module:model/StartImportFileTaskRequest} startImportFileTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startImportFileTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartImportFileTaskResponse}
     */
    startImportFileTask(startImportFileTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = startImportFileTaskRequest;
      // verify the required parameter 'startImportFileTaskRequest' is set
      if (startImportFileTaskRequest === undefined || startImportFileTaskRequest === null) {
        throw new Error("Missing the required parameter 'startImportFileTaskRequest' when calling startImportFileTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartImportFileTaskResponse;
      return this.apiClient.callApi(
        '/start-import-file-task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startRecommendationReportGeneration operation.
     * @callback module:api/DefaultApi~startRecommendationReportGenerationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartRecommendationReportGenerationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Starts generating a recommendation report. 
     * @param {module:model/StartRecommendationReportGenerationRequest} startRecommendationReportGenerationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startRecommendationReportGenerationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartRecommendationReportGenerationResponse}
     */
    startRecommendationReportGeneration(startRecommendationReportGenerationRequest, opts, callback) {
      opts = opts || {};
      let postBody = startRecommendationReportGenerationRequest;
      // verify the required parameter 'startRecommendationReportGenerationRequest' is set
      if (startRecommendationReportGenerationRequest === undefined || startRecommendationReportGenerationRequest === null) {
        throw new Error("Missing the required parameter 'startRecommendationReportGenerationRequest' when calling startRecommendationReportGeneration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartRecommendationReportGenerationResponse;
      return this.apiClient.callApi(
        '/start-recommendation-report-generation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopAssessment operation.
     * @callback module:api/DefaultApi~stopAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Stops the assessment of an on-premises environment. 
     * @param {module:model/StopAssessmentRequest} stopAssessmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopAssessment(stopAssessmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopAssessmentRequest;
      // verify the required parameter 'stopAssessmentRequest' is set
      if (stopAssessmentRequest === undefined || stopAssessmentRequest === null) {
        throw new Error("Missing the required parameter 'stopAssessmentRequest' when calling stopAssessment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/stop-assessment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplicationComponentConfig operation.
     * @callback module:api/DefaultApi~updateApplicationComponentConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates the configuration of an application component. 
     * @param {module:model/UpdateApplicationComponentConfigRequest} updateApplicationComponentConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApplicationComponentConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateApplicationComponentConfig(updateApplicationComponentConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApplicationComponentConfigRequest;
      // verify the required parameter 'updateApplicationComponentConfigRequest' is set
      if (updateApplicationComponentConfigRequest === undefined || updateApplicationComponentConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateApplicationComponentConfigRequest' when calling updateApplicationComponentConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-applicationcomponent-config/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServerConfig operation.
     * @callback module:api/DefaultApi~updateServerConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates the configuration of the specified server. 
     * @param {module:model/UpdateServerConfigRequest} updateServerConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateServerConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateServerConfig(updateServerConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateServerConfigRequest;
      // verify the required parameter 'updateServerConfigRequest' is set
      if (updateServerConfigRequest === undefined || updateServerConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateServerConfigRequest' when calling updateServerConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-server-config/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
