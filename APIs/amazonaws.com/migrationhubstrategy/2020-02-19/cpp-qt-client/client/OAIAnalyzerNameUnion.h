/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnalyzerNameUnion.h
 *
 * The combination of the existing analyzers.
 */

#ifndef OAIAnalyzerNameUnion_H
#define OAIAnalyzerNameUnion_H

#include <QJsonObject>

#include "OAIBinaryAnalyzerName.h"
#include "OAIRunTimeAnalyzerName.h"
#include "OAISourceCodeAnalyzerName.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAnalyzerNameUnion : public OAIObject {
public:
    OAIAnalyzerNameUnion();
    OAIAnalyzerNameUnion(QString json);
    ~OAIAnalyzerNameUnion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBinaryAnalyzerName getBinaryAnalyzerName() const;
    void setBinaryAnalyzerName(const OAIBinaryAnalyzerName &binary_analyzer_name);
    bool is_binary_analyzer_name_Set() const;
    bool is_binary_analyzer_name_Valid() const;

    OAIRunTimeAnalyzerName getRunTimeAnalyzerName() const;
    void setRunTimeAnalyzerName(const OAIRunTimeAnalyzerName &run_time_analyzer_name);
    bool is_run_time_analyzer_name_Set() const;
    bool is_run_time_analyzer_name_Valid() const;

    OAISourceCodeAnalyzerName getSourceCodeAnalyzerName() const;
    void setSourceCodeAnalyzerName(const OAISourceCodeAnalyzerName &source_code_analyzer_name);
    bool is_source_code_analyzer_name_Set() const;
    bool is_source_code_analyzer_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBinaryAnalyzerName m_binary_analyzer_name;
    bool m_binary_analyzer_name_isSet;
    bool m_binary_analyzer_name_isValid;

    OAIRunTimeAnalyzerName m_run_time_analyzer_name;
    bool m_run_time_analyzer_name_isSet;
    bool m_run_time_analyzer_name_isValid;

    OAISourceCodeAnalyzerName m_source_code_analyzer_name;
    bool m_source_code_analyzer_name_isSet;
    bool m_source_code_analyzer_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnalyzerNameUnion)

#endif // OAIAnalyzerNameUnion_H
