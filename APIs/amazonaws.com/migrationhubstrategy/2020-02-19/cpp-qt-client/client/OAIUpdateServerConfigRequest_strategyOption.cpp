/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServerConfigRequest_strategyOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServerConfigRequest_strategyOption::OAIUpdateServerConfigRequest_strategyOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServerConfigRequest_strategyOption::OAIUpdateServerConfigRequest_strategyOption() {
    this->initializeModel();
}

OAIUpdateServerConfigRequest_strategyOption::~OAIUpdateServerConfigRequest_strategyOption() {}

void OAIUpdateServerConfigRequest_strategyOption::initializeModel() {

    m_is_preferred_isSet = false;
    m_is_preferred_isValid = false;

    m_strategy_isSet = false;
    m_strategy_isValid = false;

    m_target_destination_isSet = false;
    m_target_destination_isValid = false;

    m_tool_name_isSet = false;
    m_tool_name_isValid = false;
}

void OAIUpdateServerConfigRequest_strategyOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServerConfigRequest_strategyOption::fromJsonObject(QJsonObject json) {

    m_is_preferred_isValid = ::OpenAPI::fromJsonValue(m_is_preferred, json[QString("isPreferred")]);
    m_is_preferred_isSet = !json[QString("isPreferred")].isNull() && m_is_preferred_isValid;

    m_strategy_isValid = ::OpenAPI::fromJsonValue(m_strategy, json[QString("strategy")]);
    m_strategy_isSet = !json[QString("strategy")].isNull() && m_strategy_isValid;

    m_target_destination_isValid = ::OpenAPI::fromJsonValue(m_target_destination, json[QString("targetDestination")]);
    m_target_destination_isSet = !json[QString("targetDestination")].isNull() && m_target_destination_isValid;

    m_tool_name_isValid = ::OpenAPI::fromJsonValue(m_tool_name, json[QString("toolName")]);
    m_tool_name_isSet = !json[QString("toolName")].isNull() && m_tool_name_isValid;
}

QString OAIUpdateServerConfigRequest_strategyOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServerConfigRequest_strategyOption::asJsonObject() const {
    QJsonObject obj;
    if (m_is_preferred_isSet) {
        obj.insert(QString("isPreferred"), ::OpenAPI::toJsonValue(m_is_preferred));
    }
    if (m_strategy.isSet()) {
        obj.insert(QString("strategy"), ::OpenAPI::toJsonValue(m_strategy));
    }
    if (m_target_destination.isSet()) {
        obj.insert(QString("targetDestination"), ::OpenAPI::toJsonValue(m_target_destination));
    }
    if (m_tool_name.isSet()) {
        obj.insert(QString("toolName"), ::OpenAPI::toJsonValue(m_tool_name));
    }
    return obj;
}

bool OAIUpdateServerConfigRequest_strategyOption::getIsPreferred() const {
    return m_is_preferred;
}
void OAIUpdateServerConfigRequest_strategyOption::setIsPreferred(const bool &is_preferred) {
    m_is_preferred = is_preferred;
    m_is_preferred_isSet = true;
}

bool OAIUpdateServerConfigRequest_strategyOption::is_is_preferred_Set() const{
    return m_is_preferred_isSet;
}

bool OAIUpdateServerConfigRequest_strategyOption::is_is_preferred_Valid() const{
    return m_is_preferred_isValid;
}

OAIStrategy OAIUpdateServerConfigRequest_strategyOption::getStrategy() const {
    return m_strategy;
}
void OAIUpdateServerConfigRequest_strategyOption::setStrategy(const OAIStrategy &strategy) {
    m_strategy = strategy;
    m_strategy_isSet = true;
}

bool OAIUpdateServerConfigRequest_strategyOption::is_strategy_Set() const{
    return m_strategy_isSet;
}

bool OAIUpdateServerConfigRequest_strategyOption::is_strategy_Valid() const{
    return m_strategy_isValid;
}

OAITargetDestination OAIUpdateServerConfigRequest_strategyOption::getTargetDestination() const {
    return m_target_destination;
}
void OAIUpdateServerConfigRequest_strategyOption::setTargetDestination(const OAITargetDestination &target_destination) {
    m_target_destination = target_destination;
    m_target_destination_isSet = true;
}

bool OAIUpdateServerConfigRequest_strategyOption::is_target_destination_Set() const{
    return m_target_destination_isSet;
}

bool OAIUpdateServerConfigRequest_strategyOption::is_target_destination_Valid() const{
    return m_target_destination_isValid;
}

OAITransformationToolName OAIUpdateServerConfigRequest_strategyOption::getToolName() const {
    return m_tool_name;
}
void OAIUpdateServerConfigRequest_strategyOption::setToolName(const OAITransformationToolName &tool_name) {
    m_tool_name = tool_name;
    m_tool_name_isSet = true;
}

bool OAIUpdateServerConfigRequest_strategyOption::is_tool_name_Set() const{
    return m_tool_name_isSet;
}

bool OAIUpdateServerConfigRequest_strategyOption::is_tool_name_Valid() const{
    return m_tool_name_isValid;
}

bool OAIUpdateServerConfigRequest_strategyOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServerConfigRequest_strategyOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
