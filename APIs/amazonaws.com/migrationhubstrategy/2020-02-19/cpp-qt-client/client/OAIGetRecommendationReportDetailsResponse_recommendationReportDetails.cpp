/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRecommendationReportDetailsResponse_recommendationReportDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::OAIGetRecommendationReportDetailsResponse_recommendationReportDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::OAIGetRecommendationReportDetailsResponse_recommendationReportDetails() {
    this->initializeModel();
}

OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::~OAIGetRecommendationReportDetailsResponse_recommendationReportDetails() {}

void OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::initializeModel() {

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_s3_bucket_isSet = false;
    m_s3_bucket_isValid = false;

    m_s3_keys_isSet = false;
    m_s3_keys_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;
}

void OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::fromJsonObject(QJsonObject json) {

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("completionTime")]);
    m_completion_time_isSet = !json[QString("completionTime")].isNull() && m_completion_time_isValid;

    m_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket, json[QString("s3Bucket")]);
    m_s3_bucket_isSet = !json[QString("s3Bucket")].isNull() && m_s3_bucket_isValid;

    m_s3_keys_isValid = ::OpenAPI::fromJsonValue(m_s3_keys, json[QString("s3Keys")]);
    m_s3_keys_isSet = !json[QString("s3Keys")].isNull() && m_s3_keys_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;
}

QString OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_time_isSet) {
        obj.insert(QString("completionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_s3_bucket_isSet) {
        obj.insert(QString("s3Bucket"), ::OpenAPI::toJsonValue(m_s3_bucket));
    }
    if (m_s3_keys.isSet()) {
        obj.insert(QString("s3Keys"), ::OpenAPI::toJsonValue(m_s3_keys));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    return obj;
}

QDateTime OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::getCompletionTime() const {
    return m_completion_time;
}
void OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::setCompletionTime(const QDateTime &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QString OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::getS3Bucket() const {
    return m_s3_bucket;
}
void OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::setS3Bucket(const QString &s3_bucket) {
    m_s3_bucket = s3_bucket;
    m_s3_bucket_isSet = true;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::is_s3_bucket_Set() const{
    return m_s3_bucket_isSet;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::is_s3_bucket_Valid() const{
    return m_s3_bucket_isValid;
}

QList OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::getS3Keys() const {
    return m_s3_keys;
}
void OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::setS3Keys(const QList &s3_keys) {
    m_s3_keys = s3_keys;
    m_s3_keys_isSet = true;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::is_s3_keys_Set() const{
    return m_s3_keys_isSet;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::is_s3_keys_Valid() const{
    return m_s3_keys_isValid;
}

QDateTime OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::getStartTime() const {
    return m_start_time;
}
void OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIRecommendationReportStatus OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::getStatus() const {
    return m_status;
}
void OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::setStatus(const OAIRecommendationReportStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::getStatusMessage() const {
    return m_status_message;
}
void OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRecommendationReportDetailsResponse_recommendationReportDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
