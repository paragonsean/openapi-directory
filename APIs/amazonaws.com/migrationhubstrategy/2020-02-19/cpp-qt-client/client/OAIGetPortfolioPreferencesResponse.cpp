/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPortfolioPreferencesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPortfolioPreferencesResponse::OAIGetPortfolioPreferencesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPortfolioPreferencesResponse::OAIGetPortfolioPreferencesResponse() {
    this->initializeModel();
}

OAIGetPortfolioPreferencesResponse::~OAIGetPortfolioPreferencesResponse() {}

void OAIGetPortfolioPreferencesResponse::initializeModel() {

    m_application_mode_isSet = false;
    m_application_mode_isValid = false;

    m_application_preferences_isSet = false;
    m_application_preferences_isValid = false;

    m_database_preferences_isSet = false;
    m_database_preferences_isValid = false;

    m_prioritize_business_goals_isSet = false;
    m_prioritize_business_goals_isValid = false;
}

void OAIGetPortfolioPreferencesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPortfolioPreferencesResponse::fromJsonObject(QJsonObject json) {

    m_application_mode_isValid = ::OpenAPI::fromJsonValue(m_application_mode, json[QString("applicationMode")]);
    m_application_mode_isSet = !json[QString("applicationMode")].isNull() && m_application_mode_isValid;

    m_application_preferences_isValid = ::OpenAPI::fromJsonValue(m_application_preferences, json[QString("applicationPreferences")]);
    m_application_preferences_isSet = !json[QString("applicationPreferences")].isNull() && m_application_preferences_isValid;

    m_database_preferences_isValid = ::OpenAPI::fromJsonValue(m_database_preferences, json[QString("databasePreferences")]);
    m_database_preferences_isSet = !json[QString("databasePreferences")].isNull() && m_database_preferences_isValid;

    m_prioritize_business_goals_isValid = ::OpenAPI::fromJsonValue(m_prioritize_business_goals, json[QString("prioritizeBusinessGoals")]);
    m_prioritize_business_goals_isSet = !json[QString("prioritizeBusinessGoals")].isNull() && m_prioritize_business_goals_isValid;
}

QString OAIGetPortfolioPreferencesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPortfolioPreferencesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_mode.isSet()) {
        obj.insert(QString("applicationMode"), ::OpenAPI::toJsonValue(m_application_mode));
    }
    if (m_application_preferences.isSet()) {
        obj.insert(QString("applicationPreferences"), ::OpenAPI::toJsonValue(m_application_preferences));
    }
    if (m_database_preferences.isSet()) {
        obj.insert(QString("databasePreferences"), ::OpenAPI::toJsonValue(m_database_preferences));
    }
    if (m_prioritize_business_goals.isSet()) {
        obj.insert(QString("prioritizeBusinessGoals"), ::OpenAPI::toJsonValue(m_prioritize_business_goals));
    }
    return obj;
}

OAIApplicationMode OAIGetPortfolioPreferencesResponse::getApplicationMode() const {
    return m_application_mode;
}
void OAIGetPortfolioPreferencesResponse::setApplicationMode(const OAIApplicationMode &application_mode) {
    m_application_mode = application_mode;
    m_application_mode_isSet = true;
}

bool OAIGetPortfolioPreferencesResponse::is_application_mode_Set() const{
    return m_application_mode_isSet;
}

bool OAIGetPortfolioPreferencesResponse::is_application_mode_Valid() const{
    return m_application_mode_isValid;
}

OAIGetPortfolioPreferencesResponse_applicationPreferences OAIGetPortfolioPreferencesResponse::getApplicationPreferences() const {
    return m_application_preferences;
}
void OAIGetPortfolioPreferencesResponse::setApplicationPreferences(const OAIGetPortfolioPreferencesResponse_applicationPreferences &application_preferences) {
    m_application_preferences = application_preferences;
    m_application_preferences_isSet = true;
}

bool OAIGetPortfolioPreferencesResponse::is_application_preferences_Set() const{
    return m_application_preferences_isSet;
}

bool OAIGetPortfolioPreferencesResponse::is_application_preferences_Valid() const{
    return m_application_preferences_isValid;
}

OAIGetPortfolioPreferencesResponse_databasePreferences OAIGetPortfolioPreferencesResponse::getDatabasePreferences() const {
    return m_database_preferences;
}
void OAIGetPortfolioPreferencesResponse::setDatabasePreferences(const OAIGetPortfolioPreferencesResponse_databasePreferences &database_preferences) {
    m_database_preferences = database_preferences;
    m_database_preferences_isSet = true;
}

bool OAIGetPortfolioPreferencesResponse::is_database_preferences_Set() const{
    return m_database_preferences_isSet;
}

bool OAIGetPortfolioPreferencesResponse::is_database_preferences_Valid() const{
    return m_database_preferences_isValid;
}

OAIGetPortfolioPreferencesResponse_prioritizeBusinessGoals OAIGetPortfolioPreferencesResponse::getPrioritizeBusinessGoals() const {
    return m_prioritize_business_goals;
}
void OAIGetPortfolioPreferencesResponse::setPrioritizeBusinessGoals(const OAIGetPortfolioPreferencesResponse_prioritizeBusinessGoals &prioritize_business_goals) {
    m_prioritize_business_goals = prioritize_business_goals;
    m_prioritize_business_goals_isSet = true;
}

bool OAIGetPortfolioPreferencesResponse::is_prioritize_business_goals_Set() const{
    return m_prioritize_business_goals_isSet;
}

bool OAIGetPortfolioPreferencesResponse::is_prioritize_business_goals_Valid() const{
    return m_prioritize_business_goals_isValid;
}

bool OAIGetPortfolioPreferencesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prioritize_business_goals.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPortfolioPreferencesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
