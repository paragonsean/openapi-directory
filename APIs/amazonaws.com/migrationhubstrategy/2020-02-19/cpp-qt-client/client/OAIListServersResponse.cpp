/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListServersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListServersResponse::OAIListServersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListServersResponse::OAIListServersResponse() {
    this->initializeModel();
}

OAIListServersResponse::~OAIListServersResponse() {}

void OAIListServersResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_server_infos_isSet = false;
    m_server_infos_isValid = false;
}

void OAIListServersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListServersResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_server_infos_isValid = ::OpenAPI::fromJsonValue(m_server_infos, json[QString("serverInfos")]);
    m_server_infos_isSet = !json[QString("serverInfos")].isNull() && m_server_infos_isValid;
}

QString OAIListServersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListServersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_server_infos.isSet()) {
        obj.insert(QString("serverInfos"), ::OpenAPI::toJsonValue(m_server_infos));
    }
    return obj;
}

QString OAIListServersResponse::getNextToken() const {
    return m_next_token;
}
void OAIListServersResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListServersResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListServersResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListServersResponse::getServerInfos() const {
    return m_server_infos;
}
void OAIListServersResponse::setServerInfos(const QList &server_infos) {
    m_server_infos = server_infos;
    m_server_infos_isSet = true;
}

bool OAIListServersResponse::is_server_infos_Set() const{
    return m_server_infos_isSet;
}

bool OAIListServersResponse::is_server_infos_Valid() const{
    return m_server_infos_isValid;
}

bool OAIListServersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_infos.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListServersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
