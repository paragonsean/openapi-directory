/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceCodeRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceCodeRepository::OAISourceCodeRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceCodeRepository::OAISourceCodeRepository() {
    this->initializeModel();
}

OAISourceCodeRepository::~OAISourceCodeRepository() {}

void OAISourceCodeRepository::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_version_control_type_isSet = false;
    m_version_control_type_isValid = false;
}

void OAISourceCodeRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceCodeRepository::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("projectName")]);
    m_project_name_isSet = !json[QString("projectName")].isNull() && m_project_name_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_version_control_type_isValid = ::OpenAPI::fromJsonValue(m_version_control_type, json[QString("versionControlType")]);
    m_version_control_type_isSet = !json[QString("versionControlType")].isNull() && m_version_control_type_isValid;
}

QString OAISourceCodeRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceCodeRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_project_name_isSet) {
        obj.insert(QString("projectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_version_control_type_isSet) {
        obj.insert(QString("versionControlType"), ::OpenAPI::toJsonValue(m_version_control_type));
    }
    return obj;
}

QString OAISourceCodeRepository::getBranch() const {
    return m_branch;
}
void OAISourceCodeRepository::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAISourceCodeRepository::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAISourceCodeRepository::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAISourceCodeRepository::getProjectName() const {
    return m_project_name;
}
void OAISourceCodeRepository::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAISourceCodeRepository::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAISourceCodeRepository::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QString OAISourceCodeRepository::getRepository() const {
    return m_repository;
}
void OAISourceCodeRepository::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAISourceCodeRepository::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAISourceCodeRepository::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAISourceCodeRepository::getVersionControlType() const {
    return m_version_control_type;
}
void OAISourceCodeRepository::setVersionControlType(const QString &version_control_type) {
    m_version_control_type = version_control_type;
    m_version_control_type_isSet = true;
}

bool OAISourceCodeRepository::is_version_control_type_Set() const{
    return m_version_control_type_isSet;
}

bool OAISourceCodeRepository::is_version_control_type_Valid() const{
    return m_version_control_type_isValid;
}

bool OAISourceCodeRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_control_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceCodeRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
