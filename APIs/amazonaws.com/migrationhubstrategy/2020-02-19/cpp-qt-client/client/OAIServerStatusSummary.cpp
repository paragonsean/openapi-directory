/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerStatusSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerStatusSummary::OAIServerStatusSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerStatusSummary::OAIServerStatusSummary() {
    this->initializeModel();
}

OAIServerStatusSummary::~OAIServerStatusSummary() {}

void OAIServerStatusSummary::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_run_time_assessment_status_isSet = false;
    m_run_time_assessment_status_isValid = false;
}

void OAIServerStatusSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerStatusSummary::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_run_time_assessment_status_isValid = ::OpenAPI::fromJsonValue(m_run_time_assessment_status, json[QString("runTimeAssessmentStatus")]);
    m_run_time_assessment_status_isSet = !json[QString("runTimeAssessmentStatus")].isNull() && m_run_time_assessment_status_isValid;
}

QString OAIServerStatusSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerStatusSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_run_time_assessment_status.isSet()) {
        obj.insert(QString("runTimeAssessmentStatus"), ::OpenAPI::toJsonValue(m_run_time_assessment_status));
    }
    return obj;
}

qint32 OAIServerStatusSummary::getCount() const {
    return m_count;
}
void OAIServerStatusSummary::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIServerStatusSummary::is_count_Set() const{
    return m_count_isSet;
}

bool OAIServerStatusSummary::is_count_Valid() const{
    return m_count_isValid;
}

OAIRunTimeAssessmentStatus OAIServerStatusSummary::getRunTimeAssessmentStatus() const {
    return m_run_time_assessment_status;
}
void OAIServerStatusSummary::setRunTimeAssessmentStatus(const OAIRunTimeAssessmentStatus &run_time_assessment_status) {
    m_run_time_assessment_status = run_time_assessment_status;
    m_run_time_assessment_status_isSet = true;
}

bool OAIServerStatusSummary::is_run_time_assessment_status_Set() const{
    return m_run_time_assessment_status_isSet;
}

bool OAIServerStatusSummary::is_run_time_assessment_status_Valid() const{
    return m_run_time_assessment_status_isValid;
}

bool OAIServerStatusSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_time_assessment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerStatusSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
