/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals() {
    this->initializeModel();
}

OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::~OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals() {}

void OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::initializeModel() {

    m_business_goals_isSet = false;
    m_business_goals_isValid = false;
}

void OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::fromJsonObject(QJsonObject json) {

    m_business_goals_isValid = ::OpenAPI::fromJsonValue(m_business_goals, json[QString("businessGoals")]);
    m_business_goals_isSet = !json[QString("businessGoals")].isNull() && m_business_goals_isValid;
}

QString OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::asJsonObject() const {
    QJsonObject obj;
    if (m_business_goals.isSet()) {
        obj.insert(QString("businessGoals"), ::OpenAPI::toJsonValue(m_business_goals));
    }
    return obj;
}

OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::getBusinessGoals() const {
    return m_business_goals;
}
void OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::setBusinessGoals(const OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals &business_goals) {
    m_business_goals = business_goals;
    m_business_goals_isSet = true;
}

bool OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::is_business_goals_Set() const{
    return m_business_goals_isSet;
}

bool OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::is_business_goals_Valid() const{
    return m_business_goals_isValid;
}

bool OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_goals.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutPortfolioPreferencesRequest_prioritizeBusinessGoals::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
