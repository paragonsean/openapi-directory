/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartImportFileTask_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartImportFileTask_request::OAIStartImportFileTask_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartImportFileTask_request::OAIStartImportFileTask_request() {
    this->initializeModel();
}

OAIStartImportFileTask_request::~OAIStartImportFileTask_request() {}

void OAIStartImportFileTask_request::initializeModel() {

    m_s3_bucket_isSet = false;
    m_s3_bucket_isValid = false;

    m_data_source_type_isSet = false;
    m_data_source_type_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_s3bucket_for_report_data_isSet = false;
    m_s3bucket_for_report_data_isValid = false;

    m_s3key_isSet = false;
    m_s3key_isValid = false;
}

void OAIStartImportFileTask_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartImportFileTask_request::fromJsonObject(QJsonObject json) {

    m_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket, json[QString("S3Bucket")]);
    m_s3_bucket_isSet = !json[QString("S3Bucket")].isNull() && m_s3_bucket_isValid;

    m_data_source_type_isValid = ::OpenAPI::fromJsonValue(m_data_source_type, json[QString("dataSourceType")]);
    m_data_source_type_isSet = !json[QString("dataSourceType")].isNull() && m_data_source_type_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_s3bucket_for_report_data_isValid = ::OpenAPI::fromJsonValue(m_s3bucket_for_report_data, json[QString("s3bucketForReportData")]);
    m_s3bucket_for_report_data_isSet = !json[QString("s3bucketForReportData")].isNull() && m_s3bucket_for_report_data_isValid;

    m_s3key_isValid = ::OpenAPI::fromJsonValue(m_s3key, json[QString("s3key")]);
    m_s3key_isSet = !json[QString("s3key")].isNull() && m_s3key_isValid;
}

QString OAIStartImportFileTask_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartImportFileTask_request::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket_isSet) {
        obj.insert(QString("S3Bucket"), ::OpenAPI::toJsonValue(m_s3_bucket));
    }
    if (m_data_source_type_isSet) {
        obj.insert(QString("dataSourceType"), ::OpenAPI::toJsonValue(m_data_source_type));
    }
    if (m_group_id.size() > 0) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_s3bucket_for_report_data_isSet) {
        obj.insert(QString("s3bucketForReportData"), ::OpenAPI::toJsonValue(m_s3bucket_for_report_data));
    }
    if (m_s3key_isSet) {
        obj.insert(QString("s3key"), ::OpenAPI::toJsonValue(m_s3key));
    }
    return obj;
}

QString OAIStartImportFileTask_request::getS3Bucket() const {
    return m_s3_bucket;
}
void OAIStartImportFileTask_request::setS3Bucket(const QString &s3_bucket) {
    m_s3_bucket = s3_bucket;
    m_s3_bucket_isSet = true;
}

bool OAIStartImportFileTask_request::is_s3_bucket_Set() const{
    return m_s3_bucket_isSet;
}

bool OAIStartImportFileTask_request::is_s3_bucket_Valid() const{
    return m_s3_bucket_isValid;
}

QString OAIStartImportFileTask_request::getDataSourceType() const {
    return m_data_source_type;
}
void OAIStartImportFileTask_request::setDataSourceType(const QString &data_source_type) {
    m_data_source_type = data_source_type;
    m_data_source_type_isSet = true;
}

bool OAIStartImportFileTask_request::is_data_source_type_Set() const{
    return m_data_source_type_isSet;
}

bool OAIStartImportFileTask_request::is_data_source_type_Valid() const{
    return m_data_source_type_isValid;
}

QList<OAIGroup> OAIStartImportFileTask_request::getGroupId() const {
    return m_group_id;
}
void OAIStartImportFileTask_request::setGroupId(const QList<OAIGroup> &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIStartImportFileTask_request::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIStartImportFileTask_request::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIStartImportFileTask_request::getName() const {
    return m_name;
}
void OAIStartImportFileTask_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStartImportFileTask_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStartImportFileTask_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStartImportFileTask_request::getS3bucketForReportData() const {
    return m_s3bucket_for_report_data;
}
void OAIStartImportFileTask_request::setS3bucketForReportData(const QString &s3bucket_for_report_data) {
    m_s3bucket_for_report_data = s3bucket_for_report_data;
    m_s3bucket_for_report_data_isSet = true;
}

bool OAIStartImportFileTask_request::is_s3bucket_for_report_data_Set() const{
    return m_s3bucket_for_report_data_isSet;
}

bool OAIStartImportFileTask_request::is_s3bucket_for_report_data_Valid() const{
    return m_s3bucket_for_report_data_isValid;
}

QString OAIStartImportFileTask_request::getS3key() const {
    return m_s3key;
}
void OAIStartImportFileTask_request::setS3key(const QString &s3key) {
    m_s3key = s3key;
    m_s3key_isSet = true;
}

bool OAIStartImportFileTask_request::is_s3key_Set() const{
    return m_s3key_isSet;
}

bool OAIStartImportFileTask_request::is_s3key_Valid() const{
    return m_s3key_isValid;
}

bool OAIStartImportFileTask_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3bucket_for_report_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartImportFileTask_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_bucket_isValid && m_name_isValid && m_s3key_isValid && true;
}

} // namespace OpenAPI
