/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals() {
    this->initializeModel();
}

OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::~OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals() {}

void OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::initializeModel() {

    m_license_cost_reduction_isSet = false;
    m_license_cost_reduction_isValid = false;

    m_modernize_infrastructure_with_cloud_native_technologies_isSet = false;
    m_modernize_infrastructure_with_cloud_native_technologies_isValid = false;

    m_reduce_operational_overhead_with_managed_services_isSet = false;
    m_reduce_operational_overhead_with_managed_services_isValid = false;

    m_speed_of_migration_isSet = false;
    m_speed_of_migration_isValid = false;
}

void OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::fromJsonObject(QJsonObject json) {

    m_license_cost_reduction_isValid = ::OpenAPI::fromJsonValue(m_license_cost_reduction, json[QString("licenseCostReduction")]);
    m_license_cost_reduction_isSet = !json[QString("licenseCostReduction")].isNull() && m_license_cost_reduction_isValid;

    m_modernize_infrastructure_with_cloud_native_technologies_isValid = ::OpenAPI::fromJsonValue(m_modernize_infrastructure_with_cloud_native_technologies, json[QString("modernizeInfrastructureWithCloudNativeTechnologies")]);
    m_modernize_infrastructure_with_cloud_native_technologies_isSet = !json[QString("modernizeInfrastructureWithCloudNativeTechnologies")].isNull() && m_modernize_infrastructure_with_cloud_native_technologies_isValid;

    m_reduce_operational_overhead_with_managed_services_isValid = ::OpenAPI::fromJsonValue(m_reduce_operational_overhead_with_managed_services, json[QString("reduceOperationalOverheadWithManagedServices")]);
    m_reduce_operational_overhead_with_managed_services_isSet = !json[QString("reduceOperationalOverheadWithManagedServices")].isNull() && m_reduce_operational_overhead_with_managed_services_isValid;

    m_speed_of_migration_isValid = ::OpenAPI::fromJsonValue(m_speed_of_migration, json[QString("speedOfMigration")]);
    m_speed_of_migration_isSet = !json[QString("speedOfMigration")].isNull() && m_speed_of_migration_isValid;
}

QString OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::asJsonObject() const {
    QJsonObject obj;
    if (m_license_cost_reduction_isSet) {
        obj.insert(QString("licenseCostReduction"), ::OpenAPI::toJsonValue(m_license_cost_reduction));
    }
    if (m_modernize_infrastructure_with_cloud_native_technologies_isSet) {
        obj.insert(QString("modernizeInfrastructureWithCloudNativeTechnologies"), ::OpenAPI::toJsonValue(m_modernize_infrastructure_with_cloud_native_technologies));
    }
    if (m_reduce_operational_overhead_with_managed_services_isSet) {
        obj.insert(QString("reduceOperationalOverheadWithManagedServices"), ::OpenAPI::toJsonValue(m_reduce_operational_overhead_with_managed_services));
    }
    if (m_speed_of_migration_isSet) {
        obj.insert(QString("speedOfMigration"), ::OpenAPI::toJsonValue(m_speed_of_migration));
    }
    return obj;
}

qint32 OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::getLicenseCostReduction() const {
    return m_license_cost_reduction;
}
void OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::setLicenseCostReduction(const qint32 &license_cost_reduction) {
    m_license_cost_reduction = license_cost_reduction;
    m_license_cost_reduction_isSet = true;
}

bool OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::is_license_cost_reduction_Set() const{
    return m_license_cost_reduction_isSet;
}

bool OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::is_license_cost_reduction_Valid() const{
    return m_license_cost_reduction_isValid;
}

qint32 OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::getModernizeInfrastructureWithCloudNativeTechnologies() const {
    return m_modernize_infrastructure_with_cloud_native_technologies;
}
void OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::setModernizeInfrastructureWithCloudNativeTechnologies(const qint32 &modernize_infrastructure_with_cloud_native_technologies) {
    m_modernize_infrastructure_with_cloud_native_technologies = modernize_infrastructure_with_cloud_native_technologies;
    m_modernize_infrastructure_with_cloud_native_technologies_isSet = true;
}

bool OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::is_modernize_infrastructure_with_cloud_native_technologies_Set() const{
    return m_modernize_infrastructure_with_cloud_native_technologies_isSet;
}

bool OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::is_modernize_infrastructure_with_cloud_native_technologies_Valid() const{
    return m_modernize_infrastructure_with_cloud_native_technologies_isValid;
}

qint32 OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::getReduceOperationalOverheadWithManagedServices() const {
    return m_reduce_operational_overhead_with_managed_services;
}
void OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::setReduceOperationalOverheadWithManagedServices(const qint32 &reduce_operational_overhead_with_managed_services) {
    m_reduce_operational_overhead_with_managed_services = reduce_operational_overhead_with_managed_services;
    m_reduce_operational_overhead_with_managed_services_isSet = true;
}

bool OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::is_reduce_operational_overhead_with_managed_services_Set() const{
    return m_reduce_operational_overhead_with_managed_services_isSet;
}

bool OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::is_reduce_operational_overhead_with_managed_services_Valid() const{
    return m_reduce_operational_overhead_with_managed_services_isValid;
}

qint32 OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::getSpeedOfMigration() const {
    return m_speed_of_migration;
}
void OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::setSpeedOfMigration(const qint32 &speed_of_migration) {
    m_speed_of_migration = speed_of_migration;
    m_speed_of_migration_isSet = true;
}

bool OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::is_speed_of_migration_Set() const{
    return m_speed_of_migration_isSet;
}

bool OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::is_speed_of_migration_Valid() const{
    return m_speed_of_migration_isValid;
}

bool OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_cost_reduction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modernize_infrastructure_with_cloud_native_technologies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reduce_operational_overhead_with_managed_services_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_of_migration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
