/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServerConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServerConfigRequest::OAIUpdateServerConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServerConfigRequest::OAIUpdateServerConfigRequest() {
    this->initializeModel();
}

OAIUpdateServerConfigRequest::~OAIUpdateServerConfigRequest() {}

void OAIUpdateServerConfigRequest::initializeModel() {

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_strategy_option_isSet = false;
    m_strategy_option_isValid = false;
}

void OAIUpdateServerConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServerConfigRequest::fromJsonObject(QJsonObject json) {

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("serverId")]);
    m_server_id_isSet = !json[QString("serverId")].isNull() && m_server_id_isValid;

    m_strategy_option_isValid = ::OpenAPI::fromJsonValue(m_strategy_option, json[QString("strategyOption")]);
    m_strategy_option_isSet = !json[QString("strategyOption")].isNull() && m_strategy_option_isValid;
}

QString OAIUpdateServerConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServerConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_server_id_isSet) {
        obj.insert(QString("serverId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_strategy_option.isSet()) {
        obj.insert(QString("strategyOption"), ::OpenAPI::toJsonValue(m_strategy_option));
    }
    return obj;
}

QString OAIUpdateServerConfigRequest::getServerId() const {
    return m_server_id;
}
void OAIUpdateServerConfigRequest::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIUpdateServerConfigRequest::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIUpdateServerConfigRequest::is_server_id_Valid() const{
    return m_server_id_isValid;
}

OAIUpdateServerConfigRequest_strategyOption OAIUpdateServerConfigRequest::getStrategyOption() const {
    return m_strategy_option;
}
void OAIUpdateServerConfigRequest::setStrategyOption(const OAIUpdateServerConfigRequest_strategyOption &strategy_option) {
    m_strategy_option = strategy_option;
    m_strategy_option_isSet = true;
}

bool OAIUpdateServerConfigRequest::is_strategy_option_Set() const{
    return m_strategy_option_isSet;
}

bool OAIUpdateServerConfigRequest::is_strategy_option_Valid() const{
    return m_strategy_option_isValid;
}

bool OAIUpdateServerConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategy_option.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServerConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_id_isValid && true;
}

} // namespace OpenAPI
