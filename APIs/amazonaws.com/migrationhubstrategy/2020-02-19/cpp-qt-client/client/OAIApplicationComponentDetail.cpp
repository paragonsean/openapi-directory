/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationComponentDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationComponentDetail::OAIApplicationComponentDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationComponentDetail::OAIApplicationComponentDetail() {
    this->initializeModel();
}

OAIApplicationComponentDetail::~OAIApplicationComponentDetail() {}

void OAIApplicationComponentDetail::initializeModel() {

    m_analysis_status_isSet = false;
    m_analysis_status_isValid = false;

    m_antipattern_report_s3_object_isSet = false;
    m_antipattern_report_s3_object_isValid = false;

    m_antipattern_report_status_isSet = false;
    m_antipattern_report_status_isValid = false;

    m_antipattern_report_status_message_isSet = false;
    m_antipattern_report_status_message_isValid = false;

    m_app_type_isSet = false;
    m_app_type_isValid = false;

    m_app_unit_error_isSet = false;
    m_app_unit_error_isValid = false;

    m_associated_server_id_isSet = false;
    m_associated_server_id_isValid = false;

    m_database_config_detail_isSet = false;
    m_database_config_detail_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inclusion_status_isSet = false;
    m_inclusion_status_isValid = false;

    m_last_analyzed_timestamp_isSet = false;
    m_last_analyzed_timestamp_isValid = false;

    m_list_antipattern_severity_summary_isSet = false;
    m_list_antipattern_severity_summary_isValid = false;

    m_more_server_association_exists_isSet = false;
    m_more_server_association_exists_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_driver_isSet = false;
    m_os_driver_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_recommendation_set_isSet = false;
    m_recommendation_set_isValid = false;

    m_resource_sub_type_isSet = false;
    m_resource_sub_type_isValid = false;

    m_result_list_isSet = false;
    m_result_list_isValid = false;

    m_runtime_status_isSet = false;
    m_runtime_status_isValid = false;

    m_runtime_status_message_isSet = false;
    m_runtime_status_message_isValid = false;

    m_source_code_repositories_isSet = false;
    m_source_code_repositories_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;
}

void OAIApplicationComponentDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationComponentDetail::fromJsonObject(QJsonObject json) {

    m_analysis_status_isValid = ::OpenAPI::fromJsonValue(m_analysis_status, json[QString("analysisStatus")]);
    m_analysis_status_isSet = !json[QString("analysisStatus")].isNull() && m_analysis_status_isValid;

    m_antipattern_report_s3_object_isValid = ::OpenAPI::fromJsonValue(m_antipattern_report_s3_object, json[QString("antipatternReportS3Object")]);
    m_antipattern_report_s3_object_isSet = !json[QString("antipatternReportS3Object")].isNull() && m_antipattern_report_s3_object_isValid;

    m_antipattern_report_status_isValid = ::OpenAPI::fromJsonValue(m_antipattern_report_status, json[QString("antipatternReportStatus")]);
    m_antipattern_report_status_isSet = !json[QString("antipatternReportStatus")].isNull() && m_antipattern_report_status_isValid;

    m_antipattern_report_status_message_isValid = ::OpenAPI::fromJsonValue(m_antipattern_report_status_message, json[QString("antipatternReportStatusMessage")]);
    m_antipattern_report_status_message_isSet = !json[QString("antipatternReportStatusMessage")].isNull() && m_antipattern_report_status_message_isValid;

    m_app_type_isValid = ::OpenAPI::fromJsonValue(m_app_type, json[QString("appType")]);
    m_app_type_isSet = !json[QString("appType")].isNull() && m_app_type_isValid;

    m_app_unit_error_isValid = ::OpenAPI::fromJsonValue(m_app_unit_error, json[QString("appUnitError")]);
    m_app_unit_error_isSet = !json[QString("appUnitError")].isNull() && m_app_unit_error_isValid;

    m_associated_server_id_isValid = ::OpenAPI::fromJsonValue(m_associated_server_id, json[QString("associatedServerId")]);
    m_associated_server_id_isSet = !json[QString("associatedServerId")].isNull() && m_associated_server_id_isValid;

    m_database_config_detail_isValid = ::OpenAPI::fromJsonValue(m_database_config_detail, json[QString("databaseConfigDetail")]);
    m_database_config_detail_isSet = !json[QString("databaseConfigDetail")].isNull() && m_database_config_detail_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inclusion_status_isValid = ::OpenAPI::fromJsonValue(m_inclusion_status, json[QString("inclusionStatus")]);
    m_inclusion_status_isSet = !json[QString("inclusionStatus")].isNull() && m_inclusion_status_isValid;

    m_last_analyzed_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_analyzed_timestamp, json[QString("lastAnalyzedTimestamp")]);
    m_last_analyzed_timestamp_isSet = !json[QString("lastAnalyzedTimestamp")].isNull() && m_last_analyzed_timestamp_isValid;

    m_list_antipattern_severity_summary_isValid = ::OpenAPI::fromJsonValue(m_list_antipattern_severity_summary, json[QString("listAntipatternSeveritySummary")]);
    m_list_antipattern_severity_summary_isSet = !json[QString("listAntipatternSeveritySummary")].isNull() && m_list_antipattern_severity_summary_isValid;

    m_more_server_association_exists_isValid = ::OpenAPI::fromJsonValue(m_more_server_association_exists, json[QString("moreServerAssociationExists")]);
    m_more_server_association_exists_isSet = !json[QString("moreServerAssociationExists")].isNull() && m_more_server_association_exists_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_driver_isValid = ::OpenAPI::fromJsonValue(m_os_driver, json[QString("osDriver")]);
    m_os_driver_isSet = !json[QString("osDriver")].isNull() && m_os_driver_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_recommendation_set_isValid = ::OpenAPI::fromJsonValue(m_recommendation_set, json[QString("recommendationSet")]);
    m_recommendation_set_isSet = !json[QString("recommendationSet")].isNull() && m_recommendation_set_isValid;

    m_resource_sub_type_isValid = ::OpenAPI::fromJsonValue(m_resource_sub_type, json[QString("resourceSubType")]);
    m_resource_sub_type_isSet = !json[QString("resourceSubType")].isNull() && m_resource_sub_type_isValid;

    m_result_list_isValid = ::OpenAPI::fromJsonValue(m_result_list, json[QString("resultList")]);
    m_result_list_isSet = !json[QString("resultList")].isNull() && m_result_list_isValid;

    m_runtime_status_isValid = ::OpenAPI::fromJsonValue(m_runtime_status, json[QString("runtimeStatus")]);
    m_runtime_status_isSet = !json[QString("runtimeStatus")].isNull() && m_runtime_status_isValid;

    m_runtime_status_message_isValid = ::OpenAPI::fromJsonValue(m_runtime_status_message, json[QString("runtimeStatusMessage")]);
    m_runtime_status_message_isSet = !json[QString("runtimeStatusMessage")].isNull() && m_runtime_status_message_isValid;

    m_source_code_repositories_isValid = ::OpenAPI::fromJsonValue(m_source_code_repositories, json[QString("sourceCodeRepositories")]);
    m_source_code_repositories_isSet = !json[QString("sourceCodeRepositories")].isNull() && m_source_code_repositories_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;
}

QString OAIApplicationComponentDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationComponentDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_status.isSet()) {
        obj.insert(QString("analysisStatus"), ::OpenAPI::toJsonValue(m_analysis_status));
    }
    if (m_antipattern_report_s3_object.isSet()) {
        obj.insert(QString("antipatternReportS3Object"), ::OpenAPI::toJsonValue(m_antipattern_report_s3_object));
    }
    if (m_antipattern_report_status.isSet()) {
        obj.insert(QString("antipatternReportStatus"), ::OpenAPI::toJsonValue(m_antipattern_report_status));
    }
    if (m_antipattern_report_status_message_isSet) {
        obj.insert(QString("antipatternReportStatusMessage"), ::OpenAPI::toJsonValue(m_antipattern_report_status_message));
    }
    if (m_app_type.isSet()) {
        obj.insert(QString("appType"), ::OpenAPI::toJsonValue(m_app_type));
    }
    if (m_app_unit_error.isSet()) {
        obj.insert(QString("appUnitError"), ::OpenAPI::toJsonValue(m_app_unit_error));
    }
    if (m_associated_server_id_isSet) {
        obj.insert(QString("associatedServerId"), ::OpenAPI::toJsonValue(m_associated_server_id));
    }
    if (m_database_config_detail.isSet()) {
        obj.insert(QString("databaseConfigDetail"), ::OpenAPI::toJsonValue(m_database_config_detail));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inclusion_status.isSet()) {
        obj.insert(QString("inclusionStatus"), ::OpenAPI::toJsonValue(m_inclusion_status));
    }
    if (m_last_analyzed_timestamp_isSet) {
        obj.insert(QString("lastAnalyzedTimestamp"), ::OpenAPI::toJsonValue(m_last_analyzed_timestamp));
    }
    if (m_list_antipattern_severity_summary.isSet()) {
        obj.insert(QString("listAntipatternSeveritySummary"), ::OpenAPI::toJsonValue(m_list_antipattern_severity_summary));
    }
    if (m_more_server_association_exists_isSet) {
        obj.insert(QString("moreServerAssociationExists"), ::OpenAPI::toJsonValue(m_more_server_association_exists));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_driver_isSet) {
        obj.insert(QString("osDriver"), ::OpenAPI::toJsonValue(m_os_driver));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_recommendation_set.isSet()) {
        obj.insert(QString("recommendationSet"), ::OpenAPI::toJsonValue(m_recommendation_set));
    }
    if (m_resource_sub_type.isSet()) {
        obj.insert(QString("resourceSubType"), ::OpenAPI::toJsonValue(m_resource_sub_type));
    }
    if (m_result_list.isSet()) {
        obj.insert(QString("resultList"), ::OpenAPI::toJsonValue(m_result_list));
    }
    if (m_runtime_status.isSet()) {
        obj.insert(QString("runtimeStatus"), ::OpenAPI::toJsonValue(m_runtime_status));
    }
    if (m_runtime_status_message_isSet) {
        obj.insert(QString("runtimeStatusMessage"), ::OpenAPI::toJsonValue(m_runtime_status_message));
    }
    if (m_source_code_repositories.isSet()) {
        obj.insert(QString("sourceCodeRepositories"), ::OpenAPI::toJsonValue(m_source_code_repositories));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    return obj;
}

OAISrcCodeOrDbAnalysisStatus OAIApplicationComponentDetail::getAnalysisStatus() const {
    return m_analysis_status;
}
void OAIApplicationComponentDetail::setAnalysisStatus(const OAISrcCodeOrDbAnalysisStatus &analysis_status) {
    m_analysis_status = analysis_status;
    m_analysis_status_isSet = true;
}

bool OAIApplicationComponentDetail::is_analysis_status_Set() const{
    return m_analysis_status_isSet;
}

bool OAIApplicationComponentDetail::is_analysis_status_Valid() const{
    return m_analysis_status_isValid;
}

OAIApplicationComponentDetail_antipatternReportS3Object OAIApplicationComponentDetail::getAntipatternReportS3Object() const {
    return m_antipattern_report_s3_object;
}
void OAIApplicationComponentDetail::setAntipatternReportS3Object(const OAIApplicationComponentDetail_antipatternReportS3Object &antipattern_report_s3_object) {
    m_antipattern_report_s3_object = antipattern_report_s3_object;
    m_antipattern_report_s3_object_isSet = true;
}

bool OAIApplicationComponentDetail::is_antipattern_report_s3_object_Set() const{
    return m_antipattern_report_s3_object_isSet;
}

bool OAIApplicationComponentDetail::is_antipattern_report_s3_object_Valid() const{
    return m_antipattern_report_s3_object_isValid;
}

OAIAntipatternReportStatus OAIApplicationComponentDetail::getAntipatternReportStatus() const {
    return m_antipattern_report_status;
}
void OAIApplicationComponentDetail::setAntipatternReportStatus(const OAIAntipatternReportStatus &antipattern_report_status) {
    m_antipattern_report_status = antipattern_report_status;
    m_antipattern_report_status_isSet = true;
}

bool OAIApplicationComponentDetail::is_antipattern_report_status_Set() const{
    return m_antipattern_report_status_isSet;
}

bool OAIApplicationComponentDetail::is_antipattern_report_status_Valid() const{
    return m_antipattern_report_status_isValid;
}

QString OAIApplicationComponentDetail::getAntipatternReportStatusMessage() const {
    return m_antipattern_report_status_message;
}
void OAIApplicationComponentDetail::setAntipatternReportStatusMessage(const QString &antipattern_report_status_message) {
    m_antipattern_report_status_message = antipattern_report_status_message;
    m_antipattern_report_status_message_isSet = true;
}

bool OAIApplicationComponentDetail::is_antipattern_report_status_message_Set() const{
    return m_antipattern_report_status_message_isSet;
}

bool OAIApplicationComponentDetail::is_antipattern_report_status_message_Valid() const{
    return m_antipattern_report_status_message_isValid;
}

OAIAppType OAIApplicationComponentDetail::getAppType() const {
    return m_app_type;
}
void OAIApplicationComponentDetail::setAppType(const OAIAppType &app_type) {
    m_app_type = app_type;
    m_app_type_isSet = true;
}

bool OAIApplicationComponentDetail::is_app_type_Set() const{
    return m_app_type_isSet;
}

bool OAIApplicationComponentDetail::is_app_type_Valid() const{
    return m_app_type_isValid;
}

OAIApplicationComponentDetail_appUnitError OAIApplicationComponentDetail::getAppUnitError() const {
    return m_app_unit_error;
}
void OAIApplicationComponentDetail::setAppUnitError(const OAIApplicationComponentDetail_appUnitError &app_unit_error) {
    m_app_unit_error = app_unit_error;
    m_app_unit_error_isSet = true;
}

bool OAIApplicationComponentDetail::is_app_unit_error_Set() const{
    return m_app_unit_error_isSet;
}

bool OAIApplicationComponentDetail::is_app_unit_error_Valid() const{
    return m_app_unit_error_isValid;
}

QString OAIApplicationComponentDetail::getAssociatedServerId() const {
    return m_associated_server_id;
}
void OAIApplicationComponentDetail::setAssociatedServerId(const QString &associated_server_id) {
    m_associated_server_id = associated_server_id;
    m_associated_server_id_isSet = true;
}

bool OAIApplicationComponentDetail::is_associated_server_id_Set() const{
    return m_associated_server_id_isSet;
}

bool OAIApplicationComponentDetail::is_associated_server_id_Valid() const{
    return m_associated_server_id_isValid;
}

OAIApplicationComponentDetail_databaseConfigDetail OAIApplicationComponentDetail::getDatabaseConfigDetail() const {
    return m_database_config_detail;
}
void OAIApplicationComponentDetail::setDatabaseConfigDetail(const OAIApplicationComponentDetail_databaseConfigDetail &database_config_detail) {
    m_database_config_detail = database_config_detail;
    m_database_config_detail_isSet = true;
}

bool OAIApplicationComponentDetail::is_database_config_detail_Set() const{
    return m_database_config_detail_isSet;
}

bool OAIApplicationComponentDetail::is_database_config_detail_Valid() const{
    return m_database_config_detail_isValid;
}

QString OAIApplicationComponentDetail::getId() const {
    return m_id;
}
void OAIApplicationComponentDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplicationComponentDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplicationComponentDetail::is_id_Valid() const{
    return m_id_isValid;
}

OAIInclusionStatus OAIApplicationComponentDetail::getInclusionStatus() const {
    return m_inclusion_status;
}
void OAIApplicationComponentDetail::setInclusionStatus(const OAIInclusionStatus &inclusion_status) {
    m_inclusion_status = inclusion_status;
    m_inclusion_status_isSet = true;
}

bool OAIApplicationComponentDetail::is_inclusion_status_Set() const{
    return m_inclusion_status_isSet;
}

bool OAIApplicationComponentDetail::is_inclusion_status_Valid() const{
    return m_inclusion_status_isValid;
}

QDateTime OAIApplicationComponentDetail::getLastAnalyzedTimestamp() const {
    return m_last_analyzed_timestamp;
}
void OAIApplicationComponentDetail::setLastAnalyzedTimestamp(const QDateTime &last_analyzed_timestamp) {
    m_last_analyzed_timestamp = last_analyzed_timestamp;
    m_last_analyzed_timestamp_isSet = true;
}

bool OAIApplicationComponentDetail::is_last_analyzed_timestamp_Set() const{
    return m_last_analyzed_timestamp_isSet;
}

bool OAIApplicationComponentDetail::is_last_analyzed_timestamp_Valid() const{
    return m_last_analyzed_timestamp_isValid;
}

QList OAIApplicationComponentDetail::getListAntipatternSeveritySummary() const {
    return m_list_antipattern_severity_summary;
}
void OAIApplicationComponentDetail::setListAntipatternSeveritySummary(const QList &list_antipattern_severity_summary) {
    m_list_antipattern_severity_summary = list_antipattern_severity_summary;
    m_list_antipattern_severity_summary_isSet = true;
}

bool OAIApplicationComponentDetail::is_list_antipattern_severity_summary_Set() const{
    return m_list_antipattern_severity_summary_isSet;
}

bool OAIApplicationComponentDetail::is_list_antipattern_severity_summary_Valid() const{
    return m_list_antipattern_severity_summary_isValid;
}

bool OAIApplicationComponentDetail::getMoreServerAssociationExists() const {
    return m_more_server_association_exists;
}
void OAIApplicationComponentDetail::setMoreServerAssociationExists(const bool &more_server_association_exists) {
    m_more_server_association_exists = more_server_association_exists;
    m_more_server_association_exists_isSet = true;
}

bool OAIApplicationComponentDetail::is_more_server_association_exists_Set() const{
    return m_more_server_association_exists_isSet;
}

bool OAIApplicationComponentDetail::is_more_server_association_exists_Valid() const{
    return m_more_server_association_exists_isValid;
}

QString OAIApplicationComponentDetail::getName() const {
    return m_name;
}
void OAIApplicationComponentDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationComponentDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationComponentDetail::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplicationComponentDetail::getOsDriver() const {
    return m_os_driver;
}
void OAIApplicationComponentDetail::setOsDriver(const QString &os_driver) {
    m_os_driver = os_driver;
    m_os_driver_isSet = true;
}

bool OAIApplicationComponentDetail::is_os_driver_Set() const{
    return m_os_driver_isSet;
}

bool OAIApplicationComponentDetail::is_os_driver_Valid() const{
    return m_os_driver_isValid;
}

QString OAIApplicationComponentDetail::getOsVersion() const {
    return m_os_version;
}
void OAIApplicationComponentDetail::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIApplicationComponentDetail::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIApplicationComponentDetail::is_os_version_Valid() const{
    return m_os_version_isValid;
}

OAIApplicationComponentDetail_recommendationSet OAIApplicationComponentDetail::getRecommendationSet() const {
    return m_recommendation_set;
}
void OAIApplicationComponentDetail::setRecommendationSet(const OAIApplicationComponentDetail_recommendationSet &recommendation_set) {
    m_recommendation_set = recommendation_set;
    m_recommendation_set_isSet = true;
}

bool OAIApplicationComponentDetail::is_recommendation_set_Set() const{
    return m_recommendation_set_isSet;
}

bool OAIApplicationComponentDetail::is_recommendation_set_Valid() const{
    return m_recommendation_set_isValid;
}

OAIResourceSubType OAIApplicationComponentDetail::getResourceSubType() const {
    return m_resource_sub_type;
}
void OAIApplicationComponentDetail::setResourceSubType(const OAIResourceSubType &resource_sub_type) {
    m_resource_sub_type = resource_sub_type;
    m_resource_sub_type_isSet = true;
}

bool OAIApplicationComponentDetail::is_resource_sub_type_Set() const{
    return m_resource_sub_type_isSet;
}

bool OAIApplicationComponentDetail::is_resource_sub_type_Valid() const{
    return m_resource_sub_type_isValid;
}

QList OAIApplicationComponentDetail::getResultList() const {
    return m_result_list;
}
void OAIApplicationComponentDetail::setResultList(const QList &result_list) {
    m_result_list = result_list;
    m_result_list_isSet = true;
}

bool OAIApplicationComponentDetail::is_result_list_Set() const{
    return m_result_list_isSet;
}

bool OAIApplicationComponentDetail::is_result_list_Valid() const{
    return m_result_list_isValid;
}

OAIRuntimeAnalysisStatus OAIApplicationComponentDetail::getRuntimeStatus() const {
    return m_runtime_status;
}
void OAIApplicationComponentDetail::setRuntimeStatus(const OAIRuntimeAnalysisStatus &runtime_status) {
    m_runtime_status = runtime_status;
    m_runtime_status_isSet = true;
}

bool OAIApplicationComponentDetail::is_runtime_status_Set() const{
    return m_runtime_status_isSet;
}

bool OAIApplicationComponentDetail::is_runtime_status_Valid() const{
    return m_runtime_status_isValid;
}

QString OAIApplicationComponentDetail::getRuntimeStatusMessage() const {
    return m_runtime_status_message;
}
void OAIApplicationComponentDetail::setRuntimeStatusMessage(const QString &runtime_status_message) {
    m_runtime_status_message = runtime_status_message;
    m_runtime_status_message_isSet = true;
}

bool OAIApplicationComponentDetail::is_runtime_status_message_Set() const{
    return m_runtime_status_message_isSet;
}

bool OAIApplicationComponentDetail::is_runtime_status_message_Valid() const{
    return m_runtime_status_message_isValid;
}

QList OAIApplicationComponentDetail::getSourceCodeRepositories() const {
    return m_source_code_repositories;
}
void OAIApplicationComponentDetail::setSourceCodeRepositories(const QList &source_code_repositories) {
    m_source_code_repositories = source_code_repositories;
    m_source_code_repositories_isSet = true;
}

bool OAIApplicationComponentDetail::is_source_code_repositories_Set() const{
    return m_source_code_repositories_isSet;
}

bool OAIApplicationComponentDetail::is_source_code_repositories_Valid() const{
    return m_source_code_repositories_isValid;
}

QString OAIApplicationComponentDetail::getStatusMessage() const {
    return m_status_message;
}
void OAIApplicationComponentDetail::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIApplicationComponentDetail::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIApplicationComponentDetail::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAIApplicationComponentDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_antipattern_report_s3_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_antipattern_report_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_antipattern_report_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_unit_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_config_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_analyzed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_antipattern_severity_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_server_association_exists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_driver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_sub_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_code_repositories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationComponentDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
