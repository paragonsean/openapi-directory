/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStrategyOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStrategyOption::OAIStrategyOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStrategyOption::OAIStrategyOption() {
    this->initializeModel();
}

OAIStrategyOption::~OAIStrategyOption() {}

void OAIStrategyOption::initializeModel() {

    m_is_preferred_isSet = false;
    m_is_preferred_isValid = false;

    m_strategy_isSet = false;
    m_strategy_isValid = false;

    m_target_destination_isSet = false;
    m_target_destination_isValid = false;

    m_tool_name_isSet = false;
    m_tool_name_isValid = false;
}

void OAIStrategyOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStrategyOption::fromJsonObject(QJsonObject json) {

    m_is_preferred_isValid = ::OpenAPI::fromJsonValue(m_is_preferred, json[QString("isPreferred")]);
    m_is_preferred_isSet = !json[QString("isPreferred")].isNull() && m_is_preferred_isValid;

    m_strategy_isValid = ::OpenAPI::fromJsonValue(m_strategy, json[QString("strategy")]);
    m_strategy_isSet = !json[QString("strategy")].isNull() && m_strategy_isValid;

    m_target_destination_isValid = ::OpenAPI::fromJsonValue(m_target_destination, json[QString("targetDestination")]);
    m_target_destination_isSet = !json[QString("targetDestination")].isNull() && m_target_destination_isValid;

    m_tool_name_isValid = ::OpenAPI::fromJsonValue(m_tool_name, json[QString("toolName")]);
    m_tool_name_isSet = !json[QString("toolName")].isNull() && m_tool_name_isValid;
}

QString OAIStrategyOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStrategyOption::asJsonObject() const {
    QJsonObject obj;
    if (m_is_preferred_isSet) {
        obj.insert(QString("isPreferred"), ::OpenAPI::toJsonValue(m_is_preferred));
    }
    if (m_strategy.isSet()) {
        obj.insert(QString("strategy"), ::OpenAPI::toJsonValue(m_strategy));
    }
    if (m_target_destination.isSet()) {
        obj.insert(QString("targetDestination"), ::OpenAPI::toJsonValue(m_target_destination));
    }
    if (m_tool_name.isSet()) {
        obj.insert(QString("toolName"), ::OpenAPI::toJsonValue(m_tool_name));
    }
    return obj;
}

bool OAIStrategyOption::getIsPreferred() const {
    return m_is_preferred;
}
void OAIStrategyOption::setIsPreferred(const bool &is_preferred) {
    m_is_preferred = is_preferred;
    m_is_preferred_isSet = true;
}

bool OAIStrategyOption::is_is_preferred_Set() const{
    return m_is_preferred_isSet;
}

bool OAIStrategyOption::is_is_preferred_Valid() const{
    return m_is_preferred_isValid;
}

OAIStrategy OAIStrategyOption::getStrategy() const {
    return m_strategy;
}
void OAIStrategyOption::setStrategy(const OAIStrategy &strategy) {
    m_strategy = strategy;
    m_strategy_isSet = true;
}

bool OAIStrategyOption::is_strategy_Set() const{
    return m_strategy_isSet;
}

bool OAIStrategyOption::is_strategy_Valid() const{
    return m_strategy_isValid;
}

OAITargetDestination OAIStrategyOption::getTargetDestination() const {
    return m_target_destination;
}
void OAIStrategyOption::setTargetDestination(const OAITargetDestination &target_destination) {
    m_target_destination = target_destination;
    m_target_destination_isSet = true;
}

bool OAIStrategyOption::is_target_destination_Set() const{
    return m_target_destination_isSet;
}

bool OAIStrategyOption::is_target_destination_Valid() const{
    return m_target_destination_isValid;
}

OAITransformationToolName OAIStrategyOption::getToolName() const {
    return m_tool_name;
}
void OAIStrategyOption::setToolName(const OAITransformationToolName &tool_name) {
    m_tool_name = tool_name;
    m_tool_name_isSet = true;
}

bool OAIStrategyOption::is_tool_name_Set() const{
    return m_tool_name_isSet;
}

bool OAIStrategyOption::is_tool_name_Valid() const{
    return m_tool_name_isValid;
}

bool OAIStrategyOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStrategyOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
