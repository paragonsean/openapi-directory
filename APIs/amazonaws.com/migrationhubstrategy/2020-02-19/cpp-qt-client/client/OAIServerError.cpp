/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerError::OAIServerError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerError::OAIServerError() {
    this->initializeModel();
}

OAIServerError::~OAIServerError() {}

void OAIServerError::initializeModel() {

    m_server_error_category_isSet = false;
    m_server_error_category_isValid = false;
}

void OAIServerError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerError::fromJsonObject(QJsonObject json) {

    m_server_error_category_isValid = ::OpenAPI::fromJsonValue(m_server_error_category, json[QString("serverErrorCategory")]);
    m_server_error_category_isSet = !json[QString("serverErrorCategory")].isNull() && m_server_error_category_isValid;
}

QString OAIServerError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerError::asJsonObject() const {
    QJsonObject obj;
    if (m_server_error_category.isSet()) {
        obj.insert(QString("serverErrorCategory"), ::OpenAPI::toJsonValue(m_server_error_category));
    }
    return obj;
}

OAIServerErrorCategory OAIServerError::getServerErrorCategory() const {
    return m_server_error_category;
}
void OAIServerError::setServerErrorCategory(const OAIServerErrorCategory &server_error_category) {
    m_server_error_category = server_error_category;
    m_server_error_category_isSet = true;
}

bool OAIServerError::is_server_error_category_Set() const{
    return m_server_error_category_isSet;
}

bool OAIServerError::is_server_error_category_Valid() const{
    return m_server_error_category_isValid;
}

bool OAIServerError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_error_category.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
