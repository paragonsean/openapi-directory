/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportFileTaskInformation.h
 *
 *  Information about the import file tasks you request. 
 */

#ifndef OAIImportFileTaskInformation_H
#define OAIImportFileTaskInformation_H

#include <QJsonObject>

#include "OAIImportFileTaskStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIImportFileTaskInformation : public OAIObject {
public:
    OAIImportFileTaskInformation();
    OAIImportFileTaskInformation(QString json);
    ~OAIImportFileTaskInformation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCompletionTime() const;
    void setCompletionTime(const QDateTime &completion_time);
    bool is_completion_time_Set() const;
    bool is_completion_time_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImportName() const;
    void setImportName(const QString &import_name);
    bool is_import_name_Set() const;
    bool is_import_name_Valid() const;

    QString getInputS3Bucket() const;
    void setInputS3Bucket(const QString &input_s3_bucket);
    bool is_input_s3_bucket_Set() const;
    bool is_input_s3_bucket_Valid() const;

    QString getInputS3Key() const;
    void setInputS3Key(const QString &input_s3_key);
    bool is_input_s3_key_Set() const;
    bool is_input_s3_key_Valid() const;

    qint32 getNumberOfRecordsFailed() const;
    void setNumberOfRecordsFailed(const qint32 &number_of_records_failed);
    bool is_number_of_records_failed_Set() const;
    bool is_number_of_records_failed_Valid() const;

    qint32 getNumberOfRecordsSuccess() const;
    void setNumberOfRecordsSuccess(const qint32 &number_of_records_success);
    bool is_number_of_records_success_Set() const;
    bool is_number_of_records_success_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    OAIImportFileTaskStatus getStatus() const;
    void setStatus(const OAIImportFileTaskStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusReportS3Bucket() const;
    void setStatusReportS3Bucket(const QString &status_report_s3_bucket);
    bool is_status_report_s3_bucket_Set() const;
    bool is_status_report_s3_bucket_Valid() const;

    QString getStatusReportS3Key() const;
    void setStatusReportS3Key(const QString &status_report_s3_key);
    bool is_status_report_s3_key_Set() const;
    bool is_status_report_s3_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_completion_time;
    bool m_completion_time_isSet;
    bool m_completion_time_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_import_name;
    bool m_import_name_isSet;
    bool m_import_name_isValid;

    QString m_input_s3_bucket;
    bool m_input_s3_bucket_isSet;
    bool m_input_s3_bucket_isValid;

    QString m_input_s3_key;
    bool m_input_s3_key_isSet;
    bool m_input_s3_key_isValid;

    qint32 m_number_of_records_failed;
    bool m_number_of_records_failed_isSet;
    bool m_number_of_records_failed_isValid;

    qint32 m_number_of_records_success;
    bool m_number_of_records_success_isSet;
    bool m_number_of_records_success_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    OAIImportFileTaskStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_report_s3_bucket;
    bool m_status_report_s3_bucket_isSet;
    bool m_status_report_s3_bucket_isValid;

    QString m_status_report_s3_key;
    bool m_status_report_s3_key_isSet;
    bool m_status_report_s3_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportFileTaskInformation)

#endif // OAIImportFileTaskInformation_H
