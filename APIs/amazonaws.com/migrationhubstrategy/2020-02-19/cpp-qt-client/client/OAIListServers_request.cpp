/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListServers_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListServers_request::OAIListServers_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListServers_request::OAIListServers_request() {
    this->initializeModel();
}

OAIListServers_request::~OAIListServers_request() {}

void OAIListServers_request::initializeModel() {

    m_filter_value_isSet = false;
    m_filter_value_isValid = false;

    m_group_id_filter_isSet = false;
    m_group_id_filter_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_server_criteria_isSet = false;
    m_server_criteria_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;
}

void OAIListServers_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListServers_request::fromJsonObject(QJsonObject json) {

    m_filter_value_isValid = ::OpenAPI::fromJsonValue(m_filter_value, json[QString("filterValue")]);
    m_filter_value_isSet = !json[QString("filterValue")].isNull() && m_filter_value_isValid;

    m_group_id_filter_isValid = ::OpenAPI::fromJsonValue(m_group_id_filter, json[QString("groupIdFilter")]);
    m_group_id_filter_isSet = !json[QString("groupIdFilter")].isNull() && m_group_id_filter_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_server_criteria_isValid = ::OpenAPI::fromJsonValue(m_server_criteria, json[QString("serverCriteria")]);
    m_server_criteria_isSet = !json[QString("serverCriteria")].isNull() && m_server_criteria_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;
}

QString OAIListServers_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListServers_request::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_value_isSet) {
        obj.insert(QString("filterValue"), ::OpenAPI::toJsonValue(m_filter_value));
    }
    if (m_group_id_filter.size() > 0) {
        obj.insert(QString("groupIdFilter"), ::OpenAPI::toJsonValue(m_group_id_filter));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_server_criteria_isSet) {
        obj.insert(QString("serverCriteria"), ::OpenAPI::toJsonValue(m_server_criteria));
    }
    if (m_sort_isSet) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    return obj;
}

QString OAIListServers_request::getFilterValue() const {
    return m_filter_value;
}
void OAIListServers_request::setFilterValue(const QString &filter_value) {
    m_filter_value = filter_value;
    m_filter_value_isSet = true;
}

bool OAIListServers_request::is_filter_value_Set() const{
    return m_filter_value_isSet;
}

bool OAIListServers_request::is_filter_value_Valid() const{
    return m_filter_value_isValid;
}

QList<OAIGroup> OAIListServers_request::getGroupIdFilter() const {
    return m_group_id_filter;
}
void OAIListServers_request::setGroupIdFilter(const QList<OAIGroup> &group_id_filter) {
    m_group_id_filter = group_id_filter;
    m_group_id_filter_isSet = true;
}

bool OAIListServers_request::is_group_id_filter_Set() const{
    return m_group_id_filter_isSet;
}

bool OAIListServers_request::is_group_id_filter_Valid() const{
    return m_group_id_filter_isValid;
}

qint32 OAIListServers_request::getMaxResults() const {
    return m_max_results;
}
void OAIListServers_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListServers_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListServers_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListServers_request::getNextToken() const {
    return m_next_token;
}
void OAIListServers_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListServers_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListServers_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIListServers_request::getServerCriteria() const {
    return m_server_criteria;
}
void OAIListServers_request::setServerCriteria(const QString &server_criteria) {
    m_server_criteria = server_criteria;
    m_server_criteria_isSet = true;
}

bool OAIListServers_request::is_server_criteria_Set() const{
    return m_server_criteria_isSet;
}

bool OAIListServers_request::is_server_criteria_Valid() const{
    return m_server_criteria_isValid;
}

QString OAIListServers_request::getSort() const {
    return m_sort;
}
void OAIListServers_request::setSort(const QString &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIListServers_request::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIListServers_request::is_sort_Valid() const{
    return m_sort_isValid;
}

bool OAIListServers_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_criteria_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListServers_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
