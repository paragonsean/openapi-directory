/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetDestination::OAITargetDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetDestination::OAITargetDestination() {
    this->initializeModel();
}

OAITargetDestination::~OAITargetDestination() {}

void OAITargetDestination::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITargetDestination::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITargetDestination::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None specified", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::NONE_SPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS Elastic BeanStalk", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::AWS_ELASTIC_BEANSTALK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS Fargate", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::AWS_FARGATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Elastic Cloud Compute (EC2)", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::AMAZON_ELASTIC_CLOUD_COMPUTE_EC2_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Elastic Container Service (ECS)", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::AMAZON_ELASTIC_CONTAINER_SERVICE_ECS_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Elastic Kubernetes Service (EKS)", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::AMAZON_ELASTIC_KUBERNETES_SERVICE_EKS_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Aurora MySQL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::AURORA_MYSQL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Aurora PostgreSQL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::AURORA_POSTGRESQL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Relational Database Service on MySQL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::AMAZON_RELATIONAL_DATABASE_SERVICE_ON_MYSQL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Relational Database Service on PostgreSQL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::AMAZON_RELATIONAL_DATABASE_SERVICE_ON_POSTGRESQL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon DocumentDB", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::AMAZON_DOCUMENTDB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon DynamoDB", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::AMAZON_DYNAMODB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Relational Database Service", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::AMAZON_RELATIONAL_DATABASE_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Babelfish for Aurora PostgreSQL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDestination::BABELFISH_FOR_AURORA_POSTGRESQL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITargetDestination::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITargetDestination::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITargetDestination::NONE_SPECIFIED:
            val = "None specified";
            break;
        case eOAITargetDestination::AWS_ELASTIC_BEANSTALK:
            val = "AWS Elastic BeanStalk";
            break;
        case eOAITargetDestination::AWS_FARGATE:
            val = "AWS Fargate";
            break;
        case eOAITargetDestination::AMAZON_ELASTIC_CLOUD_COMPUTE_EC2_:
            val = "Amazon Elastic Cloud Compute (EC2)";
            break;
        case eOAITargetDestination::AMAZON_ELASTIC_CONTAINER_SERVICE_ECS_:
            val = "Amazon Elastic Container Service (ECS)";
            break;
        case eOAITargetDestination::AMAZON_ELASTIC_KUBERNETES_SERVICE_EKS_:
            val = "Amazon Elastic Kubernetes Service (EKS)";
            break;
        case eOAITargetDestination::AURORA_MYSQL:
            val = "Aurora MySQL";
            break;
        case eOAITargetDestination::AURORA_POSTGRESQL:
            val = "Aurora PostgreSQL";
            break;
        case eOAITargetDestination::AMAZON_RELATIONAL_DATABASE_SERVICE_ON_MYSQL:
            val = "Amazon Relational Database Service on MySQL";
            break;
        case eOAITargetDestination::AMAZON_RELATIONAL_DATABASE_SERVICE_ON_POSTGRESQL:
            val = "Amazon Relational Database Service on PostgreSQL";
            break;
        case eOAITargetDestination::AMAZON_DOCUMENTDB:
            val = "Amazon DocumentDB";
            break;
        case eOAITargetDestination::AMAZON_DYNAMODB:
            val = "Amazon DynamoDB";
            break;
        case eOAITargetDestination::AMAZON_RELATIONAL_DATABASE_SERVICE:
            val = "Amazon Relational Database Service";
            break;
        case eOAITargetDestination::BABELFISH_FOR_AURORA_POSTGRESQL:
            val = "Babelfish for Aurora PostgreSQL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITargetDestination::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITargetDestination::eOAITargetDestination OAITargetDestination::getValue() const {
    return m_value;
}

void OAITargetDestination::setValue(const OAITargetDestination::eOAITargetDestination& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITargetDestination::isSet() const {
    
    return m_value_isSet;
}

bool OAITargetDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
