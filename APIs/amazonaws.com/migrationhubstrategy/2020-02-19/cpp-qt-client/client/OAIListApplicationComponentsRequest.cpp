/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListApplicationComponentsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListApplicationComponentsRequest::OAIListApplicationComponentsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListApplicationComponentsRequest::OAIListApplicationComponentsRequest() {
    this->initializeModel();
}

OAIListApplicationComponentsRequest::~OAIListApplicationComponentsRequest() {}

void OAIListApplicationComponentsRequest::initializeModel() {

    m_application_component_criteria_isSet = false;
    m_application_component_criteria_isValid = false;

    m_filter_value_isSet = false;
    m_filter_value_isValid = false;

    m_group_id_filter_isSet = false;
    m_group_id_filter_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;
}

void OAIListApplicationComponentsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListApplicationComponentsRequest::fromJsonObject(QJsonObject json) {

    m_application_component_criteria_isValid = ::OpenAPI::fromJsonValue(m_application_component_criteria, json[QString("applicationComponentCriteria")]);
    m_application_component_criteria_isSet = !json[QString("applicationComponentCriteria")].isNull() && m_application_component_criteria_isValid;

    m_filter_value_isValid = ::OpenAPI::fromJsonValue(m_filter_value, json[QString("filterValue")]);
    m_filter_value_isSet = !json[QString("filterValue")].isNull() && m_filter_value_isValid;

    m_group_id_filter_isValid = ::OpenAPI::fromJsonValue(m_group_id_filter, json[QString("groupIdFilter")]);
    m_group_id_filter_isSet = !json[QString("groupIdFilter")].isNull() && m_group_id_filter_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;
}

QString OAIListApplicationComponentsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListApplicationComponentsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_component_criteria.isSet()) {
        obj.insert(QString("applicationComponentCriteria"), ::OpenAPI::toJsonValue(m_application_component_criteria));
    }
    if (m_filter_value_isSet) {
        obj.insert(QString("filterValue"), ::OpenAPI::toJsonValue(m_filter_value));
    }
    if (m_group_id_filter.isSet()) {
        obj.insert(QString("groupIdFilter"), ::OpenAPI::toJsonValue(m_group_id_filter));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_sort.isSet()) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    return obj;
}

OAIApplicationComponentCriteria OAIListApplicationComponentsRequest::getApplicationComponentCriteria() const {
    return m_application_component_criteria;
}
void OAIListApplicationComponentsRequest::setApplicationComponentCriteria(const OAIApplicationComponentCriteria &application_component_criteria) {
    m_application_component_criteria = application_component_criteria;
    m_application_component_criteria_isSet = true;
}

bool OAIListApplicationComponentsRequest::is_application_component_criteria_Set() const{
    return m_application_component_criteria_isSet;
}

bool OAIListApplicationComponentsRequest::is_application_component_criteria_Valid() const{
    return m_application_component_criteria_isValid;
}

QString OAIListApplicationComponentsRequest::getFilterValue() const {
    return m_filter_value;
}
void OAIListApplicationComponentsRequest::setFilterValue(const QString &filter_value) {
    m_filter_value = filter_value;
    m_filter_value_isSet = true;
}

bool OAIListApplicationComponentsRequest::is_filter_value_Set() const{
    return m_filter_value_isSet;
}

bool OAIListApplicationComponentsRequest::is_filter_value_Valid() const{
    return m_filter_value_isValid;
}

QList OAIListApplicationComponentsRequest::getGroupIdFilter() const {
    return m_group_id_filter;
}
void OAIListApplicationComponentsRequest::setGroupIdFilter(const QList &group_id_filter) {
    m_group_id_filter = group_id_filter;
    m_group_id_filter_isSet = true;
}

bool OAIListApplicationComponentsRequest::is_group_id_filter_Set() const{
    return m_group_id_filter_isSet;
}

bool OAIListApplicationComponentsRequest::is_group_id_filter_Valid() const{
    return m_group_id_filter_isValid;
}

qint32 OAIListApplicationComponentsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListApplicationComponentsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListApplicationComponentsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListApplicationComponentsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListApplicationComponentsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListApplicationComponentsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListApplicationComponentsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListApplicationComponentsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAISortOrder OAIListApplicationComponentsRequest::getSort() const {
    return m_sort;
}
void OAIListApplicationComponentsRequest::setSort(const OAISortOrder &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIListApplicationComponentsRequest::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIListApplicationComponentsRequest::is_sort_Valid() const{
    return m_sort_isValid;
}

bool OAIListApplicationComponentsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_component_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListApplicationComponentsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
