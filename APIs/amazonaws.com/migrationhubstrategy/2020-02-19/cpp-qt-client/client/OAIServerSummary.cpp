/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerSummary::OAIServerSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerSummary::OAIServerSummary() {
    this->initializeModel();
}

OAIServerSummary::~OAIServerSummary() {}

void OAIServerSummary::initializeModel() {

    m_server_os_type_isSet = false;
    m_server_os_type_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;
}

void OAIServerSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerSummary::fromJsonObject(QJsonObject json) {

    m_server_os_type_isValid = ::OpenAPI::fromJsonValue(m_server_os_type, json[QString("ServerOsType")]);
    m_server_os_type_isSet = !json[QString("ServerOsType")].isNull() && m_server_os_type_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;
}

QString OAIServerSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_server_os_type.isSet()) {
        obj.insert(QString("ServerOsType"), ::OpenAPI::toJsonValue(m_server_os_type));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    return obj;
}

OAIServerOsType OAIServerSummary::getServerOsType() const {
    return m_server_os_type;
}
void OAIServerSummary::setServerOsType(const OAIServerOsType &server_os_type) {
    m_server_os_type = server_os_type;
    m_server_os_type_isSet = true;
}

bool OAIServerSummary::is_server_os_type_Set() const{
    return m_server_os_type_isSet;
}

bool OAIServerSummary::is_server_os_type_Valid() const{
    return m_server_os_type_isValid;
}

qint32 OAIServerSummary::getCount() const {
    return m_count;
}
void OAIServerSummary::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIServerSummary::is_count_Set() const{
    return m_count_isSet;
}

bool OAIServerSummary::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIServerSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_os_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
