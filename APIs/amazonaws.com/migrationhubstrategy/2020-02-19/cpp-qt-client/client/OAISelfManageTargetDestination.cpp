/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISelfManageTargetDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISelfManageTargetDestination::OAISelfManageTargetDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISelfManageTargetDestination::OAISelfManageTargetDestination() {
    this->initializeModel();
}

OAISelfManageTargetDestination::~OAISelfManageTargetDestination() {}

void OAISelfManageTargetDestination::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISelfManageTargetDestination::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISelfManageTargetDestination::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None specified", Qt::CaseInsensitive) == 0) {
        m_value = eOAISelfManageTargetDestination::NONE_SPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Elastic Cloud Compute (EC2)", Qt::CaseInsensitive) == 0) {
        m_value = eOAISelfManageTargetDestination::AMAZON_ELASTIC_CLOUD_COMPUTE_EC2_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Elastic Container Service (ECS)", Qt::CaseInsensitive) == 0) {
        m_value = eOAISelfManageTargetDestination::AMAZON_ELASTIC_CONTAINER_SERVICE_ECS_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Elastic Kubernetes Service (EKS)", Qt::CaseInsensitive) == 0) {
        m_value = eOAISelfManageTargetDestination::AMAZON_ELASTIC_KUBERNETES_SERVICE_EKS_;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISelfManageTargetDestination::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISelfManageTargetDestination::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISelfManageTargetDestination::NONE_SPECIFIED:
            val = "None specified";
            break;
        case eOAISelfManageTargetDestination::AMAZON_ELASTIC_CLOUD_COMPUTE_EC2_:
            val = "Amazon Elastic Cloud Compute (EC2)";
            break;
        case eOAISelfManageTargetDestination::AMAZON_ELASTIC_CONTAINER_SERVICE_ECS_:
            val = "Amazon Elastic Container Service (ECS)";
            break;
        case eOAISelfManageTargetDestination::AMAZON_ELASTIC_KUBERNETES_SERVICE_EKS_:
            val = "Amazon Elastic Kubernetes Service (EKS)";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISelfManageTargetDestination::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISelfManageTargetDestination::eOAISelfManageTargetDestination OAISelfManageTargetDestination::getValue() const {
    return m_value;
}

void OAISelfManageTargetDestination::setValue(const OAISelfManageTargetDestination::eOAISelfManageTargetDestination& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISelfManageTargetDestination::isSet() const {
    
    return m_value_isSet;
}

bool OAISelfManageTargetDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
