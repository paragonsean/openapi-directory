/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICollector.h
 *
 *  Process data collector that runs in the environment that you specify. 
 */

#ifndef OAICollector_H
#define OAICollector_H

#include <QJsonObject>

#include "OAICollectorHealth.h"
#include "OAICollector_configurationSummary.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICollector_configurationSummary;

class OAICollector : public OAIObject {
public:
    OAICollector();
    OAICollector(QString json);
    ~OAICollector() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICollectorHealth getCollectorHealth() const;
    void setCollectorHealth(const OAICollectorHealth &collector_health);
    bool is_collector_health_Set() const;
    bool is_collector_health_Valid() const;

    QString getCollectorId() const;
    void setCollectorId(const QString &collector_id);
    bool is_collector_id_Set() const;
    bool is_collector_id_Valid() const;

    QString getCollectorVersion() const;
    void setCollectorVersion(const QString &collector_version);
    bool is_collector_version_Set() const;
    bool is_collector_version_Valid() const;

    OAICollector_configurationSummary getConfigurationSummary() const;
    void setConfigurationSummary(const OAICollector_configurationSummary &configuration_summary);
    bool is_configuration_summary_Set() const;
    bool is_configuration_summary_Valid() const;

    QString getHostName() const;
    void setHostName(const QString &host_name);
    bool is_host_name_Set() const;
    bool is_host_name_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QString getLastActivityTimeStamp() const;
    void setLastActivityTimeStamp(const QString &last_activity_time_stamp);
    bool is_last_activity_time_stamp_Set() const;
    bool is_last_activity_time_stamp_Valid() const;

    QString getRegisteredTimeStamp() const;
    void setRegisteredTimeStamp(const QString &registered_time_stamp);
    bool is_registered_time_stamp_Set() const;
    bool is_registered_time_stamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICollectorHealth m_collector_health;
    bool m_collector_health_isSet;
    bool m_collector_health_isValid;

    QString m_collector_id;
    bool m_collector_id_isSet;
    bool m_collector_id_isValid;

    QString m_collector_version;
    bool m_collector_version_isSet;
    bool m_collector_version_isValid;

    OAICollector_configurationSummary m_configuration_summary;
    bool m_configuration_summary_isSet;
    bool m_configuration_summary_isValid;

    QString m_host_name;
    bool m_host_name_isSet;
    bool m_host_name_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QString m_last_activity_time_stamp;
    bool m_last_activity_time_stamp_isSet;
    bool m_last_activity_time_stamp_isValid;

    QString m_registered_time_stamp;
    bool m_registered_time_stamp_isSet;
    bool m_registered_time_stamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICollector)

#endif // OAICollector_H
