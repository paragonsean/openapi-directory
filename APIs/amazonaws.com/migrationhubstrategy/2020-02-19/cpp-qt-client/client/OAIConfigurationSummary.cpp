/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigurationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigurationSummary::OAIConfigurationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigurationSummary::OAIConfigurationSummary() {
    this->initializeModel();
}

OAIConfigurationSummary::~OAIConfigurationSummary() {}

void OAIConfigurationSummary::initializeModel() {

    m_ip_address_based_remote_info_list_isSet = false;
    m_ip_address_based_remote_info_list_isValid = false;

    m_pipeline_info_list_isSet = false;
    m_pipeline_info_list_isValid = false;

    m_remote_source_code_analysis_server_info_isSet = false;
    m_remote_source_code_analysis_server_info_isValid = false;

    m_vcenter_based_remote_info_list_isSet = false;
    m_vcenter_based_remote_info_list_isValid = false;

    m_version_control_info_list_isSet = false;
    m_version_control_info_list_isValid = false;
}

void OAIConfigurationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigurationSummary::fromJsonObject(QJsonObject json) {

    m_ip_address_based_remote_info_list_isValid = ::OpenAPI::fromJsonValue(m_ip_address_based_remote_info_list, json[QString("ipAddressBasedRemoteInfoList")]);
    m_ip_address_based_remote_info_list_isSet = !json[QString("ipAddressBasedRemoteInfoList")].isNull() && m_ip_address_based_remote_info_list_isValid;

    m_pipeline_info_list_isValid = ::OpenAPI::fromJsonValue(m_pipeline_info_list, json[QString("pipelineInfoList")]);
    m_pipeline_info_list_isSet = !json[QString("pipelineInfoList")].isNull() && m_pipeline_info_list_isValid;

    m_remote_source_code_analysis_server_info_isValid = ::OpenAPI::fromJsonValue(m_remote_source_code_analysis_server_info, json[QString("remoteSourceCodeAnalysisServerInfo")]);
    m_remote_source_code_analysis_server_info_isSet = !json[QString("remoteSourceCodeAnalysisServerInfo")].isNull() && m_remote_source_code_analysis_server_info_isValid;

    m_vcenter_based_remote_info_list_isValid = ::OpenAPI::fromJsonValue(m_vcenter_based_remote_info_list, json[QString("vcenterBasedRemoteInfoList")]);
    m_vcenter_based_remote_info_list_isSet = !json[QString("vcenterBasedRemoteInfoList")].isNull() && m_vcenter_based_remote_info_list_isValid;

    m_version_control_info_list_isValid = ::OpenAPI::fromJsonValue(m_version_control_info_list, json[QString("versionControlInfoList")]);
    m_version_control_info_list_isSet = !json[QString("versionControlInfoList")].isNull() && m_version_control_info_list_isValid;
}

QString OAIConfigurationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigurationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_address_based_remote_info_list.isSet()) {
        obj.insert(QString("ipAddressBasedRemoteInfoList"), ::OpenAPI::toJsonValue(m_ip_address_based_remote_info_list));
    }
    if (m_pipeline_info_list.isSet()) {
        obj.insert(QString("pipelineInfoList"), ::OpenAPI::toJsonValue(m_pipeline_info_list));
    }
    if (m_remote_source_code_analysis_server_info.isSet()) {
        obj.insert(QString("remoteSourceCodeAnalysisServerInfo"), ::OpenAPI::toJsonValue(m_remote_source_code_analysis_server_info));
    }
    if (m_vcenter_based_remote_info_list.isSet()) {
        obj.insert(QString("vcenterBasedRemoteInfoList"), ::OpenAPI::toJsonValue(m_vcenter_based_remote_info_list));
    }
    if (m_version_control_info_list.isSet()) {
        obj.insert(QString("versionControlInfoList"), ::OpenAPI::toJsonValue(m_version_control_info_list));
    }
    return obj;
}

QList OAIConfigurationSummary::getIpAddressBasedRemoteInfoList() const {
    return m_ip_address_based_remote_info_list;
}
void OAIConfigurationSummary::setIpAddressBasedRemoteInfoList(const QList &ip_address_based_remote_info_list) {
    m_ip_address_based_remote_info_list = ip_address_based_remote_info_list;
    m_ip_address_based_remote_info_list_isSet = true;
}

bool OAIConfigurationSummary::is_ip_address_based_remote_info_list_Set() const{
    return m_ip_address_based_remote_info_list_isSet;
}

bool OAIConfigurationSummary::is_ip_address_based_remote_info_list_Valid() const{
    return m_ip_address_based_remote_info_list_isValid;
}

QList OAIConfigurationSummary::getPipelineInfoList() const {
    return m_pipeline_info_list;
}
void OAIConfigurationSummary::setPipelineInfoList(const QList &pipeline_info_list) {
    m_pipeline_info_list = pipeline_info_list;
    m_pipeline_info_list_isSet = true;
}

bool OAIConfigurationSummary::is_pipeline_info_list_Set() const{
    return m_pipeline_info_list_isSet;
}

bool OAIConfigurationSummary::is_pipeline_info_list_Valid() const{
    return m_pipeline_info_list_isValid;
}

OAIConfigurationSummary_remoteSourceCodeAnalysisServerInfo OAIConfigurationSummary::getRemoteSourceCodeAnalysisServerInfo() const {
    return m_remote_source_code_analysis_server_info;
}
void OAIConfigurationSummary::setRemoteSourceCodeAnalysisServerInfo(const OAIConfigurationSummary_remoteSourceCodeAnalysisServerInfo &remote_source_code_analysis_server_info) {
    m_remote_source_code_analysis_server_info = remote_source_code_analysis_server_info;
    m_remote_source_code_analysis_server_info_isSet = true;
}

bool OAIConfigurationSummary::is_remote_source_code_analysis_server_info_Set() const{
    return m_remote_source_code_analysis_server_info_isSet;
}

bool OAIConfigurationSummary::is_remote_source_code_analysis_server_info_Valid() const{
    return m_remote_source_code_analysis_server_info_isValid;
}

QList OAIConfigurationSummary::getVcenterBasedRemoteInfoList() const {
    return m_vcenter_based_remote_info_list;
}
void OAIConfigurationSummary::setVcenterBasedRemoteInfoList(const QList &vcenter_based_remote_info_list) {
    m_vcenter_based_remote_info_list = vcenter_based_remote_info_list;
    m_vcenter_based_remote_info_list_isSet = true;
}

bool OAIConfigurationSummary::is_vcenter_based_remote_info_list_Set() const{
    return m_vcenter_based_remote_info_list_isSet;
}

bool OAIConfigurationSummary::is_vcenter_based_remote_info_list_Valid() const{
    return m_vcenter_based_remote_info_list_isValid;
}

QList OAIConfigurationSummary::getVersionControlInfoList() const {
    return m_version_control_info_list;
}
void OAIConfigurationSummary::setVersionControlInfoList(const QList &version_control_info_list) {
    m_version_control_info_list = version_control_info_list;
    m_version_control_info_list_isSet = true;
}

bool OAIConfigurationSummary::is_version_control_info_list_Set() const{
    return m_version_control_info_list_isSet;
}

bool OAIConfigurationSummary::is_version_control_info_list_Valid() const{
    return m_version_control_info_list_isValid;
}

bool OAIConfigurationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_address_based_remote_info_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_info_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_source_code_analysis_server_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_based_remote_info_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_control_info_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigurationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
