/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAssessmentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAssessmentResponse::OAIGetAssessmentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAssessmentResponse::OAIGetAssessmentResponse() {
    this->initializeModel();
}

OAIGetAssessmentResponse::~OAIGetAssessmentResponse() {}

void OAIGetAssessmentResponse::initializeModel() {

    m_assessment_targets_isSet = false;
    m_assessment_targets_isValid = false;

    m_data_collection_details_isSet = false;
    m_data_collection_details_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIGetAssessmentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAssessmentResponse::fromJsonObject(QJsonObject json) {

    m_assessment_targets_isValid = ::OpenAPI::fromJsonValue(m_assessment_targets, json[QString("assessmentTargets")]);
    m_assessment_targets_isSet = !json[QString("assessmentTargets")].isNull() && m_assessment_targets_isValid;

    m_data_collection_details_isValid = ::OpenAPI::fromJsonValue(m_data_collection_details, json[QString("dataCollectionDetails")]);
    m_data_collection_details_isSet = !json[QString("dataCollectionDetails")].isNull() && m_data_collection_details_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIGetAssessmentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAssessmentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_targets.isSet()) {
        obj.insert(QString("assessmentTargets"), ::OpenAPI::toJsonValue(m_assessment_targets));
    }
    if (m_data_collection_details.isSet()) {
        obj.insert(QString("dataCollectionDetails"), ::OpenAPI::toJsonValue(m_data_collection_details));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QList OAIGetAssessmentResponse::getAssessmentTargets() const {
    return m_assessment_targets;
}
void OAIGetAssessmentResponse::setAssessmentTargets(const QList &assessment_targets) {
    m_assessment_targets = assessment_targets;
    m_assessment_targets_isSet = true;
}

bool OAIGetAssessmentResponse::is_assessment_targets_Set() const{
    return m_assessment_targets_isSet;
}

bool OAIGetAssessmentResponse::is_assessment_targets_Valid() const{
    return m_assessment_targets_isValid;
}

OAIGetAssessmentResponse_dataCollectionDetails OAIGetAssessmentResponse::getDataCollectionDetails() const {
    return m_data_collection_details;
}
void OAIGetAssessmentResponse::setDataCollectionDetails(const OAIGetAssessmentResponse_dataCollectionDetails &data_collection_details) {
    m_data_collection_details = data_collection_details;
    m_data_collection_details_isSet = true;
}

bool OAIGetAssessmentResponse::is_data_collection_details_Set() const{
    return m_data_collection_details_isSet;
}

bool OAIGetAssessmentResponse::is_data_collection_details_Valid() const{
    return m_data_collection_details_isValid;
}

QString OAIGetAssessmentResponse::getId() const {
    return m_id;
}
void OAIGetAssessmentResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetAssessmentResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetAssessmentResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGetAssessmentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_collection_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAssessmentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
