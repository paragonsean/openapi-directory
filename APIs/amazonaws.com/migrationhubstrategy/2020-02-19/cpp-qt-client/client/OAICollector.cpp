/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollector::OAICollector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollector::OAICollector() {
    this->initializeModel();
}

OAICollector::~OAICollector() {}

void OAICollector::initializeModel() {

    m_collector_health_isSet = false;
    m_collector_health_isValid = false;

    m_collector_id_isSet = false;
    m_collector_id_isValid = false;

    m_collector_version_isSet = false;
    m_collector_version_isValid = false;

    m_configuration_summary_isSet = false;
    m_configuration_summary_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_last_activity_time_stamp_isSet = false;
    m_last_activity_time_stamp_isValid = false;

    m_registered_time_stamp_isSet = false;
    m_registered_time_stamp_isValid = false;
}

void OAICollector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollector::fromJsonObject(QJsonObject json) {

    m_collector_health_isValid = ::OpenAPI::fromJsonValue(m_collector_health, json[QString("collectorHealth")]);
    m_collector_health_isSet = !json[QString("collectorHealth")].isNull() && m_collector_health_isValid;

    m_collector_id_isValid = ::OpenAPI::fromJsonValue(m_collector_id, json[QString("collectorId")]);
    m_collector_id_isSet = !json[QString("collectorId")].isNull() && m_collector_id_isValid;

    m_collector_version_isValid = ::OpenAPI::fromJsonValue(m_collector_version, json[QString("collectorVersion")]);
    m_collector_version_isSet = !json[QString("collectorVersion")].isNull() && m_collector_version_isValid;

    m_configuration_summary_isValid = ::OpenAPI::fromJsonValue(m_configuration_summary, json[QString("configurationSummary")]);
    m_configuration_summary_isSet = !json[QString("configurationSummary")].isNull() && m_configuration_summary_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_last_activity_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_last_activity_time_stamp, json[QString("lastActivityTimeStamp")]);
    m_last_activity_time_stamp_isSet = !json[QString("lastActivityTimeStamp")].isNull() && m_last_activity_time_stamp_isValid;

    m_registered_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_registered_time_stamp, json[QString("registeredTimeStamp")]);
    m_registered_time_stamp_isSet = !json[QString("registeredTimeStamp")].isNull() && m_registered_time_stamp_isValid;
}

QString OAICollector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollector::asJsonObject() const {
    QJsonObject obj;
    if (m_collector_health.isSet()) {
        obj.insert(QString("collectorHealth"), ::OpenAPI::toJsonValue(m_collector_health));
    }
    if (m_collector_id_isSet) {
        obj.insert(QString("collectorId"), ::OpenAPI::toJsonValue(m_collector_id));
    }
    if (m_collector_version_isSet) {
        obj.insert(QString("collectorVersion"), ::OpenAPI::toJsonValue(m_collector_version));
    }
    if (m_configuration_summary.isSet()) {
        obj.insert(QString("configurationSummary"), ::OpenAPI::toJsonValue(m_configuration_summary));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_last_activity_time_stamp_isSet) {
        obj.insert(QString("lastActivityTimeStamp"), ::OpenAPI::toJsonValue(m_last_activity_time_stamp));
    }
    if (m_registered_time_stamp_isSet) {
        obj.insert(QString("registeredTimeStamp"), ::OpenAPI::toJsonValue(m_registered_time_stamp));
    }
    return obj;
}

OAICollectorHealth OAICollector::getCollectorHealth() const {
    return m_collector_health;
}
void OAICollector::setCollectorHealth(const OAICollectorHealth &collector_health) {
    m_collector_health = collector_health;
    m_collector_health_isSet = true;
}

bool OAICollector::is_collector_health_Set() const{
    return m_collector_health_isSet;
}

bool OAICollector::is_collector_health_Valid() const{
    return m_collector_health_isValid;
}

QString OAICollector::getCollectorId() const {
    return m_collector_id;
}
void OAICollector::setCollectorId(const QString &collector_id) {
    m_collector_id = collector_id;
    m_collector_id_isSet = true;
}

bool OAICollector::is_collector_id_Set() const{
    return m_collector_id_isSet;
}

bool OAICollector::is_collector_id_Valid() const{
    return m_collector_id_isValid;
}

QString OAICollector::getCollectorVersion() const {
    return m_collector_version;
}
void OAICollector::setCollectorVersion(const QString &collector_version) {
    m_collector_version = collector_version;
    m_collector_version_isSet = true;
}

bool OAICollector::is_collector_version_Set() const{
    return m_collector_version_isSet;
}

bool OAICollector::is_collector_version_Valid() const{
    return m_collector_version_isValid;
}

OAICollector_configurationSummary OAICollector::getConfigurationSummary() const {
    return m_configuration_summary;
}
void OAICollector::setConfigurationSummary(const OAICollector_configurationSummary &configuration_summary) {
    m_configuration_summary = configuration_summary;
    m_configuration_summary_isSet = true;
}

bool OAICollector::is_configuration_summary_Set() const{
    return m_configuration_summary_isSet;
}

bool OAICollector::is_configuration_summary_Valid() const{
    return m_configuration_summary_isValid;
}

QString OAICollector::getHostName() const {
    return m_host_name;
}
void OAICollector::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAICollector::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAICollector::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QString OAICollector::getIpAddress() const {
    return m_ip_address;
}
void OAICollector::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAICollector::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAICollector::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAICollector::getLastActivityTimeStamp() const {
    return m_last_activity_time_stamp;
}
void OAICollector::setLastActivityTimeStamp(const QString &last_activity_time_stamp) {
    m_last_activity_time_stamp = last_activity_time_stamp;
    m_last_activity_time_stamp_isSet = true;
}

bool OAICollector::is_last_activity_time_stamp_Set() const{
    return m_last_activity_time_stamp_isSet;
}

bool OAICollector::is_last_activity_time_stamp_Valid() const{
    return m_last_activity_time_stamp_isValid;
}

QString OAICollector::getRegisteredTimeStamp() const {
    return m_registered_time_stamp;
}
void OAICollector::setRegisteredTimeStamp(const QString &registered_time_stamp) {
    m_registered_time_stamp = registered_time_stamp;
    m_registered_time_stamp_isSet = true;
}

bool OAICollector::is_registered_time_stamp_Set() const{
    return m_registered_time_stamp_isSet;
}

bool OAICollector::is_registered_time_stamp_Valid() const{
    return m_registered_time_stamp_isValid;
}

bool OAICollector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collector_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collector_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
