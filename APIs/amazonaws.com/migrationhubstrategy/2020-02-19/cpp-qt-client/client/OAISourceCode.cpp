/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceCode::OAISourceCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceCode::OAISourceCode() {
    this->initializeModel();
}

OAISourceCode::~OAISourceCode() {}

void OAISourceCode::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;

    m_version_control_isSet = false;
    m_version_control_isValid = false;
}

void OAISourceCode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceCode::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("projectName")]);
    m_project_name_isSet = !json[QString("projectName")].isNull() && m_project_name_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("sourceVersion")]);
    m_source_version_isSet = !json[QString("sourceVersion")].isNull() && m_source_version_isValid;

    m_version_control_isValid = ::OpenAPI::fromJsonValue(m_version_control, json[QString("versionControl")]);
    m_version_control_isSet = !json[QString("versionControl")].isNull() && m_version_control_isValid;
}

QString OAISourceCode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceCode::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_project_name_isSet) {
        obj.insert(QString("projectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_source_version_isSet) {
        obj.insert(QString("sourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    if (m_version_control.isSet()) {
        obj.insert(QString("versionControl"), ::OpenAPI::toJsonValue(m_version_control));
    }
    return obj;
}

QString OAISourceCode::getLocation() const {
    return m_location;
}
void OAISourceCode::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISourceCode::is_location_Set() const{
    return m_location_isSet;
}

bool OAISourceCode::is_location_Valid() const{
    return m_location_isValid;
}

QString OAISourceCode::getProjectName() const {
    return m_project_name;
}
void OAISourceCode::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAISourceCode::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAISourceCode::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QString OAISourceCode::getSourceVersion() const {
    return m_source_version;
}
void OAISourceCode::setSourceVersion(const QString &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAISourceCode::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAISourceCode::is_source_version_Valid() const{
    return m_source_version_isValid;
}

OAIVersionControl OAISourceCode::getVersionControl() const {
    return m_version_control;
}
void OAISourceCode::setVersionControl(const OAIVersionControl &version_control) {
    m_version_control = version_control;
    m_version_control_isSet = true;
}

bool OAISourceCode::is_version_control_Set() const{
    return m_version_control_isSet;
}

bool OAISourceCode::is_version_control_Valid() const{
    return m_version_control_isValid;
}

bool OAISourceCode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_control.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
