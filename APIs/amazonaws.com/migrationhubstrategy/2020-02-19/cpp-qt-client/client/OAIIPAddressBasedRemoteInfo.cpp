/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPAddressBasedRemoteInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPAddressBasedRemoteInfo::OAIIPAddressBasedRemoteInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPAddressBasedRemoteInfo::OAIIPAddressBasedRemoteInfo() {
    this->initializeModel();
}

OAIIPAddressBasedRemoteInfo::~OAIIPAddressBasedRemoteInfo() {}

void OAIIPAddressBasedRemoteInfo::initializeModel() {

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_ip_address_configuration_time_stamp_isSet = false;
    m_ip_address_configuration_time_stamp_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;
}

void OAIIPAddressBasedRemoteInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPAddressBasedRemoteInfo::fromJsonObject(QJsonObject json) {

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_ip_address_configuration_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_ip_address_configuration_time_stamp, json[QString("ipAddressConfigurationTimeStamp")]);
    m_ip_address_configuration_time_stamp_isSet = !json[QString("ipAddressConfigurationTimeStamp")].isNull() && m_ip_address_configuration_time_stamp_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;
}

QString OAIIPAddressBasedRemoteInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPAddressBasedRemoteInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_type.isSet()) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_ip_address_configuration_time_stamp_isSet) {
        obj.insert(QString("ipAddressConfigurationTimeStamp"), ::OpenAPI::toJsonValue(m_ip_address_configuration_time_stamp));
    }
    if (m_os_type.isSet()) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    return obj;
}

OAIAuthType OAIIPAddressBasedRemoteInfo::getAuthType() const {
    return m_auth_type;
}
void OAIIPAddressBasedRemoteInfo::setAuthType(const OAIAuthType &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIIPAddressBasedRemoteInfo::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIIPAddressBasedRemoteInfo::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAIIPAddressBasedRemoteInfo::getIpAddressConfigurationTimeStamp() const {
    return m_ip_address_configuration_time_stamp;
}
void OAIIPAddressBasedRemoteInfo::setIpAddressConfigurationTimeStamp(const QString &ip_address_configuration_time_stamp) {
    m_ip_address_configuration_time_stamp = ip_address_configuration_time_stamp;
    m_ip_address_configuration_time_stamp_isSet = true;
}

bool OAIIPAddressBasedRemoteInfo::is_ip_address_configuration_time_stamp_Set() const{
    return m_ip_address_configuration_time_stamp_isSet;
}

bool OAIIPAddressBasedRemoteInfo::is_ip_address_configuration_time_stamp_Valid() const{
    return m_ip_address_configuration_time_stamp_isValid;
}

OAIOSType OAIIPAddressBasedRemoteInfo::getOsType() const {
    return m_os_type;
}
void OAIIPAddressBasedRemoteInfo::setOsType(const OAIOSType &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIIPAddressBasedRemoteInfo::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIIPAddressBasedRemoteInfo::is_os_type_Valid() const{
    return m_os_type_isValid;
}

bool OAIIPAddressBasedRemoteInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_configuration_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPAddressBasedRemoteInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
