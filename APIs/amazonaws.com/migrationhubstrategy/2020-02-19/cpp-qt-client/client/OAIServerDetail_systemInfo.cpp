/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerDetail_systemInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerDetail_systemInfo::OAIServerDetail_systemInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerDetail_systemInfo::OAIServerDetail_systemInfo() {
    this->initializeModel();
}

OAIServerDetail_systemInfo::~OAIServerDetail_systemInfo() {}

void OAIServerDetail_systemInfo::initializeModel() {

    m_cpu_architecture_isSet = false;
    m_cpu_architecture_isValid = false;

    m_file_system_type_isSet = false;
    m_file_system_type_isValid = false;

    m_network_info_list_isSet = false;
    m_network_info_list_isValid = false;

    m_os_info_isSet = false;
    m_os_info_isValid = false;
}

void OAIServerDetail_systemInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerDetail_systemInfo::fromJsonObject(QJsonObject json) {

    m_cpu_architecture_isValid = ::OpenAPI::fromJsonValue(m_cpu_architecture, json[QString("cpuArchitecture")]);
    m_cpu_architecture_isSet = !json[QString("cpuArchitecture")].isNull() && m_cpu_architecture_isValid;

    m_file_system_type_isValid = ::OpenAPI::fromJsonValue(m_file_system_type, json[QString("fileSystemType")]);
    m_file_system_type_isSet = !json[QString("fileSystemType")].isNull() && m_file_system_type_isValid;

    m_network_info_list_isValid = ::OpenAPI::fromJsonValue(m_network_info_list, json[QString("networkInfoList")]);
    m_network_info_list_isSet = !json[QString("networkInfoList")].isNull() && m_network_info_list_isValid;

    m_os_info_isValid = ::OpenAPI::fromJsonValue(m_os_info, json[QString("osInfo")]);
    m_os_info_isSet = !json[QString("osInfo")].isNull() && m_os_info_isValid;
}

QString OAIServerDetail_systemInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerDetail_systemInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_architecture_isSet) {
        obj.insert(QString("cpuArchitecture"), ::OpenAPI::toJsonValue(m_cpu_architecture));
    }
    if (m_file_system_type_isSet) {
        obj.insert(QString("fileSystemType"), ::OpenAPI::toJsonValue(m_file_system_type));
    }
    if (m_network_info_list.isSet()) {
        obj.insert(QString("networkInfoList"), ::OpenAPI::toJsonValue(m_network_info_list));
    }
    if (m_os_info.isSet()) {
        obj.insert(QString("osInfo"), ::OpenAPI::toJsonValue(m_os_info));
    }
    return obj;
}

QString OAIServerDetail_systemInfo::getCpuArchitecture() const {
    return m_cpu_architecture;
}
void OAIServerDetail_systemInfo::setCpuArchitecture(const QString &cpu_architecture) {
    m_cpu_architecture = cpu_architecture;
    m_cpu_architecture_isSet = true;
}

bool OAIServerDetail_systemInfo::is_cpu_architecture_Set() const{
    return m_cpu_architecture_isSet;
}

bool OAIServerDetail_systemInfo::is_cpu_architecture_Valid() const{
    return m_cpu_architecture_isValid;
}

QString OAIServerDetail_systemInfo::getFileSystemType() const {
    return m_file_system_type;
}
void OAIServerDetail_systemInfo::setFileSystemType(const QString &file_system_type) {
    m_file_system_type = file_system_type;
    m_file_system_type_isSet = true;
}

bool OAIServerDetail_systemInfo::is_file_system_type_Set() const{
    return m_file_system_type_isSet;
}

bool OAIServerDetail_systemInfo::is_file_system_type_Valid() const{
    return m_file_system_type_isValid;
}

QList OAIServerDetail_systemInfo::getNetworkInfoList() const {
    return m_network_info_list;
}
void OAIServerDetail_systemInfo::setNetworkInfoList(const QList &network_info_list) {
    m_network_info_list = network_info_list;
    m_network_info_list_isSet = true;
}

bool OAIServerDetail_systemInfo::is_network_info_list_Set() const{
    return m_network_info_list_isSet;
}

bool OAIServerDetail_systemInfo::is_network_info_list_Valid() const{
    return m_network_info_list_isValid;
}

OAISystemInfo_osInfo OAIServerDetail_systemInfo::getOsInfo() const {
    return m_os_info;
}
void OAIServerDetail_systemInfo::setOsInfo(const OAISystemInfo_osInfo &os_info) {
    m_os_info = os_info;
    m_os_info_isSet = true;
}

bool OAIServerDetail_systemInfo::is_os_info_Set() const{
    return m_os_info_isSet;
}

bool OAIServerDetail_systemInfo::is_os_info_Valid() const{
    return m_os_info_isValid;
}

bool OAIServerDetail_systemInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_info_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerDetail_systemInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
