/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINoManagementPreference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINoManagementPreference::OAINoManagementPreference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINoManagementPreference::OAINoManagementPreference() {
    this->initializeModel();
}

OAINoManagementPreference::~OAINoManagementPreference() {}

void OAINoManagementPreference::initializeModel() {

    m_target_destination_isSet = false;
    m_target_destination_isValid = false;
}

void OAINoManagementPreference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINoManagementPreference::fromJsonObject(QJsonObject json) {

    m_target_destination_isValid = ::OpenAPI::fromJsonValue(m_target_destination, json[QString("targetDestination")]);
    m_target_destination_isSet = !json[QString("targetDestination")].isNull() && m_target_destination_isValid;
}

QString OAINoManagementPreference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINoManagementPreference::asJsonObject() const {
    QJsonObject obj;
    if (m_target_destination.isSet()) {
        obj.insert(QString("targetDestination"), ::OpenAPI::toJsonValue(m_target_destination));
    }
    return obj;
}

QList OAINoManagementPreference::getTargetDestination() const {
    return m_target_destination;
}
void OAINoManagementPreference::setTargetDestination(const QList &target_destination) {
    m_target_destination = target_destination;
    m_target_destination_isSet = true;
}

bool OAINoManagementPreference::is_target_destination_Set() const{
    return m_target_destination_isSet;
}

bool OAINoManagementPreference::is_target_destination_Valid() const{
    return m_target_destination_isValid;
}

bool OAINoManagementPreference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINoManagementPreference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_destination_isValid && true;
}

} // namespace OpenAPI
