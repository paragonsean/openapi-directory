/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStopAssessmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStopAssessmentRequest::OAIStopAssessmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStopAssessmentRequest::OAIStopAssessmentRequest() {
    this->initializeModel();
}

OAIStopAssessmentRequest::~OAIStopAssessmentRequest() {}

void OAIStopAssessmentRequest::initializeModel() {

    m_assessment_id_isSet = false;
    m_assessment_id_isValid = false;
}

void OAIStopAssessmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStopAssessmentRequest::fromJsonObject(QJsonObject json) {

    m_assessment_id_isValid = ::OpenAPI::fromJsonValue(m_assessment_id, json[QString("assessmentId")]);
    m_assessment_id_isSet = !json[QString("assessmentId")].isNull() && m_assessment_id_isValid;
}

QString OAIStopAssessmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStopAssessmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_id_isSet) {
        obj.insert(QString("assessmentId"), ::OpenAPI::toJsonValue(m_assessment_id));
    }
    return obj;
}

QString OAIStopAssessmentRequest::getAssessmentId() const {
    return m_assessment_id;
}
void OAIStopAssessmentRequest::setAssessmentId(const QString &assessment_id) {
    m_assessment_id = assessment_id;
    m_assessment_id_isSet = true;
}

bool OAIStopAssessmentRequest::is_assessment_id_Set() const{
    return m_assessment_id_isSet;
}

bool OAIStopAssessmentRequest::is_assessment_id_Valid() const{
    return m_assessment_id_isValid;
}

bool OAIStopAssessmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStopAssessmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assessment_id_isValid && true;
}

} // namespace OpenAPI
