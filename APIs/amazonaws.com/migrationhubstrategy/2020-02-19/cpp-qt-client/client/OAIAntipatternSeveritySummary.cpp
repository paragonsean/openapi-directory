/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAntipatternSeveritySummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAntipatternSeveritySummary::OAIAntipatternSeveritySummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAntipatternSeveritySummary::OAIAntipatternSeveritySummary() {
    this->initializeModel();
}

OAIAntipatternSeveritySummary::~OAIAntipatternSeveritySummary() {}

void OAIAntipatternSeveritySummary::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAIAntipatternSeveritySummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAntipatternSeveritySummary::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAIAntipatternSeveritySummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAntipatternSeveritySummary::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

qint32 OAIAntipatternSeveritySummary::getCount() const {
    return m_count;
}
void OAIAntipatternSeveritySummary::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIAntipatternSeveritySummary::is_count_Set() const{
    return m_count_isSet;
}

bool OAIAntipatternSeveritySummary::is_count_Valid() const{
    return m_count_isValid;
}

OAISeverity OAIAntipatternSeveritySummary::getSeverity() const {
    return m_severity;
}
void OAIAntipatternSeveritySummary::setSeverity(const OAISeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIAntipatternSeveritySummary::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIAntipatternSeveritySummary::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIAntipatternSeveritySummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAntipatternSeveritySummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
