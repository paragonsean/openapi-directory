/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzerNameUnion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzerNameUnion::OAIAnalyzerNameUnion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzerNameUnion::OAIAnalyzerNameUnion() {
    this->initializeModel();
}

OAIAnalyzerNameUnion::~OAIAnalyzerNameUnion() {}

void OAIAnalyzerNameUnion::initializeModel() {

    m_binary_analyzer_name_isSet = false;
    m_binary_analyzer_name_isValid = false;

    m_run_time_analyzer_name_isSet = false;
    m_run_time_analyzer_name_isValid = false;

    m_source_code_analyzer_name_isSet = false;
    m_source_code_analyzer_name_isValid = false;
}

void OAIAnalyzerNameUnion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzerNameUnion::fromJsonObject(QJsonObject json) {

    m_binary_analyzer_name_isValid = ::OpenAPI::fromJsonValue(m_binary_analyzer_name, json[QString("binaryAnalyzerName")]);
    m_binary_analyzer_name_isSet = !json[QString("binaryAnalyzerName")].isNull() && m_binary_analyzer_name_isValid;

    m_run_time_analyzer_name_isValid = ::OpenAPI::fromJsonValue(m_run_time_analyzer_name, json[QString("runTimeAnalyzerName")]);
    m_run_time_analyzer_name_isSet = !json[QString("runTimeAnalyzerName")].isNull() && m_run_time_analyzer_name_isValid;

    m_source_code_analyzer_name_isValid = ::OpenAPI::fromJsonValue(m_source_code_analyzer_name, json[QString("sourceCodeAnalyzerName")]);
    m_source_code_analyzer_name_isSet = !json[QString("sourceCodeAnalyzerName")].isNull() && m_source_code_analyzer_name_isValid;
}

QString OAIAnalyzerNameUnion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzerNameUnion::asJsonObject() const {
    QJsonObject obj;
    if (m_binary_analyzer_name.isSet()) {
        obj.insert(QString("binaryAnalyzerName"), ::OpenAPI::toJsonValue(m_binary_analyzer_name));
    }
    if (m_run_time_analyzer_name.isSet()) {
        obj.insert(QString("runTimeAnalyzerName"), ::OpenAPI::toJsonValue(m_run_time_analyzer_name));
    }
    if (m_source_code_analyzer_name.isSet()) {
        obj.insert(QString("sourceCodeAnalyzerName"), ::OpenAPI::toJsonValue(m_source_code_analyzer_name));
    }
    return obj;
}

OAIBinaryAnalyzerName OAIAnalyzerNameUnion::getBinaryAnalyzerName() const {
    return m_binary_analyzer_name;
}
void OAIAnalyzerNameUnion::setBinaryAnalyzerName(const OAIBinaryAnalyzerName &binary_analyzer_name) {
    m_binary_analyzer_name = binary_analyzer_name;
    m_binary_analyzer_name_isSet = true;
}

bool OAIAnalyzerNameUnion::is_binary_analyzer_name_Set() const{
    return m_binary_analyzer_name_isSet;
}

bool OAIAnalyzerNameUnion::is_binary_analyzer_name_Valid() const{
    return m_binary_analyzer_name_isValid;
}

OAIRunTimeAnalyzerName OAIAnalyzerNameUnion::getRunTimeAnalyzerName() const {
    return m_run_time_analyzer_name;
}
void OAIAnalyzerNameUnion::setRunTimeAnalyzerName(const OAIRunTimeAnalyzerName &run_time_analyzer_name) {
    m_run_time_analyzer_name = run_time_analyzer_name;
    m_run_time_analyzer_name_isSet = true;
}

bool OAIAnalyzerNameUnion::is_run_time_analyzer_name_Set() const{
    return m_run_time_analyzer_name_isSet;
}

bool OAIAnalyzerNameUnion::is_run_time_analyzer_name_Valid() const{
    return m_run_time_analyzer_name_isValid;
}

OAISourceCodeAnalyzerName OAIAnalyzerNameUnion::getSourceCodeAnalyzerName() const {
    return m_source_code_analyzer_name;
}
void OAIAnalyzerNameUnion::setSourceCodeAnalyzerName(const OAISourceCodeAnalyzerName &source_code_analyzer_name) {
    m_source_code_analyzer_name = source_code_analyzer_name;
    m_source_code_analyzer_name_isSet = true;
}

bool OAIAnalyzerNameUnion::is_source_code_analyzer_name_Set() const{
    return m_source_code_analyzer_name_isSet;
}

bool OAIAnalyzerNameUnion::is_source_code_analyzer_name_Valid() const{
    return m_source_code_analyzer_name_isValid;
}

bool OAIAnalyzerNameUnion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_binary_analyzer_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_time_analyzer_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_code_analyzer_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzerNameUnion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
