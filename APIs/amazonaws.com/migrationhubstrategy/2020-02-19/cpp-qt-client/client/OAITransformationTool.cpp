/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformationTool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformationTool::OAITransformationTool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformationTool::OAITransformationTool() {
    this->initializeModel();
}

OAITransformationTool::~OAITransformationTool() {}

void OAITransformationTool::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tranformation_tool_installation_link_isSet = false;
    m_tranformation_tool_installation_link_isValid = false;
}

void OAITransformationTool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformationTool::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tranformation_tool_installation_link_isValid = ::OpenAPI::fromJsonValue(m_tranformation_tool_installation_link, json[QString("tranformationToolInstallationLink")]);
    m_tranformation_tool_installation_link_isSet = !json[QString("tranformationToolInstallationLink")].isNull() && m_tranformation_tool_installation_link_isValid;
}

QString OAITransformationTool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformationTool::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tranformation_tool_installation_link_isSet) {
        obj.insert(QString("tranformationToolInstallationLink"), ::OpenAPI::toJsonValue(m_tranformation_tool_installation_link));
    }
    return obj;
}

QString OAITransformationTool::getDescription() const {
    return m_description;
}
void OAITransformationTool::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransformationTool::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransformationTool::is_description_Valid() const{
    return m_description_isValid;
}

OAITransformationToolName OAITransformationTool::getName() const {
    return m_name;
}
void OAITransformationTool::setName(const OAITransformationToolName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITransformationTool::is_name_Set() const{
    return m_name_isSet;
}

bool OAITransformationTool::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITransformationTool::getTranformationToolInstallationLink() const {
    return m_tranformation_tool_installation_link;
}
void OAITransformationTool::setTranformationToolInstallationLink(const QString &tranformation_tool_installation_link) {
    m_tranformation_tool_installation_link = tranformation_tool_installation_link;
    m_tranformation_tool_installation_link_isSet = true;
}

bool OAITransformationTool::is_tranformation_tool_installation_link_Set() const{
    return m_tranformation_tool_installation_link_isSet;
}

bool OAITransformationTool::is_tranformation_tool_installation_link_Valid() const{
    return m_tranformation_tool_installation_link_isValid;
}

bool OAITransformationTool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tranformation_tool_installation_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformationTool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
