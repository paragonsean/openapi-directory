/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerStrategy_recommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerStrategy_recommendation::OAIServerStrategy_recommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerStrategy_recommendation::OAIServerStrategy_recommendation() {
    this->initializeModel();
}

OAIServerStrategy_recommendation::~OAIServerStrategy_recommendation() {}

void OAIServerStrategy_recommendation::initializeModel() {

    m_strategy_isSet = false;
    m_strategy_isValid = false;

    m_target_destination_isSet = false;
    m_target_destination_isValid = false;

    m_transformation_tool_isSet = false;
    m_transformation_tool_isValid = false;
}

void OAIServerStrategy_recommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerStrategy_recommendation::fromJsonObject(QJsonObject json) {

    m_strategy_isValid = ::OpenAPI::fromJsonValue(m_strategy, json[QString("strategy")]);
    m_strategy_isSet = !json[QString("strategy")].isNull() && m_strategy_isValid;

    m_target_destination_isValid = ::OpenAPI::fromJsonValue(m_target_destination, json[QString("targetDestination")]);
    m_target_destination_isSet = !json[QString("targetDestination")].isNull() && m_target_destination_isValid;

    m_transformation_tool_isValid = ::OpenAPI::fromJsonValue(m_transformation_tool, json[QString("transformationTool")]);
    m_transformation_tool_isSet = !json[QString("transformationTool")].isNull() && m_transformation_tool_isValid;
}

QString OAIServerStrategy_recommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerStrategy_recommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_strategy.isSet()) {
        obj.insert(QString("strategy"), ::OpenAPI::toJsonValue(m_strategy));
    }
    if (m_target_destination.isSet()) {
        obj.insert(QString("targetDestination"), ::OpenAPI::toJsonValue(m_target_destination));
    }
    if (m_transformation_tool.isSet()) {
        obj.insert(QString("transformationTool"), ::OpenAPI::toJsonValue(m_transformation_tool));
    }
    return obj;
}

OAIStrategy OAIServerStrategy_recommendation::getStrategy() const {
    return m_strategy;
}
void OAIServerStrategy_recommendation::setStrategy(const OAIStrategy &strategy) {
    m_strategy = strategy;
    m_strategy_isSet = true;
}

bool OAIServerStrategy_recommendation::is_strategy_Set() const{
    return m_strategy_isSet;
}

bool OAIServerStrategy_recommendation::is_strategy_Valid() const{
    return m_strategy_isValid;
}

OAITargetDestination OAIServerStrategy_recommendation::getTargetDestination() const {
    return m_target_destination;
}
void OAIServerStrategy_recommendation::setTargetDestination(const OAITargetDestination &target_destination) {
    m_target_destination = target_destination;
    m_target_destination_isSet = true;
}

bool OAIServerStrategy_recommendation::is_target_destination_Set() const{
    return m_target_destination_isSet;
}

bool OAIServerStrategy_recommendation::is_target_destination_Valid() const{
    return m_target_destination_isValid;
}

OAIRecommendationSet_transformationTool OAIServerStrategy_recommendation::getTransformationTool() const {
    return m_transformation_tool;
}
void OAIServerStrategy_recommendation::setTransformationTool(const OAIRecommendationSet_transformationTool &transformation_tool) {
    m_transformation_tool = transformation_tool;
    m_transformation_tool_isSet = true;
}

bool OAIServerStrategy_recommendation::is_transformation_tool_Set() const{
    return m_transformation_tool_isSet;
}

bool OAIServerStrategy_recommendation::is_transformation_tool_Valid() const{
    return m_transformation_tool_isValid;
}

bool OAIServerStrategy_recommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformation_tool.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerStrategy_recommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
