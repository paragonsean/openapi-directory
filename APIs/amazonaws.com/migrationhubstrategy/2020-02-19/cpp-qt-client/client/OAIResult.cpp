/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResult::OAIResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResult::OAIResult() {
    this->initializeModel();
}

OAIResult::~OAIResult() {}

void OAIResult::initializeModel() {

    m_analysis_status_isSet = false;
    m_analysis_status_isValid = false;

    m_analysis_type_isSet = false;
    m_analysis_type_isValid = false;

    m_antipattern_report_result_list_isSet = false;
    m_antipattern_report_result_list_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;
}

void OAIResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResult::fromJsonObject(QJsonObject json) {

    m_analysis_status_isValid = ::OpenAPI::fromJsonValue(m_analysis_status, json[QString("analysisStatus")]);
    m_analysis_status_isSet = !json[QString("analysisStatus")].isNull() && m_analysis_status_isValid;

    m_analysis_type_isValid = ::OpenAPI::fromJsonValue(m_analysis_type, json[QString("analysisType")]);
    m_analysis_type_isSet = !json[QString("analysisType")].isNull() && m_analysis_type_isValid;

    m_antipattern_report_result_list_isValid = ::OpenAPI::fromJsonValue(m_antipattern_report_result_list, json[QString("antipatternReportResultList")]);
    m_antipattern_report_result_list_isSet = !json[QString("antipatternReportResultList")].isNull() && m_antipattern_report_result_list_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;
}

QString OAIResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResult::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_status.isSet()) {
        obj.insert(QString("analysisStatus"), ::OpenAPI::toJsonValue(m_analysis_status));
    }
    if (m_analysis_type.isSet()) {
        obj.insert(QString("analysisType"), ::OpenAPI::toJsonValue(m_analysis_type));
    }
    if (m_antipattern_report_result_list.isSet()) {
        obj.insert(QString("antipatternReportResultList"), ::OpenAPI::toJsonValue(m_antipattern_report_result_list));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    return obj;
}

OAIResult_analysisStatus OAIResult::getAnalysisStatus() const {
    return m_analysis_status;
}
void OAIResult::setAnalysisStatus(const OAIResult_analysisStatus &analysis_status) {
    m_analysis_status = analysis_status;
    m_analysis_status_isSet = true;
}

bool OAIResult::is_analysis_status_Set() const{
    return m_analysis_status_isSet;
}

bool OAIResult::is_analysis_status_Valid() const{
    return m_analysis_status_isValid;
}

OAIAnalysisType OAIResult::getAnalysisType() const {
    return m_analysis_type;
}
void OAIResult::setAnalysisType(const OAIAnalysisType &analysis_type) {
    m_analysis_type = analysis_type;
    m_analysis_type_isSet = true;
}

bool OAIResult::is_analysis_type_Set() const{
    return m_analysis_type_isSet;
}

bool OAIResult::is_analysis_type_Valid() const{
    return m_analysis_type_isValid;
}

QList OAIResult::getAntipatternReportResultList() const {
    return m_antipattern_report_result_list;
}
void OAIResult::setAntipatternReportResultList(const QList &antipattern_report_result_list) {
    m_antipattern_report_result_list = antipattern_report_result_list;
    m_antipattern_report_result_list_isSet = true;
}

bool OAIResult::is_antipattern_report_result_list_Set() const{
    return m_antipattern_report_result_list_isSet;
}

bool OAIResult::is_antipattern_report_result_list_Valid() const{
    return m_antipattern_report_result_list_isValid;
}

QString OAIResult::getStatusMessage() const {
    return m_status_message;
}
void OAIResult::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIResult::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIResult::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAIResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_antipattern_report_result_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
