/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerDetail::OAIServerDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerDetail::OAIServerDetail() {
    this->initializeModel();
}

OAIServerDetail::~OAIServerDetail() {}

void OAIServerDetail::initializeModel() {

    m_antipattern_report_s3_object_isSet = false;
    m_antipattern_report_s3_object_isValid = false;

    m_antipattern_report_status_isSet = false;
    m_antipattern_report_status_isValid = false;

    m_antipattern_report_status_message_isSet = false;
    m_antipattern_report_status_message_isValid = false;

    m_application_component_strategy_summary_isSet = false;
    m_application_component_strategy_summary_isValid = false;

    m_data_collection_status_isSet = false;
    m_data_collection_status_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_analyzed_timestamp_isSet = false;
    m_last_analyzed_timestamp_isValid = false;

    m_list_antipattern_severity_summary_isSet = false;
    m_list_antipattern_severity_summary_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recommendation_set_isSet = false;
    m_recommendation_set_isValid = false;

    m_server_error_isSet = false;
    m_server_error_isValid = false;

    m_server_type_isSet = false;
    m_server_type_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_system_info_isSet = false;
    m_system_info_isValid = false;
}

void OAIServerDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerDetail::fromJsonObject(QJsonObject json) {

    m_antipattern_report_s3_object_isValid = ::OpenAPI::fromJsonValue(m_antipattern_report_s3_object, json[QString("antipatternReportS3Object")]);
    m_antipattern_report_s3_object_isSet = !json[QString("antipatternReportS3Object")].isNull() && m_antipattern_report_s3_object_isValid;

    m_antipattern_report_status_isValid = ::OpenAPI::fromJsonValue(m_antipattern_report_status, json[QString("antipatternReportStatus")]);
    m_antipattern_report_status_isSet = !json[QString("antipatternReportStatus")].isNull() && m_antipattern_report_status_isValid;

    m_antipattern_report_status_message_isValid = ::OpenAPI::fromJsonValue(m_antipattern_report_status_message, json[QString("antipatternReportStatusMessage")]);
    m_antipattern_report_status_message_isSet = !json[QString("antipatternReportStatusMessage")].isNull() && m_antipattern_report_status_message_isValid;

    m_application_component_strategy_summary_isValid = ::OpenAPI::fromJsonValue(m_application_component_strategy_summary, json[QString("applicationComponentStrategySummary")]);
    m_application_component_strategy_summary_isSet = !json[QString("applicationComponentStrategySummary")].isNull() && m_application_component_strategy_summary_isValid;

    m_data_collection_status_isValid = ::OpenAPI::fromJsonValue(m_data_collection_status, json[QString("dataCollectionStatus")]);
    m_data_collection_status_isSet = !json[QString("dataCollectionStatus")].isNull() && m_data_collection_status_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_analyzed_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_analyzed_timestamp, json[QString("lastAnalyzedTimestamp")]);
    m_last_analyzed_timestamp_isSet = !json[QString("lastAnalyzedTimestamp")].isNull() && m_last_analyzed_timestamp_isValid;

    m_list_antipattern_severity_summary_isValid = ::OpenAPI::fromJsonValue(m_list_antipattern_severity_summary, json[QString("listAntipatternSeveritySummary")]);
    m_list_antipattern_severity_summary_isSet = !json[QString("listAntipatternSeveritySummary")].isNull() && m_list_antipattern_severity_summary_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recommendation_set_isValid = ::OpenAPI::fromJsonValue(m_recommendation_set, json[QString("recommendationSet")]);
    m_recommendation_set_isSet = !json[QString("recommendationSet")].isNull() && m_recommendation_set_isValid;

    m_server_error_isValid = ::OpenAPI::fromJsonValue(m_server_error, json[QString("serverError")]);
    m_server_error_isSet = !json[QString("serverError")].isNull() && m_server_error_isValid;

    m_server_type_isValid = ::OpenAPI::fromJsonValue(m_server_type, json[QString("serverType")]);
    m_server_type_isSet = !json[QString("serverType")].isNull() && m_server_type_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_system_info_isValid = ::OpenAPI::fromJsonValue(m_system_info, json[QString("systemInfo")]);
    m_system_info_isSet = !json[QString("systemInfo")].isNull() && m_system_info_isValid;
}

QString OAIServerDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_antipattern_report_s3_object.isSet()) {
        obj.insert(QString("antipatternReportS3Object"), ::OpenAPI::toJsonValue(m_antipattern_report_s3_object));
    }
    if (m_antipattern_report_status.isSet()) {
        obj.insert(QString("antipatternReportStatus"), ::OpenAPI::toJsonValue(m_antipattern_report_status));
    }
    if (m_antipattern_report_status_message_isSet) {
        obj.insert(QString("antipatternReportStatusMessage"), ::OpenAPI::toJsonValue(m_antipattern_report_status_message));
    }
    if (m_application_component_strategy_summary.isSet()) {
        obj.insert(QString("applicationComponentStrategySummary"), ::OpenAPI::toJsonValue(m_application_component_strategy_summary));
    }
    if (m_data_collection_status.isSet()) {
        obj.insert(QString("dataCollectionStatus"), ::OpenAPI::toJsonValue(m_data_collection_status));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_analyzed_timestamp_isSet) {
        obj.insert(QString("lastAnalyzedTimestamp"), ::OpenAPI::toJsonValue(m_last_analyzed_timestamp));
    }
    if (m_list_antipattern_severity_summary.isSet()) {
        obj.insert(QString("listAntipatternSeveritySummary"), ::OpenAPI::toJsonValue(m_list_antipattern_severity_summary));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recommendation_set.isSet()) {
        obj.insert(QString("recommendationSet"), ::OpenAPI::toJsonValue(m_recommendation_set));
    }
    if (m_server_error.isSet()) {
        obj.insert(QString("serverError"), ::OpenAPI::toJsonValue(m_server_error));
    }
    if (m_server_type_isSet) {
        obj.insert(QString("serverType"), ::OpenAPI::toJsonValue(m_server_type));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_system_info.isSet()) {
        obj.insert(QString("systemInfo"), ::OpenAPI::toJsonValue(m_system_info));
    }
    return obj;
}

OAIServerDetail_antipatternReportS3Object OAIServerDetail::getAntipatternReportS3Object() const {
    return m_antipattern_report_s3_object;
}
void OAIServerDetail::setAntipatternReportS3Object(const OAIServerDetail_antipatternReportS3Object &antipattern_report_s3_object) {
    m_antipattern_report_s3_object = antipattern_report_s3_object;
    m_antipattern_report_s3_object_isSet = true;
}

bool OAIServerDetail::is_antipattern_report_s3_object_Set() const{
    return m_antipattern_report_s3_object_isSet;
}

bool OAIServerDetail::is_antipattern_report_s3_object_Valid() const{
    return m_antipattern_report_s3_object_isValid;
}

OAIAntipatternReportStatus OAIServerDetail::getAntipatternReportStatus() const {
    return m_antipattern_report_status;
}
void OAIServerDetail::setAntipatternReportStatus(const OAIAntipatternReportStatus &antipattern_report_status) {
    m_antipattern_report_status = antipattern_report_status;
    m_antipattern_report_status_isSet = true;
}

bool OAIServerDetail::is_antipattern_report_status_Set() const{
    return m_antipattern_report_status_isSet;
}

bool OAIServerDetail::is_antipattern_report_status_Valid() const{
    return m_antipattern_report_status_isValid;
}

QString OAIServerDetail::getAntipatternReportStatusMessage() const {
    return m_antipattern_report_status_message;
}
void OAIServerDetail::setAntipatternReportStatusMessage(const QString &antipattern_report_status_message) {
    m_antipattern_report_status_message = antipattern_report_status_message;
    m_antipattern_report_status_message_isSet = true;
}

bool OAIServerDetail::is_antipattern_report_status_message_Set() const{
    return m_antipattern_report_status_message_isSet;
}

bool OAIServerDetail::is_antipattern_report_status_message_Valid() const{
    return m_antipattern_report_status_message_isValid;
}

QList OAIServerDetail::getApplicationComponentStrategySummary() const {
    return m_application_component_strategy_summary;
}
void OAIServerDetail::setApplicationComponentStrategySummary(const QList &application_component_strategy_summary) {
    m_application_component_strategy_summary = application_component_strategy_summary;
    m_application_component_strategy_summary_isSet = true;
}

bool OAIServerDetail::is_application_component_strategy_summary_Set() const{
    return m_application_component_strategy_summary_isSet;
}

bool OAIServerDetail::is_application_component_strategy_summary_Valid() const{
    return m_application_component_strategy_summary_isValid;
}

OAIRunTimeAssessmentStatus OAIServerDetail::getDataCollectionStatus() const {
    return m_data_collection_status;
}
void OAIServerDetail::setDataCollectionStatus(const OAIRunTimeAssessmentStatus &data_collection_status) {
    m_data_collection_status = data_collection_status;
    m_data_collection_status_isSet = true;
}

bool OAIServerDetail::is_data_collection_status_Set() const{
    return m_data_collection_status_isSet;
}

bool OAIServerDetail::is_data_collection_status_Valid() const{
    return m_data_collection_status_isValid;
}

QString OAIServerDetail::getId() const {
    return m_id;
}
void OAIServerDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServerDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServerDetail::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIServerDetail::getLastAnalyzedTimestamp() const {
    return m_last_analyzed_timestamp;
}
void OAIServerDetail::setLastAnalyzedTimestamp(const QDateTime &last_analyzed_timestamp) {
    m_last_analyzed_timestamp = last_analyzed_timestamp;
    m_last_analyzed_timestamp_isSet = true;
}

bool OAIServerDetail::is_last_analyzed_timestamp_Set() const{
    return m_last_analyzed_timestamp_isSet;
}

bool OAIServerDetail::is_last_analyzed_timestamp_Valid() const{
    return m_last_analyzed_timestamp_isValid;
}

QList OAIServerDetail::getListAntipatternSeveritySummary() const {
    return m_list_antipattern_severity_summary;
}
void OAIServerDetail::setListAntipatternSeveritySummary(const QList &list_antipattern_severity_summary) {
    m_list_antipattern_severity_summary = list_antipattern_severity_summary;
    m_list_antipattern_severity_summary_isSet = true;
}

bool OAIServerDetail::is_list_antipattern_severity_summary_Set() const{
    return m_list_antipattern_severity_summary_isSet;
}

bool OAIServerDetail::is_list_antipattern_severity_summary_Valid() const{
    return m_list_antipattern_severity_summary_isValid;
}

QString OAIServerDetail::getName() const {
    return m_name;
}
void OAIServerDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServerDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServerDetail::is_name_Valid() const{
    return m_name_isValid;
}

OAIServerDetail_recommendationSet OAIServerDetail::getRecommendationSet() const {
    return m_recommendation_set;
}
void OAIServerDetail::setRecommendationSet(const OAIServerDetail_recommendationSet &recommendation_set) {
    m_recommendation_set = recommendation_set;
    m_recommendation_set_isSet = true;
}

bool OAIServerDetail::is_recommendation_set_Set() const{
    return m_recommendation_set_isSet;
}

bool OAIServerDetail::is_recommendation_set_Valid() const{
    return m_recommendation_set_isValid;
}

OAIServerDetail_serverError OAIServerDetail::getServerError() const {
    return m_server_error;
}
void OAIServerDetail::setServerError(const OAIServerDetail_serverError &server_error) {
    m_server_error = server_error;
    m_server_error_isSet = true;
}

bool OAIServerDetail::is_server_error_Set() const{
    return m_server_error_isSet;
}

bool OAIServerDetail::is_server_error_Valid() const{
    return m_server_error_isValid;
}

QString OAIServerDetail::getServerType() const {
    return m_server_type;
}
void OAIServerDetail::setServerType(const QString &server_type) {
    m_server_type = server_type;
    m_server_type_isSet = true;
}

bool OAIServerDetail::is_server_type_Set() const{
    return m_server_type_isSet;
}

bool OAIServerDetail::is_server_type_Valid() const{
    return m_server_type_isValid;
}

QString OAIServerDetail::getStatusMessage() const {
    return m_status_message;
}
void OAIServerDetail::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIServerDetail::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIServerDetail::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAIServerDetail_systemInfo OAIServerDetail::getSystemInfo() const {
    return m_system_info;
}
void OAIServerDetail::setSystemInfo(const OAIServerDetail_systemInfo &system_info) {
    m_system_info = system_info;
    m_system_info_isSet = true;
}

bool OAIServerDetail::is_system_info_Set() const{
    return m_system_info_isSet;
}

bool OAIServerDetail::is_system_info_Valid() const{
    return m_system_info_isValid;
}

bool OAIServerDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_antipattern_report_s3_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_antipattern_report_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_antipattern_report_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_component_strategy_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_collection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_analyzed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_antipattern_severity_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
