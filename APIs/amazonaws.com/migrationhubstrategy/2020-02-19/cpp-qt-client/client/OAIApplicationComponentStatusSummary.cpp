/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationComponentStatusSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationComponentStatusSummary::OAIApplicationComponentStatusSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationComponentStatusSummary::OAIApplicationComponentStatusSummary() {
    this->initializeModel();
}

OAIApplicationComponentStatusSummary::~OAIApplicationComponentStatusSummary() {}

void OAIApplicationComponentStatusSummary::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_src_code_or_db_analysis_status_isSet = false;
    m_src_code_or_db_analysis_status_isValid = false;
}

void OAIApplicationComponentStatusSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationComponentStatusSummary::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_src_code_or_db_analysis_status_isValid = ::OpenAPI::fromJsonValue(m_src_code_or_db_analysis_status, json[QString("srcCodeOrDbAnalysisStatus")]);
    m_src_code_or_db_analysis_status_isSet = !json[QString("srcCodeOrDbAnalysisStatus")].isNull() && m_src_code_or_db_analysis_status_isValid;
}

QString OAIApplicationComponentStatusSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationComponentStatusSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_src_code_or_db_analysis_status.isSet()) {
        obj.insert(QString("srcCodeOrDbAnalysisStatus"), ::OpenAPI::toJsonValue(m_src_code_or_db_analysis_status));
    }
    return obj;
}

qint32 OAIApplicationComponentStatusSummary::getCount() const {
    return m_count;
}
void OAIApplicationComponentStatusSummary::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIApplicationComponentStatusSummary::is_count_Set() const{
    return m_count_isSet;
}

bool OAIApplicationComponentStatusSummary::is_count_Valid() const{
    return m_count_isValid;
}

OAISrcCodeOrDbAnalysisStatus OAIApplicationComponentStatusSummary::getSrcCodeOrDbAnalysisStatus() const {
    return m_src_code_or_db_analysis_status;
}
void OAIApplicationComponentStatusSummary::setSrcCodeOrDbAnalysisStatus(const OAISrcCodeOrDbAnalysisStatus &src_code_or_db_analysis_status) {
    m_src_code_or_db_analysis_status = src_code_or_db_analysis_status;
    m_src_code_or_db_analysis_status_isSet = true;
}

bool OAIApplicationComponentStatusSummary::is_src_code_or_db_analysis_status_Set() const{
    return m_src_code_or_db_analysis_status_isSet;
}

bool OAIApplicationComponentStatusSummary::is_src_code_or_db_analysis_status_Valid() const{
    return m_src_code_or_db_analysis_status_isValid;
}

bool OAIApplicationComponentStatusSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_code_or_db_analysis_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationComponentStatusSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
