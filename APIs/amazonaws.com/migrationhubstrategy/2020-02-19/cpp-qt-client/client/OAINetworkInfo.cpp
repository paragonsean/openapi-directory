/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkInfo::OAINetworkInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkInfo::OAINetworkInfo() {
    this->initializeModel();
}

OAINetworkInfo::~OAINetworkInfo() {}

void OAINetworkInfo::initializeModel() {

    m_interface_name_isSet = false;
    m_interface_name_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_net_mask_isSet = false;
    m_net_mask_isValid = false;
}

void OAINetworkInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkInfo::fromJsonObject(QJsonObject json) {

    m_interface_name_isValid = ::OpenAPI::fromJsonValue(m_interface_name, json[QString("interfaceName")]);
    m_interface_name_isSet = !json[QString("interfaceName")].isNull() && m_interface_name_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("macAddress")]);
    m_mac_address_isSet = !json[QString("macAddress")].isNull() && m_mac_address_isValid;

    m_net_mask_isValid = ::OpenAPI::fromJsonValue(m_net_mask, json[QString("netMask")]);
    m_net_mask_isSet = !json[QString("netMask")].isNull() && m_net_mask_isValid;
}

QString OAINetworkInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_interface_name_isSet) {
        obj.insert(QString("interfaceName"), ::OpenAPI::toJsonValue(m_interface_name));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("macAddress"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_net_mask_isSet) {
        obj.insert(QString("netMask"), ::OpenAPI::toJsonValue(m_net_mask));
    }
    return obj;
}

QString OAINetworkInfo::getInterfaceName() const {
    return m_interface_name;
}
void OAINetworkInfo::setInterfaceName(const QString &interface_name) {
    m_interface_name = interface_name;
    m_interface_name_isSet = true;
}

bool OAINetworkInfo::is_interface_name_Set() const{
    return m_interface_name_isSet;
}

bool OAINetworkInfo::is_interface_name_Valid() const{
    return m_interface_name_isValid;
}

QString OAINetworkInfo::getIpAddress() const {
    return m_ip_address;
}
void OAINetworkInfo::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAINetworkInfo::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAINetworkInfo::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAINetworkInfo::getMacAddress() const {
    return m_mac_address;
}
void OAINetworkInfo::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAINetworkInfo::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAINetworkInfo::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

QString OAINetworkInfo::getNetMask() const {
    return m_net_mask;
}
void OAINetworkInfo::setNetMask(const QString &net_mask) {
    m_net_mask = net_mask;
    m_net_mask_isSet = true;
}

bool OAINetworkInfo::is_net_mask_Set() const{
    return m_net_mask_isSet;
}

bool OAINetworkInfo::is_net_mask_Valid() const{
    return m_net_mask_isValid;
}

bool OAINetworkInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interface_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interface_name_isValid && m_ip_address_isValid && m_mac_address_isValid && m_net_mask_isValid && true;
}

} // namespace OpenAPI
