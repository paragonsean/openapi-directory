/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabasePreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabasePreferences::OAIDatabasePreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabasePreferences::OAIDatabasePreferences() {
    this->initializeModel();
}

OAIDatabasePreferences::~OAIDatabasePreferences() {}

void OAIDatabasePreferences::initializeModel() {

    m_database_management_preference_isSet = false;
    m_database_management_preference_isValid = false;

    m_database_migration_preference_isSet = false;
    m_database_migration_preference_isValid = false;
}

void OAIDatabasePreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabasePreferences::fromJsonObject(QJsonObject json) {

    m_database_management_preference_isValid = ::OpenAPI::fromJsonValue(m_database_management_preference, json[QString("databaseManagementPreference")]);
    m_database_management_preference_isSet = !json[QString("databaseManagementPreference")].isNull() && m_database_management_preference_isValid;

    m_database_migration_preference_isValid = ::OpenAPI::fromJsonValue(m_database_migration_preference, json[QString("databaseMigrationPreference")]);
    m_database_migration_preference_isSet = !json[QString("databaseMigrationPreference")].isNull() && m_database_migration_preference_isValid;
}

QString OAIDatabasePreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabasePreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_database_management_preference.isSet()) {
        obj.insert(QString("databaseManagementPreference"), ::OpenAPI::toJsonValue(m_database_management_preference));
    }
    if (m_database_migration_preference.isSet()) {
        obj.insert(QString("databaseMigrationPreference"), ::OpenAPI::toJsonValue(m_database_migration_preference));
    }
    return obj;
}

OAIDatabaseManagementPreference OAIDatabasePreferences::getDatabaseManagementPreference() const {
    return m_database_management_preference;
}
void OAIDatabasePreferences::setDatabaseManagementPreference(const OAIDatabaseManagementPreference &database_management_preference) {
    m_database_management_preference = database_management_preference;
    m_database_management_preference_isSet = true;
}

bool OAIDatabasePreferences::is_database_management_preference_Set() const{
    return m_database_management_preference_isSet;
}

bool OAIDatabasePreferences::is_database_management_preference_Valid() const{
    return m_database_management_preference_isValid;
}

OAIPutPortfolioPreferences_request_databasePreferences_databaseMigrationPreference OAIDatabasePreferences::getDatabaseMigrationPreference() const {
    return m_database_migration_preference;
}
void OAIDatabasePreferences::setDatabaseMigrationPreference(const OAIPutPortfolioPreferences_request_databasePreferences_databaseMigrationPreference &database_migration_preference) {
    m_database_migration_preference = database_migration_preference;
    m_database_migration_preference_isSet = true;
}

bool OAIDatabasePreferences::is_database_migration_preference_Set() const{
    return m_database_migration_preference_isSet;
}

bool OAIDatabasePreferences::is_database_migration_preference_Valid() const{
    return m_database_migration_preference_isValid;
}

bool OAIDatabasePreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_management_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_migration_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabasePreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
