/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessmentTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessmentTarget::OAIAssessmentTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessmentTarget::OAIAssessmentTarget() {
    this->initializeModel();
}

OAIAssessmentTarget::~OAIAssessmentTarget() {}

void OAIAssessmentTarget::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIAssessmentTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessmentTarget::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIAssessmentTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessmentTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

OAICondition OAIAssessmentTarget::getCondition() const {
    return m_condition;
}
void OAIAssessmentTarget::setCondition(const OAICondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIAssessmentTarget::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIAssessmentTarget::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIAssessmentTarget::getName() const {
    return m_name;
}
void OAIAssessmentTarget::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssessmentTarget::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssessmentTarget::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIAssessmentTarget::getValues() const {
    return m_values;
}
void OAIAssessmentTarget::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIAssessmentTarget::is_values_Set() const{
    return m_values_isSet;
}

bool OAIAssessmentTarget::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIAssessmentTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessmentTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_condition_isValid && m_name_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
