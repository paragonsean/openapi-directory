/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINoPreferenceTargetDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINoPreferenceTargetDestination::OAINoPreferenceTargetDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINoPreferenceTargetDestination::OAINoPreferenceTargetDestination() {
    this->initializeModel();
}

OAINoPreferenceTargetDestination::~OAINoPreferenceTargetDestination() {}

void OAINoPreferenceTargetDestination::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINoPreferenceTargetDestination::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINoPreferenceTargetDestination::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None specified", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoPreferenceTargetDestination::NONE_SPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS Elastic BeanStalk", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoPreferenceTargetDestination::AWS_ELASTIC_BEANSTALK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS Fargate", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoPreferenceTargetDestination::AWS_FARGATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Elastic Cloud Compute (EC2)", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoPreferenceTargetDestination::AMAZON_ELASTIC_CLOUD_COMPUTE_EC2_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Elastic Container Service (ECS)", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoPreferenceTargetDestination::AMAZON_ELASTIC_CONTAINER_SERVICE_ECS_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Elastic Kubernetes Service (EKS)", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoPreferenceTargetDestination::AMAZON_ELASTIC_KUBERNETES_SERVICE_EKS_;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINoPreferenceTargetDestination::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINoPreferenceTargetDestination::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINoPreferenceTargetDestination::NONE_SPECIFIED:
            val = "None specified";
            break;
        case eOAINoPreferenceTargetDestination::AWS_ELASTIC_BEANSTALK:
            val = "AWS Elastic BeanStalk";
            break;
        case eOAINoPreferenceTargetDestination::AWS_FARGATE:
            val = "AWS Fargate";
            break;
        case eOAINoPreferenceTargetDestination::AMAZON_ELASTIC_CLOUD_COMPUTE_EC2_:
            val = "Amazon Elastic Cloud Compute (EC2)";
            break;
        case eOAINoPreferenceTargetDestination::AMAZON_ELASTIC_CONTAINER_SERVICE_ECS_:
            val = "Amazon Elastic Container Service (ECS)";
            break;
        case eOAINoPreferenceTargetDestination::AMAZON_ELASTIC_KUBERNETES_SERVICE_EKS_:
            val = "Amazon Elastic Kubernetes Service (EKS)";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINoPreferenceTargetDestination::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINoPreferenceTargetDestination::eOAINoPreferenceTargetDestination OAINoPreferenceTargetDestination::getValue() const {
    return m_value;
}

void OAINoPreferenceTargetDestination::setValue(const OAINoPreferenceTargetDestination::eOAINoPreferenceTargetDestination& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINoPreferenceTargetDestination::isSet() const {
    
    return m_value_isSet;
}

bool OAINoPreferenceTargetDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
