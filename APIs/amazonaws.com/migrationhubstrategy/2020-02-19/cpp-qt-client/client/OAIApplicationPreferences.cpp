/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationPreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationPreferences::OAIApplicationPreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationPreferences::OAIApplicationPreferences() {
    this->initializeModel();
}

OAIApplicationPreferences::~OAIApplicationPreferences() {}

void OAIApplicationPreferences::initializeModel() {

    m_management_preference_isSet = false;
    m_management_preference_isValid = false;
}

void OAIApplicationPreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationPreferences::fromJsonObject(QJsonObject json) {

    m_management_preference_isValid = ::OpenAPI::fromJsonValue(m_management_preference, json[QString("managementPreference")]);
    m_management_preference_isSet = !json[QString("managementPreference")].isNull() && m_management_preference_isValid;
}

QString OAIApplicationPreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationPreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_management_preference.isSet()) {
        obj.insert(QString("managementPreference"), ::OpenAPI::toJsonValue(m_management_preference));
    }
    return obj;
}

OAIPutPortfolioPreferences_request_applicationPreferences_managementPreference OAIApplicationPreferences::getManagementPreference() const {
    return m_management_preference;
}
void OAIApplicationPreferences::setManagementPreference(const OAIPutPortfolioPreferences_request_applicationPreferences_managementPreference &management_preference) {
    m_management_preference = management_preference;
    m_management_preference_isSet = true;
}

bool OAIApplicationPreferences::is_management_preference_Set() const{
    return m_management_preference_isSet;
}

bool OAIApplicationPreferences::is_management_preference_Valid() const{
    return m_management_preference_isValid;
}

bool OAIApplicationPreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_management_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationPreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
