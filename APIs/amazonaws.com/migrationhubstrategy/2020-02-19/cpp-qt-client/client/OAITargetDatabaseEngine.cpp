/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetDatabaseEngine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetDatabaseEngine::OAITargetDatabaseEngine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetDatabaseEngine::OAITargetDatabaseEngine() {
    this->initializeModel();
}

OAITargetDatabaseEngine::~OAITargetDatabaseEngine() {}

void OAITargetDatabaseEngine::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITargetDatabaseEngine::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITargetDatabaseEngine::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None specified", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDatabaseEngine::NONE_SPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amazon Aurora", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDatabaseEngine::AMAZON_AURORA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS PostgreSQL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDatabaseEngine::AWS_POSTGRESQL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MySQL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDatabaseEngine::MYSQL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Microsoft SQL Server", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDatabaseEngine::MICROSOFT_SQL_SERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Oracle Database", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDatabaseEngine::ORACLE_DATABASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MariaDB", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDatabaseEngine::MARIADB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SAP", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDatabaseEngine::SAP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Db2 LUW", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDatabaseEngine::DB2_LUW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MongoDB", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDatabaseEngine::MONGODB;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITargetDatabaseEngine::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITargetDatabaseEngine::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITargetDatabaseEngine::NONE_SPECIFIED:
            val = "None specified";
            break;
        case eOAITargetDatabaseEngine::AMAZON_AURORA:
            val = "Amazon Aurora";
            break;
        case eOAITargetDatabaseEngine::AWS_POSTGRESQL:
            val = "AWS PostgreSQL";
            break;
        case eOAITargetDatabaseEngine::MYSQL:
            val = "MySQL";
            break;
        case eOAITargetDatabaseEngine::MICROSOFT_SQL_SERVER:
            val = "Microsoft SQL Server";
            break;
        case eOAITargetDatabaseEngine::ORACLE_DATABASE:
            val = "Oracle Database";
            break;
        case eOAITargetDatabaseEngine::MARIADB:
            val = "MariaDB";
            break;
        case eOAITargetDatabaseEngine::SAP:
            val = "SAP";
            break;
        case eOAITargetDatabaseEngine::DB2_LUW:
            val = "Db2 LUW";
            break;
        case eOAITargetDatabaseEngine::MONGODB:
            val = "MongoDB";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITargetDatabaseEngine::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITargetDatabaseEngine::eOAITargetDatabaseEngine OAITargetDatabaseEngine::getValue() const {
    return m_value;
}

void OAITargetDatabaseEngine::setValue(const OAITargetDatabaseEngine::eOAITargetDatabaseEngine& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITargetDatabaseEngine::isSet() const {
    
    return m_value_isSet;
}

bool OAITargetDatabaseEngine::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
