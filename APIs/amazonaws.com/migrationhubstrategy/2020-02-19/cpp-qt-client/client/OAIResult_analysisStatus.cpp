/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResult_analysisStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResult_analysisStatus::OAIResult_analysisStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResult_analysisStatus::OAIResult_analysisStatus() {
    this->initializeModel();
}

OAIResult_analysisStatus::~OAIResult_analysisStatus() {}

void OAIResult_analysisStatus::initializeModel() {

    m_runtime_analysis_status_isSet = false;
    m_runtime_analysis_status_isValid = false;

    m_src_code_or_db_analysis_status_isSet = false;
    m_src_code_or_db_analysis_status_isValid = false;
}

void OAIResult_analysisStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResult_analysisStatus::fromJsonObject(QJsonObject json) {

    m_runtime_analysis_status_isValid = ::OpenAPI::fromJsonValue(m_runtime_analysis_status, json[QString("runtimeAnalysisStatus")]);
    m_runtime_analysis_status_isSet = !json[QString("runtimeAnalysisStatus")].isNull() && m_runtime_analysis_status_isValid;

    m_src_code_or_db_analysis_status_isValid = ::OpenAPI::fromJsonValue(m_src_code_or_db_analysis_status, json[QString("srcCodeOrDbAnalysisStatus")]);
    m_src_code_or_db_analysis_status_isSet = !json[QString("srcCodeOrDbAnalysisStatus")].isNull() && m_src_code_or_db_analysis_status_isValid;
}

QString OAIResult_analysisStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResult_analysisStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_runtime_analysis_status.isSet()) {
        obj.insert(QString("runtimeAnalysisStatus"), ::OpenAPI::toJsonValue(m_runtime_analysis_status));
    }
    if (m_src_code_or_db_analysis_status.isSet()) {
        obj.insert(QString("srcCodeOrDbAnalysisStatus"), ::OpenAPI::toJsonValue(m_src_code_or_db_analysis_status));
    }
    return obj;
}

OAIRuntimeAnalysisStatus OAIResult_analysisStatus::getRuntimeAnalysisStatus() const {
    return m_runtime_analysis_status;
}
void OAIResult_analysisStatus::setRuntimeAnalysisStatus(const OAIRuntimeAnalysisStatus &runtime_analysis_status) {
    m_runtime_analysis_status = runtime_analysis_status;
    m_runtime_analysis_status_isSet = true;
}

bool OAIResult_analysisStatus::is_runtime_analysis_status_Set() const{
    return m_runtime_analysis_status_isSet;
}

bool OAIResult_analysisStatus::is_runtime_analysis_status_Valid() const{
    return m_runtime_analysis_status_isValid;
}

OAISrcCodeOrDbAnalysisStatus OAIResult_analysisStatus::getSrcCodeOrDbAnalysisStatus() const {
    return m_src_code_or_db_analysis_status;
}
void OAIResult_analysisStatus::setSrcCodeOrDbAnalysisStatus(const OAISrcCodeOrDbAnalysisStatus &src_code_or_db_analysis_status) {
    m_src_code_or_db_analysis_status = src_code_or_db_analysis_status;
    m_src_code_or_db_analysis_status_isSet = true;
}

bool OAIResult_analysisStatus::is_src_code_or_db_analysis_status_Set() const{
    return m_src_code_or_db_analysis_status_isSet;
}

bool OAIResult_analysisStatus::is_src_code_or_db_analysis_status_Valid() const{
    return m_src_code_or_db_analysis_status_isValid;
}

bool OAIResult_analysisStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_runtime_analysis_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_code_or_db_analysis_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResult_analysisStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
