/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformationToolName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformationToolName::OAITransformationToolName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformationToolName::OAITransformationToolName() {
    this->initializeModel();
}

OAITransformationToolName::~OAITransformationToolName() {}

void OAITransformationToolName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITransformationToolName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITransformationToolName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("App2Container", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformationToolName::APP2CONTAINER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Porting Assistant For .NET", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformationToolName::PORTING_ASSISTANT_FOR_NET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("End of Support Migration", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformationToolName::END_OF_SUPPORT_MIGRATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Windows Web Application Migration Assistant", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformationToolName::WINDOWS_WEB_APPLICATION_MIGRATION_ASSISTANT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Application Migration Service", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformationToolName::APPLICATION_MIGRATION_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Strategy Recommendation Support", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformationToolName::STRATEGY_RECOMMENDATION_SUPPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("In Place Operating System Upgrade", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformationToolName::IN_PLACE_OPERATING_SYSTEM_UPGRADE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Schema Conversion Tool", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformationToolName::SCHEMA_CONVERSION_TOOL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Database Migration Service", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformationToolName::DATABASE_MIGRATION_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Native SQL Server Backup/Restore", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformationToolName::NATIVE_SQL_SERVER_BACKUP_RESTORE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITransformationToolName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITransformationToolName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITransformationToolName::APP2CONTAINER:
            val = "App2Container";
            break;
        case eOAITransformationToolName::PORTING_ASSISTANT_FOR_NET:
            val = "Porting Assistant For .NET";
            break;
        case eOAITransformationToolName::END_OF_SUPPORT_MIGRATION:
            val = "End of Support Migration";
            break;
        case eOAITransformationToolName::WINDOWS_WEB_APPLICATION_MIGRATION_ASSISTANT:
            val = "Windows Web Application Migration Assistant";
            break;
        case eOAITransformationToolName::APPLICATION_MIGRATION_SERVICE:
            val = "Application Migration Service";
            break;
        case eOAITransformationToolName::STRATEGY_RECOMMENDATION_SUPPORT:
            val = "Strategy Recommendation Support";
            break;
        case eOAITransformationToolName::IN_PLACE_OPERATING_SYSTEM_UPGRADE:
            val = "In Place Operating System Upgrade";
            break;
        case eOAITransformationToolName::SCHEMA_CONVERSION_TOOL:
            val = "Schema Conversion Tool";
            break;
        case eOAITransformationToolName::DATABASE_MIGRATION_SERVICE:
            val = "Database Migration Service";
            break;
        case eOAITransformationToolName::NATIVE_SQL_SERVER_BACKUP_RESTORE:
            val = "Native SQL Server Backup/Restore";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITransformationToolName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITransformationToolName::eOAITransformationToolName OAITransformationToolName::getValue() const {
    return m_value;
}

void OAITransformationToolName::setValue(const OAITransformationToolName::eOAITransformationToolName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITransformationToolName::isSet() const {
    
    return m_value_isSet;
}

bool OAITransformationToolName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
