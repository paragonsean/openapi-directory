/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerDetail_serverError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerDetail_serverError::OAIServerDetail_serverError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerDetail_serverError::OAIServerDetail_serverError() {
    this->initializeModel();
}

OAIServerDetail_serverError::~OAIServerDetail_serverError() {}

void OAIServerDetail_serverError::initializeModel() {

    m_server_error_category_isSet = false;
    m_server_error_category_isValid = false;
}

void OAIServerDetail_serverError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerDetail_serverError::fromJsonObject(QJsonObject json) {

    m_server_error_category_isValid = ::OpenAPI::fromJsonValue(m_server_error_category, json[QString("serverErrorCategory")]);
    m_server_error_category_isSet = !json[QString("serverErrorCategory")].isNull() && m_server_error_category_isValid;
}

QString OAIServerDetail_serverError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerDetail_serverError::asJsonObject() const {
    QJsonObject obj;
    if (m_server_error_category.isSet()) {
        obj.insert(QString("serverErrorCategory"), ::OpenAPI::toJsonValue(m_server_error_category));
    }
    return obj;
}

OAIServerErrorCategory OAIServerDetail_serverError::getServerErrorCategory() const {
    return m_server_error_category;
}
void OAIServerDetail_serverError::setServerErrorCategory(const OAIServerErrorCategory &server_error_category) {
    m_server_error_category = server_error_category;
    m_server_error_category_isSet = true;
}

bool OAIServerDetail_serverError::is_server_error_category_Set() const{
    return m_server_error_category_isSet;
}

bool OAIServerDetail_serverError::is_server_error_category_Valid() const{
    return m_server_error_category_isValid;
}

bool OAIServerDetail_serverError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_error_category.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerDetail_serverError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
