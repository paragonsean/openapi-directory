/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartAssessment_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartAssessment_request::OAIStartAssessment_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartAssessment_request::OAIStartAssessment_request() {
    this->initializeModel();
}

OAIStartAssessment_request::~OAIStartAssessment_request() {}

void OAIStartAssessment_request::initializeModel() {

    m_assessment_targets_isSet = false;
    m_assessment_targets_isValid = false;

    m_s3bucket_for_analysis_data_isSet = false;
    m_s3bucket_for_analysis_data_isValid = false;

    m_s3bucket_for_report_data_isSet = false;
    m_s3bucket_for_report_data_isValid = false;
}

void OAIStartAssessment_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartAssessment_request::fromJsonObject(QJsonObject json) {

    m_assessment_targets_isValid = ::OpenAPI::fromJsonValue(m_assessment_targets, json[QString("assessmentTargets")]);
    m_assessment_targets_isSet = !json[QString("assessmentTargets")].isNull() && m_assessment_targets_isValid;

    m_s3bucket_for_analysis_data_isValid = ::OpenAPI::fromJsonValue(m_s3bucket_for_analysis_data, json[QString("s3bucketForAnalysisData")]);
    m_s3bucket_for_analysis_data_isSet = !json[QString("s3bucketForAnalysisData")].isNull() && m_s3bucket_for_analysis_data_isValid;

    m_s3bucket_for_report_data_isValid = ::OpenAPI::fromJsonValue(m_s3bucket_for_report_data, json[QString("s3bucketForReportData")]);
    m_s3bucket_for_report_data_isSet = !json[QString("s3bucketForReportData")].isNull() && m_s3bucket_for_report_data_isValid;
}

QString OAIStartAssessment_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartAssessment_request::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_targets.size() > 0) {
        obj.insert(QString("assessmentTargets"), ::OpenAPI::toJsonValue(m_assessment_targets));
    }
    if (m_s3bucket_for_analysis_data_isSet) {
        obj.insert(QString("s3bucketForAnalysisData"), ::OpenAPI::toJsonValue(m_s3bucket_for_analysis_data));
    }
    if (m_s3bucket_for_report_data_isSet) {
        obj.insert(QString("s3bucketForReportData"), ::OpenAPI::toJsonValue(m_s3bucket_for_report_data));
    }
    return obj;
}

QList<OAIAssessmentTarget> OAIStartAssessment_request::getAssessmentTargets() const {
    return m_assessment_targets;
}
void OAIStartAssessment_request::setAssessmentTargets(const QList<OAIAssessmentTarget> &assessment_targets) {
    m_assessment_targets = assessment_targets;
    m_assessment_targets_isSet = true;
}

bool OAIStartAssessment_request::is_assessment_targets_Set() const{
    return m_assessment_targets_isSet;
}

bool OAIStartAssessment_request::is_assessment_targets_Valid() const{
    return m_assessment_targets_isValid;
}

QString OAIStartAssessment_request::getS3bucketForAnalysisData() const {
    return m_s3bucket_for_analysis_data;
}
void OAIStartAssessment_request::setS3bucketForAnalysisData(const QString &s3bucket_for_analysis_data) {
    m_s3bucket_for_analysis_data = s3bucket_for_analysis_data;
    m_s3bucket_for_analysis_data_isSet = true;
}

bool OAIStartAssessment_request::is_s3bucket_for_analysis_data_Set() const{
    return m_s3bucket_for_analysis_data_isSet;
}

bool OAIStartAssessment_request::is_s3bucket_for_analysis_data_Valid() const{
    return m_s3bucket_for_analysis_data_isValid;
}

QString OAIStartAssessment_request::getS3bucketForReportData() const {
    return m_s3bucket_for_report_data;
}
void OAIStartAssessment_request::setS3bucketForReportData(const QString &s3bucket_for_report_data) {
    m_s3bucket_for_report_data = s3bucket_for_report_data;
    m_s3bucket_for_report_data_isSet = true;
}

bool OAIStartAssessment_request::is_s3bucket_for_report_data_Set() const{
    return m_s3bucket_for_report_data_isSet;
}

bool OAIStartAssessment_request::is_s3bucket_for_report_data_Valid() const{
    return m_s3bucket_for_report_data_isValid;
}

bool OAIStartAssessment_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3bucket_for_analysis_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3bucket_for_report_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartAssessment_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
