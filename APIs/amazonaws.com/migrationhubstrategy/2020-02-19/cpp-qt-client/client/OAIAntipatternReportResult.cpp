/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAntipatternReportResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAntipatternReportResult::OAIAntipatternReportResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAntipatternReportResult::OAIAntipatternReportResult() {
    this->initializeModel();
}

OAIAntipatternReportResult::~OAIAntipatternReportResult() {}

void OAIAntipatternReportResult::initializeModel() {

    m_analyzer_name_isSet = false;
    m_analyzer_name_isValid = false;

    m_anti_pattern_report_s3_object_isSet = false;
    m_anti_pattern_report_s3_object_isValid = false;

    m_antipattern_report_status_isSet = false;
    m_antipattern_report_status_isValid = false;

    m_antipattern_report_status_message_isSet = false;
    m_antipattern_report_status_message_isValid = false;
}

void OAIAntipatternReportResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAntipatternReportResult::fromJsonObject(QJsonObject json) {

    m_analyzer_name_isValid = ::OpenAPI::fromJsonValue(m_analyzer_name, json[QString("analyzerName")]);
    m_analyzer_name_isSet = !json[QString("analyzerName")].isNull() && m_analyzer_name_isValid;

    m_anti_pattern_report_s3_object_isValid = ::OpenAPI::fromJsonValue(m_anti_pattern_report_s3_object, json[QString("antiPatternReportS3Object")]);
    m_anti_pattern_report_s3_object_isSet = !json[QString("antiPatternReportS3Object")].isNull() && m_anti_pattern_report_s3_object_isValid;

    m_antipattern_report_status_isValid = ::OpenAPI::fromJsonValue(m_antipattern_report_status, json[QString("antipatternReportStatus")]);
    m_antipattern_report_status_isSet = !json[QString("antipatternReportStatus")].isNull() && m_antipattern_report_status_isValid;

    m_antipattern_report_status_message_isValid = ::OpenAPI::fromJsonValue(m_antipattern_report_status_message, json[QString("antipatternReportStatusMessage")]);
    m_antipattern_report_status_message_isSet = !json[QString("antipatternReportStatusMessage")].isNull() && m_antipattern_report_status_message_isValid;
}

QString OAIAntipatternReportResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAntipatternReportResult::asJsonObject() const {
    QJsonObject obj;
    if (m_analyzer_name.isSet()) {
        obj.insert(QString("analyzerName"), ::OpenAPI::toJsonValue(m_analyzer_name));
    }
    if (m_anti_pattern_report_s3_object.isSet()) {
        obj.insert(QString("antiPatternReportS3Object"), ::OpenAPI::toJsonValue(m_anti_pattern_report_s3_object));
    }
    if (m_antipattern_report_status.isSet()) {
        obj.insert(QString("antipatternReportStatus"), ::OpenAPI::toJsonValue(m_antipattern_report_status));
    }
    if (m_antipattern_report_status_message_isSet) {
        obj.insert(QString("antipatternReportStatusMessage"), ::OpenAPI::toJsonValue(m_antipattern_report_status_message));
    }
    return obj;
}

OAIAntipatternReportResult_analyzerName OAIAntipatternReportResult::getAnalyzerName() const {
    return m_analyzer_name;
}
void OAIAntipatternReportResult::setAnalyzerName(const OAIAntipatternReportResult_analyzerName &analyzer_name) {
    m_analyzer_name = analyzer_name;
    m_analyzer_name_isSet = true;
}

bool OAIAntipatternReportResult::is_analyzer_name_Set() const{
    return m_analyzer_name_isSet;
}

bool OAIAntipatternReportResult::is_analyzer_name_Valid() const{
    return m_analyzer_name_isValid;
}

OAIS3Object OAIAntipatternReportResult::getAntiPatternReportS3Object() const {
    return m_anti_pattern_report_s3_object;
}
void OAIAntipatternReportResult::setAntiPatternReportS3Object(const OAIS3Object &anti_pattern_report_s3_object) {
    m_anti_pattern_report_s3_object = anti_pattern_report_s3_object;
    m_anti_pattern_report_s3_object_isSet = true;
}

bool OAIAntipatternReportResult::is_anti_pattern_report_s3_object_Set() const{
    return m_anti_pattern_report_s3_object_isSet;
}

bool OAIAntipatternReportResult::is_anti_pattern_report_s3_object_Valid() const{
    return m_anti_pattern_report_s3_object_isValid;
}

OAIAntipatternReportStatus OAIAntipatternReportResult::getAntipatternReportStatus() const {
    return m_antipattern_report_status;
}
void OAIAntipatternReportResult::setAntipatternReportStatus(const OAIAntipatternReportStatus &antipattern_report_status) {
    m_antipattern_report_status = antipattern_report_status;
    m_antipattern_report_status_isSet = true;
}

bool OAIAntipatternReportResult::is_antipattern_report_status_Set() const{
    return m_antipattern_report_status_isSet;
}

bool OAIAntipatternReportResult::is_antipattern_report_status_Valid() const{
    return m_antipattern_report_status_isValid;
}

QString OAIAntipatternReportResult::getAntipatternReportStatusMessage() const {
    return m_antipattern_report_status_message;
}
void OAIAntipatternReportResult::setAntipatternReportStatusMessage(const QString &antipattern_report_status_message) {
    m_antipattern_report_status_message = antipattern_report_status_message;
    m_antipattern_report_status_message_isSet = true;
}

bool OAIAntipatternReportResult::is_antipattern_report_status_message_Set() const{
    return m_antipattern_report_status_message_isSet;
}

bool OAIAntipatternReportResult::is_antipattern_report_status_message_Valid() const{
    return m_antipattern_report_status_message_isValid;
}

bool OAIAntipatternReportResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analyzer_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anti_pattern_report_s3_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_antipattern_report_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_antipattern_report_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAntipatternReportResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
