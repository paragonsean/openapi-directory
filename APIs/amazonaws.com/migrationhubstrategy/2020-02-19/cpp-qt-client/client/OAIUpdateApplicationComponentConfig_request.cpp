/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplicationComponentConfig_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplicationComponentConfig_request::OAIUpdateApplicationComponentConfig_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplicationComponentConfig_request::OAIUpdateApplicationComponentConfig_request() {
    this->initializeModel();
}

OAIUpdateApplicationComponentConfig_request::~OAIUpdateApplicationComponentConfig_request() {}

void OAIUpdateApplicationComponentConfig_request::initializeModel() {

    m_app_type_isSet = false;
    m_app_type_isValid = false;

    m_application_component_id_isSet = false;
    m_application_component_id_isValid = false;

    m_configure_only_isSet = false;
    m_configure_only_isValid = false;

    m_inclusion_status_isSet = false;
    m_inclusion_status_isValid = false;

    m_secrets_manager_key_isSet = false;
    m_secrets_manager_key_isValid = false;

    m_source_code_list_isSet = false;
    m_source_code_list_isValid = false;

    m_strategy_option_isSet = false;
    m_strategy_option_isValid = false;
}

void OAIUpdateApplicationComponentConfig_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplicationComponentConfig_request::fromJsonObject(QJsonObject json) {

    m_app_type_isValid = ::OpenAPI::fromJsonValue(m_app_type, json[QString("appType")]);
    m_app_type_isSet = !json[QString("appType")].isNull() && m_app_type_isValid;

    m_application_component_id_isValid = ::OpenAPI::fromJsonValue(m_application_component_id, json[QString("applicationComponentId")]);
    m_application_component_id_isSet = !json[QString("applicationComponentId")].isNull() && m_application_component_id_isValid;

    m_configure_only_isValid = ::OpenAPI::fromJsonValue(m_configure_only, json[QString("configureOnly")]);
    m_configure_only_isSet = !json[QString("configureOnly")].isNull() && m_configure_only_isValid;

    m_inclusion_status_isValid = ::OpenAPI::fromJsonValue(m_inclusion_status, json[QString("inclusionStatus")]);
    m_inclusion_status_isSet = !json[QString("inclusionStatus")].isNull() && m_inclusion_status_isValid;

    m_secrets_manager_key_isValid = ::OpenAPI::fromJsonValue(m_secrets_manager_key, json[QString("secretsManagerKey")]);
    m_secrets_manager_key_isSet = !json[QString("secretsManagerKey")].isNull() && m_secrets_manager_key_isValid;

    m_source_code_list_isValid = ::OpenAPI::fromJsonValue(m_source_code_list, json[QString("sourceCodeList")]);
    m_source_code_list_isSet = !json[QString("sourceCodeList")].isNull() && m_source_code_list_isValid;

    m_strategy_option_isValid = ::OpenAPI::fromJsonValue(m_strategy_option, json[QString("strategyOption")]);
    m_strategy_option_isSet = !json[QString("strategyOption")].isNull() && m_strategy_option_isValid;
}

QString OAIUpdateApplicationComponentConfig_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplicationComponentConfig_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_type_isSet) {
        obj.insert(QString("appType"), ::OpenAPI::toJsonValue(m_app_type));
    }
    if (m_application_component_id_isSet) {
        obj.insert(QString("applicationComponentId"), ::OpenAPI::toJsonValue(m_application_component_id));
    }
    if (m_configure_only_isSet) {
        obj.insert(QString("configureOnly"), ::OpenAPI::toJsonValue(m_configure_only));
    }
    if (m_inclusion_status_isSet) {
        obj.insert(QString("inclusionStatus"), ::OpenAPI::toJsonValue(m_inclusion_status));
    }
    if (m_secrets_manager_key_isSet) {
        obj.insert(QString("secretsManagerKey"), ::OpenAPI::toJsonValue(m_secrets_manager_key));
    }
    if (m_source_code_list.size() > 0) {
        obj.insert(QString("sourceCodeList"), ::OpenAPI::toJsonValue(m_source_code_list));
    }
    if (m_strategy_option.isSet()) {
        obj.insert(QString("strategyOption"), ::OpenAPI::toJsonValue(m_strategy_option));
    }
    return obj;
}

QString OAIUpdateApplicationComponentConfig_request::getAppType() const {
    return m_app_type;
}
void OAIUpdateApplicationComponentConfig_request::setAppType(const QString &app_type) {
    m_app_type = app_type;
    m_app_type_isSet = true;
}

bool OAIUpdateApplicationComponentConfig_request::is_app_type_Set() const{
    return m_app_type_isSet;
}

bool OAIUpdateApplicationComponentConfig_request::is_app_type_Valid() const{
    return m_app_type_isValid;
}

QString OAIUpdateApplicationComponentConfig_request::getApplicationComponentId() const {
    return m_application_component_id;
}
void OAIUpdateApplicationComponentConfig_request::setApplicationComponentId(const QString &application_component_id) {
    m_application_component_id = application_component_id;
    m_application_component_id_isSet = true;
}

bool OAIUpdateApplicationComponentConfig_request::is_application_component_id_Set() const{
    return m_application_component_id_isSet;
}

bool OAIUpdateApplicationComponentConfig_request::is_application_component_id_Valid() const{
    return m_application_component_id_isValid;
}

bool OAIUpdateApplicationComponentConfig_request::isConfigureOnly() const {
    return m_configure_only;
}
void OAIUpdateApplicationComponentConfig_request::setConfigureOnly(const bool &configure_only) {
    m_configure_only = configure_only;
    m_configure_only_isSet = true;
}

bool OAIUpdateApplicationComponentConfig_request::is_configure_only_Set() const{
    return m_configure_only_isSet;
}

bool OAIUpdateApplicationComponentConfig_request::is_configure_only_Valid() const{
    return m_configure_only_isValid;
}

QString OAIUpdateApplicationComponentConfig_request::getInclusionStatus() const {
    return m_inclusion_status;
}
void OAIUpdateApplicationComponentConfig_request::setInclusionStatus(const QString &inclusion_status) {
    m_inclusion_status = inclusion_status;
    m_inclusion_status_isSet = true;
}

bool OAIUpdateApplicationComponentConfig_request::is_inclusion_status_Set() const{
    return m_inclusion_status_isSet;
}

bool OAIUpdateApplicationComponentConfig_request::is_inclusion_status_Valid() const{
    return m_inclusion_status_isValid;
}

QString OAIUpdateApplicationComponentConfig_request::getSecretsManagerKey() const {
    return m_secrets_manager_key;
}
void OAIUpdateApplicationComponentConfig_request::setSecretsManagerKey(const QString &secrets_manager_key) {
    m_secrets_manager_key = secrets_manager_key;
    m_secrets_manager_key_isSet = true;
}

bool OAIUpdateApplicationComponentConfig_request::is_secrets_manager_key_Set() const{
    return m_secrets_manager_key_isSet;
}

bool OAIUpdateApplicationComponentConfig_request::is_secrets_manager_key_Valid() const{
    return m_secrets_manager_key_isValid;
}

QList<OAISourceCode> OAIUpdateApplicationComponentConfig_request::getSourceCodeList() const {
    return m_source_code_list;
}
void OAIUpdateApplicationComponentConfig_request::setSourceCodeList(const QList<OAISourceCode> &source_code_list) {
    m_source_code_list = source_code_list;
    m_source_code_list_isSet = true;
}

bool OAIUpdateApplicationComponentConfig_request::is_source_code_list_Set() const{
    return m_source_code_list_isSet;
}

bool OAIUpdateApplicationComponentConfig_request::is_source_code_list_Valid() const{
    return m_source_code_list_isValid;
}

OAIUpdateApplicationComponentConfig_request_strategyOption OAIUpdateApplicationComponentConfig_request::getStrategyOption() const {
    return m_strategy_option;
}
void OAIUpdateApplicationComponentConfig_request::setStrategyOption(const OAIUpdateApplicationComponentConfig_request_strategyOption &strategy_option) {
    m_strategy_option = strategy_option;
    m_strategy_option_isSet = true;
}

bool OAIUpdateApplicationComponentConfig_request::is_strategy_option_Set() const{
    return m_strategy_option_isSet;
}

bool OAIUpdateApplicationComponentConfig_request::is_strategy_option_Valid() const{
    return m_strategy_option_isValid;
}

bool OAIUpdateApplicationComponentConfig_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configure_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secrets_manager_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_code_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategy_option.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplicationComponentConfig_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_component_id_isValid && true;
}

} // namespace OpenAPI
