/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersionControlInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersionControlInfo::OAIVersionControlInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersionControlInfo::OAIVersionControlInfo() {
    this->initializeModel();
}

OAIVersionControlInfo::~OAIVersionControlInfo() {}

void OAIVersionControlInfo::initializeModel() {

    m_version_control_configuration_time_stamp_isSet = false;
    m_version_control_configuration_time_stamp_isValid = false;

    m_version_control_type_isSet = false;
    m_version_control_type_isValid = false;
}

void OAIVersionControlInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersionControlInfo::fromJsonObject(QJsonObject json) {

    m_version_control_configuration_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_version_control_configuration_time_stamp, json[QString("versionControlConfigurationTimeStamp")]);
    m_version_control_configuration_time_stamp_isSet = !json[QString("versionControlConfigurationTimeStamp")].isNull() && m_version_control_configuration_time_stamp_isValid;

    m_version_control_type_isValid = ::OpenAPI::fromJsonValue(m_version_control_type, json[QString("versionControlType")]);
    m_version_control_type_isSet = !json[QString("versionControlType")].isNull() && m_version_control_type_isValid;
}

QString OAIVersionControlInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersionControlInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_version_control_configuration_time_stamp_isSet) {
        obj.insert(QString("versionControlConfigurationTimeStamp"), ::OpenAPI::toJsonValue(m_version_control_configuration_time_stamp));
    }
    if (m_version_control_type.isSet()) {
        obj.insert(QString("versionControlType"), ::OpenAPI::toJsonValue(m_version_control_type));
    }
    return obj;
}

QString OAIVersionControlInfo::getVersionControlConfigurationTimeStamp() const {
    return m_version_control_configuration_time_stamp;
}
void OAIVersionControlInfo::setVersionControlConfigurationTimeStamp(const QString &version_control_configuration_time_stamp) {
    m_version_control_configuration_time_stamp = version_control_configuration_time_stamp;
    m_version_control_configuration_time_stamp_isSet = true;
}

bool OAIVersionControlInfo::is_version_control_configuration_time_stamp_Set() const{
    return m_version_control_configuration_time_stamp_isSet;
}

bool OAIVersionControlInfo::is_version_control_configuration_time_stamp_Valid() const{
    return m_version_control_configuration_time_stamp_isValid;
}

OAIVersionControlType OAIVersionControlInfo::getVersionControlType() const {
    return m_version_control_type;
}
void OAIVersionControlInfo::setVersionControlType(const OAIVersionControlType &version_control_type) {
    m_version_control_type = version_control_type;
    m_version_control_type_isSet = true;
}

bool OAIVersionControlInfo::is_version_control_type_Set() const{
    return m_version_control_type_isSet;
}

bool OAIVersionControlInfo::is_version_control_type_Valid() const{
    return m_version_control_type_isValid;
}

bool OAIVersionControlInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_control_configuration_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_control_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersionControlInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
