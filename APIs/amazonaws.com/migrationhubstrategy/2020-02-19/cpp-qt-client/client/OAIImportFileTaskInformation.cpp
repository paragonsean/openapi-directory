/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportFileTaskInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportFileTaskInformation::OAIImportFileTaskInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportFileTaskInformation::OAIImportFileTaskInformation() {
    this->initializeModel();
}

OAIImportFileTaskInformation::~OAIImportFileTaskInformation() {}

void OAIImportFileTaskInformation::initializeModel() {

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_import_name_isSet = false;
    m_import_name_isValid = false;

    m_input_s3_bucket_isSet = false;
    m_input_s3_bucket_isValid = false;

    m_input_s3_key_isSet = false;
    m_input_s3_key_isValid = false;

    m_number_of_records_failed_isSet = false;
    m_number_of_records_failed_isValid = false;

    m_number_of_records_success_isSet = false;
    m_number_of_records_success_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_report_s3_bucket_isSet = false;
    m_status_report_s3_bucket_isValid = false;

    m_status_report_s3_key_isSet = false;
    m_status_report_s3_key_isValid = false;
}

void OAIImportFileTaskInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportFileTaskInformation::fromJsonObject(QJsonObject json) {

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("completionTime")]);
    m_completion_time_isSet = !json[QString("completionTime")].isNull() && m_completion_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_import_name_isValid = ::OpenAPI::fromJsonValue(m_import_name, json[QString("importName")]);
    m_import_name_isSet = !json[QString("importName")].isNull() && m_import_name_isValid;

    m_input_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_input_s3_bucket, json[QString("inputS3Bucket")]);
    m_input_s3_bucket_isSet = !json[QString("inputS3Bucket")].isNull() && m_input_s3_bucket_isValid;

    m_input_s3_key_isValid = ::OpenAPI::fromJsonValue(m_input_s3_key, json[QString("inputS3Key")]);
    m_input_s3_key_isSet = !json[QString("inputS3Key")].isNull() && m_input_s3_key_isValid;

    m_number_of_records_failed_isValid = ::OpenAPI::fromJsonValue(m_number_of_records_failed, json[QString("numberOfRecordsFailed")]);
    m_number_of_records_failed_isSet = !json[QString("numberOfRecordsFailed")].isNull() && m_number_of_records_failed_isValid;

    m_number_of_records_success_isValid = ::OpenAPI::fromJsonValue(m_number_of_records_success, json[QString("numberOfRecordsSuccess")]);
    m_number_of_records_success_isSet = !json[QString("numberOfRecordsSuccess")].isNull() && m_number_of_records_success_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_report_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_status_report_s3_bucket, json[QString("statusReportS3Bucket")]);
    m_status_report_s3_bucket_isSet = !json[QString("statusReportS3Bucket")].isNull() && m_status_report_s3_bucket_isValid;

    m_status_report_s3_key_isValid = ::OpenAPI::fromJsonValue(m_status_report_s3_key, json[QString("statusReportS3Key")]);
    m_status_report_s3_key_isSet = !json[QString("statusReportS3Key")].isNull() && m_status_report_s3_key_isValid;
}

QString OAIImportFileTaskInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportFileTaskInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_time_isSet) {
        obj.insert(QString("completionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_import_name_isSet) {
        obj.insert(QString("importName"), ::OpenAPI::toJsonValue(m_import_name));
    }
    if (m_input_s3_bucket_isSet) {
        obj.insert(QString("inputS3Bucket"), ::OpenAPI::toJsonValue(m_input_s3_bucket));
    }
    if (m_input_s3_key_isSet) {
        obj.insert(QString("inputS3Key"), ::OpenAPI::toJsonValue(m_input_s3_key));
    }
    if (m_number_of_records_failed_isSet) {
        obj.insert(QString("numberOfRecordsFailed"), ::OpenAPI::toJsonValue(m_number_of_records_failed));
    }
    if (m_number_of_records_success_isSet) {
        obj.insert(QString("numberOfRecordsSuccess"), ::OpenAPI::toJsonValue(m_number_of_records_success));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_report_s3_bucket_isSet) {
        obj.insert(QString("statusReportS3Bucket"), ::OpenAPI::toJsonValue(m_status_report_s3_bucket));
    }
    if (m_status_report_s3_key_isSet) {
        obj.insert(QString("statusReportS3Key"), ::OpenAPI::toJsonValue(m_status_report_s3_key));
    }
    return obj;
}

QDateTime OAIImportFileTaskInformation::getCompletionTime() const {
    return m_completion_time;
}
void OAIImportFileTaskInformation::setCompletionTime(const QDateTime &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIImportFileTaskInformation::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIImportFileTaskInformation::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QString OAIImportFileTaskInformation::getId() const {
    return m_id;
}
void OAIImportFileTaskInformation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImportFileTaskInformation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImportFileTaskInformation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImportFileTaskInformation::getImportName() const {
    return m_import_name;
}
void OAIImportFileTaskInformation::setImportName(const QString &import_name) {
    m_import_name = import_name;
    m_import_name_isSet = true;
}

bool OAIImportFileTaskInformation::is_import_name_Set() const{
    return m_import_name_isSet;
}

bool OAIImportFileTaskInformation::is_import_name_Valid() const{
    return m_import_name_isValid;
}

QString OAIImportFileTaskInformation::getInputS3Bucket() const {
    return m_input_s3_bucket;
}
void OAIImportFileTaskInformation::setInputS3Bucket(const QString &input_s3_bucket) {
    m_input_s3_bucket = input_s3_bucket;
    m_input_s3_bucket_isSet = true;
}

bool OAIImportFileTaskInformation::is_input_s3_bucket_Set() const{
    return m_input_s3_bucket_isSet;
}

bool OAIImportFileTaskInformation::is_input_s3_bucket_Valid() const{
    return m_input_s3_bucket_isValid;
}

QString OAIImportFileTaskInformation::getInputS3Key() const {
    return m_input_s3_key;
}
void OAIImportFileTaskInformation::setInputS3Key(const QString &input_s3_key) {
    m_input_s3_key = input_s3_key;
    m_input_s3_key_isSet = true;
}

bool OAIImportFileTaskInformation::is_input_s3_key_Set() const{
    return m_input_s3_key_isSet;
}

bool OAIImportFileTaskInformation::is_input_s3_key_Valid() const{
    return m_input_s3_key_isValid;
}

qint32 OAIImportFileTaskInformation::getNumberOfRecordsFailed() const {
    return m_number_of_records_failed;
}
void OAIImportFileTaskInformation::setNumberOfRecordsFailed(const qint32 &number_of_records_failed) {
    m_number_of_records_failed = number_of_records_failed;
    m_number_of_records_failed_isSet = true;
}

bool OAIImportFileTaskInformation::is_number_of_records_failed_Set() const{
    return m_number_of_records_failed_isSet;
}

bool OAIImportFileTaskInformation::is_number_of_records_failed_Valid() const{
    return m_number_of_records_failed_isValid;
}

qint32 OAIImportFileTaskInformation::getNumberOfRecordsSuccess() const {
    return m_number_of_records_success;
}
void OAIImportFileTaskInformation::setNumberOfRecordsSuccess(const qint32 &number_of_records_success) {
    m_number_of_records_success = number_of_records_success;
    m_number_of_records_success_isSet = true;
}

bool OAIImportFileTaskInformation::is_number_of_records_success_Set() const{
    return m_number_of_records_success_isSet;
}

bool OAIImportFileTaskInformation::is_number_of_records_success_Valid() const{
    return m_number_of_records_success_isValid;
}

QDateTime OAIImportFileTaskInformation::getStartTime() const {
    return m_start_time;
}
void OAIImportFileTaskInformation::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIImportFileTaskInformation::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIImportFileTaskInformation::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIImportFileTaskStatus OAIImportFileTaskInformation::getStatus() const {
    return m_status;
}
void OAIImportFileTaskInformation::setStatus(const OAIImportFileTaskStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIImportFileTaskInformation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIImportFileTaskInformation::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIImportFileTaskInformation::getStatusReportS3Bucket() const {
    return m_status_report_s3_bucket;
}
void OAIImportFileTaskInformation::setStatusReportS3Bucket(const QString &status_report_s3_bucket) {
    m_status_report_s3_bucket = status_report_s3_bucket;
    m_status_report_s3_bucket_isSet = true;
}

bool OAIImportFileTaskInformation::is_status_report_s3_bucket_Set() const{
    return m_status_report_s3_bucket_isSet;
}

bool OAIImportFileTaskInformation::is_status_report_s3_bucket_Valid() const{
    return m_status_report_s3_bucket_isValid;
}

QString OAIImportFileTaskInformation::getStatusReportS3Key() const {
    return m_status_report_s3_key;
}
void OAIImportFileTaskInformation::setStatusReportS3Key(const QString &status_report_s3_key) {
    m_status_report_s3_key = status_report_s3_key;
    m_status_report_s3_key_isSet = true;
}

bool OAIImportFileTaskInformation::is_status_report_s3_key_Set() const{
    return m_status_report_s3_key_isSet;
}

bool OAIImportFileTaskInformation::is_status_report_s3_key_Valid() const{
    return m_status_report_s3_key_isValid;
}

bool OAIImportFileTaskInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_s3_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_records_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_records_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_report_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_report_s3_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportFileTaskInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
