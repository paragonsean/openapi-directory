/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCollectorsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCollectorsResponse::OAIListCollectorsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCollectorsResponse::OAIListCollectorsResponse() {
    this->initializeModel();
}

OAIListCollectorsResponse::~OAIListCollectorsResponse() {}

void OAIListCollectorsResponse::initializeModel() {

    m_collectors_isSet = false;
    m_collectors_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListCollectorsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCollectorsResponse::fromJsonObject(QJsonObject json) {

    m_collectors_isValid = ::OpenAPI::fromJsonValue(m_collectors, json[QString("Collectors")]);
    m_collectors_isSet = !json[QString("Collectors")].isNull() && m_collectors_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListCollectorsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCollectorsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_collectors.isSet()) {
        obj.insert(QString("Collectors"), ::OpenAPI::toJsonValue(m_collectors));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListCollectorsResponse::getCollectors() const {
    return m_collectors;
}
void OAIListCollectorsResponse::setCollectors(const QList &collectors) {
    m_collectors = collectors;
    m_collectors_isSet = true;
}

bool OAIListCollectorsResponse::is_collectors_Set() const{
    return m_collectors_isSet;
}

bool OAIListCollectorsResponse::is_collectors_Valid() const{
    return m_collectors_isValid;
}

QString OAIListCollectorsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListCollectorsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListCollectorsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListCollectorsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListCollectorsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCollectorsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
