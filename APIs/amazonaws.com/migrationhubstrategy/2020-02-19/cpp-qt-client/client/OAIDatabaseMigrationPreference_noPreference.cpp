/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseMigrationPreference_noPreference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseMigrationPreference_noPreference::OAIDatabaseMigrationPreference_noPreference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseMigrationPreference_noPreference::OAIDatabaseMigrationPreference_noPreference() {
    this->initializeModel();
}

OAIDatabaseMigrationPreference_noPreference::~OAIDatabaseMigrationPreference_noPreference() {}

void OAIDatabaseMigrationPreference_noPreference::initializeModel() {

    m_target_database_engine_isSet = false;
    m_target_database_engine_isValid = false;
}

void OAIDatabaseMigrationPreference_noPreference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseMigrationPreference_noPreference::fromJsonObject(QJsonObject json) {

    m_target_database_engine_isValid = ::OpenAPI::fromJsonValue(m_target_database_engine, json[QString("targetDatabaseEngine")]);
    m_target_database_engine_isSet = !json[QString("targetDatabaseEngine")].isNull() && m_target_database_engine_isValid;
}

QString OAIDatabaseMigrationPreference_noPreference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseMigrationPreference_noPreference::asJsonObject() const {
    QJsonObject obj;
    if (m_target_database_engine.isSet()) {
        obj.insert(QString("targetDatabaseEngine"), ::OpenAPI::toJsonValue(m_target_database_engine));
    }
    return obj;
}

QList OAIDatabaseMigrationPreference_noPreference::getTargetDatabaseEngine() const {
    return m_target_database_engine;
}
void OAIDatabaseMigrationPreference_noPreference::setTargetDatabaseEngine(const QList &target_database_engine) {
    m_target_database_engine = target_database_engine;
    m_target_database_engine_isSet = true;
}

bool OAIDatabaseMigrationPreference_noPreference::is_target_database_engine_Set() const{
    return m_target_database_engine_isSet;
}

bool OAIDatabaseMigrationPreference_noPreference::is_target_database_engine_Valid() const{
    return m_target_database_engine_isValid;
}

bool OAIDatabaseMigrationPreference_noPreference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_database_engine.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseMigrationPreference_noPreference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_database_engine_isValid && true;
}

} // namespace OpenAPI
