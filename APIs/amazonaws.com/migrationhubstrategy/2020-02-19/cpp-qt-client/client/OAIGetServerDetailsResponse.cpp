/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetServerDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetServerDetailsResponse::OAIGetServerDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetServerDetailsResponse::OAIGetServerDetailsResponse() {
    this->initializeModel();
}

OAIGetServerDetailsResponse::~OAIGetServerDetailsResponse() {}

void OAIGetServerDetailsResponse::initializeModel() {

    m_associated_applications_isSet = false;
    m_associated_applications_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_server_detail_isSet = false;
    m_server_detail_isValid = false;
}

void OAIGetServerDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetServerDetailsResponse::fromJsonObject(QJsonObject json) {

    m_associated_applications_isValid = ::OpenAPI::fromJsonValue(m_associated_applications, json[QString("associatedApplications")]);
    m_associated_applications_isSet = !json[QString("associatedApplications")].isNull() && m_associated_applications_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_server_detail_isValid = ::OpenAPI::fromJsonValue(m_server_detail, json[QString("serverDetail")]);
    m_server_detail_isSet = !json[QString("serverDetail")].isNull() && m_server_detail_isValid;
}

QString OAIGetServerDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetServerDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_associated_applications.isSet()) {
        obj.insert(QString("associatedApplications"), ::OpenAPI::toJsonValue(m_associated_applications));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_server_detail.isSet()) {
        obj.insert(QString("serverDetail"), ::OpenAPI::toJsonValue(m_server_detail));
    }
    return obj;
}

QList OAIGetServerDetailsResponse::getAssociatedApplications() const {
    return m_associated_applications;
}
void OAIGetServerDetailsResponse::setAssociatedApplications(const QList &associated_applications) {
    m_associated_applications = associated_applications;
    m_associated_applications_isSet = true;
}

bool OAIGetServerDetailsResponse::is_associated_applications_Set() const{
    return m_associated_applications_isSet;
}

bool OAIGetServerDetailsResponse::is_associated_applications_Valid() const{
    return m_associated_applications_isValid;
}

QString OAIGetServerDetailsResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetServerDetailsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetServerDetailsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetServerDetailsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIGetServerDetailsResponse_serverDetail OAIGetServerDetailsResponse::getServerDetail() const {
    return m_server_detail;
}
void OAIGetServerDetailsResponse::setServerDetail(const OAIGetServerDetailsResponse_serverDetail &server_detail) {
    m_server_detail = server_detail;
    m_server_detail_isSet = true;
}

bool OAIGetServerDetailsResponse::is_server_detail_Set() const{
    return m_server_detail_isSet;
}

bool OAIGetServerDetailsResponse::is_server_detail_Valid() const{
    return m_server_detail_isValid;
}

bool OAIGetServerDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associated_applications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetServerDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
