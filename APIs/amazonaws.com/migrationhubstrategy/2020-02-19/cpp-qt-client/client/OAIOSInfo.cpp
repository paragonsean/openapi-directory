/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSInfo::OAIOSInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSInfo::OAIOSInfo() {
    this->initializeModel();
}

OAIOSInfo::~OAIOSInfo() {}

void OAIOSInfo::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIOSInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSInfo::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIOSInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIOSType OAIOSInfo::getType() const {
    return m_type;
}
void OAIOSInfo::setType(const OAIOSType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOSInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOSInfo::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOSInfo::getVersion() const {
    return m_version;
}
void OAIOSInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIOSInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIOSInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIOSInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
