/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVcenterBasedRemoteInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVcenterBasedRemoteInfo::OAIVcenterBasedRemoteInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVcenterBasedRemoteInfo::OAIVcenterBasedRemoteInfo() {
    this->initializeModel();
}

OAIVcenterBasedRemoteInfo::~OAIVcenterBasedRemoteInfo() {}

void OAIVcenterBasedRemoteInfo::initializeModel() {

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_vcenter_configuration_time_stamp_isSet = false;
    m_vcenter_configuration_time_stamp_isValid = false;
}

void OAIVcenterBasedRemoteInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVcenterBasedRemoteInfo::fromJsonObject(QJsonObject json) {

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_vcenter_configuration_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_vcenter_configuration_time_stamp, json[QString("vcenterConfigurationTimeStamp")]);
    m_vcenter_configuration_time_stamp_isSet = !json[QString("vcenterConfigurationTimeStamp")].isNull() && m_vcenter_configuration_time_stamp_isValid;
}

QString OAIVcenterBasedRemoteInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVcenterBasedRemoteInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_os_type.isSet()) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_vcenter_configuration_time_stamp_isSet) {
        obj.insert(QString("vcenterConfigurationTimeStamp"), ::OpenAPI::toJsonValue(m_vcenter_configuration_time_stamp));
    }
    return obj;
}

OAIOSType OAIVcenterBasedRemoteInfo::getOsType() const {
    return m_os_type;
}
void OAIVcenterBasedRemoteInfo::setOsType(const OAIOSType &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIVcenterBasedRemoteInfo::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIVcenterBasedRemoteInfo::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIVcenterBasedRemoteInfo::getVcenterConfigurationTimeStamp() const {
    return m_vcenter_configuration_time_stamp;
}
void OAIVcenterBasedRemoteInfo::setVcenterConfigurationTimeStamp(const QString &vcenter_configuration_time_stamp) {
    m_vcenter_configuration_time_stamp = vcenter_configuration_time_stamp;
    m_vcenter_configuration_time_stamp_isSet = true;
}

bool OAIVcenterBasedRemoteInfo::is_vcenter_configuration_time_stamp_Set() const{
    return m_vcenter_configuration_time_stamp_isSet;
}

bool OAIVcenterBasedRemoteInfo::is_vcenter_configuration_time_stamp_Valid() const{
    return m_vcenter_configuration_time_stamp_isValid;
}

bool OAIVcenterBasedRemoteInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_configuration_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVcenterBasedRemoteInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
