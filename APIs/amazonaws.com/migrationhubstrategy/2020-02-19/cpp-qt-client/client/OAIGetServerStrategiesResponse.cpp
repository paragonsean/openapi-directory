/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetServerStrategiesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetServerStrategiesResponse::OAIGetServerStrategiesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetServerStrategiesResponse::OAIGetServerStrategiesResponse() {
    this->initializeModel();
}

OAIGetServerStrategiesResponse::~OAIGetServerStrategiesResponse() {}

void OAIGetServerStrategiesResponse::initializeModel() {

    m_server_strategies_isSet = false;
    m_server_strategies_isValid = false;
}

void OAIGetServerStrategiesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetServerStrategiesResponse::fromJsonObject(QJsonObject json) {

    m_server_strategies_isValid = ::OpenAPI::fromJsonValue(m_server_strategies, json[QString("serverStrategies")]);
    m_server_strategies_isSet = !json[QString("serverStrategies")].isNull() && m_server_strategies_isValid;
}

QString OAIGetServerStrategiesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetServerStrategiesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_server_strategies.isSet()) {
        obj.insert(QString("serverStrategies"), ::OpenAPI::toJsonValue(m_server_strategies));
    }
    return obj;
}

QList OAIGetServerStrategiesResponse::getServerStrategies() const {
    return m_server_strategies;
}
void OAIGetServerStrategiesResponse::setServerStrategies(const QList &server_strategies) {
    m_server_strategies = server_strategies;
    m_server_strategies_isSet = true;
}

bool OAIGetServerStrategiesResponse::is_server_strategies_Set() const{
    return m_server_strategies_isSet;
}

bool OAIGetServerStrategiesResponse::is_server_strategies_Valid() const{
    return m_server_strategies_isValid;
}

bool OAIGetServerStrategiesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_strategies.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetServerStrategiesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
