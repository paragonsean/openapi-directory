/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAssessmentResponse_dataCollectionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAssessmentResponse_dataCollectionDetails::OAIGetAssessmentResponse_dataCollectionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAssessmentResponse_dataCollectionDetails::OAIGetAssessmentResponse_dataCollectionDetails() {
    this->initializeModel();
}

OAIGetAssessmentResponse_dataCollectionDetails::~OAIGetAssessmentResponse_dataCollectionDetails() {}

void OAIGetAssessmentResponse_dataCollectionDetails::initializeModel() {

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_in_progress_isSet = false;
    m_in_progress_isValid = false;

    m_servers_isSet = false;
    m_servers_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIGetAssessmentResponse_dataCollectionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAssessmentResponse_dataCollectionDetails::fromJsonObject(QJsonObject json) {

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("completionTime")]);
    m_completion_time_isSet = !json[QString("completionTime")].isNull() && m_completion_time_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_in_progress_isValid = ::OpenAPI::fromJsonValue(m_in_progress, json[QString("inProgress")]);
    m_in_progress_isSet = !json[QString("inProgress")].isNull() && m_in_progress_isValid;

    m_servers_isValid = ::OpenAPI::fromJsonValue(m_servers, json[QString("servers")]);
    m_servers_isSet = !json[QString("servers")].isNull() && m_servers_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIGetAssessmentResponse_dataCollectionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAssessmentResponse_dataCollectionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_time_isSet) {
        obj.insert(QString("completionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_in_progress_isSet) {
        obj.insert(QString("inProgress"), ::OpenAPI::toJsonValue(m_in_progress));
    }
    if (m_servers_isSet) {
        obj.insert(QString("servers"), ::OpenAPI::toJsonValue(m_servers));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

QDateTime OAIGetAssessmentResponse_dataCollectionDetails::getCompletionTime() const {
    return m_completion_time;
}
void OAIGetAssessmentResponse_dataCollectionDetails::setCompletionTime(const QDateTime &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

qint32 OAIGetAssessmentResponse_dataCollectionDetails::getFailed() const {
    return m_failed;
}
void OAIGetAssessmentResponse_dataCollectionDetails::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_failed_Valid() const{
    return m_failed_isValid;
}

qint32 OAIGetAssessmentResponse_dataCollectionDetails::getInProgress() const {
    return m_in_progress;
}
void OAIGetAssessmentResponse_dataCollectionDetails::setInProgress(const qint32 &in_progress) {
    m_in_progress = in_progress;
    m_in_progress_isSet = true;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_in_progress_Set() const{
    return m_in_progress_isSet;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_in_progress_Valid() const{
    return m_in_progress_isValid;
}

qint32 OAIGetAssessmentResponse_dataCollectionDetails::getServers() const {
    return m_servers;
}
void OAIGetAssessmentResponse_dataCollectionDetails::setServers(const qint32 &servers) {
    m_servers = servers;
    m_servers_isSet = true;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_servers_Set() const{
    return m_servers_isSet;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_servers_Valid() const{
    return m_servers_isValid;
}

QDateTime OAIGetAssessmentResponse_dataCollectionDetails::getStartTime() const {
    return m_start_time;
}
void OAIGetAssessmentResponse_dataCollectionDetails::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIAssessmentStatus OAIGetAssessmentResponse_dataCollectionDetails::getStatus() const {
    return m_status;
}
void OAIGetAssessmentResponse_dataCollectionDetails::setStatus(const OAIAssessmentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetAssessmentResponse_dataCollectionDetails::getStatusMessage() const {
    return m_status_message;
}
void OAIGetAssessmentResponse_dataCollectionDetails::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_status_message_Valid() const{
    return m_status_message_isValid;
}

qint32 OAIGetAssessmentResponse_dataCollectionDetails::getSuccess() const {
    return m_success;
}
void OAIGetAssessmentResponse_dataCollectionDetails::setSuccess(const qint32 &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_success_Set() const{
    return m_success_isSet;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAssessmentResponse_dataCollectionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
