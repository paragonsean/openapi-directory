/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppType::OAIAppType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppType::OAIAppType() {
    this->initializeModel();
}

OAIAppType::~OAIAppType() {}

void OAIAppType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAppType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAppType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DotNetFramework", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::DOTNETFRAMEWORK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Java", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::JAVA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SQLServer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::SQLSERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IIS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::IIS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Oracle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::ORACLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Other", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Tomcat", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::TOMCAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JBoss", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::JBOSS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Spring", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::SPRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Mongo DB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::MONGO_DB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DB2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::DB2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Maria DB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::MARIA_DB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MySQL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::MYSQL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Sybase", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::SYBASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PostgreSQLServer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::POSTGRESQLSERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cassandra", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::CASSANDRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IBM WebSphere", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::IBM_WEBSPHERE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Oracle WebLogic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::ORACLE_WEBLOGIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Visual Basic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::VISUAL_BASIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DotnetCore", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::DOTNETCORE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Dotnet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::DOTNET;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAppType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAppType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAppType::DOTNETFRAMEWORK:
            val = "DotNetFramework";
            break;
        case eOAIAppType::JAVA:
            val = "Java";
            break;
        case eOAIAppType::SQLSERVER:
            val = "SQLServer";
            break;
        case eOAIAppType::IIS:
            val = "IIS";
            break;
        case eOAIAppType::ORACLE:
            val = "Oracle";
            break;
        case eOAIAppType::OTHER:
            val = "Other";
            break;
        case eOAIAppType::TOMCAT:
            val = "Tomcat";
            break;
        case eOAIAppType::JBOSS:
            val = "JBoss";
            break;
        case eOAIAppType::SPRING:
            val = "Spring";
            break;
        case eOAIAppType::MONGO_DB:
            val = "Mongo DB";
            break;
        case eOAIAppType::DB2:
            val = "DB2";
            break;
        case eOAIAppType::MARIA_DB:
            val = "Maria DB";
            break;
        case eOAIAppType::MYSQL:
            val = "MySQL";
            break;
        case eOAIAppType::SYBASE:
            val = "Sybase";
            break;
        case eOAIAppType::POSTGRESQLSERVER:
            val = "PostgreSQLServer";
            break;
        case eOAIAppType::CASSANDRA:
            val = "Cassandra";
            break;
        case eOAIAppType::IBM_WEBSPHERE:
            val = "IBM WebSphere";
            break;
        case eOAIAppType::ORACLE_WEBLOGIC:
            val = "Oracle WebLogic";
            break;
        case eOAIAppType::VISUAL_BASIC:
            val = "Visual Basic";
            break;
        case eOAIAppType::UNKNOWN:
            val = "Unknown";
            break;
        case eOAIAppType::DOTNETCORE:
            val = "DotnetCore";
            break;
        case eOAIAppType::DOTNET:
            val = "Dotnet";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAppType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAppType::eOAIAppType OAIAppType::getValue() const {
    return m_value;
}

void OAIAppType::setValue(const OAIAppType::eOAIAppType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAppType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAppType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
