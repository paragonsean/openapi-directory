/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrioritizeBusinessGoals.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrioritizeBusinessGoals::OAIPrioritizeBusinessGoals(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrioritizeBusinessGoals::OAIPrioritizeBusinessGoals() {
    this->initializeModel();
}

OAIPrioritizeBusinessGoals::~OAIPrioritizeBusinessGoals() {}

void OAIPrioritizeBusinessGoals::initializeModel() {

    m_business_goals_isSet = false;
    m_business_goals_isValid = false;
}

void OAIPrioritizeBusinessGoals::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrioritizeBusinessGoals::fromJsonObject(QJsonObject json) {

    m_business_goals_isValid = ::OpenAPI::fromJsonValue(m_business_goals, json[QString("businessGoals")]);
    m_business_goals_isSet = !json[QString("businessGoals")].isNull() && m_business_goals_isValid;
}

QString OAIPrioritizeBusinessGoals::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrioritizeBusinessGoals::asJsonObject() const {
    QJsonObject obj;
    if (m_business_goals.isSet()) {
        obj.insert(QString("businessGoals"), ::OpenAPI::toJsonValue(m_business_goals));
    }
    return obj;
}

OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals OAIPrioritizeBusinessGoals::getBusinessGoals() const {
    return m_business_goals;
}
void OAIPrioritizeBusinessGoals::setBusinessGoals(const OAIPutPortfolioPreferences_request_prioritizeBusinessGoals_businessGoals &business_goals) {
    m_business_goals = business_goals;
    m_business_goals_isSet = true;
}

bool OAIPrioritizeBusinessGoals::is_business_goals_Set() const{
    return m_business_goals_isSet;
}

bool OAIPrioritizeBusinessGoals::is_business_goals_Valid() const{
    return m_business_goals_isValid;
}

bool OAIPrioritizeBusinessGoals::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_goals.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrioritizeBusinessGoals::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
