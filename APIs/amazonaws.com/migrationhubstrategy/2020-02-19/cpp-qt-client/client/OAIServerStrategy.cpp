/**
 * Migration Hub Strategy Recommendations
 * <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p></p>
 *
 * The version of the OpenAPI document: 2020-02-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerStrategy::OAIServerStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerStrategy::OAIServerStrategy() {
    this->initializeModel();
}

OAIServerStrategy::~OAIServerStrategy() {}

void OAIServerStrategy::initializeModel() {

    m_is_preferred_isSet = false;
    m_is_preferred_isValid = false;

    m_number_of_application_components_isSet = false;
    m_number_of_application_components_isValid = false;

    m_recommendation_isSet = false;
    m_recommendation_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIServerStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerStrategy::fromJsonObject(QJsonObject json) {

    m_is_preferred_isValid = ::OpenAPI::fromJsonValue(m_is_preferred, json[QString("isPreferred")]);
    m_is_preferred_isSet = !json[QString("isPreferred")].isNull() && m_is_preferred_isValid;

    m_number_of_application_components_isValid = ::OpenAPI::fromJsonValue(m_number_of_application_components, json[QString("numberOfApplicationComponents")]);
    m_number_of_application_components_isSet = !json[QString("numberOfApplicationComponents")].isNull() && m_number_of_application_components_isValid;

    m_recommendation_isValid = ::OpenAPI::fromJsonValue(m_recommendation, json[QString("recommendation")]);
    m_recommendation_isSet = !json[QString("recommendation")].isNull() && m_recommendation_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIServerStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_is_preferred_isSet) {
        obj.insert(QString("isPreferred"), ::OpenAPI::toJsonValue(m_is_preferred));
    }
    if (m_number_of_application_components_isSet) {
        obj.insert(QString("numberOfApplicationComponents"), ::OpenAPI::toJsonValue(m_number_of_application_components));
    }
    if (m_recommendation.isSet()) {
        obj.insert(QString("recommendation"), ::OpenAPI::toJsonValue(m_recommendation));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

bool OAIServerStrategy::getIsPreferred() const {
    return m_is_preferred;
}
void OAIServerStrategy::setIsPreferred(const bool &is_preferred) {
    m_is_preferred = is_preferred;
    m_is_preferred_isSet = true;
}

bool OAIServerStrategy::is_is_preferred_Set() const{
    return m_is_preferred_isSet;
}

bool OAIServerStrategy::is_is_preferred_Valid() const{
    return m_is_preferred_isValid;
}

qint32 OAIServerStrategy::getNumberOfApplicationComponents() const {
    return m_number_of_application_components;
}
void OAIServerStrategy::setNumberOfApplicationComponents(const qint32 &number_of_application_components) {
    m_number_of_application_components = number_of_application_components;
    m_number_of_application_components_isSet = true;
}

bool OAIServerStrategy::is_number_of_application_components_Set() const{
    return m_number_of_application_components_isSet;
}

bool OAIServerStrategy::is_number_of_application_components_Valid() const{
    return m_number_of_application_components_isValid;
}

OAIServerStrategy_recommendation OAIServerStrategy::getRecommendation() const {
    return m_recommendation;
}
void OAIServerStrategy::setRecommendation(const OAIServerStrategy_recommendation &recommendation) {
    m_recommendation = recommendation;
    m_recommendation_isSet = true;
}

bool OAIServerStrategy::is_recommendation_Set() const{
    return m_recommendation_isSet;
}

bool OAIServerStrategy::is_recommendation_Valid() const{
    return m_recommendation_isValid;
}

OAIStrategyRecommendation OAIServerStrategy::getStatus() const {
    return m_status;
}
void OAIServerStrategy::setStatus(const OAIStrategyRecommendation &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServerStrategy::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServerStrategy::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIServerStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_application_components_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
