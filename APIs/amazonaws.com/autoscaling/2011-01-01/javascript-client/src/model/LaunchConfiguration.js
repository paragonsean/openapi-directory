/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateLaunchConfigurationTypeMetadataOptions from './CreateLaunchConfigurationTypeMetadataOptions';
import LaunchConfigurationInstanceMonitoring from './LaunchConfigurationInstanceMonitoring';

/**
 * The LaunchConfiguration model module.
 * @module model/LaunchConfiguration
 * @version 2011-01-01
 */
class LaunchConfiguration {
    /**
     * Constructs a new <code>LaunchConfiguration</code>.
     * Describes a launch configuration.
     * @alias module:model/LaunchConfiguration
     * @param launchConfigurationName {String} 
     * @param imageId {String} 
     * @param instanceType {String} 
     * @param createdTime {Date} 
     */
    constructor(launchConfigurationName, imageId, instanceType, createdTime) { 
        
        LaunchConfiguration.initialize(this, launchConfigurationName, imageId, instanceType, createdTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, launchConfigurationName, imageId, instanceType, createdTime) { 
        obj['LaunchConfigurationName'] = launchConfigurationName;
        obj['ImageId'] = imageId;
        obj['InstanceType'] = instanceType;
        obj['CreatedTime'] = createdTime;
    }

    /**
     * Constructs a <code>LaunchConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LaunchConfiguration} obj Optional instance to populate.
     * @return {module:model/LaunchConfiguration} The populated <code>LaunchConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LaunchConfiguration();

            if (data.hasOwnProperty('LaunchConfigurationName')) {
                obj['LaunchConfigurationName'] = ApiClient.convertToType(data['LaunchConfigurationName'], 'String');
            }
            if (data.hasOwnProperty('LaunchConfigurationARN')) {
                obj['LaunchConfigurationARN'] = ApiClient.convertToType(data['LaunchConfigurationARN'], 'String');
            }
            if (data.hasOwnProperty('ImageId')) {
                obj['ImageId'] = ApiClient.convertToType(data['ImageId'], 'String');
            }
            if (data.hasOwnProperty('KeyName')) {
                obj['KeyName'] = ApiClient.convertToType(data['KeyName'], 'String');
            }
            if (data.hasOwnProperty('SecurityGroups')) {
                obj['SecurityGroups'] = ApiClient.convertToType(data['SecurityGroups'], Array);
            }
            if (data.hasOwnProperty('ClassicLinkVPCId')) {
                obj['ClassicLinkVPCId'] = ApiClient.convertToType(data['ClassicLinkVPCId'], 'String');
            }
            if (data.hasOwnProperty('ClassicLinkVPCSecurityGroups')) {
                obj['ClassicLinkVPCSecurityGroups'] = ApiClient.convertToType(data['ClassicLinkVPCSecurityGroups'], Array);
            }
            if (data.hasOwnProperty('UserData')) {
                obj['UserData'] = ApiClient.convertToType(data['UserData'], 'String');
            }
            if (data.hasOwnProperty('InstanceType')) {
                obj['InstanceType'] = ApiClient.convertToType(data['InstanceType'], 'String');
            }
            if (data.hasOwnProperty('KernelId')) {
                obj['KernelId'] = ApiClient.convertToType(data['KernelId'], 'String');
            }
            if (data.hasOwnProperty('RamdiskId')) {
                obj['RamdiskId'] = ApiClient.convertToType(data['RamdiskId'], 'String');
            }
            if (data.hasOwnProperty('BlockDeviceMappings')) {
                obj['BlockDeviceMappings'] = ApiClient.convertToType(data['BlockDeviceMappings'], Array);
            }
            if (data.hasOwnProperty('InstanceMonitoring')) {
                obj['InstanceMonitoring'] = LaunchConfigurationInstanceMonitoring.constructFromObject(data['InstanceMonitoring']);
            }
            if (data.hasOwnProperty('SpotPrice')) {
                obj['SpotPrice'] = ApiClient.convertToType(data['SpotPrice'], 'String');
            }
            if (data.hasOwnProperty('IamInstanceProfile')) {
                obj['IamInstanceProfile'] = ApiClient.convertToType(data['IamInstanceProfile'], 'String');
            }
            if (data.hasOwnProperty('CreatedTime')) {
                obj['CreatedTime'] = ApiClient.convertToType(data['CreatedTime'], 'Date');
            }
            if (data.hasOwnProperty('EbsOptimized')) {
                obj['EbsOptimized'] = ApiClient.convertToType(data['EbsOptimized'], 'Boolean');
            }
            if (data.hasOwnProperty('AssociatePublicIpAddress')) {
                obj['AssociatePublicIpAddress'] = ApiClient.convertToType(data['AssociatePublicIpAddress'], 'Boolean');
            }
            if (data.hasOwnProperty('PlacementTenancy')) {
                obj['PlacementTenancy'] = ApiClient.convertToType(data['PlacementTenancy'], 'String');
            }
            if (data.hasOwnProperty('MetadataOptions')) {
                obj['MetadataOptions'] = CreateLaunchConfigurationTypeMetadataOptions.constructFromObject(data['MetadataOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LaunchConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LaunchConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LaunchConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `LaunchConfigurationName`
        if (data['LaunchConfigurationName']) { // data not null
          String.validateJSON(data['LaunchConfigurationName']);
        }
        // validate the optional field `LaunchConfigurationARN`
        if (data['LaunchConfigurationARN']) { // data not null
          String.validateJSON(data['LaunchConfigurationARN']);
        }
        // validate the optional field `ImageId`
        if (data['ImageId']) { // data not null
          String.validateJSON(data['ImageId']);
        }
        // validate the optional field `KeyName`
        if (data['KeyName']) { // data not null
          String.validateJSON(data['KeyName']);
        }
        // validate the optional field `SecurityGroups`
        if (data['SecurityGroups']) { // data not null
          Array.validateJSON(data['SecurityGroups']);
        }
        // validate the optional field `ClassicLinkVPCId`
        if (data['ClassicLinkVPCId']) { // data not null
          String.validateJSON(data['ClassicLinkVPCId']);
        }
        // validate the optional field `ClassicLinkVPCSecurityGroups`
        if (data['ClassicLinkVPCSecurityGroups']) { // data not null
          Array.validateJSON(data['ClassicLinkVPCSecurityGroups']);
        }
        // validate the optional field `UserData`
        if (data['UserData']) { // data not null
          String.validateJSON(data['UserData']);
        }
        // validate the optional field `InstanceType`
        if (data['InstanceType']) { // data not null
          String.validateJSON(data['InstanceType']);
        }
        // validate the optional field `KernelId`
        if (data['KernelId']) { // data not null
          String.validateJSON(data['KernelId']);
        }
        // validate the optional field `RamdiskId`
        if (data['RamdiskId']) { // data not null
          String.validateJSON(data['RamdiskId']);
        }
        // validate the optional field `BlockDeviceMappings`
        if (data['BlockDeviceMappings']) { // data not null
          Array.validateJSON(data['BlockDeviceMappings']);
        }
        // validate the optional field `InstanceMonitoring`
        if (data['InstanceMonitoring']) { // data not null
          LaunchConfigurationInstanceMonitoring.validateJSON(data['InstanceMonitoring']);
        }
        // validate the optional field `SpotPrice`
        if (data['SpotPrice']) { // data not null
          String.validateJSON(data['SpotPrice']);
        }
        // validate the optional field `IamInstanceProfile`
        if (data['IamInstanceProfile']) { // data not null
          String.validateJSON(data['IamInstanceProfile']);
        }
        // validate the optional field `CreatedTime`
        if (data['CreatedTime']) { // data not null
          Date.validateJSON(data['CreatedTime']);
        }
        // validate the optional field `EbsOptimized`
        if (data['EbsOptimized']) { // data not null
          Boolean.validateJSON(data['EbsOptimized']);
        }
        // validate the optional field `AssociatePublicIpAddress`
        if (data['AssociatePublicIpAddress']) { // data not null
          Boolean.validateJSON(data['AssociatePublicIpAddress']);
        }
        // validate the optional field `PlacementTenancy`
        if (data['PlacementTenancy']) { // data not null
          String.validateJSON(data['PlacementTenancy']);
        }
        // validate the optional field `MetadataOptions`
        if (data['MetadataOptions']) { // data not null
          CreateLaunchConfigurationTypeMetadataOptions.validateJSON(data['MetadataOptions']);
        }

        return true;
    }


}

LaunchConfiguration.RequiredProperties = ["LaunchConfigurationName", "ImageId", "InstanceType", "CreatedTime"];

/**
 * @member {String} LaunchConfigurationName
 */
LaunchConfiguration.prototype['LaunchConfigurationName'] = undefined;

/**
 * @member {String} LaunchConfigurationARN
 */
LaunchConfiguration.prototype['LaunchConfigurationARN'] = undefined;

/**
 * @member {String} ImageId
 */
LaunchConfiguration.prototype['ImageId'] = undefined;

/**
 * @member {String} KeyName
 */
LaunchConfiguration.prototype['KeyName'] = undefined;

/**
 * @member {Array} SecurityGroups
 */
LaunchConfiguration.prototype['SecurityGroups'] = undefined;

/**
 * @member {String} ClassicLinkVPCId
 */
LaunchConfiguration.prototype['ClassicLinkVPCId'] = undefined;

/**
 * @member {Array} ClassicLinkVPCSecurityGroups
 */
LaunchConfiguration.prototype['ClassicLinkVPCSecurityGroups'] = undefined;

/**
 * @member {String} UserData
 */
LaunchConfiguration.prototype['UserData'] = undefined;

/**
 * @member {String} InstanceType
 */
LaunchConfiguration.prototype['InstanceType'] = undefined;

/**
 * @member {String} KernelId
 */
LaunchConfiguration.prototype['KernelId'] = undefined;

/**
 * @member {String} RamdiskId
 */
LaunchConfiguration.prototype['RamdiskId'] = undefined;

/**
 * @member {Array} BlockDeviceMappings
 */
LaunchConfiguration.prototype['BlockDeviceMappings'] = undefined;

/**
 * @member {module:model/LaunchConfigurationInstanceMonitoring} InstanceMonitoring
 */
LaunchConfiguration.prototype['InstanceMonitoring'] = undefined;

/**
 * @member {String} SpotPrice
 */
LaunchConfiguration.prototype['SpotPrice'] = undefined;

/**
 * @member {String} IamInstanceProfile
 */
LaunchConfiguration.prototype['IamInstanceProfile'] = undefined;

/**
 * @member {Date} CreatedTime
 */
LaunchConfiguration.prototype['CreatedTime'] = undefined;

/**
 * @member {Boolean} EbsOptimized
 */
LaunchConfiguration.prototype['EbsOptimized'] = undefined;

/**
 * @member {Boolean} AssociatePublicIpAddress
 */
LaunchConfiguration.prototype['AssociatePublicIpAddress'] = undefined;

/**
 * @member {String} PlacementTenancy
 */
LaunchConfiguration.prototype['PlacementTenancy'] = undefined;

/**
 * @member {module:model/CreateLaunchConfigurationTypeMetadataOptions} MetadataOptions
 */
LaunchConfiguration.prototype['MetadataOptions'] = undefined;






export default LaunchConfiguration;

