/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateAutoScalingGroupTypeMixedInstancesPolicy from './CreateAutoScalingGroupTypeMixedInstancesPolicy';
import UpdateAutoScalingGroupTypeLaunchTemplate from './UpdateAutoScalingGroupTypeLaunchTemplate';

/**
 * The UpdateAutoScalingGroupType model module.
 * @module model/UpdateAutoScalingGroupType
 * @version 2011-01-01
 */
class UpdateAutoScalingGroupType {
    /**
     * Constructs a new <code>UpdateAutoScalingGroupType</code>.
     * @alias module:model/UpdateAutoScalingGroupType
     * @param autoScalingGroupName {String} 
     */
    constructor(autoScalingGroupName) { 
        
        UpdateAutoScalingGroupType.initialize(this, autoScalingGroupName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, autoScalingGroupName) { 
        obj['AutoScalingGroupName'] = autoScalingGroupName;
    }

    /**
     * Constructs a <code>UpdateAutoScalingGroupType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateAutoScalingGroupType} obj Optional instance to populate.
     * @return {module:model/UpdateAutoScalingGroupType} The populated <code>UpdateAutoScalingGroupType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateAutoScalingGroupType();

            if (data.hasOwnProperty('AutoScalingGroupName')) {
                obj['AutoScalingGroupName'] = ApiClient.convertToType(data['AutoScalingGroupName'], 'String');
            }
            if (data.hasOwnProperty('LaunchConfigurationName')) {
                obj['LaunchConfigurationName'] = ApiClient.convertToType(data['LaunchConfigurationName'], 'String');
            }
            if (data.hasOwnProperty('LaunchTemplate')) {
                obj['LaunchTemplate'] = UpdateAutoScalingGroupTypeLaunchTemplate.constructFromObject(data['LaunchTemplate']);
            }
            if (data.hasOwnProperty('MixedInstancesPolicy')) {
                obj['MixedInstancesPolicy'] = CreateAutoScalingGroupTypeMixedInstancesPolicy.constructFromObject(data['MixedInstancesPolicy']);
            }
            if (data.hasOwnProperty('MinSize')) {
                obj['MinSize'] = ApiClient.convertToType(data['MinSize'], 'Number');
            }
            if (data.hasOwnProperty('MaxSize')) {
                obj['MaxSize'] = ApiClient.convertToType(data['MaxSize'], 'Number');
            }
            if (data.hasOwnProperty('DesiredCapacity')) {
                obj['DesiredCapacity'] = ApiClient.convertToType(data['DesiredCapacity'], 'Number');
            }
            if (data.hasOwnProperty('DefaultCooldown')) {
                obj['DefaultCooldown'] = ApiClient.convertToType(data['DefaultCooldown'], 'Number');
            }
            if (data.hasOwnProperty('AvailabilityZones')) {
                obj['AvailabilityZones'] = ApiClient.convertToType(data['AvailabilityZones'], Array);
            }
            if (data.hasOwnProperty('HealthCheckType')) {
                obj['HealthCheckType'] = ApiClient.convertToType(data['HealthCheckType'], 'String');
            }
            if (data.hasOwnProperty('HealthCheckGracePeriod')) {
                obj['HealthCheckGracePeriod'] = ApiClient.convertToType(data['HealthCheckGracePeriod'], 'Number');
            }
            if (data.hasOwnProperty('PlacementGroup')) {
                obj['PlacementGroup'] = ApiClient.convertToType(data['PlacementGroup'], 'String');
            }
            if (data.hasOwnProperty('VPCZoneIdentifier')) {
                obj['VPCZoneIdentifier'] = ApiClient.convertToType(data['VPCZoneIdentifier'], 'String');
            }
            if (data.hasOwnProperty('TerminationPolicies')) {
                obj['TerminationPolicies'] = ApiClient.convertToType(data['TerminationPolicies'], Array);
            }
            if (data.hasOwnProperty('NewInstancesProtectedFromScaleIn')) {
                obj['NewInstancesProtectedFromScaleIn'] = ApiClient.convertToType(data['NewInstancesProtectedFromScaleIn'], 'Boolean');
            }
            if (data.hasOwnProperty('ServiceLinkedRoleARN')) {
                obj['ServiceLinkedRoleARN'] = ApiClient.convertToType(data['ServiceLinkedRoleARN'], 'String');
            }
            if (data.hasOwnProperty('MaxInstanceLifetime')) {
                obj['MaxInstanceLifetime'] = ApiClient.convertToType(data['MaxInstanceLifetime'], 'Number');
            }
            if (data.hasOwnProperty('CapacityRebalance')) {
                obj['CapacityRebalance'] = ApiClient.convertToType(data['CapacityRebalance'], 'Boolean');
            }
            if (data.hasOwnProperty('Context')) {
                obj['Context'] = ApiClient.convertToType(data['Context'], 'String');
            }
            if (data.hasOwnProperty('DesiredCapacityType')) {
                obj['DesiredCapacityType'] = ApiClient.convertToType(data['DesiredCapacityType'], 'String');
            }
            if (data.hasOwnProperty('DefaultInstanceWarmup')) {
                obj['DefaultInstanceWarmup'] = ApiClient.convertToType(data['DefaultInstanceWarmup'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateAutoScalingGroupType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateAutoScalingGroupType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateAutoScalingGroupType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AutoScalingGroupName`
        if (data['AutoScalingGroupName']) { // data not null
          String.validateJSON(data['AutoScalingGroupName']);
        }
        // validate the optional field `LaunchConfigurationName`
        if (data['LaunchConfigurationName']) { // data not null
          String.validateJSON(data['LaunchConfigurationName']);
        }
        // validate the optional field `LaunchTemplate`
        if (data['LaunchTemplate']) { // data not null
          UpdateAutoScalingGroupTypeLaunchTemplate.validateJSON(data['LaunchTemplate']);
        }
        // validate the optional field `MixedInstancesPolicy`
        if (data['MixedInstancesPolicy']) { // data not null
          CreateAutoScalingGroupTypeMixedInstancesPolicy.validateJSON(data['MixedInstancesPolicy']);
        }
        // validate the optional field `MinSize`
        if (data['MinSize']) { // data not null
          Number.validateJSON(data['MinSize']);
        }
        // validate the optional field `MaxSize`
        if (data['MaxSize']) { // data not null
          Number.validateJSON(data['MaxSize']);
        }
        // validate the optional field `DesiredCapacity`
        if (data['DesiredCapacity']) { // data not null
          Number.validateJSON(data['DesiredCapacity']);
        }
        // validate the optional field `DefaultCooldown`
        if (data['DefaultCooldown']) { // data not null
          Number.validateJSON(data['DefaultCooldown']);
        }
        // validate the optional field `AvailabilityZones`
        if (data['AvailabilityZones']) { // data not null
          Array.validateJSON(data['AvailabilityZones']);
        }
        // validate the optional field `HealthCheckType`
        if (data['HealthCheckType']) { // data not null
          String.validateJSON(data['HealthCheckType']);
        }
        // validate the optional field `HealthCheckGracePeriod`
        if (data['HealthCheckGracePeriod']) { // data not null
          Number.validateJSON(data['HealthCheckGracePeriod']);
        }
        // validate the optional field `PlacementGroup`
        if (data['PlacementGroup']) { // data not null
          String.validateJSON(data['PlacementGroup']);
        }
        // validate the optional field `VPCZoneIdentifier`
        if (data['VPCZoneIdentifier']) { // data not null
          String.validateJSON(data['VPCZoneIdentifier']);
        }
        // validate the optional field `TerminationPolicies`
        if (data['TerminationPolicies']) { // data not null
          Array.validateJSON(data['TerminationPolicies']);
        }
        // validate the optional field `NewInstancesProtectedFromScaleIn`
        if (data['NewInstancesProtectedFromScaleIn']) { // data not null
          Boolean.validateJSON(data['NewInstancesProtectedFromScaleIn']);
        }
        // validate the optional field `ServiceLinkedRoleARN`
        if (data['ServiceLinkedRoleARN']) { // data not null
          String.validateJSON(data['ServiceLinkedRoleARN']);
        }
        // validate the optional field `MaxInstanceLifetime`
        if (data['MaxInstanceLifetime']) { // data not null
          Number.validateJSON(data['MaxInstanceLifetime']);
        }
        // validate the optional field `CapacityRebalance`
        if (data['CapacityRebalance']) { // data not null
          Boolean.validateJSON(data['CapacityRebalance']);
        }
        // validate the optional field `Context`
        if (data['Context']) { // data not null
          String.validateJSON(data['Context']);
        }
        // validate the optional field `DesiredCapacityType`
        if (data['DesiredCapacityType']) { // data not null
          String.validateJSON(data['DesiredCapacityType']);
        }
        // validate the optional field `DefaultInstanceWarmup`
        if (data['DefaultInstanceWarmup']) { // data not null
          Number.validateJSON(data['DefaultInstanceWarmup']);
        }

        return true;
    }


}

UpdateAutoScalingGroupType.RequiredProperties = ["AutoScalingGroupName"];

/**
 * @member {String} AutoScalingGroupName
 */
UpdateAutoScalingGroupType.prototype['AutoScalingGroupName'] = undefined;

/**
 * @member {String} LaunchConfigurationName
 */
UpdateAutoScalingGroupType.prototype['LaunchConfigurationName'] = undefined;

/**
 * @member {module:model/UpdateAutoScalingGroupTypeLaunchTemplate} LaunchTemplate
 */
UpdateAutoScalingGroupType.prototype['LaunchTemplate'] = undefined;

/**
 * @member {module:model/CreateAutoScalingGroupTypeMixedInstancesPolicy} MixedInstancesPolicy
 */
UpdateAutoScalingGroupType.prototype['MixedInstancesPolicy'] = undefined;

/**
 * @member {Number} MinSize
 */
UpdateAutoScalingGroupType.prototype['MinSize'] = undefined;

/**
 * @member {Number} MaxSize
 */
UpdateAutoScalingGroupType.prototype['MaxSize'] = undefined;

/**
 * @member {Number} DesiredCapacity
 */
UpdateAutoScalingGroupType.prototype['DesiredCapacity'] = undefined;

/**
 * @member {Number} DefaultCooldown
 */
UpdateAutoScalingGroupType.prototype['DefaultCooldown'] = undefined;

/**
 * @member {Array} AvailabilityZones
 */
UpdateAutoScalingGroupType.prototype['AvailabilityZones'] = undefined;

/**
 * @member {String} HealthCheckType
 */
UpdateAutoScalingGroupType.prototype['HealthCheckType'] = undefined;

/**
 * @member {Number} HealthCheckGracePeriod
 */
UpdateAutoScalingGroupType.prototype['HealthCheckGracePeriod'] = undefined;

/**
 * @member {String} PlacementGroup
 */
UpdateAutoScalingGroupType.prototype['PlacementGroup'] = undefined;

/**
 * @member {String} VPCZoneIdentifier
 */
UpdateAutoScalingGroupType.prototype['VPCZoneIdentifier'] = undefined;

/**
 * @member {Array} TerminationPolicies
 */
UpdateAutoScalingGroupType.prototype['TerminationPolicies'] = undefined;

/**
 * @member {Boolean} NewInstancesProtectedFromScaleIn
 */
UpdateAutoScalingGroupType.prototype['NewInstancesProtectedFromScaleIn'] = undefined;

/**
 * @member {String} ServiceLinkedRoleARN
 */
UpdateAutoScalingGroupType.prototype['ServiceLinkedRoleARN'] = undefined;

/**
 * @member {Number} MaxInstanceLifetime
 */
UpdateAutoScalingGroupType.prototype['MaxInstanceLifetime'] = undefined;

/**
 * @member {Boolean} CapacityRebalance
 */
UpdateAutoScalingGroupType.prototype['CapacityRebalance'] = undefined;

/**
 * @member {String} Context
 */
UpdateAutoScalingGroupType.prototype['Context'] = undefined;

/**
 * @member {String} DesiredCapacityType
 */
UpdateAutoScalingGroupType.prototype['DesiredCapacityType'] = undefined;

/**
 * @member {Number} DefaultInstanceWarmup
 */
UpdateAutoScalingGroupType.prototype['DefaultInstanceWarmup'] = undefined;






export default UpdateAutoScalingGroupType;

