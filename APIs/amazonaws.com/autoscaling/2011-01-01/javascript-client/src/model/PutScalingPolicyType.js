/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PutScalingPolicyTypePredictiveScalingConfiguration from './PutScalingPolicyTypePredictiveScalingConfiguration';
import PutScalingPolicyTypeTargetTrackingConfiguration from './PutScalingPolicyTypeTargetTrackingConfiguration';

/**
 * The PutScalingPolicyType model module.
 * @module model/PutScalingPolicyType
 * @version 2011-01-01
 */
class PutScalingPolicyType {
    /**
     * Constructs a new <code>PutScalingPolicyType</code>.
     * @alias module:model/PutScalingPolicyType
     * @param autoScalingGroupName {String} 
     * @param policyName {String} 
     */
    constructor(autoScalingGroupName, policyName) { 
        
        PutScalingPolicyType.initialize(this, autoScalingGroupName, policyName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, autoScalingGroupName, policyName) { 
        obj['AutoScalingGroupName'] = autoScalingGroupName;
        obj['PolicyName'] = policyName;
    }

    /**
     * Constructs a <code>PutScalingPolicyType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutScalingPolicyType} obj Optional instance to populate.
     * @return {module:model/PutScalingPolicyType} The populated <code>PutScalingPolicyType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutScalingPolicyType();

            if (data.hasOwnProperty('AutoScalingGroupName')) {
                obj['AutoScalingGroupName'] = ApiClient.convertToType(data['AutoScalingGroupName'], 'String');
            }
            if (data.hasOwnProperty('PolicyName')) {
                obj['PolicyName'] = ApiClient.convertToType(data['PolicyName'], 'String');
            }
            if (data.hasOwnProperty('PolicyType')) {
                obj['PolicyType'] = ApiClient.convertToType(data['PolicyType'], 'String');
            }
            if (data.hasOwnProperty('AdjustmentType')) {
                obj['AdjustmentType'] = ApiClient.convertToType(data['AdjustmentType'], 'String');
            }
            if (data.hasOwnProperty('MinAdjustmentStep')) {
                obj['MinAdjustmentStep'] = ApiClient.convertToType(data['MinAdjustmentStep'], 'Number');
            }
            if (data.hasOwnProperty('MinAdjustmentMagnitude')) {
                obj['MinAdjustmentMagnitude'] = ApiClient.convertToType(data['MinAdjustmentMagnitude'], 'Number');
            }
            if (data.hasOwnProperty('ScalingAdjustment')) {
                obj['ScalingAdjustment'] = ApiClient.convertToType(data['ScalingAdjustment'], 'Number');
            }
            if (data.hasOwnProperty('Cooldown')) {
                obj['Cooldown'] = ApiClient.convertToType(data['Cooldown'], 'Number');
            }
            if (data.hasOwnProperty('MetricAggregationType')) {
                obj['MetricAggregationType'] = ApiClient.convertToType(data['MetricAggregationType'], 'String');
            }
            if (data.hasOwnProperty('StepAdjustments')) {
                obj['StepAdjustments'] = ApiClient.convertToType(data['StepAdjustments'], Array);
            }
            if (data.hasOwnProperty('EstimatedInstanceWarmup')) {
                obj['EstimatedInstanceWarmup'] = ApiClient.convertToType(data['EstimatedInstanceWarmup'], 'Number');
            }
            if (data.hasOwnProperty('TargetTrackingConfiguration')) {
                obj['TargetTrackingConfiguration'] = PutScalingPolicyTypeTargetTrackingConfiguration.constructFromObject(data['TargetTrackingConfiguration']);
            }
            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('PredictiveScalingConfiguration')) {
                obj['PredictiveScalingConfiguration'] = PutScalingPolicyTypePredictiveScalingConfiguration.constructFromObject(data['PredictiveScalingConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutScalingPolicyType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutScalingPolicyType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutScalingPolicyType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AutoScalingGroupName`
        if (data['AutoScalingGroupName']) { // data not null
          String.validateJSON(data['AutoScalingGroupName']);
        }
        // validate the optional field `PolicyName`
        if (data['PolicyName']) { // data not null
          String.validateJSON(data['PolicyName']);
        }
        // validate the optional field `PolicyType`
        if (data['PolicyType']) { // data not null
          String.validateJSON(data['PolicyType']);
        }
        // validate the optional field `AdjustmentType`
        if (data['AdjustmentType']) { // data not null
          String.validateJSON(data['AdjustmentType']);
        }
        // validate the optional field `MinAdjustmentStep`
        if (data['MinAdjustmentStep']) { // data not null
          Number.validateJSON(data['MinAdjustmentStep']);
        }
        // validate the optional field `MinAdjustmentMagnitude`
        if (data['MinAdjustmentMagnitude']) { // data not null
          Number.validateJSON(data['MinAdjustmentMagnitude']);
        }
        // validate the optional field `ScalingAdjustment`
        if (data['ScalingAdjustment']) { // data not null
          Number.validateJSON(data['ScalingAdjustment']);
        }
        // validate the optional field `Cooldown`
        if (data['Cooldown']) { // data not null
          Number.validateJSON(data['Cooldown']);
        }
        // validate the optional field `MetricAggregationType`
        if (data['MetricAggregationType']) { // data not null
          String.validateJSON(data['MetricAggregationType']);
        }
        // validate the optional field `StepAdjustments`
        if (data['StepAdjustments']) { // data not null
          Array.validateJSON(data['StepAdjustments']);
        }
        // validate the optional field `EstimatedInstanceWarmup`
        if (data['EstimatedInstanceWarmup']) { // data not null
          Number.validateJSON(data['EstimatedInstanceWarmup']);
        }
        // validate the optional field `TargetTrackingConfiguration`
        if (data['TargetTrackingConfiguration']) { // data not null
          PutScalingPolicyTypeTargetTrackingConfiguration.validateJSON(data['TargetTrackingConfiguration']);
        }
        // validate the optional field `Enabled`
        if (data['Enabled']) { // data not null
          Boolean.validateJSON(data['Enabled']);
        }
        // validate the optional field `PredictiveScalingConfiguration`
        if (data['PredictiveScalingConfiguration']) { // data not null
          PutScalingPolicyTypePredictiveScalingConfiguration.validateJSON(data['PredictiveScalingConfiguration']);
        }

        return true;
    }


}

PutScalingPolicyType.RequiredProperties = ["AutoScalingGroupName", "PolicyName"];

/**
 * @member {String} AutoScalingGroupName
 */
PutScalingPolicyType.prototype['AutoScalingGroupName'] = undefined;

/**
 * @member {String} PolicyName
 */
PutScalingPolicyType.prototype['PolicyName'] = undefined;

/**
 * @member {String} PolicyType
 */
PutScalingPolicyType.prototype['PolicyType'] = undefined;

/**
 * @member {String} AdjustmentType
 */
PutScalingPolicyType.prototype['AdjustmentType'] = undefined;

/**
 * @member {Number} MinAdjustmentStep
 */
PutScalingPolicyType.prototype['MinAdjustmentStep'] = undefined;

/**
 * @member {Number} MinAdjustmentMagnitude
 */
PutScalingPolicyType.prototype['MinAdjustmentMagnitude'] = undefined;

/**
 * @member {Number} ScalingAdjustment
 */
PutScalingPolicyType.prototype['ScalingAdjustment'] = undefined;

/**
 * @member {Number} Cooldown
 */
PutScalingPolicyType.prototype['Cooldown'] = undefined;

/**
 * @member {String} MetricAggregationType
 */
PutScalingPolicyType.prototype['MetricAggregationType'] = undefined;

/**
 * @member {Array} StepAdjustments
 */
PutScalingPolicyType.prototype['StepAdjustments'] = undefined;

/**
 * @member {Number} EstimatedInstanceWarmup
 */
PutScalingPolicyType.prototype['EstimatedInstanceWarmup'] = undefined;

/**
 * @member {module:model/PutScalingPolicyTypeTargetTrackingConfiguration} TargetTrackingConfiguration
 */
PutScalingPolicyType.prototype['TargetTrackingConfiguration'] = undefined;

/**
 * @member {Boolean} Enabled
 */
PutScalingPolicyType.prototype['Enabled'] = undefined;

/**
 * @member {module:model/PutScalingPolicyTypePredictiveScalingConfiguration} PredictiveScalingConfiguration
 */
PutScalingPolicyType.prototype['PredictiveScalingConfiguration'] = undefined;






export default PutScalingPolicyType;

