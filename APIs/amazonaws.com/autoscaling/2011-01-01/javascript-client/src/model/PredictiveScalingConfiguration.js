/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PredictiveScalingMaxCapacityBreachBehavior from './PredictiveScalingMaxCapacityBreachBehavior';
import PredictiveScalingMode from './PredictiveScalingMode';

/**
 * The PredictiveScalingConfiguration model module.
 * @module model/PredictiveScalingConfiguration
 * @version 2011-01-01
 */
class PredictiveScalingConfiguration {
    /**
     * Constructs a new <code>PredictiveScalingConfiguration</code>.
     * Represents a predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
     * @alias module:model/PredictiveScalingConfiguration
     * @param metricSpecifications {Array} 
     */
    constructor(metricSpecifications) { 
        
        PredictiveScalingConfiguration.initialize(this, metricSpecifications);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metricSpecifications) { 
        obj['MetricSpecifications'] = metricSpecifications;
    }

    /**
     * Constructs a <code>PredictiveScalingConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PredictiveScalingConfiguration} obj Optional instance to populate.
     * @return {module:model/PredictiveScalingConfiguration} The populated <code>PredictiveScalingConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PredictiveScalingConfiguration();

            if (data.hasOwnProperty('MetricSpecifications')) {
                obj['MetricSpecifications'] = ApiClient.convertToType(data['MetricSpecifications'], Array);
            }
            if (data.hasOwnProperty('Mode')) {
                obj['Mode'] = ApiClient.convertToType(data['Mode'], PredictiveScalingMode);
            }
            if (data.hasOwnProperty('SchedulingBufferTime')) {
                obj['SchedulingBufferTime'] = ApiClient.convertToType(data['SchedulingBufferTime'], 'Number');
            }
            if (data.hasOwnProperty('MaxCapacityBreachBehavior')) {
                obj['MaxCapacityBreachBehavior'] = ApiClient.convertToType(data['MaxCapacityBreachBehavior'], PredictiveScalingMaxCapacityBreachBehavior);
            }
            if (data.hasOwnProperty('MaxCapacityBuffer')) {
                obj['MaxCapacityBuffer'] = ApiClient.convertToType(data['MaxCapacityBuffer'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PredictiveScalingConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PredictiveScalingConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PredictiveScalingConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `MetricSpecifications`
        if (data['MetricSpecifications']) { // data not null
          Array.validateJSON(data['MetricSpecifications']);
        }
        // validate the optional field `Mode`
        if (data['Mode']) { // data not null
          PredictiveScalingMode.validateJSON(data['Mode']);
        }
        // validate the optional field `SchedulingBufferTime`
        if (data['SchedulingBufferTime']) { // data not null
          Number.validateJSON(data['SchedulingBufferTime']);
        }
        // validate the optional field `MaxCapacityBreachBehavior`
        if (data['MaxCapacityBreachBehavior']) { // data not null
          PredictiveScalingMaxCapacityBreachBehavior.validateJSON(data['MaxCapacityBreachBehavior']);
        }
        // validate the optional field `MaxCapacityBuffer`
        if (data['MaxCapacityBuffer']) { // data not null
          Number.validateJSON(data['MaxCapacityBuffer']);
        }

        return true;
    }


}

PredictiveScalingConfiguration.RequiredProperties = ["MetricSpecifications"];

/**
 * @member {Array} MetricSpecifications
 */
PredictiveScalingConfiguration.prototype['MetricSpecifications'] = undefined;

/**
 * @member {module:model/PredictiveScalingMode} Mode
 */
PredictiveScalingConfiguration.prototype['Mode'] = undefined;

/**
 * @member {Number} SchedulingBufferTime
 */
PredictiveScalingConfiguration.prototype['SchedulingBufferTime'] = undefined;

/**
 * @member {module:model/PredictiveScalingMaxCapacityBreachBehavior} MaxCapacityBreachBehavior
 */
PredictiveScalingConfiguration.prototype['MaxCapacityBreachBehavior'] = undefined;

/**
 * @member {Number} MaxCapacityBuffer
 */
PredictiveScalingConfiguration.prototype['MaxCapacityBuffer'] = undefined;






export default PredictiveScalingConfiguration;

