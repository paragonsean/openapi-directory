/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StepAdjustment model module.
 * @module model/StepAdjustment
 * @version 2011-01-01
 */
class StepAdjustment {
    /**
     * Constructs a new <code>StepAdjustment</code>.
     * &lt;p&gt;Describes information used to create a step adjustment for a step scaling policy.&lt;/p&gt; &lt;p&gt;For the following examples, suppose that you have an alarm with a breach threshold of 50:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To trigger the adjustment when the metric is greater than or equal to 50 and less than 60, specify a lower bound of 0 and an upper bound of 10.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To trigger the adjustment when the metric is greater than 40 and less than or equal to 50, specify a lower bound of -10 and an upper bound of 0.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There are a few rules for the step adjustments for your step policy:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The ranges of your step adjustments can&#39;t overlap or have a gap.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;At most, one step adjustment can have a null lower bound. If one step adjustment has a negative lower bound, then there must be a step adjustment with a null lower bound.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;At most, one step adjustment can have a null upper bound. If one step adjustment has a positive upper bound, then there must be a step adjustment with a null upper bound.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The upper and lower bound can&#39;t be null in the same step adjustment.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-steps\&quot;&gt;Step adjustments&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @alias module:model/StepAdjustment
     * @param scalingAdjustment {Number} 
     */
    constructor(scalingAdjustment) { 
        
        StepAdjustment.initialize(this, scalingAdjustment);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, scalingAdjustment) { 
        obj['ScalingAdjustment'] = scalingAdjustment;
    }

    /**
     * Constructs a <code>StepAdjustment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StepAdjustment} obj Optional instance to populate.
     * @return {module:model/StepAdjustment} The populated <code>StepAdjustment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StepAdjustment();

            if (data.hasOwnProperty('MetricIntervalLowerBound')) {
                obj['MetricIntervalLowerBound'] = ApiClient.convertToType(data['MetricIntervalLowerBound'], 'Number');
            }
            if (data.hasOwnProperty('MetricIntervalUpperBound')) {
                obj['MetricIntervalUpperBound'] = ApiClient.convertToType(data['MetricIntervalUpperBound'], 'Number');
            }
            if (data.hasOwnProperty('ScalingAdjustment')) {
                obj['ScalingAdjustment'] = ApiClient.convertToType(data['ScalingAdjustment'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StepAdjustment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StepAdjustment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StepAdjustment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `MetricIntervalLowerBound`
        if (data['MetricIntervalLowerBound']) { // data not null
          Number.validateJSON(data['MetricIntervalLowerBound']);
        }
        // validate the optional field `MetricIntervalUpperBound`
        if (data['MetricIntervalUpperBound']) { // data not null
          Number.validateJSON(data['MetricIntervalUpperBound']);
        }
        // validate the optional field `ScalingAdjustment`
        if (data['ScalingAdjustment']) { // data not null
          Number.validateJSON(data['ScalingAdjustment']);
        }

        return true;
    }


}

StepAdjustment.RequiredProperties = ["ScalingAdjustment"];

/**
 * @member {Number} MetricIntervalLowerBound
 */
StepAdjustment.prototype['MetricIntervalLowerBound'] = undefined;

/**
 * @member {Number} MetricIntervalUpperBound
 */
StepAdjustment.prototype['MetricIntervalUpperBound'] = undefined;

/**
 * @member {Number} ScalingAdjustment
 */
StepAdjustment.prototype['ScalingAdjustment'] = undefined;






export default StepAdjustment;

