/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AutoScaling);
  }
}(this, function(expect, AutoScaling) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AutoScaling.CreateAutoScalingGroupType();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateAutoScalingGroupType', function() {
    it('should create an instance of CreateAutoScalingGroupType', function() {
      // uncomment below and update the code to test CreateAutoScalingGroupType
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be.a(AutoScaling.CreateAutoScalingGroupType);
    });

    it('should have the property autoScalingGroupName (base name: "AutoScalingGroupName")', function() {
      // uncomment below and update the code to test the property autoScalingGroupName
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property launchConfigurationName (base name: "LaunchConfigurationName")', function() {
      // uncomment below and update the code to test the property launchConfigurationName
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property launchTemplate (base name: "LaunchTemplate")', function() {
      // uncomment below and update the code to test the property launchTemplate
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property mixedInstancesPolicy (base name: "MixedInstancesPolicy")', function() {
      // uncomment below and update the code to test the property mixedInstancesPolicy
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property instanceId (base name: "InstanceId")', function() {
      // uncomment below and update the code to test the property instanceId
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property minSize (base name: "MinSize")', function() {
      // uncomment below and update the code to test the property minSize
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property maxSize (base name: "MaxSize")', function() {
      // uncomment below and update the code to test the property maxSize
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property desiredCapacity (base name: "DesiredCapacity")', function() {
      // uncomment below and update the code to test the property desiredCapacity
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property defaultCooldown (base name: "DefaultCooldown")', function() {
      // uncomment below and update the code to test the property defaultCooldown
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property availabilityZones (base name: "AvailabilityZones")', function() {
      // uncomment below and update the code to test the property availabilityZones
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancerNames (base name: "LoadBalancerNames")', function() {
      // uncomment below and update the code to test the property loadBalancerNames
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property targetGroupARNs (base name: "TargetGroupARNs")', function() {
      // uncomment below and update the code to test the property targetGroupARNs
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property healthCheckType (base name: "HealthCheckType")', function() {
      // uncomment below and update the code to test the property healthCheckType
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property healthCheckGracePeriod (base name: "HealthCheckGracePeriod")', function() {
      // uncomment below and update the code to test the property healthCheckGracePeriod
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property placementGroup (base name: "PlacementGroup")', function() {
      // uncomment below and update the code to test the property placementGroup
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property vPCZoneIdentifier (base name: "VPCZoneIdentifier")', function() {
      // uncomment below and update the code to test the property vPCZoneIdentifier
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property terminationPolicies (base name: "TerminationPolicies")', function() {
      // uncomment below and update the code to test the property terminationPolicies
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property newInstancesProtectedFromScaleIn (base name: "NewInstancesProtectedFromScaleIn")', function() {
      // uncomment below and update the code to test the property newInstancesProtectedFromScaleIn
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property capacityRebalance (base name: "CapacityRebalance")', function() {
      // uncomment below and update the code to test the property capacityRebalance
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property lifecycleHookSpecificationList (base name: "LifecycleHookSpecificationList")', function() {
      // uncomment below and update the code to test the property lifecycleHookSpecificationList
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property serviceLinkedRoleARN (base name: "ServiceLinkedRoleARN")', function() {
      // uncomment below and update the code to test the property serviceLinkedRoleARN
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property maxInstanceLifetime (base name: "MaxInstanceLifetime")', function() {
      // uncomment below and update the code to test the property maxInstanceLifetime
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property context (base name: "Context")', function() {
      // uncomment below and update the code to test the property context
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property desiredCapacityType (base name: "DesiredCapacityType")', function() {
      // uncomment below and update the code to test the property desiredCapacityType
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property defaultInstanceWarmup (base name: "DefaultInstanceWarmup")', function() {
      // uncomment below and update the code to test the property defaultInstanceWarmup
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

    it('should have the property trafficSources (base name: "TrafficSources")', function() {
      // uncomment below and update the code to test the property trafficSources
      //var instance = new AutoScaling.CreateAutoScalingGroupType();
      //expect(instance).to.be();
    });

  });

}));
