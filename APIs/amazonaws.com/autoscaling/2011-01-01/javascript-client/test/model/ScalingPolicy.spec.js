/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AutoScaling);
  }
}(this, function(expect, AutoScaling) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AutoScaling.ScalingPolicy();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ScalingPolicy', function() {
    it('should create an instance of ScalingPolicy', function() {
      // uncomment below and update the code to test ScalingPolicy
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be.a(AutoScaling.ScalingPolicy);
    });

    it('should have the property autoScalingGroupName (base name: "AutoScalingGroupName")', function() {
      // uncomment below and update the code to test the property autoScalingGroupName
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property policyName (base name: "PolicyName")', function() {
      // uncomment below and update the code to test the property policyName
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property policyARN (base name: "PolicyARN")', function() {
      // uncomment below and update the code to test the property policyARN
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property policyType (base name: "PolicyType")', function() {
      // uncomment below and update the code to test the property policyType
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property adjustmentType (base name: "AdjustmentType")', function() {
      // uncomment below and update the code to test the property adjustmentType
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property minAdjustmentStep (base name: "MinAdjustmentStep")', function() {
      // uncomment below and update the code to test the property minAdjustmentStep
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property minAdjustmentMagnitude (base name: "MinAdjustmentMagnitude")', function() {
      // uncomment below and update the code to test the property minAdjustmentMagnitude
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property scalingAdjustment (base name: "ScalingAdjustment")', function() {
      // uncomment below and update the code to test the property scalingAdjustment
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property cooldown (base name: "Cooldown")', function() {
      // uncomment below and update the code to test the property cooldown
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property stepAdjustments (base name: "StepAdjustments")', function() {
      // uncomment below and update the code to test the property stepAdjustments
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property metricAggregationType (base name: "MetricAggregationType")', function() {
      // uncomment below and update the code to test the property metricAggregationType
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property estimatedInstanceWarmup (base name: "EstimatedInstanceWarmup")', function() {
      // uncomment below and update the code to test the property estimatedInstanceWarmup
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property alarms (base name: "Alarms")', function() {
      // uncomment below and update the code to test the property alarms
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property targetTrackingConfiguration (base name: "TargetTrackingConfiguration")', function() {
      // uncomment below and update the code to test the property targetTrackingConfiguration
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "Enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

    it('should have the property predictiveScalingConfiguration (base name: "PredictiveScalingConfiguration")', function() {
      // uncomment below and update the code to test the property predictiveScalingConfiguration
      //var instance = new AutoScaling.ScalingPolicy();
      //expect(instance).to.be();
    });

  });

}));
