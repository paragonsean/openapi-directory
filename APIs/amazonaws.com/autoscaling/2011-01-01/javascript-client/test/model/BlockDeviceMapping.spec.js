/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AutoScaling);
  }
}(this, function(expect, AutoScaling) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AutoScaling.BlockDeviceMapping();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BlockDeviceMapping', function() {
    it('should create an instance of BlockDeviceMapping', function() {
      // uncomment below and update the code to test BlockDeviceMapping
      //var instance = new AutoScaling.BlockDeviceMapping();
      //expect(instance).to.be.a(AutoScaling.BlockDeviceMapping);
    });

    it('should have the property virtualName (base name: "VirtualName")', function() {
      // uncomment below and update the code to test the property virtualName
      //var instance = new AutoScaling.BlockDeviceMapping();
      //expect(instance).to.be();
    });

    it('should have the property deviceName (base name: "DeviceName")', function() {
      // uncomment below and update the code to test the property deviceName
      //var instance = new AutoScaling.BlockDeviceMapping();
      //expect(instance).to.be();
    });

    it('should have the property ebs (base name: "Ebs")', function() {
      // uncomment below and update the code to test the property ebs
      //var instance = new AutoScaling.BlockDeviceMapping();
      //expect(instance).to.be();
    });

    it('should have the property noDevice (base name: "NoDevice")', function() {
      // uncomment below and update the code to test the property noDevice
      //var instance = new AutoScaling.BlockDeviceMapping();
      //expect(instance).to.be();
    });

  });

}));
