/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivitiesType.h"
#include "OAIActivityType.h"
#include "OAIAttachInstancesQuery.h"
#include "OAIAttachLoadBalancerTargetGroupsType.h"
#include "OAIAttachLoadBalancersType.h"
#include "OAIAttachTrafficSourcesType.h"
#include "OAIAutoScalingGroupNamesType.h"
#include "OAIAutoScalingGroupsType.h"
#include "OAIAutoScalingInstancesType.h"
#include "OAIBatchDeleteScheduledActionAnswer.h"
#include "OAIBatchDeleteScheduledActionType.h"
#include "OAIBatchPutScheduledUpdateGroupActionAnswer.h"
#include "OAIBatchPutScheduledUpdateGroupActionType.h"
#include "OAIBlockDeviceMapping.h"
#include "OAICancelInstanceRefreshAnswer.h"
#include "OAICancelInstanceRefreshType.h"
#include "OAICompleteLifecycleActionType.h"
#include "OAICreateAutoScalingGroupType.h"
#include "OAICreateLaunchConfigurationType.h"
#include "OAICreateOrUpdateTagsType.h"
#include "OAIDeleteAutoScalingGroupType.h"
#include "OAIDeleteLifecycleHookType.h"
#include "OAIDeleteNotificationConfigurationType.h"
#include "OAIDeletePolicyType.h"
#include "OAIDeleteScheduledActionType.h"
#include "OAIDeleteTagsType.h"
#include "OAIDeleteWarmPoolType.h"
#include "OAIDescribeAccountLimitsAnswer.h"
#include "OAIDescribeAdjustmentTypesAnswer.h"
#include "OAIDescribeAutoScalingInstancesType.h"
#include "OAIDescribeAutoScalingNotificationTypesAnswer.h"
#include "OAIDescribeInstanceRefreshesAnswer.h"
#include "OAIDescribeInstanceRefreshesType.h"
#include "OAIDescribeLifecycleHookTypesAnswer.h"
#include "OAIDescribeLifecycleHooksAnswer.h"
#include "OAIDescribeLifecycleHooksType.h"
#include "OAIDescribeLoadBalancerTargetGroupsRequest.h"
#include "OAIDescribeLoadBalancerTargetGroupsResponse.h"
#include "OAIDescribeLoadBalancersRequest.h"
#include "OAIDescribeLoadBalancersResponse.h"
#include "OAIDescribeMetricCollectionTypesAnswer.h"
#include "OAIDescribeNotificationConfigurationsAnswer.h"
#include "OAIDescribeNotificationConfigurationsType.h"
#include "OAIDescribePoliciesType.h"
#include "OAIDescribeScalingActivitiesType.h"
#include "OAIDescribeScheduledActionsType.h"
#include "OAIDescribeTagsType.h"
#include "OAIDescribeTerminationPolicyTypesAnswer.h"
#include "OAIDescribeTrafficSourcesRequest.h"
#include "OAIDescribeTrafficSourcesResponse.h"
#include "OAIDescribeWarmPoolAnswer.h"
#include "OAIDescribeWarmPoolType.h"
#include "OAIDetachInstancesAnswer.h"
#include "OAIDetachInstancesQuery.h"
#include "OAIDetachLoadBalancerTargetGroupsType.h"
#include "OAIDetachLoadBalancersType.h"
#include "OAIDetachTrafficSourcesType.h"
#include "OAIDisableMetricsCollectionQuery.h"
#include "OAIEnableMetricsCollectionQuery.h"
#include "OAIEnterStandbyAnswer.h"
#include "OAIEnterStandbyQuery.h"
#include "OAIExecutePolicyType.h"
#include "OAIExitStandbyAnswer.h"
#include "OAIExitStandbyQuery.h"
#include "OAIFilter.h"
#include "OAIGET_CreateAutoScalingGroup_LaunchTemplate_parameter.h"
#include "OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter.h"
#include "OAIGET_CreateLaunchConfiguration_InstanceMonitoring_parameter.h"
#include "OAIGET_CreateLaunchConfiguration_MetadataOptions_parameter.h"
#include "OAIGET_PutScalingPolicy_PredictiveScalingConfiguration_parameter.h"
#include "OAIGET_PutScalingPolicy_TargetTrackingConfiguration_parameter.h"
#include "OAIGET_PutWarmPool_InstanceReusePolicy_parameter.h"
#include "OAIGET_StartInstanceRefresh_DesiredConfiguration_parameter.h"
#include "OAIGET_StartInstanceRefresh_Preferences_parameter.h"
#include "OAIGetPredictiveScalingForecastAnswer.h"
#include "OAIGetPredictiveScalingForecastType.h"
#include "OAILaunchConfigurationNameType.h"
#include "OAILaunchConfigurationNamesType.h"
#include "OAILaunchConfigurationsType.h"
#include "OAILifecycleHookSpecification.h"
#include "OAIObject.h"
#include "OAIPoliciesType.h"
#include "OAIPolicyARNType.h"
#include "OAIProcessesType.h"
#include "OAIPutLifecycleHookType.h"
#include "OAIPutNotificationConfigurationType.h"
#include "OAIPutScalingPolicyType.h"
#include "OAIPutScheduledUpdateGroupActionType.h"
#include "OAIPutWarmPoolType.h"
#include "OAIRecordLifecycleActionHeartbeatType.h"
#include "OAIRollbackInstanceRefreshAnswer.h"
#include "OAIRollbackInstanceRefreshType.h"
#include "OAIScalingProcessQuery.h"
#include "OAIScheduledActionsType.h"
#include "OAIScheduledUpdateGroupActionRequest.h"
#include "OAISetDesiredCapacityType.h"
#include "OAISetInstanceHealthQuery.h"
#include "OAISetInstanceProtectionQuery.h"
#include "OAIStartInstanceRefreshAnswer.h"
#include "OAIStartInstanceRefreshType.h"
#include "OAIStepAdjustment.h"
#include "OAITag.h"
#include "OAITagsType.h"
#include "OAITerminateInstanceInAutoScalingGroupType.h"
#include "OAITrafficSourceIdentifier.h"
#include "OAIUpdateAutoScalingGroupType.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  instance_ids QList<QString> [optional]
    */
    virtual void gETAttachInstances(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &instance_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  target_group_arns QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAttachLoadBalancerTargetGroups(const QString &auto_scaling_group_name, const QList<QString> &target_group_arns, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  load_balancer_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAttachLoadBalancers(const QString &auto_scaling_group_name, const QList<QString> &load_balancer_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  traffic_sources QList<OAITrafficSourceIdentifier> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAttachTrafficSources(const QString &auto_scaling_group_name, const QList<OAITrafficSourceIdentifier> &traffic_sources, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  scheduled_action_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETBatchDeleteScheduledAction(const QString &auto_scaling_group_name, const QList<QString> &scheduled_action_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  scheduled_update_group_actions QList<OAIScheduledUpdateGroupActionRequest> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETBatchPutScheduledUpdateGroupAction(const QString &auto_scaling_group_name, const QList<OAIScheduledUpdateGroupActionRequest> &scheduled_update_group_actions, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCancelInstanceRefresh(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lifecycle_hook_name QString [required]
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  lifecycle_action_result QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  lifecycle_action_token QString [optional]
    * @param[in]  instance_id QString [optional]
    */
    virtual void gETCompleteLifecycleAction(const QString &lifecycle_hook_name, const QString &auto_scaling_group_name, const QString &lifecycle_action_result, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lifecycle_action_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  min_size qint32 [required]
    * @param[in]  max_size qint32 [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  launch_configuration_name QString [optional]
    * @param[in]  launch_template OAIGET_CreateAutoScalingGroup_LaunchTemplate_parameter [optional]
    * @param[in]  mixed_instances_policy OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter [optional]
    * @param[in]  instance_id QString [optional]
    * @param[in]  desired_capacity qint32 [optional]
    * @param[in]  default_cooldown qint32 [optional]
    * @param[in]  availability_zones QList<QString> [optional]
    * @param[in]  load_balancer_names QList<QString> [optional]
    * @param[in]  target_group_arns QList<QString> [optional]
    * @param[in]  health_check_type QString [optional]
    * @param[in]  health_check_grace_period qint32 [optional]
    * @param[in]  placement_group QString [optional]
    * @param[in]  vpc_zone_identifier QString [optional]
    * @param[in]  termination_policies QList<QString> [optional]
    * @param[in]  new_instances_protected_from_scale_in bool [optional]
    * @param[in]  capacity_rebalance bool [optional]
    * @param[in]  lifecycle_hook_specification_list QList<OAILifecycleHookSpecification> [optional]
    * @param[in]  tags QList<OAITag> [optional]
    * @param[in]  service_linked_role_arn QString [optional]
    * @param[in]  max_instance_lifetime qint32 [optional]
    * @param[in]  context QString [optional]
    * @param[in]  desired_capacity_type QString [optional]
    * @param[in]  default_instance_warmup qint32 [optional]
    * @param[in]  traffic_sources QList<OAITrafficSourceIdentifier> [optional]
    */
    virtual void gETCreateAutoScalingGroup(const QString &auto_scaling_group_name, const qint32 &min_size, const qint32 &max_size, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &launch_configuration_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateAutoScalingGroup_LaunchTemplate_parameter> &launch_template = ::OpenAPI::OptionalParam<OAIGET_CreateAutoScalingGroup_LaunchTemplate_parameter>(), const ::OpenAPI::OptionalParam<OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter> &mixed_instances_policy = ::OpenAPI::OptionalParam<OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter>(), const ::OpenAPI::OptionalParam<QString> &instance_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &desired_capacity = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &default_cooldown = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &availability_zones = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &load_balancer_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &target_group_arns = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &health_check_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &health_check_grace_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &placement_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vpc_zone_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &termination_policies = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &new_instances_protected_from_scale_in = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &capacity_rebalance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAILifecycleHookSpecification>> &lifecycle_hook_specification_list = ::OpenAPI::OptionalParam<QList<OAILifecycleHookSpecification>>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<QString> &service_linked_role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_instance_lifetime = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &desired_capacity_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &default_instance_warmup = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAITrafficSourceIdentifier>> &traffic_sources = ::OpenAPI::OptionalParam<QList<OAITrafficSourceIdentifier>>());

    /**
    * @param[in]  launch_configuration_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  image_id QString [optional]
    * @param[in]  key_name QString [optional]
    * @param[in]  security_groups QList<QString> [optional]
    * @param[in]  classic_link_vpcid QString [optional]
    * @param[in]  classic_link_vpc_security_groups QList<QString> [optional]
    * @param[in]  user_data QString [optional]
    * @param[in]  instance_id QString [optional]
    * @param[in]  instance_type QString [optional]
    * @param[in]  kernel_id QString [optional]
    * @param[in]  ramdisk_id QString [optional]
    * @param[in]  block_device_mappings QList<OAIBlockDeviceMapping> [optional]
    * @param[in]  instance_monitoring OAIGET_CreateLaunchConfiguration_InstanceMonitoring_parameter [optional]
    * @param[in]  spot_price QString [optional]
    * @param[in]  iam_instance_profile QString [optional]
    * @param[in]  ebs_optimized bool [optional]
    * @param[in]  associate_public_ip_address bool [optional]
    * @param[in]  placement_tenancy QString [optional]
    * @param[in]  metadata_options OAIGET_CreateLaunchConfiguration_MetadataOptions_parameter [optional]
    */
    virtual void gETCreateLaunchConfiguration(const QString &launch_configuration_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &image_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &security_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &classic_link_vpcid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &classic_link_vpc_security_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &kernel_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ramdisk_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIBlockDeviceMapping>> &block_device_mappings = ::OpenAPI::OptionalParam<QList<OAIBlockDeviceMapping>>(), const ::OpenAPI::OptionalParam<OAIGET_CreateLaunchConfiguration_InstanceMonitoring_parameter> &instance_monitoring = ::OpenAPI::OptionalParam<OAIGET_CreateLaunchConfiguration_InstanceMonitoring_parameter>(), const ::OpenAPI::OptionalParam<QString> &spot_price = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &iam_instance_profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ebs_optimized = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &associate_public_ip_address = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &placement_tenancy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateLaunchConfiguration_MetadataOptions_parameter> &metadata_options = ::OpenAPI::OptionalParam<OAIGET_CreateLaunchConfiguration_MetadataOptions_parameter>());

    /**
    * @param[in]  tags QList<OAITag> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateOrUpdateTags(const QList<OAITag> &tags, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  force_delete bool [optional]
    */
    virtual void gETDeleteAutoScalingGroup(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  launch_configuration_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteLaunchConfiguration(const QString &launch_configuration_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lifecycle_hook_name QString [required]
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteLifecycleHook(const QString &lifecycle_hook_name, const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  topic_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteNotificationConfiguration(const QString &auto_scaling_group_name, const QString &topic_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  auto_scaling_group_name QString [optional]
    */
    virtual void gETDeletePolicy(const QString &policy_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auto_scaling_group_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  scheduled_action_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteScheduledAction(const QString &auto_scaling_group_name, const QString &scheduled_action_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tags QList<OAITag> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteTags(const QList<OAITag> &tags, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  force_delete bool [optional]
    */
    virtual void gETDeleteWarmPool(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeAccountLimits(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeAdjustmentTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  auto_scaling_group_names QList<QString> [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  filters QList<OAIFilter> [optional]
    */
    virtual void gETDescribeAutoScalingGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &auto_scaling_group_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIFilter>> &filters = ::OpenAPI::OptionalParam<QList<OAIFilter>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  instance_ids QList<QString> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETDescribeAutoScalingInstances(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &instance_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeAutoScalingNotificationTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  instance_refresh_ids QList<QString> [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribeInstanceRefreshes(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &instance_refresh_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  launch_configuration_names QList<QString> [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribeLaunchConfigurations(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &launch_configuration_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeLifecycleHookTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  lifecycle_hook_names QList<QString> [optional]
    */
    virtual void gETDescribeLifecycleHooks(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &lifecycle_hook_names = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribeLoadBalancerTargetGroups(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribeLoadBalancers(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeMetricCollectionTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  auto_scaling_group_names QList<QString> [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribeNotificationConfigurations(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &auto_scaling_group_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  auto_scaling_group_name QString [optional]
    * @param[in]  policy_names QList<QString> [optional]
    * @param[in]  policy_types QList<QString> [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribePolicies(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auto_scaling_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &policy_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &policy_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  activity_ids QList<QString> [optional]
    * @param[in]  auto_scaling_group_name QString [optional]
    * @param[in]  include_deleted_groups bool [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETDescribeScalingActivities(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &activity_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &auto_scaling_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_deleted_groups = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeScalingProcessTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  auto_scaling_group_name QString [optional]
    * @param[in]  scheduled_action_names QList<QString> [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribeScheduledActions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auto_scaling_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &scheduled_action_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  filters QList<OAIFilter> [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribeTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIFilter>> &filters = ::OpenAPI::OptionalParam<QList<OAIFilter>>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeTerminationPolicyTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  traffic_source_type QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribeTrafficSources(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &traffic_source_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETDescribeWarmPool(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  should_decrement_desired_capacity bool [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  instance_ids QList<QString> [optional]
    */
    virtual void gETDetachInstances(const QString &auto_scaling_group_name, const bool &should_decrement_desired_capacity, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &instance_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  target_group_arns QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDetachLoadBalancerTargetGroups(const QString &auto_scaling_group_name, const QList<QString> &target_group_arns, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  load_balancer_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDetachLoadBalancers(const QString &auto_scaling_group_name, const QList<QString> &load_balancer_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  traffic_sources QList<OAITrafficSourceIdentifier> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDetachTrafficSources(const QString &auto_scaling_group_name, const QList<OAITrafficSourceIdentifier> &traffic_sources, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  metrics QList<QString> [optional]
    */
    virtual void gETDisableMetricsCollection(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metrics = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  granularity QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  metrics QList<QString> [optional]
    */
    virtual void gETEnableMetricsCollection(const QString &auto_scaling_group_name, const QString &granularity, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metrics = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  should_decrement_desired_capacity bool [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  instance_ids QList<QString> [optional]
    */
    virtual void gETEnterStandby(const QString &auto_scaling_group_name, const bool &should_decrement_desired_capacity, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &instance_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  policy_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  auto_scaling_group_name QString [optional]
    * @param[in]  honor_cooldown bool [optional]
    * @param[in]  metric_value double [optional]
    * @param[in]  breach_threshold double [optional]
    */
    virtual void gETExecutePolicy(const QString &policy_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auto_scaling_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &honor_cooldown = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &metric_value = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &breach_threshold = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  instance_ids QList<QString> [optional]
    */
    virtual void gETExitStandby(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &instance_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  start_time QDateTime [required]
    * @param[in]  end_time QDateTime [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetPredictiveScalingForecast(const QString &auto_scaling_group_name, const QString &policy_name, const QDateTime &start_time, const QDateTime &end_time, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lifecycle_hook_name QString [required]
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  lifecycle_transition QString [optional]
    * @param[in]  role_arn QString [optional]
    * @param[in]  notification_target_arn QString [optional]
    * @param[in]  notification_metadata QString [optional]
    * @param[in]  heartbeat_timeout qint32 [optional]
    * @param[in]  default_result QString [optional]
    */
    virtual void gETPutLifecycleHook(const QString &lifecycle_hook_name, const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lifecycle_transition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notification_target_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notification_metadata = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &heartbeat_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &default_result = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  topic_arn QString [required]
    * @param[in]  notification_types QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETPutNotificationConfiguration(const QString &auto_scaling_group_name, const QString &topic_arn, const QList<QString> &notification_types, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  policy_type QString [optional]
    * @param[in]  adjustment_type QString [optional]
    * @param[in]  min_adjustment_step qint32 [optional]
    * @param[in]  min_adjustment_magnitude qint32 [optional]
    * @param[in]  scaling_adjustment qint32 [optional]
    * @param[in]  cooldown qint32 [optional]
    * @param[in]  metric_aggregation_type QString [optional]
    * @param[in]  step_adjustments QList<OAIStepAdjustment> [optional]
    * @param[in]  estimated_instance_warmup qint32 [optional]
    * @param[in]  target_tracking_configuration OAIGET_PutScalingPolicy_TargetTrackingConfiguration_parameter [optional]
    * @param[in]  enabled bool [optional]
    * @param[in]  predictive_scaling_configuration OAIGET_PutScalingPolicy_PredictiveScalingConfiguration_parameter [optional]
    */
    virtual void gETPutScalingPolicy(const QString &auto_scaling_group_name, const QString &policy_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &policy_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &adjustment_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_adjustment_step = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_adjustment_magnitude = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &scaling_adjustment = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cooldown = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &metric_aggregation_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIStepAdjustment>> &step_adjustments = ::OpenAPI::OptionalParam<QList<OAIStepAdjustment>>(), const ::OpenAPI::OptionalParam<qint32> &estimated_instance_warmup = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGET_PutScalingPolicy_TargetTrackingConfiguration_parameter> &target_tracking_configuration = ::OpenAPI::OptionalParam<OAIGET_PutScalingPolicy_TargetTrackingConfiguration_parameter>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGET_PutScalingPolicy_PredictiveScalingConfiguration_parameter> &predictive_scaling_configuration = ::OpenAPI::OptionalParam<OAIGET_PutScalingPolicy_PredictiveScalingConfiguration_parameter>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  scheduled_action_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  time QDateTime [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  recurrence QString [optional]
    * @param[in]  min_size qint32 [optional]
    * @param[in]  max_size qint32 [optional]
    * @param[in]  desired_capacity qint32 [optional]
    * @param[in]  time_zone QString [optional]
    */
    virtual void gETPutScheduledUpdateGroupAction(const QString &auto_scaling_group_name, const QString &scheduled_action_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &recurrence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &desired_capacity = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_group_prepared_capacity qint32 [optional]
    * @param[in]  min_size qint32 [optional]
    * @param[in]  pool_state QString [optional]
    * @param[in]  instance_reuse_policy OAIGET_PutWarmPool_InstanceReusePolicy_parameter [optional]
    */
    virtual void gETPutWarmPool(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_group_prepared_capacity = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pool_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_PutWarmPool_InstanceReusePolicy_parameter> &instance_reuse_policy = ::OpenAPI::OptionalParam<OAIGET_PutWarmPool_InstanceReusePolicy_parameter>());

    /**
    * @param[in]  lifecycle_hook_name QString [required]
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  lifecycle_action_token QString [optional]
    * @param[in]  instance_id QString [optional]
    */
    virtual void gETRecordLifecycleActionHeartbeat(const QString &lifecycle_hook_name, const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lifecycle_action_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  scaling_processes QList<QString> [optional]
    */
    virtual void gETResumeProcesses(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &scaling_processes = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETRollbackInstanceRefresh(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  desired_capacity qint32 [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  honor_cooldown bool [optional]
    */
    virtual void gETSetDesiredCapacity(const QString &auto_scaling_group_name, const qint32 &desired_capacity, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &honor_cooldown = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  instance_id QString [required]
    * @param[in]  health_status QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  should_respect_grace_period bool [optional]
    */
    virtual void gETSetInstanceHealth(const QString &instance_id, const QString &health_status, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &should_respect_grace_period = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  instance_ids QList<QString> [required]
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  protected_from_scale_in bool [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETSetInstanceProtection(const QList<QString> &instance_ids, const QString &auto_scaling_group_name, const bool &protected_from_scale_in, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  strategy QString [optional]
    * @param[in]  desired_configuration OAIGET_StartInstanceRefresh_DesiredConfiguration_parameter [optional]
    * @param[in]  preferences OAIGET_StartInstanceRefresh_Preferences_parameter [optional]
    */
    virtual void gETStartInstanceRefresh(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_StartInstanceRefresh_DesiredConfiguration_parameter> &desired_configuration = ::OpenAPI::OptionalParam<OAIGET_StartInstanceRefresh_DesiredConfiguration_parameter>(), const ::OpenAPI::OptionalParam<OAIGET_StartInstanceRefresh_Preferences_parameter> &preferences = ::OpenAPI::OptionalParam<OAIGET_StartInstanceRefresh_Preferences_parameter>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  scaling_processes QList<QString> [optional]
    */
    virtual void gETSuspendProcesses(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &scaling_processes = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  instance_id QString [required]
    * @param[in]  should_decrement_desired_capacity bool [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETTerminateInstanceInAutoScalingGroup(const QString &instance_id, const bool &should_decrement_desired_capacity, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auto_scaling_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  launch_configuration_name QString [optional]
    * @param[in]  launch_template OAIGET_CreateAutoScalingGroup_LaunchTemplate_parameter [optional]
    * @param[in]  mixed_instances_policy OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter [optional]
    * @param[in]  min_size qint32 [optional]
    * @param[in]  max_size qint32 [optional]
    * @param[in]  desired_capacity qint32 [optional]
    * @param[in]  default_cooldown qint32 [optional]
    * @param[in]  availability_zones QList<QString> [optional]
    * @param[in]  health_check_type QString [optional]
    * @param[in]  health_check_grace_period qint32 [optional]
    * @param[in]  placement_group QString [optional]
    * @param[in]  vpc_zone_identifier QString [optional]
    * @param[in]  termination_policies QList<QString> [optional]
    * @param[in]  new_instances_protected_from_scale_in bool [optional]
    * @param[in]  service_linked_role_arn QString [optional]
    * @param[in]  max_instance_lifetime qint32 [optional]
    * @param[in]  capacity_rebalance bool [optional]
    * @param[in]  context QString [optional]
    * @param[in]  desired_capacity_type QString [optional]
    * @param[in]  default_instance_warmup qint32 [optional]
    */
    virtual void gETUpdateAutoScalingGroup(const QString &auto_scaling_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &launch_configuration_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateAutoScalingGroup_LaunchTemplate_parameter> &launch_template = ::OpenAPI::OptionalParam<OAIGET_CreateAutoScalingGroup_LaunchTemplate_parameter>(), const ::OpenAPI::OptionalParam<OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter> &mixed_instances_policy = ::OpenAPI::OptionalParam<OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter>(), const ::OpenAPI::OptionalParam<qint32> &min_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &desired_capacity = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &default_cooldown = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &availability_zones = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &health_check_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &health_check_grace_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &placement_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vpc_zone_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &termination_policies = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &new_instances_protected_from_scale_in = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &service_linked_role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_instance_lifetime = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &capacity_rebalance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &desired_capacity_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &default_instance_warmup = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_attach_instances_query OAIAttachInstancesQuery [optional]
    */
    virtual void pOSTAttachInstances(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAttachInstancesQuery> &oai_attach_instances_query = ::OpenAPI::OptionalParam<OAIAttachInstancesQuery>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_attach_load_balancer_target_groups_type OAIAttachLoadBalancerTargetGroupsType [optional]
    */
    virtual void pOSTAttachLoadBalancerTargetGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAttachLoadBalancerTargetGroupsType> &oai_attach_load_balancer_target_groups_type = ::OpenAPI::OptionalParam<OAIAttachLoadBalancerTargetGroupsType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_attach_load_balancers_type OAIAttachLoadBalancersType [optional]
    */
    virtual void pOSTAttachLoadBalancers(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAttachLoadBalancersType> &oai_attach_load_balancers_type = ::OpenAPI::OptionalParam<OAIAttachLoadBalancersType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_attach_traffic_sources_type OAIAttachTrafficSourcesType [optional]
    */
    virtual void pOSTAttachTrafficSources(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAttachTrafficSourcesType> &oai_attach_traffic_sources_type = ::OpenAPI::OptionalParam<OAIAttachTrafficSourcesType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_batch_delete_scheduled_action_type OAIBatchDeleteScheduledActionType [optional]
    */
    virtual void pOSTBatchDeleteScheduledAction(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchDeleteScheduledActionType> &oai_batch_delete_scheduled_action_type = ::OpenAPI::OptionalParam<OAIBatchDeleteScheduledActionType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_batch_put_scheduled_update_group_action_type OAIBatchPutScheduledUpdateGroupActionType [optional]
    */
    virtual void pOSTBatchPutScheduledUpdateGroupAction(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchPutScheduledUpdateGroupActionType> &oai_batch_put_scheduled_update_group_action_type = ::OpenAPI::OptionalParam<OAIBatchPutScheduledUpdateGroupActionType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_cancel_instance_refresh_type OAICancelInstanceRefreshType [optional]
    */
    virtual void pOSTCancelInstanceRefresh(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICancelInstanceRefreshType> &oai_cancel_instance_refresh_type = ::OpenAPI::OptionalParam<OAICancelInstanceRefreshType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_complete_lifecycle_action_type OAICompleteLifecycleActionType [optional]
    */
    virtual void pOSTCompleteLifecycleAction(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICompleteLifecycleActionType> &oai_complete_lifecycle_action_type = ::OpenAPI::OptionalParam<OAICompleteLifecycleActionType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_auto_scaling_group_type OAICreateAutoScalingGroupType [optional]
    */
    virtual void pOSTCreateAutoScalingGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateAutoScalingGroupType> &oai_create_auto_scaling_group_type = ::OpenAPI::OptionalParam<OAICreateAutoScalingGroupType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_launch_configuration_type OAICreateLaunchConfigurationType [optional]
    */
    virtual void pOSTCreateLaunchConfiguration(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateLaunchConfigurationType> &oai_create_launch_configuration_type = ::OpenAPI::OptionalParam<OAICreateLaunchConfigurationType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_or_update_tags_type OAICreateOrUpdateTagsType [optional]
    */
    virtual void pOSTCreateOrUpdateTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateOrUpdateTagsType> &oai_create_or_update_tags_type = ::OpenAPI::OptionalParam<OAICreateOrUpdateTagsType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_auto_scaling_group_type OAIDeleteAutoScalingGroupType [optional]
    */
    virtual void pOSTDeleteAutoScalingGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteAutoScalingGroupType> &oai_delete_auto_scaling_group_type = ::OpenAPI::OptionalParam<OAIDeleteAutoScalingGroupType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_launch_configuration_name_type OAILaunchConfigurationNameType [optional]
    */
    virtual void pOSTDeleteLaunchConfiguration(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILaunchConfigurationNameType> &oai_launch_configuration_name_type = ::OpenAPI::OptionalParam<OAILaunchConfigurationNameType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_lifecycle_hook_type OAIDeleteLifecycleHookType [optional]
    */
    virtual void pOSTDeleteLifecycleHook(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteLifecycleHookType> &oai_delete_lifecycle_hook_type = ::OpenAPI::OptionalParam<OAIDeleteLifecycleHookType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_notification_configuration_type OAIDeleteNotificationConfigurationType [optional]
    */
    virtual void pOSTDeleteNotificationConfiguration(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteNotificationConfigurationType> &oai_delete_notification_configuration_type = ::OpenAPI::OptionalParam<OAIDeleteNotificationConfigurationType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_policy_type OAIDeletePolicyType [optional]
    */
    virtual void pOSTDeletePolicy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeletePolicyType> &oai_delete_policy_type = ::OpenAPI::OptionalParam<OAIDeletePolicyType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_scheduled_action_type OAIDeleteScheduledActionType [optional]
    */
    virtual void pOSTDeleteScheduledAction(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteScheduledActionType> &oai_delete_scheduled_action_type = ::OpenAPI::OptionalParam<OAIDeleteScheduledActionType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_tags_type OAIDeleteTagsType [optional]
    */
    virtual void pOSTDeleteTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteTagsType> &oai_delete_tags_type = ::OpenAPI::OptionalParam<OAIDeleteTagsType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_warm_pool_type OAIDeleteWarmPoolType [optional]
    */
    virtual void pOSTDeleteWarmPool(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteWarmPoolType> &oai_delete_warm_pool_type = ::OpenAPI::OptionalParam<OAIDeleteWarmPoolType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTDescribeAccountLimits(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTDescribeAdjustmentTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_auto_scaling_group_names_type OAIAutoScalingGroupNamesType [optional]
    */
    virtual void pOSTDescribeAutoScalingGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAutoScalingGroupNamesType> &oai_auto_scaling_group_names_type = ::OpenAPI::OptionalParam<OAIAutoScalingGroupNamesType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_auto_scaling_instances_type OAIDescribeAutoScalingInstancesType [optional]
    */
    virtual void pOSTDescribeAutoScalingInstances(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAutoScalingInstancesType> &oai_describe_auto_scaling_instances_type = ::OpenAPI::OptionalParam<OAIDescribeAutoScalingInstancesType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTDescribeAutoScalingNotificationTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_instance_refreshes_type OAIDescribeInstanceRefreshesType [optional]
    */
    virtual void pOSTDescribeInstanceRefreshes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeInstanceRefreshesType> &oai_describe_instance_refreshes_type = ::OpenAPI::OptionalParam<OAIDescribeInstanceRefreshesType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_launch_configuration_names_type OAILaunchConfigurationNamesType [optional]
    */
    virtual void pOSTDescribeLaunchConfigurations(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILaunchConfigurationNamesType> &oai_launch_configuration_names_type = ::OpenAPI::OptionalParam<OAILaunchConfigurationNamesType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTDescribeLifecycleHookTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_lifecycle_hooks_type OAIDescribeLifecycleHooksType [optional]
    */
    virtual void pOSTDescribeLifecycleHooks(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeLifecycleHooksType> &oai_describe_lifecycle_hooks_type = ::OpenAPI::OptionalParam<OAIDescribeLifecycleHooksType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_load_balancer_target_groups_request OAIDescribeLoadBalancerTargetGroupsRequest [optional]
    */
    virtual void pOSTDescribeLoadBalancerTargetGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeLoadBalancerTargetGroupsRequest> &oai_describe_load_balancer_target_groups_request = ::OpenAPI::OptionalParam<OAIDescribeLoadBalancerTargetGroupsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_load_balancers_request OAIDescribeLoadBalancersRequest [optional]
    */
    virtual void pOSTDescribeLoadBalancers(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeLoadBalancersRequest> &oai_describe_load_balancers_request = ::OpenAPI::OptionalParam<OAIDescribeLoadBalancersRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTDescribeMetricCollectionTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_notification_configurations_type OAIDescribeNotificationConfigurationsType [optional]
    */
    virtual void pOSTDescribeNotificationConfigurations(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeNotificationConfigurationsType> &oai_describe_notification_configurations_type = ::OpenAPI::OptionalParam<OAIDescribeNotificationConfigurationsType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_policies_type OAIDescribePoliciesType [optional]
    */
    virtual void pOSTDescribePolicies(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribePoliciesType> &oai_describe_policies_type = ::OpenAPI::OptionalParam<OAIDescribePoliciesType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_scaling_activities_type OAIDescribeScalingActivitiesType [optional]
    */
    virtual void pOSTDescribeScalingActivities(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeScalingActivitiesType> &oai_describe_scaling_activities_type = ::OpenAPI::OptionalParam<OAIDescribeScalingActivitiesType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTDescribeScalingProcessTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_scheduled_actions_type OAIDescribeScheduledActionsType [optional]
    */
    virtual void pOSTDescribeScheduledActions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeScheduledActionsType> &oai_describe_scheduled_actions_type = ::OpenAPI::OptionalParam<OAIDescribeScheduledActionsType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_tags_type OAIDescribeTagsType [optional]
    */
    virtual void pOSTDescribeTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeTagsType> &oai_describe_tags_type = ::OpenAPI::OptionalParam<OAIDescribeTagsType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTDescribeTerminationPolicyTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_traffic_sources_request OAIDescribeTrafficSourcesRequest [optional]
    */
    virtual void pOSTDescribeTrafficSources(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeTrafficSourcesRequest> &oai_describe_traffic_sources_request = ::OpenAPI::OptionalParam<OAIDescribeTrafficSourcesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_warm_pool_type OAIDescribeWarmPoolType [optional]
    */
    virtual void pOSTDescribeWarmPool(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeWarmPoolType> &oai_describe_warm_pool_type = ::OpenAPI::OptionalParam<OAIDescribeWarmPoolType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_detach_instances_query OAIDetachInstancesQuery [optional]
    */
    virtual void pOSTDetachInstances(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDetachInstancesQuery> &oai_detach_instances_query = ::OpenAPI::OptionalParam<OAIDetachInstancesQuery>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_detach_load_balancer_target_groups_type OAIDetachLoadBalancerTargetGroupsType [optional]
    */
    virtual void pOSTDetachLoadBalancerTargetGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDetachLoadBalancerTargetGroupsType> &oai_detach_load_balancer_target_groups_type = ::OpenAPI::OptionalParam<OAIDetachLoadBalancerTargetGroupsType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_detach_load_balancers_type OAIDetachLoadBalancersType [optional]
    */
    virtual void pOSTDetachLoadBalancers(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDetachLoadBalancersType> &oai_detach_load_balancers_type = ::OpenAPI::OptionalParam<OAIDetachLoadBalancersType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_detach_traffic_sources_type OAIDetachTrafficSourcesType [optional]
    */
    virtual void pOSTDetachTrafficSources(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDetachTrafficSourcesType> &oai_detach_traffic_sources_type = ::OpenAPI::OptionalParam<OAIDetachTrafficSourcesType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_disable_metrics_collection_query OAIDisableMetricsCollectionQuery [optional]
    */
    virtual void pOSTDisableMetricsCollection(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDisableMetricsCollectionQuery> &oai_disable_metrics_collection_query = ::OpenAPI::OptionalParam<OAIDisableMetricsCollectionQuery>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_enable_metrics_collection_query OAIEnableMetricsCollectionQuery [optional]
    */
    virtual void pOSTEnableMetricsCollection(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEnableMetricsCollectionQuery> &oai_enable_metrics_collection_query = ::OpenAPI::OptionalParam<OAIEnableMetricsCollectionQuery>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_enter_standby_query OAIEnterStandbyQuery [optional]
    */
    virtual void pOSTEnterStandby(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEnterStandbyQuery> &oai_enter_standby_query = ::OpenAPI::OptionalParam<OAIEnterStandbyQuery>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_execute_policy_type OAIExecutePolicyType [optional]
    */
    virtual void pOSTExecutePolicy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIExecutePolicyType> &oai_execute_policy_type = ::OpenAPI::OptionalParam<OAIExecutePolicyType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_exit_standby_query OAIExitStandbyQuery [optional]
    */
    virtual void pOSTExitStandby(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIExitStandbyQuery> &oai_exit_standby_query = ::OpenAPI::OptionalParam<OAIExitStandbyQuery>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_predictive_scaling_forecast_type OAIGetPredictiveScalingForecastType [optional]
    */
    virtual void pOSTGetPredictiveScalingForecast(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetPredictiveScalingForecastType> &oai_get_predictive_scaling_forecast_type = ::OpenAPI::OptionalParam<OAIGetPredictiveScalingForecastType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_lifecycle_hook_type OAIPutLifecycleHookType [optional]
    */
    virtual void pOSTPutLifecycleHook(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutLifecycleHookType> &oai_put_lifecycle_hook_type = ::OpenAPI::OptionalParam<OAIPutLifecycleHookType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_notification_configuration_type OAIPutNotificationConfigurationType [optional]
    */
    virtual void pOSTPutNotificationConfiguration(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutNotificationConfigurationType> &oai_put_notification_configuration_type = ::OpenAPI::OptionalParam<OAIPutNotificationConfigurationType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_scaling_policy_type OAIPutScalingPolicyType [optional]
    */
    virtual void pOSTPutScalingPolicy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutScalingPolicyType> &oai_put_scaling_policy_type = ::OpenAPI::OptionalParam<OAIPutScalingPolicyType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_scheduled_update_group_action_type OAIPutScheduledUpdateGroupActionType [optional]
    */
    virtual void pOSTPutScheduledUpdateGroupAction(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutScheduledUpdateGroupActionType> &oai_put_scheduled_update_group_action_type = ::OpenAPI::OptionalParam<OAIPutScheduledUpdateGroupActionType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_warm_pool_type OAIPutWarmPoolType [optional]
    */
    virtual void pOSTPutWarmPool(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutWarmPoolType> &oai_put_warm_pool_type = ::OpenAPI::OptionalParam<OAIPutWarmPoolType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_record_lifecycle_action_heartbeat_type OAIRecordLifecycleActionHeartbeatType [optional]
    */
    virtual void pOSTRecordLifecycleActionHeartbeat(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRecordLifecycleActionHeartbeatType> &oai_record_lifecycle_action_heartbeat_type = ::OpenAPI::OptionalParam<OAIRecordLifecycleActionHeartbeatType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_scaling_process_query OAIScalingProcessQuery [optional]
    */
    virtual void pOSTResumeProcesses(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIScalingProcessQuery> &oai_scaling_process_query = ::OpenAPI::OptionalParam<OAIScalingProcessQuery>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_rollback_instance_refresh_type OAIRollbackInstanceRefreshType [optional]
    */
    virtual void pOSTRollbackInstanceRefresh(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRollbackInstanceRefreshType> &oai_rollback_instance_refresh_type = ::OpenAPI::OptionalParam<OAIRollbackInstanceRefreshType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_desired_capacity_type OAISetDesiredCapacityType [optional]
    */
    virtual void pOSTSetDesiredCapacity(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetDesiredCapacityType> &oai_set_desired_capacity_type = ::OpenAPI::OptionalParam<OAISetDesiredCapacityType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_instance_health_query OAISetInstanceHealthQuery [optional]
    */
    virtual void pOSTSetInstanceHealth(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetInstanceHealthQuery> &oai_set_instance_health_query = ::OpenAPI::OptionalParam<OAISetInstanceHealthQuery>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_instance_protection_query OAISetInstanceProtectionQuery [optional]
    */
    virtual void pOSTSetInstanceProtection(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetInstanceProtectionQuery> &oai_set_instance_protection_query = ::OpenAPI::OptionalParam<OAISetInstanceProtectionQuery>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_start_instance_refresh_type OAIStartInstanceRefreshType [optional]
    */
    virtual void pOSTStartInstanceRefresh(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStartInstanceRefreshType> &oai_start_instance_refresh_type = ::OpenAPI::OptionalParam<OAIStartInstanceRefreshType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_scaling_process_query OAIScalingProcessQuery [optional]
    */
    virtual void pOSTSuspendProcesses(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIScalingProcessQuery> &oai_scaling_process_query = ::OpenAPI::OptionalParam<OAIScalingProcessQuery>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_terminate_instance_in_auto_scaling_group_type OAITerminateInstanceInAutoScalingGroupType [optional]
    */
    virtual void pOSTTerminateInstanceInAutoScalingGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITerminateInstanceInAutoScalingGroupType> &oai_terminate_instance_in_auto_scaling_group_type = ::OpenAPI::OptionalParam<OAITerminateInstanceInAutoScalingGroupType>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_auto_scaling_group_type OAIUpdateAutoScalingGroupType [optional]
    */
    virtual void pOSTUpdateAutoScalingGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateAutoScalingGroupType> &oai_update_auto_scaling_group_type = ::OpenAPI::OptionalParam<OAIUpdateAutoScalingGroupType>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETAttachInstancesCallback(OAIHttpRequestWorker *worker);
    void gETAttachLoadBalancerTargetGroupsCallback(OAIHttpRequestWorker *worker);
    void gETAttachLoadBalancersCallback(OAIHttpRequestWorker *worker);
    void gETAttachTrafficSourcesCallback(OAIHttpRequestWorker *worker);
    void gETBatchDeleteScheduledActionCallback(OAIHttpRequestWorker *worker);
    void gETBatchPutScheduledUpdateGroupActionCallback(OAIHttpRequestWorker *worker);
    void gETCancelInstanceRefreshCallback(OAIHttpRequestWorker *worker);
    void gETCompleteLifecycleActionCallback(OAIHttpRequestWorker *worker);
    void gETCreateAutoScalingGroupCallback(OAIHttpRequestWorker *worker);
    void gETCreateLaunchConfigurationCallback(OAIHttpRequestWorker *worker);
    void gETCreateOrUpdateTagsCallback(OAIHttpRequestWorker *worker);
    void gETDeleteAutoScalingGroupCallback(OAIHttpRequestWorker *worker);
    void gETDeleteLaunchConfigurationCallback(OAIHttpRequestWorker *worker);
    void gETDeleteLifecycleHookCallback(OAIHttpRequestWorker *worker);
    void gETDeleteNotificationConfigurationCallback(OAIHttpRequestWorker *worker);
    void gETDeletePolicyCallback(OAIHttpRequestWorker *worker);
    void gETDeleteScheduledActionCallback(OAIHttpRequestWorker *worker);
    void gETDeleteTagsCallback(OAIHttpRequestWorker *worker);
    void gETDeleteWarmPoolCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAccountLimitsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAdjustmentTypesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAutoScalingGroupsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAutoScalingInstancesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAutoScalingNotificationTypesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeInstanceRefreshesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeLaunchConfigurationsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeLifecycleHookTypesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeLifecycleHooksCallback(OAIHttpRequestWorker *worker);
    void gETDescribeLoadBalancerTargetGroupsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeLoadBalancersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeMetricCollectionTypesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeNotificationConfigurationsCallback(OAIHttpRequestWorker *worker);
    void gETDescribePoliciesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeScalingActivitiesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeScalingProcessTypesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeScheduledActionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeTagsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeTerminationPolicyTypesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeTrafficSourcesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeWarmPoolCallback(OAIHttpRequestWorker *worker);
    void gETDetachInstancesCallback(OAIHttpRequestWorker *worker);
    void gETDetachLoadBalancerTargetGroupsCallback(OAIHttpRequestWorker *worker);
    void gETDetachLoadBalancersCallback(OAIHttpRequestWorker *worker);
    void gETDetachTrafficSourcesCallback(OAIHttpRequestWorker *worker);
    void gETDisableMetricsCollectionCallback(OAIHttpRequestWorker *worker);
    void gETEnableMetricsCollectionCallback(OAIHttpRequestWorker *worker);
    void gETEnterStandbyCallback(OAIHttpRequestWorker *worker);
    void gETExecutePolicyCallback(OAIHttpRequestWorker *worker);
    void gETExitStandbyCallback(OAIHttpRequestWorker *worker);
    void gETGetPredictiveScalingForecastCallback(OAIHttpRequestWorker *worker);
    void gETPutLifecycleHookCallback(OAIHttpRequestWorker *worker);
    void gETPutNotificationConfigurationCallback(OAIHttpRequestWorker *worker);
    void gETPutScalingPolicyCallback(OAIHttpRequestWorker *worker);
    void gETPutScheduledUpdateGroupActionCallback(OAIHttpRequestWorker *worker);
    void gETPutWarmPoolCallback(OAIHttpRequestWorker *worker);
    void gETRecordLifecycleActionHeartbeatCallback(OAIHttpRequestWorker *worker);
    void gETResumeProcessesCallback(OAIHttpRequestWorker *worker);
    void gETRollbackInstanceRefreshCallback(OAIHttpRequestWorker *worker);
    void gETSetDesiredCapacityCallback(OAIHttpRequestWorker *worker);
    void gETSetInstanceHealthCallback(OAIHttpRequestWorker *worker);
    void gETSetInstanceProtectionCallback(OAIHttpRequestWorker *worker);
    void gETStartInstanceRefreshCallback(OAIHttpRequestWorker *worker);
    void gETSuspendProcessesCallback(OAIHttpRequestWorker *worker);
    void gETTerminateInstanceInAutoScalingGroupCallback(OAIHttpRequestWorker *worker);
    void gETUpdateAutoScalingGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTAttachInstancesCallback(OAIHttpRequestWorker *worker);
    void pOSTAttachLoadBalancerTargetGroupsCallback(OAIHttpRequestWorker *worker);
    void pOSTAttachLoadBalancersCallback(OAIHttpRequestWorker *worker);
    void pOSTAttachTrafficSourcesCallback(OAIHttpRequestWorker *worker);
    void pOSTBatchDeleteScheduledActionCallback(OAIHttpRequestWorker *worker);
    void pOSTBatchPutScheduledUpdateGroupActionCallback(OAIHttpRequestWorker *worker);
    void pOSTCancelInstanceRefreshCallback(OAIHttpRequestWorker *worker);
    void pOSTCompleteLifecycleActionCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateAutoScalingGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateLaunchConfigurationCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateOrUpdateTagsCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteAutoScalingGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteLaunchConfigurationCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteLifecycleHookCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteNotificationConfigurationCallback(OAIHttpRequestWorker *worker);
    void pOSTDeletePolicyCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteScheduledActionCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteTagsCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteWarmPoolCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAccountLimitsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAdjustmentTypesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAutoScalingGroupsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAutoScalingInstancesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAutoScalingNotificationTypesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeInstanceRefreshesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeLaunchConfigurationsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeLifecycleHookTypesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeLifecycleHooksCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeLoadBalancerTargetGroupsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeLoadBalancersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeMetricCollectionTypesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeNotificationConfigurationsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribePoliciesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeScalingActivitiesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeScalingProcessTypesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeScheduledActionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeTagsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeTerminationPolicyTypesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeTrafficSourcesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeWarmPoolCallback(OAIHttpRequestWorker *worker);
    void pOSTDetachInstancesCallback(OAIHttpRequestWorker *worker);
    void pOSTDetachLoadBalancerTargetGroupsCallback(OAIHttpRequestWorker *worker);
    void pOSTDetachLoadBalancersCallback(OAIHttpRequestWorker *worker);
    void pOSTDetachTrafficSourcesCallback(OAIHttpRequestWorker *worker);
    void pOSTDisableMetricsCollectionCallback(OAIHttpRequestWorker *worker);
    void pOSTEnableMetricsCollectionCallback(OAIHttpRequestWorker *worker);
    void pOSTEnterStandbyCallback(OAIHttpRequestWorker *worker);
    void pOSTExecutePolicyCallback(OAIHttpRequestWorker *worker);
    void pOSTExitStandbyCallback(OAIHttpRequestWorker *worker);
    void pOSTGetPredictiveScalingForecastCallback(OAIHttpRequestWorker *worker);
    void pOSTPutLifecycleHookCallback(OAIHttpRequestWorker *worker);
    void pOSTPutNotificationConfigurationCallback(OAIHttpRequestWorker *worker);
    void pOSTPutScalingPolicyCallback(OAIHttpRequestWorker *worker);
    void pOSTPutScheduledUpdateGroupActionCallback(OAIHttpRequestWorker *worker);
    void pOSTPutWarmPoolCallback(OAIHttpRequestWorker *worker);
    void pOSTRecordLifecycleActionHeartbeatCallback(OAIHttpRequestWorker *worker);
    void pOSTResumeProcessesCallback(OAIHttpRequestWorker *worker);
    void pOSTRollbackInstanceRefreshCallback(OAIHttpRequestWorker *worker);
    void pOSTSetDesiredCapacityCallback(OAIHttpRequestWorker *worker);
    void pOSTSetInstanceHealthCallback(OAIHttpRequestWorker *worker);
    void pOSTSetInstanceProtectionCallback(OAIHttpRequestWorker *worker);
    void pOSTStartInstanceRefreshCallback(OAIHttpRequestWorker *worker);
    void pOSTSuspendProcessesCallback(OAIHttpRequestWorker *worker);
    void pOSTTerminateInstanceInAutoScalingGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateAutoScalingGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETAttachInstancesSignal();
    void gETAttachLoadBalancerTargetGroupsSignal(OAIObject summary);
    void gETAttachLoadBalancersSignal(OAIObject summary);
    void gETAttachTrafficSourcesSignal(OAIObject summary);
    void gETBatchDeleteScheduledActionSignal(OAIBatchDeleteScheduledActionAnswer summary);
    void gETBatchPutScheduledUpdateGroupActionSignal(OAIBatchPutScheduledUpdateGroupActionAnswer summary);
    void gETCancelInstanceRefreshSignal(OAICancelInstanceRefreshAnswer summary);
    void gETCompleteLifecycleActionSignal(OAIObject summary);
    void gETCreateAutoScalingGroupSignal();
    void gETCreateLaunchConfigurationSignal();
    void gETCreateOrUpdateTagsSignal();
    void gETDeleteAutoScalingGroupSignal();
    void gETDeleteLaunchConfigurationSignal();
    void gETDeleteLifecycleHookSignal(OAIObject summary);
    void gETDeleteNotificationConfigurationSignal();
    void gETDeletePolicySignal();
    void gETDeleteScheduledActionSignal();
    void gETDeleteTagsSignal();
    void gETDeleteWarmPoolSignal(OAIObject summary);
    void gETDescribeAccountLimitsSignal(OAIDescribeAccountLimitsAnswer summary);
    void gETDescribeAdjustmentTypesSignal(OAIDescribeAdjustmentTypesAnswer summary);
    void gETDescribeAutoScalingGroupsSignal(OAIAutoScalingGroupsType summary);
    void gETDescribeAutoScalingInstancesSignal(OAIAutoScalingInstancesType summary);
    void gETDescribeAutoScalingNotificationTypesSignal(OAIDescribeAutoScalingNotificationTypesAnswer summary);
    void gETDescribeInstanceRefreshesSignal(OAIDescribeInstanceRefreshesAnswer summary);
    void gETDescribeLaunchConfigurationsSignal(OAILaunchConfigurationsType summary);
    void gETDescribeLifecycleHookTypesSignal(OAIDescribeLifecycleHookTypesAnswer summary);
    void gETDescribeLifecycleHooksSignal(OAIDescribeLifecycleHooksAnswer summary);
    void gETDescribeLoadBalancerTargetGroupsSignal(OAIDescribeLoadBalancerTargetGroupsResponse summary);
    void gETDescribeLoadBalancersSignal(OAIDescribeLoadBalancersResponse summary);
    void gETDescribeMetricCollectionTypesSignal(OAIDescribeMetricCollectionTypesAnswer summary);
    void gETDescribeNotificationConfigurationsSignal(OAIDescribeNotificationConfigurationsAnswer summary);
    void gETDescribePoliciesSignal(OAIPoliciesType summary);
    void gETDescribeScalingActivitiesSignal(OAIActivitiesType summary);
    void gETDescribeScalingProcessTypesSignal(OAIProcessesType summary);
    void gETDescribeScheduledActionsSignal(OAIScheduledActionsType summary);
    void gETDescribeTagsSignal(OAITagsType summary);
    void gETDescribeTerminationPolicyTypesSignal(OAIDescribeTerminationPolicyTypesAnswer summary);
    void gETDescribeTrafficSourcesSignal(OAIDescribeTrafficSourcesResponse summary);
    void gETDescribeWarmPoolSignal(OAIDescribeWarmPoolAnswer summary);
    void gETDetachInstancesSignal(OAIDetachInstancesAnswer summary);
    void gETDetachLoadBalancerTargetGroupsSignal(OAIObject summary);
    void gETDetachLoadBalancersSignal(OAIObject summary);
    void gETDetachTrafficSourcesSignal(OAIObject summary);
    void gETDisableMetricsCollectionSignal();
    void gETEnableMetricsCollectionSignal();
    void gETEnterStandbySignal(OAIEnterStandbyAnswer summary);
    void gETExecutePolicySignal();
    void gETExitStandbySignal(OAIExitStandbyAnswer summary);
    void gETGetPredictiveScalingForecastSignal(OAIGetPredictiveScalingForecastAnswer summary);
    void gETPutLifecycleHookSignal(OAIObject summary);
    void gETPutNotificationConfigurationSignal();
    void gETPutScalingPolicySignal(OAIPolicyARNType summary);
    void gETPutScheduledUpdateGroupActionSignal();
    void gETPutWarmPoolSignal(OAIObject summary);
    void gETRecordLifecycleActionHeartbeatSignal(OAIObject summary);
    void gETResumeProcessesSignal();
    void gETRollbackInstanceRefreshSignal(OAIRollbackInstanceRefreshAnswer summary);
    void gETSetDesiredCapacitySignal();
    void gETSetInstanceHealthSignal();
    void gETSetInstanceProtectionSignal(OAIObject summary);
    void gETStartInstanceRefreshSignal(OAIStartInstanceRefreshAnswer summary);
    void gETSuspendProcessesSignal();
    void gETTerminateInstanceInAutoScalingGroupSignal(OAIActivityType summary);
    void gETUpdateAutoScalingGroupSignal();
    void pOSTAttachInstancesSignal();
    void pOSTAttachLoadBalancerTargetGroupsSignal(OAIObject summary);
    void pOSTAttachLoadBalancersSignal(OAIObject summary);
    void pOSTAttachTrafficSourcesSignal(OAIObject summary);
    void pOSTBatchDeleteScheduledActionSignal(OAIBatchDeleteScheduledActionAnswer summary);
    void pOSTBatchPutScheduledUpdateGroupActionSignal(OAIBatchPutScheduledUpdateGroupActionAnswer summary);
    void pOSTCancelInstanceRefreshSignal(OAICancelInstanceRefreshAnswer summary);
    void pOSTCompleteLifecycleActionSignal(OAIObject summary);
    void pOSTCreateAutoScalingGroupSignal();
    void pOSTCreateLaunchConfigurationSignal();
    void pOSTCreateOrUpdateTagsSignal();
    void pOSTDeleteAutoScalingGroupSignal();
    void pOSTDeleteLaunchConfigurationSignal();
    void pOSTDeleteLifecycleHookSignal(OAIObject summary);
    void pOSTDeleteNotificationConfigurationSignal();
    void pOSTDeletePolicySignal();
    void pOSTDeleteScheduledActionSignal();
    void pOSTDeleteTagsSignal();
    void pOSTDeleteWarmPoolSignal(OAIObject summary);
    void pOSTDescribeAccountLimitsSignal(OAIDescribeAccountLimitsAnswer summary);
    void pOSTDescribeAdjustmentTypesSignal(OAIDescribeAdjustmentTypesAnswer summary);
    void pOSTDescribeAutoScalingGroupsSignal(OAIAutoScalingGroupsType summary);
    void pOSTDescribeAutoScalingInstancesSignal(OAIAutoScalingInstancesType summary);
    void pOSTDescribeAutoScalingNotificationTypesSignal(OAIDescribeAutoScalingNotificationTypesAnswer summary);
    void pOSTDescribeInstanceRefreshesSignal(OAIDescribeInstanceRefreshesAnswer summary);
    void pOSTDescribeLaunchConfigurationsSignal(OAILaunchConfigurationsType summary);
    void pOSTDescribeLifecycleHookTypesSignal(OAIDescribeLifecycleHookTypesAnswer summary);
    void pOSTDescribeLifecycleHooksSignal(OAIDescribeLifecycleHooksAnswer summary);
    void pOSTDescribeLoadBalancerTargetGroupsSignal(OAIDescribeLoadBalancerTargetGroupsResponse summary);
    void pOSTDescribeLoadBalancersSignal(OAIDescribeLoadBalancersResponse summary);
    void pOSTDescribeMetricCollectionTypesSignal(OAIDescribeMetricCollectionTypesAnswer summary);
    void pOSTDescribeNotificationConfigurationsSignal(OAIDescribeNotificationConfigurationsAnswer summary);
    void pOSTDescribePoliciesSignal(OAIPoliciesType summary);
    void pOSTDescribeScalingActivitiesSignal(OAIActivitiesType summary);
    void pOSTDescribeScalingProcessTypesSignal(OAIProcessesType summary);
    void pOSTDescribeScheduledActionsSignal(OAIScheduledActionsType summary);
    void pOSTDescribeTagsSignal(OAITagsType summary);
    void pOSTDescribeTerminationPolicyTypesSignal(OAIDescribeTerminationPolicyTypesAnswer summary);
    void pOSTDescribeTrafficSourcesSignal(OAIDescribeTrafficSourcesResponse summary);
    void pOSTDescribeWarmPoolSignal(OAIDescribeWarmPoolAnswer summary);
    void pOSTDetachInstancesSignal(OAIDetachInstancesAnswer summary);
    void pOSTDetachLoadBalancerTargetGroupsSignal(OAIObject summary);
    void pOSTDetachLoadBalancersSignal(OAIObject summary);
    void pOSTDetachTrafficSourcesSignal(OAIObject summary);
    void pOSTDisableMetricsCollectionSignal();
    void pOSTEnableMetricsCollectionSignal();
    void pOSTEnterStandbySignal(OAIEnterStandbyAnswer summary);
    void pOSTExecutePolicySignal();
    void pOSTExitStandbySignal(OAIExitStandbyAnswer summary);
    void pOSTGetPredictiveScalingForecastSignal(OAIGetPredictiveScalingForecastAnswer summary);
    void pOSTPutLifecycleHookSignal(OAIObject summary);
    void pOSTPutNotificationConfigurationSignal();
    void pOSTPutScalingPolicySignal(OAIPolicyARNType summary);
    void pOSTPutScheduledUpdateGroupActionSignal();
    void pOSTPutWarmPoolSignal(OAIObject summary);
    void pOSTRecordLifecycleActionHeartbeatSignal(OAIObject summary);
    void pOSTResumeProcessesSignal();
    void pOSTRollbackInstanceRefreshSignal(OAIRollbackInstanceRefreshAnswer summary);
    void pOSTSetDesiredCapacitySignal();
    void pOSTSetInstanceHealthSignal();
    void pOSTSetInstanceProtectionSignal(OAIObject summary);
    void pOSTStartInstanceRefreshSignal(OAIStartInstanceRefreshAnswer summary);
    void pOSTSuspendProcessesSignal();
    void pOSTTerminateInstanceInAutoScalingGroupSignal(OAIActivityType summary);
    void pOSTUpdateAutoScalingGroupSignal();


    void gETAttachInstancesSignalFull(OAIHttpRequestWorker *worker);
    void gETAttachLoadBalancerTargetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETAttachLoadBalancersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETAttachTrafficSourcesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETBatchDeleteScheduledActionSignalFull(OAIHttpRequestWorker *worker, OAIBatchDeleteScheduledActionAnswer summary);
    void gETBatchPutScheduledUpdateGroupActionSignalFull(OAIHttpRequestWorker *worker, OAIBatchPutScheduledUpdateGroupActionAnswer summary);
    void gETCancelInstanceRefreshSignalFull(OAIHttpRequestWorker *worker, OAICancelInstanceRefreshAnswer summary);
    void gETCompleteLifecycleActionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateAutoScalingGroupSignalFull(OAIHttpRequestWorker *worker);
    void gETCreateLaunchConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void gETCreateOrUpdateTagsSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteAutoScalingGroupSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteLaunchConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteLifecycleHookSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteNotificationConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void gETDeletePolicySignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteScheduledActionSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteTagsSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteWarmPoolSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDescribeAccountLimitsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountLimitsAnswer summary);
    void gETDescribeAdjustmentTypesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAdjustmentTypesAnswer summary);
    void gETDescribeAutoScalingGroupsSignalFull(OAIHttpRequestWorker *worker, OAIAutoScalingGroupsType summary);
    void gETDescribeAutoScalingInstancesSignalFull(OAIHttpRequestWorker *worker, OAIAutoScalingInstancesType summary);
    void gETDescribeAutoScalingNotificationTypesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAutoScalingNotificationTypesAnswer summary);
    void gETDescribeInstanceRefreshesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeInstanceRefreshesAnswer summary);
    void gETDescribeLaunchConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAILaunchConfigurationsType summary);
    void gETDescribeLifecycleHookTypesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLifecycleHookTypesAnswer summary);
    void gETDescribeLifecycleHooksSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLifecycleHooksAnswer summary);
    void gETDescribeLoadBalancerTargetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancerTargetGroupsResponse summary);
    void gETDescribeLoadBalancersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancersResponse summary);
    void gETDescribeMetricCollectionTypesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeMetricCollectionTypesAnswer summary);
    void gETDescribeNotificationConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeNotificationConfigurationsAnswer summary);
    void gETDescribePoliciesSignalFull(OAIHttpRequestWorker *worker, OAIPoliciesType summary);
    void gETDescribeScalingActivitiesSignalFull(OAIHttpRequestWorker *worker, OAIActivitiesType summary);
    void gETDescribeScalingProcessTypesSignalFull(OAIHttpRequestWorker *worker, OAIProcessesType summary);
    void gETDescribeScheduledActionsSignalFull(OAIHttpRequestWorker *worker, OAIScheduledActionsType summary);
    void gETDescribeTagsSignalFull(OAIHttpRequestWorker *worker, OAITagsType summary);
    void gETDescribeTerminationPolicyTypesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTerminationPolicyTypesAnswer summary);
    void gETDescribeTrafficSourcesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTrafficSourcesResponse summary);
    void gETDescribeWarmPoolSignalFull(OAIHttpRequestWorker *worker, OAIDescribeWarmPoolAnswer summary);
    void gETDetachInstancesSignalFull(OAIHttpRequestWorker *worker, OAIDetachInstancesAnswer summary);
    void gETDetachLoadBalancerTargetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDetachLoadBalancersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDetachTrafficSourcesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDisableMetricsCollectionSignalFull(OAIHttpRequestWorker *worker);
    void gETEnableMetricsCollectionSignalFull(OAIHttpRequestWorker *worker);
    void gETEnterStandbySignalFull(OAIHttpRequestWorker *worker, OAIEnterStandbyAnswer summary);
    void gETExecutePolicySignalFull(OAIHttpRequestWorker *worker);
    void gETExitStandbySignalFull(OAIHttpRequestWorker *worker, OAIExitStandbyAnswer summary);
    void gETGetPredictiveScalingForecastSignalFull(OAIHttpRequestWorker *worker, OAIGetPredictiveScalingForecastAnswer summary);
    void gETPutLifecycleHookSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETPutNotificationConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void gETPutScalingPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicyARNType summary);
    void gETPutScheduledUpdateGroupActionSignalFull(OAIHttpRequestWorker *worker);
    void gETPutWarmPoolSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETRecordLifecycleActionHeartbeatSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETResumeProcessesSignalFull(OAIHttpRequestWorker *worker);
    void gETRollbackInstanceRefreshSignalFull(OAIHttpRequestWorker *worker, OAIRollbackInstanceRefreshAnswer summary);
    void gETSetDesiredCapacitySignalFull(OAIHttpRequestWorker *worker);
    void gETSetInstanceHealthSignalFull(OAIHttpRequestWorker *worker);
    void gETSetInstanceProtectionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETStartInstanceRefreshSignalFull(OAIHttpRequestWorker *worker, OAIStartInstanceRefreshAnswer summary);
    void gETSuspendProcessesSignalFull(OAIHttpRequestWorker *worker);
    void gETTerminateInstanceInAutoScalingGroupSignalFull(OAIHttpRequestWorker *worker, OAIActivityType summary);
    void gETUpdateAutoScalingGroupSignalFull(OAIHttpRequestWorker *worker);
    void pOSTAttachInstancesSignalFull(OAIHttpRequestWorker *worker);
    void pOSTAttachLoadBalancerTargetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTAttachLoadBalancersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTAttachTrafficSourcesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTBatchDeleteScheduledActionSignalFull(OAIHttpRequestWorker *worker, OAIBatchDeleteScheduledActionAnswer summary);
    void pOSTBatchPutScheduledUpdateGroupActionSignalFull(OAIHttpRequestWorker *worker, OAIBatchPutScheduledUpdateGroupActionAnswer summary);
    void pOSTCancelInstanceRefreshSignalFull(OAIHttpRequestWorker *worker, OAICancelInstanceRefreshAnswer summary);
    void pOSTCompleteLifecycleActionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateAutoScalingGroupSignalFull(OAIHttpRequestWorker *worker);
    void pOSTCreateLaunchConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void pOSTCreateOrUpdateTagsSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteAutoScalingGroupSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteLaunchConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteLifecycleHookSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteNotificationConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeletePolicySignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteScheduledActionSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteTagsSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteWarmPoolSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDescribeAccountLimitsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountLimitsAnswer summary);
    void pOSTDescribeAdjustmentTypesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAdjustmentTypesAnswer summary);
    void pOSTDescribeAutoScalingGroupsSignalFull(OAIHttpRequestWorker *worker, OAIAutoScalingGroupsType summary);
    void pOSTDescribeAutoScalingInstancesSignalFull(OAIHttpRequestWorker *worker, OAIAutoScalingInstancesType summary);
    void pOSTDescribeAutoScalingNotificationTypesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAutoScalingNotificationTypesAnswer summary);
    void pOSTDescribeInstanceRefreshesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeInstanceRefreshesAnswer summary);
    void pOSTDescribeLaunchConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAILaunchConfigurationsType summary);
    void pOSTDescribeLifecycleHookTypesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLifecycleHookTypesAnswer summary);
    void pOSTDescribeLifecycleHooksSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLifecycleHooksAnswer summary);
    void pOSTDescribeLoadBalancerTargetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancerTargetGroupsResponse summary);
    void pOSTDescribeLoadBalancersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancersResponse summary);
    void pOSTDescribeMetricCollectionTypesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeMetricCollectionTypesAnswer summary);
    void pOSTDescribeNotificationConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeNotificationConfigurationsAnswer summary);
    void pOSTDescribePoliciesSignalFull(OAIHttpRequestWorker *worker, OAIPoliciesType summary);
    void pOSTDescribeScalingActivitiesSignalFull(OAIHttpRequestWorker *worker, OAIActivitiesType summary);
    void pOSTDescribeScalingProcessTypesSignalFull(OAIHttpRequestWorker *worker, OAIProcessesType summary);
    void pOSTDescribeScheduledActionsSignalFull(OAIHttpRequestWorker *worker, OAIScheduledActionsType summary);
    void pOSTDescribeTagsSignalFull(OAIHttpRequestWorker *worker, OAITagsType summary);
    void pOSTDescribeTerminationPolicyTypesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTerminationPolicyTypesAnswer summary);
    void pOSTDescribeTrafficSourcesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTrafficSourcesResponse summary);
    void pOSTDescribeWarmPoolSignalFull(OAIHttpRequestWorker *worker, OAIDescribeWarmPoolAnswer summary);
    void pOSTDetachInstancesSignalFull(OAIHttpRequestWorker *worker, OAIDetachInstancesAnswer summary);
    void pOSTDetachLoadBalancerTargetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDetachLoadBalancersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDetachTrafficSourcesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDisableMetricsCollectionSignalFull(OAIHttpRequestWorker *worker);
    void pOSTEnableMetricsCollectionSignalFull(OAIHttpRequestWorker *worker);
    void pOSTEnterStandbySignalFull(OAIHttpRequestWorker *worker, OAIEnterStandbyAnswer summary);
    void pOSTExecutePolicySignalFull(OAIHttpRequestWorker *worker);
    void pOSTExitStandbySignalFull(OAIHttpRequestWorker *worker, OAIExitStandbyAnswer summary);
    void pOSTGetPredictiveScalingForecastSignalFull(OAIHttpRequestWorker *worker, OAIGetPredictiveScalingForecastAnswer summary);
    void pOSTPutLifecycleHookSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTPutNotificationConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void pOSTPutScalingPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicyARNType summary);
    void pOSTPutScheduledUpdateGroupActionSignalFull(OAIHttpRequestWorker *worker);
    void pOSTPutWarmPoolSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTRecordLifecycleActionHeartbeatSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTResumeProcessesSignalFull(OAIHttpRequestWorker *worker);
    void pOSTRollbackInstanceRefreshSignalFull(OAIHttpRequestWorker *worker, OAIRollbackInstanceRefreshAnswer summary);
    void pOSTSetDesiredCapacitySignalFull(OAIHttpRequestWorker *worker);
    void pOSTSetInstanceHealthSignalFull(OAIHttpRequestWorker *worker);
    void pOSTSetInstanceProtectionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTStartInstanceRefreshSignalFull(OAIHttpRequestWorker *worker, OAIStartInstanceRefreshAnswer summary);
    void pOSTSuspendProcessesSignalFull(OAIHttpRequestWorker *worker);
    void pOSTTerminateInstanceInAutoScalingGroupSignalFull(OAIHttpRequestWorker *worker, OAIActivityType summary);
    void pOSTUpdateAutoScalingGroupSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use gETAttachInstancesSignalError() instead")
    void gETAttachInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETAttachInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAttachLoadBalancerTargetGroupsSignalError() instead")
    void gETAttachLoadBalancerTargetGroupsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAttachLoadBalancerTargetGroupsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAttachLoadBalancersSignalError() instead")
    void gETAttachLoadBalancersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAttachLoadBalancersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAttachTrafficSourcesSignalError() instead")
    void gETAttachTrafficSourcesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAttachTrafficSourcesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETBatchDeleteScheduledActionSignalError() instead")
    void gETBatchDeleteScheduledActionSignalE(OAIBatchDeleteScheduledActionAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchDeleteScheduledActionSignalError(OAIBatchDeleteScheduledActionAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETBatchPutScheduledUpdateGroupActionSignalError() instead")
    void gETBatchPutScheduledUpdateGroupActionSignalE(OAIBatchPutScheduledUpdateGroupActionAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchPutScheduledUpdateGroupActionSignalError(OAIBatchPutScheduledUpdateGroupActionAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCancelInstanceRefreshSignalError() instead")
    void gETCancelInstanceRefreshSignalE(OAICancelInstanceRefreshAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCancelInstanceRefreshSignalError(OAICancelInstanceRefreshAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCompleteLifecycleActionSignalError() instead")
    void gETCompleteLifecycleActionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCompleteLifecycleActionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateAutoScalingGroupSignalError() instead")
    void gETCreateAutoScalingGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateAutoScalingGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateLaunchConfigurationSignalError() instead")
    void gETCreateLaunchConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateLaunchConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateOrUpdateTagsSignalError() instead")
    void gETCreateOrUpdateTagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateOrUpdateTagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteAutoScalingGroupSignalError() instead")
    void gETDeleteAutoScalingGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteAutoScalingGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteLaunchConfigurationSignalError() instead")
    void gETDeleteLaunchConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteLaunchConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteLifecycleHookSignalError() instead")
    void gETDeleteLifecycleHookSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteLifecycleHookSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteNotificationConfigurationSignalError() instead")
    void gETDeleteNotificationConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteNotificationConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeletePolicySignalError() instead")
    void gETDeletePolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeletePolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteScheduledActionSignalError() instead")
    void gETDeleteScheduledActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteScheduledActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteTagsSignalError() instead")
    void gETDeleteTagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteTagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteWarmPoolSignalError() instead")
    void gETDeleteWarmPoolSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteWarmPoolSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAccountLimitsSignalError() instead")
    void gETDescribeAccountLimitsSignalE(OAIDescribeAccountLimitsAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAccountLimitsSignalError(OAIDescribeAccountLimitsAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAdjustmentTypesSignalError() instead")
    void gETDescribeAdjustmentTypesSignalE(OAIDescribeAdjustmentTypesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAdjustmentTypesSignalError(OAIDescribeAdjustmentTypesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAutoScalingGroupsSignalError() instead")
    void gETDescribeAutoScalingGroupsSignalE(OAIAutoScalingGroupsType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAutoScalingGroupsSignalError(OAIAutoScalingGroupsType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAutoScalingInstancesSignalError() instead")
    void gETDescribeAutoScalingInstancesSignalE(OAIAutoScalingInstancesType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAutoScalingInstancesSignalError(OAIAutoScalingInstancesType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAutoScalingNotificationTypesSignalError() instead")
    void gETDescribeAutoScalingNotificationTypesSignalE(OAIDescribeAutoScalingNotificationTypesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAutoScalingNotificationTypesSignalError(OAIDescribeAutoScalingNotificationTypesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeInstanceRefreshesSignalError() instead")
    void gETDescribeInstanceRefreshesSignalE(OAIDescribeInstanceRefreshesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeInstanceRefreshesSignalError(OAIDescribeInstanceRefreshesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLaunchConfigurationsSignalError() instead")
    void gETDescribeLaunchConfigurationsSignalE(OAILaunchConfigurationsType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLaunchConfigurationsSignalError(OAILaunchConfigurationsType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLifecycleHookTypesSignalError() instead")
    void gETDescribeLifecycleHookTypesSignalE(OAIDescribeLifecycleHookTypesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLifecycleHookTypesSignalError(OAIDescribeLifecycleHookTypesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLifecycleHooksSignalError() instead")
    void gETDescribeLifecycleHooksSignalE(OAIDescribeLifecycleHooksAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLifecycleHooksSignalError(OAIDescribeLifecycleHooksAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancerTargetGroupsSignalError() instead")
    void gETDescribeLoadBalancerTargetGroupsSignalE(OAIDescribeLoadBalancerTargetGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancerTargetGroupsSignalError(OAIDescribeLoadBalancerTargetGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancersSignalError() instead")
    void gETDescribeLoadBalancersSignalE(OAIDescribeLoadBalancersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancersSignalError(OAIDescribeLoadBalancersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeMetricCollectionTypesSignalError() instead")
    void gETDescribeMetricCollectionTypesSignalE(OAIDescribeMetricCollectionTypesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeMetricCollectionTypesSignalError(OAIDescribeMetricCollectionTypesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeNotificationConfigurationsSignalError() instead")
    void gETDescribeNotificationConfigurationsSignalE(OAIDescribeNotificationConfigurationsAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeNotificationConfigurationsSignalError(OAIDescribeNotificationConfigurationsAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribePoliciesSignalError() instead")
    void gETDescribePoliciesSignalE(OAIPoliciesType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribePoliciesSignalError(OAIPoliciesType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeScalingActivitiesSignalError() instead")
    void gETDescribeScalingActivitiesSignalE(OAIActivitiesType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeScalingActivitiesSignalError(OAIActivitiesType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeScalingProcessTypesSignalError() instead")
    void gETDescribeScalingProcessTypesSignalE(OAIProcessesType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeScalingProcessTypesSignalError(OAIProcessesType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeScheduledActionsSignalError() instead")
    void gETDescribeScheduledActionsSignalE(OAIScheduledActionsType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeScheduledActionsSignalError(OAIScheduledActionsType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTagsSignalError() instead")
    void gETDescribeTagsSignalE(OAITagsType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTagsSignalError(OAITagsType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTerminationPolicyTypesSignalError() instead")
    void gETDescribeTerminationPolicyTypesSignalE(OAIDescribeTerminationPolicyTypesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTerminationPolicyTypesSignalError(OAIDescribeTerminationPolicyTypesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTrafficSourcesSignalError() instead")
    void gETDescribeTrafficSourcesSignalE(OAIDescribeTrafficSourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTrafficSourcesSignalError(OAIDescribeTrafficSourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeWarmPoolSignalError() instead")
    void gETDescribeWarmPoolSignalE(OAIDescribeWarmPoolAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeWarmPoolSignalError(OAIDescribeWarmPoolAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetachInstancesSignalError() instead")
    void gETDetachInstancesSignalE(OAIDetachInstancesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetachInstancesSignalError(OAIDetachInstancesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetachLoadBalancerTargetGroupsSignalError() instead")
    void gETDetachLoadBalancerTargetGroupsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetachLoadBalancerTargetGroupsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetachLoadBalancersSignalError() instead")
    void gETDetachLoadBalancersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetachLoadBalancersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetachTrafficSourcesSignalError() instead")
    void gETDetachTrafficSourcesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetachTrafficSourcesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisableMetricsCollectionSignalError() instead")
    void gETDisableMetricsCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisableMetricsCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnableMetricsCollectionSignalError() instead")
    void gETEnableMetricsCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnableMetricsCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnterStandbySignalError() instead")
    void gETEnterStandbySignalE(OAIEnterStandbyAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnterStandbySignalError(OAIEnterStandbyAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETExecutePolicySignalError() instead")
    void gETExecutePolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETExecutePolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETExitStandbySignalError() instead")
    void gETExitStandbySignalE(OAIExitStandbyAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETExitStandbySignalError(OAIExitStandbyAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetPredictiveScalingForecastSignalError() instead")
    void gETGetPredictiveScalingForecastSignalE(OAIGetPredictiveScalingForecastAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetPredictiveScalingForecastSignalError(OAIGetPredictiveScalingForecastAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutLifecycleHookSignalError() instead")
    void gETPutLifecycleHookSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutLifecycleHookSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutNotificationConfigurationSignalError() instead")
    void gETPutNotificationConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutNotificationConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutScalingPolicySignalError() instead")
    void gETPutScalingPolicySignalE(OAIPolicyARNType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutScalingPolicySignalError(OAIPolicyARNType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutScheduledUpdateGroupActionSignalError() instead")
    void gETPutScheduledUpdateGroupActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutScheduledUpdateGroupActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutWarmPoolSignalError() instead")
    void gETPutWarmPoolSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutWarmPoolSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRecordLifecycleActionHeartbeatSignalError() instead")
    void gETRecordLifecycleActionHeartbeatSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRecordLifecycleActionHeartbeatSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETResumeProcessesSignalError() instead")
    void gETResumeProcessesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETResumeProcessesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRollbackInstanceRefreshSignalError() instead")
    void gETRollbackInstanceRefreshSignalE(OAIRollbackInstanceRefreshAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRollbackInstanceRefreshSignalError(OAIRollbackInstanceRefreshAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetDesiredCapacitySignalError() instead")
    void gETSetDesiredCapacitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetDesiredCapacitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetInstanceHealthSignalError() instead")
    void gETSetInstanceHealthSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetInstanceHealthSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetInstanceProtectionSignalError() instead")
    void gETSetInstanceProtectionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetInstanceProtectionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETStartInstanceRefreshSignalError() instead")
    void gETStartInstanceRefreshSignalE(OAIStartInstanceRefreshAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETStartInstanceRefreshSignalError(OAIStartInstanceRefreshAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSuspendProcessesSignalError() instead")
    void gETSuspendProcessesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETSuspendProcessesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETTerminateInstanceInAutoScalingGroupSignalError() instead")
    void gETTerminateInstanceInAutoScalingGroupSignalE(OAIActivityType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETTerminateInstanceInAutoScalingGroupSignalError(OAIActivityType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateAutoScalingGroupSignalError() instead")
    void gETUpdateAutoScalingGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateAutoScalingGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAttachInstancesSignalError() instead")
    void pOSTAttachInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAttachInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAttachLoadBalancerTargetGroupsSignalError() instead")
    void pOSTAttachLoadBalancerTargetGroupsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAttachLoadBalancerTargetGroupsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAttachLoadBalancersSignalError() instead")
    void pOSTAttachLoadBalancersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAttachLoadBalancersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAttachTrafficSourcesSignalError() instead")
    void pOSTAttachTrafficSourcesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAttachTrafficSourcesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchDeleteScheduledActionSignalError() instead")
    void pOSTBatchDeleteScheduledActionSignalE(OAIBatchDeleteScheduledActionAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchDeleteScheduledActionSignalError(OAIBatchDeleteScheduledActionAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchPutScheduledUpdateGroupActionSignalError() instead")
    void pOSTBatchPutScheduledUpdateGroupActionSignalE(OAIBatchPutScheduledUpdateGroupActionAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchPutScheduledUpdateGroupActionSignalError(OAIBatchPutScheduledUpdateGroupActionAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCancelInstanceRefreshSignalError() instead")
    void pOSTCancelInstanceRefreshSignalE(OAICancelInstanceRefreshAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCancelInstanceRefreshSignalError(OAICancelInstanceRefreshAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCompleteLifecycleActionSignalError() instead")
    void pOSTCompleteLifecycleActionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCompleteLifecycleActionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateAutoScalingGroupSignalError() instead")
    void pOSTCreateAutoScalingGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateAutoScalingGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateLaunchConfigurationSignalError() instead")
    void pOSTCreateLaunchConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateLaunchConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateOrUpdateTagsSignalError() instead")
    void pOSTCreateOrUpdateTagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateOrUpdateTagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteAutoScalingGroupSignalError() instead")
    void pOSTDeleteAutoScalingGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteAutoScalingGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteLaunchConfigurationSignalError() instead")
    void pOSTDeleteLaunchConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteLaunchConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteLifecycleHookSignalError() instead")
    void pOSTDeleteLifecycleHookSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteLifecycleHookSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteNotificationConfigurationSignalError() instead")
    void pOSTDeleteNotificationConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteNotificationConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeletePolicySignalError() instead")
    void pOSTDeletePolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeletePolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteScheduledActionSignalError() instead")
    void pOSTDeleteScheduledActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteScheduledActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteTagsSignalError() instead")
    void pOSTDeleteTagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteTagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteWarmPoolSignalError() instead")
    void pOSTDeleteWarmPoolSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteWarmPoolSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAccountLimitsSignalError() instead")
    void pOSTDescribeAccountLimitsSignalE(OAIDescribeAccountLimitsAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAccountLimitsSignalError(OAIDescribeAccountLimitsAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAdjustmentTypesSignalError() instead")
    void pOSTDescribeAdjustmentTypesSignalE(OAIDescribeAdjustmentTypesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAdjustmentTypesSignalError(OAIDescribeAdjustmentTypesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAutoScalingGroupsSignalError() instead")
    void pOSTDescribeAutoScalingGroupsSignalE(OAIAutoScalingGroupsType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAutoScalingGroupsSignalError(OAIAutoScalingGroupsType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAutoScalingInstancesSignalError() instead")
    void pOSTDescribeAutoScalingInstancesSignalE(OAIAutoScalingInstancesType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAutoScalingInstancesSignalError(OAIAutoScalingInstancesType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAutoScalingNotificationTypesSignalError() instead")
    void pOSTDescribeAutoScalingNotificationTypesSignalE(OAIDescribeAutoScalingNotificationTypesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAutoScalingNotificationTypesSignalError(OAIDescribeAutoScalingNotificationTypesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeInstanceRefreshesSignalError() instead")
    void pOSTDescribeInstanceRefreshesSignalE(OAIDescribeInstanceRefreshesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeInstanceRefreshesSignalError(OAIDescribeInstanceRefreshesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLaunchConfigurationsSignalError() instead")
    void pOSTDescribeLaunchConfigurationsSignalE(OAILaunchConfigurationsType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLaunchConfigurationsSignalError(OAILaunchConfigurationsType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLifecycleHookTypesSignalError() instead")
    void pOSTDescribeLifecycleHookTypesSignalE(OAIDescribeLifecycleHookTypesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLifecycleHookTypesSignalError(OAIDescribeLifecycleHookTypesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLifecycleHooksSignalError() instead")
    void pOSTDescribeLifecycleHooksSignalE(OAIDescribeLifecycleHooksAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLifecycleHooksSignalError(OAIDescribeLifecycleHooksAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancerTargetGroupsSignalError() instead")
    void pOSTDescribeLoadBalancerTargetGroupsSignalE(OAIDescribeLoadBalancerTargetGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancerTargetGroupsSignalError(OAIDescribeLoadBalancerTargetGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancersSignalError() instead")
    void pOSTDescribeLoadBalancersSignalE(OAIDescribeLoadBalancersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancersSignalError(OAIDescribeLoadBalancersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeMetricCollectionTypesSignalError() instead")
    void pOSTDescribeMetricCollectionTypesSignalE(OAIDescribeMetricCollectionTypesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeMetricCollectionTypesSignalError(OAIDescribeMetricCollectionTypesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeNotificationConfigurationsSignalError() instead")
    void pOSTDescribeNotificationConfigurationsSignalE(OAIDescribeNotificationConfigurationsAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeNotificationConfigurationsSignalError(OAIDescribeNotificationConfigurationsAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribePoliciesSignalError() instead")
    void pOSTDescribePoliciesSignalE(OAIPoliciesType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribePoliciesSignalError(OAIPoliciesType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeScalingActivitiesSignalError() instead")
    void pOSTDescribeScalingActivitiesSignalE(OAIActivitiesType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeScalingActivitiesSignalError(OAIActivitiesType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeScalingProcessTypesSignalError() instead")
    void pOSTDescribeScalingProcessTypesSignalE(OAIProcessesType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeScalingProcessTypesSignalError(OAIProcessesType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeScheduledActionsSignalError() instead")
    void pOSTDescribeScheduledActionsSignalE(OAIScheduledActionsType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeScheduledActionsSignalError(OAIScheduledActionsType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTagsSignalError() instead")
    void pOSTDescribeTagsSignalE(OAITagsType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTagsSignalError(OAITagsType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTerminationPolicyTypesSignalError() instead")
    void pOSTDescribeTerminationPolicyTypesSignalE(OAIDescribeTerminationPolicyTypesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTerminationPolicyTypesSignalError(OAIDescribeTerminationPolicyTypesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTrafficSourcesSignalError() instead")
    void pOSTDescribeTrafficSourcesSignalE(OAIDescribeTrafficSourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTrafficSourcesSignalError(OAIDescribeTrafficSourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeWarmPoolSignalError() instead")
    void pOSTDescribeWarmPoolSignalE(OAIDescribeWarmPoolAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeWarmPoolSignalError(OAIDescribeWarmPoolAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetachInstancesSignalError() instead")
    void pOSTDetachInstancesSignalE(OAIDetachInstancesAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetachInstancesSignalError(OAIDetachInstancesAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetachLoadBalancerTargetGroupsSignalError() instead")
    void pOSTDetachLoadBalancerTargetGroupsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetachLoadBalancerTargetGroupsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetachLoadBalancersSignalError() instead")
    void pOSTDetachLoadBalancersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetachLoadBalancersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetachTrafficSourcesSignalError() instead")
    void pOSTDetachTrafficSourcesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetachTrafficSourcesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisableMetricsCollectionSignalError() instead")
    void pOSTDisableMetricsCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisableMetricsCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnableMetricsCollectionSignalError() instead")
    void pOSTEnableMetricsCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnableMetricsCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnterStandbySignalError() instead")
    void pOSTEnterStandbySignalE(OAIEnterStandbyAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnterStandbySignalError(OAIEnterStandbyAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTExecutePolicySignalError() instead")
    void pOSTExecutePolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTExecutePolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTExitStandbySignalError() instead")
    void pOSTExitStandbySignalE(OAIExitStandbyAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTExitStandbySignalError(OAIExitStandbyAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetPredictiveScalingForecastSignalError() instead")
    void pOSTGetPredictiveScalingForecastSignalE(OAIGetPredictiveScalingForecastAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetPredictiveScalingForecastSignalError(OAIGetPredictiveScalingForecastAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutLifecycleHookSignalError() instead")
    void pOSTPutLifecycleHookSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutLifecycleHookSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutNotificationConfigurationSignalError() instead")
    void pOSTPutNotificationConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutNotificationConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutScalingPolicySignalError() instead")
    void pOSTPutScalingPolicySignalE(OAIPolicyARNType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutScalingPolicySignalError(OAIPolicyARNType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutScheduledUpdateGroupActionSignalError() instead")
    void pOSTPutScheduledUpdateGroupActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutScheduledUpdateGroupActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutWarmPoolSignalError() instead")
    void pOSTPutWarmPoolSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutWarmPoolSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRecordLifecycleActionHeartbeatSignalError() instead")
    void pOSTRecordLifecycleActionHeartbeatSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRecordLifecycleActionHeartbeatSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTResumeProcessesSignalError() instead")
    void pOSTResumeProcessesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTResumeProcessesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRollbackInstanceRefreshSignalError() instead")
    void pOSTRollbackInstanceRefreshSignalE(OAIRollbackInstanceRefreshAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRollbackInstanceRefreshSignalError(OAIRollbackInstanceRefreshAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetDesiredCapacitySignalError() instead")
    void pOSTSetDesiredCapacitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetDesiredCapacitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetInstanceHealthSignalError() instead")
    void pOSTSetInstanceHealthSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetInstanceHealthSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetInstanceProtectionSignalError() instead")
    void pOSTSetInstanceProtectionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetInstanceProtectionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTStartInstanceRefreshSignalError() instead")
    void pOSTStartInstanceRefreshSignalE(OAIStartInstanceRefreshAnswer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTStartInstanceRefreshSignalError(OAIStartInstanceRefreshAnswer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSuspendProcessesSignalError() instead")
    void pOSTSuspendProcessesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSuspendProcessesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTTerminateInstanceInAutoScalingGroupSignalError() instead")
    void pOSTTerminateInstanceInAutoScalingGroupSignalE(OAIActivityType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTTerminateInstanceInAutoScalingGroupSignalError(OAIActivityType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateAutoScalingGroupSignalError() instead")
    void pOSTUpdateAutoScalingGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateAutoScalingGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETAttachInstancesSignalErrorFull() instead")
    void gETAttachInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAttachInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAttachLoadBalancerTargetGroupsSignalErrorFull() instead")
    void gETAttachLoadBalancerTargetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAttachLoadBalancerTargetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAttachLoadBalancersSignalErrorFull() instead")
    void gETAttachLoadBalancersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAttachLoadBalancersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAttachTrafficSourcesSignalErrorFull() instead")
    void gETAttachTrafficSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAttachTrafficSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETBatchDeleteScheduledActionSignalErrorFull() instead")
    void gETBatchDeleteScheduledActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchDeleteScheduledActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETBatchPutScheduledUpdateGroupActionSignalErrorFull() instead")
    void gETBatchPutScheduledUpdateGroupActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchPutScheduledUpdateGroupActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCancelInstanceRefreshSignalErrorFull() instead")
    void gETCancelInstanceRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCancelInstanceRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCompleteLifecycleActionSignalErrorFull() instead")
    void gETCompleteLifecycleActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCompleteLifecycleActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateAutoScalingGroupSignalErrorFull() instead")
    void gETCreateAutoScalingGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateAutoScalingGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateLaunchConfigurationSignalErrorFull() instead")
    void gETCreateLaunchConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateLaunchConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateOrUpdateTagsSignalErrorFull() instead")
    void gETCreateOrUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateOrUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteAutoScalingGroupSignalErrorFull() instead")
    void gETDeleteAutoScalingGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteAutoScalingGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteLaunchConfigurationSignalErrorFull() instead")
    void gETDeleteLaunchConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteLaunchConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteLifecycleHookSignalErrorFull() instead")
    void gETDeleteLifecycleHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteLifecycleHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteNotificationConfigurationSignalErrorFull() instead")
    void gETDeleteNotificationConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteNotificationConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeletePolicySignalErrorFull() instead")
    void gETDeletePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeletePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteScheduledActionSignalErrorFull() instead")
    void gETDeleteScheduledActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteScheduledActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteTagsSignalErrorFull() instead")
    void gETDeleteTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteWarmPoolSignalErrorFull() instead")
    void gETDeleteWarmPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteWarmPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAccountLimitsSignalErrorFull() instead")
    void gETDescribeAccountLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAccountLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAdjustmentTypesSignalErrorFull() instead")
    void gETDescribeAdjustmentTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAdjustmentTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAutoScalingGroupsSignalErrorFull() instead")
    void gETDescribeAutoScalingGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAutoScalingGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAutoScalingInstancesSignalErrorFull() instead")
    void gETDescribeAutoScalingInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAutoScalingInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAutoScalingNotificationTypesSignalErrorFull() instead")
    void gETDescribeAutoScalingNotificationTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAutoScalingNotificationTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeInstanceRefreshesSignalErrorFull() instead")
    void gETDescribeInstanceRefreshesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeInstanceRefreshesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLaunchConfigurationsSignalErrorFull() instead")
    void gETDescribeLaunchConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLaunchConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLifecycleHookTypesSignalErrorFull() instead")
    void gETDescribeLifecycleHookTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLifecycleHookTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLifecycleHooksSignalErrorFull() instead")
    void gETDescribeLifecycleHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLifecycleHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancerTargetGroupsSignalErrorFull() instead")
    void gETDescribeLoadBalancerTargetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancerTargetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancersSignalErrorFull() instead")
    void gETDescribeLoadBalancersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeMetricCollectionTypesSignalErrorFull() instead")
    void gETDescribeMetricCollectionTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeMetricCollectionTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeNotificationConfigurationsSignalErrorFull() instead")
    void gETDescribeNotificationConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeNotificationConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribePoliciesSignalErrorFull() instead")
    void gETDescribePoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribePoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeScalingActivitiesSignalErrorFull() instead")
    void gETDescribeScalingActivitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeScalingActivitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeScalingProcessTypesSignalErrorFull() instead")
    void gETDescribeScalingProcessTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeScalingProcessTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeScheduledActionsSignalErrorFull() instead")
    void gETDescribeScheduledActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeScheduledActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTagsSignalErrorFull() instead")
    void gETDescribeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTerminationPolicyTypesSignalErrorFull() instead")
    void gETDescribeTerminationPolicyTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTerminationPolicyTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTrafficSourcesSignalErrorFull() instead")
    void gETDescribeTrafficSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTrafficSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeWarmPoolSignalErrorFull() instead")
    void gETDescribeWarmPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeWarmPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetachInstancesSignalErrorFull() instead")
    void gETDetachInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetachInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetachLoadBalancerTargetGroupsSignalErrorFull() instead")
    void gETDetachLoadBalancerTargetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetachLoadBalancerTargetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetachLoadBalancersSignalErrorFull() instead")
    void gETDetachLoadBalancersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetachLoadBalancersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetachTrafficSourcesSignalErrorFull() instead")
    void gETDetachTrafficSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetachTrafficSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisableMetricsCollectionSignalErrorFull() instead")
    void gETDisableMetricsCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisableMetricsCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnableMetricsCollectionSignalErrorFull() instead")
    void gETEnableMetricsCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnableMetricsCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnterStandbySignalErrorFull() instead")
    void gETEnterStandbySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnterStandbySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETExecutePolicySignalErrorFull() instead")
    void gETExecutePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETExecutePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETExitStandbySignalErrorFull() instead")
    void gETExitStandbySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETExitStandbySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetPredictiveScalingForecastSignalErrorFull() instead")
    void gETGetPredictiveScalingForecastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetPredictiveScalingForecastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutLifecycleHookSignalErrorFull() instead")
    void gETPutLifecycleHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutLifecycleHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutNotificationConfigurationSignalErrorFull() instead")
    void gETPutNotificationConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutNotificationConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutScalingPolicySignalErrorFull() instead")
    void gETPutScalingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutScalingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutScheduledUpdateGroupActionSignalErrorFull() instead")
    void gETPutScheduledUpdateGroupActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutScheduledUpdateGroupActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutWarmPoolSignalErrorFull() instead")
    void gETPutWarmPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutWarmPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRecordLifecycleActionHeartbeatSignalErrorFull() instead")
    void gETRecordLifecycleActionHeartbeatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRecordLifecycleActionHeartbeatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETResumeProcessesSignalErrorFull() instead")
    void gETResumeProcessesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETResumeProcessesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRollbackInstanceRefreshSignalErrorFull() instead")
    void gETRollbackInstanceRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRollbackInstanceRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetDesiredCapacitySignalErrorFull() instead")
    void gETSetDesiredCapacitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetDesiredCapacitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetInstanceHealthSignalErrorFull() instead")
    void gETSetInstanceHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetInstanceHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetInstanceProtectionSignalErrorFull() instead")
    void gETSetInstanceProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetInstanceProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETStartInstanceRefreshSignalErrorFull() instead")
    void gETStartInstanceRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETStartInstanceRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSuspendProcessesSignalErrorFull() instead")
    void gETSuspendProcessesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSuspendProcessesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETTerminateInstanceInAutoScalingGroupSignalErrorFull() instead")
    void gETTerminateInstanceInAutoScalingGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETTerminateInstanceInAutoScalingGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateAutoScalingGroupSignalErrorFull() instead")
    void gETUpdateAutoScalingGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateAutoScalingGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAttachInstancesSignalErrorFull() instead")
    void pOSTAttachInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAttachInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAttachLoadBalancerTargetGroupsSignalErrorFull() instead")
    void pOSTAttachLoadBalancerTargetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAttachLoadBalancerTargetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAttachLoadBalancersSignalErrorFull() instead")
    void pOSTAttachLoadBalancersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAttachLoadBalancersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAttachTrafficSourcesSignalErrorFull() instead")
    void pOSTAttachTrafficSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAttachTrafficSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchDeleteScheduledActionSignalErrorFull() instead")
    void pOSTBatchDeleteScheduledActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchDeleteScheduledActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchPutScheduledUpdateGroupActionSignalErrorFull() instead")
    void pOSTBatchPutScheduledUpdateGroupActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchPutScheduledUpdateGroupActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCancelInstanceRefreshSignalErrorFull() instead")
    void pOSTCancelInstanceRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCancelInstanceRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCompleteLifecycleActionSignalErrorFull() instead")
    void pOSTCompleteLifecycleActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCompleteLifecycleActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateAutoScalingGroupSignalErrorFull() instead")
    void pOSTCreateAutoScalingGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateAutoScalingGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateLaunchConfigurationSignalErrorFull() instead")
    void pOSTCreateLaunchConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateLaunchConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateOrUpdateTagsSignalErrorFull() instead")
    void pOSTCreateOrUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateOrUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteAutoScalingGroupSignalErrorFull() instead")
    void pOSTDeleteAutoScalingGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteAutoScalingGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteLaunchConfigurationSignalErrorFull() instead")
    void pOSTDeleteLaunchConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteLaunchConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteLifecycleHookSignalErrorFull() instead")
    void pOSTDeleteLifecycleHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteLifecycleHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteNotificationConfigurationSignalErrorFull() instead")
    void pOSTDeleteNotificationConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteNotificationConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeletePolicySignalErrorFull() instead")
    void pOSTDeletePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeletePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteScheduledActionSignalErrorFull() instead")
    void pOSTDeleteScheduledActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteScheduledActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteTagsSignalErrorFull() instead")
    void pOSTDeleteTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteWarmPoolSignalErrorFull() instead")
    void pOSTDeleteWarmPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteWarmPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAccountLimitsSignalErrorFull() instead")
    void pOSTDescribeAccountLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAccountLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAdjustmentTypesSignalErrorFull() instead")
    void pOSTDescribeAdjustmentTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAdjustmentTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAutoScalingGroupsSignalErrorFull() instead")
    void pOSTDescribeAutoScalingGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAutoScalingGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAutoScalingInstancesSignalErrorFull() instead")
    void pOSTDescribeAutoScalingInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAutoScalingInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAutoScalingNotificationTypesSignalErrorFull() instead")
    void pOSTDescribeAutoScalingNotificationTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAutoScalingNotificationTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeInstanceRefreshesSignalErrorFull() instead")
    void pOSTDescribeInstanceRefreshesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeInstanceRefreshesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLaunchConfigurationsSignalErrorFull() instead")
    void pOSTDescribeLaunchConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLaunchConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLifecycleHookTypesSignalErrorFull() instead")
    void pOSTDescribeLifecycleHookTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLifecycleHookTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLifecycleHooksSignalErrorFull() instead")
    void pOSTDescribeLifecycleHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLifecycleHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancerTargetGroupsSignalErrorFull() instead")
    void pOSTDescribeLoadBalancerTargetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancerTargetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancersSignalErrorFull() instead")
    void pOSTDescribeLoadBalancersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeMetricCollectionTypesSignalErrorFull() instead")
    void pOSTDescribeMetricCollectionTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeMetricCollectionTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeNotificationConfigurationsSignalErrorFull() instead")
    void pOSTDescribeNotificationConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeNotificationConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribePoliciesSignalErrorFull() instead")
    void pOSTDescribePoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribePoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeScalingActivitiesSignalErrorFull() instead")
    void pOSTDescribeScalingActivitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeScalingActivitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeScalingProcessTypesSignalErrorFull() instead")
    void pOSTDescribeScalingProcessTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeScalingProcessTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeScheduledActionsSignalErrorFull() instead")
    void pOSTDescribeScheduledActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeScheduledActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTagsSignalErrorFull() instead")
    void pOSTDescribeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTerminationPolicyTypesSignalErrorFull() instead")
    void pOSTDescribeTerminationPolicyTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTerminationPolicyTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTrafficSourcesSignalErrorFull() instead")
    void pOSTDescribeTrafficSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTrafficSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeWarmPoolSignalErrorFull() instead")
    void pOSTDescribeWarmPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeWarmPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetachInstancesSignalErrorFull() instead")
    void pOSTDetachInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetachInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetachLoadBalancerTargetGroupsSignalErrorFull() instead")
    void pOSTDetachLoadBalancerTargetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetachLoadBalancerTargetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetachLoadBalancersSignalErrorFull() instead")
    void pOSTDetachLoadBalancersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetachLoadBalancersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetachTrafficSourcesSignalErrorFull() instead")
    void pOSTDetachTrafficSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetachTrafficSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisableMetricsCollectionSignalErrorFull() instead")
    void pOSTDisableMetricsCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisableMetricsCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnableMetricsCollectionSignalErrorFull() instead")
    void pOSTEnableMetricsCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnableMetricsCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnterStandbySignalErrorFull() instead")
    void pOSTEnterStandbySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnterStandbySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTExecutePolicySignalErrorFull() instead")
    void pOSTExecutePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTExecutePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTExitStandbySignalErrorFull() instead")
    void pOSTExitStandbySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTExitStandbySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetPredictiveScalingForecastSignalErrorFull() instead")
    void pOSTGetPredictiveScalingForecastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetPredictiveScalingForecastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutLifecycleHookSignalErrorFull() instead")
    void pOSTPutLifecycleHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutLifecycleHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutNotificationConfigurationSignalErrorFull() instead")
    void pOSTPutNotificationConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutNotificationConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutScalingPolicySignalErrorFull() instead")
    void pOSTPutScalingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutScalingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutScheduledUpdateGroupActionSignalErrorFull() instead")
    void pOSTPutScheduledUpdateGroupActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutScheduledUpdateGroupActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutWarmPoolSignalErrorFull() instead")
    void pOSTPutWarmPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutWarmPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRecordLifecycleActionHeartbeatSignalErrorFull() instead")
    void pOSTRecordLifecycleActionHeartbeatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRecordLifecycleActionHeartbeatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTResumeProcessesSignalErrorFull() instead")
    void pOSTResumeProcessesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTResumeProcessesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRollbackInstanceRefreshSignalErrorFull() instead")
    void pOSTRollbackInstanceRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRollbackInstanceRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetDesiredCapacitySignalErrorFull() instead")
    void pOSTSetDesiredCapacitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetDesiredCapacitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetInstanceHealthSignalErrorFull() instead")
    void pOSTSetInstanceHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetInstanceHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetInstanceProtectionSignalErrorFull() instead")
    void pOSTSetInstanceProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetInstanceProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTStartInstanceRefreshSignalErrorFull() instead")
    void pOSTStartInstanceRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTStartInstanceRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSuspendProcessesSignalErrorFull() instead")
    void pOSTSuspendProcessesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSuspendProcessesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTTerminateInstanceInAutoScalingGroupSignalErrorFull() instead")
    void pOSTTerminateInstanceInAutoScalingGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTTerminateInstanceInAutoScalingGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateAutoScalingGroupSignalErrorFull() instead")
    void pOSTUpdateAutoScalingGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateAutoScalingGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
