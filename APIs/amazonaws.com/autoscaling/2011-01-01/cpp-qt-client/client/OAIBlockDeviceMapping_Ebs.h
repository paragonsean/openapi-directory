/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBlockDeviceMapping_Ebs.h
 *
 * 
 */

#ifndef OAIBlockDeviceMapping_Ebs_H
#define OAIBlockDeviceMapping_Ebs_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBlockDeviceMapping_Ebs : public OAIObject {
public:
    OAIBlockDeviceMapping_Ebs();
    OAIBlockDeviceMapping_Ebs(QString json);
    ~OAIBlockDeviceMapping_Ebs() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSnapshotId() const;
    void setSnapshotId(const QString &snapshot_id);
    bool is_snapshot_id_Set() const;
    bool is_snapshot_id_Valid() const;

    qint32 getVolumeSize() const;
    void setVolumeSize(const qint32 &volume_size);
    bool is_volume_size_Set() const;
    bool is_volume_size_Valid() const;

    QString getVolumeType() const;
    void setVolumeType(const QString &volume_type);
    bool is_volume_type_Set() const;
    bool is_volume_type_Valid() const;

    bool getDeleteOnTermination() const;
    void setDeleteOnTermination(const bool &delete_on_termination);
    bool is_delete_on_termination_Set() const;
    bool is_delete_on_termination_Valid() const;

    qint32 getIops() const;
    void setIops(const qint32 &iops);
    bool is_iops_Set() const;
    bool is_iops_Valid() const;

    bool getEncrypted() const;
    void setEncrypted(const bool &encrypted);
    bool is_encrypted_Set() const;
    bool is_encrypted_Valid() const;

    qint32 getThroughput() const;
    void setThroughput(const qint32 &throughput);
    bool is_throughput_Set() const;
    bool is_throughput_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_snapshot_id;
    bool m_snapshot_id_isSet;
    bool m_snapshot_id_isValid;

    qint32 m_volume_size;
    bool m_volume_size_isSet;
    bool m_volume_size_isValid;

    QString m_volume_type;
    bool m_volume_type_isSet;
    bool m_volume_type_isValid;

    bool m_delete_on_termination;
    bool m_delete_on_termination_isSet;
    bool m_delete_on_termination_isValid;

    qint32 m_iops;
    bool m_iops_isSet;
    bool m_iops_isValid;

    bool m_encrypted;
    bool m_encrypted_isSet;
    bool m_encrypted_isValid;

    qint32 m_throughput;
    bool m_throughput_isSet;
    bool m_throughput_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBlockDeviceMapping_Ebs)

#endif // OAIBlockDeviceMapping_Ebs_H
