/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoScalingInstanceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoScalingInstanceDetails::OAIAutoScalingInstanceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoScalingInstanceDetails::OAIAutoScalingInstanceDetails() {
    this->initializeModel();
}

OAIAutoScalingInstanceDetails::~OAIAutoScalingInstanceDetails() {}

void OAIAutoScalingInstanceDetails::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_auto_scaling_group_name_isSet = false;
    m_auto_scaling_group_name_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_lifecycle_state_isSet = false;
    m_lifecycle_state_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_launch_configuration_name_isSet = false;
    m_launch_configuration_name_isValid = false;

    m_launch_template_isSet = false;
    m_launch_template_isValid = false;

    m_protected_from_scale_in_isSet = false;
    m_protected_from_scale_in_isValid = false;

    m_weighted_capacity_isSet = false;
    m_weighted_capacity_isValid = false;
}

void OAIAutoScalingInstanceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoScalingInstanceDetails::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_auto_scaling_group_name_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_name, json[QString("AutoScalingGroupName")]);
    m_auto_scaling_group_name_isSet = !json[QString("AutoScalingGroupName")].isNull() && m_auto_scaling_group_name_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_lifecycle_state_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_state, json[QString("LifecycleState")]);
    m_lifecycle_state_isSet = !json[QString("LifecycleState")].isNull() && m_lifecycle_state_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("HealthStatus")]);
    m_health_status_isSet = !json[QString("HealthStatus")].isNull() && m_health_status_isValid;

    m_launch_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_launch_configuration_name, json[QString("LaunchConfigurationName")]);
    m_launch_configuration_name_isSet = !json[QString("LaunchConfigurationName")].isNull() && m_launch_configuration_name_isValid;

    m_launch_template_isValid = ::OpenAPI::fromJsonValue(m_launch_template, json[QString("LaunchTemplate")]);
    m_launch_template_isSet = !json[QString("LaunchTemplate")].isNull() && m_launch_template_isValid;

    m_protected_from_scale_in_isValid = ::OpenAPI::fromJsonValue(m_protected_from_scale_in, json[QString("ProtectedFromScaleIn")]);
    m_protected_from_scale_in_isSet = !json[QString("ProtectedFromScaleIn")].isNull() && m_protected_from_scale_in_isValid;

    m_weighted_capacity_isValid = ::OpenAPI::fromJsonValue(m_weighted_capacity, json[QString("WeightedCapacity")]);
    m_weighted_capacity_isSet = !json[QString("WeightedCapacity")].isNull() && m_weighted_capacity_isValid;
}

QString OAIAutoScalingInstanceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoScalingInstanceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_auto_scaling_group_name_isSet) {
        obj.insert(QString("AutoScalingGroupName"), ::OpenAPI::toJsonValue(m_auto_scaling_group_name));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_lifecycle_state_isSet) {
        obj.insert(QString("LifecycleState"), ::OpenAPI::toJsonValue(m_lifecycle_state));
    }
    if (m_health_status_isSet) {
        obj.insert(QString("HealthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_launch_configuration_name_isSet) {
        obj.insert(QString("LaunchConfigurationName"), ::OpenAPI::toJsonValue(m_launch_configuration_name));
    }
    if (m_launch_template.isSet()) {
        obj.insert(QString("LaunchTemplate"), ::OpenAPI::toJsonValue(m_launch_template));
    }
    if (m_protected_from_scale_in_isSet) {
        obj.insert(QString("ProtectedFromScaleIn"), ::OpenAPI::toJsonValue(m_protected_from_scale_in));
    }
    if (m_weighted_capacity_isSet) {
        obj.insert(QString("WeightedCapacity"), ::OpenAPI::toJsonValue(m_weighted_capacity));
    }
    return obj;
}

QString OAIAutoScalingInstanceDetails::getInstanceId() const {
    return m_instance_id;
}
void OAIAutoScalingInstanceDetails::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIAutoScalingInstanceDetails::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIAutoScalingInstanceDetails::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIAutoScalingInstanceDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIAutoScalingInstanceDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIAutoScalingInstanceDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIAutoScalingInstanceDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIAutoScalingInstanceDetails::getAutoScalingGroupName() const {
    return m_auto_scaling_group_name;
}
void OAIAutoScalingInstanceDetails::setAutoScalingGroupName(const QString &auto_scaling_group_name) {
    m_auto_scaling_group_name = auto_scaling_group_name;
    m_auto_scaling_group_name_isSet = true;
}

bool OAIAutoScalingInstanceDetails::is_auto_scaling_group_name_Set() const{
    return m_auto_scaling_group_name_isSet;
}

bool OAIAutoScalingInstanceDetails::is_auto_scaling_group_name_Valid() const{
    return m_auto_scaling_group_name_isValid;
}

QString OAIAutoScalingInstanceDetails::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIAutoScalingInstanceDetails::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIAutoScalingInstanceDetails::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIAutoScalingInstanceDetails::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAIAutoScalingInstanceDetails::getLifecycleState() const {
    return m_lifecycle_state;
}
void OAIAutoScalingInstanceDetails::setLifecycleState(const QString &lifecycle_state) {
    m_lifecycle_state = lifecycle_state;
    m_lifecycle_state_isSet = true;
}

bool OAIAutoScalingInstanceDetails::is_lifecycle_state_Set() const{
    return m_lifecycle_state_isSet;
}

bool OAIAutoScalingInstanceDetails::is_lifecycle_state_Valid() const{
    return m_lifecycle_state_isValid;
}

QString OAIAutoScalingInstanceDetails::getHealthStatus() const {
    return m_health_status;
}
void OAIAutoScalingInstanceDetails::setHealthStatus(const QString &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIAutoScalingInstanceDetails::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIAutoScalingInstanceDetails::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QString OAIAutoScalingInstanceDetails::getLaunchConfigurationName() const {
    return m_launch_configuration_name;
}
void OAIAutoScalingInstanceDetails::setLaunchConfigurationName(const QString &launch_configuration_name) {
    m_launch_configuration_name = launch_configuration_name;
    m_launch_configuration_name_isSet = true;
}

bool OAIAutoScalingInstanceDetails::is_launch_configuration_name_Set() const{
    return m_launch_configuration_name_isSet;
}

bool OAIAutoScalingInstanceDetails::is_launch_configuration_name_Valid() const{
    return m_launch_configuration_name_isValid;
}

OAIAutoScalingInstanceDetails_LaunchTemplate OAIAutoScalingInstanceDetails::getLaunchTemplate() const {
    return m_launch_template;
}
void OAIAutoScalingInstanceDetails::setLaunchTemplate(const OAIAutoScalingInstanceDetails_LaunchTemplate &launch_template) {
    m_launch_template = launch_template;
    m_launch_template_isSet = true;
}

bool OAIAutoScalingInstanceDetails::is_launch_template_Set() const{
    return m_launch_template_isSet;
}

bool OAIAutoScalingInstanceDetails::is_launch_template_Valid() const{
    return m_launch_template_isValid;
}

bool OAIAutoScalingInstanceDetails::getProtectedFromScaleIn() const {
    return m_protected_from_scale_in;
}
void OAIAutoScalingInstanceDetails::setProtectedFromScaleIn(const bool &protected_from_scale_in) {
    m_protected_from_scale_in = protected_from_scale_in;
    m_protected_from_scale_in_isSet = true;
}

bool OAIAutoScalingInstanceDetails::is_protected_from_scale_in_Set() const{
    return m_protected_from_scale_in_isSet;
}

bool OAIAutoScalingInstanceDetails::is_protected_from_scale_in_Valid() const{
    return m_protected_from_scale_in_isValid;
}

QString OAIAutoScalingInstanceDetails::getWeightedCapacity() const {
    return m_weighted_capacity;
}
void OAIAutoScalingInstanceDetails::setWeightedCapacity(const QString &weighted_capacity) {
    m_weighted_capacity = weighted_capacity;
    m_weighted_capacity_isSet = true;
}

bool OAIAutoScalingInstanceDetails::is_weighted_capacity_Set() const{
    return m_weighted_capacity_isSet;
}

bool OAIAutoScalingInstanceDetails::is_weighted_capacity_Valid() const{
    return m_weighted_capacity_isValid;
}

bool OAIAutoScalingInstanceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_from_scale_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weighted_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoScalingInstanceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_auto_scaling_group_name_isValid && m_availability_zone_isValid && m_lifecycle_state_isValid && m_health_status_isValid && m_protected_from_scale_in_isValid && true;
}

} // namespace OpenAPI
