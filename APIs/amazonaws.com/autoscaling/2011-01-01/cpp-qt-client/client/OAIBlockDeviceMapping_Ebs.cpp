/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlockDeviceMapping_Ebs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlockDeviceMapping_Ebs::OAIBlockDeviceMapping_Ebs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlockDeviceMapping_Ebs::OAIBlockDeviceMapping_Ebs() {
    this->initializeModel();
}

OAIBlockDeviceMapping_Ebs::~OAIBlockDeviceMapping_Ebs() {}

void OAIBlockDeviceMapping_Ebs::initializeModel() {

    m_snapshot_id_isSet = false;
    m_snapshot_id_isValid = false;

    m_volume_size_isSet = false;
    m_volume_size_isValid = false;

    m_volume_type_isSet = false;
    m_volume_type_isValid = false;

    m_delete_on_termination_isSet = false;
    m_delete_on_termination_isValid = false;

    m_iops_isSet = false;
    m_iops_isValid = false;

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_throughput_isSet = false;
    m_throughput_isValid = false;
}

void OAIBlockDeviceMapping_Ebs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlockDeviceMapping_Ebs::fromJsonObject(QJsonObject json) {

    m_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_id, json[QString("SnapshotId")]);
    m_snapshot_id_isSet = !json[QString("SnapshotId")].isNull() && m_snapshot_id_isValid;

    m_volume_size_isValid = ::OpenAPI::fromJsonValue(m_volume_size, json[QString("VolumeSize")]);
    m_volume_size_isSet = !json[QString("VolumeSize")].isNull() && m_volume_size_isValid;

    m_volume_type_isValid = ::OpenAPI::fromJsonValue(m_volume_type, json[QString("VolumeType")]);
    m_volume_type_isSet = !json[QString("VolumeType")].isNull() && m_volume_type_isValid;

    m_delete_on_termination_isValid = ::OpenAPI::fromJsonValue(m_delete_on_termination, json[QString("DeleteOnTermination")]);
    m_delete_on_termination_isSet = !json[QString("DeleteOnTermination")].isNull() && m_delete_on_termination_isValid;

    m_iops_isValid = ::OpenAPI::fromJsonValue(m_iops, json[QString("Iops")]);
    m_iops_isSet = !json[QString("Iops")].isNull() && m_iops_isValid;

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("Encrypted")]);
    m_encrypted_isSet = !json[QString("Encrypted")].isNull() && m_encrypted_isValid;

    m_throughput_isValid = ::OpenAPI::fromJsonValue(m_throughput, json[QString("Throughput")]);
    m_throughput_isSet = !json[QString("Throughput")].isNull() && m_throughput_isValid;
}

QString OAIBlockDeviceMapping_Ebs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlockDeviceMapping_Ebs::asJsonObject() const {
    QJsonObject obj;
    if (m_snapshot_id_isSet) {
        obj.insert(QString("SnapshotId"), ::OpenAPI::toJsonValue(m_snapshot_id));
    }
    if (m_volume_size_isSet) {
        obj.insert(QString("VolumeSize"), ::OpenAPI::toJsonValue(m_volume_size));
    }
    if (m_volume_type_isSet) {
        obj.insert(QString("VolumeType"), ::OpenAPI::toJsonValue(m_volume_type));
    }
    if (m_delete_on_termination_isSet) {
        obj.insert(QString("DeleteOnTermination"), ::OpenAPI::toJsonValue(m_delete_on_termination));
    }
    if (m_iops_isSet) {
        obj.insert(QString("Iops"), ::OpenAPI::toJsonValue(m_iops));
    }
    if (m_encrypted_isSet) {
        obj.insert(QString("Encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_throughput_isSet) {
        obj.insert(QString("Throughput"), ::OpenAPI::toJsonValue(m_throughput));
    }
    return obj;
}

QString OAIBlockDeviceMapping_Ebs::getSnapshotId() const {
    return m_snapshot_id;
}
void OAIBlockDeviceMapping_Ebs::setSnapshotId(const QString &snapshot_id) {
    m_snapshot_id = snapshot_id;
    m_snapshot_id_isSet = true;
}

bool OAIBlockDeviceMapping_Ebs::is_snapshot_id_Set() const{
    return m_snapshot_id_isSet;
}

bool OAIBlockDeviceMapping_Ebs::is_snapshot_id_Valid() const{
    return m_snapshot_id_isValid;
}

qint32 OAIBlockDeviceMapping_Ebs::getVolumeSize() const {
    return m_volume_size;
}
void OAIBlockDeviceMapping_Ebs::setVolumeSize(const qint32 &volume_size) {
    m_volume_size = volume_size;
    m_volume_size_isSet = true;
}

bool OAIBlockDeviceMapping_Ebs::is_volume_size_Set() const{
    return m_volume_size_isSet;
}

bool OAIBlockDeviceMapping_Ebs::is_volume_size_Valid() const{
    return m_volume_size_isValid;
}

QString OAIBlockDeviceMapping_Ebs::getVolumeType() const {
    return m_volume_type;
}
void OAIBlockDeviceMapping_Ebs::setVolumeType(const QString &volume_type) {
    m_volume_type = volume_type;
    m_volume_type_isSet = true;
}

bool OAIBlockDeviceMapping_Ebs::is_volume_type_Set() const{
    return m_volume_type_isSet;
}

bool OAIBlockDeviceMapping_Ebs::is_volume_type_Valid() const{
    return m_volume_type_isValid;
}

bool OAIBlockDeviceMapping_Ebs::getDeleteOnTermination() const {
    return m_delete_on_termination;
}
void OAIBlockDeviceMapping_Ebs::setDeleteOnTermination(const bool &delete_on_termination) {
    m_delete_on_termination = delete_on_termination;
    m_delete_on_termination_isSet = true;
}

bool OAIBlockDeviceMapping_Ebs::is_delete_on_termination_Set() const{
    return m_delete_on_termination_isSet;
}

bool OAIBlockDeviceMapping_Ebs::is_delete_on_termination_Valid() const{
    return m_delete_on_termination_isValid;
}

qint32 OAIBlockDeviceMapping_Ebs::getIops() const {
    return m_iops;
}
void OAIBlockDeviceMapping_Ebs::setIops(const qint32 &iops) {
    m_iops = iops;
    m_iops_isSet = true;
}

bool OAIBlockDeviceMapping_Ebs::is_iops_Set() const{
    return m_iops_isSet;
}

bool OAIBlockDeviceMapping_Ebs::is_iops_Valid() const{
    return m_iops_isValid;
}

bool OAIBlockDeviceMapping_Ebs::getEncrypted() const {
    return m_encrypted;
}
void OAIBlockDeviceMapping_Ebs::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAIBlockDeviceMapping_Ebs::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAIBlockDeviceMapping_Ebs::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

qint32 OAIBlockDeviceMapping_Ebs::getThroughput() const {
    return m_throughput;
}
void OAIBlockDeviceMapping_Ebs::setThroughput(const qint32 &throughput) {
    m_throughput = throughput;
    m_throughput_isSet = true;
}

bool OAIBlockDeviceMapping_Ebs::is_throughput_Set() const{
    return m_throughput_isSet;
}

bool OAIBlockDeviceMapping_Ebs::is_throughput_Valid() const{
    return m_throughput_isValid;
}

bool OAIBlockDeviceMapping_Ebs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_on_termination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlockDeviceMapping_Ebs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
