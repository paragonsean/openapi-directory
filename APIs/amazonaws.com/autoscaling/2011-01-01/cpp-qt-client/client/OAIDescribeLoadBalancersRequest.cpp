/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLoadBalancersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLoadBalancersRequest::OAIDescribeLoadBalancersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLoadBalancersRequest::OAIDescribeLoadBalancersRequest() {
    this->initializeModel();
}

OAIDescribeLoadBalancersRequest::~OAIDescribeLoadBalancersRequest() {}

void OAIDescribeLoadBalancersRequest::initializeModel() {

    m_auto_scaling_group_name_isSet = false;
    m_auto_scaling_group_name_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;
}

void OAIDescribeLoadBalancersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLoadBalancersRequest::fromJsonObject(QJsonObject json) {

    m_auto_scaling_group_name_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_name, json[QString("AutoScalingGroupName")]);
    m_auto_scaling_group_name_isSet = !json[QString("AutoScalingGroupName")].isNull() && m_auto_scaling_group_name_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;
}

QString OAIDescribeLoadBalancersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLoadBalancersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_scaling_group_name_isSet) {
        obj.insert(QString("AutoScalingGroupName"), ::OpenAPI::toJsonValue(m_auto_scaling_group_name));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    return obj;
}

QString OAIDescribeLoadBalancersRequest::getAutoScalingGroupName() const {
    return m_auto_scaling_group_name;
}
void OAIDescribeLoadBalancersRequest::setAutoScalingGroupName(const QString &auto_scaling_group_name) {
    m_auto_scaling_group_name = auto_scaling_group_name;
    m_auto_scaling_group_name_isSet = true;
}

bool OAIDescribeLoadBalancersRequest::is_auto_scaling_group_name_Set() const{
    return m_auto_scaling_group_name_isSet;
}

bool OAIDescribeLoadBalancersRequest::is_auto_scaling_group_name_Valid() const{
    return m_auto_scaling_group_name_isValid;
}

QString OAIDescribeLoadBalancersRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeLoadBalancersRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeLoadBalancersRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeLoadBalancersRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeLoadBalancersRequest::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeLoadBalancersRequest::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeLoadBalancersRequest::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeLoadBalancersRequest::is_max_records_Valid() const{
    return m_max_records_isValid;
}

bool OAIDescribeLoadBalancersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_scaling_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLoadBalancersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_scaling_group_name_isValid && true;
}

} // namespace OpenAPI
