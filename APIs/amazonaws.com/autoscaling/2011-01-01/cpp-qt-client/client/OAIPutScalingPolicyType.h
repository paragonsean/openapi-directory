/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutScalingPolicyType.h
 *
 * 
 */

#ifndef OAIPutScalingPolicyType_H
#define OAIPutScalingPolicyType_H

#include <QJsonObject>

#include "OAIPutScalingPolicyType_PredictiveScalingConfiguration.h"
#include "OAIPutScalingPolicyType_TargetTrackingConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPutScalingPolicyType_TargetTrackingConfiguration;
class OAIPutScalingPolicyType_PredictiveScalingConfiguration;

class OAIPutScalingPolicyType : public OAIObject {
public:
    OAIPutScalingPolicyType();
    OAIPutScalingPolicyType(QString json);
    ~OAIPutScalingPolicyType() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAutoScalingGroupName() const;
    void setAutoScalingGroupName(const QString &auto_scaling_group_name);
    bool is_auto_scaling_group_name_Set() const;
    bool is_auto_scaling_group_name_Valid() const;

    QString getPolicyName() const;
    void setPolicyName(const QString &policy_name);
    bool is_policy_name_Set() const;
    bool is_policy_name_Valid() const;

    QString getPolicyType() const;
    void setPolicyType(const QString &policy_type);
    bool is_policy_type_Set() const;
    bool is_policy_type_Valid() const;

    QString getAdjustmentType() const;
    void setAdjustmentType(const QString &adjustment_type);
    bool is_adjustment_type_Set() const;
    bool is_adjustment_type_Valid() const;

    qint32 getMinAdjustmentStep() const;
    void setMinAdjustmentStep(const qint32 &min_adjustment_step);
    bool is_min_adjustment_step_Set() const;
    bool is_min_adjustment_step_Valid() const;

    qint32 getMinAdjustmentMagnitude() const;
    void setMinAdjustmentMagnitude(const qint32 &min_adjustment_magnitude);
    bool is_min_adjustment_magnitude_Set() const;
    bool is_min_adjustment_magnitude_Valid() const;

    qint32 getScalingAdjustment() const;
    void setScalingAdjustment(const qint32 &scaling_adjustment);
    bool is_scaling_adjustment_Set() const;
    bool is_scaling_adjustment_Valid() const;

    qint32 getCooldown() const;
    void setCooldown(const qint32 &cooldown);
    bool is_cooldown_Set() const;
    bool is_cooldown_Valid() const;

    QString getMetricAggregationType() const;
    void setMetricAggregationType(const QString &metric_aggregation_type);
    bool is_metric_aggregation_type_Set() const;
    bool is_metric_aggregation_type_Valid() const;

    QList getStepAdjustments() const;
    void setStepAdjustments(const QList &step_adjustments);
    bool is_step_adjustments_Set() const;
    bool is_step_adjustments_Valid() const;

    qint32 getEstimatedInstanceWarmup() const;
    void setEstimatedInstanceWarmup(const qint32 &estimated_instance_warmup);
    bool is_estimated_instance_warmup_Set() const;
    bool is_estimated_instance_warmup_Valid() const;

    OAIPutScalingPolicyType_TargetTrackingConfiguration getTargetTrackingConfiguration() const;
    void setTargetTrackingConfiguration(const OAIPutScalingPolicyType_TargetTrackingConfiguration &target_tracking_configuration);
    bool is_target_tracking_configuration_Set() const;
    bool is_target_tracking_configuration_Valid() const;

    bool getEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    OAIPutScalingPolicyType_PredictiveScalingConfiguration getPredictiveScalingConfiguration() const;
    void setPredictiveScalingConfiguration(const OAIPutScalingPolicyType_PredictiveScalingConfiguration &predictive_scaling_configuration);
    bool is_predictive_scaling_configuration_Set() const;
    bool is_predictive_scaling_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_auto_scaling_group_name;
    bool m_auto_scaling_group_name_isSet;
    bool m_auto_scaling_group_name_isValid;

    QString m_policy_name;
    bool m_policy_name_isSet;
    bool m_policy_name_isValid;

    QString m_policy_type;
    bool m_policy_type_isSet;
    bool m_policy_type_isValid;

    QString m_adjustment_type;
    bool m_adjustment_type_isSet;
    bool m_adjustment_type_isValid;

    qint32 m_min_adjustment_step;
    bool m_min_adjustment_step_isSet;
    bool m_min_adjustment_step_isValid;

    qint32 m_min_adjustment_magnitude;
    bool m_min_adjustment_magnitude_isSet;
    bool m_min_adjustment_magnitude_isValid;

    qint32 m_scaling_adjustment;
    bool m_scaling_adjustment_isSet;
    bool m_scaling_adjustment_isValid;

    qint32 m_cooldown;
    bool m_cooldown_isSet;
    bool m_cooldown_isValid;

    QString m_metric_aggregation_type;
    bool m_metric_aggregation_type_isSet;
    bool m_metric_aggregation_type_isValid;

    QList m_step_adjustments;
    bool m_step_adjustments_isSet;
    bool m_step_adjustments_isValid;

    qint32 m_estimated_instance_warmup;
    bool m_estimated_instance_warmup_isSet;
    bool m_estimated_instance_warmup_isValid;

    OAIPutScalingPolicyType_TargetTrackingConfiguration m_target_tracking_configuration;
    bool m_target_tracking_configuration_isSet;
    bool m_target_tracking_configuration_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    OAIPutScalingPolicyType_PredictiveScalingConfiguration m_predictive_scaling_configuration;
    bool m_predictive_scaling_configuration_isSet;
    bool m_predictive_scaling_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutScalingPolicyType)

#endif // OAIPutScalingPolicyType_H
