/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetTrackingMetricDataQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetTrackingMetricDataQuery::OAITargetTrackingMetricDataQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetTrackingMetricDataQuery::OAITargetTrackingMetricDataQuery() {
    this->initializeModel();
}

OAITargetTrackingMetricDataQuery::~OAITargetTrackingMetricDataQuery() {}

void OAITargetTrackingMetricDataQuery::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_metric_stat_isSet = false;
    m_metric_stat_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_return_data_isSet = false;
    m_return_data_isValid = false;
}

void OAITargetTrackingMetricDataQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetTrackingMetricDataQuery::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;

    m_metric_stat_isValid = ::OpenAPI::fromJsonValue(m_metric_stat, json[QString("MetricStat")]);
    m_metric_stat_isSet = !json[QString("MetricStat")].isNull() && m_metric_stat_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("Label")]);
    m_label_isSet = !json[QString("Label")].isNull() && m_label_isValid;

    m_return_data_isValid = ::OpenAPI::fromJsonValue(m_return_data, json[QString("ReturnData")]);
    m_return_data_isSet = !json[QString("ReturnData")].isNull() && m_return_data_isValid;
}

QString OAITargetTrackingMetricDataQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetTrackingMetricDataQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_metric_stat.isSet()) {
        obj.insert(QString("MetricStat"), ::OpenAPI::toJsonValue(m_metric_stat));
    }
    if (m_label_isSet) {
        obj.insert(QString("Label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_return_data_isSet) {
        obj.insert(QString("ReturnData"), ::OpenAPI::toJsonValue(m_return_data));
    }
    return obj;
}

QString OAITargetTrackingMetricDataQuery::getId() const {
    return m_id;
}
void OAITargetTrackingMetricDataQuery::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITargetTrackingMetricDataQuery::is_id_Set() const{
    return m_id_isSet;
}

bool OAITargetTrackingMetricDataQuery::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITargetTrackingMetricDataQuery::getExpression() const {
    return m_expression;
}
void OAITargetTrackingMetricDataQuery::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAITargetTrackingMetricDataQuery::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAITargetTrackingMetricDataQuery::is_expression_Valid() const{
    return m_expression_isValid;
}

OAITargetTrackingMetricDataQuery_MetricStat OAITargetTrackingMetricDataQuery::getMetricStat() const {
    return m_metric_stat;
}
void OAITargetTrackingMetricDataQuery::setMetricStat(const OAITargetTrackingMetricDataQuery_MetricStat &metric_stat) {
    m_metric_stat = metric_stat;
    m_metric_stat_isSet = true;
}

bool OAITargetTrackingMetricDataQuery::is_metric_stat_Set() const{
    return m_metric_stat_isSet;
}

bool OAITargetTrackingMetricDataQuery::is_metric_stat_Valid() const{
    return m_metric_stat_isValid;
}

QString OAITargetTrackingMetricDataQuery::getLabel() const {
    return m_label;
}
void OAITargetTrackingMetricDataQuery::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAITargetTrackingMetricDataQuery::is_label_Set() const{
    return m_label_isSet;
}

bool OAITargetTrackingMetricDataQuery::is_label_Valid() const{
    return m_label_isValid;
}

bool OAITargetTrackingMetricDataQuery::getReturnData() const {
    return m_return_data;
}
void OAITargetTrackingMetricDataQuery::setReturnData(const bool &return_data) {
    m_return_data = return_data;
    m_return_data_isSet = true;
}

bool OAITargetTrackingMetricDataQuery::is_return_data_Set() const{
    return m_return_data_isSet;
}

bool OAITargetTrackingMetricDataQuery::is_return_data_Valid() const{
    return m_return_data_isValid;
}

bool OAITargetTrackingMetricDataQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_stat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetTrackingMetricDataQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
