/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictiveScalingMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictiveScalingMode::OAIPredictiveScalingMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictiveScalingMode::OAIPredictiveScalingMode() {
    this->initializeModel();
}

OAIPredictiveScalingMode::~OAIPredictiveScalingMode() {}

void OAIPredictiveScalingMode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPredictiveScalingMode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPredictiveScalingMode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ForecastAndScale", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPredictiveScalingMode::FORECASTANDSCALE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ForecastOnly", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPredictiveScalingMode::FORECASTONLY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPredictiveScalingMode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPredictiveScalingMode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPredictiveScalingMode::FORECASTANDSCALE:
            val = "ForecastAndScale";
            break;
        case eOAIPredictiveScalingMode::FORECASTONLY:
            val = "ForecastOnly";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPredictiveScalingMode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPredictiveScalingMode::eOAIPredictiveScalingMode OAIPredictiveScalingMode::getValue() const {
    return m_value;
}

void OAIPredictiveScalingMode::setValue(const OAIPredictiveScalingMode::eOAIPredictiveScalingMode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPredictiveScalingMode::isSet() const {
    
    return m_value_isSet;
}

bool OAIPredictiveScalingMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
