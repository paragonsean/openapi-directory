/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScalingActivityStatusCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScalingActivityStatusCode::OAIScalingActivityStatusCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScalingActivityStatusCode::OAIScalingActivityStatusCode() {
    this->initializeModel();
}

OAIScalingActivityStatusCode::~OAIScalingActivityStatusCode() {}

void OAIScalingActivityStatusCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIScalingActivityStatusCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIScalingActivityStatusCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PendingSpotBidPlacement", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::PENDINGSPOTBIDPLACEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WaitingForSpotInstanceRequestId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::WAITINGFORSPOTINSTANCEREQUESTID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WaitingForSpotInstanceId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::WAITINGFORSPOTINSTANCEID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WaitingForInstanceId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::WAITINGFORINSTANCEID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PreInService", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::PREINSERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::INPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WaitingForELBConnectionDraining", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::WAITINGFORELBCONNECTIONDRAINING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MidLifecycleAction", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::MIDLIFECYCLEACTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WaitingForInstanceWarmup", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::WAITINGFORINSTANCEWARMUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Successful", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::SUCCESSFUL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cancelled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WaitingForConnectionDraining", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScalingActivityStatusCode::WAITINGFORCONNECTIONDRAINING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIScalingActivityStatusCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIScalingActivityStatusCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIScalingActivityStatusCode::PENDINGSPOTBIDPLACEMENT:
            val = "PendingSpotBidPlacement";
            break;
        case eOAIScalingActivityStatusCode::WAITINGFORSPOTINSTANCEREQUESTID:
            val = "WaitingForSpotInstanceRequestId";
            break;
        case eOAIScalingActivityStatusCode::WAITINGFORSPOTINSTANCEID:
            val = "WaitingForSpotInstanceId";
            break;
        case eOAIScalingActivityStatusCode::WAITINGFORINSTANCEID:
            val = "WaitingForInstanceId";
            break;
        case eOAIScalingActivityStatusCode::PREINSERVICE:
            val = "PreInService";
            break;
        case eOAIScalingActivityStatusCode::INPROGRESS:
            val = "InProgress";
            break;
        case eOAIScalingActivityStatusCode::WAITINGFORELBCONNECTIONDRAINING:
            val = "WaitingForELBConnectionDraining";
            break;
        case eOAIScalingActivityStatusCode::MIDLIFECYCLEACTION:
            val = "MidLifecycleAction";
            break;
        case eOAIScalingActivityStatusCode::WAITINGFORINSTANCEWARMUP:
            val = "WaitingForInstanceWarmup";
            break;
        case eOAIScalingActivityStatusCode::SUCCESSFUL:
            val = "Successful";
            break;
        case eOAIScalingActivityStatusCode::FAILED:
            val = "Failed";
            break;
        case eOAIScalingActivityStatusCode::CANCELLED:
            val = "Cancelled";
            break;
        case eOAIScalingActivityStatusCode::WAITINGFORCONNECTIONDRAINING:
            val = "WaitingForConnectionDraining";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIScalingActivityStatusCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIScalingActivityStatusCode::eOAIScalingActivityStatusCode OAIScalingActivityStatusCode::getValue() const {
    return m_value;
}

void OAIScalingActivityStatusCode::setValue(const OAIScalingActivityStatusCode::eOAIScalingActivityStatusCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIScalingActivityStatusCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIScalingActivityStatusCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
