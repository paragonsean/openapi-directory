/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutScalingPolicyType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutScalingPolicyType::OAIPutScalingPolicyType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutScalingPolicyType::OAIPutScalingPolicyType() {
    this->initializeModel();
}

OAIPutScalingPolicyType::~OAIPutScalingPolicyType() {}

void OAIPutScalingPolicyType::initializeModel() {

    m_auto_scaling_group_name_isSet = false;
    m_auto_scaling_group_name_isValid = false;

    m_policy_name_isSet = false;
    m_policy_name_isValid = false;

    m_policy_type_isSet = false;
    m_policy_type_isValid = false;

    m_adjustment_type_isSet = false;
    m_adjustment_type_isValid = false;

    m_min_adjustment_step_isSet = false;
    m_min_adjustment_step_isValid = false;

    m_min_adjustment_magnitude_isSet = false;
    m_min_adjustment_magnitude_isValid = false;

    m_scaling_adjustment_isSet = false;
    m_scaling_adjustment_isValid = false;

    m_cooldown_isSet = false;
    m_cooldown_isValid = false;

    m_metric_aggregation_type_isSet = false;
    m_metric_aggregation_type_isValid = false;

    m_step_adjustments_isSet = false;
    m_step_adjustments_isValid = false;

    m_estimated_instance_warmup_isSet = false;
    m_estimated_instance_warmup_isValid = false;

    m_target_tracking_configuration_isSet = false;
    m_target_tracking_configuration_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_predictive_scaling_configuration_isSet = false;
    m_predictive_scaling_configuration_isValid = false;
}

void OAIPutScalingPolicyType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutScalingPolicyType::fromJsonObject(QJsonObject json) {

    m_auto_scaling_group_name_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_name, json[QString("AutoScalingGroupName")]);
    m_auto_scaling_group_name_isSet = !json[QString("AutoScalingGroupName")].isNull() && m_auto_scaling_group_name_isValid;

    m_policy_name_isValid = ::OpenAPI::fromJsonValue(m_policy_name, json[QString("PolicyName")]);
    m_policy_name_isSet = !json[QString("PolicyName")].isNull() && m_policy_name_isValid;

    m_policy_type_isValid = ::OpenAPI::fromJsonValue(m_policy_type, json[QString("PolicyType")]);
    m_policy_type_isSet = !json[QString("PolicyType")].isNull() && m_policy_type_isValid;

    m_adjustment_type_isValid = ::OpenAPI::fromJsonValue(m_adjustment_type, json[QString("AdjustmentType")]);
    m_adjustment_type_isSet = !json[QString("AdjustmentType")].isNull() && m_adjustment_type_isValid;

    m_min_adjustment_step_isValid = ::OpenAPI::fromJsonValue(m_min_adjustment_step, json[QString("MinAdjustmentStep")]);
    m_min_adjustment_step_isSet = !json[QString("MinAdjustmentStep")].isNull() && m_min_adjustment_step_isValid;

    m_min_adjustment_magnitude_isValid = ::OpenAPI::fromJsonValue(m_min_adjustment_magnitude, json[QString("MinAdjustmentMagnitude")]);
    m_min_adjustment_magnitude_isSet = !json[QString("MinAdjustmentMagnitude")].isNull() && m_min_adjustment_magnitude_isValid;

    m_scaling_adjustment_isValid = ::OpenAPI::fromJsonValue(m_scaling_adjustment, json[QString("ScalingAdjustment")]);
    m_scaling_adjustment_isSet = !json[QString("ScalingAdjustment")].isNull() && m_scaling_adjustment_isValid;

    m_cooldown_isValid = ::OpenAPI::fromJsonValue(m_cooldown, json[QString("Cooldown")]);
    m_cooldown_isSet = !json[QString("Cooldown")].isNull() && m_cooldown_isValid;

    m_metric_aggregation_type_isValid = ::OpenAPI::fromJsonValue(m_metric_aggregation_type, json[QString("MetricAggregationType")]);
    m_metric_aggregation_type_isSet = !json[QString("MetricAggregationType")].isNull() && m_metric_aggregation_type_isValid;

    m_step_adjustments_isValid = ::OpenAPI::fromJsonValue(m_step_adjustments, json[QString("StepAdjustments")]);
    m_step_adjustments_isSet = !json[QString("StepAdjustments")].isNull() && m_step_adjustments_isValid;

    m_estimated_instance_warmup_isValid = ::OpenAPI::fromJsonValue(m_estimated_instance_warmup, json[QString("EstimatedInstanceWarmup")]);
    m_estimated_instance_warmup_isSet = !json[QString("EstimatedInstanceWarmup")].isNull() && m_estimated_instance_warmup_isValid;

    m_target_tracking_configuration_isValid = ::OpenAPI::fromJsonValue(m_target_tracking_configuration, json[QString("TargetTrackingConfiguration")]);
    m_target_tracking_configuration_isSet = !json[QString("TargetTrackingConfiguration")].isNull() && m_target_tracking_configuration_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_predictive_scaling_configuration_isValid = ::OpenAPI::fromJsonValue(m_predictive_scaling_configuration, json[QString("PredictiveScalingConfiguration")]);
    m_predictive_scaling_configuration_isSet = !json[QString("PredictiveScalingConfiguration")].isNull() && m_predictive_scaling_configuration_isValid;
}

QString OAIPutScalingPolicyType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutScalingPolicyType::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_scaling_group_name_isSet) {
        obj.insert(QString("AutoScalingGroupName"), ::OpenAPI::toJsonValue(m_auto_scaling_group_name));
    }
    if (m_policy_name_isSet) {
        obj.insert(QString("PolicyName"), ::OpenAPI::toJsonValue(m_policy_name));
    }
    if (m_policy_type_isSet) {
        obj.insert(QString("PolicyType"), ::OpenAPI::toJsonValue(m_policy_type));
    }
    if (m_adjustment_type_isSet) {
        obj.insert(QString("AdjustmentType"), ::OpenAPI::toJsonValue(m_adjustment_type));
    }
    if (m_min_adjustment_step_isSet) {
        obj.insert(QString("MinAdjustmentStep"), ::OpenAPI::toJsonValue(m_min_adjustment_step));
    }
    if (m_min_adjustment_magnitude_isSet) {
        obj.insert(QString("MinAdjustmentMagnitude"), ::OpenAPI::toJsonValue(m_min_adjustment_magnitude));
    }
    if (m_scaling_adjustment_isSet) {
        obj.insert(QString("ScalingAdjustment"), ::OpenAPI::toJsonValue(m_scaling_adjustment));
    }
    if (m_cooldown_isSet) {
        obj.insert(QString("Cooldown"), ::OpenAPI::toJsonValue(m_cooldown));
    }
    if (m_metric_aggregation_type_isSet) {
        obj.insert(QString("MetricAggregationType"), ::OpenAPI::toJsonValue(m_metric_aggregation_type));
    }
    if (m_step_adjustments.isSet()) {
        obj.insert(QString("StepAdjustments"), ::OpenAPI::toJsonValue(m_step_adjustments));
    }
    if (m_estimated_instance_warmup_isSet) {
        obj.insert(QString("EstimatedInstanceWarmup"), ::OpenAPI::toJsonValue(m_estimated_instance_warmup));
    }
    if (m_target_tracking_configuration.isSet()) {
        obj.insert(QString("TargetTrackingConfiguration"), ::OpenAPI::toJsonValue(m_target_tracking_configuration));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_predictive_scaling_configuration.isSet()) {
        obj.insert(QString("PredictiveScalingConfiguration"), ::OpenAPI::toJsonValue(m_predictive_scaling_configuration));
    }
    return obj;
}

QString OAIPutScalingPolicyType::getAutoScalingGroupName() const {
    return m_auto_scaling_group_name;
}
void OAIPutScalingPolicyType::setAutoScalingGroupName(const QString &auto_scaling_group_name) {
    m_auto_scaling_group_name = auto_scaling_group_name;
    m_auto_scaling_group_name_isSet = true;
}

bool OAIPutScalingPolicyType::is_auto_scaling_group_name_Set() const{
    return m_auto_scaling_group_name_isSet;
}

bool OAIPutScalingPolicyType::is_auto_scaling_group_name_Valid() const{
    return m_auto_scaling_group_name_isValid;
}

QString OAIPutScalingPolicyType::getPolicyName() const {
    return m_policy_name;
}
void OAIPutScalingPolicyType::setPolicyName(const QString &policy_name) {
    m_policy_name = policy_name;
    m_policy_name_isSet = true;
}

bool OAIPutScalingPolicyType::is_policy_name_Set() const{
    return m_policy_name_isSet;
}

bool OAIPutScalingPolicyType::is_policy_name_Valid() const{
    return m_policy_name_isValid;
}

QString OAIPutScalingPolicyType::getPolicyType() const {
    return m_policy_type;
}
void OAIPutScalingPolicyType::setPolicyType(const QString &policy_type) {
    m_policy_type = policy_type;
    m_policy_type_isSet = true;
}

bool OAIPutScalingPolicyType::is_policy_type_Set() const{
    return m_policy_type_isSet;
}

bool OAIPutScalingPolicyType::is_policy_type_Valid() const{
    return m_policy_type_isValid;
}

QString OAIPutScalingPolicyType::getAdjustmentType() const {
    return m_adjustment_type;
}
void OAIPutScalingPolicyType::setAdjustmentType(const QString &adjustment_type) {
    m_adjustment_type = adjustment_type;
    m_adjustment_type_isSet = true;
}

bool OAIPutScalingPolicyType::is_adjustment_type_Set() const{
    return m_adjustment_type_isSet;
}

bool OAIPutScalingPolicyType::is_adjustment_type_Valid() const{
    return m_adjustment_type_isValid;
}

qint32 OAIPutScalingPolicyType::getMinAdjustmentStep() const {
    return m_min_adjustment_step;
}
void OAIPutScalingPolicyType::setMinAdjustmentStep(const qint32 &min_adjustment_step) {
    m_min_adjustment_step = min_adjustment_step;
    m_min_adjustment_step_isSet = true;
}

bool OAIPutScalingPolicyType::is_min_adjustment_step_Set() const{
    return m_min_adjustment_step_isSet;
}

bool OAIPutScalingPolicyType::is_min_adjustment_step_Valid() const{
    return m_min_adjustment_step_isValid;
}

qint32 OAIPutScalingPolicyType::getMinAdjustmentMagnitude() const {
    return m_min_adjustment_magnitude;
}
void OAIPutScalingPolicyType::setMinAdjustmentMagnitude(const qint32 &min_adjustment_magnitude) {
    m_min_adjustment_magnitude = min_adjustment_magnitude;
    m_min_adjustment_magnitude_isSet = true;
}

bool OAIPutScalingPolicyType::is_min_adjustment_magnitude_Set() const{
    return m_min_adjustment_magnitude_isSet;
}

bool OAIPutScalingPolicyType::is_min_adjustment_magnitude_Valid() const{
    return m_min_adjustment_magnitude_isValid;
}

qint32 OAIPutScalingPolicyType::getScalingAdjustment() const {
    return m_scaling_adjustment;
}
void OAIPutScalingPolicyType::setScalingAdjustment(const qint32 &scaling_adjustment) {
    m_scaling_adjustment = scaling_adjustment;
    m_scaling_adjustment_isSet = true;
}

bool OAIPutScalingPolicyType::is_scaling_adjustment_Set() const{
    return m_scaling_adjustment_isSet;
}

bool OAIPutScalingPolicyType::is_scaling_adjustment_Valid() const{
    return m_scaling_adjustment_isValid;
}

qint32 OAIPutScalingPolicyType::getCooldown() const {
    return m_cooldown;
}
void OAIPutScalingPolicyType::setCooldown(const qint32 &cooldown) {
    m_cooldown = cooldown;
    m_cooldown_isSet = true;
}

bool OAIPutScalingPolicyType::is_cooldown_Set() const{
    return m_cooldown_isSet;
}

bool OAIPutScalingPolicyType::is_cooldown_Valid() const{
    return m_cooldown_isValid;
}

QString OAIPutScalingPolicyType::getMetricAggregationType() const {
    return m_metric_aggregation_type;
}
void OAIPutScalingPolicyType::setMetricAggregationType(const QString &metric_aggregation_type) {
    m_metric_aggregation_type = metric_aggregation_type;
    m_metric_aggregation_type_isSet = true;
}

bool OAIPutScalingPolicyType::is_metric_aggregation_type_Set() const{
    return m_metric_aggregation_type_isSet;
}

bool OAIPutScalingPolicyType::is_metric_aggregation_type_Valid() const{
    return m_metric_aggregation_type_isValid;
}

QList OAIPutScalingPolicyType::getStepAdjustments() const {
    return m_step_adjustments;
}
void OAIPutScalingPolicyType::setStepAdjustments(const QList &step_adjustments) {
    m_step_adjustments = step_adjustments;
    m_step_adjustments_isSet = true;
}

bool OAIPutScalingPolicyType::is_step_adjustments_Set() const{
    return m_step_adjustments_isSet;
}

bool OAIPutScalingPolicyType::is_step_adjustments_Valid() const{
    return m_step_adjustments_isValid;
}

qint32 OAIPutScalingPolicyType::getEstimatedInstanceWarmup() const {
    return m_estimated_instance_warmup;
}
void OAIPutScalingPolicyType::setEstimatedInstanceWarmup(const qint32 &estimated_instance_warmup) {
    m_estimated_instance_warmup = estimated_instance_warmup;
    m_estimated_instance_warmup_isSet = true;
}

bool OAIPutScalingPolicyType::is_estimated_instance_warmup_Set() const{
    return m_estimated_instance_warmup_isSet;
}

bool OAIPutScalingPolicyType::is_estimated_instance_warmup_Valid() const{
    return m_estimated_instance_warmup_isValid;
}

OAIPutScalingPolicyType_TargetTrackingConfiguration OAIPutScalingPolicyType::getTargetTrackingConfiguration() const {
    return m_target_tracking_configuration;
}
void OAIPutScalingPolicyType::setTargetTrackingConfiguration(const OAIPutScalingPolicyType_TargetTrackingConfiguration &target_tracking_configuration) {
    m_target_tracking_configuration = target_tracking_configuration;
    m_target_tracking_configuration_isSet = true;
}

bool OAIPutScalingPolicyType::is_target_tracking_configuration_Set() const{
    return m_target_tracking_configuration_isSet;
}

bool OAIPutScalingPolicyType::is_target_tracking_configuration_Valid() const{
    return m_target_tracking_configuration_isValid;
}

bool OAIPutScalingPolicyType::getEnabled() const {
    return m_enabled;
}
void OAIPutScalingPolicyType::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIPutScalingPolicyType::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIPutScalingPolicyType::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIPutScalingPolicyType_PredictiveScalingConfiguration OAIPutScalingPolicyType::getPredictiveScalingConfiguration() const {
    return m_predictive_scaling_configuration;
}
void OAIPutScalingPolicyType::setPredictiveScalingConfiguration(const OAIPutScalingPolicyType_PredictiveScalingConfiguration &predictive_scaling_configuration) {
    m_predictive_scaling_configuration = predictive_scaling_configuration;
    m_predictive_scaling_configuration_isSet = true;
}

bool OAIPutScalingPolicyType::is_predictive_scaling_configuration_Set() const{
    return m_predictive_scaling_configuration_isSet;
}

bool OAIPutScalingPolicyType::is_predictive_scaling_configuration_Valid() const{
    return m_predictive_scaling_configuration_isValid;
}

bool OAIPutScalingPolicyType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_scaling_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adjustment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_adjustment_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_adjustment_magnitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_adjustment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cooldown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_aggregation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_adjustments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_instance_warmup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_tracking_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictive_scaling_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutScalingPolicyType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_scaling_group_name_isValid && m_policy_name_isValid && true;
}

} // namespace OpenAPI
