/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcceleratorName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcceleratorName::OAIAcceleratorName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcceleratorName::OAIAcceleratorName() {
    this->initializeModel();
}

OAIAcceleratorName::~OAIAcceleratorName() {}

void OAIAcceleratorName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAcceleratorName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAcceleratorName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("a100", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAcceleratorName::A100;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("v100", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAcceleratorName::V100;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("k80", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAcceleratorName::K80;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAcceleratorName::T4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m60", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAcceleratorName::M60;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("radeon-pro-v520", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAcceleratorName::RADEON_PRO_V520;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("vu9p", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAcceleratorName::VU9P;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAcceleratorName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAcceleratorName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAcceleratorName::A100:
            val = "a100";
            break;
        case eOAIAcceleratorName::V100:
            val = "v100";
            break;
        case eOAIAcceleratorName::K80:
            val = "k80";
            break;
        case eOAIAcceleratorName::T4:
            val = "t4";
            break;
        case eOAIAcceleratorName::M60:
            val = "m60";
            break;
        case eOAIAcceleratorName::RADEON_PRO_V520:
            val = "radeon-pro-v520";
            break;
        case eOAIAcceleratorName::VU9P:
            val = "vu9p";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAcceleratorName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAcceleratorName::eOAIAcceleratorName OAIAcceleratorName::getValue() const {
    return m_value;
}

void OAIAcceleratorName::setValue(const OAIAcceleratorName::eOAIAcceleratorName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAcceleratorName::isSet() const {
    
    return m_value_isSet;
}

bool OAIAcceleratorName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
