/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLaunchConfigurationType_MetadataOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLaunchConfigurationType_MetadataOptions::OAICreateLaunchConfigurationType_MetadataOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLaunchConfigurationType_MetadataOptions::OAICreateLaunchConfigurationType_MetadataOptions() {
    this->initializeModel();
}

OAICreateLaunchConfigurationType_MetadataOptions::~OAICreateLaunchConfigurationType_MetadataOptions() {}

void OAICreateLaunchConfigurationType_MetadataOptions::initializeModel() {

    m_http_tokens_isSet = false;
    m_http_tokens_isValid = false;

    m_http_put_response_hop_limit_isSet = false;
    m_http_put_response_hop_limit_isValid = false;

    m_http_endpoint_isSet = false;
    m_http_endpoint_isValid = false;
}

void OAICreateLaunchConfigurationType_MetadataOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLaunchConfigurationType_MetadataOptions::fromJsonObject(QJsonObject json) {

    m_http_tokens_isValid = ::OpenAPI::fromJsonValue(m_http_tokens, json[QString("HttpTokens")]);
    m_http_tokens_isSet = !json[QString("HttpTokens")].isNull() && m_http_tokens_isValid;

    m_http_put_response_hop_limit_isValid = ::OpenAPI::fromJsonValue(m_http_put_response_hop_limit, json[QString("HttpPutResponseHopLimit")]);
    m_http_put_response_hop_limit_isSet = !json[QString("HttpPutResponseHopLimit")].isNull() && m_http_put_response_hop_limit_isValid;

    m_http_endpoint_isValid = ::OpenAPI::fromJsonValue(m_http_endpoint, json[QString("HttpEndpoint")]);
    m_http_endpoint_isSet = !json[QString("HttpEndpoint")].isNull() && m_http_endpoint_isValid;
}

QString OAICreateLaunchConfigurationType_MetadataOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLaunchConfigurationType_MetadataOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_http_tokens.isSet()) {
        obj.insert(QString("HttpTokens"), ::OpenAPI::toJsonValue(m_http_tokens));
    }
    if (m_http_put_response_hop_limit_isSet) {
        obj.insert(QString("HttpPutResponseHopLimit"), ::OpenAPI::toJsonValue(m_http_put_response_hop_limit));
    }
    if (m_http_endpoint.isSet()) {
        obj.insert(QString("HttpEndpoint"), ::OpenAPI::toJsonValue(m_http_endpoint));
    }
    return obj;
}

OAIInstanceMetadataHttpTokensState OAICreateLaunchConfigurationType_MetadataOptions::getHttpTokens() const {
    return m_http_tokens;
}
void OAICreateLaunchConfigurationType_MetadataOptions::setHttpTokens(const OAIInstanceMetadataHttpTokensState &http_tokens) {
    m_http_tokens = http_tokens;
    m_http_tokens_isSet = true;
}

bool OAICreateLaunchConfigurationType_MetadataOptions::is_http_tokens_Set() const{
    return m_http_tokens_isSet;
}

bool OAICreateLaunchConfigurationType_MetadataOptions::is_http_tokens_Valid() const{
    return m_http_tokens_isValid;
}

qint32 OAICreateLaunchConfigurationType_MetadataOptions::getHttpPutResponseHopLimit() const {
    return m_http_put_response_hop_limit;
}
void OAICreateLaunchConfigurationType_MetadataOptions::setHttpPutResponseHopLimit(const qint32 &http_put_response_hop_limit) {
    m_http_put_response_hop_limit = http_put_response_hop_limit;
    m_http_put_response_hop_limit_isSet = true;
}

bool OAICreateLaunchConfigurationType_MetadataOptions::is_http_put_response_hop_limit_Set() const{
    return m_http_put_response_hop_limit_isSet;
}

bool OAICreateLaunchConfigurationType_MetadataOptions::is_http_put_response_hop_limit_Valid() const{
    return m_http_put_response_hop_limit_isValid;
}

OAIInstanceMetadataEndpointState OAICreateLaunchConfigurationType_MetadataOptions::getHttpEndpoint() const {
    return m_http_endpoint;
}
void OAICreateLaunchConfigurationType_MetadataOptions::setHttpEndpoint(const OAIInstanceMetadataEndpointState &http_endpoint) {
    m_http_endpoint = http_endpoint;
    m_http_endpoint_isSet = true;
}

bool OAICreateLaunchConfigurationType_MetadataOptions::is_http_endpoint_Set() const{
    return m_http_endpoint_isSet;
}

bool OAICreateLaunchConfigurationType_MetadataOptions::is_http_endpoint_Valid() const{
    return m_http_endpoint_isValid;
}

bool OAICreateLaunchConfigurationType_MetadataOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_tokens.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_put_response_hop_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLaunchConfigurationType_MetadataOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
