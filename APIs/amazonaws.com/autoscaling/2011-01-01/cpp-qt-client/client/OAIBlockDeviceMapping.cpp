/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlockDeviceMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlockDeviceMapping::OAIBlockDeviceMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlockDeviceMapping::OAIBlockDeviceMapping() {
    this->initializeModel();
}

OAIBlockDeviceMapping::~OAIBlockDeviceMapping() {}

void OAIBlockDeviceMapping::initializeModel() {

    m_virtual_name_isSet = false;
    m_virtual_name_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_ebs_isSet = false;
    m_ebs_isValid = false;

    m_no_device_isSet = false;
    m_no_device_isValid = false;
}

void OAIBlockDeviceMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlockDeviceMapping::fromJsonObject(QJsonObject json) {

    m_virtual_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_name, json[QString("VirtualName")]);
    m_virtual_name_isSet = !json[QString("VirtualName")].isNull() && m_virtual_name_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("DeviceName")]);
    m_device_name_isSet = !json[QString("DeviceName")].isNull() && m_device_name_isValid;

    m_ebs_isValid = ::OpenAPI::fromJsonValue(m_ebs, json[QString("Ebs")]);
    m_ebs_isSet = !json[QString("Ebs")].isNull() && m_ebs_isValid;

    m_no_device_isValid = ::OpenAPI::fromJsonValue(m_no_device, json[QString("NoDevice")]);
    m_no_device_isSet = !json[QString("NoDevice")].isNull() && m_no_device_isValid;
}

QString OAIBlockDeviceMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlockDeviceMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_virtual_name_isSet) {
        obj.insert(QString("VirtualName"), ::OpenAPI::toJsonValue(m_virtual_name));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("DeviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_ebs.isSet()) {
        obj.insert(QString("Ebs"), ::OpenAPI::toJsonValue(m_ebs));
    }
    if (m_no_device_isSet) {
        obj.insert(QString("NoDevice"), ::OpenAPI::toJsonValue(m_no_device));
    }
    return obj;
}

QString OAIBlockDeviceMapping::getVirtualName() const {
    return m_virtual_name;
}
void OAIBlockDeviceMapping::setVirtualName(const QString &virtual_name) {
    m_virtual_name = virtual_name;
    m_virtual_name_isSet = true;
}

bool OAIBlockDeviceMapping::is_virtual_name_Set() const{
    return m_virtual_name_isSet;
}

bool OAIBlockDeviceMapping::is_virtual_name_Valid() const{
    return m_virtual_name_isValid;
}

QString OAIBlockDeviceMapping::getDeviceName() const {
    return m_device_name;
}
void OAIBlockDeviceMapping::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIBlockDeviceMapping::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIBlockDeviceMapping::is_device_name_Valid() const{
    return m_device_name_isValid;
}

OAIBlockDeviceMapping_Ebs OAIBlockDeviceMapping::getEbs() const {
    return m_ebs;
}
void OAIBlockDeviceMapping::setEbs(const OAIBlockDeviceMapping_Ebs &ebs) {
    m_ebs = ebs;
    m_ebs_isSet = true;
}

bool OAIBlockDeviceMapping::is_ebs_Set() const{
    return m_ebs_isSet;
}

bool OAIBlockDeviceMapping::is_ebs_Valid() const{
    return m_ebs_isValid;
}

bool OAIBlockDeviceMapping::getNoDevice() const {
    return m_no_device;
}
void OAIBlockDeviceMapping::setNoDevice(const bool &no_device) {
    m_no_device = no_device;
    m_no_device_isSet = true;
}

bool OAIBlockDeviceMapping::is_no_device_Set() const{
    return m_no_device_isSet;
}

bool OAIBlockDeviceMapping::is_no_device_Valid() const{
    return m_no_device_isValid;
}

bool OAIBlockDeviceMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_virtual_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_device_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlockDeviceMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_name_isValid && true;
}

} // namespace OpenAPI
