/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstanceMetadataOptions.h
 *
 * The metadata options for the instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds\&quot;&gt;Configuring the Instance Metadata Options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.
 */

#ifndef OAIInstanceMetadataOptions_H
#define OAIInstanceMetadataOptions_H

#include <QJsonObject>

#include "OAIInstanceMetadataEndpointState.h"
#include "OAIInstanceMetadataHttpTokensState.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInstanceMetadataOptions : public OAIObject {
public:
    OAIInstanceMetadataOptions();
    OAIInstanceMetadataOptions(QString json);
    ~OAIInstanceMetadataOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIInstanceMetadataHttpTokensState getHttpTokens() const;
    void setHttpTokens(const OAIInstanceMetadataHttpTokensState &http_tokens);
    bool is_http_tokens_Set() const;
    bool is_http_tokens_Valid() const;

    qint32 getHttpPutResponseHopLimit() const;
    void setHttpPutResponseHopLimit(const qint32 &http_put_response_hop_limit);
    bool is_http_put_response_hop_limit_Set() const;
    bool is_http_put_response_hop_limit_Valid() const;

    OAIInstanceMetadataEndpointState getHttpEndpoint() const;
    void setHttpEndpoint(const OAIInstanceMetadataEndpointState &http_endpoint);
    bool is_http_endpoint_Set() const;
    bool is_http_endpoint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIInstanceMetadataHttpTokensState m_http_tokens;
    bool m_http_tokens_isSet;
    bool m_http_tokens_isValid;

    qint32 m_http_put_response_hop_limit;
    bool m_http_put_response_hop_limit_isSet;
    bool m_http_put_response_hop_limit_isValid;

    OAIInstanceMetadataEndpointState m_http_endpoint;
    bool m_http_endpoint_isSet;
    bool m_http_endpoint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstanceMetadataOptions)

#endif // OAIInstanceMetadataOptions_H
