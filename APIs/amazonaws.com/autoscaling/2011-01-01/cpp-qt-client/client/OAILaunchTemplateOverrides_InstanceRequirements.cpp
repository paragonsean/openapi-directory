/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaunchTemplateOverrides_InstanceRequirements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaunchTemplateOverrides_InstanceRequirements::OAILaunchTemplateOverrides_InstanceRequirements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaunchTemplateOverrides_InstanceRequirements::OAILaunchTemplateOverrides_InstanceRequirements() {
    this->initializeModel();
}

OAILaunchTemplateOverrides_InstanceRequirements::~OAILaunchTemplateOverrides_InstanceRequirements() {}

void OAILaunchTemplateOverrides_InstanceRequirements::initializeModel() {

    m_v_cpu_count_isSet = false;
    m_v_cpu_count_isValid = false;

    m_memory_mi_b_isSet = false;
    m_memory_mi_b_isValid = false;

    m_cpu_manufacturers_isSet = false;
    m_cpu_manufacturers_isValid = false;

    m_memory_gi_b_per_v_cpu_isSet = false;
    m_memory_gi_b_per_v_cpu_isValid = false;

    m_excluded_instance_types_isSet = false;
    m_excluded_instance_types_isValid = false;

    m_instance_generations_isSet = false;
    m_instance_generations_isValid = false;

    m_spot_max_price_percentage_over_lowest_price_isSet = false;
    m_spot_max_price_percentage_over_lowest_price_isValid = false;

    m_on_demand_max_price_percentage_over_lowest_price_isSet = false;
    m_on_demand_max_price_percentage_over_lowest_price_isValid = false;

    m_bare_metal_isSet = false;
    m_bare_metal_isValid = false;

    m_burstable_performance_isSet = false;
    m_burstable_performance_isValid = false;

    m_require_hibernate_support_isSet = false;
    m_require_hibernate_support_isValid = false;

    m_network_interface_count_isSet = false;
    m_network_interface_count_isValid = false;

    m_local_storage_isSet = false;
    m_local_storage_isValid = false;

    m_local_storage_types_isSet = false;
    m_local_storage_types_isValid = false;

    m_total_local_storage_gb_isSet = false;
    m_total_local_storage_gb_isValid = false;

    m_baseline_ebs_bandwidth_mbps_isSet = false;
    m_baseline_ebs_bandwidth_mbps_isValid = false;

    m_accelerator_types_isSet = false;
    m_accelerator_types_isValid = false;

    m_accelerator_count_isSet = false;
    m_accelerator_count_isValid = false;

    m_accelerator_manufacturers_isSet = false;
    m_accelerator_manufacturers_isValid = false;

    m_accelerator_names_isSet = false;
    m_accelerator_names_isValid = false;

    m_accelerator_total_memory_mi_b_isSet = false;
    m_accelerator_total_memory_mi_b_isValid = false;

    m_network_bandwidth_gbps_isSet = false;
    m_network_bandwidth_gbps_isValid = false;

    m_allowed_instance_types_isSet = false;
    m_allowed_instance_types_isValid = false;
}

void OAILaunchTemplateOverrides_InstanceRequirements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILaunchTemplateOverrides_InstanceRequirements::fromJsonObject(QJsonObject json) {

    m_v_cpu_count_isValid = ::OpenAPI::fromJsonValue(m_v_cpu_count, json[QString("VCpuCount")]);
    m_v_cpu_count_isSet = !json[QString("VCpuCount")].isNull() && m_v_cpu_count_isValid;

    m_memory_mi_b_isValid = ::OpenAPI::fromJsonValue(m_memory_mi_b, json[QString("MemoryMiB")]);
    m_memory_mi_b_isSet = !json[QString("MemoryMiB")].isNull() && m_memory_mi_b_isValid;

    m_cpu_manufacturers_isValid = ::OpenAPI::fromJsonValue(m_cpu_manufacturers, json[QString("CpuManufacturers")]);
    m_cpu_manufacturers_isSet = !json[QString("CpuManufacturers")].isNull() && m_cpu_manufacturers_isValid;

    m_memory_gi_b_per_v_cpu_isValid = ::OpenAPI::fromJsonValue(m_memory_gi_b_per_v_cpu, json[QString("MemoryGiBPerVCpu")]);
    m_memory_gi_b_per_v_cpu_isSet = !json[QString("MemoryGiBPerVCpu")].isNull() && m_memory_gi_b_per_v_cpu_isValid;

    m_excluded_instance_types_isValid = ::OpenAPI::fromJsonValue(m_excluded_instance_types, json[QString("ExcludedInstanceTypes")]);
    m_excluded_instance_types_isSet = !json[QString("ExcludedInstanceTypes")].isNull() && m_excluded_instance_types_isValid;

    m_instance_generations_isValid = ::OpenAPI::fromJsonValue(m_instance_generations, json[QString("InstanceGenerations")]);
    m_instance_generations_isSet = !json[QString("InstanceGenerations")].isNull() && m_instance_generations_isValid;

    m_spot_max_price_percentage_over_lowest_price_isValid = ::OpenAPI::fromJsonValue(m_spot_max_price_percentage_over_lowest_price, json[QString("SpotMaxPricePercentageOverLowestPrice")]);
    m_spot_max_price_percentage_over_lowest_price_isSet = !json[QString("SpotMaxPricePercentageOverLowestPrice")].isNull() && m_spot_max_price_percentage_over_lowest_price_isValid;

    m_on_demand_max_price_percentage_over_lowest_price_isValid = ::OpenAPI::fromJsonValue(m_on_demand_max_price_percentage_over_lowest_price, json[QString("OnDemandMaxPricePercentageOverLowestPrice")]);
    m_on_demand_max_price_percentage_over_lowest_price_isSet = !json[QString("OnDemandMaxPricePercentageOverLowestPrice")].isNull() && m_on_demand_max_price_percentage_over_lowest_price_isValid;

    m_bare_metal_isValid = ::OpenAPI::fromJsonValue(m_bare_metal, json[QString("BareMetal")]);
    m_bare_metal_isSet = !json[QString("BareMetal")].isNull() && m_bare_metal_isValid;

    m_burstable_performance_isValid = ::OpenAPI::fromJsonValue(m_burstable_performance, json[QString("BurstablePerformance")]);
    m_burstable_performance_isSet = !json[QString("BurstablePerformance")].isNull() && m_burstable_performance_isValid;

    m_require_hibernate_support_isValid = ::OpenAPI::fromJsonValue(m_require_hibernate_support, json[QString("RequireHibernateSupport")]);
    m_require_hibernate_support_isSet = !json[QString("RequireHibernateSupport")].isNull() && m_require_hibernate_support_isValid;

    m_network_interface_count_isValid = ::OpenAPI::fromJsonValue(m_network_interface_count, json[QString("NetworkInterfaceCount")]);
    m_network_interface_count_isSet = !json[QString("NetworkInterfaceCount")].isNull() && m_network_interface_count_isValid;

    m_local_storage_isValid = ::OpenAPI::fromJsonValue(m_local_storage, json[QString("LocalStorage")]);
    m_local_storage_isSet = !json[QString("LocalStorage")].isNull() && m_local_storage_isValid;

    m_local_storage_types_isValid = ::OpenAPI::fromJsonValue(m_local_storage_types, json[QString("LocalStorageTypes")]);
    m_local_storage_types_isSet = !json[QString("LocalStorageTypes")].isNull() && m_local_storage_types_isValid;

    m_total_local_storage_gb_isValid = ::OpenAPI::fromJsonValue(m_total_local_storage_gb, json[QString("TotalLocalStorageGB")]);
    m_total_local_storage_gb_isSet = !json[QString("TotalLocalStorageGB")].isNull() && m_total_local_storage_gb_isValid;

    m_baseline_ebs_bandwidth_mbps_isValid = ::OpenAPI::fromJsonValue(m_baseline_ebs_bandwidth_mbps, json[QString("BaselineEbsBandwidthMbps")]);
    m_baseline_ebs_bandwidth_mbps_isSet = !json[QString("BaselineEbsBandwidthMbps")].isNull() && m_baseline_ebs_bandwidth_mbps_isValid;

    m_accelerator_types_isValid = ::OpenAPI::fromJsonValue(m_accelerator_types, json[QString("AcceleratorTypes")]);
    m_accelerator_types_isSet = !json[QString("AcceleratorTypes")].isNull() && m_accelerator_types_isValid;

    m_accelerator_count_isValid = ::OpenAPI::fromJsonValue(m_accelerator_count, json[QString("AcceleratorCount")]);
    m_accelerator_count_isSet = !json[QString("AcceleratorCount")].isNull() && m_accelerator_count_isValid;

    m_accelerator_manufacturers_isValid = ::OpenAPI::fromJsonValue(m_accelerator_manufacturers, json[QString("AcceleratorManufacturers")]);
    m_accelerator_manufacturers_isSet = !json[QString("AcceleratorManufacturers")].isNull() && m_accelerator_manufacturers_isValid;

    m_accelerator_names_isValid = ::OpenAPI::fromJsonValue(m_accelerator_names, json[QString("AcceleratorNames")]);
    m_accelerator_names_isSet = !json[QString("AcceleratorNames")].isNull() && m_accelerator_names_isValid;

    m_accelerator_total_memory_mi_b_isValid = ::OpenAPI::fromJsonValue(m_accelerator_total_memory_mi_b, json[QString("AcceleratorTotalMemoryMiB")]);
    m_accelerator_total_memory_mi_b_isSet = !json[QString("AcceleratorTotalMemoryMiB")].isNull() && m_accelerator_total_memory_mi_b_isValid;

    m_network_bandwidth_gbps_isValid = ::OpenAPI::fromJsonValue(m_network_bandwidth_gbps, json[QString("NetworkBandwidthGbps")]);
    m_network_bandwidth_gbps_isSet = !json[QString("NetworkBandwidthGbps")].isNull() && m_network_bandwidth_gbps_isValid;

    m_allowed_instance_types_isValid = ::OpenAPI::fromJsonValue(m_allowed_instance_types, json[QString("AllowedInstanceTypes")]);
    m_allowed_instance_types_isSet = !json[QString("AllowedInstanceTypes")].isNull() && m_allowed_instance_types_isValid;
}

QString OAILaunchTemplateOverrides_InstanceRequirements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILaunchTemplateOverrides_InstanceRequirements::asJsonObject() const {
    QJsonObject obj;
    if (m_v_cpu_count.isSet()) {
        obj.insert(QString("VCpuCount"), ::OpenAPI::toJsonValue(m_v_cpu_count));
    }
    if (m_memory_mi_b.isSet()) {
        obj.insert(QString("MemoryMiB"), ::OpenAPI::toJsonValue(m_memory_mi_b));
    }
    if (m_cpu_manufacturers.isSet()) {
        obj.insert(QString("CpuManufacturers"), ::OpenAPI::toJsonValue(m_cpu_manufacturers));
    }
    if (m_memory_gi_b_per_v_cpu.isSet()) {
        obj.insert(QString("MemoryGiBPerVCpu"), ::OpenAPI::toJsonValue(m_memory_gi_b_per_v_cpu));
    }
    if (m_excluded_instance_types.isSet()) {
        obj.insert(QString("ExcludedInstanceTypes"), ::OpenAPI::toJsonValue(m_excluded_instance_types));
    }
    if (m_instance_generations.isSet()) {
        obj.insert(QString("InstanceGenerations"), ::OpenAPI::toJsonValue(m_instance_generations));
    }
    if (m_spot_max_price_percentage_over_lowest_price_isSet) {
        obj.insert(QString("SpotMaxPricePercentageOverLowestPrice"), ::OpenAPI::toJsonValue(m_spot_max_price_percentage_over_lowest_price));
    }
    if (m_on_demand_max_price_percentage_over_lowest_price_isSet) {
        obj.insert(QString("OnDemandMaxPricePercentageOverLowestPrice"), ::OpenAPI::toJsonValue(m_on_demand_max_price_percentage_over_lowest_price));
    }
    if (m_bare_metal.isSet()) {
        obj.insert(QString("BareMetal"), ::OpenAPI::toJsonValue(m_bare_metal));
    }
    if (m_burstable_performance.isSet()) {
        obj.insert(QString("BurstablePerformance"), ::OpenAPI::toJsonValue(m_burstable_performance));
    }
    if (m_require_hibernate_support_isSet) {
        obj.insert(QString("RequireHibernateSupport"), ::OpenAPI::toJsonValue(m_require_hibernate_support));
    }
    if (m_network_interface_count.isSet()) {
        obj.insert(QString("NetworkInterfaceCount"), ::OpenAPI::toJsonValue(m_network_interface_count));
    }
    if (m_local_storage.isSet()) {
        obj.insert(QString("LocalStorage"), ::OpenAPI::toJsonValue(m_local_storage));
    }
    if (m_local_storage_types.isSet()) {
        obj.insert(QString("LocalStorageTypes"), ::OpenAPI::toJsonValue(m_local_storage_types));
    }
    if (m_total_local_storage_gb.isSet()) {
        obj.insert(QString("TotalLocalStorageGB"), ::OpenAPI::toJsonValue(m_total_local_storage_gb));
    }
    if (m_baseline_ebs_bandwidth_mbps.isSet()) {
        obj.insert(QString("BaselineEbsBandwidthMbps"), ::OpenAPI::toJsonValue(m_baseline_ebs_bandwidth_mbps));
    }
    if (m_accelerator_types.isSet()) {
        obj.insert(QString("AcceleratorTypes"), ::OpenAPI::toJsonValue(m_accelerator_types));
    }
    if (m_accelerator_count.isSet()) {
        obj.insert(QString("AcceleratorCount"), ::OpenAPI::toJsonValue(m_accelerator_count));
    }
    if (m_accelerator_manufacturers.isSet()) {
        obj.insert(QString("AcceleratorManufacturers"), ::OpenAPI::toJsonValue(m_accelerator_manufacturers));
    }
    if (m_accelerator_names.isSet()) {
        obj.insert(QString("AcceleratorNames"), ::OpenAPI::toJsonValue(m_accelerator_names));
    }
    if (m_accelerator_total_memory_mi_b.isSet()) {
        obj.insert(QString("AcceleratorTotalMemoryMiB"), ::OpenAPI::toJsonValue(m_accelerator_total_memory_mi_b));
    }
    if (m_network_bandwidth_gbps.isSet()) {
        obj.insert(QString("NetworkBandwidthGbps"), ::OpenAPI::toJsonValue(m_network_bandwidth_gbps));
    }
    if (m_allowed_instance_types.isSet()) {
        obj.insert(QString("AllowedInstanceTypes"), ::OpenAPI::toJsonValue(m_allowed_instance_types));
    }
    return obj;
}

OAIInstanceRequirements_VCpuCount OAILaunchTemplateOverrides_InstanceRequirements::getVCpuCount() const {
    return m_v_cpu_count;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setVCpuCount(const OAIInstanceRequirements_VCpuCount &v_cpu_count) {
    m_v_cpu_count = v_cpu_count;
    m_v_cpu_count_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_v_cpu_count_Set() const{
    return m_v_cpu_count_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_v_cpu_count_Valid() const{
    return m_v_cpu_count_isValid;
}

OAIInstanceRequirements_MemoryMiB OAILaunchTemplateOverrides_InstanceRequirements::getMemoryMiB() const {
    return m_memory_mi_b;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setMemoryMiB(const OAIInstanceRequirements_MemoryMiB &memory_mi_b) {
    m_memory_mi_b = memory_mi_b;
    m_memory_mi_b_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_memory_mi_b_Set() const{
    return m_memory_mi_b_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_memory_mi_b_Valid() const{
    return m_memory_mi_b_isValid;
}

QList OAILaunchTemplateOverrides_InstanceRequirements::getCpuManufacturers() const {
    return m_cpu_manufacturers;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setCpuManufacturers(const QList &cpu_manufacturers) {
    m_cpu_manufacturers = cpu_manufacturers;
    m_cpu_manufacturers_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_cpu_manufacturers_Set() const{
    return m_cpu_manufacturers_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_cpu_manufacturers_Valid() const{
    return m_cpu_manufacturers_isValid;
}

OAIInstanceRequirements_MemoryGiBPerVCpu OAILaunchTemplateOverrides_InstanceRequirements::getMemoryGiBPerVCpu() const {
    return m_memory_gi_b_per_v_cpu;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setMemoryGiBPerVCpu(const OAIInstanceRequirements_MemoryGiBPerVCpu &memory_gi_b_per_v_cpu) {
    m_memory_gi_b_per_v_cpu = memory_gi_b_per_v_cpu;
    m_memory_gi_b_per_v_cpu_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_memory_gi_b_per_v_cpu_Set() const{
    return m_memory_gi_b_per_v_cpu_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_memory_gi_b_per_v_cpu_Valid() const{
    return m_memory_gi_b_per_v_cpu_isValid;
}

QList OAILaunchTemplateOverrides_InstanceRequirements::getExcludedInstanceTypes() const {
    return m_excluded_instance_types;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setExcludedInstanceTypes(const QList &excluded_instance_types) {
    m_excluded_instance_types = excluded_instance_types;
    m_excluded_instance_types_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_excluded_instance_types_Set() const{
    return m_excluded_instance_types_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_excluded_instance_types_Valid() const{
    return m_excluded_instance_types_isValid;
}

QList OAILaunchTemplateOverrides_InstanceRequirements::getInstanceGenerations() const {
    return m_instance_generations;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setInstanceGenerations(const QList &instance_generations) {
    m_instance_generations = instance_generations;
    m_instance_generations_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_instance_generations_Set() const{
    return m_instance_generations_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_instance_generations_Valid() const{
    return m_instance_generations_isValid;
}

qint32 OAILaunchTemplateOverrides_InstanceRequirements::getSpotMaxPricePercentageOverLowestPrice() const {
    return m_spot_max_price_percentage_over_lowest_price;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setSpotMaxPricePercentageOverLowestPrice(const qint32 &spot_max_price_percentage_over_lowest_price) {
    m_spot_max_price_percentage_over_lowest_price = spot_max_price_percentage_over_lowest_price;
    m_spot_max_price_percentage_over_lowest_price_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_spot_max_price_percentage_over_lowest_price_Set() const{
    return m_spot_max_price_percentage_over_lowest_price_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_spot_max_price_percentage_over_lowest_price_Valid() const{
    return m_spot_max_price_percentage_over_lowest_price_isValid;
}

qint32 OAILaunchTemplateOverrides_InstanceRequirements::getOnDemandMaxPricePercentageOverLowestPrice() const {
    return m_on_demand_max_price_percentage_over_lowest_price;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setOnDemandMaxPricePercentageOverLowestPrice(const qint32 &on_demand_max_price_percentage_over_lowest_price) {
    m_on_demand_max_price_percentage_over_lowest_price = on_demand_max_price_percentage_over_lowest_price;
    m_on_demand_max_price_percentage_over_lowest_price_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_on_demand_max_price_percentage_over_lowest_price_Set() const{
    return m_on_demand_max_price_percentage_over_lowest_price_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_on_demand_max_price_percentage_over_lowest_price_Valid() const{
    return m_on_demand_max_price_percentage_over_lowest_price_isValid;
}

OAIBareMetal OAILaunchTemplateOverrides_InstanceRequirements::getBareMetal() const {
    return m_bare_metal;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setBareMetal(const OAIBareMetal &bare_metal) {
    m_bare_metal = bare_metal;
    m_bare_metal_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_bare_metal_Set() const{
    return m_bare_metal_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_bare_metal_Valid() const{
    return m_bare_metal_isValid;
}

OAIBurstablePerformance OAILaunchTemplateOverrides_InstanceRequirements::getBurstablePerformance() const {
    return m_burstable_performance;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setBurstablePerformance(const OAIBurstablePerformance &burstable_performance) {
    m_burstable_performance = burstable_performance;
    m_burstable_performance_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_burstable_performance_Set() const{
    return m_burstable_performance_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_burstable_performance_Valid() const{
    return m_burstable_performance_isValid;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::getRequireHibernateSupport() const {
    return m_require_hibernate_support;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setRequireHibernateSupport(const bool &require_hibernate_support) {
    m_require_hibernate_support = require_hibernate_support;
    m_require_hibernate_support_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_require_hibernate_support_Set() const{
    return m_require_hibernate_support_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_require_hibernate_support_Valid() const{
    return m_require_hibernate_support_isValid;
}

OAIInstanceRequirements_NetworkInterfaceCount OAILaunchTemplateOverrides_InstanceRequirements::getNetworkInterfaceCount() const {
    return m_network_interface_count;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setNetworkInterfaceCount(const OAIInstanceRequirements_NetworkInterfaceCount &network_interface_count) {
    m_network_interface_count = network_interface_count;
    m_network_interface_count_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_network_interface_count_Set() const{
    return m_network_interface_count_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_network_interface_count_Valid() const{
    return m_network_interface_count_isValid;
}

OAILocalStorage OAILaunchTemplateOverrides_InstanceRequirements::getLocalStorage() const {
    return m_local_storage;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setLocalStorage(const OAILocalStorage &local_storage) {
    m_local_storage = local_storage;
    m_local_storage_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_local_storage_Set() const{
    return m_local_storage_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_local_storage_Valid() const{
    return m_local_storage_isValid;
}

QList OAILaunchTemplateOverrides_InstanceRequirements::getLocalStorageTypes() const {
    return m_local_storage_types;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setLocalStorageTypes(const QList &local_storage_types) {
    m_local_storage_types = local_storage_types;
    m_local_storage_types_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_local_storage_types_Set() const{
    return m_local_storage_types_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_local_storage_types_Valid() const{
    return m_local_storage_types_isValid;
}

OAIInstanceRequirements_TotalLocalStorageGB OAILaunchTemplateOverrides_InstanceRequirements::getTotalLocalStorageGb() const {
    return m_total_local_storage_gb;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setTotalLocalStorageGb(const OAIInstanceRequirements_TotalLocalStorageGB &total_local_storage_gb) {
    m_total_local_storage_gb = total_local_storage_gb;
    m_total_local_storage_gb_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_total_local_storage_gb_Set() const{
    return m_total_local_storage_gb_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_total_local_storage_gb_Valid() const{
    return m_total_local_storage_gb_isValid;
}

OAIInstanceRequirements_BaselineEbsBandwidthMbps OAILaunchTemplateOverrides_InstanceRequirements::getBaselineEbsBandwidthMbps() const {
    return m_baseline_ebs_bandwidth_mbps;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setBaselineEbsBandwidthMbps(const OAIInstanceRequirements_BaselineEbsBandwidthMbps &baseline_ebs_bandwidth_mbps) {
    m_baseline_ebs_bandwidth_mbps = baseline_ebs_bandwidth_mbps;
    m_baseline_ebs_bandwidth_mbps_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_baseline_ebs_bandwidth_mbps_Set() const{
    return m_baseline_ebs_bandwidth_mbps_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_baseline_ebs_bandwidth_mbps_Valid() const{
    return m_baseline_ebs_bandwidth_mbps_isValid;
}

QList OAILaunchTemplateOverrides_InstanceRequirements::getAcceleratorTypes() const {
    return m_accelerator_types;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setAcceleratorTypes(const QList &accelerator_types) {
    m_accelerator_types = accelerator_types;
    m_accelerator_types_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_accelerator_types_Set() const{
    return m_accelerator_types_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_accelerator_types_Valid() const{
    return m_accelerator_types_isValid;
}

OAIInstanceRequirements_AcceleratorCount OAILaunchTemplateOverrides_InstanceRequirements::getAcceleratorCount() const {
    return m_accelerator_count;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setAcceleratorCount(const OAIInstanceRequirements_AcceleratorCount &accelerator_count) {
    m_accelerator_count = accelerator_count;
    m_accelerator_count_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_accelerator_count_Set() const{
    return m_accelerator_count_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_accelerator_count_Valid() const{
    return m_accelerator_count_isValid;
}

QList OAILaunchTemplateOverrides_InstanceRequirements::getAcceleratorManufacturers() const {
    return m_accelerator_manufacturers;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setAcceleratorManufacturers(const QList &accelerator_manufacturers) {
    m_accelerator_manufacturers = accelerator_manufacturers;
    m_accelerator_manufacturers_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_accelerator_manufacturers_Set() const{
    return m_accelerator_manufacturers_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_accelerator_manufacturers_Valid() const{
    return m_accelerator_manufacturers_isValid;
}

QList OAILaunchTemplateOverrides_InstanceRequirements::getAcceleratorNames() const {
    return m_accelerator_names;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setAcceleratorNames(const QList &accelerator_names) {
    m_accelerator_names = accelerator_names;
    m_accelerator_names_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_accelerator_names_Set() const{
    return m_accelerator_names_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_accelerator_names_Valid() const{
    return m_accelerator_names_isValid;
}

OAIInstanceRequirements_AcceleratorTotalMemoryMiB OAILaunchTemplateOverrides_InstanceRequirements::getAcceleratorTotalMemoryMiB() const {
    return m_accelerator_total_memory_mi_b;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setAcceleratorTotalMemoryMiB(const OAIInstanceRequirements_AcceleratorTotalMemoryMiB &accelerator_total_memory_mi_b) {
    m_accelerator_total_memory_mi_b = accelerator_total_memory_mi_b;
    m_accelerator_total_memory_mi_b_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_accelerator_total_memory_mi_b_Set() const{
    return m_accelerator_total_memory_mi_b_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_accelerator_total_memory_mi_b_Valid() const{
    return m_accelerator_total_memory_mi_b_isValid;
}

OAIInstanceRequirements_NetworkBandwidthGbps OAILaunchTemplateOverrides_InstanceRequirements::getNetworkBandwidthGbps() const {
    return m_network_bandwidth_gbps;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setNetworkBandwidthGbps(const OAIInstanceRequirements_NetworkBandwidthGbps &network_bandwidth_gbps) {
    m_network_bandwidth_gbps = network_bandwidth_gbps;
    m_network_bandwidth_gbps_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_network_bandwidth_gbps_Set() const{
    return m_network_bandwidth_gbps_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_network_bandwidth_gbps_Valid() const{
    return m_network_bandwidth_gbps_isValid;
}

QList OAILaunchTemplateOverrides_InstanceRequirements::getAllowedInstanceTypes() const {
    return m_allowed_instance_types;
}
void OAILaunchTemplateOverrides_InstanceRequirements::setAllowedInstanceTypes(const QList &allowed_instance_types) {
    m_allowed_instance_types = allowed_instance_types;
    m_allowed_instance_types_isSet = true;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_allowed_instance_types_Set() const{
    return m_allowed_instance_types_isSet;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::is_allowed_instance_types_Valid() const{
    return m_allowed_instance_types_isValid;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_v_cpu_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_mi_b.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_manufacturers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_gi_b_per_v_cpu.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_instance_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_generations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spot_max_price_percentage_over_lowest_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_demand_max_price_percentage_over_lowest_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bare_metal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_burstable_performance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_hibernate_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_storage_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_local_storage_gb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseline_ebs_bandwidth_mbps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_manufacturers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_total_memory_mi_b.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_bandwidth_gbps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_instance_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILaunchTemplateOverrides_InstanceRequirements::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_v_cpu_count_isValid && m_memory_mi_b_isValid && true;
}

} // namespace OpenAPI
