/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstanceRequirements.h
 *
 * &lt;p&gt;The attributes for the instance types for a mixed instances policy. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot allocation strategies to launch instances from these instance types.&lt;/p&gt; &lt;p&gt;When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values.&lt;/p&gt; &lt;p&gt;To limit the list of instance types from which Amazon EC2 Auto Scaling can identify matching instance types, you can use one of the following parameters, but not both in the same request:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AllowedInstanceTypes&lt;/code&gt; - The instance types to include in the list. All other instance types are ignored, even if they match your specified attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ExcludedInstanceTypes&lt;/code&gt; - The instance types to exclude from the list, even if they match your specified attributes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;You must specify &lt;code&gt;VCpuCount&lt;/code&gt; and &lt;code&gt;MemoryMiB&lt;/code&gt;. All other attributes are optional. Any unspecified optional attribute is set to its default.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html\&quot;&gt;Creating an Auto Scaling group using attribute-based instance type selection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For help determining which instance types match your attributes before you apply them to your Auto Scaling group, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-get-instance-types-from-instance-requirements\&quot;&gt;Preview instance types with specified attributes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAIInstanceRequirements_H
#define OAIInstanceRequirements_H

#include <QJsonObject>

#include "OAIBareMetal.h"
#include "OAIBurstablePerformance.h"
#include "OAIInstanceRequirements_AcceleratorCount.h"
#include "OAIInstanceRequirements_AcceleratorTotalMemoryMiB.h"
#include "OAIInstanceRequirements_BaselineEbsBandwidthMbps.h"
#include "OAIInstanceRequirements_MemoryGiBPerVCpu.h"
#include "OAIInstanceRequirements_MemoryMiB.h"
#include "OAIInstanceRequirements_NetworkBandwidthGbps.h"
#include "OAIInstanceRequirements_NetworkInterfaceCount.h"
#include "OAIInstanceRequirements_TotalLocalStorageGB.h"
#include "OAIInstanceRequirements_VCpuCount.h"
#include "OAILocalStorage.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInstanceRequirements_VCpuCount;
class OAIInstanceRequirements_MemoryMiB;
class OAIInstanceRequirements_MemoryGiBPerVCpu;
class OAIInstanceRequirements_NetworkInterfaceCount;
class OAIInstanceRequirements_TotalLocalStorageGB;
class OAIInstanceRequirements_BaselineEbsBandwidthMbps;
class OAIInstanceRequirements_AcceleratorCount;
class OAIInstanceRequirements_AcceleratorTotalMemoryMiB;
class OAIInstanceRequirements_NetworkBandwidthGbps;

class OAIInstanceRequirements : public OAIObject {
public:
    OAIInstanceRequirements();
    OAIInstanceRequirements(QString json);
    ~OAIInstanceRequirements() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIInstanceRequirements_VCpuCount getVCpuCount() const;
    void setVCpuCount(const OAIInstanceRequirements_VCpuCount &v_cpu_count);
    bool is_v_cpu_count_Set() const;
    bool is_v_cpu_count_Valid() const;

    OAIInstanceRequirements_MemoryMiB getMemoryMiB() const;
    void setMemoryMiB(const OAIInstanceRequirements_MemoryMiB &memory_mi_b);
    bool is_memory_mi_b_Set() const;
    bool is_memory_mi_b_Valid() const;

    QList getCpuManufacturers() const;
    void setCpuManufacturers(const QList &cpu_manufacturers);
    bool is_cpu_manufacturers_Set() const;
    bool is_cpu_manufacturers_Valid() const;

    OAIInstanceRequirements_MemoryGiBPerVCpu getMemoryGiBPerVCpu() const;
    void setMemoryGiBPerVCpu(const OAIInstanceRequirements_MemoryGiBPerVCpu &memory_gi_b_per_v_cpu);
    bool is_memory_gi_b_per_v_cpu_Set() const;
    bool is_memory_gi_b_per_v_cpu_Valid() const;

    QList getExcludedInstanceTypes() const;
    void setExcludedInstanceTypes(const QList &excluded_instance_types);
    bool is_excluded_instance_types_Set() const;
    bool is_excluded_instance_types_Valid() const;

    QList getInstanceGenerations() const;
    void setInstanceGenerations(const QList &instance_generations);
    bool is_instance_generations_Set() const;
    bool is_instance_generations_Valid() const;

    qint32 getSpotMaxPricePercentageOverLowestPrice() const;
    void setSpotMaxPricePercentageOverLowestPrice(const qint32 &spot_max_price_percentage_over_lowest_price);
    bool is_spot_max_price_percentage_over_lowest_price_Set() const;
    bool is_spot_max_price_percentage_over_lowest_price_Valid() const;

    qint32 getOnDemandMaxPricePercentageOverLowestPrice() const;
    void setOnDemandMaxPricePercentageOverLowestPrice(const qint32 &on_demand_max_price_percentage_over_lowest_price);
    bool is_on_demand_max_price_percentage_over_lowest_price_Set() const;
    bool is_on_demand_max_price_percentage_over_lowest_price_Valid() const;

    OAIBareMetal getBareMetal() const;
    void setBareMetal(const OAIBareMetal &bare_metal);
    bool is_bare_metal_Set() const;
    bool is_bare_metal_Valid() const;

    OAIBurstablePerformance getBurstablePerformance() const;
    void setBurstablePerformance(const OAIBurstablePerformance &burstable_performance);
    bool is_burstable_performance_Set() const;
    bool is_burstable_performance_Valid() const;

    bool getRequireHibernateSupport() const;
    void setRequireHibernateSupport(const bool &require_hibernate_support);
    bool is_require_hibernate_support_Set() const;
    bool is_require_hibernate_support_Valid() const;

    OAIInstanceRequirements_NetworkInterfaceCount getNetworkInterfaceCount() const;
    void setNetworkInterfaceCount(const OAIInstanceRequirements_NetworkInterfaceCount &network_interface_count);
    bool is_network_interface_count_Set() const;
    bool is_network_interface_count_Valid() const;

    OAILocalStorage getLocalStorage() const;
    void setLocalStorage(const OAILocalStorage &local_storage);
    bool is_local_storage_Set() const;
    bool is_local_storage_Valid() const;

    QList getLocalStorageTypes() const;
    void setLocalStorageTypes(const QList &local_storage_types);
    bool is_local_storage_types_Set() const;
    bool is_local_storage_types_Valid() const;

    OAIInstanceRequirements_TotalLocalStorageGB getTotalLocalStorageGb() const;
    void setTotalLocalStorageGb(const OAIInstanceRequirements_TotalLocalStorageGB &total_local_storage_gb);
    bool is_total_local_storage_gb_Set() const;
    bool is_total_local_storage_gb_Valid() const;

    OAIInstanceRequirements_BaselineEbsBandwidthMbps getBaselineEbsBandwidthMbps() const;
    void setBaselineEbsBandwidthMbps(const OAIInstanceRequirements_BaselineEbsBandwidthMbps &baseline_ebs_bandwidth_mbps);
    bool is_baseline_ebs_bandwidth_mbps_Set() const;
    bool is_baseline_ebs_bandwidth_mbps_Valid() const;

    QList getAcceleratorTypes() const;
    void setAcceleratorTypes(const QList &accelerator_types);
    bool is_accelerator_types_Set() const;
    bool is_accelerator_types_Valid() const;

    OAIInstanceRequirements_AcceleratorCount getAcceleratorCount() const;
    void setAcceleratorCount(const OAIInstanceRequirements_AcceleratorCount &accelerator_count);
    bool is_accelerator_count_Set() const;
    bool is_accelerator_count_Valid() const;

    QList getAcceleratorManufacturers() const;
    void setAcceleratorManufacturers(const QList &accelerator_manufacturers);
    bool is_accelerator_manufacturers_Set() const;
    bool is_accelerator_manufacturers_Valid() const;

    QList getAcceleratorNames() const;
    void setAcceleratorNames(const QList &accelerator_names);
    bool is_accelerator_names_Set() const;
    bool is_accelerator_names_Valid() const;

    OAIInstanceRequirements_AcceleratorTotalMemoryMiB getAcceleratorTotalMemoryMiB() const;
    void setAcceleratorTotalMemoryMiB(const OAIInstanceRequirements_AcceleratorTotalMemoryMiB &accelerator_total_memory_mi_b);
    bool is_accelerator_total_memory_mi_b_Set() const;
    bool is_accelerator_total_memory_mi_b_Valid() const;

    OAIInstanceRequirements_NetworkBandwidthGbps getNetworkBandwidthGbps() const;
    void setNetworkBandwidthGbps(const OAIInstanceRequirements_NetworkBandwidthGbps &network_bandwidth_gbps);
    bool is_network_bandwidth_gbps_Set() const;
    bool is_network_bandwidth_gbps_Valid() const;

    QList getAllowedInstanceTypes() const;
    void setAllowedInstanceTypes(const QList &allowed_instance_types);
    bool is_allowed_instance_types_Set() const;
    bool is_allowed_instance_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIInstanceRequirements_VCpuCount m_v_cpu_count;
    bool m_v_cpu_count_isSet;
    bool m_v_cpu_count_isValid;

    OAIInstanceRequirements_MemoryMiB m_memory_mi_b;
    bool m_memory_mi_b_isSet;
    bool m_memory_mi_b_isValid;

    QList m_cpu_manufacturers;
    bool m_cpu_manufacturers_isSet;
    bool m_cpu_manufacturers_isValid;

    OAIInstanceRequirements_MemoryGiBPerVCpu m_memory_gi_b_per_v_cpu;
    bool m_memory_gi_b_per_v_cpu_isSet;
    bool m_memory_gi_b_per_v_cpu_isValid;

    QList m_excluded_instance_types;
    bool m_excluded_instance_types_isSet;
    bool m_excluded_instance_types_isValid;

    QList m_instance_generations;
    bool m_instance_generations_isSet;
    bool m_instance_generations_isValid;

    qint32 m_spot_max_price_percentage_over_lowest_price;
    bool m_spot_max_price_percentage_over_lowest_price_isSet;
    bool m_spot_max_price_percentage_over_lowest_price_isValid;

    qint32 m_on_demand_max_price_percentage_over_lowest_price;
    bool m_on_demand_max_price_percentage_over_lowest_price_isSet;
    bool m_on_demand_max_price_percentage_over_lowest_price_isValid;

    OAIBareMetal m_bare_metal;
    bool m_bare_metal_isSet;
    bool m_bare_metal_isValid;

    OAIBurstablePerformance m_burstable_performance;
    bool m_burstable_performance_isSet;
    bool m_burstable_performance_isValid;

    bool m_require_hibernate_support;
    bool m_require_hibernate_support_isSet;
    bool m_require_hibernate_support_isValid;

    OAIInstanceRequirements_NetworkInterfaceCount m_network_interface_count;
    bool m_network_interface_count_isSet;
    bool m_network_interface_count_isValid;

    OAILocalStorage m_local_storage;
    bool m_local_storage_isSet;
    bool m_local_storage_isValid;

    QList m_local_storage_types;
    bool m_local_storage_types_isSet;
    bool m_local_storage_types_isValid;

    OAIInstanceRequirements_TotalLocalStorageGB m_total_local_storage_gb;
    bool m_total_local_storage_gb_isSet;
    bool m_total_local_storage_gb_isValid;

    OAIInstanceRequirements_BaselineEbsBandwidthMbps m_baseline_ebs_bandwidth_mbps;
    bool m_baseline_ebs_bandwidth_mbps_isSet;
    bool m_baseline_ebs_bandwidth_mbps_isValid;

    QList m_accelerator_types;
    bool m_accelerator_types_isSet;
    bool m_accelerator_types_isValid;

    OAIInstanceRequirements_AcceleratorCount m_accelerator_count;
    bool m_accelerator_count_isSet;
    bool m_accelerator_count_isValid;

    QList m_accelerator_manufacturers;
    bool m_accelerator_manufacturers_isSet;
    bool m_accelerator_manufacturers_isValid;

    QList m_accelerator_names;
    bool m_accelerator_names_isSet;
    bool m_accelerator_names_isValid;

    OAIInstanceRequirements_AcceleratorTotalMemoryMiB m_accelerator_total_memory_mi_b;
    bool m_accelerator_total_memory_mi_b_isSet;
    bool m_accelerator_total_memory_mi_b_isValid;

    OAIInstanceRequirements_NetworkBandwidthGbps m_network_bandwidth_gbps;
    bool m_network_bandwidth_gbps_isSet;
    bool m_network_bandwidth_gbps_isValid;

    QList m_allowed_instance_types;
    bool m_allowed_instance_types_isSet;
    bool m_allowed_instance_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstanceRequirements)

#endif // OAIInstanceRequirements_H
