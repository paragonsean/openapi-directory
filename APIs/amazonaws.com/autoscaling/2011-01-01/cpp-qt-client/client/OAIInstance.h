/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstance.h
 *
 * Describes an EC2 instance.
 */

#ifndef OAIInstance_H
#define OAIInstance_H

#include <QJsonObject>

#include "OAIAutoScalingInstanceDetails_LaunchTemplate.h"
#include "OAILifecycleState.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAutoScalingInstanceDetails_LaunchTemplate;

class OAIInstance : public OAIObject {
public:
    OAIInstance();
    OAIInstance(QString json);
    ~OAIInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    QString getAvailabilityZone() const;
    void setAvailabilityZone(const QString &availability_zone);
    bool is_availability_zone_Set() const;
    bool is_availability_zone_Valid() const;

    OAILifecycleState getLifecycleState() const;
    void setLifecycleState(const OAILifecycleState &lifecycle_state);
    bool is_lifecycle_state_Set() const;
    bool is_lifecycle_state_Valid() const;

    QString getHealthStatus() const;
    void setHealthStatus(const QString &health_status);
    bool is_health_status_Set() const;
    bool is_health_status_Valid() const;

    QString getLaunchConfigurationName() const;
    void setLaunchConfigurationName(const QString &launch_configuration_name);
    bool is_launch_configuration_name_Set() const;
    bool is_launch_configuration_name_Valid() const;

    OAIAutoScalingInstanceDetails_LaunchTemplate getLaunchTemplate() const;
    void setLaunchTemplate(const OAIAutoScalingInstanceDetails_LaunchTemplate &launch_template);
    bool is_launch_template_Set() const;
    bool is_launch_template_Valid() const;

    bool getProtectedFromScaleIn() const;
    void setProtectedFromScaleIn(const bool &protected_from_scale_in);
    bool is_protected_from_scale_in_Set() const;
    bool is_protected_from_scale_in_Valid() const;

    QString getWeightedCapacity() const;
    void setWeightedCapacity(const QString &weighted_capacity);
    bool is_weighted_capacity_Set() const;
    bool is_weighted_capacity_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    QString m_availability_zone;
    bool m_availability_zone_isSet;
    bool m_availability_zone_isValid;

    OAILifecycleState m_lifecycle_state;
    bool m_lifecycle_state_isSet;
    bool m_lifecycle_state_isValid;

    QString m_health_status;
    bool m_health_status_isSet;
    bool m_health_status_isValid;

    QString m_launch_configuration_name;
    bool m_launch_configuration_name_isSet;
    bool m_launch_configuration_name_isValid;

    OAIAutoScalingInstanceDetails_LaunchTemplate m_launch_template;
    bool m_launch_template_isSet;
    bool m_launch_template_isValid;

    bool m_protected_from_scale_in;
    bool m_protected_from_scale_in_isSet;
    bool m_protected_from_scale_in_isValid;

    QString m_weighted_capacity;
    bool m_weighted_capacity_isSet;
    bool m_weighted_capacity_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstance)

#endif // OAIInstance_H
