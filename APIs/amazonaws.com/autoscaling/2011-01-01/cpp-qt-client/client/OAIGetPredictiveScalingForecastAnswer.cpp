/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPredictiveScalingForecastAnswer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPredictiveScalingForecastAnswer::OAIGetPredictiveScalingForecastAnswer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPredictiveScalingForecastAnswer::OAIGetPredictiveScalingForecastAnswer() {
    this->initializeModel();
}

OAIGetPredictiveScalingForecastAnswer::~OAIGetPredictiveScalingForecastAnswer() {}

void OAIGetPredictiveScalingForecastAnswer::initializeModel() {

    m_load_forecast_isSet = false;
    m_load_forecast_isValid = false;

    m_capacity_forecast_isSet = false;
    m_capacity_forecast_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGetPredictiveScalingForecastAnswer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPredictiveScalingForecastAnswer::fromJsonObject(QJsonObject json) {

    m_load_forecast_isValid = ::OpenAPI::fromJsonValue(m_load_forecast, json[QString("LoadForecast")]);
    m_load_forecast_isSet = !json[QString("LoadForecast")].isNull() && m_load_forecast_isValid;

    m_capacity_forecast_isValid = ::OpenAPI::fromJsonValue(m_capacity_forecast, json[QString("CapacityForecast")]);
    m_capacity_forecast_isSet = !json[QString("CapacityForecast")].isNull() && m_capacity_forecast_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("UpdateTime")]);
    m_update_time_isSet = !json[QString("UpdateTime")].isNull() && m_update_time_isValid;
}

QString OAIGetPredictiveScalingForecastAnswer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPredictiveScalingForecastAnswer::asJsonObject() const {
    QJsonObject obj;
    if (m_load_forecast.isSet()) {
        obj.insert(QString("LoadForecast"), ::OpenAPI::toJsonValue(m_load_forecast));
    }
    if (m_capacity_forecast.isSet()) {
        obj.insert(QString("CapacityForecast"), ::OpenAPI::toJsonValue(m_capacity_forecast));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("UpdateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList OAIGetPredictiveScalingForecastAnswer::getLoadForecast() const {
    return m_load_forecast;
}
void OAIGetPredictiveScalingForecastAnswer::setLoadForecast(const QList &load_forecast) {
    m_load_forecast = load_forecast;
    m_load_forecast_isSet = true;
}

bool OAIGetPredictiveScalingForecastAnswer::is_load_forecast_Set() const{
    return m_load_forecast_isSet;
}

bool OAIGetPredictiveScalingForecastAnswer::is_load_forecast_Valid() const{
    return m_load_forecast_isValid;
}

OAIGetPredictiveScalingForecastAnswer_CapacityForecast OAIGetPredictiveScalingForecastAnswer::getCapacityForecast() const {
    return m_capacity_forecast;
}
void OAIGetPredictiveScalingForecastAnswer::setCapacityForecast(const OAIGetPredictiveScalingForecastAnswer_CapacityForecast &capacity_forecast) {
    m_capacity_forecast = capacity_forecast;
    m_capacity_forecast_isSet = true;
}

bool OAIGetPredictiveScalingForecastAnswer::is_capacity_forecast_Set() const{
    return m_capacity_forecast_isSet;
}

bool OAIGetPredictiveScalingForecastAnswer::is_capacity_forecast_Valid() const{
    return m_capacity_forecast_isValid;
}

QDateTime OAIGetPredictiveScalingForecastAnswer::getUpdateTime() const {
    return m_update_time;
}
void OAIGetPredictiveScalingForecastAnswer::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGetPredictiveScalingForecastAnswer::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGetPredictiveScalingForecastAnswer::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGetPredictiveScalingForecastAnswer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_load_forecast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_forecast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPredictiveScalingForecastAnswer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_load_forecast_isValid && m_capacity_forecast_isValid && m_update_time_isValid && true;
}

} // namespace OpenAPI
