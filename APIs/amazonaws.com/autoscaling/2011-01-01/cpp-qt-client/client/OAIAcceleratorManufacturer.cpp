/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcceleratorManufacturer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcceleratorManufacturer::OAIAcceleratorManufacturer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcceleratorManufacturer::OAIAcceleratorManufacturer() {
    this->initializeModel();
}

OAIAcceleratorManufacturer::~OAIAcceleratorManufacturer() {}

void OAIAcceleratorManufacturer::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAcceleratorManufacturer::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAcceleratorManufacturer::fromJson(QString jsonString) {
    
    if ( jsonString.compare("nvidia", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAcceleratorManufacturer::NVIDIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("amd", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAcceleratorManufacturer::AMD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("amazon-web-services", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAcceleratorManufacturer::AMAZON_WEB_SERVICES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("xilinx", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAcceleratorManufacturer::XILINX;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAcceleratorManufacturer::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAcceleratorManufacturer::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAcceleratorManufacturer::NVIDIA:
            val = "nvidia";
            break;
        case eOAIAcceleratorManufacturer::AMD:
            val = "amd";
            break;
        case eOAIAcceleratorManufacturer::AMAZON_WEB_SERVICES:
            val = "amazon-web-services";
            break;
        case eOAIAcceleratorManufacturer::XILINX:
            val = "xilinx";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAcceleratorManufacturer::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAcceleratorManufacturer::eOAIAcceleratorManufacturer OAIAcceleratorManufacturer::getValue() const {
    return m_value;
}

void OAIAcceleratorManufacturer::setValue(const OAIAcceleratorManufacturer::eOAIAcceleratorManufacturer& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAcceleratorManufacturer::isSet() const {
    
    return m_value_isSet;
}

bool OAIAcceleratorManufacturer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
