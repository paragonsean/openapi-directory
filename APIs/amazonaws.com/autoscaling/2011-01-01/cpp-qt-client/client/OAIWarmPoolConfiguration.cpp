/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarmPoolConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarmPoolConfiguration::OAIWarmPoolConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarmPoolConfiguration::OAIWarmPoolConfiguration() {
    this->initializeModel();
}

OAIWarmPoolConfiguration::~OAIWarmPoolConfiguration() {}

void OAIWarmPoolConfiguration::initializeModel() {

    m_max_group_prepared_capacity_isSet = false;
    m_max_group_prepared_capacity_isValid = false;

    m_min_size_isSet = false;
    m_min_size_isValid = false;

    m_pool_state_isSet = false;
    m_pool_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_instance_reuse_policy_isSet = false;
    m_instance_reuse_policy_isValid = false;
}

void OAIWarmPoolConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarmPoolConfiguration::fromJsonObject(QJsonObject json) {

    m_max_group_prepared_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_group_prepared_capacity, json[QString("MaxGroupPreparedCapacity")]);
    m_max_group_prepared_capacity_isSet = !json[QString("MaxGroupPreparedCapacity")].isNull() && m_max_group_prepared_capacity_isValid;

    m_min_size_isValid = ::OpenAPI::fromJsonValue(m_min_size, json[QString("MinSize")]);
    m_min_size_isSet = !json[QString("MinSize")].isNull() && m_min_size_isValid;

    m_pool_state_isValid = ::OpenAPI::fromJsonValue(m_pool_state, json[QString("PoolState")]);
    m_pool_state_isSet = !json[QString("PoolState")].isNull() && m_pool_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_instance_reuse_policy_isValid = ::OpenAPI::fromJsonValue(m_instance_reuse_policy, json[QString("InstanceReusePolicy")]);
    m_instance_reuse_policy_isSet = !json[QString("InstanceReusePolicy")].isNull() && m_instance_reuse_policy_isValid;
}

QString OAIWarmPoolConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarmPoolConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_max_group_prepared_capacity_isSet) {
        obj.insert(QString("MaxGroupPreparedCapacity"), ::OpenAPI::toJsonValue(m_max_group_prepared_capacity));
    }
    if (m_min_size_isSet) {
        obj.insert(QString("MinSize"), ::OpenAPI::toJsonValue(m_min_size));
    }
    if (m_pool_state.isSet()) {
        obj.insert(QString("PoolState"), ::OpenAPI::toJsonValue(m_pool_state));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_instance_reuse_policy.isSet()) {
        obj.insert(QString("InstanceReusePolicy"), ::OpenAPI::toJsonValue(m_instance_reuse_policy));
    }
    return obj;
}

qint32 OAIWarmPoolConfiguration::getMaxGroupPreparedCapacity() const {
    return m_max_group_prepared_capacity;
}
void OAIWarmPoolConfiguration::setMaxGroupPreparedCapacity(const qint32 &max_group_prepared_capacity) {
    m_max_group_prepared_capacity = max_group_prepared_capacity;
    m_max_group_prepared_capacity_isSet = true;
}

bool OAIWarmPoolConfiguration::is_max_group_prepared_capacity_Set() const{
    return m_max_group_prepared_capacity_isSet;
}

bool OAIWarmPoolConfiguration::is_max_group_prepared_capacity_Valid() const{
    return m_max_group_prepared_capacity_isValid;
}

qint32 OAIWarmPoolConfiguration::getMinSize() const {
    return m_min_size;
}
void OAIWarmPoolConfiguration::setMinSize(const qint32 &min_size) {
    m_min_size = min_size;
    m_min_size_isSet = true;
}

bool OAIWarmPoolConfiguration::is_min_size_Set() const{
    return m_min_size_isSet;
}

bool OAIWarmPoolConfiguration::is_min_size_Valid() const{
    return m_min_size_isValid;
}

OAIWarmPoolState OAIWarmPoolConfiguration::getPoolState() const {
    return m_pool_state;
}
void OAIWarmPoolConfiguration::setPoolState(const OAIWarmPoolState &pool_state) {
    m_pool_state = pool_state;
    m_pool_state_isSet = true;
}

bool OAIWarmPoolConfiguration::is_pool_state_Set() const{
    return m_pool_state_isSet;
}

bool OAIWarmPoolConfiguration::is_pool_state_Valid() const{
    return m_pool_state_isValid;
}

OAIWarmPoolStatus OAIWarmPoolConfiguration::getStatus() const {
    return m_status;
}
void OAIWarmPoolConfiguration::setStatus(const OAIWarmPoolStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWarmPoolConfiguration::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWarmPoolConfiguration::is_status_Valid() const{
    return m_status_isValid;
}

OAIWarmPoolConfiguration_InstanceReusePolicy OAIWarmPoolConfiguration::getInstanceReusePolicy() const {
    return m_instance_reuse_policy;
}
void OAIWarmPoolConfiguration::setInstanceReusePolicy(const OAIWarmPoolConfiguration_InstanceReusePolicy &instance_reuse_policy) {
    m_instance_reuse_policy = instance_reuse_policy;
    m_instance_reuse_policy_isSet = true;
}

bool OAIWarmPoolConfiguration::is_instance_reuse_policy_Set() const{
    return m_instance_reuse_policy_isSet;
}

bool OAIWarmPoolConfiguration::is_instance_reuse_policy_Valid() const{
    return m_instance_reuse_policy_isValid;
}

bool OAIWarmPoolConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_group_prepared_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_reuse_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarmPoolConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
