/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRollbackDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRollbackDetails::OAIRollbackDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRollbackDetails::OAIRollbackDetails() {
    this->initializeModel();
}

OAIRollbackDetails::~OAIRollbackDetails() {}

void OAIRollbackDetails::initializeModel() {

    m_rollback_reason_isSet = false;
    m_rollback_reason_isValid = false;

    m_rollback_start_time_isSet = false;
    m_rollback_start_time_isValid = false;

    m_percentage_complete_on_rollback_isSet = false;
    m_percentage_complete_on_rollback_isValid = false;

    m_instances_to_update_on_rollback_isSet = false;
    m_instances_to_update_on_rollback_isValid = false;

    m_progress_details_on_rollback_isSet = false;
    m_progress_details_on_rollback_isValid = false;
}

void OAIRollbackDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRollbackDetails::fromJsonObject(QJsonObject json) {

    m_rollback_reason_isValid = ::OpenAPI::fromJsonValue(m_rollback_reason, json[QString("RollbackReason")]);
    m_rollback_reason_isSet = !json[QString("RollbackReason")].isNull() && m_rollback_reason_isValid;

    m_rollback_start_time_isValid = ::OpenAPI::fromJsonValue(m_rollback_start_time, json[QString("RollbackStartTime")]);
    m_rollback_start_time_isSet = !json[QString("RollbackStartTime")].isNull() && m_rollback_start_time_isValid;

    m_percentage_complete_on_rollback_isValid = ::OpenAPI::fromJsonValue(m_percentage_complete_on_rollback, json[QString("PercentageCompleteOnRollback")]);
    m_percentage_complete_on_rollback_isSet = !json[QString("PercentageCompleteOnRollback")].isNull() && m_percentage_complete_on_rollback_isValid;

    m_instances_to_update_on_rollback_isValid = ::OpenAPI::fromJsonValue(m_instances_to_update_on_rollback, json[QString("InstancesToUpdateOnRollback")]);
    m_instances_to_update_on_rollback_isSet = !json[QString("InstancesToUpdateOnRollback")].isNull() && m_instances_to_update_on_rollback_isValid;

    m_progress_details_on_rollback_isValid = ::OpenAPI::fromJsonValue(m_progress_details_on_rollback, json[QString("ProgressDetailsOnRollback")]);
    m_progress_details_on_rollback_isSet = !json[QString("ProgressDetailsOnRollback")].isNull() && m_progress_details_on_rollback_isValid;
}

QString OAIRollbackDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRollbackDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_rollback_reason_isSet) {
        obj.insert(QString("RollbackReason"), ::OpenAPI::toJsonValue(m_rollback_reason));
    }
    if (m_rollback_start_time_isSet) {
        obj.insert(QString("RollbackStartTime"), ::OpenAPI::toJsonValue(m_rollback_start_time));
    }
    if (m_percentage_complete_on_rollback_isSet) {
        obj.insert(QString("PercentageCompleteOnRollback"), ::OpenAPI::toJsonValue(m_percentage_complete_on_rollback));
    }
    if (m_instances_to_update_on_rollback_isSet) {
        obj.insert(QString("InstancesToUpdateOnRollback"), ::OpenAPI::toJsonValue(m_instances_to_update_on_rollback));
    }
    if (m_progress_details_on_rollback.isSet()) {
        obj.insert(QString("ProgressDetailsOnRollback"), ::OpenAPI::toJsonValue(m_progress_details_on_rollback));
    }
    return obj;
}

QString OAIRollbackDetails::getRollbackReason() const {
    return m_rollback_reason;
}
void OAIRollbackDetails::setRollbackReason(const QString &rollback_reason) {
    m_rollback_reason = rollback_reason;
    m_rollback_reason_isSet = true;
}

bool OAIRollbackDetails::is_rollback_reason_Set() const{
    return m_rollback_reason_isSet;
}

bool OAIRollbackDetails::is_rollback_reason_Valid() const{
    return m_rollback_reason_isValid;
}

QDateTime OAIRollbackDetails::getRollbackStartTime() const {
    return m_rollback_start_time;
}
void OAIRollbackDetails::setRollbackStartTime(const QDateTime &rollback_start_time) {
    m_rollback_start_time = rollback_start_time;
    m_rollback_start_time_isSet = true;
}

bool OAIRollbackDetails::is_rollback_start_time_Set() const{
    return m_rollback_start_time_isSet;
}

bool OAIRollbackDetails::is_rollback_start_time_Valid() const{
    return m_rollback_start_time_isValid;
}

qint32 OAIRollbackDetails::getPercentageCompleteOnRollback() const {
    return m_percentage_complete_on_rollback;
}
void OAIRollbackDetails::setPercentageCompleteOnRollback(const qint32 &percentage_complete_on_rollback) {
    m_percentage_complete_on_rollback = percentage_complete_on_rollback;
    m_percentage_complete_on_rollback_isSet = true;
}

bool OAIRollbackDetails::is_percentage_complete_on_rollback_Set() const{
    return m_percentage_complete_on_rollback_isSet;
}

bool OAIRollbackDetails::is_percentage_complete_on_rollback_Valid() const{
    return m_percentage_complete_on_rollback_isValid;
}

qint32 OAIRollbackDetails::getInstancesToUpdateOnRollback() const {
    return m_instances_to_update_on_rollback;
}
void OAIRollbackDetails::setInstancesToUpdateOnRollback(const qint32 &instances_to_update_on_rollback) {
    m_instances_to_update_on_rollback = instances_to_update_on_rollback;
    m_instances_to_update_on_rollback_isSet = true;
}

bool OAIRollbackDetails::is_instances_to_update_on_rollback_Set() const{
    return m_instances_to_update_on_rollback_isSet;
}

bool OAIRollbackDetails::is_instances_to_update_on_rollback_Valid() const{
    return m_instances_to_update_on_rollback_isValid;
}

OAIRollbackDetails_ProgressDetailsOnRollback OAIRollbackDetails::getProgressDetailsOnRollback() const {
    return m_progress_details_on_rollback;
}
void OAIRollbackDetails::setProgressDetailsOnRollback(const OAIRollbackDetails_ProgressDetailsOnRollback &progress_details_on_rollback) {
    m_progress_details_on_rollback = progress_details_on_rollback;
    m_progress_details_on_rollback_isSet = true;
}

bool OAIRollbackDetails::is_progress_details_on_rollback_Set() const{
    return m_progress_details_on_rollback_isSet;
}

bool OAIRollbackDetails::is_progress_details_on_rollback_Valid() const{
    return m_progress_details_on_rollback_isValid;
}

bool OAIRollbackDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rollback_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_complete_on_rollback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances_to_update_on_rollback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_details_on_rollback.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRollbackDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
