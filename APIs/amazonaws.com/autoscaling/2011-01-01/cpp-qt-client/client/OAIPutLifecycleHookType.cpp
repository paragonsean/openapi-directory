/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutLifecycleHookType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutLifecycleHookType::OAIPutLifecycleHookType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutLifecycleHookType::OAIPutLifecycleHookType() {
    this->initializeModel();
}

OAIPutLifecycleHookType::~OAIPutLifecycleHookType() {}

void OAIPutLifecycleHookType::initializeModel() {

    m_lifecycle_hook_name_isSet = false;
    m_lifecycle_hook_name_isValid = false;

    m_auto_scaling_group_name_isSet = false;
    m_auto_scaling_group_name_isValid = false;

    m_lifecycle_transition_isSet = false;
    m_lifecycle_transition_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_notification_target_arn_isSet = false;
    m_notification_target_arn_isValid = false;

    m_notification_metadata_isSet = false;
    m_notification_metadata_isValid = false;

    m_heartbeat_timeout_isSet = false;
    m_heartbeat_timeout_isValid = false;

    m_default_result_isSet = false;
    m_default_result_isValid = false;
}

void OAIPutLifecycleHookType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutLifecycleHookType::fromJsonObject(QJsonObject json) {

    m_lifecycle_hook_name_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_hook_name, json[QString("LifecycleHookName")]);
    m_lifecycle_hook_name_isSet = !json[QString("LifecycleHookName")].isNull() && m_lifecycle_hook_name_isValid;

    m_auto_scaling_group_name_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_name, json[QString("AutoScalingGroupName")]);
    m_auto_scaling_group_name_isSet = !json[QString("AutoScalingGroupName")].isNull() && m_auto_scaling_group_name_isValid;

    m_lifecycle_transition_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_transition, json[QString("LifecycleTransition")]);
    m_lifecycle_transition_isSet = !json[QString("LifecycleTransition")].isNull() && m_lifecycle_transition_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_notification_target_arn_isValid = ::OpenAPI::fromJsonValue(m_notification_target_arn, json[QString("NotificationTargetARN")]);
    m_notification_target_arn_isSet = !json[QString("NotificationTargetARN")].isNull() && m_notification_target_arn_isValid;

    m_notification_metadata_isValid = ::OpenAPI::fromJsonValue(m_notification_metadata, json[QString("NotificationMetadata")]);
    m_notification_metadata_isSet = !json[QString("NotificationMetadata")].isNull() && m_notification_metadata_isValid;

    m_heartbeat_timeout_isValid = ::OpenAPI::fromJsonValue(m_heartbeat_timeout, json[QString("HeartbeatTimeout")]);
    m_heartbeat_timeout_isSet = !json[QString("HeartbeatTimeout")].isNull() && m_heartbeat_timeout_isValid;

    m_default_result_isValid = ::OpenAPI::fromJsonValue(m_default_result, json[QString("DefaultResult")]);
    m_default_result_isSet = !json[QString("DefaultResult")].isNull() && m_default_result_isValid;
}

QString OAIPutLifecycleHookType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutLifecycleHookType::asJsonObject() const {
    QJsonObject obj;
    if (m_lifecycle_hook_name_isSet) {
        obj.insert(QString("LifecycleHookName"), ::OpenAPI::toJsonValue(m_lifecycle_hook_name));
    }
    if (m_auto_scaling_group_name_isSet) {
        obj.insert(QString("AutoScalingGroupName"), ::OpenAPI::toJsonValue(m_auto_scaling_group_name));
    }
    if (m_lifecycle_transition_isSet) {
        obj.insert(QString("LifecycleTransition"), ::OpenAPI::toJsonValue(m_lifecycle_transition));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_notification_target_arn_isSet) {
        obj.insert(QString("NotificationTargetARN"), ::OpenAPI::toJsonValue(m_notification_target_arn));
    }
    if (m_notification_metadata_isSet) {
        obj.insert(QString("NotificationMetadata"), ::OpenAPI::toJsonValue(m_notification_metadata));
    }
    if (m_heartbeat_timeout_isSet) {
        obj.insert(QString("HeartbeatTimeout"), ::OpenAPI::toJsonValue(m_heartbeat_timeout));
    }
    if (m_default_result_isSet) {
        obj.insert(QString("DefaultResult"), ::OpenAPI::toJsonValue(m_default_result));
    }
    return obj;
}

QString OAIPutLifecycleHookType::getLifecycleHookName() const {
    return m_lifecycle_hook_name;
}
void OAIPutLifecycleHookType::setLifecycleHookName(const QString &lifecycle_hook_name) {
    m_lifecycle_hook_name = lifecycle_hook_name;
    m_lifecycle_hook_name_isSet = true;
}

bool OAIPutLifecycleHookType::is_lifecycle_hook_name_Set() const{
    return m_lifecycle_hook_name_isSet;
}

bool OAIPutLifecycleHookType::is_lifecycle_hook_name_Valid() const{
    return m_lifecycle_hook_name_isValid;
}

QString OAIPutLifecycleHookType::getAutoScalingGroupName() const {
    return m_auto_scaling_group_name;
}
void OAIPutLifecycleHookType::setAutoScalingGroupName(const QString &auto_scaling_group_name) {
    m_auto_scaling_group_name = auto_scaling_group_name;
    m_auto_scaling_group_name_isSet = true;
}

bool OAIPutLifecycleHookType::is_auto_scaling_group_name_Set() const{
    return m_auto_scaling_group_name_isSet;
}

bool OAIPutLifecycleHookType::is_auto_scaling_group_name_Valid() const{
    return m_auto_scaling_group_name_isValid;
}

QString OAIPutLifecycleHookType::getLifecycleTransition() const {
    return m_lifecycle_transition;
}
void OAIPutLifecycleHookType::setLifecycleTransition(const QString &lifecycle_transition) {
    m_lifecycle_transition = lifecycle_transition;
    m_lifecycle_transition_isSet = true;
}

bool OAIPutLifecycleHookType::is_lifecycle_transition_Set() const{
    return m_lifecycle_transition_isSet;
}

bool OAIPutLifecycleHookType::is_lifecycle_transition_Valid() const{
    return m_lifecycle_transition_isValid;
}

QString OAIPutLifecycleHookType::getRoleArn() const {
    return m_role_arn;
}
void OAIPutLifecycleHookType::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIPutLifecycleHookType::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIPutLifecycleHookType::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIPutLifecycleHookType::getNotificationTargetArn() const {
    return m_notification_target_arn;
}
void OAIPutLifecycleHookType::setNotificationTargetArn(const QString &notification_target_arn) {
    m_notification_target_arn = notification_target_arn;
    m_notification_target_arn_isSet = true;
}

bool OAIPutLifecycleHookType::is_notification_target_arn_Set() const{
    return m_notification_target_arn_isSet;
}

bool OAIPutLifecycleHookType::is_notification_target_arn_Valid() const{
    return m_notification_target_arn_isValid;
}

QString OAIPutLifecycleHookType::getNotificationMetadata() const {
    return m_notification_metadata;
}
void OAIPutLifecycleHookType::setNotificationMetadata(const QString &notification_metadata) {
    m_notification_metadata = notification_metadata;
    m_notification_metadata_isSet = true;
}

bool OAIPutLifecycleHookType::is_notification_metadata_Set() const{
    return m_notification_metadata_isSet;
}

bool OAIPutLifecycleHookType::is_notification_metadata_Valid() const{
    return m_notification_metadata_isValid;
}

qint32 OAIPutLifecycleHookType::getHeartbeatTimeout() const {
    return m_heartbeat_timeout;
}
void OAIPutLifecycleHookType::setHeartbeatTimeout(const qint32 &heartbeat_timeout) {
    m_heartbeat_timeout = heartbeat_timeout;
    m_heartbeat_timeout_isSet = true;
}

bool OAIPutLifecycleHookType::is_heartbeat_timeout_Set() const{
    return m_heartbeat_timeout_isSet;
}

bool OAIPutLifecycleHookType::is_heartbeat_timeout_Valid() const{
    return m_heartbeat_timeout_isValid;
}

QString OAIPutLifecycleHookType::getDefaultResult() const {
    return m_default_result;
}
void OAIPutLifecycleHookType::setDefaultResult(const QString &default_result) {
    m_default_result = default_result;
    m_default_result_isSet = true;
}

bool OAIPutLifecycleHookType::is_default_result_Set() const{
    return m_default_result_isSet;
}

bool OAIPutLifecycleHookType::is_default_result_Valid() const{
    return m_default_result_isValid;
}

bool OAIPutLifecycleHookType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lifecycle_hook_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_transition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heartbeat_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_result_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutLifecycleHookType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lifecycle_hook_name_isValid && m_auto_scaling_group_name_isValid && true;
}

} // namespace OpenAPI
