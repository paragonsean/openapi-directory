/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITag::OAITag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITag::OAITag() {
    this->initializeModel();
}

OAITag::~OAITag() {}

void OAITag::initializeModel() {

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_propagate_at_launch_isSet = false;
    m_propagate_at_launch_isValid = false;
}

void OAITag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITag::fromJsonObject(QJsonObject json) {

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_propagate_at_launch_isValid = ::OpenAPI::fromJsonValue(m_propagate_at_launch, json[QString("PropagateAtLaunch")]);
    m_propagate_at_launch_isSet = !json[QString("PropagateAtLaunch")].isNull() && m_propagate_at_launch_isValid;
}

QString OAITag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITag::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_propagate_at_launch_isSet) {
        obj.insert(QString("PropagateAtLaunch"), ::OpenAPI::toJsonValue(m_propagate_at_launch));
    }
    return obj;
}

QString OAITag::getResourceId() const {
    return m_resource_id;
}
void OAITag::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAITag::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAITag::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAITag::getResourceType() const {
    return m_resource_type;
}
void OAITag::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAITag::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAITag::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAITag::getKey() const {
    return m_key;
}
void OAITag::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITag::is_key_Set() const{
    return m_key_isSet;
}

bool OAITag::is_key_Valid() const{
    return m_key_isValid;
}

QString OAITag::getValue() const {
    return m_value;
}
void OAITag::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITag::is_value_Set() const{
    return m_value_isSet;
}

bool OAITag::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITag::getPropagateAtLaunch() const {
    return m_propagate_at_launch;
}
void OAITag::setPropagateAtLaunch(const bool &propagate_at_launch) {
    m_propagate_at_launch = propagate_at_launch;
    m_propagate_at_launch_isSet = true;
}

bool OAITag::is_propagate_at_launch_Set() const{
    return m_propagate_at_launch_isSet;
}

bool OAITag::is_propagate_at_launch_Valid() const{
    return m_propagate_at_launch_isValid;
}

bool OAITag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_propagate_at_launch_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITag::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && true;
}

} // namespace OpenAPI
