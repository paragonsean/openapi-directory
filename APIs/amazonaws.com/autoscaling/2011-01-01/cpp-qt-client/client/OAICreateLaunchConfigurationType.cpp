/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLaunchConfigurationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLaunchConfigurationType::OAICreateLaunchConfigurationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLaunchConfigurationType::OAICreateLaunchConfigurationType() {
    this->initializeModel();
}

OAICreateLaunchConfigurationType::~OAICreateLaunchConfigurationType() {}

void OAICreateLaunchConfigurationType::initializeModel() {

    m_launch_configuration_name_isSet = false;
    m_launch_configuration_name_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_classic_link_vpcid_isSet = false;
    m_classic_link_vpcid_isValid = false;

    m_classic_link_vpc_security_groups_isSet = false;
    m_classic_link_vpc_security_groups_isValid = false;

    m_user_data_isSet = false;
    m_user_data_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_kernel_id_isSet = false;
    m_kernel_id_isValid = false;

    m_ramdisk_id_isSet = false;
    m_ramdisk_id_isValid = false;

    m_block_device_mappings_isSet = false;
    m_block_device_mappings_isValid = false;

    m_instance_monitoring_isSet = false;
    m_instance_monitoring_isValid = false;

    m_spot_price_isSet = false;
    m_spot_price_isValid = false;

    m_iam_instance_profile_isSet = false;
    m_iam_instance_profile_isValid = false;

    m_ebs_optimized_isSet = false;
    m_ebs_optimized_isValid = false;

    m_associate_public_ip_address_isSet = false;
    m_associate_public_ip_address_isValid = false;

    m_placement_tenancy_isSet = false;
    m_placement_tenancy_isValid = false;

    m_metadata_options_isSet = false;
    m_metadata_options_isValid = false;
}

void OAICreateLaunchConfigurationType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLaunchConfigurationType::fromJsonObject(QJsonObject json) {

    m_launch_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_launch_configuration_name, json[QString("LaunchConfigurationName")]);
    m_launch_configuration_name_isSet = !json[QString("LaunchConfigurationName")].isNull() && m_launch_configuration_name_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("ImageId")]);
    m_image_id_isSet = !json[QString("ImageId")].isNull() && m_image_id_isValid;

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("KeyName")]);
    m_key_name_isSet = !json[QString("KeyName")].isNull() && m_key_name_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_classic_link_vpcid_isValid = ::OpenAPI::fromJsonValue(m_classic_link_vpcid, json[QString("ClassicLinkVPCId")]);
    m_classic_link_vpcid_isSet = !json[QString("ClassicLinkVPCId")].isNull() && m_classic_link_vpcid_isValid;

    m_classic_link_vpc_security_groups_isValid = ::OpenAPI::fromJsonValue(m_classic_link_vpc_security_groups, json[QString("ClassicLinkVPCSecurityGroups")]);
    m_classic_link_vpc_security_groups_isSet = !json[QString("ClassicLinkVPCSecurityGroups")].isNull() && m_classic_link_vpc_security_groups_isValid;

    m_user_data_isValid = ::OpenAPI::fromJsonValue(m_user_data, json[QString("UserData")]);
    m_user_data_isSet = !json[QString("UserData")].isNull() && m_user_data_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_kernel_id_isValid = ::OpenAPI::fromJsonValue(m_kernel_id, json[QString("KernelId")]);
    m_kernel_id_isSet = !json[QString("KernelId")].isNull() && m_kernel_id_isValid;

    m_ramdisk_id_isValid = ::OpenAPI::fromJsonValue(m_ramdisk_id, json[QString("RamdiskId")]);
    m_ramdisk_id_isSet = !json[QString("RamdiskId")].isNull() && m_ramdisk_id_isValid;

    m_block_device_mappings_isValid = ::OpenAPI::fromJsonValue(m_block_device_mappings, json[QString("BlockDeviceMappings")]);
    m_block_device_mappings_isSet = !json[QString("BlockDeviceMappings")].isNull() && m_block_device_mappings_isValid;

    m_instance_monitoring_isValid = ::OpenAPI::fromJsonValue(m_instance_monitoring, json[QString("InstanceMonitoring")]);
    m_instance_monitoring_isSet = !json[QString("InstanceMonitoring")].isNull() && m_instance_monitoring_isValid;

    m_spot_price_isValid = ::OpenAPI::fromJsonValue(m_spot_price, json[QString("SpotPrice")]);
    m_spot_price_isSet = !json[QString("SpotPrice")].isNull() && m_spot_price_isValid;

    m_iam_instance_profile_isValid = ::OpenAPI::fromJsonValue(m_iam_instance_profile, json[QString("IamInstanceProfile")]);
    m_iam_instance_profile_isSet = !json[QString("IamInstanceProfile")].isNull() && m_iam_instance_profile_isValid;

    m_ebs_optimized_isValid = ::OpenAPI::fromJsonValue(m_ebs_optimized, json[QString("EbsOptimized")]);
    m_ebs_optimized_isSet = !json[QString("EbsOptimized")].isNull() && m_ebs_optimized_isValid;

    m_associate_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_associate_public_ip_address, json[QString("AssociatePublicIpAddress")]);
    m_associate_public_ip_address_isSet = !json[QString("AssociatePublicIpAddress")].isNull() && m_associate_public_ip_address_isValid;

    m_placement_tenancy_isValid = ::OpenAPI::fromJsonValue(m_placement_tenancy, json[QString("PlacementTenancy")]);
    m_placement_tenancy_isSet = !json[QString("PlacementTenancy")].isNull() && m_placement_tenancy_isValid;

    m_metadata_options_isValid = ::OpenAPI::fromJsonValue(m_metadata_options, json[QString("MetadataOptions")]);
    m_metadata_options_isSet = !json[QString("MetadataOptions")].isNull() && m_metadata_options_isValid;
}

QString OAICreateLaunchConfigurationType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLaunchConfigurationType::asJsonObject() const {
    QJsonObject obj;
    if (m_launch_configuration_name_isSet) {
        obj.insert(QString("LaunchConfigurationName"), ::OpenAPI::toJsonValue(m_launch_configuration_name));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("ImageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_key_name_isSet) {
        obj.insert(QString("KeyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_classic_link_vpcid_isSet) {
        obj.insert(QString("ClassicLinkVPCId"), ::OpenAPI::toJsonValue(m_classic_link_vpcid));
    }
    if (m_classic_link_vpc_security_groups.isSet()) {
        obj.insert(QString("ClassicLinkVPCSecurityGroups"), ::OpenAPI::toJsonValue(m_classic_link_vpc_security_groups));
    }
    if (m_user_data_isSet) {
        obj.insert(QString("UserData"), ::OpenAPI::toJsonValue(m_user_data));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_kernel_id_isSet) {
        obj.insert(QString("KernelId"), ::OpenAPI::toJsonValue(m_kernel_id));
    }
    if (m_ramdisk_id_isSet) {
        obj.insert(QString("RamdiskId"), ::OpenAPI::toJsonValue(m_ramdisk_id));
    }
    if (m_block_device_mappings.isSet()) {
        obj.insert(QString("BlockDeviceMappings"), ::OpenAPI::toJsonValue(m_block_device_mappings));
    }
    if (m_instance_monitoring.isSet()) {
        obj.insert(QString("InstanceMonitoring"), ::OpenAPI::toJsonValue(m_instance_monitoring));
    }
    if (m_spot_price_isSet) {
        obj.insert(QString("SpotPrice"), ::OpenAPI::toJsonValue(m_spot_price));
    }
    if (m_iam_instance_profile_isSet) {
        obj.insert(QString("IamInstanceProfile"), ::OpenAPI::toJsonValue(m_iam_instance_profile));
    }
    if (m_ebs_optimized_isSet) {
        obj.insert(QString("EbsOptimized"), ::OpenAPI::toJsonValue(m_ebs_optimized));
    }
    if (m_associate_public_ip_address_isSet) {
        obj.insert(QString("AssociatePublicIpAddress"), ::OpenAPI::toJsonValue(m_associate_public_ip_address));
    }
    if (m_placement_tenancy_isSet) {
        obj.insert(QString("PlacementTenancy"), ::OpenAPI::toJsonValue(m_placement_tenancy));
    }
    if (m_metadata_options.isSet()) {
        obj.insert(QString("MetadataOptions"), ::OpenAPI::toJsonValue(m_metadata_options));
    }
    return obj;
}

QString OAICreateLaunchConfigurationType::getLaunchConfigurationName() const {
    return m_launch_configuration_name;
}
void OAICreateLaunchConfigurationType::setLaunchConfigurationName(const QString &launch_configuration_name) {
    m_launch_configuration_name = launch_configuration_name;
    m_launch_configuration_name_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_launch_configuration_name_Set() const{
    return m_launch_configuration_name_isSet;
}

bool OAICreateLaunchConfigurationType::is_launch_configuration_name_Valid() const{
    return m_launch_configuration_name_isValid;
}

QString OAICreateLaunchConfigurationType::getImageId() const {
    return m_image_id;
}
void OAICreateLaunchConfigurationType::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAICreateLaunchConfigurationType::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAICreateLaunchConfigurationType::getKeyName() const {
    return m_key_name;
}
void OAICreateLaunchConfigurationType::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAICreateLaunchConfigurationType::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QList OAICreateLaunchConfigurationType::getSecurityGroups() const {
    return m_security_groups;
}
void OAICreateLaunchConfigurationType::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAICreateLaunchConfigurationType::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

QString OAICreateLaunchConfigurationType::getClassicLinkVpcid() const {
    return m_classic_link_vpcid;
}
void OAICreateLaunchConfigurationType::setClassicLinkVpcid(const QString &classic_link_vpcid) {
    m_classic_link_vpcid = classic_link_vpcid;
    m_classic_link_vpcid_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_classic_link_vpcid_Set() const{
    return m_classic_link_vpcid_isSet;
}

bool OAICreateLaunchConfigurationType::is_classic_link_vpcid_Valid() const{
    return m_classic_link_vpcid_isValid;
}

QList OAICreateLaunchConfigurationType::getClassicLinkVpcSecurityGroups() const {
    return m_classic_link_vpc_security_groups;
}
void OAICreateLaunchConfigurationType::setClassicLinkVpcSecurityGroups(const QList &classic_link_vpc_security_groups) {
    m_classic_link_vpc_security_groups = classic_link_vpc_security_groups;
    m_classic_link_vpc_security_groups_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_classic_link_vpc_security_groups_Set() const{
    return m_classic_link_vpc_security_groups_isSet;
}

bool OAICreateLaunchConfigurationType::is_classic_link_vpc_security_groups_Valid() const{
    return m_classic_link_vpc_security_groups_isValid;
}

QString OAICreateLaunchConfigurationType::getUserData() const {
    return m_user_data;
}
void OAICreateLaunchConfigurationType::setUserData(const QString &user_data) {
    m_user_data = user_data;
    m_user_data_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_user_data_Set() const{
    return m_user_data_isSet;
}

bool OAICreateLaunchConfigurationType::is_user_data_Valid() const{
    return m_user_data_isValid;
}

QString OAICreateLaunchConfigurationType::getInstanceId() const {
    return m_instance_id;
}
void OAICreateLaunchConfigurationType::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAICreateLaunchConfigurationType::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAICreateLaunchConfigurationType::getInstanceType() const {
    return m_instance_type;
}
void OAICreateLaunchConfigurationType::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAICreateLaunchConfigurationType::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAICreateLaunchConfigurationType::getKernelId() const {
    return m_kernel_id;
}
void OAICreateLaunchConfigurationType::setKernelId(const QString &kernel_id) {
    m_kernel_id = kernel_id;
    m_kernel_id_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_kernel_id_Set() const{
    return m_kernel_id_isSet;
}

bool OAICreateLaunchConfigurationType::is_kernel_id_Valid() const{
    return m_kernel_id_isValid;
}

QString OAICreateLaunchConfigurationType::getRamdiskId() const {
    return m_ramdisk_id;
}
void OAICreateLaunchConfigurationType::setRamdiskId(const QString &ramdisk_id) {
    m_ramdisk_id = ramdisk_id;
    m_ramdisk_id_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_ramdisk_id_Set() const{
    return m_ramdisk_id_isSet;
}

bool OAICreateLaunchConfigurationType::is_ramdisk_id_Valid() const{
    return m_ramdisk_id_isValid;
}

QList OAICreateLaunchConfigurationType::getBlockDeviceMappings() const {
    return m_block_device_mappings;
}
void OAICreateLaunchConfigurationType::setBlockDeviceMappings(const QList &block_device_mappings) {
    m_block_device_mappings = block_device_mappings;
    m_block_device_mappings_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_block_device_mappings_Set() const{
    return m_block_device_mappings_isSet;
}

bool OAICreateLaunchConfigurationType::is_block_device_mappings_Valid() const{
    return m_block_device_mappings_isValid;
}

OAICreateLaunchConfigurationType_InstanceMonitoring OAICreateLaunchConfigurationType::getInstanceMonitoring() const {
    return m_instance_monitoring;
}
void OAICreateLaunchConfigurationType::setInstanceMonitoring(const OAICreateLaunchConfigurationType_InstanceMonitoring &instance_monitoring) {
    m_instance_monitoring = instance_monitoring;
    m_instance_monitoring_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_instance_monitoring_Set() const{
    return m_instance_monitoring_isSet;
}

bool OAICreateLaunchConfigurationType::is_instance_monitoring_Valid() const{
    return m_instance_monitoring_isValid;
}

QString OAICreateLaunchConfigurationType::getSpotPrice() const {
    return m_spot_price;
}
void OAICreateLaunchConfigurationType::setSpotPrice(const QString &spot_price) {
    m_spot_price = spot_price;
    m_spot_price_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_spot_price_Set() const{
    return m_spot_price_isSet;
}

bool OAICreateLaunchConfigurationType::is_spot_price_Valid() const{
    return m_spot_price_isValid;
}

QString OAICreateLaunchConfigurationType::getIamInstanceProfile() const {
    return m_iam_instance_profile;
}
void OAICreateLaunchConfigurationType::setIamInstanceProfile(const QString &iam_instance_profile) {
    m_iam_instance_profile = iam_instance_profile;
    m_iam_instance_profile_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_iam_instance_profile_Set() const{
    return m_iam_instance_profile_isSet;
}

bool OAICreateLaunchConfigurationType::is_iam_instance_profile_Valid() const{
    return m_iam_instance_profile_isValid;
}

bool OAICreateLaunchConfigurationType::getEbsOptimized() const {
    return m_ebs_optimized;
}
void OAICreateLaunchConfigurationType::setEbsOptimized(const bool &ebs_optimized) {
    m_ebs_optimized = ebs_optimized;
    m_ebs_optimized_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_ebs_optimized_Set() const{
    return m_ebs_optimized_isSet;
}

bool OAICreateLaunchConfigurationType::is_ebs_optimized_Valid() const{
    return m_ebs_optimized_isValid;
}

bool OAICreateLaunchConfigurationType::getAssociatePublicIpAddress() const {
    return m_associate_public_ip_address;
}
void OAICreateLaunchConfigurationType::setAssociatePublicIpAddress(const bool &associate_public_ip_address) {
    m_associate_public_ip_address = associate_public_ip_address;
    m_associate_public_ip_address_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_associate_public_ip_address_Set() const{
    return m_associate_public_ip_address_isSet;
}

bool OAICreateLaunchConfigurationType::is_associate_public_ip_address_Valid() const{
    return m_associate_public_ip_address_isValid;
}

QString OAICreateLaunchConfigurationType::getPlacementTenancy() const {
    return m_placement_tenancy;
}
void OAICreateLaunchConfigurationType::setPlacementTenancy(const QString &placement_tenancy) {
    m_placement_tenancy = placement_tenancy;
    m_placement_tenancy_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_placement_tenancy_Set() const{
    return m_placement_tenancy_isSet;
}

bool OAICreateLaunchConfigurationType::is_placement_tenancy_Valid() const{
    return m_placement_tenancy_isValid;
}

OAICreateLaunchConfigurationType_MetadataOptions OAICreateLaunchConfigurationType::getMetadataOptions() const {
    return m_metadata_options;
}
void OAICreateLaunchConfigurationType::setMetadataOptions(const OAICreateLaunchConfigurationType_MetadataOptions &metadata_options) {
    m_metadata_options = metadata_options;
    m_metadata_options_isSet = true;
}

bool OAICreateLaunchConfigurationType::is_metadata_options_Set() const{
    return m_metadata_options_isSet;
}

bool OAICreateLaunchConfigurationType::is_metadata_options_Valid() const{
    return m_metadata_options_isValid;
}

bool OAICreateLaunchConfigurationType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_launch_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_classic_link_vpcid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classic_link_vpc_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kernel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ramdisk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_device_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spot_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_instance_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebs_optimized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associate_public_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_tenancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLaunchConfigurationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_launch_configuration_name_isValid && true;
}

} // namespace OpenAPI
