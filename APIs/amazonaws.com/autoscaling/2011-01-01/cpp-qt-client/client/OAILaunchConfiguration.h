/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILaunchConfiguration.h
 *
 * Describes a launch configuration.
 */

#ifndef OAILaunchConfiguration_H
#define OAILaunchConfiguration_H

#include <QJsonObject>

#include "OAICreateLaunchConfigurationType_MetadataOptions.h"
#include "OAILaunchConfiguration_InstanceMonitoring.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILaunchConfiguration_InstanceMonitoring;
class OAICreateLaunchConfigurationType_MetadataOptions;

class OAILaunchConfiguration : public OAIObject {
public:
    OAILaunchConfiguration();
    OAILaunchConfiguration(QString json);
    ~OAILaunchConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLaunchConfigurationName() const;
    void setLaunchConfigurationName(const QString &launch_configuration_name);
    bool is_launch_configuration_name_Set() const;
    bool is_launch_configuration_name_Valid() const;

    QString getLaunchConfigurationArn() const;
    void setLaunchConfigurationArn(const QString &launch_configuration_arn);
    bool is_launch_configuration_arn_Set() const;
    bool is_launch_configuration_arn_Valid() const;

    QString getImageId() const;
    void setImageId(const QString &image_id);
    bool is_image_id_Set() const;
    bool is_image_id_Valid() const;

    QString getKeyName() const;
    void setKeyName(const QString &key_name);
    bool is_key_name_Set() const;
    bool is_key_name_Valid() const;

    QList getSecurityGroups() const;
    void setSecurityGroups(const QList &security_groups);
    bool is_security_groups_Set() const;
    bool is_security_groups_Valid() const;

    QString getClassicLinkVpcid() const;
    void setClassicLinkVpcid(const QString &classic_link_vpcid);
    bool is_classic_link_vpcid_Set() const;
    bool is_classic_link_vpcid_Valid() const;

    QList getClassicLinkVpcSecurityGroups() const;
    void setClassicLinkVpcSecurityGroups(const QList &classic_link_vpc_security_groups);
    bool is_classic_link_vpc_security_groups_Set() const;
    bool is_classic_link_vpc_security_groups_Valid() const;

    QString getUserData() const;
    void setUserData(const QString &user_data);
    bool is_user_data_Set() const;
    bool is_user_data_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    QString getKernelId() const;
    void setKernelId(const QString &kernel_id);
    bool is_kernel_id_Set() const;
    bool is_kernel_id_Valid() const;

    QString getRamdiskId() const;
    void setRamdiskId(const QString &ramdisk_id);
    bool is_ramdisk_id_Set() const;
    bool is_ramdisk_id_Valid() const;

    QList getBlockDeviceMappings() const;
    void setBlockDeviceMappings(const QList &block_device_mappings);
    bool is_block_device_mappings_Set() const;
    bool is_block_device_mappings_Valid() const;

    OAILaunchConfiguration_InstanceMonitoring getInstanceMonitoring() const;
    void setInstanceMonitoring(const OAILaunchConfiguration_InstanceMonitoring &instance_monitoring);
    bool is_instance_monitoring_Set() const;
    bool is_instance_monitoring_Valid() const;

    QString getSpotPrice() const;
    void setSpotPrice(const QString &spot_price);
    bool is_spot_price_Set() const;
    bool is_spot_price_Valid() const;

    QString getIamInstanceProfile() const;
    void setIamInstanceProfile(const QString &iam_instance_profile);
    bool is_iam_instance_profile_Set() const;
    bool is_iam_instance_profile_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    bool getEbsOptimized() const;
    void setEbsOptimized(const bool &ebs_optimized);
    bool is_ebs_optimized_Set() const;
    bool is_ebs_optimized_Valid() const;

    bool getAssociatePublicIpAddress() const;
    void setAssociatePublicIpAddress(const bool &associate_public_ip_address);
    bool is_associate_public_ip_address_Set() const;
    bool is_associate_public_ip_address_Valid() const;

    QString getPlacementTenancy() const;
    void setPlacementTenancy(const QString &placement_tenancy);
    bool is_placement_tenancy_Set() const;
    bool is_placement_tenancy_Valid() const;

    OAICreateLaunchConfigurationType_MetadataOptions getMetadataOptions() const;
    void setMetadataOptions(const OAICreateLaunchConfigurationType_MetadataOptions &metadata_options);
    bool is_metadata_options_Set() const;
    bool is_metadata_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_launch_configuration_name;
    bool m_launch_configuration_name_isSet;
    bool m_launch_configuration_name_isValid;

    QString m_launch_configuration_arn;
    bool m_launch_configuration_arn_isSet;
    bool m_launch_configuration_arn_isValid;

    QString m_image_id;
    bool m_image_id_isSet;
    bool m_image_id_isValid;

    QString m_key_name;
    bool m_key_name_isSet;
    bool m_key_name_isValid;

    QList m_security_groups;
    bool m_security_groups_isSet;
    bool m_security_groups_isValid;

    QString m_classic_link_vpcid;
    bool m_classic_link_vpcid_isSet;
    bool m_classic_link_vpcid_isValid;

    QList m_classic_link_vpc_security_groups;
    bool m_classic_link_vpc_security_groups_isSet;
    bool m_classic_link_vpc_security_groups_isValid;

    QString m_user_data;
    bool m_user_data_isSet;
    bool m_user_data_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    QString m_kernel_id;
    bool m_kernel_id_isSet;
    bool m_kernel_id_isValid;

    QString m_ramdisk_id;
    bool m_ramdisk_id_isSet;
    bool m_ramdisk_id_isValid;

    QList m_block_device_mappings;
    bool m_block_device_mappings_isSet;
    bool m_block_device_mappings_isValid;

    OAILaunchConfiguration_InstanceMonitoring m_instance_monitoring;
    bool m_instance_monitoring_isSet;
    bool m_instance_monitoring_isValid;

    QString m_spot_price;
    bool m_spot_price_isSet;
    bool m_spot_price_isValid;

    QString m_iam_instance_profile;
    bool m_iam_instance_profile_isSet;
    bool m_iam_instance_profile_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    bool m_ebs_optimized;
    bool m_ebs_optimized_isSet;
    bool m_ebs_optimized_isValid;

    bool m_associate_public_ip_address;
    bool m_associate_public_ip_address_isSet;
    bool m_associate_public_ip_address_isValid;

    QString m_placement_tenancy;
    bool m_placement_tenancy_isSet;
    bool m_placement_tenancy_isValid;

    OAICreateLaunchConfigurationType_MetadataOptions m_metadata_options;
    bool m_metadata_options_isSet;
    bool m_metadata_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILaunchConfiguration)

#endif // OAILaunchConfiguration_H
