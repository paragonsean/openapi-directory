/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoScalingGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoScalingGroup::OAIAutoScalingGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoScalingGroup::OAIAutoScalingGroup() {
    this->initializeModel();
}

OAIAutoScalingGroup::~OAIAutoScalingGroup() {}

void OAIAutoScalingGroup::initializeModel() {

    m_auto_scaling_group_name_isSet = false;
    m_auto_scaling_group_name_isValid = false;

    m_auto_scaling_group_arn_isSet = false;
    m_auto_scaling_group_arn_isValid = false;

    m_launch_configuration_name_isSet = false;
    m_launch_configuration_name_isValid = false;

    m_launch_template_isSet = false;
    m_launch_template_isValid = false;

    m_mixed_instances_policy_isSet = false;
    m_mixed_instances_policy_isValid = false;

    m_min_size_isSet = false;
    m_min_size_isValid = false;

    m_max_size_isSet = false;
    m_max_size_isValid = false;

    m_desired_capacity_isSet = false;
    m_desired_capacity_isValid = false;

    m_predicted_capacity_isSet = false;
    m_predicted_capacity_isValid = false;

    m_default_cooldown_isSet = false;
    m_default_cooldown_isValid = false;

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_load_balancer_names_isSet = false;
    m_load_balancer_names_isValid = false;

    m_target_group_arns_isSet = false;
    m_target_group_arns_isValid = false;

    m_health_check_type_isSet = false;
    m_health_check_type_isValid = false;

    m_health_check_grace_period_isSet = false;
    m_health_check_grace_period_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_suspended_processes_isSet = false;
    m_suspended_processes_isValid = false;

    m_placement_group_isSet = false;
    m_placement_group_isValid = false;

    m_vpc_zone_identifier_isSet = false;
    m_vpc_zone_identifier_isValid = false;

    m_enabled_metrics_isSet = false;
    m_enabled_metrics_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_termination_policies_isSet = false;
    m_termination_policies_isValid = false;

    m_new_instances_protected_from_scale_in_isSet = false;
    m_new_instances_protected_from_scale_in_isValid = false;

    m_service_linked_role_arn_isSet = false;
    m_service_linked_role_arn_isValid = false;

    m_max_instance_lifetime_isSet = false;
    m_max_instance_lifetime_isValid = false;

    m_capacity_rebalance_isSet = false;
    m_capacity_rebalance_isValid = false;

    m_warm_pool_configuration_isSet = false;
    m_warm_pool_configuration_isValid = false;

    m_warm_pool_size_isSet = false;
    m_warm_pool_size_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_desired_capacity_type_isSet = false;
    m_desired_capacity_type_isValid = false;

    m_default_instance_warmup_isSet = false;
    m_default_instance_warmup_isValid = false;

    m_traffic_sources_isSet = false;
    m_traffic_sources_isValid = false;
}

void OAIAutoScalingGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoScalingGroup::fromJsonObject(QJsonObject json) {

    m_auto_scaling_group_name_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_name, json[QString("AutoScalingGroupName")]);
    m_auto_scaling_group_name_isSet = !json[QString("AutoScalingGroupName")].isNull() && m_auto_scaling_group_name_isValid;

    m_auto_scaling_group_arn_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_arn, json[QString("AutoScalingGroupARN")]);
    m_auto_scaling_group_arn_isSet = !json[QString("AutoScalingGroupARN")].isNull() && m_auto_scaling_group_arn_isValid;

    m_launch_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_launch_configuration_name, json[QString("LaunchConfigurationName")]);
    m_launch_configuration_name_isSet = !json[QString("LaunchConfigurationName")].isNull() && m_launch_configuration_name_isValid;

    m_launch_template_isValid = ::OpenAPI::fromJsonValue(m_launch_template, json[QString("LaunchTemplate")]);
    m_launch_template_isSet = !json[QString("LaunchTemplate")].isNull() && m_launch_template_isValid;

    m_mixed_instances_policy_isValid = ::OpenAPI::fromJsonValue(m_mixed_instances_policy, json[QString("MixedInstancesPolicy")]);
    m_mixed_instances_policy_isSet = !json[QString("MixedInstancesPolicy")].isNull() && m_mixed_instances_policy_isValid;

    m_min_size_isValid = ::OpenAPI::fromJsonValue(m_min_size, json[QString("MinSize")]);
    m_min_size_isSet = !json[QString("MinSize")].isNull() && m_min_size_isValid;

    m_max_size_isValid = ::OpenAPI::fromJsonValue(m_max_size, json[QString("MaxSize")]);
    m_max_size_isSet = !json[QString("MaxSize")].isNull() && m_max_size_isValid;

    m_desired_capacity_isValid = ::OpenAPI::fromJsonValue(m_desired_capacity, json[QString("DesiredCapacity")]);
    m_desired_capacity_isSet = !json[QString("DesiredCapacity")].isNull() && m_desired_capacity_isValid;

    m_predicted_capacity_isValid = ::OpenAPI::fromJsonValue(m_predicted_capacity, json[QString("PredictedCapacity")]);
    m_predicted_capacity_isSet = !json[QString("PredictedCapacity")].isNull() && m_predicted_capacity_isValid;

    m_default_cooldown_isValid = ::OpenAPI::fromJsonValue(m_default_cooldown, json[QString("DefaultCooldown")]);
    m_default_cooldown_isSet = !json[QString("DefaultCooldown")].isNull() && m_default_cooldown_isValid;

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_load_balancer_names_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_names, json[QString("LoadBalancerNames")]);
    m_load_balancer_names_isSet = !json[QString("LoadBalancerNames")].isNull() && m_load_balancer_names_isValid;

    m_target_group_arns_isValid = ::OpenAPI::fromJsonValue(m_target_group_arns, json[QString("TargetGroupARNs")]);
    m_target_group_arns_isSet = !json[QString("TargetGroupARNs")].isNull() && m_target_group_arns_isValid;

    m_health_check_type_isValid = ::OpenAPI::fromJsonValue(m_health_check_type, json[QString("HealthCheckType")]);
    m_health_check_type_isSet = !json[QString("HealthCheckType")].isNull() && m_health_check_type_isValid;

    m_health_check_grace_period_isValid = ::OpenAPI::fromJsonValue(m_health_check_grace_period, json[QString("HealthCheckGracePeriod")]);
    m_health_check_grace_period_isSet = !json[QString("HealthCheckGracePeriod")].isNull() && m_health_check_grace_period_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("Instances")]);
    m_instances_isSet = !json[QString("Instances")].isNull() && m_instances_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_suspended_processes_isValid = ::OpenAPI::fromJsonValue(m_suspended_processes, json[QString("SuspendedProcesses")]);
    m_suspended_processes_isSet = !json[QString("SuspendedProcesses")].isNull() && m_suspended_processes_isValid;

    m_placement_group_isValid = ::OpenAPI::fromJsonValue(m_placement_group, json[QString("PlacementGroup")]);
    m_placement_group_isSet = !json[QString("PlacementGroup")].isNull() && m_placement_group_isValid;

    m_vpc_zone_identifier_isValid = ::OpenAPI::fromJsonValue(m_vpc_zone_identifier, json[QString("VPCZoneIdentifier")]);
    m_vpc_zone_identifier_isSet = !json[QString("VPCZoneIdentifier")].isNull() && m_vpc_zone_identifier_isValid;

    m_enabled_metrics_isValid = ::OpenAPI::fromJsonValue(m_enabled_metrics, json[QString("EnabledMetrics")]);
    m_enabled_metrics_isSet = !json[QString("EnabledMetrics")].isNull() && m_enabled_metrics_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_termination_policies_isValid = ::OpenAPI::fromJsonValue(m_termination_policies, json[QString("TerminationPolicies")]);
    m_termination_policies_isSet = !json[QString("TerminationPolicies")].isNull() && m_termination_policies_isValid;

    m_new_instances_protected_from_scale_in_isValid = ::OpenAPI::fromJsonValue(m_new_instances_protected_from_scale_in, json[QString("NewInstancesProtectedFromScaleIn")]);
    m_new_instances_protected_from_scale_in_isSet = !json[QString("NewInstancesProtectedFromScaleIn")].isNull() && m_new_instances_protected_from_scale_in_isValid;

    m_service_linked_role_arn_isValid = ::OpenAPI::fromJsonValue(m_service_linked_role_arn, json[QString("ServiceLinkedRoleARN")]);
    m_service_linked_role_arn_isSet = !json[QString("ServiceLinkedRoleARN")].isNull() && m_service_linked_role_arn_isValid;

    m_max_instance_lifetime_isValid = ::OpenAPI::fromJsonValue(m_max_instance_lifetime, json[QString("MaxInstanceLifetime")]);
    m_max_instance_lifetime_isSet = !json[QString("MaxInstanceLifetime")].isNull() && m_max_instance_lifetime_isValid;

    m_capacity_rebalance_isValid = ::OpenAPI::fromJsonValue(m_capacity_rebalance, json[QString("CapacityRebalance")]);
    m_capacity_rebalance_isSet = !json[QString("CapacityRebalance")].isNull() && m_capacity_rebalance_isValid;

    m_warm_pool_configuration_isValid = ::OpenAPI::fromJsonValue(m_warm_pool_configuration, json[QString("WarmPoolConfiguration")]);
    m_warm_pool_configuration_isSet = !json[QString("WarmPoolConfiguration")].isNull() && m_warm_pool_configuration_isValid;

    m_warm_pool_size_isValid = ::OpenAPI::fromJsonValue(m_warm_pool_size, json[QString("WarmPoolSize")]);
    m_warm_pool_size_isSet = !json[QString("WarmPoolSize")].isNull() && m_warm_pool_size_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_desired_capacity_type_isValid = ::OpenAPI::fromJsonValue(m_desired_capacity_type, json[QString("DesiredCapacityType")]);
    m_desired_capacity_type_isSet = !json[QString("DesiredCapacityType")].isNull() && m_desired_capacity_type_isValid;

    m_default_instance_warmup_isValid = ::OpenAPI::fromJsonValue(m_default_instance_warmup, json[QString("DefaultInstanceWarmup")]);
    m_default_instance_warmup_isSet = !json[QString("DefaultInstanceWarmup")].isNull() && m_default_instance_warmup_isValid;

    m_traffic_sources_isValid = ::OpenAPI::fromJsonValue(m_traffic_sources, json[QString("TrafficSources")]);
    m_traffic_sources_isSet = !json[QString("TrafficSources")].isNull() && m_traffic_sources_isValid;
}

QString OAIAutoScalingGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoScalingGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_scaling_group_name_isSet) {
        obj.insert(QString("AutoScalingGroupName"), ::OpenAPI::toJsonValue(m_auto_scaling_group_name));
    }
    if (m_auto_scaling_group_arn_isSet) {
        obj.insert(QString("AutoScalingGroupARN"), ::OpenAPI::toJsonValue(m_auto_scaling_group_arn));
    }
    if (m_launch_configuration_name_isSet) {
        obj.insert(QString("LaunchConfigurationName"), ::OpenAPI::toJsonValue(m_launch_configuration_name));
    }
    if (m_launch_template.isSet()) {
        obj.insert(QString("LaunchTemplate"), ::OpenAPI::toJsonValue(m_launch_template));
    }
    if (m_mixed_instances_policy.isSet()) {
        obj.insert(QString("MixedInstancesPolicy"), ::OpenAPI::toJsonValue(m_mixed_instances_policy));
    }
    if (m_min_size_isSet) {
        obj.insert(QString("MinSize"), ::OpenAPI::toJsonValue(m_min_size));
    }
    if (m_max_size_isSet) {
        obj.insert(QString("MaxSize"), ::OpenAPI::toJsonValue(m_max_size));
    }
    if (m_desired_capacity_isSet) {
        obj.insert(QString("DesiredCapacity"), ::OpenAPI::toJsonValue(m_desired_capacity));
    }
    if (m_predicted_capacity_isSet) {
        obj.insert(QString("PredictedCapacity"), ::OpenAPI::toJsonValue(m_predicted_capacity));
    }
    if (m_default_cooldown_isSet) {
        obj.insert(QString("DefaultCooldown"), ::OpenAPI::toJsonValue(m_default_cooldown));
    }
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_load_balancer_names.isSet()) {
        obj.insert(QString("LoadBalancerNames"), ::OpenAPI::toJsonValue(m_load_balancer_names));
    }
    if (m_target_group_arns.isSet()) {
        obj.insert(QString("TargetGroupARNs"), ::OpenAPI::toJsonValue(m_target_group_arns));
    }
    if (m_health_check_type_isSet) {
        obj.insert(QString("HealthCheckType"), ::OpenAPI::toJsonValue(m_health_check_type));
    }
    if (m_health_check_grace_period_isSet) {
        obj.insert(QString("HealthCheckGracePeriod"), ::OpenAPI::toJsonValue(m_health_check_grace_period));
    }
    if (m_instances.isSet()) {
        obj.insert(QString("Instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_suspended_processes.isSet()) {
        obj.insert(QString("SuspendedProcesses"), ::OpenAPI::toJsonValue(m_suspended_processes));
    }
    if (m_placement_group_isSet) {
        obj.insert(QString("PlacementGroup"), ::OpenAPI::toJsonValue(m_placement_group));
    }
    if (m_vpc_zone_identifier_isSet) {
        obj.insert(QString("VPCZoneIdentifier"), ::OpenAPI::toJsonValue(m_vpc_zone_identifier));
    }
    if (m_enabled_metrics.isSet()) {
        obj.insert(QString("EnabledMetrics"), ::OpenAPI::toJsonValue(m_enabled_metrics));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_termination_policies.isSet()) {
        obj.insert(QString("TerminationPolicies"), ::OpenAPI::toJsonValue(m_termination_policies));
    }
    if (m_new_instances_protected_from_scale_in_isSet) {
        obj.insert(QString("NewInstancesProtectedFromScaleIn"), ::OpenAPI::toJsonValue(m_new_instances_protected_from_scale_in));
    }
    if (m_service_linked_role_arn_isSet) {
        obj.insert(QString("ServiceLinkedRoleARN"), ::OpenAPI::toJsonValue(m_service_linked_role_arn));
    }
    if (m_max_instance_lifetime_isSet) {
        obj.insert(QString("MaxInstanceLifetime"), ::OpenAPI::toJsonValue(m_max_instance_lifetime));
    }
    if (m_capacity_rebalance_isSet) {
        obj.insert(QString("CapacityRebalance"), ::OpenAPI::toJsonValue(m_capacity_rebalance));
    }
    if (m_warm_pool_configuration.isSet()) {
        obj.insert(QString("WarmPoolConfiguration"), ::OpenAPI::toJsonValue(m_warm_pool_configuration));
    }
    if (m_warm_pool_size_isSet) {
        obj.insert(QString("WarmPoolSize"), ::OpenAPI::toJsonValue(m_warm_pool_size));
    }
    if (m_context_isSet) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_desired_capacity_type_isSet) {
        obj.insert(QString("DesiredCapacityType"), ::OpenAPI::toJsonValue(m_desired_capacity_type));
    }
    if (m_default_instance_warmup_isSet) {
        obj.insert(QString("DefaultInstanceWarmup"), ::OpenAPI::toJsonValue(m_default_instance_warmup));
    }
    if (m_traffic_sources.isSet()) {
        obj.insert(QString("TrafficSources"), ::OpenAPI::toJsonValue(m_traffic_sources));
    }
    return obj;
}

QString OAIAutoScalingGroup::getAutoScalingGroupName() const {
    return m_auto_scaling_group_name;
}
void OAIAutoScalingGroup::setAutoScalingGroupName(const QString &auto_scaling_group_name) {
    m_auto_scaling_group_name = auto_scaling_group_name;
    m_auto_scaling_group_name_isSet = true;
}

bool OAIAutoScalingGroup::is_auto_scaling_group_name_Set() const{
    return m_auto_scaling_group_name_isSet;
}

bool OAIAutoScalingGroup::is_auto_scaling_group_name_Valid() const{
    return m_auto_scaling_group_name_isValid;
}

QString OAIAutoScalingGroup::getAutoScalingGroupArn() const {
    return m_auto_scaling_group_arn;
}
void OAIAutoScalingGroup::setAutoScalingGroupArn(const QString &auto_scaling_group_arn) {
    m_auto_scaling_group_arn = auto_scaling_group_arn;
    m_auto_scaling_group_arn_isSet = true;
}

bool OAIAutoScalingGroup::is_auto_scaling_group_arn_Set() const{
    return m_auto_scaling_group_arn_isSet;
}

bool OAIAutoScalingGroup::is_auto_scaling_group_arn_Valid() const{
    return m_auto_scaling_group_arn_isValid;
}

QString OAIAutoScalingGroup::getLaunchConfigurationName() const {
    return m_launch_configuration_name;
}
void OAIAutoScalingGroup::setLaunchConfigurationName(const QString &launch_configuration_name) {
    m_launch_configuration_name = launch_configuration_name;
    m_launch_configuration_name_isSet = true;
}

bool OAIAutoScalingGroup::is_launch_configuration_name_Set() const{
    return m_launch_configuration_name_isSet;
}

bool OAIAutoScalingGroup::is_launch_configuration_name_Valid() const{
    return m_launch_configuration_name_isValid;
}

OAIAutoScalingGroup_LaunchTemplate OAIAutoScalingGroup::getLaunchTemplate() const {
    return m_launch_template;
}
void OAIAutoScalingGroup::setLaunchTemplate(const OAIAutoScalingGroup_LaunchTemplate &launch_template) {
    m_launch_template = launch_template;
    m_launch_template_isSet = true;
}

bool OAIAutoScalingGroup::is_launch_template_Set() const{
    return m_launch_template_isSet;
}

bool OAIAutoScalingGroup::is_launch_template_Valid() const{
    return m_launch_template_isValid;
}

OAIAutoScalingGroup_MixedInstancesPolicy OAIAutoScalingGroup::getMixedInstancesPolicy() const {
    return m_mixed_instances_policy;
}
void OAIAutoScalingGroup::setMixedInstancesPolicy(const OAIAutoScalingGroup_MixedInstancesPolicy &mixed_instances_policy) {
    m_mixed_instances_policy = mixed_instances_policy;
    m_mixed_instances_policy_isSet = true;
}

bool OAIAutoScalingGroup::is_mixed_instances_policy_Set() const{
    return m_mixed_instances_policy_isSet;
}

bool OAIAutoScalingGroup::is_mixed_instances_policy_Valid() const{
    return m_mixed_instances_policy_isValid;
}

qint32 OAIAutoScalingGroup::getMinSize() const {
    return m_min_size;
}
void OAIAutoScalingGroup::setMinSize(const qint32 &min_size) {
    m_min_size = min_size;
    m_min_size_isSet = true;
}

bool OAIAutoScalingGroup::is_min_size_Set() const{
    return m_min_size_isSet;
}

bool OAIAutoScalingGroup::is_min_size_Valid() const{
    return m_min_size_isValid;
}

qint32 OAIAutoScalingGroup::getMaxSize() const {
    return m_max_size;
}
void OAIAutoScalingGroup::setMaxSize(const qint32 &max_size) {
    m_max_size = max_size;
    m_max_size_isSet = true;
}

bool OAIAutoScalingGroup::is_max_size_Set() const{
    return m_max_size_isSet;
}

bool OAIAutoScalingGroup::is_max_size_Valid() const{
    return m_max_size_isValid;
}

qint32 OAIAutoScalingGroup::getDesiredCapacity() const {
    return m_desired_capacity;
}
void OAIAutoScalingGroup::setDesiredCapacity(const qint32 &desired_capacity) {
    m_desired_capacity = desired_capacity;
    m_desired_capacity_isSet = true;
}

bool OAIAutoScalingGroup::is_desired_capacity_Set() const{
    return m_desired_capacity_isSet;
}

bool OAIAutoScalingGroup::is_desired_capacity_Valid() const{
    return m_desired_capacity_isValid;
}

qint32 OAIAutoScalingGroup::getPredictedCapacity() const {
    return m_predicted_capacity;
}
void OAIAutoScalingGroup::setPredictedCapacity(const qint32 &predicted_capacity) {
    m_predicted_capacity = predicted_capacity;
    m_predicted_capacity_isSet = true;
}

bool OAIAutoScalingGroup::is_predicted_capacity_Set() const{
    return m_predicted_capacity_isSet;
}

bool OAIAutoScalingGroup::is_predicted_capacity_Valid() const{
    return m_predicted_capacity_isValid;
}

qint32 OAIAutoScalingGroup::getDefaultCooldown() const {
    return m_default_cooldown;
}
void OAIAutoScalingGroup::setDefaultCooldown(const qint32 &default_cooldown) {
    m_default_cooldown = default_cooldown;
    m_default_cooldown_isSet = true;
}

bool OAIAutoScalingGroup::is_default_cooldown_Set() const{
    return m_default_cooldown_isSet;
}

bool OAIAutoScalingGroup::is_default_cooldown_Valid() const{
    return m_default_cooldown_isValid;
}

QList OAIAutoScalingGroup::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAIAutoScalingGroup::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAIAutoScalingGroup::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAIAutoScalingGroup::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

QList OAIAutoScalingGroup::getLoadBalancerNames() const {
    return m_load_balancer_names;
}
void OAIAutoScalingGroup::setLoadBalancerNames(const QList &load_balancer_names) {
    m_load_balancer_names = load_balancer_names;
    m_load_balancer_names_isSet = true;
}

bool OAIAutoScalingGroup::is_load_balancer_names_Set() const{
    return m_load_balancer_names_isSet;
}

bool OAIAutoScalingGroup::is_load_balancer_names_Valid() const{
    return m_load_balancer_names_isValid;
}

QList OAIAutoScalingGroup::getTargetGroupArns() const {
    return m_target_group_arns;
}
void OAIAutoScalingGroup::setTargetGroupArns(const QList &target_group_arns) {
    m_target_group_arns = target_group_arns;
    m_target_group_arns_isSet = true;
}

bool OAIAutoScalingGroup::is_target_group_arns_Set() const{
    return m_target_group_arns_isSet;
}

bool OAIAutoScalingGroup::is_target_group_arns_Valid() const{
    return m_target_group_arns_isValid;
}

QString OAIAutoScalingGroup::getHealthCheckType() const {
    return m_health_check_type;
}
void OAIAutoScalingGroup::setHealthCheckType(const QString &health_check_type) {
    m_health_check_type = health_check_type;
    m_health_check_type_isSet = true;
}

bool OAIAutoScalingGroup::is_health_check_type_Set() const{
    return m_health_check_type_isSet;
}

bool OAIAutoScalingGroup::is_health_check_type_Valid() const{
    return m_health_check_type_isValid;
}

qint32 OAIAutoScalingGroup::getHealthCheckGracePeriod() const {
    return m_health_check_grace_period;
}
void OAIAutoScalingGroup::setHealthCheckGracePeriod(const qint32 &health_check_grace_period) {
    m_health_check_grace_period = health_check_grace_period;
    m_health_check_grace_period_isSet = true;
}

bool OAIAutoScalingGroup::is_health_check_grace_period_Set() const{
    return m_health_check_grace_period_isSet;
}

bool OAIAutoScalingGroup::is_health_check_grace_period_Valid() const{
    return m_health_check_grace_period_isValid;
}

QList OAIAutoScalingGroup::getInstances() const {
    return m_instances;
}
void OAIAutoScalingGroup::setInstances(const QList &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIAutoScalingGroup::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIAutoScalingGroup::is_instances_Valid() const{
    return m_instances_isValid;
}

QDateTime OAIAutoScalingGroup::getCreatedTime() const {
    return m_created_time;
}
void OAIAutoScalingGroup::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIAutoScalingGroup::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIAutoScalingGroup::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QList OAIAutoScalingGroup::getSuspendedProcesses() const {
    return m_suspended_processes;
}
void OAIAutoScalingGroup::setSuspendedProcesses(const QList &suspended_processes) {
    m_suspended_processes = suspended_processes;
    m_suspended_processes_isSet = true;
}

bool OAIAutoScalingGroup::is_suspended_processes_Set() const{
    return m_suspended_processes_isSet;
}

bool OAIAutoScalingGroup::is_suspended_processes_Valid() const{
    return m_suspended_processes_isValid;
}

QString OAIAutoScalingGroup::getPlacementGroup() const {
    return m_placement_group;
}
void OAIAutoScalingGroup::setPlacementGroup(const QString &placement_group) {
    m_placement_group = placement_group;
    m_placement_group_isSet = true;
}

bool OAIAutoScalingGroup::is_placement_group_Set() const{
    return m_placement_group_isSet;
}

bool OAIAutoScalingGroup::is_placement_group_Valid() const{
    return m_placement_group_isValid;
}

QString OAIAutoScalingGroup::getVpcZoneIdentifier() const {
    return m_vpc_zone_identifier;
}
void OAIAutoScalingGroup::setVpcZoneIdentifier(const QString &vpc_zone_identifier) {
    m_vpc_zone_identifier = vpc_zone_identifier;
    m_vpc_zone_identifier_isSet = true;
}

bool OAIAutoScalingGroup::is_vpc_zone_identifier_Set() const{
    return m_vpc_zone_identifier_isSet;
}

bool OAIAutoScalingGroup::is_vpc_zone_identifier_Valid() const{
    return m_vpc_zone_identifier_isValid;
}

QList OAIAutoScalingGroup::getEnabledMetrics() const {
    return m_enabled_metrics;
}
void OAIAutoScalingGroup::setEnabledMetrics(const QList &enabled_metrics) {
    m_enabled_metrics = enabled_metrics;
    m_enabled_metrics_isSet = true;
}

bool OAIAutoScalingGroup::is_enabled_metrics_Set() const{
    return m_enabled_metrics_isSet;
}

bool OAIAutoScalingGroup::is_enabled_metrics_Valid() const{
    return m_enabled_metrics_isValid;
}

QString OAIAutoScalingGroup::getStatus() const {
    return m_status;
}
void OAIAutoScalingGroup::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAutoScalingGroup::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAutoScalingGroup::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIAutoScalingGroup::getTags() const {
    return m_tags;
}
void OAIAutoScalingGroup::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAutoScalingGroup::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAutoScalingGroup::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIAutoScalingGroup::getTerminationPolicies() const {
    return m_termination_policies;
}
void OAIAutoScalingGroup::setTerminationPolicies(const QList &termination_policies) {
    m_termination_policies = termination_policies;
    m_termination_policies_isSet = true;
}

bool OAIAutoScalingGroup::is_termination_policies_Set() const{
    return m_termination_policies_isSet;
}

bool OAIAutoScalingGroup::is_termination_policies_Valid() const{
    return m_termination_policies_isValid;
}

bool OAIAutoScalingGroup::getNewInstancesProtectedFromScaleIn() const {
    return m_new_instances_protected_from_scale_in;
}
void OAIAutoScalingGroup::setNewInstancesProtectedFromScaleIn(const bool &new_instances_protected_from_scale_in) {
    m_new_instances_protected_from_scale_in = new_instances_protected_from_scale_in;
    m_new_instances_protected_from_scale_in_isSet = true;
}

bool OAIAutoScalingGroup::is_new_instances_protected_from_scale_in_Set() const{
    return m_new_instances_protected_from_scale_in_isSet;
}

bool OAIAutoScalingGroup::is_new_instances_protected_from_scale_in_Valid() const{
    return m_new_instances_protected_from_scale_in_isValid;
}

QString OAIAutoScalingGroup::getServiceLinkedRoleArn() const {
    return m_service_linked_role_arn;
}
void OAIAutoScalingGroup::setServiceLinkedRoleArn(const QString &service_linked_role_arn) {
    m_service_linked_role_arn = service_linked_role_arn;
    m_service_linked_role_arn_isSet = true;
}

bool OAIAutoScalingGroup::is_service_linked_role_arn_Set() const{
    return m_service_linked_role_arn_isSet;
}

bool OAIAutoScalingGroup::is_service_linked_role_arn_Valid() const{
    return m_service_linked_role_arn_isValid;
}

qint32 OAIAutoScalingGroup::getMaxInstanceLifetime() const {
    return m_max_instance_lifetime;
}
void OAIAutoScalingGroup::setMaxInstanceLifetime(const qint32 &max_instance_lifetime) {
    m_max_instance_lifetime = max_instance_lifetime;
    m_max_instance_lifetime_isSet = true;
}

bool OAIAutoScalingGroup::is_max_instance_lifetime_Set() const{
    return m_max_instance_lifetime_isSet;
}

bool OAIAutoScalingGroup::is_max_instance_lifetime_Valid() const{
    return m_max_instance_lifetime_isValid;
}

bool OAIAutoScalingGroup::getCapacityRebalance() const {
    return m_capacity_rebalance;
}
void OAIAutoScalingGroup::setCapacityRebalance(const bool &capacity_rebalance) {
    m_capacity_rebalance = capacity_rebalance;
    m_capacity_rebalance_isSet = true;
}

bool OAIAutoScalingGroup::is_capacity_rebalance_Set() const{
    return m_capacity_rebalance_isSet;
}

bool OAIAutoScalingGroup::is_capacity_rebalance_Valid() const{
    return m_capacity_rebalance_isValid;
}

OAIAutoScalingGroup_WarmPoolConfiguration OAIAutoScalingGroup::getWarmPoolConfiguration() const {
    return m_warm_pool_configuration;
}
void OAIAutoScalingGroup::setWarmPoolConfiguration(const OAIAutoScalingGroup_WarmPoolConfiguration &warm_pool_configuration) {
    m_warm_pool_configuration = warm_pool_configuration;
    m_warm_pool_configuration_isSet = true;
}

bool OAIAutoScalingGroup::is_warm_pool_configuration_Set() const{
    return m_warm_pool_configuration_isSet;
}

bool OAIAutoScalingGroup::is_warm_pool_configuration_Valid() const{
    return m_warm_pool_configuration_isValid;
}

qint32 OAIAutoScalingGroup::getWarmPoolSize() const {
    return m_warm_pool_size;
}
void OAIAutoScalingGroup::setWarmPoolSize(const qint32 &warm_pool_size) {
    m_warm_pool_size = warm_pool_size;
    m_warm_pool_size_isSet = true;
}

bool OAIAutoScalingGroup::is_warm_pool_size_Set() const{
    return m_warm_pool_size_isSet;
}

bool OAIAutoScalingGroup::is_warm_pool_size_Valid() const{
    return m_warm_pool_size_isValid;
}

QString OAIAutoScalingGroup::getContext() const {
    return m_context;
}
void OAIAutoScalingGroup::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIAutoScalingGroup::is_context_Set() const{
    return m_context_isSet;
}

bool OAIAutoScalingGroup::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIAutoScalingGroup::getDesiredCapacityType() const {
    return m_desired_capacity_type;
}
void OAIAutoScalingGroup::setDesiredCapacityType(const QString &desired_capacity_type) {
    m_desired_capacity_type = desired_capacity_type;
    m_desired_capacity_type_isSet = true;
}

bool OAIAutoScalingGroup::is_desired_capacity_type_Set() const{
    return m_desired_capacity_type_isSet;
}

bool OAIAutoScalingGroup::is_desired_capacity_type_Valid() const{
    return m_desired_capacity_type_isValid;
}

qint32 OAIAutoScalingGroup::getDefaultInstanceWarmup() const {
    return m_default_instance_warmup;
}
void OAIAutoScalingGroup::setDefaultInstanceWarmup(const qint32 &default_instance_warmup) {
    m_default_instance_warmup = default_instance_warmup;
    m_default_instance_warmup_isSet = true;
}

bool OAIAutoScalingGroup::is_default_instance_warmup_Set() const{
    return m_default_instance_warmup_isSet;
}

bool OAIAutoScalingGroup::is_default_instance_warmup_Valid() const{
    return m_default_instance_warmup_isValid;
}

QList OAIAutoScalingGroup::getTrafficSources() const {
    return m_traffic_sources;
}
void OAIAutoScalingGroup::setTrafficSources(const QList &traffic_sources) {
    m_traffic_sources = traffic_sources;
    m_traffic_sources_isSet = true;
}

bool OAIAutoScalingGroup::is_traffic_sources_Set() const{
    return m_traffic_sources_isSet;
}

bool OAIAutoScalingGroup::is_traffic_sources_Valid() const{
    return m_traffic_sources_isValid;
}

bool OAIAutoScalingGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_scaling_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mixed_instances_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicted_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_cooldown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_group_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_grace_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_processes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_zone_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_instances_protected_from_scale_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_linked_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_instance_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_rebalance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warm_pool_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warm_pool_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_capacity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_instance_warmup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoScalingGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_scaling_group_name_isValid && m_min_size_isValid && m_max_size_isValid && m_desired_capacity_isValid && m_default_cooldown_isValid && m_availability_zones_isValid && m_health_check_type_isValid && m_created_time_isValid && true;
}

} // namespace OpenAPI
