/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScheduledUpdateGroupActionRequest.h
 *
 * Describes information used for one or more scheduled scaling action updates in a &lt;a&gt;BatchPutScheduledUpdateGroupAction&lt;/a&gt; operation.
 */

#ifndef OAIScheduledUpdateGroupActionRequest_H
#define OAIScheduledUpdateGroupActionRequest_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScheduledUpdateGroupActionRequest : public OAIObject {
public:
    OAIScheduledUpdateGroupActionRequest();
    OAIScheduledUpdateGroupActionRequest(QString json);
    ~OAIScheduledUpdateGroupActionRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getScheduledActionName() const;
    void setScheduledActionName(const QString &scheduled_action_name);
    bool is_scheduled_action_name_Set() const;
    bool is_scheduled_action_name_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getRecurrence() const;
    void setRecurrence(const QString &recurrence);
    bool is_recurrence_Set() const;
    bool is_recurrence_Valid() const;

    qint32 getMinSize() const;
    void setMinSize(const qint32 &min_size);
    bool is_min_size_Set() const;
    bool is_min_size_Valid() const;

    qint32 getMaxSize() const;
    void setMaxSize(const qint32 &max_size);
    bool is_max_size_Set() const;
    bool is_max_size_Valid() const;

    qint32 getDesiredCapacity() const;
    void setDesiredCapacity(const qint32 &desired_capacity);
    bool is_desired_capacity_Set() const;
    bool is_desired_capacity_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_scheduled_action_name;
    bool m_scheduled_action_name_isSet;
    bool m_scheduled_action_name_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_recurrence;
    bool m_recurrence_isSet;
    bool m_recurrence_isValid;

    qint32 m_min_size;
    bool m_min_size_isSet;
    bool m_min_size_isValid;

    qint32 m_max_size;
    bool m_max_size_isSet;
    bool m_max_size_isValid;

    qint32 m_desired_capacity;
    bool m_desired_capacity_isSet;
    bool m_desired_capacity_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScheduledUpdateGroupActionRequest)

#endif // OAIScheduledUpdateGroupActionRequest_H
