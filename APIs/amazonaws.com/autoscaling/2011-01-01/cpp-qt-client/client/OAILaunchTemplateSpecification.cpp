/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaunchTemplateSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaunchTemplateSpecification::OAILaunchTemplateSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaunchTemplateSpecification::OAILaunchTemplateSpecification() {
    this->initializeModel();
}

OAILaunchTemplateSpecification::~OAILaunchTemplateSpecification() {}

void OAILaunchTemplateSpecification::initializeModel() {

    m_launch_template_id_isSet = false;
    m_launch_template_id_isValid = false;

    m_launch_template_name_isSet = false;
    m_launch_template_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAILaunchTemplateSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILaunchTemplateSpecification::fromJsonObject(QJsonObject json) {

    m_launch_template_id_isValid = ::OpenAPI::fromJsonValue(m_launch_template_id, json[QString("LaunchTemplateId")]);
    m_launch_template_id_isSet = !json[QString("LaunchTemplateId")].isNull() && m_launch_template_id_isValid;

    m_launch_template_name_isValid = ::OpenAPI::fromJsonValue(m_launch_template_name, json[QString("LaunchTemplateName")]);
    m_launch_template_name_isSet = !json[QString("LaunchTemplateName")].isNull() && m_launch_template_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAILaunchTemplateSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILaunchTemplateSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_launch_template_id_isSet) {
        obj.insert(QString("LaunchTemplateId"), ::OpenAPI::toJsonValue(m_launch_template_id));
    }
    if (m_launch_template_name_isSet) {
        obj.insert(QString("LaunchTemplateName"), ::OpenAPI::toJsonValue(m_launch_template_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAILaunchTemplateSpecification::getLaunchTemplateId() const {
    return m_launch_template_id;
}
void OAILaunchTemplateSpecification::setLaunchTemplateId(const QString &launch_template_id) {
    m_launch_template_id = launch_template_id;
    m_launch_template_id_isSet = true;
}

bool OAILaunchTemplateSpecification::is_launch_template_id_Set() const{
    return m_launch_template_id_isSet;
}

bool OAILaunchTemplateSpecification::is_launch_template_id_Valid() const{
    return m_launch_template_id_isValid;
}

QString OAILaunchTemplateSpecification::getLaunchTemplateName() const {
    return m_launch_template_name;
}
void OAILaunchTemplateSpecification::setLaunchTemplateName(const QString &launch_template_name) {
    m_launch_template_name = launch_template_name;
    m_launch_template_name_isSet = true;
}

bool OAILaunchTemplateSpecification::is_launch_template_name_Set() const{
    return m_launch_template_name_isSet;
}

bool OAILaunchTemplateSpecification::is_launch_template_name_Valid() const{
    return m_launch_template_name_isValid;
}

QString OAILaunchTemplateSpecification::getVersion() const {
    return m_version;
}
void OAILaunchTemplateSpecification::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAILaunchTemplateSpecification::is_version_Set() const{
    return m_version_isSet;
}

bool OAILaunchTemplateSpecification::is_version_Valid() const{
    return m_version_isValid;
}

bool OAILaunchTemplateSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_launch_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILaunchTemplateSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
