/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricDataQuery_MetricStat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricDataQuery_MetricStat::OAIMetricDataQuery_MetricStat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricDataQuery_MetricStat::OAIMetricDataQuery_MetricStat() {
    this->initializeModel();
}

OAIMetricDataQuery_MetricStat::~OAIMetricDataQuery_MetricStat() {}

void OAIMetricDataQuery_MetricStat::initializeModel() {

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_stat_isSet = false;
    m_stat_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIMetricDataQuery_MetricStat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricDataQuery_MetricStat::fromJsonObject(QJsonObject json) {

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("Metric")]);
    m_metric_isSet = !json[QString("Metric")].isNull() && m_metric_isValid;

    m_stat_isValid = ::OpenAPI::fromJsonValue(m_stat, json[QString("Stat")]);
    m_stat_isSet = !json[QString("Stat")].isNull() && m_stat_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;
}

QString OAIMetricDataQuery_MetricStat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricDataQuery_MetricStat::asJsonObject() const {
    QJsonObject obj;
    if (m_metric.isSet()) {
        obj.insert(QString("Metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_stat_isSet) {
        obj.insert(QString("Stat"), ::OpenAPI::toJsonValue(m_stat));
    }
    if (m_unit_isSet) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

OAIMetricStat_Metric OAIMetricDataQuery_MetricStat::getMetric() const {
    return m_metric;
}
void OAIMetricDataQuery_MetricStat::setMetric(const OAIMetricStat_Metric &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIMetricDataQuery_MetricStat::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIMetricDataQuery_MetricStat::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAIMetricDataQuery_MetricStat::getStat() const {
    return m_stat;
}
void OAIMetricDataQuery_MetricStat::setStat(const QString &stat) {
    m_stat = stat;
    m_stat_isSet = true;
}

bool OAIMetricDataQuery_MetricStat::is_stat_Set() const{
    return m_stat_isSet;
}

bool OAIMetricDataQuery_MetricStat::is_stat_Valid() const{
    return m_stat_isValid;
}

QString OAIMetricDataQuery_MetricStat::getUnit() const {
    return m_unit;
}
void OAIMetricDataQuery_MetricStat::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMetricDataQuery_MetricStat::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMetricDataQuery_MetricStat::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIMetricDataQuery_MetricStat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricDataQuery_MetricStat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_isValid && m_stat_isValid && true;
}

} // namespace OpenAPI
