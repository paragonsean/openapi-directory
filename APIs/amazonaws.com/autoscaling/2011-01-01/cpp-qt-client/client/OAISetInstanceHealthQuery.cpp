/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetInstanceHealthQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetInstanceHealthQuery::OAISetInstanceHealthQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetInstanceHealthQuery::OAISetInstanceHealthQuery() {
    this->initializeModel();
}

OAISetInstanceHealthQuery::~OAISetInstanceHealthQuery() {}

void OAISetInstanceHealthQuery::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_should_respect_grace_period_isSet = false;
    m_should_respect_grace_period_isValid = false;
}

void OAISetInstanceHealthQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetInstanceHealthQuery::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("HealthStatus")]);
    m_health_status_isSet = !json[QString("HealthStatus")].isNull() && m_health_status_isValid;

    m_should_respect_grace_period_isValid = ::OpenAPI::fromJsonValue(m_should_respect_grace_period, json[QString("ShouldRespectGracePeriod")]);
    m_should_respect_grace_period_isSet = !json[QString("ShouldRespectGracePeriod")].isNull() && m_should_respect_grace_period_isValid;
}

QString OAISetInstanceHealthQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetInstanceHealthQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_health_status_isSet) {
        obj.insert(QString("HealthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_should_respect_grace_period_isSet) {
        obj.insert(QString("ShouldRespectGracePeriod"), ::OpenAPI::toJsonValue(m_should_respect_grace_period));
    }
    return obj;
}

QString OAISetInstanceHealthQuery::getInstanceId() const {
    return m_instance_id;
}
void OAISetInstanceHealthQuery::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAISetInstanceHealthQuery::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAISetInstanceHealthQuery::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAISetInstanceHealthQuery::getHealthStatus() const {
    return m_health_status;
}
void OAISetInstanceHealthQuery::setHealthStatus(const QString &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAISetInstanceHealthQuery::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAISetInstanceHealthQuery::is_health_status_Valid() const{
    return m_health_status_isValid;
}

bool OAISetInstanceHealthQuery::getShouldRespectGracePeriod() const {
    return m_should_respect_grace_period;
}
void OAISetInstanceHealthQuery::setShouldRespectGracePeriod(const bool &should_respect_grace_period) {
    m_should_respect_grace_period = should_respect_grace_period;
    m_should_respect_grace_period_isSet = true;
}

bool OAISetInstanceHealthQuery::is_should_respect_grace_period_Set() const{
    return m_should_respect_grace_period_isSet;
}

bool OAISetInstanceHealthQuery::is_should_respect_grace_period_Valid() const{
    return m_should_respect_grace_period_isValid;
}

bool OAISetInstanceHealthQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_respect_grace_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetInstanceHealthQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_health_status_isValid && true;
}

} // namespace OpenAPI
