/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceRefresh.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceRefresh::OAIInstanceRefresh(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceRefresh::OAIInstanceRefresh() {
    this->initializeModel();
}

OAIInstanceRefresh::~OAIInstanceRefresh() {}

void OAIInstanceRefresh::initializeModel() {

    m_instance_refresh_id_isSet = false;
    m_instance_refresh_id_isValid = false;

    m_auto_scaling_group_name_isSet = false;
    m_auto_scaling_group_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_percentage_complete_isSet = false;
    m_percentage_complete_isValid = false;

    m_instances_to_update_isSet = false;
    m_instances_to_update_isValid = false;

    m_progress_details_isSet = false;
    m_progress_details_isValid = false;

    m_preferences_isSet = false;
    m_preferences_isValid = false;

    m_desired_configuration_isSet = false;
    m_desired_configuration_isValid = false;

    m_rollback_details_isSet = false;
    m_rollback_details_isValid = false;
}

void OAIInstanceRefresh::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceRefresh::fromJsonObject(QJsonObject json) {

    m_instance_refresh_id_isValid = ::OpenAPI::fromJsonValue(m_instance_refresh_id, json[QString("InstanceRefreshId")]);
    m_instance_refresh_id_isSet = !json[QString("InstanceRefreshId")].isNull() && m_instance_refresh_id_isValid;

    m_auto_scaling_group_name_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_name, json[QString("AutoScalingGroupName")]);
    m_auto_scaling_group_name_isSet = !json[QString("AutoScalingGroupName")].isNull() && m_auto_scaling_group_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_percentage_complete_isValid = ::OpenAPI::fromJsonValue(m_percentage_complete, json[QString("PercentageComplete")]);
    m_percentage_complete_isSet = !json[QString("PercentageComplete")].isNull() && m_percentage_complete_isValid;

    m_instances_to_update_isValid = ::OpenAPI::fromJsonValue(m_instances_to_update, json[QString("InstancesToUpdate")]);
    m_instances_to_update_isSet = !json[QString("InstancesToUpdate")].isNull() && m_instances_to_update_isValid;

    m_progress_details_isValid = ::OpenAPI::fromJsonValue(m_progress_details, json[QString("ProgressDetails")]);
    m_progress_details_isSet = !json[QString("ProgressDetails")].isNull() && m_progress_details_isValid;

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("Preferences")]);
    m_preferences_isSet = !json[QString("Preferences")].isNull() && m_preferences_isValid;

    m_desired_configuration_isValid = ::OpenAPI::fromJsonValue(m_desired_configuration, json[QString("DesiredConfiguration")]);
    m_desired_configuration_isSet = !json[QString("DesiredConfiguration")].isNull() && m_desired_configuration_isValid;

    m_rollback_details_isValid = ::OpenAPI::fromJsonValue(m_rollback_details, json[QString("RollbackDetails")]);
    m_rollback_details_isSet = !json[QString("RollbackDetails")].isNull() && m_rollback_details_isValid;
}

QString OAIInstanceRefresh::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceRefresh::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_refresh_id_isSet) {
        obj.insert(QString("InstanceRefreshId"), ::OpenAPI::toJsonValue(m_instance_refresh_id));
    }
    if (m_auto_scaling_group_name_isSet) {
        obj.insert(QString("AutoScalingGroupName"), ::OpenAPI::toJsonValue(m_auto_scaling_group_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_percentage_complete_isSet) {
        obj.insert(QString("PercentageComplete"), ::OpenAPI::toJsonValue(m_percentage_complete));
    }
    if (m_instances_to_update_isSet) {
        obj.insert(QString("InstancesToUpdate"), ::OpenAPI::toJsonValue(m_instances_to_update));
    }
    if (m_progress_details.isSet()) {
        obj.insert(QString("ProgressDetails"), ::OpenAPI::toJsonValue(m_progress_details));
    }
    if (m_preferences.isSet()) {
        obj.insert(QString("Preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    if (m_desired_configuration.isSet()) {
        obj.insert(QString("DesiredConfiguration"), ::OpenAPI::toJsonValue(m_desired_configuration));
    }
    if (m_rollback_details.isSet()) {
        obj.insert(QString("RollbackDetails"), ::OpenAPI::toJsonValue(m_rollback_details));
    }
    return obj;
}

QString OAIInstanceRefresh::getInstanceRefreshId() const {
    return m_instance_refresh_id;
}
void OAIInstanceRefresh::setInstanceRefreshId(const QString &instance_refresh_id) {
    m_instance_refresh_id = instance_refresh_id;
    m_instance_refresh_id_isSet = true;
}

bool OAIInstanceRefresh::is_instance_refresh_id_Set() const{
    return m_instance_refresh_id_isSet;
}

bool OAIInstanceRefresh::is_instance_refresh_id_Valid() const{
    return m_instance_refresh_id_isValid;
}

QString OAIInstanceRefresh::getAutoScalingGroupName() const {
    return m_auto_scaling_group_name;
}
void OAIInstanceRefresh::setAutoScalingGroupName(const QString &auto_scaling_group_name) {
    m_auto_scaling_group_name = auto_scaling_group_name;
    m_auto_scaling_group_name_isSet = true;
}

bool OAIInstanceRefresh::is_auto_scaling_group_name_Set() const{
    return m_auto_scaling_group_name_isSet;
}

bool OAIInstanceRefresh::is_auto_scaling_group_name_Valid() const{
    return m_auto_scaling_group_name_isValid;
}

OAIInstanceRefreshStatus OAIInstanceRefresh::getStatus() const {
    return m_status;
}
void OAIInstanceRefresh::setStatus(const OAIInstanceRefreshStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInstanceRefresh::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInstanceRefresh::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIInstanceRefresh::getStatusReason() const {
    return m_status_reason;
}
void OAIInstanceRefresh::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIInstanceRefresh::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIInstanceRefresh::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QDateTime OAIInstanceRefresh::getStartTime() const {
    return m_start_time;
}
void OAIInstanceRefresh::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIInstanceRefresh::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIInstanceRefresh::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIInstanceRefresh::getEndTime() const {
    return m_end_time;
}
void OAIInstanceRefresh::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIInstanceRefresh::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIInstanceRefresh::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIInstanceRefresh::getPercentageComplete() const {
    return m_percentage_complete;
}
void OAIInstanceRefresh::setPercentageComplete(const qint32 &percentage_complete) {
    m_percentage_complete = percentage_complete;
    m_percentage_complete_isSet = true;
}

bool OAIInstanceRefresh::is_percentage_complete_Set() const{
    return m_percentage_complete_isSet;
}

bool OAIInstanceRefresh::is_percentage_complete_Valid() const{
    return m_percentage_complete_isValid;
}

qint32 OAIInstanceRefresh::getInstancesToUpdate() const {
    return m_instances_to_update;
}
void OAIInstanceRefresh::setInstancesToUpdate(const qint32 &instances_to_update) {
    m_instances_to_update = instances_to_update;
    m_instances_to_update_isSet = true;
}

bool OAIInstanceRefresh::is_instances_to_update_Set() const{
    return m_instances_to_update_isSet;
}

bool OAIInstanceRefresh::is_instances_to_update_Valid() const{
    return m_instances_to_update_isValid;
}

OAIInstanceRefresh_ProgressDetails OAIInstanceRefresh::getProgressDetails() const {
    return m_progress_details;
}
void OAIInstanceRefresh::setProgressDetails(const OAIInstanceRefresh_ProgressDetails &progress_details) {
    m_progress_details = progress_details;
    m_progress_details_isSet = true;
}

bool OAIInstanceRefresh::is_progress_details_Set() const{
    return m_progress_details_isSet;
}

bool OAIInstanceRefresh::is_progress_details_Valid() const{
    return m_progress_details_isValid;
}

OAIInstanceRefresh_Preferences OAIInstanceRefresh::getPreferences() const {
    return m_preferences;
}
void OAIInstanceRefresh::setPreferences(const OAIInstanceRefresh_Preferences &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAIInstanceRefresh::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAIInstanceRefresh::is_preferences_Valid() const{
    return m_preferences_isValid;
}

OAIInstanceRefresh_DesiredConfiguration OAIInstanceRefresh::getDesiredConfiguration() const {
    return m_desired_configuration;
}
void OAIInstanceRefresh::setDesiredConfiguration(const OAIInstanceRefresh_DesiredConfiguration &desired_configuration) {
    m_desired_configuration = desired_configuration;
    m_desired_configuration_isSet = true;
}

bool OAIInstanceRefresh::is_desired_configuration_Set() const{
    return m_desired_configuration_isSet;
}

bool OAIInstanceRefresh::is_desired_configuration_Valid() const{
    return m_desired_configuration_isValid;
}

OAIInstanceRefresh_RollbackDetails OAIInstanceRefresh::getRollbackDetails() const {
    return m_rollback_details;
}
void OAIInstanceRefresh::setRollbackDetails(const OAIInstanceRefresh_RollbackDetails &rollback_details) {
    m_rollback_details = rollback_details;
    m_rollback_details_isSet = true;
}

bool OAIInstanceRefresh::is_rollback_details_Set() const{
    return m_rollback_details_isSet;
}

bool OAIInstanceRefresh::is_rollback_details_Valid() const{
    return m_rollback_details_isValid;
}

bool OAIInstanceRefresh::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_refresh_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances_to_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceRefresh::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
