/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledActionsType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledActionsType::OAIScheduledActionsType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledActionsType::OAIScheduledActionsType() {
    this->initializeModel();
}

OAIScheduledActionsType::~OAIScheduledActionsType() {}

void OAIScheduledActionsType::initializeModel() {

    m_scheduled_update_group_actions_isSet = false;
    m_scheduled_update_group_actions_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIScheduledActionsType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledActionsType::fromJsonObject(QJsonObject json) {

    m_scheduled_update_group_actions_isValid = ::OpenAPI::fromJsonValue(m_scheduled_update_group_actions, json[QString("ScheduledUpdateGroupActions")]);
    m_scheduled_update_group_actions_isSet = !json[QString("ScheduledUpdateGroupActions")].isNull() && m_scheduled_update_group_actions_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIScheduledActionsType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledActionsType::asJsonObject() const {
    QJsonObject obj;
    if (m_scheduled_update_group_actions.isSet()) {
        obj.insert(QString("ScheduledUpdateGroupActions"), ::OpenAPI::toJsonValue(m_scheduled_update_group_actions));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIScheduledActionsType::getScheduledUpdateGroupActions() const {
    return m_scheduled_update_group_actions;
}
void OAIScheduledActionsType::setScheduledUpdateGroupActions(const QList &scheduled_update_group_actions) {
    m_scheduled_update_group_actions = scheduled_update_group_actions;
    m_scheduled_update_group_actions_isSet = true;
}

bool OAIScheduledActionsType::is_scheduled_update_group_actions_Set() const{
    return m_scheduled_update_group_actions_isSet;
}

bool OAIScheduledActionsType::is_scheduled_update_group_actions_Valid() const{
    return m_scheduled_update_group_actions_isValid;
}

QString OAIScheduledActionsType::getNextToken() const {
    return m_next_token;
}
void OAIScheduledActionsType::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIScheduledActionsType::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIScheduledActionsType::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIScheduledActionsType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scheduled_update_group_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledActionsType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
