/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScalingPolicy_PredictiveScalingConfiguration.h
 *
 * 
 */

#ifndef OAIScalingPolicy_PredictiveScalingConfiguration_H
#define OAIScalingPolicy_PredictiveScalingConfiguration_H

#include <QJsonObject>

#include "OAIPredictiveScalingMaxCapacityBreachBehavior.h"
#include "OAIPredictiveScalingMode.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScalingPolicy_PredictiveScalingConfiguration : public OAIObject {
public:
    OAIScalingPolicy_PredictiveScalingConfiguration();
    OAIScalingPolicy_PredictiveScalingConfiguration(QString json);
    ~OAIScalingPolicy_PredictiveScalingConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getMetricSpecifications() const;
    void setMetricSpecifications(const QList &metric_specifications);
    bool is_metric_specifications_Set() const;
    bool is_metric_specifications_Valid() const;

    OAIPredictiveScalingMode getMode() const;
    void setMode(const OAIPredictiveScalingMode &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    qint32 getSchedulingBufferTime() const;
    void setSchedulingBufferTime(const qint32 &scheduling_buffer_time);
    bool is_scheduling_buffer_time_Set() const;
    bool is_scheduling_buffer_time_Valid() const;

    OAIPredictiveScalingMaxCapacityBreachBehavior getMaxCapacityBreachBehavior() const;
    void setMaxCapacityBreachBehavior(const OAIPredictiveScalingMaxCapacityBreachBehavior &max_capacity_breach_behavior);
    bool is_max_capacity_breach_behavior_Set() const;
    bool is_max_capacity_breach_behavior_Valid() const;

    qint32 getMaxCapacityBuffer() const;
    void setMaxCapacityBuffer(const qint32 &max_capacity_buffer);
    bool is_max_capacity_buffer_Set() const;
    bool is_max_capacity_buffer_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_metric_specifications;
    bool m_metric_specifications_isSet;
    bool m_metric_specifications_isValid;

    OAIPredictiveScalingMode m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    qint32 m_scheduling_buffer_time;
    bool m_scheduling_buffer_time_isSet;
    bool m_scheduling_buffer_time_isValid;

    OAIPredictiveScalingMaxCapacityBreachBehavior m_max_capacity_breach_behavior;
    bool m_max_capacity_breach_behavior_isSet;
    bool m_max_capacity_breach_behavior_isValid;

    qint32 m_max_capacity_buffer;
    bool m_max_capacity_buffer_isSet;
    bool m_max_capacity_buffer_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScalingPolicy_PredictiveScalingConfiguration)

#endif // OAIScalingPolicy_PredictiveScalingConfiguration_H
