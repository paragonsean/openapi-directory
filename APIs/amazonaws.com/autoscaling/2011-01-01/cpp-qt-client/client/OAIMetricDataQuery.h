/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricDataQuery.h
 *
 * &lt;p&gt;The metric data to return. Also defines whether this call is returning data for one metric only, or whether it is performing a math expression on the values of returned metric statistics to create a new time series. A time series is a series of data points, each of which is associated with a timestamp.&lt;/p&gt; &lt;p&gt;For more information and examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/predictive-scaling-customized-metric-specification.html\&quot;&gt;Advanced predictive scaling policy configurations using custom metrics&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAIMetricDataQuery_H
#define OAIMetricDataQuery_H

#include <QJsonObject>

#include "OAIMetricDataQuery_MetricStat.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMetricDataQuery_MetricStat;

class OAIMetricDataQuery : public OAIObject {
public:
    OAIMetricDataQuery();
    OAIMetricDataQuery(QString json);
    ~OAIMetricDataQuery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getExpression() const;
    void setExpression(const QString &expression);
    bool is_expression_Set() const;
    bool is_expression_Valid() const;

    OAIMetricDataQuery_MetricStat getMetricStat() const;
    void setMetricStat(const OAIMetricDataQuery_MetricStat &metric_stat);
    bool is_metric_stat_Set() const;
    bool is_metric_stat_Valid() const;

    QString getLabel() const;
    void setLabel(const QString &label);
    bool is_label_Set() const;
    bool is_label_Valid() const;

    bool getReturnData() const;
    void setReturnData(const bool &return_data);
    bool is_return_data_Set() const;
    bool is_return_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_expression;
    bool m_expression_isSet;
    bool m_expression_isValid;

    OAIMetricDataQuery_MetricStat m_metric_stat;
    bool m_metric_stat_isSet;
    bool m_metric_stat_isValid;

    QString m_label;
    bool m_label_isSet;
    bool m_label_isValid;

    bool m_return_data;
    bool m_return_data_isSet;
    bool m_return_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricDataQuery)

#endif // OAIMetricDataQuery_H
