/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficSourceIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficSourceIdentifier::OAITrafficSourceIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficSourceIdentifier::OAITrafficSourceIdentifier() {
    this->initializeModel();
}

OAITrafficSourceIdentifier::~OAITrafficSourceIdentifier() {}

void OAITrafficSourceIdentifier::initializeModel() {

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITrafficSourceIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficSourceIdentifier::fromJsonObject(QJsonObject json) {

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("Identifier")]);
    m_identifier_isSet = !json[QString("Identifier")].isNull() && m_identifier_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAITrafficSourceIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficSourceIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_isSet) {
        obj.insert(QString("Identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITrafficSourceIdentifier::getIdentifier() const {
    return m_identifier;
}
void OAITrafficSourceIdentifier::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAITrafficSourceIdentifier::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAITrafficSourceIdentifier::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAITrafficSourceIdentifier::getType() const {
    return m_type;
}
void OAITrafficSourceIdentifier::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITrafficSourceIdentifier::is_type_Set() const{
    return m_type_isSet;
}

bool OAITrafficSourceIdentifier::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITrafficSourceIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficSourceIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && true;
}

} // namespace OpenAPI
