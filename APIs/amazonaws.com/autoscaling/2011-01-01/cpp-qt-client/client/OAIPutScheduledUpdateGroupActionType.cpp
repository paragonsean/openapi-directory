/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutScheduledUpdateGroupActionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutScheduledUpdateGroupActionType::OAIPutScheduledUpdateGroupActionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutScheduledUpdateGroupActionType::OAIPutScheduledUpdateGroupActionType() {
    this->initializeModel();
}

OAIPutScheduledUpdateGroupActionType::~OAIPutScheduledUpdateGroupActionType() {}

void OAIPutScheduledUpdateGroupActionType::initializeModel() {

    m_auto_scaling_group_name_isSet = false;
    m_auto_scaling_group_name_isValid = false;

    m_scheduled_action_name_isSet = false;
    m_scheduled_action_name_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_recurrence_isSet = false;
    m_recurrence_isValid = false;

    m_min_size_isSet = false;
    m_min_size_isValid = false;

    m_max_size_isSet = false;
    m_max_size_isValid = false;

    m_desired_capacity_isSet = false;
    m_desired_capacity_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIPutScheduledUpdateGroupActionType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutScheduledUpdateGroupActionType::fromJsonObject(QJsonObject json) {

    m_auto_scaling_group_name_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_name, json[QString("AutoScalingGroupName")]);
    m_auto_scaling_group_name_isSet = !json[QString("AutoScalingGroupName")].isNull() && m_auto_scaling_group_name_isValid;

    m_scheduled_action_name_isValid = ::OpenAPI::fromJsonValue(m_scheduled_action_name, json[QString("ScheduledActionName")]);
    m_scheduled_action_name_isSet = !json[QString("ScheduledActionName")].isNull() && m_scheduled_action_name_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_recurrence_isValid = ::OpenAPI::fromJsonValue(m_recurrence, json[QString("Recurrence")]);
    m_recurrence_isSet = !json[QString("Recurrence")].isNull() && m_recurrence_isValid;

    m_min_size_isValid = ::OpenAPI::fromJsonValue(m_min_size, json[QString("MinSize")]);
    m_min_size_isSet = !json[QString("MinSize")].isNull() && m_min_size_isValid;

    m_max_size_isValid = ::OpenAPI::fromJsonValue(m_max_size, json[QString("MaxSize")]);
    m_max_size_isSet = !json[QString("MaxSize")].isNull() && m_max_size_isValid;

    m_desired_capacity_isValid = ::OpenAPI::fromJsonValue(m_desired_capacity, json[QString("DesiredCapacity")]);
    m_desired_capacity_isSet = !json[QString("DesiredCapacity")].isNull() && m_desired_capacity_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("TimeZone")]);
    m_time_zone_isSet = !json[QString("TimeZone")].isNull() && m_time_zone_isValid;
}

QString OAIPutScheduledUpdateGroupActionType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutScheduledUpdateGroupActionType::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_scaling_group_name_isSet) {
        obj.insert(QString("AutoScalingGroupName"), ::OpenAPI::toJsonValue(m_auto_scaling_group_name));
    }
    if (m_scheduled_action_name_isSet) {
        obj.insert(QString("ScheduledActionName"), ::OpenAPI::toJsonValue(m_scheduled_action_name));
    }
    if (m_time_isSet) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_recurrence_isSet) {
        obj.insert(QString("Recurrence"), ::OpenAPI::toJsonValue(m_recurrence));
    }
    if (m_min_size_isSet) {
        obj.insert(QString("MinSize"), ::OpenAPI::toJsonValue(m_min_size));
    }
    if (m_max_size_isSet) {
        obj.insert(QString("MaxSize"), ::OpenAPI::toJsonValue(m_max_size));
    }
    if (m_desired_capacity_isSet) {
        obj.insert(QString("DesiredCapacity"), ::OpenAPI::toJsonValue(m_desired_capacity));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("TimeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIPutScheduledUpdateGroupActionType::getAutoScalingGroupName() const {
    return m_auto_scaling_group_name;
}
void OAIPutScheduledUpdateGroupActionType::setAutoScalingGroupName(const QString &auto_scaling_group_name) {
    m_auto_scaling_group_name = auto_scaling_group_name;
    m_auto_scaling_group_name_isSet = true;
}

bool OAIPutScheduledUpdateGroupActionType::is_auto_scaling_group_name_Set() const{
    return m_auto_scaling_group_name_isSet;
}

bool OAIPutScheduledUpdateGroupActionType::is_auto_scaling_group_name_Valid() const{
    return m_auto_scaling_group_name_isValid;
}

QString OAIPutScheduledUpdateGroupActionType::getScheduledActionName() const {
    return m_scheduled_action_name;
}
void OAIPutScheduledUpdateGroupActionType::setScheduledActionName(const QString &scheduled_action_name) {
    m_scheduled_action_name = scheduled_action_name;
    m_scheduled_action_name_isSet = true;
}

bool OAIPutScheduledUpdateGroupActionType::is_scheduled_action_name_Set() const{
    return m_scheduled_action_name_isSet;
}

bool OAIPutScheduledUpdateGroupActionType::is_scheduled_action_name_Valid() const{
    return m_scheduled_action_name_isValid;
}

QDateTime OAIPutScheduledUpdateGroupActionType::getTime() const {
    return m_time;
}
void OAIPutScheduledUpdateGroupActionType::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIPutScheduledUpdateGroupActionType::is_time_Set() const{
    return m_time_isSet;
}

bool OAIPutScheduledUpdateGroupActionType::is_time_Valid() const{
    return m_time_isValid;
}

QDateTime OAIPutScheduledUpdateGroupActionType::getStartTime() const {
    return m_start_time;
}
void OAIPutScheduledUpdateGroupActionType::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPutScheduledUpdateGroupActionType::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPutScheduledUpdateGroupActionType::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIPutScheduledUpdateGroupActionType::getEndTime() const {
    return m_end_time;
}
void OAIPutScheduledUpdateGroupActionType::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIPutScheduledUpdateGroupActionType::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIPutScheduledUpdateGroupActionType::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIPutScheduledUpdateGroupActionType::getRecurrence() const {
    return m_recurrence;
}
void OAIPutScheduledUpdateGroupActionType::setRecurrence(const QString &recurrence) {
    m_recurrence = recurrence;
    m_recurrence_isSet = true;
}

bool OAIPutScheduledUpdateGroupActionType::is_recurrence_Set() const{
    return m_recurrence_isSet;
}

bool OAIPutScheduledUpdateGroupActionType::is_recurrence_Valid() const{
    return m_recurrence_isValid;
}

qint32 OAIPutScheduledUpdateGroupActionType::getMinSize() const {
    return m_min_size;
}
void OAIPutScheduledUpdateGroupActionType::setMinSize(const qint32 &min_size) {
    m_min_size = min_size;
    m_min_size_isSet = true;
}

bool OAIPutScheduledUpdateGroupActionType::is_min_size_Set() const{
    return m_min_size_isSet;
}

bool OAIPutScheduledUpdateGroupActionType::is_min_size_Valid() const{
    return m_min_size_isValid;
}

qint32 OAIPutScheduledUpdateGroupActionType::getMaxSize() const {
    return m_max_size;
}
void OAIPutScheduledUpdateGroupActionType::setMaxSize(const qint32 &max_size) {
    m_max_size = max_size;
    m_max_size_isSet = true;
}

bool OAIPutScheduledUpdateGroupActionType::is_max_size_Set() const{
    return m_max_size_isSet;
}

bool OAIPutScheduledUpdateGroupActionType::is_max_size_Valid() const{
    return m_max_size_isValid;
}

qint32 OAIPutScheduledUpdateGroupActionType::getDesiredCapacity() const {
    return m_desired_capacity;
}
void OAIPutScheduledUpdateGroupActionType::setDesiredCapacity(const qint32 &desired_capacity) {
    m_desired_capacity = desired_capacity;
    m_desired_capacity_isSet = true;
}

bool OAIPutScheduledUpdateGroupActionType::is_desired_capacity_Set() const{
    return m_desired_capacity_isSet;
}

bool OAIPutScheduledUpdateGroupActionType::is_desired_capacity_Valid() const{
    return m_desired_capacity_isValid;
}

QString OAIPutScheduledUpdateGroupActionType::getTimeZone() const {
    return m_time_zone;
}
void OAIPutScheduledUpdateGroupActionType::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIPutScheduledUpdateGroupActionType::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIPutScheduledUpdateGroupActionType::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIPutScheduledUpdateGroupActionType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_scaling_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutScheduledUpdateGroupActionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_scaling_group_name_isValid && m_scheduled_action_name_isValid && true;
}

} // namespace OpenAPI
