/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILifecycleState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILifecycleState::OAILifecycleState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILifecycleState::OAILifecycleState() {
    this->initializeModel();
}

OAILifecycleState::~OAILifecycleState() {}

void OAILifecycleState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILifecycleState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILifecycleState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pending:Wait", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::PENDING_WAIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pending:Proceed", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::PENDING_PROCEED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Quarantined", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::QUARANTINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InService", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::INSERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terminating", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::TERMINATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terminating:Wait", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::TERMINATING_WAIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terminating:Proceed", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::TERMINATING_PROCEED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terminated", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::TERMINATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Detaching", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::DETACHING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Detached", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::DETACHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EnteringStandby", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::ENTERINGSTANDBY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Standby", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::STANDBY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Warmed:Pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::WARMED_PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Warmed:Pending:Wait", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::WARMED_PENDING_WAIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Warmed:Pending:Proceed", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::WARMED_PENDING_PROCEED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Warmed:Terminating", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::WARMED_TERMINATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Warmed:Terminating:Wait", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::WARMED_TERMINATING_WAIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Warmed:Terminating:Proceed", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::WARMED_TERMINATING_PROCEED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Warmed:Terminated", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::WARMED_TERMINATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Warmed:Stopped", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::WARMED_STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Warmed:Running", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::WARMED_RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Warmed:Hibernated", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycleState::WARMED_HIBERNATED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILifecycleState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILifecycleState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILifecycleState::PENDING:
            val = "Pending";
            break;
        case eOAILifecycleState::PENDING_WAIT:
            val = "Pending:Wait";
            break;
        case eOAILifecycleState::PENDING_PROCEED:
            val = "Pending:Proceed";
            break;
        case eOAILifecycleState::QUARANTINED:
            val = "Quarantined";
            break;
        case eOAILifecycleState::INSERVICE:
            val = "InService";
            break;
        case eOAILifecycleState::TERMINATING:
            val = "Terminating";
            break;
        case eOAILifecycleState::TERMINATING_WAIT:
            val = "Terminating:Wait";
            break;
        case eOAILifecycleState::TERMINATING_PROCEED:
            val = "Terminating:Proceed";
            break;
        case eOAILifecycleState::TERMINATED:
            val = "Terminated";
            break;
        case eOAILifecycleState::DETACHING:
            val = "Detaching";
            break;
        case eOAILifecycleState::DETACHED:
            val = "Detached";
            break;
        case eOAILifecycleState::ENTERINGSTANDBY:
            val = "EnteringStandby";
            break;
        case eOAILifecycleState::STANDBY:
            val = "Standby";
            break;
        case eOAILifecycleState::WARMED_PENDING:
            val = "Warmed:Pending";
            break;
        case eOAILifecycleState::WARMED_PENDING_WAIT:
            val = "Warmed:Pending:Wait";
            break;
        case eOAILifecycleState::WARMED_PENDING_PROCEED:
            val = "Warmed:Pending:Proceed";
            break;
        case eOAILifecycleState::WARMED_TERMINATING:
            val = "Warmed:Terminating";
            break;
        case eOAILifecycleState::WARMED_TERMINATING_WAIT:
            val = "Warmed:Terminating:Wait";
            break;
        case eOAILifecycleState::WARMED_TERMINATING_PROCEED:
            val = "Warmed:Terminating:Proceed";
            break;
        case eOAILifecycleState::WARMED_TERMINATED:
            val = "Warmed:Terminated";
            break;
        case eOAILifecycleState::WARMED_STOPPED:
            val = "Warmed:Stopped";
            break;
        case eOAILifecycleState::WARMED_RUNNING:
            val = "Warmed:Running";
            break;
        case eOAILifecycleState::WARMED_HIBERNATED:
            val = "Warmed:Hibernated";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILifecycleState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILifecycleState::eOAILifecycleState OAILifecycleState::getValue() const {
    return m_value;
}

void OAILifecycleState::setValue(const OAILifecycleState::eOAILifecycleState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILifecycleState::isSet() const {
    
    return m_value_isSet;
}

bool OAILifecycleState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
