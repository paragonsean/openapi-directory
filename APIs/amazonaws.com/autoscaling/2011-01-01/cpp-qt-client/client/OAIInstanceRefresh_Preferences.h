/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstanceRefresh_Preferences.h
 *
 * 
 */

#ifndef OAIInstanceRefresh_Preferences_H
#define OAIInstanceRefresh_Preferences_H

#include <QJsonObject>

#include "OAIGET_StartInstanceRefresh_Preferences_parameter_AlarmSpecification.h"
#include "OAIScaleInProtectedInstances.h"
#include "OAIStandbyInstances.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGET_StartInstanceRefresh_Preferences_parameter_AlarmSpecification;

class OAIInstanceRefresh_Preferences : public OAIObject {
public:
    OAIInstanceRefresh_Preferences();
    OAIInstanceRefresh_Preferences(QString json);
    ~OAIInstanceRefresh_Preferences() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMinHealthyPercentage() const;
    void setMinHealthyPercentage(const qint32 &min_healthy_percentage);
    bool is_min_healthy_percentage_Set() const;
    bool is_min_healthy_percentage_Valid() const;

    qint32 getInstanceWarmup() const;
    void setInstanceWarmup(const qint32 &instance_warmup);
    bool is_instance_warmup_Set() const;
    bool is_instance_warmup_Valid() const;

    QList getCheckpointPercentages() const;
    void setCheckpointPercentages(const QList &checkpoint_percentages);
    bool is_checkpoint_percentages_Set() const;
    bool is_checkpoint_percentages_Valid() const;

    qint32 getCheckpointDelay() const;
    void setCheckpointDelay(const qint32 &checkpoint_delay);
    bool is_checkpoint_delay_Set() const;
    bool is_checkpoint_delay_Valid() const;

    bool getSkipMatching() const;
    void setSkipMatching(const bool &skip_matching);
    bool is_skip_matching_Set() const;
    bool is_skip_matching_Valid() const;

    bool getAutoRollback() const;
    void setAutoRollback(const bool &auto_rollback);
    bool is_auto_rollback_Set() const;
    bool is_auto_rollback_Valid() const;

    OAIScaleInProtectedInstances getScaleInProtectedInstances() const;
    void setScaleInProtectedInstances(const OAIScaleInProtectedInstances &scale_in_protected_instances);
    bool is_scale_in_protected_instances_Set() const;
    bool is_scale_in_protected_instances_Valid() const;

    OAIStandbyInstances getStandbyInstances() const;
    void setStandbyInstances(const OAIStandbyInstances &standby_instances);
    bool is_standby_instances_Set() const;
    bool is_standby_instances_Valid() const;

    OAIGET_StartInstanceRefresh_Preferences_parameter_AlarmSpecification getAlarmSpecification() const;
    void setAlarmSpecification(const OAIGET_StartInstanceRefresh_Preferences_parameter_AlarmSpecification &alarm_specification);
    bool is_alarm_specification_Set() const;
    bool is_alarm_specification_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_min_healthy_percentage;
    bool m_min_healthy_percentage_isSet;
    bool m_min_healthy_percentage_isValid;

    qint32 m_instance_warmup;
    bool m_instance_warmup_isSet;
    bool m_instance_warmup_isValid;

    QList m_checkpoint_percentages;
    bool m_checkpoint_percentages_isSet;
    bool m_checkpoint_percentages_isValid;

    qint32 m_checkpoint_delay;
    bool m_checkpoint_delay_isSet;
    bool m_checkpoint_delay_isValid;

    bool m_skip_matching;
    bool m_skip_matching_isSet;
    bool m_skip_matching_isValid;

    bool m_auto_rollback;
    bool m_auto_rollback_isSet;
    bool m_auto_rollback_isValid;

    OAIScaleInProtectedInstances m_scale_in_protected_instances;
    bool m_scale_in_protected_instances_isSet;
    bool m_scale_in_protected_instances_isValid;

    OAIStandbyInstances m_standby_instances;
    bool m_standby_instances_isSet;
    bool m_standby_instances_isValid;

    OAIGET_StartInstanceRefresh_Preferences_parameter_AlarmSpecification m_alarm_specification;
    bool m_alarm_specification_isSet;
    bool m_alarm_specification_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstanceRefresh_Preferences)

#endif // OAIInstanceRefresh_Preferences_H
