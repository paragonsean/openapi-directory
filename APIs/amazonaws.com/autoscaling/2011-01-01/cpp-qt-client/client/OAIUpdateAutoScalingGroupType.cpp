/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAutoScalingGroupType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAutoScalingGroupType::OAIUpdateAutoScalingGroupType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAutoScalingGroupType::OAIUpdateAutoScalingGroupType() {
    this->initializeModel();
}

OAIUpdateAutoScalingGroupType::~OAIUpdateAutoScalingGroupType() {}

void OAIUpdateAutoScalingGroupType::initializeModel() {

    m_auto_scaling_group_name_isSet = false;
    m_auto_scaling_group_name_isValid = false;

    m_launch_configuration_name_isSet = false;
    m_launch_configuration_name_isValid = false;

    m_launch_template_isSet = false;
    m_launch_template_isValid = false;

    m_mixed_instances_policy_isSet = false;
    m_mixed_instances_policy_isValid = false;

    m_min_size_isSet = false;
    m_min_size_isValid = false;

    m_max_size_isSet = false;
    m_max_size_isValid = false;

    m_desired_capacity_isSet = false;
    m_desired_capacity_isValid = false;

    m_default_cooldown_isSet = false;
    m_default_cooldown_isValid = false;

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_health_check_type_isSet = false;
    m_health_check_type_isValid = false;

    m_health_check_grace_period_isSet = false;
    m_health_check_grace_period_isValid = false;

    m_placement_group_isSet = false;
    m_placement_group_isValid = false;

    m_vpc_zone_identifier_isSet = false;
    m_vpc_zone_identifier_isValid = false;

    m_termination_policies_isSet = false;
    m_termination_policies_isValid = false;

    m_new_instances_protected_from_scale_in_isSet = false;
    m_new_instances_protected_from_scale_in_isValid = false;

    m_service_linked_role_arn_isSet = false;
    m_service_linked_role_arn_isValid = false;

    m_max_instance_lifetime_isSet = false;
    m_max_instance_lifetime_isValid = false;

    m_capacity_rebalance_isSet = false;
    m_capacity_rebalance_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_desired_capacity_type_isSet = false;
    m_desired_capacity_type_isValid = false;

    m_default_instance_warmup_isSet = false;
    m_default_instance_warmup_isValid = false;
}

void OAIUpdateAutoScalingGroupType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAutoScalingGroupType::fromJsonObject(QJsonObject json) {

    m_auto_scaling_group_name_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_name, json[QString("AutoScalingGroupName")]);
    m_auto_scaling_group_name_isSet = !json[QString("AutoScalingGroupName")].isNull() && m_auto_scaling_group_name_isValid;

    m_launch_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_launch_configuration_name, json[QString("LaunchConfigurationName")]);
    m_launch_configuration_name_isSet = !json[QString("LaunchConfigurationName")].isNull() && m_launch_configuration_name_isValid;

    m_launch_template_isValid = ::OpenAPI::fromJsonValue(m_launch_template, json[QString("LaunchTemplate")]);
    m_launch_template_isSet = !json[QString("LaunchTemplate")].isNull() && m_launch_template_isValid;

    m_mixed_instances_policy_isValid = ::OpenAPI::fromJsonValue(m_mixed_instances_policy, json[QString("MixedInstancesPolicy")]);
    m_mixed_instances_policy_isSet = !json[QString("MixedInstancesPolicy")].isNull() && m_mixed_instances_policy_isValid;

    m_min_size_isValid = ::OpenAPI::fromJsonValue(m_min_size, json[QString("MinSize")]);
    m_min_size_isSet = !json[QString("MinSize")].isNull() && m_min_size_isValid;

    m_max_size_isValid = ::OpenAPI::fromJsonValue(m_max_size, json[QString("MaxSize")]);
    m_max_size_isSet = !json[QString("MaxSize")].isNull() && m_max_size_isValid;

    m_desired_capacity_isValid = ::OpenAPI::fromJsonValue(m_desired_capacity, json[QString("DesiredCapacity")]);
    m_desired_capacity_isSet = !json[QString("DesiredCapacity")].isNull() && m_desired_capacity_isValid;

    m_default_cooldown_isValid = ::OpenAPI::fromJsonValue(m_default_cooldown, json[QString("DefaultCooldown")]);
    m_default_cooldown_isSet = !json[QString("DefaultCooldown")].isNull() && m_default_cooldown_isValid;

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_health_check_type_isValid = ::OpenAPI::fromJsonValue(m_health_check_type, json[QString("HealthCheckType")]);
    m_health_check_type_isSet = !json[QString("HealthCheckType")].isNull() && m_health_check_type_isValid;

    m_health_check_grace_period_isValid = ::OpenAPI::fromJsonValue(m_health_check_grace_period, json[QString("HealthCheckGracePeriod")]);
    m_health_check_grace_period_isSet = !json[QString("HealthCheckGracePeriod")].isNull() && m_health_check_grace_period_isValid;

    m_placement_group_isValid = ::OpenAPI::fromJsonValue(m_placement_group, json[QString("PlacementGroup")]);
    m_placement_group_isSet = !json[QString("PlacementGroup")].isNull() && m_placement_group_isValid;

    m_vpc_zone_identifier_isValid = ::OpenAPI::fromJsonValue(m_vpc_zone_identifier, json[QString("VPCZoneIdentifier")]);
    m_vpc_zone_identifier_isSet = !json[QString("VPCZoneIdentifier")].isNull() && m_vpc_zone_identifier_isValid;

    m_termination_policies_isValid = ::OpenAPI::fromJsonValue(m_termination_policies, json[QString("TerminationPolicies")]);
    m_termination_policies_isSet = !json[QString("TerminationPolicies")].isNull() && m_termination_policies_isValid;

    m_new_instances_protected_from_scale_in_isValid = ::OpenAPI::fromJsonValue(m_new_instances_protected_from_scale_in, json[QString("NewInstancesProtectedFromScaleIn")]);
    m_new_instances_protected_from_scale_in_isSet = !json[QString("NewInstancesProtectedFromScaleIn")].isNull() && m_new_instances_protected_from_scale_in_isValid;

    m_service_linked_role_arn_isValid = ::OpenAPI::fromJsonValue(m_service_linked_role_arn, json[QString("ServiceLinkedRoleARN")]);
    m_service_linked_role_arn_isSet = !json[QString("ServiceLinkedRoleARN")].isNull() && m_service_linked_role_arn_isValid;

    m_max_instance_lifetime_isValid = ::OpenAPI::fromJsonValue(m_max_instance_lifetime, json[QString("MaxInstanceLifetime")]);
    m_max_instance_lifetime_isSet = !json[QString("MaxInstanceLifetime")].isNull() && m_max_instance_lifetime_isValid;

    m_capacity_rebalance_isValid = ::OpenAPI::fromJsonValue(m_capacity_rebalance, json[QString("CapacityRebalance")]);
    m_capacity_rebalance_isSet = !json[QString("CapacityRebalance")].isNull() && m_capacity_rebalance_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_desired_capacity_type_isValid = ::OpenAPI::fromJsonValue(m_desired_capacity_type, json[QString("DesiredCapacityType")]);
    m_desired_capacity_type_isSet = !json[QString("DesiredCapacityType")].isNull() && m_desired_capacity_type_isValid;

    m_default_instance_warmup_isValid = ::OpenAPI::fromJsonValue(m_default_instance_warmup, json[QString("DefaultInstanceWarmup")]);
    m_default_instance_warmup_isSet = !json[QString("DefaultInstanceWarmup")].isNull() && m_default_instance_warmup_isValid;
}

QString OAIUpdateAutoScalingGroupType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAutoScalingGroupType::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_scaling_group_name_isSet) {
        obj.insert(QString("AutoScalingGroupName"), ::OpenAPI::toJsonValue(m_auto_scaling_group_name));
    }
    if (m_launch_configuration_name_isSet) {
        obj.insert(QString("LaunchConfigurationName"), ::OpenAPI::toJsonValue(m_launch_configuration_name));
    }
    if (m_launch_template.isSet()) {
        obj.insert(QString("LaunchTemplate"), ::OpenAPI::toJsonValue(m_launch_template));
    }
    if (m_mixed_instances_policy.isSet()) {
        obj.insert(QString("MixedInstancesPolicy"), ::OpenAPI::toJsonValue(m_mixed_instances_policy));
    }
    if (m_min_size_isSet) {
        obj.insert(QString("MinSize"), ::OpenAPI::toJsonValue(m_min_size));
    }
    if (m_max_size_isSet) {
        obj.insert(QString("MaxSize"), ::OpenAPI::toJsonValue(m_max_size));
    }
    if (m_desired_capacity_isSet) {
        obj.insert(QString("DesiredCapacity"), ::OpenAPI::toJsonValue(m_desired_capacity));
    }
    if (m_default_cooldown_isSet) {
        obj.insert(QString("DefaultCooldown"), ::OpenAPI::toJsonValue(m_default_cooldown));
    }
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_health_check_type_isSet) {
        obj.insert(QString("HealthCheckType"), ::OpenAPI::toJsonValue(m_health_check_type));
    }
    if (m_health_check_grace_period_isSet) {
        obj.insert(QString("HealthCheckGracePeriod"), ::OpenAPI::toJsonValue(m_health_check_grace_period));
    }
    if (m_placement_group_isSet) {
        obj.insert(QString("PlacementGroup"), ::OpenAPI::toJsonValue(m_placement_group));
    }
    if (m_vpc_zone_identifier_isSet) {
        obj.insert(QString("VPCZoneIdentifier"), ::OpenAPI::toJsonValue(m_vpc_zone_identifier));
    }
    if (m_termination_policies.isSet()) {
        obj.insert(QString("TerminationPolicies"), ::OpenAPI::toJsonValue(m_termination_policies));
    }
    if (m_new_instances_protected_from_scale_in_isSet) {
        obj.insert(QString("NewInstancesProtectedFromScaleIn"), ::OpenAPI::toJsonValue(m_new_instances_protected_from_scale_in));
    }
    if (m_service_linked_role_arn_isSet) {
        obj.insert(QString("ServiceLinkedRoleARN"), ::OpenAPI::toJsonValue(m_service_linked_role_arn));
    }
    if (m_max_instance_lifetime_isSet) {
        obj.insert(QString("MaxInstanceLifetime"), ::OpenAPI::toJsonValue(m_max_instance_lifetime));
    }
    if (m_capacity_rebalance_isSet) {
        obj.insert(QString("CapacityRebalance"), ::OpenAPI::toJsonValue(m_capacity_rebalance));
    }
    if (m_context_isSet) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_desired_capacity_type_isSet) {
        obj.insert(QString("DesiredCapacityType"), ::OpenAPI::toJsonValue(m_desired_capacity_type));
    }
    if (m_default_instance_warmup_isSet) {
        obj.insert(QString("DefaultInstanceWarmup"), ::OpenAPI::toJsonValue(m_default_instance_warmup));
    }
    return obj;
}

QString OAIUpdateAutoScalingGroupType::getAutoScalingGroupName() const {
    return m_auto_scaling_group_name;
}
void OAIUpdateAutoScalingGroupType::setAutoScalingGroupName(const QString &auto_scaling_group_name) {
    m_auto_scaling_group_name = auto_scaling_group_name;
    m_auto_scaling_group_name_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_auto_scaling_group_name_Set() const{
    return m_auto_scaling_group_name_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_auto_scaling_group_name_Valid() const{
    return m_auto_scaling_group_name_isValid;
}

QString OAIUpdateAutoScalingGroupType::getLaunchConfigurationName() const {
    return m_launch_configuration_name;
}
void OAIUpdateAutoScalingGroupType::setLaunchConfigurationName(const QString &launch_configuration_name) {
    m_launch_configuration_name = launch_configuration_name;
    m_launch_configuration_name_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_launch_configuration_name_Set() const{
    return m_launch_configuration_name_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_launch_configuration_name_Valid() const{
    return m_launch_configuration_name_isValid;
}

OAIUpdateAutoScalingGroupType_LaunchTemplate OAIUpdateAutoScalingGroupType::getLaunchTemplate() const {
    return m_launch_template;
}
void OAIUpdateAutoScalingGroupType::setLaunchTemplate(const OAIUpdateAutoScalingGroupType_LaunchTemplate &launch_template) {
    m_launch_template = launch_template;
    m_launch_template_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_launch_template_Set() const{
    return m_launch_template_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_launch_template_Valid() const{
    return m_launch_template_isValid;
}

OAICreateAutoScalingGroupType_MixedInstancesPolicy OAIUpdateAutoScalingGroupType::getMixedInstancesPolicy() const {
    return m_mixed_instances_policy;
}
void OAIUpdateAutoScalingGroupType::setMixedInstancesPolicy(const OAICreateAutoScalingGroupType_MixedInstancesPolicy &mixed_instances_policy) {
    m_mixed_instances_policy = mixed_instances_policy;
    m_mixed_instances_policy_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_mixed_instances_policy_Set() const{
    return m_mixed_instances_policy_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_mixed_instances_policy_Valid() const{
    return m_mixed_instances_policy_isValid;
}

qint32 OAIUpdateAutoScalingGroupType::getMinSize() const {
    return m_min_size;
}
void OAIUpdateAutoScalingGroupType::setMinSize(const qint32 &min_size) {
    m_min_size = min_size;
    m_min_size_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_min_size_Set() const{
    return m_min_size_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_min_size_Valid() const{
    return m_min_size_isValid;
}

qint32 OAIUpdateAutoScalingGroupType::getMaxSize() const {
    return m_max_size;
}
void OAIUpdateAutoScalingGroupType::setMaxSize(const qint32 &max_size) {
    m_max_size = max_size;
    m_max_size_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_max_size_Set() const{
    return m_max_size_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_max_size_Valid() const{
    return m_max_size_isValid;
}

qint32 OAIUpdateAutoScalingGroupType::getDesiredCapacity() const {
    return m_desired_capacity;
}
void OAIUpdateAutoScalingGroupType::setDesiredCapacity(const qint32 &desired_capacity) {
    m_desired_capacity = desired_capacity;
    m_desired_capacity_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_desired_capacity_Set() const{
    return m_desired_capacity_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_desired_capacity_Valid() const{
    return m_desired_capacity_isValid;
}

qint32 OAIUpdateAutoScalingGroupType::getDefaultCooldown() const {
    return m_default_cooldown;
}
void OAIUpdateAutoScalingGroupType::setDefaultCooldown(const qint32 &default_cooldown) {
    m_default_cooldown = default_cooldown;
    m_default_cooldown_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_default_cooldown_Set() const{
    return m_default_cooldown_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_default_cooldown_Valid() const{
    return m_default_cooldown_isValid;
}

QList OAIUpdateAutoScalingGroupType::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAIUpdateAutoScalingGroupType::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

QString OAIUpdateAutoScalingGroupType::getHealthCheckType() const {
    return m_health_check_type;
}
void OAIUpdateAutoScalingGroupType::setHealthCheckType(const QString &health_check_type) {
    m_health_check_type = health_check_type;
    m_health_check_type_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_health_check_type_Set() const{
    return m_health_check_type_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_health_check_type_Valid() const{
    return m_health_check_type_isValid;
}

qint32 OAIUpdateAutoScalingGroupType::getHealthCheckGracePeriod() const {
    return m_health_check_grace_period;
}
void OAIUpdateAutoScalingGroupType::setHealthCheckGracePeriod(const qint32 &health_check_grace_period) {
    m_health_check_grace_period = health_check_grace_period;
    m_health_check_grace_period_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_health_check_grace_period_Set() const{
    return m_health_check_grace_period_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_health_check_grace_period_Valid() const{
    return m_health_check_grace_period_isValid;
}

QString OAIUpdateAutoScalingGroupType::getPlacementGroup() const {
    return m_placement_group;
}
void OAIUpdateAutoScalingGroupType::setPlacementGroup(const QString &placement_group) {
    m_placement_group = placement_group;
    m_placement_group_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_placement_group_Set() const{
    return m_placement_group_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_placement_group_Valid() const{
    return m_placement_group_isValid;
}

QString OAIUpdateAutoScalingGroupType::getVpcZoneIdentifier() const {
    return m_vpc_zone_identifier;
}
void OAIUpdateAutoScalingGroupType::setVpcZoneIdentifier(const QString &vpc_zone_identifier) {
    m_vpc_zone_identifier = vpc_zone_identifier;
    m_vpc_zone_identifier_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_vpc_zone_identifier_Set() const{
    return m_vpc_zone_identifier_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_vpc_zone_identifier_Valid() const{
    return m_vpc_zone_identifier_isValid;
}

QList OAIUpdateAutoScalingGroupType::getTerminationPolicies() const {
    return m_termination_policies;
}
void OAIUpdateAutoScalingGroupType::setTerminationPolicies(const QList &termination_policies) {
    m_termination_policies = termination_policies;
    m_termination_policies_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_termination_policies_Set() const{
    return m_termination_policies_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_termination_policies_Valid() const{
    return m_termination_policies_isValid;
}

bool OAIUpdateAutoScalingGroupType::getNewInstancesProtectedFromScaleIn() const {
    return m_new_instances_protected_from_scale_in;
}
void OAIUpdateAutoScalingGroupType::setNewInstancesProtectedFromScaleIn(const bool &new_instances_protected_from_scale_in) {
    m_new_instances_protected_from_scale_in = new_instances_protected_from_scale_in;
    m_new_instances_protected_from_scale_in_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_new_instances_protected_from_scale_in_Set() const{
    return m_new_instances_protected_from_scale_in_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_new_instances_protected_from_scale_in_Valid() const{
    return m_new_instances_protected_from_scale_in_isValid;
}

QString OAIUpdateAutoScalingGroupType::getServiceLinkedRoleArn() const {
    return m_service_linked_role_arn;
}
void OAIUpdateAutoScalingGroupType::setServiceLinkedRoleArn(const QString &service_linked_role_arn) {
    m_service_linked_role_arn = service_linked_role_arn;
    m_service_linked_role_arn_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_service_linked_role_arn_Set() const{
    return m_service_linked_role_arn_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_service_linked_role_arn_Valid() const{
    return m_service_linked_role_arn_isValid;
}

qint32 OAIUpdateAutoScalingGroupType::getMaxInstanceLifetime() const {
    return m_max_instance_lifetime;
}
void OAIUpdateAutoScalingGroupType::setMaxInstanceLifetime(const qint32 &max_instance_lifetime) {
    m_max_instance_lifetime = max_instance_lifetime;
    m_max_instance_lifetime_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_max_instance_lifetime_Set() const{
    return m_max_instance_lifetime_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_max_instance_lifetime_Valid() const{
    return m_max_instance_lifetime_isValid;
}

bool OAIUpdateAutoScalingGroupType::getCapacityRebalance() const {
    return m_capacity_rebalance;
}
void OAIUpdateAutoScalingGroupType::setCapacityRebalance(const bool &capacity_rebalance) {
    m_capacity_rebalance = capacity_rebalance;
    m_capacity_rebalance_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_capacity_rebalance_Set() const{
    return m_capacity_rebalance_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_capacity_rebalance_Valid() const{
    return m_capacity_rebalance_isValid;
}

QString OAIUpdateAutoScalingGroupType::getContext() const {
    return m_context;
}
void OAIUpdateAutoScalingGroupType::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_context_Set() const{
    return m_context_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIUpdateAutoScalingGroupType::getDesiredCapacityType() const {
    return m_desired_capacity_type;
}
void OAIUpdateAutoScalingGroupType::setDesiredCapacityType(const QString &desired_capacity_type) {
    m_desired_capacity_type = desired_capacity_type;
    m_desired_capacity_type_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_desired_capacity_type_Set() const{
    return m_desired_capacity_type_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_desired_capacity_type_Valid() const{
    return m_desired_capacity_type_isValid;
}

qint32 OAIUpdateAutoScalingGroupType::getDefaultInstanceWarmup() const {
    return m_default_instance_warmup;
}
void OAIUpdateAutoScalingGroupType::setDefaultInstanceWarmup(const qint32 &default_instance_warmup) {
    m_default_instance_warmup = default_instance_warmup;
    m_default_instance_warmup_isSet = true;
}

bool OAIUpdateAutoScalingGroupType::is_default_instance_warmup_Set() const{
    return m_default_instance_warmup_isSet;
}

bool OAIUpdateAutoScalingGroupType::is_default_instance_warmup_Valid() const{
    return m_default_instance_warmup_isValid;
}

bool OAIUpdateAutoScalingGroupType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_scaling_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mixed_instances_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_cooldown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_grace_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_zone_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_instances_protected_from_scale_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_linked_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_instance_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_rebalance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_capacity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_instance_warmup_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAutoScalingGroupType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_scaling_group_name_isValid && true;
}

} // namespace OpenAPI
