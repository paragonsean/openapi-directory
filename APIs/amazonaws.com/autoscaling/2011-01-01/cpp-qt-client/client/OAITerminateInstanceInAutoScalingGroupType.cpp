/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerminateInstanceInAutoScalingGroupType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerminateInstanceInAutoScalingGroupType::OAITerminateInstanceInAutoScalingGroupType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerminateInstanceInAutoScalingGroupType::OAITerminateInstanceInAutoScalingGroupType() {
    this->initializeModel();
}

OAITerminateInstanceInAutoScalingGroupType::~OAITerminateInstanceInAutoScalingGroupType() {}

void OAITerminateInstanceInAutoScalingGroupType::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_should_decrement_desired_capacity_isSet = false;
    m_should_decrement_desired_capacity_isValid = false;
}

void OAITerminateInstanceInAutoScalingGroupType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerminateInstanceInAutoScalingGroupType::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_should_decrement_desired_capacity_isValid = ::OpenAPI::fromJsonValue(m_should_decrement_desired_capacity, json[QString("ShouldDecrementDesiredCapacity")]);
    m_should_decrement_desired_capacity_isSet = !json[QString("ShouldDecrementDesiredCapacity")].isNull() && m_should_decrement_desired_capacity_isValid;
}

QString OAITerminateInstanceInAutoScalingGroupType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerminateInstanceInAutoScalingGroupType::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_should_decrement_desired_capacity_isSet) {
        obj.insert(QString("ShouldDecrementDesiredCapacity"), ::OpenAPI::toJsonValue(m_should_decrement_desired_capacity));
    }
    return obj;
}

QString OAITerminateInstanceInAutoScalingGroupType::getInstanceId() const {
    return m_instance_id;
}
void OAITerminateInstanceInAutoScalingGroupType::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAITerminateInstanceInAutoScalingGroupType::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAITerminateInstanceInAutoScalingGroupType::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

bool OAITerminateInstanceInAutoScalingGroupType::getShouldDecrementDesiredCapacity() const {
    return m_should_decrement_desired_capacity;
}
void OAITerminateInstanceInAutoScalingGroupType::setShouldDecrementDesiredCapacity(const bool &should_decrement_desired_capacity) {
    m_should_decrement_desired_capacity = should_decrement_desired_capacity;
    m_should_decrement_desired_capacity_isSet = true;
}

bool OAITerminateInstanceInAutoScalingGroupType::is_should_decrement_desired_capacity_Set() const{
    return m_should_decrement_desired_capacity_isSet;
}

bool OAITerminateInstanceInAutoScalingGroupType::is_should_decrement_desired_capacity_Valid() const{
    return m_should_decrement_desired_capacity_isValid;
}

bool OAITerminateInstanceInAutoScalingGroupType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_decrement_desired_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerminateInstanceInAutoScalingGroupType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_should_decrement_desired_capacity_isValid && true;
}

} // namespace OpenAPI
