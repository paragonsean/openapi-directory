/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapacityForecast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapacityForecast::OAICapacityForecast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapacityForecast::OAICapacityForecast() {
    this->initializeModel();
}

OAICapacityForecast::~OAICapacityForecast() {}

void OAICapacityForecast::initializeModel() {

    m_timestamps_isSet = false;
    m_timestamps_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAICapacityForecast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapacityForecast::fromJsonObject(QJsonObject json) {

    m_timestamps_isValid = ::OpenAPI::fromJsonValue(m_timestamps, json[QString("Timestamps")]);
    m_timestamps_isSet = !json[QString("Timestamps")].isNull() && m_timestamps_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAICapacityForecast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapacityForecast::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamps.isSet()) {
        obj.insert(QString("Timestamps"), ::OpenAPI::toJsonValue(m_timestamps));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList OAICapacityForecast::getTimestamps() const {
    return m_timestamps;
}
void OAICapacityForecast::setTimestamps(const QList &timestamps) {
    m_timestamps = timestamps;
    m_timestamps_isSet = true;
}

bool OAICapacityForecast::is_timestamps_Set() const{
    return m_timestamps_isSet;
}

bool OAICapacityForecast::is_timestamps_Valid() const{
    return m_timestamps_isValid;
}

QList OAICapacityForecast::getValues() const {
    return m_values;
}
void OAICapacityForecast::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAICapacityForecast::is_values_Set() const{
    return m_values_isSet;
}

bool OAICapacityForecast::is_values_Valid() const{
    return m_values_isValid;
}

bool OAICapacityForecast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapacityForecast::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timestamps_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
