/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAutoScalingGroupType.h
 *
 * 
 */

#ifndef OAICreateAutoScalingGroupType_H
#define OAICreateAutoScalingGroupType_H

#include <QJsonObject>

#include "OAICreateAutoScalingGroupType_LaunchTemplate.h"
#include "OAICreateAutoScalingGroupType_MixedInstancesPolicy.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateAutoScalingGroupType_LaunchTemplate;
class OAICreateAutoScalingGroupType_MixedInstancesPolicy;

class OAICreateAutoScalingGroupType : public OAIObject {
public:
    OAICreateAutoScalingGroupType();
    OAICreateAutoScalingGroupType(QString json);
    ~OAICreateAutoScalingGroupType() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAutoScalingGroupName() const;
    void setAutoScalingGroupName(const QString &auto_scaling_group_name);
    bool is_auto_scaling_group_name_Set() const;
    bool is_auto_scaling_group_name_Valid() const;

    QString getLaunchConfigurationName() const;
    void setLaunchConfigurationName(const QString &launch_configuration_name);
    bool is_launch_configuration_name_Set() const;
    bool is_launch_configuration_name_Valid() const;

    OAICreateAutoScalingGroupType_LaunchTemplate getLaunchTemplate() const;
    void setLaunchTemplate(const OAICreateAutoScalingGroupType_LaunchTemplate &launch_template);
    bool is_launch_template_Set() const;
    bool is_launch_template_Valid() const;

    OAICreateAutoScalingGroupType_MixedInstancesPolicy getMixedInstancesPolicy() const;
    void setMixedInstancesPolicy(const OAICreateAutoScalingGroupType_MixedInstancesPolicy &mixed_instances_policy);
    bool is_mixed_instances_policy_Set() const;
    bool is_mixed_instances_policy_Valid() const;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    qint32 getMinSize() const;
    void setMinSize(const qint32 &min_size);
    bool is_min_size_Set() const;
    bool is_min_size_Valid() const;

    qint32 getMaxSize() const;
    void setMaxSize(const qint32 &max_size);
    bool is_max_size_Set() const;
    bool is_max_size_Valid() const;

    qint32 getDesiredCapacity() const;
    void setDesiredCapacity(const qint32 &desired_capacity);
    bool is_desired_capacity_Set() const;
    bool is_desired_capacity_Valid() const;

    qint32 getDefaultCooldown() const;
    void setDefaultCooldown(const qint32 &default_cooldown);
    bool is_default_cooldown_Set() const;
    bool is_default_cooldown_Valid() const;

    QList getAvailabilityZones() const;
    void setAvailabilityZones(const QList &availability_zones);
    bool is_availability_zones_Set() const;
    bool is_availability_zones_Valid() const;

    QList getLoadBalancerNames() const;
    void setLoadBalancerNames(const QList &load_balancer_names);
    bool is_load_balancer_names_Set() const;
    bool is_load_balancer_names_Valid() const;

    QList getTargetGroupArns() const;
    void setTargetGroupArns(const QList &target_group_arns);
    bool is_target_group_arns_Set() const;
    bool is_target_group_arns_Valid() const;

    QString getHealthCheckType() const;
    void setHealthCheckType(const QString &health_check_type);
    bool is_health_check_type_Set() const;
    bool is_health_check_type_Valid() const;

    qint32 getHealthCheckGracePeriod() const;
    void setHealthCheckGracePeriod(const qint32 &health_check_grace_period);
    bool is_health_check_grace_period_Set() const;
    bool is_health_check_grace_period_Valid() const;

    QString getPlacementGroup() const;
    void setPlacementGroup(const QString &placement_group);
    bool is_placement_group_Set() const;
    bool is_placement_group_Valid() const;

    QString getVpcZoneIdentifier() const;
    void setVpcZoneIdentifier(const QString &vpc_zone_identifier);
    bool is_vpc_zone_identifier_Set() const;
    bool is_vpc_zone_identifier_Valid() const;

    QList getTerminationPolicies() const;
    void setTerminationPolicies(const QList &termination_policies);
    bool is_termination_policies_Set() const;
    bool is_termination_policies_Valid() const;

    bool getNewInstancesProtectedFromScaleIn() const;
    void setNewInstancesProtectedFromScaleIn(const bool &new_instances_protected_from_scale_in);
    bool is_new_instances_protected_from_scale_in_Set() const;
    bool is_new_instances_protected_from_scale_in_Valid() const;

    bool getCapacityRebalance() const;
    void setCapacityRebalance(const bool &capacity_rebalance);
    bool is_capacity_rebalance_Set() const;
    bool is_capacity_rebalance_Valid() const;

    QList getLifecycleHookSpecificationList() const;
    void setLifecycleHookSpecificationList(const QList &lifecycle_hook_specification_list);
    bool is_lifecycle_hook_specification_list_Set() const;
    bool is_lifecycle_hook_specification_list_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getServiceLinkedRoleArn() const;
    void setServiceLinkedRoleArn(const QString &service_linked_role_arn);
    bool is_service_linked_role_arn_Set() const;
    bool is_service_linked_role_arn_Valid() const;

    qint32 getMaxInstanceLifetime() const;
    void setMaxInstanceLifetime(const qint32 &max_instance_lifetime);
    bool is_max_instance_lifetime_Set() const;
    bool is_max_instance_lifetime_Valid() const;

    QString getContext() const;
    void setContext(const QString &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    QString getDesiredCapacityType() const;
    void setDesiredCapacityType(const QString &desired_capacity_type);
    bool is_desired_capacity_type_Set() const;
    bool is_desired_capacity_type_Valid() const;

    qint32 getDefaultInstanceWarmup() const;
    void setDefaultInstanceWarmup(const qint32 &default_instance_warmup);
    bool is_default_instance_warmup_Set() const;
    bool is_default_instance_warmup_Valid() const;

    QList getTrafficSources() const;
    void setTrafficSources(const QList &traffic_sources);
    bool is_traffic_sources_Set() const;
    bool is_traffic_sources_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_auto_scaling_group_name;
    bool m_auto_scaling_group_name_isSet;
    bool m_auto_scaling_group_name_isValid;

    QString m_launch_configuration_name;
    bool m_launch_configuration_name_isSet;
    bool m_launch_configuration_name_isValid;

    OAICreateAutoScalingGroupType_LaunchTemplate m_launch_template;
    bool m_launch_template_isSet;
    bool m_launch_template_isValid;

    OAICreateAutoScalingGroupType_MixedInstancesPolicy m_mixed_instances_policy;
    bool m_mixed_instances_policy_isSet;
    bool m_mixed_instances_policy_isValid;

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    qint32 m_min_size;
    bool m_min_size_isSet;
    bool m_min_size_isValid;

    qint32 m_max_size;
    bool m_max_size_isSet;
    bool m_max_size_isValid;

    qint32 m_desired_capacity;
    bool m_desired_capacity_isSet;
    bool m_desired_capacity_isValid;

    qint32 m_default_cooldown;
    bool m_default_cooldown_isSet;
    bool m_default_cooldown_isValid;

    QList m_availability_zones;
    bool m_availability_zones_isSet;
    bool m_availability_zones_isValid;

    QList m_load_balancer_names;
    bool m_load_balancer_names_isSet;
    bool m_load_balancer_names_isValid;

    QList m_target_group_arns;
    bool m_target_group_arns_isSet;
    bool m_target_group_arns_isValid;

    QString m_health_check_type;
    bool m_health_check_type_isSet;
    bool m_health_check_type_isValid;

    qint32 m_health_check_grace_period;
    bool m_health_check_grace_period_isSet;
    bool m_health_check_grace_period_isValid;

    QString m_placement_group;
    bool m_placement_group_isSet;
    bool m_placement_group_isValid;

    QString m_vpc_zone_identifier;
    bool m_vpc_zone_identifier_isSet;
    bool m_vpc_zone_identifier_isValid;

    QList m_termination_policies;
    bool m_termination_policies_isSet;
    bool m_termination_policies_isValid;

    bool m_new_instances_protected_from_scale_in;
    bool m_new_instances_protected_from_scale_in_isSet;
    bool m_new_instances_protected_from_scale_in_isValid;

    bool m_capacity_rebalance;
    bool m_capacity_rebalance_isSet;
    bool m_capacity_rebalance_isValid;

    QList m_lifecycle_hook_specification_list;
    bool m_lifecycle_hook_specification_list_isSet;
    bool m_lifecycle_hook_specification_list_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_service_linked_role_arn;
    bool m_service_linked_role_arn_isSet;
    bool m_service_linked_role_arn_isValid;

    qint32 m_max_instance_lifetime;
    bool m_max_instance_lifetime_isSet;
    bool m_max_instance_lifetime_isValid;

    QString m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    QString m_desired_capacity_type;
    bool m_desired_capacity_type_isSet;
    bool m_desired_capacity_type_isValid;

    qint32 m_default_instance_warmup;
    bool m_default_instance_warmup_isSet;
    bool m_default_instance_warmup_isValid;

    QList m_traffic_sources;
    bool m_traffic_sources_isSet;
    bool m_traffic_sources_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAutoScalingGroupType)

#endif // OAICreateAutoScalingGroupType_H
