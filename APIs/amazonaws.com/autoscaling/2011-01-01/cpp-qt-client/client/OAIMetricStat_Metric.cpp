/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricStat_Metric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricStat_Metric::OAIMetricStat_Metric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricStat_Metric::OAIMetricStat_Metric() {
    this->initializeModel();
}

OAIMetricStat_Metric::~OAIMetricStat_Metric() {}

void OAIMetricStat_Metric::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;
}

void OAIMetricStat_Metric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricStat_Metric::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;
}

QString OAIMetricStat_Metric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricStat_Metric::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    return obj;
}

QString OAIMetricStat_Metric::getRNamespace() const {
    return m_r_namespace;
}
void OAIMetricStat_Metric::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIMetricStat_Metric::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIMetricStat_Metric::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIMetricStat_Metric::getMetricName() const {
    return m_metric_name;
}
void OAIMetricStat_Metric::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIMetricStat_Metric::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIMetricStat_Metric::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QList OAIMetricStat_Metric::getDimensions() const {
    return m_dimensions;
}
void OAIMetricStat_Metric::setDimensions(const QList &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIMetricStat_Metric::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIMetricStat_Metric::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

bool OAIMetricStat_Metric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricStat_Metric::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_namespace_isValid && m_metric_name_isValid && true;
}

} // namespace OpenAPI
