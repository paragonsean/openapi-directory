/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityType_Activity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityType_Activity::OAIActivityType_Activity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityType_Activity::OAIActivityType_Activity() {
    this->initializeModel();
}

OAIActivityType_Activity::~OAIActivityType_Activity() {}

void OAIActivityType_Activity::initializeModel() {

    m_activity_id_isSet = false;
    m_activity_id_isValid = false;

    m_auto_scaling_group_name_isSet = false;
    m_auto_scaling_group_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_auto_scaling_group_state_isSet = false;
    m_auto_scaling_group_state_isValid = false;

    m_auto_scaling_group_arn_isSet = false;
    m_auto_scaling_group_arn_isValid = false;
}

void OAIActivityType_Activity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityType_Activity::fromJsonObject(QJsonObject json) {

    m_activity_id_isValid = ::OpenAPI::fromJsonValue(m_activity_id, json[QString("ActivityId")]);
    m_activity_id_isSet = !json[QString("ActivityId")].isNull() && m_activity_id_isValid;

    m_auto_scaling_group_name_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_name, json[QString("AutoScalingGroupName")]);
    m_auto_scaling_group_name_isSet = !json[QString("AutoScalingGroupName")].isNull() && m_auto_scaling_group_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("Cause")]);
    m_cause_isSet = !json[QString("Cause")].isNull() && m_cause_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("StatusCode")]);
    m_status_code_isSet = !json[QString("StatusCode")].isNull() && m_status_code_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("Progress")]);
    m_progress_isSet = !json[QString("Progress")].isNull() && m_progress_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("Details")]);
    m_details_isSet = !json[QString("Details")].isNull() && m_details_isValid;

    m_auto_scaling_group_state_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_state, json[QString("AutoScalingGroupState")]);
    m_auto_scaling_group_state_isSet = !json[QString("AutoScalingGroupState")].isNull() && m_auto_scaling_group_state_isValid;

    m_auto_scaling_group_arn_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_arn, json[QString("AutoScalingGroupARN")]);
    m_auto_scaling_group_arn_isSet = !json[QString("AutoScalingGroupARN")].isNull() && m_auto_scaling_group_arn_isValid;
}

QString OAIActivityType_Activity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityType_Activity::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_id_isSet) {
        obj.insert(QString("ActivityId"), ::OpenAPI::toJsonValue(m_activity_id));
    }
    if (m_auto_scaling_group_name_isSet) {
        obj.insert(QString("AutoScalingGroupName"), ::OpenAPI::toJsonValue(m_auto_scaling_group_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_cause_isSet) {
        obj.insert(QString("Cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_status_code.isSet()) {
        obj.insert(QString("StatusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_progress_isSet) {
        obj.insert(QString("Progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_details_isSet) {
        obj.insert(QString("Details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_auto_scaling_group_state_isSet) {
        obj.insert(QString("AutoScalingGroupState"), ::OpenAPI::toJsonValue(m_auto_scaling_group_state));
    }
    if (m_auto_scaling_group_arn_isSet) {
        obj.insert(QString("AutoScalingGroupARN"), ::OpenAPI::toJsonValue(m_auto_scaling_group_arn));
    }
    return obj;
}

QString OAIActivityType_Activity::getActivityId() const {
    return m_activity_id;
}
void OAIActivityType_Activity::setActivityId(const QString &activity_id) {
    m_activity_id = activity_id;
    m_activity_id_isSet = true;
}

bool OAIActivityType_Activity::is_activity_id_Set() const{
    return m_activity_id_isSet;
}

bool OAIActivityType_Activity::is_activity_id_Valid() const{
    return m_activity_id_isValid;
}

QString OAIActivityType_Activity::getAutoScalingGroupName() const {
    return m_auto_scaling_group_name;
}
void OAIActivityType_Activity::setAutoScalingGroupName(const QString &auto_scaling_group_name) {
    m_auto_scaling_group_name = auto_scaling_group_name;
    m_auto_scaling_group_name_isSet = true;
}

bool OAIActivityType_Activity::is_auto_scaling_group_name_Set() const{
    return m_auto_scaling_group_name_isSet;
}

bool OAIActivityType_Activity::is_auto_scaling_group_name_Valid() const{
    return m_auto_scaling_group_name_isValid;
}

QString OAIActivityType_Activity::getDescription() const {
    return m_description;
}
void OAIActivityType_Activity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIActivityType_Activity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIActivityType_Activity::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIActivityType_Activity::getCause() const {
    return m_cause;
}
void OAIActivityType_Activity::setCause(const QString &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAIActivityType_Activity::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIActivityType_Activity::is_cause_Valid() const{
    return m_cause_isValid;
}

QDateTime OAIActivityType_Activity::getStartTime() const {
    return m_start_time;
}
void OAIActivityType_Activity::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIActivityType_Activity::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIActivityType_Activity::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIActivityType_Activity::getEndTime() const {
    return m_end_time;
}
void OAIActivityType_Activity::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIActivityType_Activity::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIActivityType_Activity::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIScalingActivityStatusCode OAIActivityType_Activity::getStatusCode() const {
    return m_status_code;
}
void OAIActivityType_Activity::setStatusCode(const OAIScalingActivityStatusCode &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIActivityType_Activity::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIActivityType_Activity::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIActivityType_Activity::getStatusMessage() const {
    return m_status_message;
}
void OAIActivityType_Activity::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIActivityType_Activity::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIActivityType_Activity::is_status_message_Valid() const{
    return m_status_message_isValid;
}

qint32 OAIActivityType_Activity::getProgress() const {
    return m_progress;
}
void OAIActivityType_Activity::setProgress(const qint32 &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIActivityType_Activity::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIActivityType_Activity::is_progress_Valid() const{
    return m_progress_isValid;
}

QString OAIActivityType_Activity::getDetails() const {
    return m_details;
}
void OAIActivityType_Activity::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIActivityType_Activity::is_details_Set() const{
    return m_details_isSet;
}

bool OAIActivityType_Activity::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIActivityType_Activity::getAutoScalingGroupState() const {
    return m_auto_scaling_group_state;
}
void OAIActivityType_Activity::setAutoScalingGroupState(const QString &auto_scaling_group_state) {
    m_auto_scaling_group_state = auto_scaling_group_state;
    m_auto_scaling_group_state_isSet = true;
}

bool OAIActivityType_Activity::is_auto_scaling_group_state_Set() const{
    return m_auto_scaling_group_state_isSet;
}

bool OAIActivityType_Activity::is_auto_scaling_group_state_Valid() const{
    return m_auto_scaling_group_state_isValid;
}

QString OAIActivityType_Activity::getAutoScalingGroupArn() const {
    return m_auto_scaling_group_arn;
}
void OAIActivityType_Activity::setAutoScalingGroupArn(const QString &auto_scaling_group_arn) {
    m_auto_scaling_group_arn = auto_scaling_group_arn;
    m_auto_scaling_group_arn_isSet = true;
}

bool OAIActivityType_Activity::is_auto_scaling_group_arn_Set() const{
    return m_auto_scaling_group_arn_isSet;
}

bool OAIActivityType_Activity::is_auto_scaling_group_arn_Valid() const{
    return m_auto_scaling_group_arn_isValid;
}

bool OAIActivityType_Activity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_group_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityType_Activity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_id_isValid && m_auto_scaling_group_name_isValid && m_cause_isValid && m_start_time_isValid && m_status_code_isValid && true;
}

} // namespace OpenAPI
