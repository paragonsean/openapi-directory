/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaunchTemplateOverrides.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaunchTemplateOverrides::OAILaunchTemplateOverrides(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaunchTemplateOverrides::OAILaunchTemplateOverrides() {
    this->initializeModel();
}

OAILaunchTemplateOverrides::~OAILaunchTemplateOverrides() {}

void OAILaunchTemplateOverrides::initializeModel() {

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_weighted_capacity_isSet = false;
    m_weighted_capacity_isValid = false;

    m_launch_template_specification_isSet = false;
    m_launch_template_specification_isValid = false;

    m_instance_requirements_isSet = false;
    m_instance_requirements_isValid = false;
}

void OAILaunchTemplateOverrides::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILaunchTemplateOverrides::fromJsonObject(QJsonObject json) {

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_weighted_capacity_isValid = ::OpenAPI::fromJsonValue(m_weighted_capacity, json[QString("WeightedCapacity")]);
    m_weighted_capacity_isSet = !json[QString("WeightedCapacity")].isNull() && m_weighted_capacity_isValid;

    m_launch_template_specification_isValid = ::OpenAPI::fromJsonValue(m_launch_template_specification, json[QString("LaunchTemplateSpecification")]);
    m_launch_template_specification_isSet = !json[QString("LaunchTemplateSpecification")].isNull() && m_launch_template_specification_isValid;

    m_instance_requirements_isValid = ::OpenAPI::fromJsonValue(m_instance_requirements, json[QString("InstanceRequirements")]);
    m_instance_requirements_isSet = !json[QString("InstanceRequirements")].isNull() && m_instance_requirements_isValid;
}

QString OAILaunchTemplateOverrides::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILaunchTemplateOverrides::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_weighted_capacity_isSet) {
        obj.insert(QString("WeightedCapacity"), ::OpenAPI::toJsonValue(m_weighted_capacity));
    }
    if (m_launch_template_specification.isSet()) {
        obj.insert(QString("LaunchTemplateSpecification"), ::OpenAPI::toJsonValue(m_launch_template_specification));
    }
    if (m_instance_requirements.isSet()) {
        obj.insert(QString("InstanceRequirements"), ::OpenAPI::toJsonValue(m_instance_requirements));
    }
    return obj;
}

QString OAILaunchTemplateOverrides::getInstanceType() const {
    return m_instance_type;
}
void OAILaunchTemplateOverrides::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAILaunchTemplateOverrides::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAILaunchTemplateOverrides::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAILaunchTemplateOverrides::getWeightedCapacity() const {
    return m_weighted_capacity;
}
void OAILaunchTemplateOverrides::setWeightedCapacity(const QString &weighted_capacity) {
    m_weighted_capacity = weighted_capacity;
    m_weighted_capacity_isSet = true;
}

bool OAILaunchTemplateOverrides::is_weighted_capacity_Set() const{
    return m_weighted_capacity_isSet;
}

bool OAILaunchTemplateOverrides::is_weighted_capacity_Valid() const{
    return m_weighted_capacity_isValid;
}

OAILaunchTemplateOverrides_LaunchTemplateSpecification OAILaunchTemplateOverrides::getLaunchTemplateSpecification() const {
    return m_launch_template_specification;
}
void OAILaunchTemplateOverrides::setLaunchTemplateSpecification(const OAILaunchTemplateOverrides_LaunchTemplateSpecification &launch_template_specification) {
    m_launch_template_specification = launch_template_specification;
    m_launch_template_specification_isSet = true;
}

bool OAILaunchTemplateOverrides::is_launch_template_specification_Set() const{
    return m_launch_template_specification_isSet;
}

bool OAILaunchTemplateOverrides::is_launch_template_specification_Valid() const{
    return m_launch_template_specification_isValid;
}

OAILaunchTemplateOverrides_InstanceRequirements OAILaunchTemplateOverrides::getInstanceRequirements() const {
    return m_instance_requirements;
}
void OAILaunchTemplateOverrides::setInstanceRequirements(const OAILaunchTemplateOverrides_InstanceRequirements &instance_requirements) {
    m_instance_requirements = instance_requirements;
    m_instance_requirements_isSet = true;
}

bool OAILaunchTemplateOverrides::is_instance_requirements_Set() const{
    return m_instance_requirements_isSet;
}

bool OAILaunchTemplateOverrides::is_instance_requirements_Valid() const{
    return m_instance_requirements_isValid;
}

bool OAILaunchTemplateOverrides::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weighted_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_template_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILaunchTemplateOverrides::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
