/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution() {
    this->initializeModel();
}

OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::~OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution() {}

void OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::initializeModel() {

    m_on_demand_allocation_strategy_isSet = false;
    m_on_demand_allocation_strategy_isValid = false;

    m_on_demand_base_capacity_isSet = false;
    m_on_demand_base_capacity_isValid = false;

    m_on_demand_percentage_above_base_capacity_isSet = false;
    m_on_demand_percentage_above_base_capacity_isValid = false;

    m_spot_allocation_strategy_isSet = false;
    m_spot_allocation_strategy_isValid = false;

    m_spot_instance_pools_isSet = false;
    m_spot_instance_pools_isValid = false;

    m_spot_max_price_isSet = false;
    m_spot_max_price_isValid = false;
}

void OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::fromJsonObject(QJsonObject json) {

    m_on_demand_allocation_strategy_isValid = ::OpenAPI::fromJsonValue(m_on_demand_allocation_strategy, json[QString("OnDemandAllocationStrategy")]);
    m_on_demand_allocation_strategy_isSet = !json[QString("OnDemandAllocationStrategy")].isNull() && m_on_demand_allocation_strategy_isValid;

    m_on_demand_base_capacity_isValid = ::OpenAPI::fromJsonValue(m_on_demand_base_capacity, json[QString("OnDemandBaseCapacity")]);
    m_on_demand_base_capacity_isSet = !json[QString("OnDemandBaseCapacity")].isNull() && m_on_demand_base_capacity_isValid;

    m_on_demand_percentage_above_base_capacity_isValid = ::OpenAPI::fromJsonValue(m_on_demand_percentage_above_base_capacity, json[QString("OnDemandPercentageAboveBaseCapacity")]);
    m_on_demand_percentage_above_base_capacity_isSet = !json[QString("OnDemandPercentageAboveBaseCapacity")].isNull() && m_on_demand_percentage_above_base_capacity_isValid;

    m_spot_allocation_strategy_isValid = ::OpenAPI::fromJsonValue(m_spot_allocation_strategy, json[QString("SpotAllocationStrategy")]);
    m_spot_allocation_strategy_isSet = !json[QString("SpotAllocationStrategy")].isNull() && m_spot_allocation_strategy_isValid;

    m_spot_instance_pools_isValid = ::OpenAPI::fromJsonValue(m_spot_instance_pools, json[QString("SpotInstancePools")]);
    m_spot_instance_pools_isSet = !json[QString("SpotInstancePools")].isNull() && m_spot_instance_pools_isValid;

    m_spot_max_price_isValid = ::OpenAPI::fromJsonValue(m_spot_max_price, json[QString("SpotMaxPrice")]);
    m_spot_max_price_isSet = !json[QString("SpotMaxPrice")].isNull() && m_spot_max_price_isValid;
}

QString OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::asJsonObject() const {
    QJsonObject obj;
    if (m_on_demand_allocation_strategy_isSet) {
        obj.insert(QString("OnDemandAllocationStrategy"), ::OpenAPI::toJsonValue(m_on_demand_allocation_strategy));
    }
    if (m_on_demand_base_capacity_isSet) {
        obj.insert(QString("OnDemandBaseCapacity"), ::OpenAPI::toJsonValue(m_on_demand_base_capacity));
    }
    if (m_on_demand_percentage_above_base_capacity_isSet) {
        obj.insert(QString("OnDemandPercentageAboveBaseCapacity"), ::OpenAPI::toJsonValue(m_on_demand_percentage_above_base_capacity));
    }
    if (m_spot_allocation_strategy_isSet) {
        obj.insert(QString("SpotAllocationStrategy"), ::OpenAPI::toJsonValue(m_spot_allocation_strategy));
    }
    if (m_spot_instance_pools_isSet) {
        obj.insert(QString("SpotInstancePools"), ::OpenAPI::toJsonValue(m_spot_instance_pools));
    }
    if (m_spot_max_price_isSet) {
        obj.insert(QString("SpotMaxPrice"), ::OpenAPI::toJsonValue(m_spot_max_price));
    }
    return obj;
}

QString OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::getOnDemandAllocationStrategy() const {
    return m_on_demand_allocation_strategy;
}
void OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::setOnDemandAllocationStrategy(const QString &on_demand_allocation_strategy) {
    m_on_demand_allocation_strategy = on_demand_allocation_strategy;
    m_on_demand_allocation_strategy_isSet = true;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::is_on_demand_allocation_strategy_Set() const{
    return m_on_demand_allocation_strategy_isSet;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::is_on_demand_allocation_strategy_Valid() const{
    return m_on_demand_allocation_strategy_isValid;
}

qint32 OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::getOnDemandBaseCapacity() const {
    return m_on_demand_base_capacity;
}
void OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::setOnDemandBaseCapacity(const qint32 &on_demand_base_capacity) {
    m_on_demand_base_capacity = on_demand_base_capacity;
    m_on_demand_base_capacity_isSet = true;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::is_on_demand_base_capacity_Set() const{
    return m_on_demand_base_capacity_isSet;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::is_on_demand_base_capacity_Valid() const{
    return m_on_demand_base_capacity_isValid;
}

qint32 OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::getOnDemandPercentageAboveBaseCapacity() const {
    return m_on_demand_percentage_above_base_capacity;
}
void OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::setOnDemandPercentageAboveBaseCapacity(const qint32 &on_demand_percentage_above_base_capacity) {
    m_on_demand_percentage_above_base_capacity = on_demand_percentage_above_base_capacity;
    m_on_demand_percentage_above_base_capacity_isSet = true;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::is_on_demand_percentage_above_base_capacity_Set() const{
    return m_on_demand_percentage_above_base_capacity_isSet;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::is_on_demand_percentage_above_base_capacity_Valid() const{
    return m_on_demand_percentage_above_base_capacity_isValid;
}

QString OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::getSpotAllocationStrategy() const {
    return m_spot_allocation_strategy;
}
void OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::setSpotAllocationStrategy(const QString &spot_allocation_strategy) {
    m_spot_allocation_strategy = spot_allocation_strategy;
    m_spot_allocation_strategy_isSet = true;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::is_spot_allocation_strategy_Set() const{
    return m_spot_allocation_strategy_isSet;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::is_spot_allocation_strategy_Valid() const{
    return m_spot_allocation_strategy_isValid;
}

qint32 OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::getSpotInstancePools() const {
    return m_spot_instance_pools;
}
void OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::setSpotInstancePools(const qint32 &spot_instance_pools) {
    m_spot_instance_pools = spot_instance_pools;
    m_spot_instance_pools_isSet = true;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::is_spot_instance_pools_Set() const{
    return m_spot_instance_pools_isSet;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::is_spot_instance_pools_Valid() const{
    return m_spot_instance_pools_isValid;
}

QString OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::getSpotMaxPrice() const {
    return m_spot_max_price;
}
void OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::setSpotMaxPrice(const QString &spot_max_price) {
    m_spot_max_price = spot_max_price;
    m_spot_max_price_isSet = true;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::is_spot_max_price_Set() const{
    return m_spot_max_price_isSet;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::is_spot_max_price_Valid() const{
    return m_spot_max_price_isValid;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_on_demand_allocation_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_demand_base_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_demand_percentage_above_base_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spot_allocation_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spot_instance_pools_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spot_max_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGET_CreateAutoScalingGroup_MixedInstancesPolicy_parameter_InstancesDistribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
