/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScalingPolicy_PredictiveScalingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScalingPolicy_PredictiveScalingConfiguration::OAIScalingPolicy_PredictiveScalingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScalingPolicy_PredictiveScalingConfiguration::OAIScalingPolicy_PredictiveScalingConfiguration() {
    this->initializeModel();
}

OAIScalingPolicy_PredictiveScalingConfiguration::~OAIScalingPolicy_PredictiveScalingConfiguration() {}

void OAIScalingPolicy_PredictiveScalingConfiguration::initializeModel() {

    m_metric_specifications_isSet = false;
    m_metric_specifications_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_scheduling_buffer_time_isSet = false;
    m_scheduling_buffer_time_isValid = false;

    m_max_capacity_breach_behavior_isSet = false;
    m_max_capacity_breach_behavior_isValid = false;

    m_max_capacity_buffer_isSet = false;
    m_max_capacity_buffer_isValid = false;
}

void OAIScalingPolicy_PredictiveScalingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScalingPolicy_PredictiveScalingConfiguration::fromJsonObject(QJsonObject json) {

    m_metric_specifications_isValid = ::OpenAPI::fromJsonValue(m_metric_specifications, json[QString("MetricSpecifications")]);
    m_metric_specifications_isSet = !json[QString("MetricSpecifications")].isNull() && m_metric_specifications_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_scheduling_buffer_time_isValid = ::OpenAPI::fromJsonValue(m_scheduling_buffer_time, json[QString("SchedulingBufferTime")]);
    m_scheduling_buffer_time_isSet = !json[QString("SchedulingBufferTime")].isNull() && m_scheduling_buffer_time_isValid;

    m_max_capacity_breach_behavior_isValid = ::OpenAPI::fromJsonValue(m_max_capacity_breach_behavior, json[QString("MaxCapacityBreachBehavior")]);
    m_max_capacity_breach_behavior_isSet = !json[QString("MaxCapacityBreachBehavior")].isNull() && m_max_capacity_breach_behavior_isValid;

    m_max_capacity_buffer_isValid = ::OpenAPI::fromJsonValue(m_max_capacity_buffer, json[QString("MaxCapacityBuffer")]);
    m_max_capacity_buffer_isSet = !json[QString("MaxCapacityBuffer")].isNull() && m_max_capacity_buffer_isValid;
}

QString OAIScalingPolicy_PredictiveScalingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScalingPolicy_PredictiveScalingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_specifications.isSet()) {
        obj.insert(QString("MetricSpecifications"), ::OpenAPI::toJsonValue(m_metric_specifications));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_scheduling_buffer_time_isSet) {
        obj.insert(QString("SchedulingBufferTime"), ::OpenAPI::toJsonValue(m_scheduling_buffer_time));
    }
    if (m_max_capacity_breach_behavior.isSet()) {
        obj.insert(QString("MaxCapacityBreachBehavior"), ::OpenAPI::toJsonValue(m_max_capacity_breach_behavior));
    }
    if (m_max_capacity_buffer_isSet) {
        obj.insert(QString("MaxCapacityBuffer"), ::OpenAPI::toJsonValue(m_max_capacity_buffer));
    }
    return obj;
}

QList OAIScalingPolicy_PredictiveScalingConfiguration::getMetricSpecifications() const {
    return m_metric_specifications;
}
void OAIScalingPolicy_PredictiveScalingConfiguration::setMetricSpecifications(const QList &metric_specifications) {
    m_metric_specifications = metric_specifications;
    m_metric_specifications_isSet = true;
}

bool OAIScalingPolicy_PredictiveScalingConfiguration::is_metric_specifications_Set() const{
    return m_metric_specifications_isSet;
}

bool OAIScalingPolicy_PredictiveScalingConfiguration::is_metric_specifications_Valid() const{
    return m_metric_specifications_isValid;
}

OAIPredictiveScalingMode OAIScalingPolicy_PredictiveScalingConfiguration::getMode() const {
    return m_mode;
}
void OAIScalingPolicy_PredictiveScalingConfiguration::setMode(const OAIPredictiveScalingMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIScalingPolicy_PredictiveScalingConfiguration::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIScalingPolicy_PredictiveScalingConfiguration::is_mode_Valid() const{
    return m_mode_isValid;
}

qint32 OAIScalingPolicy_PredictiveScalingConfiguration::getSchedulingBufferTime() const {
    return m_scheduling_buffer_time;
}
void OAIScalingPolicy_PredictiveScalingConfiguration::setSchedulingBufferTime(const qint32 &scheduling_buffer_time) {
    m_scheduling_buffer_time = scheduling_buffer_time;
    m_scheduling_buffer_time_isSet = true;
}

bool OAIScalingPolicy_PredictiveScalingConfiguration::is_scheduling_buffer_time_Set() const{
    return m_scheduling_buffer_time_isSet;
}

bool OAIScalingPolicy_PredictiveScalingConfiguration::is_scheduling_buffer_time_Valid() const{
    return m_scheduling_buffer_time_isValid;
}

OAIPredictiveScalingMaxCapacityBreachBehavior OAIScalingPolicy_PredictiveScalingConfiguration::getMaxCapacityBreachBehavior() const {
    return m_max_capacity_breach_behavior;
}
void OAIScalingPolicy_PredictiveScalingConfiguration::setMaxCapacityBreachBehavior(const OAIPredictiveScalingMaxCapacityBreachBehavior &max_capacity_breach_behavior) {
    m_max_capacity_breach_behavior = max_capacity_breach_behavior;
    m_max_capacity_breach_behavior_isSet = true;
}

bool OAIScalingPolicy_PredictiveScalingConfiguration::is_max_capacity_breach_behavior_Set() const{
    return m_max_capacity_breach_behavior_isSet;
}

bool OAIScalingPolicy_PredictiveScalingConfiguration::is_max_capacity_breach_behavior_Valid() const{
    return m_max_capacity_breach_behavior_isValid;
}

qint32 OAIScalingPolicy_PredictiveScalingConfiguration::getMaxCapacityBuffer() const {
    return m_max_capacity_buffer;
}
void OAIScalingPolicy_PredictiveScalingConfiguration::setMaxCapacityBuffer(const qint32 &max_capacity_buffer) {
    m_max_capacity_buffer = max_capacity_buffer;
    m_max_capacity_buffer_isSet = true;
}

bool OAIScalingPolicy_PredictiveScalingConfiguration::is_max_capacity_buffer_Set() const{
    return m_max_capacity_buffer_isSet;
}

bool OAIScalingPolicy_PredictiveScalingConfiguration::is_max_capacity_buffer_Valid() const{
    return m_max_capacity_buffer_isValid;
}

bool OAIScalingPolicy_PredictiveScalingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_specifications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling_buffer_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_breach_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_buffer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScalingPolicy_PredictiveScalingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_specifications_isValid && true;
}

} // namespace OpenAPI
