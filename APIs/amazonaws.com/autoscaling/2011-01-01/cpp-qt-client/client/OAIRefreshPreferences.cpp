/**
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefreshPreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefreshPreferences::OAIRefreshPreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefreshPreferences::OAIRefreshPreferences() {
    this->initializeModel();
}

OAIRefreshPreferences::~OAIRefreshPreferences() {}

void OAIRefreshPreferences::initializeModel() {

    m_min_healthy_percentage_isSet = false;
    m_min_healthy_percentage_isValid = false;

    m_instance_warmup_isSet = false;
    m_instance_warmup_isValid = false;

    m_checkpoint_percentages_isSet = false;
    m_checkpoint_percentages_isValid = false;

    m_checkpoint_delay_isSet = false;
    m_checkpoint_delay_isValid = false;

    m_skip_matching_isSet = false;
    m_skip_matching_isValid = false;

    m_auto_rollback_isSet = false;
    m_auto_rollback_isValid = false;

    m_scale_in_protected_instances_isSet = false;
    m_scale_in_protected_instances_isValid = false;

    m_standby_instances_isSet = false;
    m_standby_instances_isValid = false;

    m_alarm_specification_isSet = false;
    m_alarm_specification_isValid = false;
}

void OAIRefreshPreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefreshPreferences::fromJsonObject(QJsonObject json) {

    m_min_healthy_percentage_isValid = ::OpenAPI::fromJsonValue(m_min_healthy_percentage, json[QString("MinHealthyPercentage")]);
    m_min_healthy_percentage_isSet = !json[QString("MinHealthyPercentage")].isNull() && m_min_healthy_percentage_isValid;

    m_instance_warmup_isValid = ::OpenAPI::fromJsonValue(m_instance_warmup, json[QString("InstanceWarmup")]);
    m_instance_warmup_isSet = !json[QString("InstanceWarmup")].isNull() && m_instance_warmup_isValid;

    m_checkpoint_percentages_isValid = ::OpenAPI::fromJsonValue(m_checkpoint_percentages, json[QString("CheckpointPercentages")]);
    m_checkpoint_percentages_isSet = !json[QString("CheckpointPercentages")].isNull() && m_checkpoint_percentages_isValid;

    m_checkpoint_delay_isValid = ::OpenAPI::fromJsonValue(m_checkpoint_delay, json[QString("CheckpointDelay")]);
    m_checkpoint_delay_isSet = !json[QString("CheckpointDelay")].isNull() && m_checkpoint_delay_isValid;

    m_skip_matching_isValid = ::OpenAPI::fromJsonValue(m_skip_matching, json[QString("SkipMatching")]);
    m_skip_matching_isSet = !json[QString("SkipMatching")].isNull() && m_skip_matching_isValid;

    m_auto_rollback_isValid = ::OpenAPI::fromJsonValue(m_auto_rollback, json[QString("AutoRollback")]);
    m_auto_rollback_isSet = !json[QString("AutoRollback")].isNull() && m_auto_rollback_isValid;

    m_scale_in_protected_instances_isValid = ::OpenAPI::fromJsonValue(m_scale_in_protected_instances, json[QString("ScaleInProtectedInstances")]);
    m_scale_in_protected_instances_isSet = !json[QString("ScaleInProtectedInstances")].isNull() && m_scale_in_protected_instances_isValid;

    m_standby_instances_isValid = ::OpenAPI::fromJsonValue(m_standby_instances, json[QString("StandbyInstances")]);
    m_standby_instances_isSet = !json[QString("StandbyInstances")].isNull() && m_standby_instances_isValid;

    m_alarm_specification_isValid = ::OpenAPI::fromJsonValue(m_alarm_specification, json[QString("AlarmSpecification")]);
    m_alarm_specification_isSet = !json[QString("AlarmSpecification")].isNull() && m_alarm_specification_isValid;
}

QString OAIRefreshPreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefreshPreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_min_healthy_percentage_isSet) {
        obj.insert(QString("MinHealthyPercentage"), ::OpenAPI::toJsonValue(m_min_healthy_percentage));
    }
    if (m_instance_warmup_isSet) {
        obj.insert(QString("InstanceWarmup"), ::OpenAPI::toJsonValue(m_instance_warmup));
    }
    if (m_checkpoint_percentages.isSet()) {
        obj.insert(QString("CheckpointPercentages"), ::OpenAPI::toJsonValue(m_checkpoint_percentages));
    }
    if (m_checkpoint_delay_isSet) {
        obj.insert(QString("CheckpointDelay"), ::OpenAPI::toJsonValue(m_checkpoint_delay));
    }
    if (m_skip_matching_isSet) {
        obj.insert(QString("SkipMatching"), ::OpenAPI::toJsonValue(m_skip_matching));
    }
    if (m_auto_rollback_isSet) {
        obj.insert(QString("AutoRollback"), ::OpenAPI::toJsonValue(m_auto_rollback));
    }
    if (m_scale_in_protected_instances.isSet()) {
        obj.insert(QString("ScaleInProtectedInstances"), ::OpenAPI::toJsonValue(m_scale_in_protected_instances));
    }
    if (m_standby_instances.isSet()) {
        obj.insert(QString("StandbyInstances"), ::OpenAPI::toJsonValue(m_standby_instances));
    }
    if (m_alarm_specification.isSet()) {
        obj.insert(QString("AlarmSpecification"), ::OpenAPI::toJsonValue(m_alarm_specification));
    }
    return obj;
}

qint32 OAIRefreshPreferences::getMinHealthyPercentage() const {
    return m_min_healthy_percentage;
}
void OAIRefreshPreferences::setMinHealthyPercentage(const qint32 &min_healthy_percentage) {
    m_min_healthy_percentage = min_healthy_percentage;
    m_min_healthy_percentage_isSet = true;
}

bool OAIRefreshPreferences::is_min_healthy_percentage_Set() const{
    return m_min_healthy_percentage_isSet;
}

bool OAIRefreshPreferences::is_min_healthy_percentage_Valid() const{
    return m_min_healthy_percentage_isValid;
}

qint32 OAIRefreshPreferences::getInstanceWarmup() const {
    return m_instance_warmup;
}
void OAIRefreshPreferences::setInstanceWarmup(const qint32 &instance_warmup) {
    m_instance_warmup = instance_warmup;
    m_instance_warmup_isSet = true;
}

bool OAIRefreshPreferences::is_instance_warmup_Set() const{
    return m_instance_warmup_isSet;
}

bool OAIRefreshPreferences::is_instance_warmup_Valid() const{
    return m_instance_warmup_isValid;
}

QList OAIRefreshPreferences::getCheckpointPercentages() const {
    return m_checkpoint_percentages;
}
void OAIRefreshPreferences::setCheckpointPercentages(const QList &checkpoint_percentages) {
    m_checkpoint_percentages = checkpoint_percentages;
    m_checkpoint_percentages_isSet = true;
}

bool OAIRefreshPreferences::is_checkpoint_percentages_Set() const{
    return m_checkpoint_percentages_isSet;
}

bool OAIRefreshPreferences::is_checkpoint_percentages_Valid() const{
    return m_checkpoint_percentages_isValid;
}

qint32 OAIRefreshPreferences::getCheckpointDelay() const {
    return m_checkpoint_delay;
}
void OAIRefreshPreferences::setCheckpointDelay(const qint32 &checkpoint_delay) {
    m_checkpoint_delay = checkpoint_delay;
    m_checkpoint_delay_isSet = true;
}

bool OAIRefreshPreferences::is_checkpoint_delay_Set() const{
    return m_checkpoint_delay_isSet;
}

bool OAIRefreshPreferences::is_checkpoint_delay_Valid() const{
    return m_checkpoint_delay_isValid;
}

bool OAIRefreshPreferences::getSkipMatching() const {
    return m_skip_matching;
}
void OAIRefreshPreferences::setSkipMatching(const bool &skip_matching) {
    m_skip_matching = skip_matching;
    m_skip_matching_isSet = true;
}

bool OAIRefreshPreferences::is_skip_matching_Set() const{
    return m_skip_matching_isSet;
}

bool OAIRefreshPreferences::is_skip_matching_Valid() const{
    return m_skip_matching_isValid;
}

bool OAIRefreshPreferences::getAutoRollback() const {
    return m_auto_rollback;
}
void OAIRefreshPreferences::setAutoRollback(const bool &auto_rollback) {
    m_auto_rollback = auto_rollback;
    m_auto_rollback_isSet = true;
}

bool OAIRefreshPreferences::is_auto_rollback_Set() const{
    return m_auto_rollback_isSet;
}

bool OAIRefreshPreferences::is_auto_rollback_Valid() const{
    return m_auto_rollback_isValid;
}

OAIScaleInProtectedInstances OAIRefreshPreferences::getScaleInProtectedInstances() const {
    return m_scale_in_protected_instances;
}
void OAIRefreshPreferences::setScaleInProtectedInstances(const OAIScaleInProtectedInstances &scale_in_protected_instances) {
    m_scale_in_protected_instances = scale_in_protected_instances;
    m_scale_in_protected_instances_isSet = true;
}

bool OAIRefreshPreferences::is_scale_in_protected_instances_Set() const{
    return m_scale_in_protected_instances_isSet;
}

bool OAIRefreshPreferences::is_scale_in_protected_instances_Valid() const{
    return m_scale_in_protected_instances_isValid;
}

OAIStandbyInstances OAIRefreshPreferences::getStandbyInstances() const {
    return m_standby_instances;
}
void OAIRefreshPreferences::setStandbyInstances(const OAIStandbyInstances &standby_instances) {
    m_standby_instances = standby_instances;
    m_standby_instances_isSet = true;
}

bool OAIRefreshPreferences::is_standby_instances_Set() const{
    return m_standby_instances_isSet;
}

bool OAIRefreshPreferences::is_standby_instances_Valid() const{
    return m_standby_instances_isValid;
}

OAIGET_StartInstanceRefresh_Preferences_parameter_AlarmSpecification OAIRefreshPreferences::getAlarmSpecification() const {
    return m_alarm_specification;
}
void OAIRefreshPreferences::setAlarmSpecification(const OAIGET_StartInstanceRefresh_Preferences_parameter_AlarmSpecification &alarm_specification) {
    m_alarm_specification = alarm_specification;
    m_alarm_specification_isSet = true;
}

bool OAIRefreshPreferences::is_alarm_specification_Set() const{
    return m_alarm_specification_isSet;
}

bool OAIRefreshPreferences::is_alarm_specification_Valid() const{
    return m_alarm_specification_isValid;
}

bool OAIRefreshPreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_healthy_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_warmup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkpoint_percentages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkpoint_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_matching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_rollback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_in_protected_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standby_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefreshPreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
