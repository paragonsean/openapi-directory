# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetDesiredCapacityType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_scaling_group_name: str=None, desired_capacity: int=None, honor_cooldown: bool=None):
        """SetDesiredCapacityType - a model defined in OpenAPI

        :param auto_scaling_group_name: The auto_scaling_group_name of this SetDesiredCapacityType.
        :param desired_capacity: The desired_capacity of this SetDesiredCapacityType.
        :param honor_cooldown: The honor_cooldown of this SetDesiredCapacityType.
        """
        self.openapi_types = {
            'auto_scaling_group_name': str,
            'desired_capacity': int,
            'honor_cooldown': bool
        }

        self.attribute_map = {
            'auto_scaling_group_name': 'AutoScalingGroupName',
            'desired_capacity': 'DesiredCapacity',
            'honor_cooldown': 'HonorCooldown'
        }

        self._auto_scaling_group_name = auto_scaling_group_name
        self._desired_capacity = desired_capacity
        self._honor_cooldown = honor_cooldown

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetDesiredCapacityType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetDesiredCapacityType of this SetDesiredCapacityType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_scaling_group_name(self):
        """Gets the auto_scaling_group_name of this SetDesiredCapacityType.


        :return: The auto_scaling_group_name of this SetDesiredCapacityType.
        :rtype: str
        """
        return self._auto_scaling_group_name

    @auto_scaling_group_name.setter
    def auto_scaling_group_name(self, auto_scaling_group_name):
        """Sets the auto_scaling_group_name of this SetDesiredCapacityType.


        :param auto_scaling_group_name: The auto_scaling_group_name of this SetDesiredCapacityType.
        :type auto_scaling_group_name: str
        """
        if auto_scaling_group_name is None:
            raise ValueError("Invalid value for `auto_scaling_group_name`, must not be `None`")

        self._auto_scaling_group_name = auto_scaling_group_name

    @property
    def desired_capacity(self):
        """Gets the desired_capacity of this SetDesiredCapacityType.


        :return: The desired_capacity of this SetDesiredCapacityType.
        :rtype: int
        """
        return self._desired_capacity

    @desired_capacity.setter
    def desired_capacity(self, desired_capacity):
        """Sets the desired_capacity of this SetDesiredCapacityType.


        :param desired_capacity: The desired_capacity of this SetDesiredCapacityType.
        :type desired_capacity: int
        """
        if desired_capacity is None:
            raise ValueError("Invalid value for `desired_capacity`, must not be `None`")

        self._desired_capacity = desired_capacity

    @property
    def honor_cooldown(self):
        """Gets the honor_cooldown of this SetDesiredCapacityType.


        :return: The honor_cooldown of this SetDesiredCapacityType.
        :rtype: bool
        """
        return self._honor_cooldown

    @honor_cooldown.setter
    def honor_cooldown(self, honor_cooldown):
        """Sets the honor_cooldown of this SetDesiredCapacityType.


        :param honor_cooldown: The honor_cooldown of this SetDesiredCapacityType.
        :type honor_cooldown: bool
        """

        self._honor_cooldown = honor_cooldown
