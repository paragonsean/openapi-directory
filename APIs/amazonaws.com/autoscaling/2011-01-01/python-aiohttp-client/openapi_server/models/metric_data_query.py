# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_data_query_metric_stat import MetricDataQueryMetricStat
from openapi_server import util


class MetricDataQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, expression: str=None, metric_stat: MetricDataQueryMetricStat=None, label: str=None, return_data: bool=None):
        """MetricDataQuery - a model defined in OpenAPI

        :param id: The id of this MetricDataQuery.
        :param expression: The expression of this MetricDataQuery.
        :param metric_stat: The metric_stat of this MetricDataQuery.
        :param label: The label of this MetricDataQuery.
        :param return_data: The return_data of this MetricDataQuery.
        """
        self.openapi_types = {
            'id': str,
            'expression': str,
            'metric_stat': MetricDataQueryMetricStat,
            'label': str,
            'return_data': bool
        }

        self.attribute_map = {
            'id': 'Id',
            'expression': 'Expression',
            'metric_stat': 'MetricStat',
            'label': 'Label',
            'return_data': 'ReturnData'
        }

        self._id = id
        self._expression = expression
        self._metric_stat = metric_stat
        self._label = label
        self._return_data = return_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricDataQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricDataQuery of this MetricDataQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MetricDataQuery.


        :return: The id of this MetricDataQuery.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricDataQuery.


        :param id: The id of this MetricDataQuery.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def expression(self):
        """Gets the expression of this MetricDataQuery.


        :return: The expression of this MetricDataQuery.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this MetricDataQuery.


        :param expression: The expression of this MetricDataQuery.
        :type expression: str
        """

        self._expression = expression

    @property
    def metric_stat(self):
        """Gets the metric_stat of this MetricDataQuery.


        :return: The metric_stat of this MetricDataQuery.
        :rtype: MetricDataQueryMetricStat
        """
        return self._metric_stat

    @metric_stat.setter
    def metric_stat(self, metric_stat):
        """Sets the metric_stat of this MetricDataQuery.


        :param metric_stat: The metric_stat of this MetricDataQuery.
        :type metric_stat: MetricDataQueryMetricStat
        """

        self._metric_stat = metric_stat

    @property
    def label(self):
        """Gets the label of this MetricDataQuery.


        :return: The label of this MetricDataQuery.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this MetricDataQuery.


        :param label: The label of this MetricDataQuery.
        :type label: str
        """

        self._label = label

    @property
    def return_data(self):
        """Gets the return_data of this MetricDataQuery.


        :return: The return_data of this MetricDataQuery.
        :rtype: bool
        """
        return self._return_data

    @return_data.setter
    def return_data(self, return_data):
        """Sets the return_data of this MetricDataQuery.


        :param return_data: The return_data of this MetricDataQuery.
        :type return_data: bool
        """

        self._return_data = return_data
