# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_predictive_scaling_forecast_answer_capacity_forecast import GetPredictiveScalingForecastAnswerCapacityForecast
from openapi_server import util


class GetPredictiveScalingForecastAnswer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, load_forecast: List=None, capacity_forecast: GetPredictiveScalingForecastAnswerCapacityForecast=None, update_time: datetime=None):
        """GetPredictiveScalingForecastAnswer - a model defined in OpenAPI

        :param load_forecast: The load_forecast of this GetPredictiveScalingForecastAnswer.
        :param capacity_forecast: The capacity_forecast of this GetPredictiveScalingForecastAnswer.
        :param update_time: The update_time of this GetPredictiveScalingForecastAnswer.
        """
        self.openapi_types = {
            'load_forecast': List,
            'capacity_forecast': GetPredictiveScalingForecastAnswerCapacityForecast,
            'update_time': datetime
        }

        self.attribute_map = {
            'load_forecast': 'LoadForecast',
            'capacity_forecast': 'CapacityForecast',
            'update_time': 'UpdateTime'
        }

        self._load_forecast = load_forecast
        self._capacity_forecast = capacity_forecast
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPredictiveScalingForecastAnswer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPredictiveScalingForecastAnswer of this GetPredictiveScalingForecastAnswer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load_forecast(self):
        """Gets the load_forecast of this GetPredictiveScalingForecastAnswer.


        :return: The load_forecast of this GetPredictiveScalingForecastAnswer.
        :rtype: List
        """
        return self._load_forecast

    @load_forecast.setter
    def load_forecast(self, load_forecast):
        """Sets the load_forecast of this GetPredictiveScalingForecastAnswer.


        :param load_forecast: The load_forecast of this GetPredictiveScalingForecastAnswer.
        :type load_forecast: List
        """
        if load_forecast is None:
            raise ValueError("Invalid value for `load_forecast`, must not be `None`")

        self._load_forecast = load_forecast

    @property
    def capacity_forecast(self):
        """Gets the capacity_forecast of this GetPredictiveScalingForecastAnswer.


        :return: The capacity_forecast of this GetPredictiveScalingForecastAnswer.
        :rtype: GetPredictiveScalingForecastAnswerCapacityForecast
        """
        return self._capacity_forecast

    @capacity_forecast.setter
    def capacity_forecast(self, capacity_forecast):
        """Sets the capacity_forecast of this GetPredictiveScalingForecastAnswer.


        :param capacity_forecast: The capacity_forecast of this GetPredictiveScalingForecastAnswer.
        :type capacity_forecast: GetPredictiveScalingForecastAnswerCapacityForecast
        """
        if capacity_forecast is None:
            raise ValueError("Invalid value for `capacity_forecast`, must not be `None`")

        self._capacity_forecast = capacity_forecast

    @property
    def update_time(self):
        """Gets the update_time of this GetPredictiveScalingForecastAnswer.


        :return: The update_time of this GetPredictiveScalingForecastAnswer.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GetPredictiveScalingForecastAnswer.


        :param update_time: The update_time of this GetPredictiveScalingForecastAnswer.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time
