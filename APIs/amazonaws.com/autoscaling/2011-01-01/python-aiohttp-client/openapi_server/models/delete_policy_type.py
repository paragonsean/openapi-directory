# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeletePolicyType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_scaling_group_name: str=None, policy_name: str=None):
        """DeletePolicyType - a model defined in OpenAPI

        :param auto_scaling_group_name: The auto_scaling_group_name of this DeletePolicyType.
        :param policy_name: The policy_name of this DeletePolicyType.
        """
        self.openapi_types = {
            'auto_scaling_group_name': str,
            'policy_name': str
        }

        self.attribute_map = {
            'auto_scaling_group_name': 'AutoScalingGroupName',
            'policy_name': 'PolicyName'
        }

        self._auto_scaling_group_name = auto_scaling_group_name
        self._policy_name = policy_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeletePolicyType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeletePolicyType of this DeletePolicyType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_scaling_group_name(self):
        """Gets the auto_scaling_group_name of this DeletePolicyType.


        :return: The auto_scaling_group_name of this DeletePolicyType.
        :rtype: str
        """
        return self._auto_scaling_group_name

    @auto_scaling_group_name.setter
    def auto_scaling_group_name(self, auto_scaling_group_name):
        """Sets the auto_scaling_group_name of this DeletePolicyType.


        :param auto_scaling_group_name: The auto_scaling_group_name of this DeletePolicyType.
        :type auto_scaling_group_name: str
        """

        self._auto_scaling_group_name = auto_scaling_group_name

    @property
    def policy_name(self):
        """Gets the policy_name of this DeletePolicyType.


        :return: The policy_name of this DeletePolicyType.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this DeletePolicyType.


        :param policy_name: The policy_name of this DeletePolicyType.
        :type policy_name: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")

        self._policy_name = policy_name
