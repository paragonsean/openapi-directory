# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_auto_scaling_group_type_launch_template import CreateAutoScalingGroupTypeLaunchTemplate
from openapi_server.models.create_auto_scaling_group_type_mixed_instances_policy import CreateAutoScalingGroupTypeMixedInstancesPolicy
from openapi_server import util


class CreateAutoScalingGroupType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_scaling_group_name: str=None, launch_configuration_name: str=None, launch_template: CreateAutoScalingGroupTypeLaunchTemplate=None, mixed_instances_policy: CreateAutoScalingGroupTypeMixedInstancesPolicy=None, instance_id: str=None, min_size: int=None, max_size: int=None, desired_capacity: int=None, default_cooldown: int=None, availability_zones: List=None, load_balancer_names: List=None, target_group_arns: List=None, health_check_type: str=None, health_check_grace_period: int=None, placement_group: str=None, vpc_zone_identifier: str=None, termination_policies: List=None, new_instances_protected_from_scale_in: bool=None, capacity_rebalance: bool=None, lifecycle_hook_specification_list: List=None, tags: List=None, service_linked_role_arn: str=None, max_instance_lifetime: int=None, context: str=None, desired_capacity_type: str=None, default_instance_warmup: int=None, traffic_sources: List=None):
        """CreateAutoScalingGroupType - a model defined in OpenAPI

        :param auto_scaling_group_name: The auto_scaling_group_name of this CreateAutoScalingGroupType.
        :param launch_configuration_name: The launch_configuration_name of this CreateAutoScalingGroupType.
        :param launch_template: The launch_template of this CreateAutoScalingGroupType.
        :param mixed_instances_policy: The mixed_instances_policy of this CreateAutoScalingGroupType.
        :param instance_id: The instance_id of this CreateAutoScalingGroupType.
        :param min_size: The min_size of this CreateAutoScalingGroupType.
        :param max_size: The max_size of this CreateAutoScalingGroupType.
        :param desired_capacity: The desired_capacity of this CreateAutoScalingGroupType.
        :param default_cooldown: The default_cooldown of this CreateAutoScalingGroupType.
        :param availability_zones: The availability_zones of this CreateAutoScalingGroupType.
        :param load_balancer_names: The load_balancer_names of this CreateAutoScalingGroupType.
        :param target_group_arns: The target_group_arns of this CreateAutoScalingGroupType.
        :param health_check_type: The health_check_type of this CreateAutoScalingGroupType.
        :param health_check_grace_period: The health_check_grace_period of this CreateAutoScalingGroupType.
        :param placement_group: The placement_group of this CreateAutoScalingGroupType.
        :param vpc_zone_identifier: The vpc_zone_identifier of this CreateAutoScalingGroupType.
        :param termination_policies: The termination_policies of this CreateAutoScalingGroupType.
        :param new_instances_protected_from_scale_in: The new_instances_protected_from_scale_in of this CreateAutoScalingGroupType.
        :param capacity_rebalance: The capacity_rebalance of this CreateAutoScalingGroupType.
        :param lifecycle_hook_specification_list: The lifecycle_hook_specification_list of this CreateAutoScalingGroupType.
        :param tags: The tags of this CreateAutoScalingGroupType.
        :param service_linked_role_arn: The service_linked_role_arn of this CreateAutoScalingGroupType.
        :param max_instance_lifetime: The max_instance_lifetime of this CreateAutoScalingGroupType.
        :param context: The context of this CreateAutoScalingGroupType.
        :param desired_capacity_type: The desired_capacity_type of this CreateAutoScalingGroupType.
        :param default_instance_warmup: The default_instance_warmup of this CreateAutoScalingGroupType.
        :param traffic_sources: The traffic_sources of this CreateAutoScalingGroupType.
        """
        self.openapi_types = {
            'auto_scaling_group_name': str,
            'launch_configuration_name': str,
            'launch_template': CreateAutoScalingGroupTypeLaunchTemplate,
            'mixed_instances_policy': CreateAutoScalingGroupTypeMixedInstancesPolicy,
            'instance_id': str,
            'min_size': int,
            'max_size': int,
            'desired_capacity': int,
            'default_cooldown': int,
            'availability_zones': List,
            'load_balancer_names': List,
            'target_group_arns': List,
            'health_check_type': str,
            'health_check_grace_period': int,
            'placement_group': str,
            'vpc_zone_identifier': str,
            'termination_policies': List,
            'new_instances_protected_from_scale_in': bool,
            'capacity_rebalance': bool,
            'lifecycle_hook_specification_list': List,
            'tags': List,
            'service_linked_role_arn': str,
            'max_instance_lifetime': int,
            'context': str,
            'desired_capacity_type': str,
            'default_instance_warmup': int,
            'traffic_sources': List
        }

        self.attribute_map = {
            'auto_scaling_group_name': 'AutoScalingGroupName',
            'launch_configuration_name': 'LaunchConfigurationName',
            'launch_template': 'LaunchTemplate',
            'mixed_instances_policy': 'MixedInstancesPolicy',
            'instance_id': 'InstanceId',
            'min_size': 'MinSize',
            'max_size': 'MaxSize',
            'desired_capacity': 'DesiredCapacity',
            'default_cooldown': 'DefaultCooldown',
            'availability_zones': 'AvailabilityZones',
            'load_balancer_names': 'LoadBalancerNames',
            'target_group_arns': 'TargetGroupARNs',
            'health_check_type': 'HealthCheckType',
            'health_check_grace_period': 'HealthCheckGracePeriod',
            'placement_group': 'PlacementGroup',
            'vpc_zone_identifier': 'VPCZoneIdentifier',
            'termination_policies': 'TerminationPolicies',
            'new_instances_protected_from_scale_in': 'NewInstancesProtectedFromScaleIn',
            'capacity_rebalance': 'CapacityRebalance',
            'lifecycle_hook_specification_list': 'LifecycleHookSpecificationList',
            'tags': 'Tags',
            'service_linked_role_arn': 'ServiceLinkedRoleARN',
            'max_instance_lifetime': 'MaxInstanceLifetime',
            'context': 'Context',
            'desired_capacity_type': 'DesiredCapacityType',
            'default_instance_warmup': 'DefaultInstanceWarmup',
            'traffic_sources': 'TrafficSources'
        }

        self._auto_scaling_group_name = auto_scaling_group_name
        self._launch_configuration_name = launch_configuration_name
        self._launch_template = launch_template
        self._mixed_instances_policy = mixed_instances_policy
        self._instance_id = instance_id
        self._min_size = min_size
        self._max_size = max_size
        self._desired_capacity = desired_capacity
        self._default_cooldown = default_cooldown
        self._availability_zones = availability_zones
        self._load_balancer_names = load_balancer_names
        self._target_group_arns = target_group_arns
        self._health_check_type = health_check_type
        self._health_check_grace_period = health_check_grace_period
        self._placement_group = placement_group
        self._vpc_zone_identifier = vpc_zone_identifier
        self._termination_policies = termination_policies
        self._new_instances_protected_from_scale_in = new_instances_protected_from_scale_in
        self._capacity_rebalance = capacity_rebalance
        self._lifecycle_hook_specification_list = lifecycle_hook_specification_list
        self._tags = tags
        self._service_linked_role_arn = service_linked_role_arn
        self._max_instance_lifetime = max_instance_lifetime
        self._context = context
        self._desired_capacity_type = desired_capacity_type
        self._default_instance_warmup = default_instance_warmup
        self._traffic_sources = traffic_sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAutoScalingGroupType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAutoScalingGroupType of this CreateAutoScalingGroupType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_scaling_group_name(self):
        """Gets the auto_scaling_group_name of this CreateAutoScalingGroupType.


        :return: The auto_scaling_group_name of this CreateAutoScalingGroupType.
        :rtype: str
        """
        return self._auto_scaling_group_name

    @auto_scaling_group_name.setter
    def auto_scaling_group_name(self, auto_scaling_group_name):
        """Sets the auto_scaling_group_name of this CreateAutoScalingGroupType.


        :param auto_scaling_group_name: The auto_scaling_group_name of this CreateAutoScalingGroupType.
        :type auto_scaling_group_name: str
        """
        if auto_scaling_group_name is None:
            raise ValueError("Invalid value for `auto_scaling_group_name`, must not be `None`")

        self._auto_scaling_group_name = auto_scaling_group_name

    @property
    def launch_configuration_name(self):
        """Gets the launch_configuration_name of this CreateAutoScalingGroupType.


        :return: The launch_configuration_name of this CreateAutoScalingGroupType.
        :rtype: str
        """
        return self._launch_configuration_name

    @launch_configuration_name.setter
    def launch_configuration_name(self, launch_configuration_name):
        """Sets the launch_configuration_name of this CreateAutoScalingGroupType.


        :param launch_configuration_name: The launch_configuration_name of this CreateAutoScalingGroupType.
        :type launch_configuration_name: str
        """

        self._launch_configuration_name = launch_configuration_name

    @property
    def launch_template(self):
        """Gets the launch_template of this CreateAutoScalingGroupType.


        :return: The launch_template of this CreateAutoScalingGroupType.
        :rtype: CreateAutoScalingGroupTypeLaunchTemplate
        """
        return self._launch_template

    @launch_template.setter
    def launch_template(self, launch_template):
        """Sets the launch_template of this CreateAutoScalingGroupType.


        :param launch_template: The launch_template of this CreateAutoScalingGroupType.
        :type launch_template: CreateAutoScalingGroupTypeLaunchTemplate
        """

        self._launch_template = launch_template

    @property
    def mixed_instances_policy(self):
        """Gets the mixed_instances_policy of this CreateAutoScalingGroupType.


        :return: The mixed_instances_policy of this CreateAutoScalingGroupType.
        :rtype: CreateAutoScalingGroupTypeMixedInstancesPolicy
        """
        return self._mixed_instances_policy

    @mixed_instances_policy.setter
    def mixed_instances_policy(self, mixed_instances_policy):
        """Sets the mixed_instances_policy of this CreateAutoScalingGroupType.


        :param mixed_instances_policy: The mixed_instances_policy of this CreateAutoScalingGroupType.
        :type mixed_instances_policy: CreateAutoScalingGroupTypeMixedInstancesPolicy
        """

        self._mixed_instances_policy = mixed_instances_policy

    @property
    def instance_id(self):
        """Gets the instance_id of this CreateAutoScalingGroupType.


        :return: The instance_id of this CreateAutoScalingGroupType.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this CreateAutoScalingGroupType.


        :param instance_id: The instance_id of this CreateAutoScalingGroupType.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def min_size(self):
        """Gets the min_size of this CreateAutoScalingGroupType.


        :return: The min_size of this CreateAutoScalingGroupType.
        :rtype: int
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size):
        """Sets the min_size of this CreateAutoScalingGroupType.


        :param min_size: The min_size of this CreateAutoScalingGroupType.
        :type min_size: int
        """
        if min_size is None:
            raise ValueError("Invalid value for `min_size`, must not be `None`")

        self._min_size = min_size

    @property
    def max_size(self):
        """Gets the max_size of this CreateAutoScalingGroupType.


        :return: The max_size of this CreateAutoScalingGroupType.
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this CreateAutoScalingGroupType.


        :param max_size: The max_size of this CreateAutoScalingGroupType.
        :type max_size: int
        """
        if max_size is None:
            raise ValueError("Invalid value for `max_size`, must not be `None`")

        self._max_size = max_size

    @property
    def desired_capacity(self):
        """Gets the desired_capacity of this CreateAutoScalingGroupType.


        :return: The desired_capacity of this CreateAutoScalingGroupType.
        :rtype: int
        """
        return self._desired_capacity

    @desired_capacity.setter
    def desired_capacity(self, desired_capacity):
        """Sets the desired_capacity of this CreateAutoScalingGroupType.


        :param desired_capacity: The desired_capacity of this CreateAutoScalingGroupType.
        :type desired_capacity: int
        """

        self._desired_capacity = desired_capacity

    @property
    def default_cooldown(self):
        """Gets the default_cooldown of this CreateAutoScalingGroupType.


        :return: The default_cooldown of this CreateAutoScalingGroupType.
        :rtype: int
        """
        return self._default_cooldown

    @default_cooldown.setter
    def default_cooldown(self, default_cooldown):
        """Sets the default_cooldown of this CreateAutoScalingGroupType.


        :param default_cooldown: The default_cooldown of this CreateAutoScalingGroupType.
        :type default_cooldown: int
        """

        self._default_cooldown = default_cooldown

    @property
    def availability_zones(self):
        """Gets the availability_zones of this CreateAutoScalingGroupType.


        :return: The availability_zones of this CreateAutoScalingGroupType.
        :rtype: List
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this CreateAutoScalingGroupType.


        :param availability_zones: The availability_zones of this CreateAutoScalingGroupType.
        :type availability_zones: List
        """

        self._availability_zones = availability_zones

    @property
    def load_balancer_names(self):
        """Gets the load_balancer_names of this CreateAutoScalingGroupType.


        :return: The load_balancer_names of this CreateAutoScalingGroupType.
        :rtype: List
        """
        return self._load_balancer_names

    @load_balancer_names.setter
    def load_balancer_names(self, load_balancer_names):
        """Sets the load_balancer_names of this CreateAutoScalingGroupType.


        :param load_balancer_names: The load_balancer_names of this CreateAutoScalingGroupType.
        :type load_balancer_names: List
        """

        self._load_balancer_names = load_balancer_names

    @property
    def target_group_arns(self):
        """Gets the target_group_arns of this CreateAutoScalingGroupType.


        :return: The target_group_arns of this CreateAutoScalingGroupType.
        :rtype: List
        """
        return self._target_group_arns

    @target_group_arns.setter
    def target_group_arns(self, target_group_arns):
        """Sets the target_group_arns of this CreateAutoScalingGroupType.


        :param target_group_arns: The target_group_arns of this CreateAutoScalingGroupType.
        :type target_group_arns: List
        """

        self._target_group_arns = target_group_arns

    @property
    def health_check_type(self):
        """Gets the health_check_type of this CreateAutoScalingGroupType.


        :return: The health_check_type of this CreateAutoScalingGroupType.
        :rtype: str
        """
        return self._health_check_type

    @health_check_type.setter
    def health_check_type(self, health_check_type):
        """Sets the health_check_type of this CreateAutoScalingGroupType.


        :param health_check_type: The health_check_type of this CreateAutoScalingGroupType.
        :type health_check_type: str
        """

        self._health_check_type = health_check_type

    @property
    def health_check_grace_period(self):
        """Gets the health_check_grace_period of this CreateAutoScalingGroupType.


        :return: The health_check_grace_period of this CreateAutoScalingGroupType.
        :rtype: int
        """
        return self._health_check_grace_period

    @health_check_grace_period.setter
    def health_check_grace_period(self, health_check_grace_period):
        """Sets the health_check_grace_period of this CreateAutoScalingGroupType.


        :param health_check_grace_period: The health_check_grace_period of this CreateAutoScalingGroupType.
        :type health_check_grace_period: int
        """

        self._health_check_grace_period = health_check_grace_period

    @property
    def placement_group(self):
        """Gets the placement_group of this CreateAutoScalingGroupType.


        :return: The placement_group of this CreateAutoScalingGroupType.
        :rtype: str
        """
        return self._placement_group

    @placement_group.setter
    def placement_group(self, placement_group):
        """Sets the placement_group of this CreateAutoScalingGroupType.


        :param placement_group: The placement_group of this CreateAutoScalingGroupType.
        :type placement_group: str
        """

        self._placement_group = placement_group

    @property
    def vpc_zone_identifier(self):
        """Gets the vpc_zone_identifier of this CreateAutoScalingGroupType.


        :return: The vpc_zone_identifier of this CreateAutoScalingGroupType.
        :rtype: str
        """
        return self._vpc_zone_identifier

    @vpc_zone_identifier.setter
    def vpc_zone_identifier(self, vpc_zone_identifier):
        """Sets the vpc_zone_identifier of this CreateAutoScalingGroupType.


        :param vpc_zone_identifier: The vpc_zone_identifier of this CreateAutoScalingGroupType.
        :type vpc_zone_identifier: str
        """

        self._vpc_zone_identifier = vpc_zone_identifier

    @property
    def termination_policies(self):
        """Gets the termination_policies of this CreateAutoScalingGroupType.


        :return: The termination_policies of this CreateAutoScalingGroupType.
        :rtype: List
        """
        return self._termination_policies

    @termination_policies.setter
    def termination_policies(self, termination_policies):
        """Sets the termination_policies of this CreateAutoScalingGroupType.


        :param termination_policies: The termination_policies of this CreateAutoScalingGroupType.
        :type termination_policies: List
        """

        self._termination_policies = termination_policies

    @property
    def new_instances_protected_from_scale_in(self):
        """Gets the new_instances_protected_from_scale_in of this CreateAutoScalingGroupType.


        :return: The new_instances_protected_from_scale_in of this CreateAutoScalingGroupType.
        :rtype: bool
        """
        return self._new_instances_protected_from_scale_in

    @new_instances_protected_from_scale_in.setter
    def new_instances_protected_from_scale_in(self, new_instances_protected_from_scale_in):
        """Sets the new_instances_protected_from_scale_in of this CreateAutoScalingGroupType.


        :param new_instances_protected_from_scale_in: The new_instances_protected_from_scale_in of this CreateAutoScalingGroupType.
        :type new_instances_protected_from_scale_in: bool
        """

        self._new_instances_protected_from_scale_in = new_instances_protected_from_scale_in

    @property
    def capacity_rebalance(self):
        """Gets the capacity_rebalance of this CreateAutoScalingGroupType.


        :return: The capacity_rebalance of this CreateAutoScalingGroupType.
        :rtype: bool
        """
        return self._capacity_rebalance

    @capacity_rebalance.setter
    def capacity_rebalance(self, capacity_rebalance):
        """Sets the capacity_rebalance of this CreateAutoScalingGroupType.


        :param capacity_rebalance: The capacity_rebalance of this CreateAutoScalingGroupType.
        :type capacity_rebalance: bool
        """

        self._capacity_rebalance = capacity_rebalance

    @property
    def lifecycle_hook_specification_list(self):
        """Gets the lifecycle_hook_specification_list of this CreateAutoScalingGroupType.


        :return: The lifecycle_hook_specification_list of this CreateAutoScalingGroupType.
        :rtype: List
        """
        return self._lifecycle_hook_specification_list

    @lifecycle_hook_specification_list.setter
    def lifecycle_hook_specification_list(self, lifecycle_hook_specification_list):
        """Sets the lifecycle_hook_specification_list of this CreateAutoScalingGroupType.


        :param lifecycle_hook_specification_list: The lifecycle_hook_specification_list of this CreateAutoScalingGroupType.
        :type lifecycle_hook_specification_list: List
        """

        self._lifecycle_hook_specification_list = lifecycle_hook_specification_list

    @property
    def tags(self):
        """Gets the tags of this CreateAutoScalingGroupType.


        :return: The tags of this CreateAutoScalingGroupType.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAutoScalingGroupType.


        :param tags: The tags of this CreateAutoScalingGroupType.
        :type tags: List
        """

        self._tags = tags

    @property
    def service_linked_role_arn(self):
        """Gets the service_linked_role_arn of this CreateAutoScalingGroupType.


        :return: The service_linked_role_arn of this CreateAutoScalingGroupType.
        :rtype: str
        """
        return self._service_linked_role_arn

    @service_linked_role_arn.setter
    def service_linked_role_arn(self, service_linked_role_arn):
        """Sets the service_linked_role_arn of this CreateAutoScalingGroupType.


        :param service_linked_role_arn: The service_linked_role_arn of this CreateAutoScalingGroupType.
        :type service_linked_role_arn: str
        """

        self._service_linked_role_arn = service_linked_role_arn

    @property
    def max_instance_lifetime(self):
        """Gets the max_instance_lifetime of this CreateAutoScalingGroupType.


        :return: The max_instance_lifetime of this CreateAutoScalingGroupType.
        :rtype: int
        """
        return self._max_instance_lifetime

    @max_instance_lifetime.setter
    def max_instance_lifetime(self, max_instance_lifetime):
        """Sets the max_instance_lifetime of this CreateAutoScalingGroupType.


        :param max_instance_lifetime: The max_instance_lifetime of this CreateAutoScalingGroupType.
        :type max_instance_lifetime: int
        """

        self._max_instance_lifetime = max_instance_lifetime

    @property
    def context(self):
        """Gets the context of this CreateAutoScalingGroupType.


        :return: The context of this CreateAutoScalingGroupType.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this CreateAutoScalingGroupType.


        :param context: The context of this CreateAutoScalingGroupType.
        :type context: str
        """

        self._context = context

    @property
    def desired_capacity_type(self):
        """Gets the desired_capacity_type of this CreateAutoScalingGroupType.


        :return: The desired_capacity_type of this CreateAutoScalingGroupType.
        :rtype: str
        """
        return self._desired_capacity_type

    @desired_capacity_type.setter
    def desired_capacity_type(self, desired_capacity_type):
        """Sets the desired_capacity_type of this CreateAutoScalingGroupType.


        :param desired_capacity_type: The desired_capacity_type of this CreateAutoScalingGroupType.
        :type desired_capacity_type: str
        """

        self._desired_capacity_type = desired_capacity_type

    @property
    def default_instance_warmup(self):
        """Gets the default_instance_warmup of this CreateAutoScalingGroupType.


        :return: The default_instance_warmup of this CreateAutoScalingGroupType.
        :rtype: int
        """
        return self._default_instance_warmup

    @default_instance_warmup.setter
    def default_instance_warmup(self, default_instance_warmup):
        """Sets the default_instance_warmup of this CreateAutoScalingGroupType.


        :param default_instance_warmup: The default_instance_warmup of this CreateAutoScalingGroupType.
        :type default_instance_warmup: int
        """

        self._default_instance_warmup = default_instance_warmup

    @property
    def traffic_sources(self):
        """Gets the traffic_sources of this CreateAutoScalingGroupType.


        :return: The traffic_sources of this CreateAutoScalingGroupType.
        :rtype: List
        """
        return self._traffic_sources

    @traffic_sources.setter
    def traffic_sources(self, traffic_sources):
        """Sets the traffic_sources of this CreateAutoScalingGroupType.


        :param traffic_sources: The traffic_sources of this CreateAutoScalingGroupType.
        :type traffic_sources: List
        """

        self._traffic_sources = traffic_sources
