# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.warm_pool_configuration_instance_reuse_policy import WarmPoolConfigurationInstanceReusePolicy
from openapi_server.models.warm_pool_state import WarmPoolState
from openapi_server.models.warm_pool_status import WarmPoolStatus
from openapi_server import util


class AutoScalingGroupWarmPoolConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_group_prepared_capacity: int=None, min_size: int=None, pool_state: WarmPoolState=None, status: WarmPoolStatus=None, instance_reuse_policy: WarmPoolConfigurationInstanceReusePolicy=None):
        """AutoScalingGroupWarmPoolConfiguration - a model defined in OpenAPI

        :param max_group_prepared_capacity: The max_group_prepared_capacity of this AutoScalingGroupWarmPoolConfiguration.
        :param min_size: The min_size of this AutoScalingGroupWarmPoolConfiguration.
        :param pool_state: The pool_state of this AutoScalingGroupWarmPoolConfiguration.
        :param status: The status of this AutoScalingGroupWarmPoolConfiguration.
        :param instance_reuse_policy: The instance_reuse_policy of this AutoScalingGroupWarmPoolConfiguration.
        """
        self.openapi_types = {
            'max_group_prepared_capacity': int,
            'min_size': int,
            'pool_state': WarmPoolState,
            'status': WarmPoolStatus,
            'instance_reuse_policy': WarmPoolConfigurationInstanceReusePolicy
        }

        self.attribute_map = {
            'max_group_prepared_capacity': 'MaxGroupPreparedCapacity',
            'min_size': 'MinSize',
            'pool_state': 'PoolState',
            'status': 'Status',
            'instance_reuse_policy': 'InstanceReusePolicy'
        }

        self._max_group_prepared_capacity = max_group_prepared_capacity
        self._min_size = min_size
        self._pool_state = pool_state
        self._status = status
        self._instance_reuse_policy = instance_reuse_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoScalingGroupWarmPoolConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoScalingGroup_WarmPoolConfiguration of this AutoScalingGroupWarmPoolConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_group_prepared_capacity(self):
        """Gets the max_group_prepared_capacity of this AutoScalingGroupWarmPoolConfiguration.


        :return: The max_group_prepared_capacity of this AutoScalingGroupWarmPoolConfiguration.
        :rtype: int
        """
        return self._max_group_prepared_capacity

    @max_group_prepared_capacity.setter
    def max_group_prepared_capacity(self, max_group_prepared_capacity):
        """Sets the max_group_prepared_capacity of this AutoScalingGroupWarmPoolConfiguration.


        :param max_group_prepared_capacity: The max_group_prepared_capacity of this AutoScalingGroupWarmPoolConfiguration.
        :type max_group_prepared_capacity: int
        """

        self._max_group_prepared_capacity = max_group_prepared_capacity

    @property
    def min_size(self):
        """Gets the min_size of this AutoScalingGroupWarmPoolConfiguration.


        :return: The min_size of this AutoScalingGroupWarmPoolConfiguration.
        :rtype: int
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size):
        """Sets the min_size of this AutoScalingGroupWarmPoolConfiguration.


        :param min_size: The min_size of this AutoScalingGroupWarmPoolConfiguration.
        :type min_size: int
        """

        self._min_size = min_size

    @property
    def pool_state(self):
        """Gets the pool_state of this AutoScalingGroupWarmPoolConfiguration.


        :return: The pool_state of this AutoScalingGroupWarmPoolConfiguration.
        :rtype: WarmPoolState
        """
        return self._pool_state

    @pool_state.setter
    def pool_state(self, pool_state):
        """Sets the pool_state of this AutoScalingGroupWarmPoolConfiguration.


        :param pool_state: The pool_state of this AutoScalingGroupWarmPoolConfiguration.
        :type pool_state: WarmPoolState
        """

        self._pool_state = pool_state

    @property
    def status(self):
        """Gets the status of this AutoScalingGroupWarmPoolConfiguration.


        :return: The status of this AutoScalingGroupWarmPoolConfiguration.
        :rtype: WarmPoolStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AutoScalingGroupWarmPoolConfiguration.


        :param status: The status of this AutoScalingGroupWarmPoolConfiguration.
        :type status: WarmPoolStatus
        """

        self._status = status

    @property
    def instance_reuse_policy(self):
        """Gets the instance_reuse_policy of this AutoScalingGroupWarmPoolConfiguration.


        :return: The instance_reuse_policy of this AutoScalingGroupWarmPoolConfiguration.
        :rtype: WarmPoolConfigurationInstanceReusePolicy
        """
        return self._instance_reuse_policy

    @instance_reuse_policy.setter
    def instance_reuse_policy(self, instance_reuse_policy):
        """Sets the instance_reuse_policy of this AutoScalingGroupWarmPoolConfiguration.


        :param instance_reuse_policy: The instance_reuse_policy of this AutoScalingGroupWarmPoolConfiguration.
        :type instance_reuse_policy: WarmPoolConfigurationInstanceReusePolicy
        """

        self._instance_reuse_policy = instance_reuse_policy
