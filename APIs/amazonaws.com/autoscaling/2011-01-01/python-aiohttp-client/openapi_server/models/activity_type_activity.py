# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scaling_activity_status_code import ScalingActivityStatusCode
from openapi_server import util


class ActivityTypeActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_id: str=None, auto_scaling_group_name: str=None, description: str=None, cause: str=None, start_time: datetime=None, end_time: datetime=None, status_code: ScalingActivityStatusCode=None, status_message: str=None, progress: int=None, details: str=None, auto_scaling_group_state: str=None, auto_scaling_group_arn: str=None):
        """ActivityTypeActivity - a model defined in OpenAPI

        :param activity_id: The activity_id of this ActivityTypeActivity.
        :param auto_scaling_group_name: The auto_scaling_group_name of this ActivityTypeActivity.
        :param description: The description of this ActivityTypeActivity.
        :param cause: The cause of this ActivityTypeActivity.
        :param start_time: The start_time of this ActivityTypeActivity.
        :param end_time: The end_time of this ActivityTypeActivity.
        :param status_code: The status_code of this ActivityTypeActivity.
        :param status_message: The status_message of this ActivityTypeActivity.
        :param progress: The progress of this ActivityTypeActivity.
        :param details: The details of this ActivityTypeActivity.
        :param auto_scaling_group_state: The auto_scaling_group_state of this ActivityTypeActivity.
        :param auto_scaling_group_arn: The auto_scaling_group_arn of this ActivityTypeActivity.
        """
        self.openapi_types = {
            'activity_id': str,
            'auto_scaling_group_name': str,
            'description': str,
            'cause': str,
            'start_time': datetime,
            'end_time': datetime,
            'status_code': ScalingActivityStatusCode,
            'status_message': str,
            'progress': int,
            'details': str,
            'auto_scaling_group_state': str,
            'auto_scaling_group_arn': str
        }

        self.attribute_map = {
            'activity_id': 'ActivityId',
            'auto_scaling_group_name': 'AutoScalingGroupName',
            'description': 'Description',
            'cause': 'Cause',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'status_code': 'StatusCode',
            'status_message': 'StatusMessage',
            'progress': 'Progress',
            'details': 'Details',
            'auto_scaling_group_state': 'AutoScalingGroupState',
            'auto_scaling_group_arn': 'AutoScalingGroupARN'
        }

        self._activity_id = activity_id
        self._auto_scaling_group_name = auto_scaling_group_name
        self._description = description
        self._cause = cause
        self._start_time = start_time
        self._end_time = end_time
        self._status_code = status_code
        self._status_message = status_message
        self._progress = progress
        self._details = details
        self._auto_scaling_group_state = auto_scaling_group_state
        self._auto_scaling_group_arn = auto_scaling_group_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityTypeActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityType_Activity of this ActivityTypeActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_id(self):
        """Gets the activity_id of this ActivityTypeActivity.


        :return: The activity_id of this ActivityTypeActivity.
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this ActivityTypeActivity.


        :param activity_id: The activity_id of this ActivityTypeActivity.
        :type activity_id: str
        """
        if activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")

        self._activity_id = activity_id

    @property
    def auto_scaling_group_name(self):
        """Gets the auto_scaling_group_name of this ActivityTypeActivity.


        :return: The auto_scaling_group_name of this ActivityTypeActivity.
        :rtype: str
        """
        return self._auto_scaling_group_name

    @auto_scaling_group_name.setter
    def auto_scaling_group_name(self, auto_scaling_group_name):
        """Sets the auto_scaling_group_name of this ActivityTypeActivity.


        :param auto_scaling_group_name: The auto_scaling_group_name of this ActivityTypeActivity.
        :type auto_scaling_group_name: str
        """
        if auto_scaling_group_name is None:
            raise ValueError("Invalid value for `auto_scaling_group_name`, must not be `None`")

        self._auto_scaling_group_name = auto_scaling_group_name

    @property
    def description(self):
        """Gets the description of this ActivityTypeActivity.


        :return: The description of this ActivityTypeActivity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityTypeActivity.


        :param description: The description of this ActivityTypeActivity.
        :type description: str
        """

        self._description = description

    @property
    def cause(self):
        """Gets the cause of this ActivityTypeActivity.


        :return: The cause of this ActivityTypeActivity.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this ActivityTypeActivity.


        :param cause: The cause of this ActivityTypeActivity.
        :type cause: str
        """
        if cause is None:
            raise ValueError("Invalid value for `cause`, must not be `None`")

        self._cause = cause

    @property
    def start_time(self):
        """Gets the start_time of this ActivityTypeActivity.


        :return: The start_time of this ActivityTypeActivity.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ActivityTypeActivity.


        :param start_time: The start_time of this ActivityTypeActivity.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ActivityTypeActivity.


        :return: The end_time of this ActivityTypeActivity.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ActivityTypeActivity.


        :param end_time: The end_time of this ActivityTypeActivity.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def status_code(self):
        """Gets the status_code of this ActivityTypeActivity.


        :return: The status_code of this ActivityTypeActivity.
        :rtype: ScalingActivityStatusCode
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ActivityTypeActivity.


        :param status_code: The status_code of this ActivityTypeActivity.
        :type status_code: ScalingActivityStatusCode
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def status_message(self):
        """Gets the status_message of this ActivityTypeActivity.


        :return: The status_message of this ActivityTypeActivity.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ActivityTypeActivity.


        :param status_message: The status_message of this ActivityTypeActivity.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def progress(self):
        """Gets the progress of this ActivityTypeActivity.


        :return: The progress of this ActivityTypeActivity.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this ActivityTypeActivity.


        :param progress: The progress of this ActivityTypeActivity.
        :type progress: int
        """

        self._progress = progress

    @property
    def details(self):
        """Gets the details of this ActivityTypeActivity.


        :return: The details of this ActivityTypeActivity.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ActivityTypeActivity.


        :param details: The details of this ActivityTypeActivity.
        :type details: str
        """

        self._details = details

    @property
    def auto_scaling_group_state(self):
        """Gets the auto_scaling_group_state of this ActivityTypeActivity.


        :return: The auto_scaling_group_state of this ActivityTypeActivity.
        :rtype: str
        """
        return self._auto_scaling_group_state

    @auto_scaling_group_state.setter
    def auto_scaling_group_state(self, auto_scaling_group_state):
        """Sets the auto_scaling_group_state of this ActivityTypeActivity.


        :param auto_scaling_group_state: The auto_scaling_group_state of this ActivityTypeActivity.
        :type auto_scaling_group_state: str
        """

        self._auto_scaling_group_state = auto_scaling_group_state

    @property
    def auto_scaling_group_arn(self):
        """Gets the auto_scaling_group_arn of this ActivityTypeActivity.


        :return: The auto_scaling_group_arn of this ActivityTypeActivity.
        :rtype: str
        """
        return self._auto_scaling_group_arn

    @auto_scaling_group_arn.setter
    def auto_scaling_group_arn(self, auto_scaling_group_arn):
        """Sets the auto_scaling_group_arn of this ActivityTypeActivity.


        :param auto_scaling_group_arn: The auto_scaling_group_arn of this ActivityTypeActivity.
        :type auto_scaling_group_arn: str
        """

        self._auto_scaling_group_arn = auto_scaling_group_arn
