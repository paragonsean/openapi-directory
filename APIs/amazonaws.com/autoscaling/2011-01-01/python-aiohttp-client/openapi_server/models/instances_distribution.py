# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstancesDistribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, on_demand_allocation_strategy: str=None, on_demand_base_capacity: int=None, on_demand_percentage_above_base_capacity: int=None, spot_allocation_strategy: str=None, spot_instance_pools: int=None, spot_max_price: str=None):
        """InstancesDistribution - a model defined in OpenAPI

        :param on_demand_allocation_strategy: The on_demand_allocation_strategy of this InstancesDistribution.
        :param on_demand_base_capacity: The on_demand_base_capacity of this InstancesDistribution.
        :param on_demand_percentage_above_base_capacity: The on_demand_percentage_above_base_capacity of this InstancesDistribution.
        :param spot_allocation_strategy: The spot_allocation_strategy of this InstancesDistribution.
        :param spot_instance_pools: The spot_instance_pools of this InstancesDistribution.
        :param spot_max_price: The spot_max_price of this InstancesDistribution.
        """
        self.openapi_types = {
            'on_demand_allocation_strategy': str,
            'on_demand_base_capacity': int,
            'on_demand_percentage_above_base_capacity': int,
            'spot_allocation_strategy': str,
            'spot_instance_pools': int,
            'spot_max_price': str
        }

        self.attribute_map = {
            'on_demand_allocation_strategy': 'OnDemandAllocationStrategy',
            'on_demand_base_capacity': 'OnDemandBaseCapacity',
            'on_demand_percentage_above_base_capacity': 'OnDemandPercentageAboveBaseCapacity',
            'spot_allocation_strategy': 'SpotAllocationStrategy',
            'spot_instance_pools': 'SpotInstancePools',
            'spot_max_price': 'SpotMaxPrice'
        }

        self._on_demand_allocation_strategy = on_demand_allocation_strategy
        self._on_demand_base_capacity = on_demand_base_capacity
        self._on_demand_percentage_above_base_capacity = on_demand_percentage_above_base_capacity
        self._spot_allocation_strategy = spot_allocation_strategy
        self._spot_instance_pools = spot_instance_pools
        self._spot_max_price = spot_max_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstancesDistribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstancesDistribution of this InstancesDistribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def on_demand_allocation_strategy(self):
        """Gets the on_demand_allocation_strategy of this InstancesDistribution.


        :return: The on_demand_allocation_strategy of this InstancesDistribution.
        :rtype: str
        """
        return self._on_demand_allocation_strategy

    @on_demand_allocation_strategy.setter
    def on_demand_allocation_strategy(self, on_demand_allocation_strategy):
        """Sets the on_demand_allocation_strategy of this InstancesDistribution.


        :param on_demand_allocation_strategy: The on_demand_allocation_strategy of this InstancesDistribution.
        :type on_demand_allocation_strategy: str
        """

        self._on_demand_allocation_strategy = on_demand_allocation_strategy

    @property
    def on_demand_base_capacity(self):
        """Gets the on_demand_base_capacity of this InstancesDistribution.


        :return: The on_demand_base_capacity of this InstancesDistribution.
        :rtype: int
        """
        return self._on_demand_base_capacity

    @on_demand_base_capacity.setter
    def on_demand_base_capacity(self, on_demand_base_capacity):
        """Sets the on_demand_base_capacity of this InstancesDistribution.


        :param on_demand_base_capacity: The on_demand_base_capacity of this InstancesDistribution.
        :type on_demand_base_capacity: int
        """

        self._on_demand_base_capacity = on_demand_base_capacity

    @property
    def on_demand_percentage_above_base_capacity(self):
        """Gets the on_demand_percentage_above_base_capacity of this InstancesDistribution.


        :return: The on_demand_percentage_above_base_capacity of this InstancesDistribution.
        :rtype: int
        """
        return self._on_demand_percentage_above_base_capacity

    @on_demand_percentage_above_base_capacity.setter
    def on_demand_percentage_above_base_capacity(self, on_demand_percentage_above_base_capacity):
        """Sets the on_demand_percentage_above_base_capacity of this InstancesDistribution.


        :param on_demand_percentage_above_base_capacity: The on_demand_percentage_above_base_capacity of this InstancesDistribution.
        :type on_demand_percentage_above_base_capacity: int
        """

        self._on_demand_percentage_above_base_capacity = on_demand_percentage_above_base_capacity

    @property
    def spot_allocation_strategy(self):
        """Gets the spot_allocation_strategy of this InstancesDistribution.


        :return: The spot_allocation_strategy of this InstancesDistribution.
        :rtype: str
        """
        return self._spot_allocation_strategy

    @spot_allocation_strategy.setter
    def spot_allocation_strategy(self, spot_allocation_strategy):
        """Sets the spot_allocation_strategy of this InstancesDistribution.


        :param spot_allocation_strategy: The spot_allocation_strategy of this InstancesDistribution.
        :type spot_allocation_strategy: str
        """

        self._spot_allocation_strategy = spot_allocation_strategy

    @property
    def spot_instance_pools(self):
        """Gets the spot_instance_pools of this InstancesDistribution.


        :return: The spot_instance_pools of this InstancesDistribution.
        :rtype: int
        """
        return self._spot_instance_pools

    @spot_instance_pools.setter
    def spot_instance_pools(self, spot_instance_pools):
        """Sets the spot_instance_pools of this InstancesDistribution.


        :param spot_instance_pools: The spot_instance_pools of this InstancesDistribution.
        :type spot_instance_pools: int
        """

        self._spot_instance_pools = spot_instance_pools

    @property
    def spot_max_price(self):
        """Gets the spot_max_price of this InstancesDistribution.


        :return: The spot_max_price of this InstancesDistribution.
        :rtype: str
        """
        return self._spot_max_price

    @spot_max_price.setter
    def spot_max_price(self, spot_max_price):
        """Sets the spot_max_price of this InstancesDistribution.


        :param spot_max_price: The spot_max_price of this InstancesDistribution.
        :type spot_max_price: str
        """

        self._spot_max_price = spot_max_price
