# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.block_device_mapping_ebs import BlockDeviceMappingEbs
from openapi_server import util


class BlockDeviceMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, virtual_name: str=None, device_name: str=None, ebs: BlockDeviceMappingEbs=None, no_device: bool=None):
        """BlockDeviceMapping - a model defined in OpenAPI

        :param virtual_name: The virtual_name of this BlockDeviceMapping.
        :param device_name: The device_name of this BlockDeviceMapping.
        :param ebs: The ebs of this BlockDeviceMapping.
        :param no_device: The no_device of this BlockDeviceMapping.
        """
        self.openapi_types = {
            'virtual_name': str,
            'device_name': str,
            'ebs': BlockDeviceMappingEbs,
            'no_device': bool
        }

        self.attribute_map = {
            'virtual_name': 'VirtualName',
            'device_name': 'DeviceName',
            'ebs': 'Ebs',
            'no_device': 'NoDevice'
        }

        self._virtual_name = virtual_name
        self._device_name = device_name
        self._ebs = ebs
        self._no_device = no_device

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlockDeviceMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlockDeviceMapping of this BlockDeviceMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def virtual_name(self):
        """Gets the virtual_name of this BlockDeviceMapping.


        :return: The virtual_name of this BlockDeviceMapping.
        :rtype: str
        """
        return self._virtual_name

    @virtual_name.setter
    def virtual_name(self, virtual_name):
        """Sets the virtual_name of this BlockDeviceMapping.


        :param virtual_name: The virtual_name of this BlockDeviceMapping.
        :type virtual_name: str
        """

        self._virtual_name = virtual_name

    @property
    def device_name(self):
        """Gets the device_name of this BlockDeviceMapping.


        :return: The device_name of this BlockDeviceMapping.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this BlockDeviceMapping.


        :param device_name: The device_name of this BlockDeviceMapping.
        :type device_name: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")

        self._device_name = device_name

    @property
    def ebs(self):
        """Gets the ebs of this BlockDeviceMapping.


        :return: The ebs of this BlockDeviceMapping.
        :rtype: BlockDeviceMappingEbs
        """
        return self._ebs

    @ebs.setter
    def ebs(self, ebs):
        """Sets the ebs of this BlockDeviceMapping.


        :param ebs: The ebs of this BlockDeviceMapping.
        :type ebs: BlockDeviceMappingEbs
        """

        self._ebs = ebs

    @property
    def no_device(self):
        """Gets the no_device of this BlockDeviceMapping.


        :return: The no_device of this BlockDeviceMapping.
        :rtype: bool
        """
        return self._no_device

    @no_device.setter
    def no_device(self, no_device):
        """Sets the no_device of this BlockDeviceMapping.


        :param no_device: The no_device of this BlockDeviceMapping.
        :type no_device: bool
        """

        self._no_device = no_device
