# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Ebs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, snapshot_id: str=None, volume_size: int=None, volume_type: str=None, delete_on_termination: bool=None, iops: int=None, encrypted: bool=None, throughput: int=None):
        """Ebs - a model defined in OpenAPI

        :param snapshot_id: The snapshot_id of this Ebs.
        :param volume_size: The volume_size of this Ebs.
        :param volume_type: The volume_type of this Ebs.
        :param delete_on_termination: The delete_on_termination of this Ebs.
        :param iops: The iops of this Ebs.
        :param encrypted: The encrypted of this Ebs.
        :param throughput: The throughput of this Ebs.
        """
        self.openapi_types = {
            'snapshot_id': str,
            'volume_size': int,
            'volume_type': str,
            'delete_on_termination': bool,
            'iops': int,
            'encrypted': bool,
            'throughput': int
        }

        self.attribute_map = {
            'snapshot_id': 'SnapshotId',
            'volume_size': 'VolumeSize',
            'volume_type': 'VolumeType',
            'delete_on_termination': 'DeleteOnTermination',
            'iops': 'Iops',
            'encrypted': 'Encrypted',
            'throughput': 'Throughput'
        }

        self._snapshot_id = snapshot_id
        self._volume_size = volume_size
        self._volume_type = volume_type
        self._delete_on_termination = delete_on_termination
        self._iops = iops
        self._encrypted = encrypted
        self._throughput = throughput

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ebs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ebs of this Ebs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this Ebs.


        :return: The snapshot_id of this Ebs.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this Ebs.


        :param snapshot_id: The snapshot_id of this Ebs.
        :type snapshot_id: str
        """

        self._snapshot_id = snapshot_id

    @property
    def volume_size(self):
        """Gets the volume_size of this Ebs.


        :return: The volume_size of this Ebs.
        :rtype: int
        """
        return self._volume_size

    @volume_size.setter
    def volume_size(self, volume_size):
        """Sets the volume_size of this Ebs.


        :param volume_size: The volume_size of this Ebs.
        :type volume_size: int
        """

        self._volume_size = volume_size

    @property
    def volume_type(self):
        """Gets the volume_type of this Ebs.


        :return: The volume_type of this Ebs.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this Ebs.


        :param volume_type: The volume_type of this Ebs.
        :type volume_type: str
        """

        self._volume_type = volume_type

    @property
    def delete_on_termination(self):
        """Gets the delete_on_termination of this Ebs.


        :return: The delete_on_termination of this Ebs.
        :rtype: bool
        """
        return self._delete_on_termination

    @delete_on_termination.setter
    def delete_on_termination(self, delete_on_termination):
        """Sets the delete_on_termination of this Ebs.


        :param delete_on_termination: The delete_on_termination of this Ebs.
        :type delete_on_termination: bool
        """

        self._delete_on_termination = delete_on_termination

    @property
    def iops(self):
        """Gets the iops of this Ebs.


        :return: The iops of this Ebs.
        :rtype: int
        """
        return self._iops

    @iops.setter
    def iops(self, iops):
        """Sets the iops of this Ebs.


        :param iops: The iops of this Ebs.
        :type iops: int
        """

        self._iops = iops

    @property
    def encrypted(self):
        """Gets the encrypted of this Ebs.


        :return: The encrypted of this Ebs.
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this Ebs.


        :param encrypted: The encrypted of this Ebs.
        :type encrypted: bool
        """

        self._encrypted = encrypted

    @property
    def throughput(self):
        """Gets the throughput of this Ebs.


        :return: The throughput of this Ebs.
        :rtype: int
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this Ebs.


        :param throughput: The throughput of this Ebs.
        :type throughput: int
        """

        self._throughput = throughput
