# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.refresh_strategy import RefreshStrategy
from openapi_server.models.start_instance_refresh_type_desired_configuration import StartInstanceRefreshTypeDesiredConfiguration
from openapi_server.models.start_instance_refresh_type_preferences import StartInstanceRefreshTypePreferences
from openapi_server import util


class StartInstanceRefreshType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_scaling_group_name: str=None, strategy: RefreshStrategy=None, desired_configuration: StartInstanceRefreshTypeDesiredConfiguration=None, preferences: StartInstanceRefreshTypePreferences=None):
        """StartInstanceRefreshType - a model defined in OpenAPI

        :param auto_scaling_group_name: The auto_scaling_group_name of this StartInstanceRefreshType.
        :param strategy: The strategy of this StartInstanceRefreshType.
        :param desired_configuration: The desired_configuration of this StartInstanceRefreshType.
        :param preferences: The preferences of this StartInstanceRefreshType.
        """
        self.openapi_types = {
            'auto_scaling_group_name': str,
            'strategy': RefreshStrategy,
            'desired_configuration': StartInstanceRefreshTypeDesiredConfiguration,
            'preferences': StartInstanceRefreshTypePreferences
        }

        self.attribute_map = {
            'auto_scaling_group_name': 'AutoScalingGroupName',
            'strategy': 'Strategy',
            'desired_configuration': 'DesiredConfiguration',
            'preferences': 'Preferences'
        }

        self._auto_scaling_group_name = auto_scaling_group_name
        self._strategy = strategy
        self._desired_configuration = desired_configuration
        self._preferences = preferences

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartInstanceRefreshType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartInstanceRefreshType of this StartInstanceRefreshType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_scaling_group_name(self):
        """Gets the auto_scaling_group_name of this StartInstanceRefreshType.


        :return: The auto_scaling_group_name of this StartInstanceRefreshType.
        :rtype: str
        """
        return self._auto_scaling_group_name

    @auto_scaling_group_name.setter
    def auto_scaling_group_name(self, auto_scaling_group_name):
        """Sets the auto_scaling_group_name of this StartInstanceRefreshType.


        :param auto_scaling_group_name: The auto_scaling_group_name of this StartInstanceRefreshType.
        :type auto_scaling_group_name: str
        """
        if auto_scaling_group_name is None:
            raise ValueError("Invalid value for `auto_scaling_group_name`, must not be `None`")

        self._auto_scaling_group_name = auto_scaling_group_name

    @property
    def strategy(self):
        """Gets the strategy of this StartInstanceRefreshType.


        :return: The strategy of this StartInstanceRefreshType.
        :rtype: RefreshStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this StartInstanceRefreshType.


        :param strategy: The strategy of this StartInstanceRefreshType.
        :type strategy: RefreshStrategy
        """

        self._strategy = strategy

    @property
    def desired_configuration(self):
        """Gets the desired_configuration of this StartInstanceRefreshType.


        :return: The desired_configuration of this StartInstanceRefreshType.
        :rtype: StartInstanceRefreshTypeDesiredConfiguration
        """
        return self._desired_configuration

    @desired_configuration.setter
    def desired_configuration(self, desired_configuration):
        """Sets the desired_configuration of this StartInstanceRefreshType.


        :param desired_configuration: The desired_configuration of this StartInstanceRefreshType.
        :type desired_configuration: StartInstanceRefreshTypeDesiredConfiguration
        """

        self._desired_configuration = desired_configuration

    @property
    def preferences(self):
        """Gets the preferences of this StartInstanceRefreshType.


        :return: The preferences of this StartInstanceRefreshType.
        :rtype: StartInstanceRefreshTypePreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this StartInstanceRefreshType.


        :param preferences: The preferences of this StartInstanceRefreshType.
        :type preferences: StartInstanceRefreshTypePreferences
        """

        self._preferences = preferences
