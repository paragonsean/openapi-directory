# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LifecycleState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    PENDING = 'Pending'
    PENDING_COLON_WAIT = 'Pending:Wait'
    PENDING_COLON_PROCEED = 'Pending:Proceed'
    QUARANTINED = 'Quarantined'
    INSERVICE = 'InService'
    TERMINATING = 'Terminating'
    TERMINATING_COLON_WAIT = 'Terminating:Wait'
    TERMINATING_COLON_PROCEED = 'Terminating:Proceed'
    TERMINATED = 'Terminated'
    DETACHING = 'Detaching'
    DETACHED = 'Detached'
    ENTERINGSTANDBY = 'EnteringStandby'
    STANDBY = 'Standby'
    WARMED_COLON_PENDING = 'Warmed:Pending'
    WARMED_COLON_PENDING_COLON_WAIT = 'Warmed:Pending:Wait'
    WARMED_COLON_PENDING_COLON_PROCEED = 'Warmed:Pending:Proceed'
    WARMED_COLON_TERMINATING = 'Warmed:Terminating'
    WARMED_COLON_TERMINATING_COLON_WAIT = 'Warmed:Terminating:Wait'
    WARMED_COLON_TERMINATING_COLON_PROCEED = 'Warmed:Terminating:Proceed'
    WARMED_COLON_TERMINATED = 'Warmed:Terminated'
    WARMED_COLON_STOPPED = 'Warmed:Stopped'
    WARMED_COLON_RUNNING = 'Warmed:Running'
    WARMED_COLON_HIBERNATED = 'Warmed:Hibernated'

    def __init__(self):
        """LifecycleState - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LifecycleState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LifecycleState of this LifecycleState.
        """
        return util.deserialize_model(dikt, cls)
