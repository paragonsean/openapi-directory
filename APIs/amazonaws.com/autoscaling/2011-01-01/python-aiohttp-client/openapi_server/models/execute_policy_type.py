# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExecutePolicyType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_scaling_group_name: str=None, policy_name: str=None, honor_cooldown: bool=None, metric_value: float=None, breach_threshold: float=None):
        """ExecutePolicyType - a model defined in OpenAPI

        :param auto_scaling_group_name: The auto_scaling_group_name of this ExecutePolicyType.
        :param policy_name: The policy_name of this ExecutePolicyType.
        :param honor_cooldown: The honor_cooldown of this ExecutePolicyType.
        :param metric_value: The metric_value of this ExecutePolicyType.
        :param breach_threshold: The breach_threshold of this ExecutePolicyType.
        """
        self.openapi_types = {
            'auto_scaling_group_name': str,
            'policy_name': str,
            'honor_cooldown': bool,
            'metric_value': float,
            'breach_threshold': float
        }

        self.attribute_map = {
            'auto_scaling_group_name': 'AutoScalingGroupName',
            'policy_name': 'PolicyName',
            'honor_cooldown': 'HonorCooldown',
            'metric_value': 'MetricValue',
            'breach_threshold': 'BreachThreshold'
        }

        self._auto_scaling_group_name = auto_scaling_group_name
        self._policy_name = policy_name
        self._honor_cooldown = honor_cooldown
        self._metric_value = metric_value
        self._breach_threshold = breach_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecutePolicyType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecutePolicyType of this ExecutePolicyType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_scaling_group_name(self):
        """Gets the auto_scaling_group_name of this ExecutePolicyType.


        :return: The auto_scaling_group_name of this ExecutePolicyType.
        :rtype: str
        """
        return self._auto_scaling_group_name

    @auto_scaling_group_name.setter
    def auto_scaling_group_name(self, auto_scaling_group_name):
        """Sets the auto_scaling_group_name of this ExecutePolicyType.


        :param auto_scaling_group_name: The auto_scaling_group_name of this ExecutePolicyType.
        :type auto_scaling_group_name: str
        """

        self._auto_scaling_group_name = auto_scaling_group_name

    @property
    def policy_name(self):
        """Gets the policy_name of this ExecutePolicyType.


        :return: The policy_name of this ExecutePolicyType.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this ExecutePolicyType.


        :param policy_name: The policy_name of this ExecutePolicyType.
        :type policy_name: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")

        self._policy_name = policy_name

    @property
    def honor_cooldown(self):
        """Gets the honor_cooldown of this ExecutePolicyType.


        :return: The honor_cooldown of this ExecutePolicyType.
        :rtype: bool
        """
        return self._honor_cooldown

    @honor_cooldown.setter
    def honor_cooldown(self, honor_cooldown):
        """Sets the honor_cooldown of this ExecutePolicyType.


        :param honor_cooldown: The honor_cooldown of this ExecutePolicyType.
        :type honor_cooldown: bool
        """

        self._honor_cooldown = honor_cooldown

    @property
    def metric_value(self):
        """Gets the metric_value of this ExecutePolicyType.


        :return: The metric_value of this ExecutePolicyType.
        :rtype: float
        """
        return self._metric_value

    @metric_value.setter
    def metric_value(self, metric_value):
        """Sets the metric_value of this ExecutePolicyType.


        :param metric_value: The metric_value of this ExecutePolicyType.
        :type metric_value: float
        """

        self._metric_value = metric_value

    @property
    def breach_threshold(self):
        """Gets the breach_threshold of this ExecutePolicyType.


        :return: The breach_threshold of this ExecutePolicyType.
        :rtype: float
        """
        return self._breach_threshold

    @breach_threshold.setter
    def breach_threshold(self, breach_threshold):
        """Sets the breach_threshold of this ExecutePolicyType.


        :param breach_threshold: The breach_threshold of this ExecutePolicyType.
        :type breach_threshold: float
        """

        self._breach_threshold = breach_threshold
