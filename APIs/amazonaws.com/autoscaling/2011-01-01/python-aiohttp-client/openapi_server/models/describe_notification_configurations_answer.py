# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeNotificationConfigurationsAnswer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notification_configurations: List=None, next_token: str=None):
        """DescribeNotificationConfigurationsAnswer - a model defined in OpenAPI

        :param notification_configurations: The notification_configurations of this DescribeNotificationConfigurationsAnswer.
        :param next_token: The next_token of this DescribeNotificationConfigurationsAnswer.
        """
        self.openapi_types = {
            'notification_configurations': List,
            'next_token': str
        }

        self.attribute_map = {
            'notification_configurations': 'NotificationConfigurations',
            'next_token': 'NextToken'
        }

        self._notification_configurations = notification_configurations
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeNotificationConfigurationsAnswer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeNotificationConfigurationsAnswer of this DescribeNotificationConfigurationsAnswer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification_configurations(self):
        """Gets the notification_configurations of this DescribeNotificationConfigurationsAnswer.


        :return: The notification_configurations of this DescribeNotificationConfigurationsAnswer.
        :rtype: List
        """
        return self._notification_configurations

    @notification_configurations.setter
    def notification_configurations(self, notification_configurations):
        """Sets the notification_configurations of this DescribeNotificationConfigurationsAnswer.


        :param notification_configurations: The notification_configurations of this DescribeNotificationConfigurationsAnswer.
        :type notification_configurations: List
        """
        if notification_configurations is None:
            raise ValueError("Invalid value for `notification_configurations`, must not be `None`")

        self._notification_configurations = notification_configurations

    @property
    def next_token(self):
        """Gets the next_token of this DescribeNotificationConfigurationsAnswer.


        :return: The next_token of this DescribeNotificationConfigurationsAnswer.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeNotificationConfigurationsAnswer.


        :param next_token: The next_token of this DescribeNotificationConfigurationsAnswer.
        :type next_token: str
        """

        self._next_token = next_token
