# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecordLifecycleActionHeartbeatType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lifecycle_hook_name: str=None, auto_scaling_group_name: str=None, lifecycle_action_token: str=None, instance_id: str=None):
        """RecordLifecycleActionHeartbeatType - a model defined in OpenAPI

        :param lifecycle_hook_name: The lifecycle_hook_name of this RecordLifecycleActionHeartbeatType.
        :param auto_scaling_group_name: The auto_scaling_group_name of this RecordLifecycleActionHeartbeatType.
        :param lifecycle_action_token: The lifecycle_action_token of this RecordLifecycleActionHeartbeatType.
        :param instance_id: The instance_id of this RecordLifecycleActionHeartbeatType.
        """
        self.openapi_types = {
            'lifecycle_hook_name': str,
            'auto_scaling_group_name': str,
            'lifecycle_action_token': str,
            'instance_id': str
        }

        self.attribute_map = {
            'lifecycle_hook_name': 'LifecycleHookName',
            'auto_scaling_group_name': 'AutoScalingGroupName',
            'lifecycle_action_token': 'LifecycleActionToken',
            'instance_id': 'InstanceId'
        }

        self._lifecycle_hook_name = lifecycle_hook_name
        self._auto_scaling_group_name = auto_scaling_group_name
        self._lifecycle_action_token = lifecycle_action_token
        self._instance_id = instance_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecordLifecycleActionHeartbeatType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecordLifecycleActionHeartbeatType of this RecordLifecycleActionHeartbeatType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lifecycle_hook_name(self):
        """Gets the lifecycle_hook_name of this RecordLifecycleActionHeartbeatType.


        :return: The lifecycle_hook_name of this RecordLifecycleActionHeartbeatType.
        :rtype: str
        """
        return self._lifecycle_hook_name

    @lifecycle_hook_name.setter
    def lifecycle_hook_name(self, lifecycle_hook_name):
        """Sets the lifecycle_hook_name of this RecordLifecycleActionHeartbeatType.


        :param lifecycle_hook_name: The lifecycle_hook_name of this RecordLifecycleActionHeartbeatType.
        :type lifecycle_hook_name: str
        """
        if lifecycle_hook_name is None:
            raise ValueError("Invalid value for `lifecycle_hook_name`, must not be `None`")

        self._lifecycle_hook_name = lifecycle_hook_name

    @property
    def auto_scaling_group_name(self):
        """Gets the auto_scaling_group_name of this RecordLifecycleActionHeartbeatType.


        :return: The auto_scaling_group_name of this RecordLifecycleActionHeartbeatType.
        :rtype: str
        """
        return self._auto_scaling_group_name

    @auto_scaling_group_name.setter
    def auto_scaling_group_name(self, auto_scaling_group_name):
        """Sets the auto_scaling_group_name of this RecordLifecycleActionHeartbeatType.


        :param auto_scaling_group_name: The auto_scaling_group_name of this RecordLifecycleActionHeartbeatType.
        :type auto_scaling_group_name: str
        """
        if auto_scaling_group_name is None:
            raise ValueError("Invalid value for `auto_scaling_group_name`, must not be `None`")

        self._auto_scaling_group_name = auto_scaling_group_name

    @property
    def lifecycle_action_token(self):
        """Gets the lifecycle_action_token of this RecordLifecycleActionHeartbeatType.


        :return: The lifecycle_action_token of this RecordLifecycleActionHeartbeatType.
        :rtype: str
        """
        return self._lifecycle_action_token

    @lifecycle_action_token.setter
    def lifecycle_action_token(self, lifecycle_action_token):
        """Sets the lifecycle_action_token of this RecordLifecycleActionHeartbeatType.


        :param lifecycle_action_token: The lifecycle_action_token of this RecordLifecycleActionHeartbeatType.
        :type lifecycle_action_token: str
        """

        self._lifecycle_action_token = lifecycle_action_token

    @property
    def instance_id(self):
        """Gets the instance_id of this RecordLifecycleActionHeartbeatType.


        :return: The instance_id of this RecordLifecycleActionHeartbeatType.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this RecordLifecycleActionHeartbeatType.


        :param instance_id: The instance_id of this RecordLifecycleActionHeartbeatType.
        :type instance_id: str
        """

        self._instance_id = instance_id
