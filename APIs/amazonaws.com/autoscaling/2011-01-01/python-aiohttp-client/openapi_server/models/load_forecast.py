# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.load_forecast_metric_specification import LoadForecastMetricSpecification
from openapi_server import util


class LoadForecast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamps: List=None, values: List=None, metric_specification: LoadForecastMetricSpecification=None):
        """LoadForecast - a model defined in OpenAPI

        :param timestamps: The timestamps of this LoadForecast.
        :param values: The values of this LoadForecast.
        :param metric_specification: The metric_specification of this LoadForecast.
        """
        self.openapi_types = {
            'timestamps': List,
            'values': List,
            'metric_specification': LoadForecastMetricSpecification
        }

        self.attribute_map = {
            'timestamps': 'Timestamps',
            'values': 'Values',
            'metric_specification': 'MetricSpecification'
        }

        self._timestamps = timestamps
        self._values = values
        self._metric_specification = metric_specification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadForecast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadForecast of this LoadForecast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamps(self):
        """Gets the timestamps of this LoadForecast.


        :return: The timestamps of this LoadForecast.
        :rtype: List
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """Sets the timestamps of this LoadForecast.


        :param timestamps: The timestamps of this LoadForecast.
        :type timestamps: List
        """
        if timestamps is None:
            raise ValueError("Invalid value for `timestamps`, must not be `None`")

        self._timestamps = timestamps

    @property
    def values(self):
        """Gets the values of this LoadForecast.


        :return: The values of this LoadForecast.
        :rtype: List
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this LoadForecast.


        :param values: The values of this LoadForecast.
        :type values: List
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values

    @property
    def metric_specification(self):
        """Gets the metric_specification of this LoadForecast.


        :return: The metric_specification of this LoadForecast.
        :rtype: LoadForecastMetricSpecification
        """
        return self._metric_specification

    @metric_specification.setter
    def metric_specification(self, metric_specification):
        """Sets the metric_specification of this LoadForecast.


        :param metric_specification: The metric_specification of this LoadForecast.
        :type metric_specification: LoadForecastMetricSpecification
        """
        if metric_specification is None:
            raise ValueError("Invalid value for `metric_specification`, must not be `None`")

        self._metric_specification = metric_specification
