/*
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets LifecycleState
 */
@JsonAdapter(LifecycleState.Adapter.class)
public enum LifecycleState {
  
  PENDING("Pending"),
  
  PENDING_WAIT("Pending:Wait"),
  
  PENDING_PROCEED("Pending:Proceed"),
  
  QUARANTINED("Quarantined"),
  
  IN_SERVICE("InService"),
  
  TERMINATING("Terminating"),
  
  TERMINATING_WAIT("Terminating:Wait"),
  
  TERMINATING_PROCEED("Terminating:Proceed"),
  
  TERMINATED("Terminated"),
  
  DETACHING("Detaching"),
  
  DETACHED("Detached"),
  
  ENTERING_STANDBY("EnteringStandby"),
  
  STANDBY("Standby"),
  
  WARMED_PENDING("Warmed:Pending"),
  
  WARMED_PENDING_WAIT("Warmed:Pending:Wait"),
  
  WARMED_PENDING_PROCEED("Warmed:Pending:Proceed"),
  
  WARMED_TERMINATING("Warmed:Terminating"),
  
  WARMED_TERMINATING_WAIT("Warmed:Terminating:Wait"),
  
  WARMED_TERMINATING_PROCEED("Warmed:Terminating:Proceed"),
  
  WARMED_TERMINATED("Warmed:Terminated"),
  
  WARMED_STOPPED("Warmed:Stopped"),
  
  WARMED_RUNNING("Warmed:Running"),
  
  WARMED_HIBERNATED("Warmed:Hibernated");

  private String value;

  LifecycleState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static LifecycleState fromValue(String value) {
    for (LifecycleState b : LifecycleState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<LifecycleState> {
    @Override
    public void write(final JsonWriter jsonWriter, final LifecycleState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public LifecycleState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return LifecycleState.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    LifecycleState.fromValue(value);
  }
}

