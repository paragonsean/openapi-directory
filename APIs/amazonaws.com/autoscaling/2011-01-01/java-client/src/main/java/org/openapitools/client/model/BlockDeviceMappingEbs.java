/*
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BlockDeviceMappingEbs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:42.641692-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BlockDeviceMappingEbs {
  public static final String SERIALIZED_NAME_SNAPSHOT_ID = "SnapshotId";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_ID)
  private String snapshotId;

  public static final String SERIALIZED_NAME_VOLUME_SIZE = "VolumeSize";
  @SerializedName(SERIALIZED_NAME_VOLUME_SIZE)
  private Integer volumeSize;

  public static final String SERIALIZED_NAME_VOLUME_TYPE = "VolumeType";
  @SerializedName(SERIALIZED_NAME_VOLUME_TYPE)
  private String volumeType;

  public static final String SERIALIZED_NAME_DELETE_ON_TERMINATION = "DeleteOnTermination";
  @SerializedName(SERIALIZED_NAME_DELETE_ON_TERMINATION)
  private Boolean deleteOnTermination;

  public static final String SERIALIZED_NAME_IOPS = "Iops";
  @SerializedName(SERIALIZED_NAME_IOPS)
  private Integer iops;

  public static final String SERIALIZED_NAME_ENCRYPTED = "Encrypted";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED)
  private Boolean encrypted;

  public static final String SERIALIZED_NAME_THROUGHPUT = "Throughput";
  @SerializedName(SERIALIZED_NAME_THROUGHPUT)
  private Integer throughput;

  public BlockDeviceMappingEbs() {
  }

  public BlockDeviceMappingEbs snapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

  /**
   * Get snapshotId
   * @return snapshotId
   */
  @javax.annotation.Nullable
  public String getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
  }


  public BlockDeviceMappingEbs volumeSize(Integer volumeSize) {
    this.volumeSize = volumeSize;
    return this;
  }

  /**
   * Get volumeSize
   * @return volumeSize
   */
  @javax.annotation.Nullable
  public Integer getVolumeSize() {
    return volumeSize;
  }

  public void setVolumeSize(Integer volumeSize) {
    this.volumeSize = volumeSize;
  }


  public BlockDeviceMappingEbs volumeType(String volumeType) {
    this.volumeType = volumeType;
    return this;
  }

  /**
   * Get volumeType
   * @return volumeType
   */
  @javax.annotation.Nullable
  public String getVolumeType() {
    return volumeType;
  }

  public void setVolumeType(String volumeType) {
    this.volumeType = volumeType;
  }


  public BlockDeviceMappingEbs deleteOnTermination(Boolean deleteOnTermination) {
    this.deleteOnTermination = deleteOnTermination;
    return this;
  }

  /**
   * Get deleteOnTermination
   * @return deleteOnTermination
   */
  @javax.annotation.Nullable
  public Boolean getDeleteOnTermination() {
    return deleteOnTermination;
  }

  public void setDeleteOnTermination(Boolean deleteOnTermination) {
    this.deleteOnTermination = deleteOnTermination;
  }


  public BlockDeviceMappingEbs iops(Integer iops) {
    this.iops = iops;
    return this;
  }

  /**
   * Get iops
   * @return iops
   */
  @javax.annotation.Nullable
  public Integer getIops() {
    return iops;
  }

  public void setIops(Integer iops) {
    this.iops = iops;
  }


  public BlockDeviceMappingEbs encrypted(Boolean encrypted) {
    this.encrypted = encrypted;
    return this;
  }

  /**
   * Get encrypted
   * @return encrypted
   */
  @javax.annotation.Nullable
  public Boolean getEncrypted() {
    return encrypted;
  }

  public void setEncrypted(Boolean encrypted) {
    this.encrypted = encrypted;
  }


  public BlockDeviceMappingEbs throughput(Integer throughput) {
    this.throughput = throughput;
    return this;
  }

  /**
   * Get throughput
   * @return throughput
   */
  @javax.annotation.Nullable
  public Integer getThroughput() {
    return throughput;
  }

  public void setThroughput(Integer throughput) {
    this.throughput = throughput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockDeviceMappingEbs blockDeviceMappingEbs = (BlockDeviceMappingEbs) o;
    return Objects.equals(this.snapshotId, blockDeviceMappingEbs.snapshotId) &&
        Objects.equals(this.volumeSize, blockDeviceMappingEbs.volumeSize) &&
        Objects.equals(this.volumeType, blockDeviceMappingEbs.volumeType) &&
        Objects.equals(this.deleteOnTermination, blockDeviceMappingEbs.deleteOnTermination) &&
        Objects.equals(this.iops, blockDeviceMappingEbs.iops) &&
        Objects.equals(this.encrypted, blockDeviceMappingEbs.encrypted) &&
        Objects.equals(this.throughput, blockDeviceMappingEbs.throughput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snapshotId, volumeSize, volumeType, deleteOnTermination, iops, encrypted, throughput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockDeviceMappingEbs {\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("    volumeSize: ").append(toIndentedString(volumeSize)).append("\n");
    sb.append("    volumeType: ").append(toIndentedString(volumeType)).append("\n");
    sb.append("    deleteOnTermination: ").append(toIndentedString(deleteOnTermination)).append("\n");
    sb.append("    iops: ").append(toIndentedString(iops)).append("\n");
    sb.append("    encrypted: ").append(toIndentedString(encrypted)).append("\n");
    sb.append("    throughput: ").append(toIndentedString(throughput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SnapshotId");
    openapiFields.add("VolumeSize");
    openapiFields.add("VolumeType");
    openapiFields.add("DeleteOnTermination");
    openapiFields.add("Iops");
    openapiFields.add("Encrypted");
    openapiFields.add("Throughput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlockDeviceMappingEbs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlockDeviceMappingEbs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlockDeviceMappingEbs is not found in the empty JSON string", BlockDeviceMappingEbs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlockDeviceMappingEbs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlockDeviceMappingEbs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SnapshotId`
      if (jsonObj.get("SnapshotId") != null && !jsonObj.get("SnapshotId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotId"));
      }
      // validate the optional field `VolumeSize`
      if (jsonObj.get("VolumeSize") != null && !jsonObj.get("VolumeSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("VolumeSize"));
      }
      // validate the optional field `VolumeType`
      if (jsonObj.get("VolumeType") != null && !jsonObj.get("VolumeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VolumeType"));
      }
      // validate the optional field `DeleteOnTermination`
      if (jsonObj.get("DeleteOnTermination") != null && !jsonObj.get("DeleteOnTermination").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeleteOnTermination"));
      }
      // validate the optional field `Iops`
      if (jsonObj.get("Iops") != null && !jsonObj.get("Iops").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Iops"));
      }
      // validate the optional field `Encrypted`
      if (jsonObj.get("Encrypted") != null && !jsonObj.get("Encrypted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Encrypted"));
      }
      // validate the optional field `Throughput`
      if (jsonObj.get("Throughput") != null && !jsonObj.get("Throughput").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Throughput"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockDeviceMappingEbs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockDeviceMappingEbs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockDeviceMappingEbs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockDeviceMappingEbs.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockDeviceMappingEbs>() {
           @Override
           public void write(JsonWriter out, BlockDeviceMappingEbs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockDeviceMappingEbs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlockDeviceMappingEbs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlockDeviceMappingEbs
   * @throws IOException if the JSON string is invalid with respect to BlockDeviceMappingEbs
   */
  public static BlockDeviceMappingEbs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockDeviceMappingEbs.class);
  }

  /**
   * Convert an instance of BlockDeviceMappingEbs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

