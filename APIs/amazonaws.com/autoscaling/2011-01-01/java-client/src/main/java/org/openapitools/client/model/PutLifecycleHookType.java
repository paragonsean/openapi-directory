/*
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutLifecycleHookType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:42.641692-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutLifecycleHookType {
  public static final String SERIALIZED_NAME_LIFECYCLE_HOOK_NAME = "LifecycleHookName";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE_HOOK_NAME)
  private String lifecycleHookName;

  public static final String SERIALIZED_NAME_AUTO_SCALING_GROUP_NAME = "AutoScalingGroupName";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALING_GROUP_NAME)
  private String autoScalingGroupName;

  public static final String SERIALIZED_NAME_LIFECYCLE_TRANSITION = "LifecycleTransition";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE_TRANSITION)
  private String lifecycleTransition;

  public static final String SERIALIZED_NAME_ROLE_A_R_N = "RoleARN";
  @SerializedName(SERIALIZED_NAME_ROLE_A_R_N)
  private String roleARN;

  public static final String SERIALIZED_NAME_NOTIFICATION_TARGET_A_R_N = "NotificationTargetARN";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TARGET_A_R_N)
  private String notificationTargetARN;

  public static final String SERIALIZED_NAME_NOTIFICATION_METADATA = "NotificationMetadata";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_METADATA)
  private String notificationMetadata;

  public static final String SERIALIZED_NAME_HEARTBEAT_TIMEOUT = "HeartbeatTimeout";
  @SerializedName(SERIALIZED_NAME_HEARTBEAT_TIMEOUT)
  private Integer heartbeatTimeout;

  public static final String SERIALIZED_NAME_DEFAULT_RESULT = "DefaultResult";
  @SerializedName(SERIALIZED_NAME_DEFAULT_RESULT)
  private String defaultResult;

  public PutLifecycleHookType() {
  }

  public PutLifecycleHookType lifecycleHookName(String lifecycleHookName) {
    this.lifecycleHookName = lifecycleHookName;
    return this;
  }

  /**
   * Get lifecycleHookName
   * @return lifecycleHookName
   */
  @javax.annotation.Nonnull
  public String getLifecycleHookName() {
    return lifecycleHookName;
  }

  public void setLifecycleHookName(String lifecycleHookName) {
    this.lifecycleHookName = lifecycleHookName;
  }


  public PutLifecycleHookType autoScalingGroupName(String autoScalingGroupName) {
    this.autoScalingGroupName = autoScalingGroupName;
    return this;
  }

  /**
   * Get autoScalingGroupName
   * @return autoScalingGroupName
   */
  @javax.annotation.Nonnull
  public String getAutoScalingGroupName() {
    return autoScalingGroupName;
  }

  public void setAutoScalingGroupName(String autoScalingGroupName) {
    this.autoScalingGroupName = autoScalingGroupName;
  }


  public PutLifecycleHookType lifecycleTransition(String lifecycleTransition) {
    this.lifecycleTransition = lifecycleTransition;
    return this;
  }

  /**
   * Get lifecycleTransition
   * @return lifecycleTransition
   */
  @javax.annotation.Nullable
  public String getLifecycleTransition() {
    return lifecycleTransition;
  }

  public void setLifecycleTransition(String lifecycleTransition) {
    this.lifecycleTransition = lifecycleTransition;
  }


  public PutLifecycleHookType roleARN(String roleARN) {
    this.roleARN = roleARN;
    return this;
  }

  /**
   * Get roleARN
   * @return roleARN
   */
  @javax.annotation.Nullable
  public String getRoleARN() {
    return roleARN;
  }

  public void setRoleARN(String roleARN) {
    this.roleARN = roleARN;
  }


  public PutLifecycleHookType notificationTargetARN(String notificationTargetARN) {
    this.notificationTargetARN = notificationTargetARN;
    return this;
  }

  /**
   * Get notificationTargetARN
   * @return notificationTargetARN
   */
  @javax.annotation.Nullable
  public String getNotificationTargetARN() {
    return notificationTargetARN;
  }

  public void setNotificationTargetARN(String notificationTargetARN) {
    this.notificationTargetARN = notificationTargetARN;
  }


  public PutLifecycleHookType notificationMetadata(String notificationMetadata) {
    this.notificationMetadata = notificationMetadata;
    return this;
  }

  /**
   * Get notificationMetadata
   * @return notificationMetadata
   */
  @javax.annotation.Nullable
  public String getNotificationMetadata() {
    return notificationMetadata;
  }

  public void setNotificationMetadata(String notificationMetadata) {
    this.notificationMetadata = notificationMetadata;
  }


  public PutLifecycleHookType heartbeatTimeout(Integer heartbeatTimeout) {
    this.heartbeatTimeout = heartbeatTimeout;
    return this;
  }

  /**
   * Get heartbeatTimeout
   * @return heartbeatTimeout
   */
  @javax.annotation.Nullable
  public Integer getHeartbeatTimeout() {
    return heartbeatTimeout;
  }

  public void setHeartbeatTimeout(Integer heartbeatTimeout) {
    this.heartbeatTimeout = heartbeatTimeout;
  }


  public PutLifecycleHookType defaultResult(String defaultResult) {
    this.defaultResult = defaultResult;
    return this;
  }

  /**
   * Get defaultResult
   * @return defaultResult
   */
  @javax.annotation.Nullable
  public String getDefaultResult() {
    return defaultResult;
  }

  public void setDefaultResult(String defaultResult) {
    this.defaultResult = defaultResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutLifecycleHookType putLifecycleHookType = (PutLifecycleHookType) o;
    return Objects.equals(this.lifecycleHookName, putLifecycleHookType.lifecycleHookName) &&
        Objects.equals(this.autoScalingGroupName, putLifecycleHookType.autoScalingGroupName) &&
        Objects.equals(this.lifecycleTransition, putLifecycleHookType.lifecycleTransition) &&
        Objects.equals(this.roleARN, putLifecycleHookType.roleARN) &&
        Objects.equals(this.notificationTargetARN, putLifecycleHookType.notificationTargetARN) &&
        Objects.equals(this.notificationMetadata, putLifecycleHookType.notificationMetadata) &&
        Objects.equals(this.heartbeatTimeout, putLifecycleHookType.heartbeatTimeout) &&
        Objects.equals(this.defaultResult, putLifecycleHookType.defaultResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lifecycleHookName, autoScalingGroupName, lifecycleTransition, roleARN, notificationTargetARN, notificationMetadata, heartbeatTimeout, defaultResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutLifecycleHookType {\n");
    sb.append("    lifecycleHookName: ").append(toIndentedString(lifecycleHookName)).append("\n");
    sb.append("    autoScalingGroupName: ").append(toIndentedString(autoScalingGroupName)).append("\n");
    sb.append("    lifecycleTransition: ").append(toIndentedString(lifecycleTransition)).append("\n");
    sb.append("    roleARN: ").append(toIndentedString(roleARN)).append("\n");
    sb.append("    notificationTargetARN: ").append(toIndentedString(notificationTargetARN)).append("\n");
    sb.append("    notificationMetadata: ").append(toIndentedString(notificationMetadata)).append("\n");
    sb.append("    heartbeatTimeout: ").append(toIndentedString(heartbeatTimeout)).append("\n");
    sb.append("    defaultResult: ").append(toIndentedString(defaultResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LifecycleHookName");
    openapiFields.add("AutoScalingGroupName");
    openapiFields.add("LifecycleTransition");
    openapiFields.add("RoleARN");
    openapiFields.add("NotificationTargetARN");
    openapiFields.add("NotificationMetadata");
    openapiFields.add("HeartbeatTimeout");
    openapiFields.add("DefaultResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LifecycleHookName");
    openapiRequiredFields.add("AutoScalingGroupName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutLifecycleHookType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutLifecycleHookType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutLifecycleHookType is not found in the empty JSON string", PutLifecycleHookType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutLifecycleHookType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutLifecycleHookType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutLifecycleHookType.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `LifecycleHookName`
      String.validateJsonElement(jsonObj.get("LifecycleHookName"));
      // validate the required field `AutoScalingGroupName`
      String.validateJsonElement(jsonObj.get("AutoScalingGroupName"));
      // validate the optional field `LifecycleTransition`
      if (jsonObj.get("LifecycleTransition") != null && !jsonObj.get("LifecycleTransition").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LifecycleTransition"));
      }
      // validate the optional field `RoleARN`
      if (jsonObj.get("RoleARN") != null && !jsonObj.get("RoleARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleARN"));
      }
      // validate the optional field `NotificationTargetARN`
      if (jsonObj.get("NotificationTargetARN") != null && !jsonObj.get("NotificationTargetARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NotificationTargetARN"));
      }
      // validate the optional field `NotificationMetadata`
      if (jsonObj.get("NotificationMetadata") != null && !jsonObj.get("NotificationMetadata").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NotificationMetadata"));
      }
      // validate the optional field `HeartbeatTimeout`
      if (jsonObj.get("HeartbeatTimeout") != null && !jsonObj.get("HeartbeatTimeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HeartbeatTimeout"));
      }
      // validate the optional field `DefaultResult`
      if (jsonObj.get("DefaultResult") != null && !jsonObj.get("DefaultResult").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultResult"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutLifecycleHookType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutLifecycleHookType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutLifecycleHookType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutLifecycleHookType.class));

       return (TypeAdapter<T>) new TypeAdapter<PutLifecycleHookType>() {
           @Override
           public void write(JsonWriter out, PutLifecycleHookType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutLifecycleHookType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutLifecycleHookType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutLifecycleHookType
   * @throws IOException if the JSON string is invalid with respect to PutLifecycleHookType
   */
  public static PutLifecycleHookType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutLifecycleHookType.class);
  }

  /**
   * Convert an instance of PutLifecycleHookType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

