/*
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.InstanceRefreshDesiredConfiguration;
import org.openapitools.client.model.InstanceRefreshPreferences;
import org.openapitools.client.model.InstanceRefreshProgressDetails;
import org.openapitools.client.model.InstanceRefreshRollbackDetails;
import org.openapitools.client.model.InstanceRefreshStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an instance refresh for an Auto Scaling group. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:42.641692-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceRefresh {
  public static final String SERIALIZED_NAME_INSTANCE_REFRESH_ID = "InstanceRefreshId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_REFRESH_ID)
  private String instanceRefreshId;

  public static final String SERIALIZED_NAME_AUTO_SCALING_GROUP_NAME = "AutoScalingGroupName";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALING_GROUP_NAME)
  private String autoScalingGroupName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private InstanceRefreshStatus status;

  public static final String SERIALIZED_NAME_STATUS_REASON = "StatusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  private String statusReason;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_PERCENTAGE_COMPLETE = "PercentageComplete";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_COMPLETE)
  private Integer percentageComplete;

  public static final String SERIALIZED_NAME_INSTANCES_TO_UPDATE = "InstancesToUpdate";
  @SerializedName(SERIALIZED_NAME_INSTANCES_TO_UPDATE)
  private Integer instancesToUpdate;

  public static final String SERIALIZED_NAME_PROGRESS_DETAILS = "ProgressDetails";
  @SerializedName(SERIALIZED_NAME_PROGRESS_DETAILS)
  private InstanceRefreshProgressDetails progressDetails;

  public static final String SERIALIZED_NAME_PREFERENCES = "Preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private InstanceRefreshPreferences preferences;

  public static final String SERIALIZED_NAME_DESIRED_CONFIGURATION = "DesiredConfiguration";
  @SerializedName(SERIALIZED_NAME_DESIRED_CONFIGURATION)
  private InstanceRefreshDesiredConfiguration desiredConfiguration;

  public static final String SERIALIZED_NAME_ROLLBACK_DETAILS = "RollbackDetails";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_DETAILS)
  private InstanceRefreshRollbackDetails rollbackDetails;

  public InstanceRefresh() {
  }

  public InstanceRefresh instanceRefreshId(String instanceRefreshId) {
    this.instanceRefreshId = instanceRefreshId;
    return this;
  }

  /**
   * Get instanceRefreshId
   * @return instanceRefreshId
   */
  @javax.annotation.Nullable
  public String getInstanceRefreshId() {
    return instanceRefreshId;
  }

  public void setInstanceRefreshId(String instanceRefreshId) {
    this.instanceRefreshId = instanceRefreshId;
  }


  public InstanceRefresh autoScalingGroupName(String autoScalingGroupName) {
    this.autoScalingGroupName = autoScalingGroupName;
    return this;
  }

  /**
   * Get autoScalingGroupName
   * @return autoScalingGroupName
   */
  @javax.annotation.Nullable
  public String getAutoScalingGroupName() {
    return autoScalingGroupName;
  }

  public void setAutoScalingGroupName(String autoScalingGroupName) {
    this.autoScalingGroupName = autoScalingGroupName;
  }


  public InstanceRefresh status(InstanceRefreshStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public InstanceRefreshStatus getStatus() {
    return status;
  }

  public void setStatus(InstanceRefreshStatus status) {
    this.status = status;
  }


  public InstanceRefresh statusReason(String statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nullable
  public String getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(String statusReason) {
    this.statusReason = statusReason;
  }


  public InstanceRefresh startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public InstanceRefresh endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public InstanceRefresh percentageComplete(Integer percentageComplete) {
    this.percentageComplete = percentageComplete;
    return this;
  }

  /**
   * Get percentageComplete
   * @return percentageComplete
   */
  @javax.annotation.Nullable
  public Integer getPercentageComplete() {
    return percentageComplete;
  }

  public void setPercentageComplete(Integer percentageComplete) {
    this.percentageComplete = percentageComplete;
  }


  public InstanceRefresh instancesToUpdate(Integer instancesToUpdate) {
    this.instancesToUpdate = instancesToUpdate;
    return this;
  }

  /**
   * Get instancesToUpdate
   * @return instancesToUpdate
   */
  @javax.annotation.Nullable
  public Integer getInstancesToUpdate() {
    return instancesToUpdate;
  }

  public void setInstancesToUpdate(Integer instancesToUpdate) {
    this.instancesToUpdate = instancesToUpdate;
  }


  public InstanceRefresh progressDetails(InstanceRefreshProgressDetails progressDetails) {
    this.progressDetails = progressDetails;
    return this;
  }

  /**
   * Get progressDetails
   * @return progressDetails
   */
  @javax.annotation.Nullable
  public InstanceRefreshProgressDetails getProgressDetails() {
    return progressDetails;
  }

  public void setProgressDetails(InstanceRefreshProgressDetails progressDetails) {
    this.progressDetails = progressDetails;
  }


  public InstanceRefresh preferences(InstanceRefreshPreferences preferences) {
    this.preferences = preferences;
    return this;
  }

  /**
   * Get preferences
   * @return preferences
   */
  @javax.annotation.Nullable
  public InstanceRefreshPreferences getPreferences() {
    return preferences;
  }

  public void setPreferences(InstanceRefreshPreferences preferences) {
    this.preferences = preferences;
  }


  public InstanceRefresh desiredConfiguration(InstanceRefreshDesiredConfiguration desiredConfiguration) {
    this.desiredConfiguration = desiredConfiguration;
    return this;
  }

  /**
   * Get desiredConfiguration
   * @return desiredConfiguration
   */
  @javax.annotation.Nullable
  public InstanceRefreshDesiredConfiguration getDesiredConfiguration() {
    return desiredConfiguration;
  }

  public void setDesiredConfiguration(InstanceRefreshDesiredConfiguration desiredConfiguration) {
    this.desiredConfiguration = desiredConfiguration;
  }


  public InstanceRefresh rollbackDetails(InstanceRefreshRollbackDetails rollbackDetails) {
    this.rollbackDetails = rollbackDetails;
    return this;
  }

  /**
   * Get rollbackDetails
   * @return rollbackDetails
   */
  @javax.annotation.Nullable
  public InstanceRefreshRollbackDetails getRollbackDetails() {
    return rollbackDetails;
  }

  public void setRollbackDetails(InstanceRefreshRollbackDetails rollbackDetails) {
    this.rollbackDetails = rollbackDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceRefresh instanceRefresh = (InstanceRefresh) o;
    return Objects.equals(this.instanceRefreshId, instanceRefresh.instanceRefreshId) &&
        Objects.equals(this.autoScalingGroupName, instanceRefresh.autoScalingGroupName) &&
        Objects.equals(this.status, instanceRefresh.status) &&
        Objects.equals(this.statusReason, instanceRefresh.statusReason) &&
        Objects.equals(this.startTime, instanceRefresh.startTime) &&
        Objects.equals(this.endTime, instanceRefresh.endTime) &&
        Objects.equals(this.percentageComplete, instanceRefresh.percentageComplete) &&
        Objects.equals(this.instancesToUpdate, instanceRefresh.instancesToUpdate) &&
        Objects.equals(this.progressDetails, instanceRefresh.progressDetails) &&
        Objects.equals(this.preferences, instanceRefresh.preferences) &&
        Objects.equals(this.desiredConfiguration, instanceRefresh.desiredConfiguration) &&
        Objects.equals(this.rollbackDetails, instanceRefresh.rollbackDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceRefreshId, autoScalingGroupName, status, statusReason, startTime, endTime, percentageComplete, instancesToUpdate, progressDetails, preferences, desiredConfiguration, rollbackDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceRefresh {\n");
    sb.append("    instanceRefreshId: ").append(toIndentedString(instanceRefreshId)).append("\n");
    sb.append("    autoScalingGroupName: ").append(toIndentedString(autoScalingGroupName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    percentageComplete: ").append(toIndentedString(percentageComplete)).append("\n");
    sb.append("    instancesToUpdate: ").append(toIndentedString(instancesToUpdate)).append("\n");
    sb.append("    progressDetails: ").append(toIndentedString(progressDetails)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    desiredConfiguration: ").append(toIndentedString(desiredConfiguration)).append("\n");
    sb.append("    rollbackDetails: ").append(toIndentedString(rollbackDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InstanceRefreshId");
    openapiFields.add("AutoScalingGroupName");
    openapiFields.add("Status");
    openapiFields.add("StatusReason");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("PercentageComplete");
    openapiFields.add("InstancesToUpdate");
    openapiFields.add("ProgressDetails");
    openapiFields.add("Preferences");
    openapiFields.add("DesiredConfiguration");
    openapiFields.add("RollbackDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceRefresh
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceRefresh.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceRefresh is not found in the empty JSON string", InstanceRefresh.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceRefresh.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceRefresh` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InstanceRefreshId`
      if (jsonObj.get("InstanceRefreshId") != null && !jsonObj.get("InstanceRefreshId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceRefreshId"));
      }
      // validate the optional field `AutoScalingGroupName`
      if (jsonObj.get("AutoScalingGroupName") != null && !jsonObj.get("AutoScalingGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AutoScalingGroupName"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        InstanceRefreshStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StatusReason`
      if (jsonObj.get("StatusReason") != null && !jsonObj.get("StatusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusReason"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `PercentageComplete`
      if (jsonObj.get("PercentageComplete") != null && !jsonObj.get("PercentageComplete").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PercentageComplete"));
      }
      // validate the optional field `InstancesToUpdate`
      if (jsonObj.get("InstancesToUpdate") != null && !jsonObj.get("InstancesToUpdate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstancesToUpdate"));
      }
      // validate the optional field `ProgressDetails`
      if (jsonObj.get("ProgressDetails") != null && !jsonObj.get("ProgressDetails").isJsonNull()) {
        InstanceRefreshProgressDetails.validateJsonElement(jsonObj.get("ProgressDetails"));
      }
      // validate the optional field `Preferences`
      if (jsonObj.get("Preferences") != null && !jsonObj.get("Preferences").isJsonNull()) {
        InstanceRefreshPreferences.validateJsonElement(jsonObj.get("Preferences"));
      }
      // validate the optional field `DesiredConfiguration`
      if (jsonObj.get("DesiredConfiguration") != null && !jsonObj.get("DesiredConfiguration").isJsonNull()) {
        InstanceRefreshDesiredConfiguration.validateJsonElement(jsonObj.get("DesiredConfiguration"));
      }
      // validate the optional field `RollbackDetails`
      if (jsonObj.get("RollbackDetails") != null && !jsonObj.get("RollbackDetails").isJsonNull()) {
        InstanceRefreshRollbackDetails.validateJsonElement(jsonObj.get("RollbackDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceRefresh.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceRefresh' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceRefresh> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceRefresh.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceRefresh>() {
           @Override
           public void write(JsonWriter out, InstanceRefresh value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceRefresh read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceRefresh given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceRefresh
   * @throws IOException if the JSON string is invalid with respect to InstanceRefresh
   */
  public static InstanceRefresh fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceRefresh.class);
  }

  /**
   * Convert an instance of InstanceRefresh to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

