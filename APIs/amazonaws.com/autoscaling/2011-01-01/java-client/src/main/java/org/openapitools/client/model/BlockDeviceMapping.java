/*
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BlockDeviceMappingEbs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a block device mapping.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:42.641692-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BlockDeviceMapping {
  public static final String SERIALIZED_NAME_VIRTUAL_NAME = "VirtualName";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NAME)
  private String virtualName;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "DeviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_EBS = "Ebs";
  @SerializedName(SERIALIZED_NAME_EBS)
  private BlockDeviceMappingEbs ebs;

  public static final String SERIALIZED_NAME_NO_DEVICE = "NoDevice";
  @SerializedName(SERIALIZED_NAME_NO_DEVICE)
  private Boolean noDevice;

  public BlockDeviceMapping() {
  }

  public BlockDeviceMapping virtualName(String virtualName) {
    this.virtualName = virtualName;
    return this;
  }

  /**
   * Get virtualName
   * @return virtualName
   */
  @javax.annotation.Nullable
  public String getVirtualName() {
    return virtualName;
  }

  public void setVirtualName(String virtualName) {
    this.virtualName = virtualName;
  }


  public BlockDeviceMapping deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Get deviceName
   * @return deviceName
   */
  @javax.annotation.Nonnull
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public BlockDeviceMapping ebs(BlockDeviceMappingEbs ebs) {
    this.ebs = ebs;
    return this;
  }

  /**
   * Get ebs
   * @return ebs
   */
  @javax.annotation.Nullable
  public BlockDeviceMappingEbs getEbs() {
    return ebs;
  }

  public void setEbs(BlockDeviceMappingEbs ebs) {
    this.ebs = ebs;
  }


  public BlockDeviceMapping noDevice(Boolean noDevice) {
    this.noDevice = noDevice;
    return this;
  }

  /**
   * Get noDevice
   * @return noDevice
   */
  @javax.annotation.Nullable
  public Boolean getNoDevice() {
    return noDevice;
  }

  public void setNoDevice(Boolean noDevice) {
    this.noDevice = noDevice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockDeviceMapping blockDeviceMapping = (BlockDeviceMapping) o;
    return Objects.equals(this.virtualName, blockDeviceMapping.virtualName) &&
        Objects.equals(this.deviceName, blockDeviceMapping.deviceName) &&
        Objects.equals(this.ebs, blockDeviceMapping.ebs) &&
        Objects.equals(this.noDevice, blockDeviceMapping.noDevice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(virtualName, deviceName, ebs, noDevice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockDeviceMapping {\n");
    sb.append("    virtualName: ").append(toIndentedString(virtualName)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    ebs: ").append(toIndentedString(ebs)).append("\n");
    sb.append("    noDevice: ").append(toIndentedString(noDevice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VirtualName");
    openapiFields.add("DeviceName");
    openapiFields.add("Ebs");
    openapiFields.add("NoDevice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DeviceName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlockDeviceMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlockDeviceMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlockDeviceMapping is not found in the empty JSON string", BlockDeviceMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlockDeviceMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlockDeviceMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlockDeviceMapping.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `VirtualName`
      if (jsonObj.get("VirtualName") != null && !jsonObj.get("VirtualName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VirtualName"));
      }
      // validate the required field `DeviceName`
      String.validateJsonElement(jsonObj.get("DeviceName"));
      // validate the optional field `Ebs`
      if (jsonObj.get("Ebs") != null && !jsonObj.get("Ebs").isJsonNull()) {
        BlockDeviceMappingEbs.validateJsonElement(jsonObj.get("Ebs"));
      }
      // validate the optional field `NoDevice`
      if (jsonObj.get("NoDevice") != null && !jsonObj.get("NoDevice").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("NoDevice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockDeviceMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockDeviceMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockDeviceMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockDeviceMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockDeviceMapping>() {
           @Override
           public void write(JsonWriter out, BlockDeviceMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockDeviceMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlockDeviceMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlockDeviceMapping
   * @throws IOException if the JSON string is invalid with respect to BlockDeviceMapping
   */
  public static BlockDeviceMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockDeviceMapping.class);
  }

  /**
   * Convert an instance of BlockDeviceMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

